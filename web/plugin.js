/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _api = __webpack_require__(2);

var _api2 = _interopRequireDefault(_api);

var _hello = __webpack_require__(3);

var _hello2 = _interopRequireDefault(_hello);

var _weexVueRender = __webpack_require__(4);

var _weexVueRender2 = _interopRequireDefault(_weexVueRender);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// console.log()
// Weex.install(hello)
_weexVueRender2.default.install(_api2.default);
// Weex.install(hello)

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var weextest = {

  setTitle: function setTitle(title) {
    title = title || 'Weex HTML5';
    try {
      title = decodeURIComponent(title);
    } catch (e) {}
    document.title = title;
  },
  log: function log(param) {
    console.log(param);
    weex.requireModule('modal').toast({ message: param });
  }
};

var meta = {
  weextest: [{
    name: 'setTitle',
    args: ['string']
  }]
};

var init = function init(Weex) {
  Weex.registerApiModule('weextest', weextest, meta);
};

exports.default = {
  init: init
};

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var _css = '\nbody > .weex-div {\n  min-height: 100%;\n}\n';

function getDiv(weex) {
  var extractComponentStyle = weex.extractComponentStyle,
      trimTextVNodes = weex.trimTextVNodes;


  return {
    name: 'weex-div',
    render: function render(createElement) {
      return createElement('html:div', {
        attrs: { 'weex-type': 'div' },
        staticClass: 'weex-div weex-ct',
        staticStyle: extractComponentStyle(this)
      }, trimTextVNodes(this.$slots.default));
    },

    _css: _css
  };
}

exports.default = {
  init: function init(weex) {
    var div = getDiv(weex);
    weex.registerComponent('div', div);
    weex.registerComponent('container', div);
  }
};

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {
console.log('START WEEX VUE RENDER: 0.12.25, Build 2017-10-31 22:13.');


'use strict';

function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);
  
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  return returnValue;
}
__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n \n.weex-root,\n.weex-root * {\n  color: initial;\n  cursor: initial;\n  direction: initial;\n  font: initial;\n  font-family: initial;\n  font-size: initial;\n  font-style: initial;\n  font-variant: initial;\n  font-weight: initial;\n  line-height: initial;\n  text-align: initial;\n  text-indent: initial;\n  visibility: initial;\n  white-space: initial;\n  word-spacing: initial;\n  font-family: BlinkMacSystemFont, 'Source Sans Pro', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.weex-root,\n.weex-root *,\n.weex-root *::before,\n.weex-root *::after {\n  box-sizing: border-box;\n  -webkit-text-size-adjust: none;\n  -moz-text-size-adjust: none;\n  -ms-text-size-adjust: none;\n  text-size-adjust: none;\n}\n\n.weex-root a,\n.weex-root button,\n.weex-root [role=\"button\"],\n.weex-root input,\n.weex-root label,\n.weex-root select,\n.weex-root textarea {\n  -ms-touch-action: manipulation;\n      touch-action: manipulation;\n}\n\n.weex-root p,\n.weex-root ol,\n.weex-root ul,\n.weex-root dl {\n  margin: 0;\n  padding: 0;\n}\n\n.weex-root li {\n  list-style: none;\n}\n\n.weex-root figure {\n  margin: 0;\n}\n\n.weex-root textarea {\n  resize: none;\n}\n\n/* show no scroll bar. */\n::-webkit-scrollbar {\n  display: none;\n}\n",undefined);

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n \n.weex-root * {\n  border-width: 0;\n  border-color: inherit;\n  border-style: solid;\n}\n\n.weex-flex-ct {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.weex-ct {\n  box-sizing: border-box;\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex;\n  position: relative;\n  -webkit-box-orient: vertical;\n  -webkit-flex-direction: column;\n  -moz-box-orient: vertical;\n  -moz-box-direction: normal;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  -webkit-flex-grow: 0;\n  -moz-box-flex: 0;\n  -ms-flex-grow: 0;\n  flex-grow: 0;\n  -webkit-flex-basis: auto;\n  -ms-flex-preferred-size: auto;\n  flex-basis: auto;\n  -webkit-box-align: stretch;\n  -webkit-align-items: stretch;\n  -moz-box-align: stretch;\n  -ms-flex-align: stretch;\n  align-items: stretch;\n  -webkit-align-content: flex-start;\n  -ms-flex-line-pack: start;\n  align-content: flex-start;\n  border: 0 solid black;\n  margin: 0;\n  padding: 0;\n  min-width: 0;\n}\n\n.weex-ct.horizontal {\n  -webkit-box-orient: horizontal;\n  -webkit-flex-direction: row;\n  -moz-box-orient: horizontal;\n  -moz-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n}\n\n.weex-el {\n  display: block;\n  box-sizing: border-box;\n  position: relative;\n  -webkit-flex-shrink: 0;\n  -ms-flex-negative: 0;\n  flex-shrink: 0;\n  -webkit-flex-grow: 0;\n  -moz-box-flex: 0;\n  -ms-flex-grow: 0;\n  flex-grow: 0;\n  -webkit-flex-basis: auto;\n  -ms-flex-preferred-size: auto;\n  flex-basis: auto;\n  border: 0 solid black;\n  margin: 0;\n  padding: 0;\n  min-width: 0;\n}\n\n.weex-ios-sticky {\n  position: -webkit-sticky !important;\n  position: sticky !important;\n  z-index: 9999;\n  top: 0;\n}\n\n.weex-fixed {\n  position: fixed;\n  z-index: 1;\n}\n\n.weex-sticky {\n  position: fixed;\n  top: 0;\n  z-index: 9999;\n}\n",undefined);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* eslint-disable */

var isInitialized = false;

// major events supported:
//   panstart
//   panmove
//   panend
//   swipe
//   longpress
// extra events supported:
//   dualtouchstart
//   dualtouch
//   dualtouchend
//   tap
//   doubletap
//   pressend

var doc = window.document;
var docEl = doc.documentElement;
var slice = Array.prototype.slice;
var gestures = {};
var lastTap = null;

/**
 * find the closest common ancestor
 * if there's no one, return null
 *
 * @param  {Element} el1 first element
 * @param  {Element} el2 second element
 * @return {Element}     common ancestor
 */
function getCommonAncestor(el1, el2) {
  var el = el1;
  while (el) {
    if (el.contains(el2) || el == el2) {
      return el
    }
    el = el.parentNode;
  }
  return null
}

/**
 * fire a HTMLEvent
 *
 * @param  {Element} element which element to fire a event on
 * @param  {string}  type    type of event
 * @param  {object}  extra   extra data for the event object
 */
function fireEvent(element, type, extra) {
  var event = doc.createEvent('HTMLEvents');
  event.initEvent(type, true, true);

  if (typeof extra === 'object') {
    for (var p in extra) {
      event[p] = extra[p];
    }
  }

  /**
   * A flag to distinguish with other events with the same name generated
   * by another library in the same page.
   */ 
  event._for = 'weex';

  element.dispatchEvent(event);
}

/**
 * calc the transform
 * assume 4 points ABCD on the coordinate system
 * > rotate：angle rotating from AB to CD
 * > scale：scale ratio from AB to CD
 * > translate：translate shift from A to C
 *
 * @param  {number} x1 abscissa of A
 * @param  {number} y1 ordinate of A
 * @param  {number} x2 abscissa of B
 * @param  {number} y2 ordinate of B
 * @param  {number} x3 abscissa of C
 * @param  {number} y3 ordinate of C
 * @param  {number} x4 abscissa of D
 * @param  {number} y4 ordinate of D
 * @return {object}    transform object like
 *   {rotate, scale, translate[2], matrix[3][3]}
 */
function calc(x1, y1, x2, y2, x3, y3, x4, y4) {
  var rotate = Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y2 - y1, x2 - x1);
  var scale = Math.sqrt((Math.pow(y4 - y3, 2)
    + Math.pow(x4 - x3, 2)) / (Math.pow(y2 - y1, 2)
    + Math.pow(x2 - x1, 2)));
  var translate = [
    x3
    - scale * x1 * Math.cos(rotate)
    + scale * y1 * Math.sin(rotate),
    y3
    - scale * y1 * Math.cos(rotate)
    - scale * x1 * Math.sin(rotate)];

  return {
    rotate: rotate,
    scale: scale,
    translate: translate,
    matrix: [
      [scale * Math.cos(rotate), -scale * Math.sin(rotate), translate[0]],
      [scale * Math.sin(rotate), scale * Math.cos(rotate), translate[1]],
      [0, 0, 1]
    ]
  }
}

/**
 * take over the touchstart events. Add new touches to the gestures.
 * If there is no previous records, then bind touchmove, tochend
 * and touchcancel events.
 * new touches initialized with state 'tapping', and within 500 milliseconds
 * if the state is still tapping, then trigger gesture 'press'.
 * If there are two touche points, then the 'dualtouchstart' is triggerd. The
 * node of the touch gesture is their cloest common ancestor.
 *
 * @event
 * @param  {event} event
 */
function touchstartHandler(event) {

  if (Object.keys(gestures).length === 0) {
    docEl.addEventListener('touchmove', touchmoveHandler, false);
    docEl.addEventListener('touchend', touchendHandler, false);
    docEl.addEventListener('touchcancel', touchcancelHandler, false);
  }

  // record every touch
  for (var i = 0; i < event.changedTouches.length; i++) {
    var touch = event.changedTouches[i];
    var touchRecord = {};

    for (var p in touch) {
      touchRecord[p] = touch[p];
    }

    var gesture = {
      startTouch: touchRecord,
      startTime: Date.now(),
      status: 'tapping',
      element: event.srcElement || event.target,
      pressingHandler: setTimeout(function (element, touch) {
        return function () {
          if (gesture.status === 'tapping') {
            gesture.status = 'pressing';

            fireEvent(element, 'longpress', {
              // add touch data for weex
              touch: touch,
              touches: event.touches,
              changedTouches: event.changedTouches,
              touchEvent: event
            });
          }

          clearTimeout(gesture.pressingHandler);
          gesture.pressingHandler = null;
        }
      }(event.srcElement || event.target, event.changedTouches[i]), 500)
    };
    gestures[touch.identifier] = gesture;
  }

  if (Object.keys(gestures).length == 2) {
    var elements = [];

    for (var p in gestures) {
      elements.push(gestures[p].element);
    }

    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchstart', {
      touches: slice.call(event.touches),
      touchEvent: event
    });
  }
}

/**
 * take over touchmove events, and handle pan and dual related gestures.
 *
 * 1. traverse every touch point：
 * > if 'tapping' and the shift is over 10 pixles, then it's a 'panning'.
 * 2. if there are two touch points, then calc the tranform and trigger
 *   'dualtouch'.
 *
 * @event
 * @param  {event} event
 */
function touchmoveHandler(event) {
  for (var i = 0; i < event.changedTouches.length; i++) {
    var touch = event.changedTouches[i];
    var gesture = gestures[touch.identifier];

    if (!gesture) {
      return
    }

    if (!gesture.lastTouch) {
      gesture.lastTouch = gesture.startTouch;
    }
    if (!gesture.lastTime) {
      gesture.lastTime = gesture.startTime;
    }
    if (!gesture.velocityX) {
      gesture.velocityX = 0;
    }
    if (!gesture.velocityY) {
      gesture.velocityY = 0;
    }
    if (!gesture.duration) {
      gesture.duration = 0;
    }

    var time =  Date.now() - gesture.lastTime;
    var vx = (touch.clientX - gesture.lastTouch.clientX) / time;
    var vy = (touch.clientY - gesture.lastTouch.clientY) / time;

    var RECORD_DURATION = 70;
    if (time > RECORD_DURATION) {
      time = RECORD_DURATION;
    }
    if (gesture.duration + time > RECORD_DURATION) {
      gesture.duration = RECORD_DURATION - time;
    }

    gesture.velocityX = (gesture.velocityX * gesture.duration + vx * time)
      / (gesture.duration + time);
    gesture.velocityY = (gesture.velocityY * gesture.duration + vy * time)
      / (gesture.duration + time);
    gesture.duration += time;

    gesture.lastTouch = {};

    for (var p in touch) {
      gesture.lastTouch[p] = touch[p];
    }
    gesture.lastTime = Date.now();

    var displacementX = touch.clientX - gesture.startTouch.clientX;
    var displacementY = touch.clientY - gesture.startTouch.clientY;
    var distance = Math.sqrt(Math.pow(displacementX, 2)
      + Math.pow(displacementY, 2));
    var isVertical = !(Math.abs(displacementX) > Math.abs(displacementY));
    var direction = isVertical
      ? displacementY >= 0 ? 'down' : 'up'
      : displacementX >= 0 ? 'right' : 'left';

    // magic number 10: moving 10px means pan, not tap
    if ((gesture.status === 'tapping' || gesture.status === 'pressing')
        && distance > 10) {
      gesture.status = 'panning';
      gesture.isVertical = isVertical;
      gesture.direction = direction;

      fireEvent(gesture.element, 'panstart', {
        touch: touch,
        touches: event.touches,
        changedTouches: event.changedTouches,
        touchEvent: event,
        isVertical: gesture.isVertical,
        direction: direction
      });
    }

    if (gesture.status === 'panning') {
      gesture.panTime = Date.now();

      fireEvent(gesture.element, 'panmove', {
        displacementX: displacementX,
        displacementY: displacementY,
        touch: touch,
        touches: event.touches,
        changedTouches: event.changedTouches,
        touchEvent: event,
        isVertical: gesture.isVertical,
        direction: direction
      });
    }
  }

  if (Object.keys(gestures).length == 2) {
    var position = [];
    var current = [];
    var elements = [];
    var transform;

    for (var i = 0; i < event.touches.length; i++) {
      var touch = event.touches[i];
      var gesture = gestures[touch.identifier];
      position.push([gesture.startTouch.clientX, gesture.startTouch.clientY]);
      current.push([touch.clientX, touch.clientY]);
    }

    for (var p in gestures) {
      elements.push(gestures[p].element);
    }

    transform = calc(
      position[0][0],
      position[0][1],
      position[1][0],
      position[1][1],
      current[0][0],
      current[0][1],
      current[1][0],
      current[1][1]
    );
    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouch', {
      transform: transform,
      touches: event.touches,
      touchEvent: event
    });
  }
}

/**
 * handle touchend event
 *
 * 1. if there are tow touch points, then trigger 'dualtouchend'如
 *
 * 2. traverse every touch piont：
 * > if tapping, then trigger 'tap'.
 * If there is a tap 300 milliseconds before, then it's a 'doubletap'.
 * > if padding, then decide to trigger 'panend' or 'swipe'
 * > if pressing, then trigger 'pressend'.
 *
 * 3. remove listeners.
 *
 * @event
 * @param  {event} event
 */
function touchendHandler(event) {

  if (Object.keys(gestures).length == 2) {
    var elements = [];
    for (var p in gestures) {
      elements.push(gestures[p].element);
    }
    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchend', {
      touches: slice.call(event.touches),
      touchEvent: event
    });
  }

  for (var i = 0; i < event.changedTouches.length; i++) {
    var touch = event.changedTouches[i];
    var id = touch.identifier;
    var gesture = gestures[id];

    if (!gesture) {
      continue
    }

    if (gesture.pressingHandler) {
      clearTimeout(gesture.pressingHandler);
      gesture.pressingHandler = null;
    }

    if (gesture.status === 'tapping') {
      gesture.timestamp = Date.now();
      // fire click, not tap.
      fireEvent(gesture.element, 'tap', {
        touch: touch,
        touchEvent: event
      });

      if (lastTap && gesture.timestamp - lastTap.timestamp < 300) {
        fireEvent(gesture.element, 'doubletap', {
          touch: touch,
          touchEvent: event
        });
      }

      lastTap = gesture;
    }

    if (gesture.status === 'panning') {
      var now = Date.now();
      var duration = now - gesture.startTime;
      var displacementX = touch.clientX - gesture.startTouch.clientX;
      var displacementY = touch.clientY - gesture.startTouch.clientY;

      var velocity = Math.sqrt(gesture.velocityY * gesture.velocityY
        + gesture.velocityX * gesture.velocityX);
      var isSwipe = velocity > 0.5 && (now - gesture.lastTime) < 100;
      var extra = {
        duration: duration,
        isSwipe: isSwipe,
        velocityX: gesture.velocityX,
        velocityY: gesture.velocityY,
        displacementX: displacementX,
        displacementY: displacementY,
        touch: touch,
        touches: event.touches,
        changedTouches: event.changedTouches,
        touchEvent: event,
        isVertical: gesture.isVertical,
        direction: gesture.direction
      };

      fireEvent(gesture.element, 'panend', extra);
      if (isSwipe) {
        fireEvent(gesture.element, 'swipe', extra);
      }
    }

    if (gesture.status === 'pressing') {
      fireEvent(gesture.element, 'pressend', {
        touch: touch,
        touchEvent: event
      });
    }

    delete gestures[id];
  }

  if (Object.keys(gestures).length === 0) {
    docEl.removeEventListener('touchmove', touchmoveHandler, false);
    docEl.removeEventListener('touchend', touchendHandler, false);
    docEl.removeEventListener('touchcancel', touchcancelHandler, false);
  }
}

/**
 * handle touchcancel
 *
 * 1. if there are two touch points, then trigger 'dualtouchend'
 *
 * 2. traverse everty touch point:
 * > if pannnig, then trigger 'panend'
 * > if pressing, then trigger 'pressend'
 *
 * 3. remove listeners
 *
 * @event
 * @param  {event} event
 */
function touchcancelHandler(event) {

  if (Object.keys(gestures).length == 2) {
    var elements = [];
    for (var p in gestures) {
      elements.push(gestures[p].element);
    }
    fireEvent(getCommonAncestor(elements[0], elements[1]), 'dualtouchend', {
      touches: slice.call(event.touches),
      touchEvent: event
    });
  }

  for (var i = 0; i < event.changedTouches.length; i++) {
    var touch = event.changedTouches[i];
    var id = touch.identifier;
    var gesture = gestures[id];

    if (!gesture) {
      continue
    }

    if (gesture.pressingHandler) {
      clearTimeout(gesture.pressingHandler);
      gesture.pressingHandler = null;
    }

    if (gesture.status === 'panning') {
      fireEvent(gesture.element, 'panend', {
        touch: touch,
        touches: event.touches,
        changedTouches: event.changedTouches,
        touchEvent: event
      });
    }
    if (gesture.status === 'pressing') {
      fireEvent(gesture.element, 'pressend', {
        touch: touch,
        touchEvent: event
      });
    }
    delete gestures[id];
  }

  if (Object.keys(gestures).length === 0) {
    docEl.removeEventListener('touchmove', touchmoveHandler, false);
    docEl.removeEventListener('touchend', touchendHandler, false);
    docEl.removeEventListener('touchcancel', touchcancelHandler, false);
  }
}

if (!isInitialized) {
  docEl.addEventListener('touchstart', touchstartHandler, false);
  isInitialized = true;
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* eslint-disable */

// Production steps of ECMA-262, Edition 6, 22.1.2.1
// Reference: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-array.from

/* istanbul ignore if */
if (!Array.from) {
  Array.from = (function() {
    var toStr = Object.prototype.toString;
    var isCallable = function(fn) {
      return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };
    var toInteger = function(value) {
      var number = Number(value);
      if (isNaN(number)) {
        return 0;
      }
      if (number === 0 || !isFinite(number)) {
        return number;
      }
      return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function(value) {
      var len = toInteger(value);
      return Math.min(Math.max(len, 0), maxSafeInteger);
    };

    // The length property of the from method is 1.
    return function from(arrayLike/*, mapFn, thisArg */) {
      // 1. Let C be the this value.
      var C = this;

      // 2. Let items be ToObject(arrayLike).
      var items = Object(arrayLike);

      // 3. ReturnIfAbrupt(items).
      if (arrayLike == null) {
        throw new TypeError('Array.from requires an array-like object - not null or undefined');
      }

      // 4. If mapfn is undefined, then let mapping be false.
      var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
      var T;
      if (typeof mapFn !== 'undefined') {
        // 5. else
        // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
        if (!isCallable(mapFn)) {
          throw new TypeError('Array.from: when provided, the second argument must be a function');
        }

        // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
        if (arguments.length > 2) {
          T = arguments[2];
        }
      }

      // 10. Let lenValue be Get(items, "length").
      // 11. Let len be ToLength(lenValue).
      var len = toLength(items.length);

      // 13. If IsConstructor(C) is true, then
      // 13. a. Let A be the result of calling the [[Construct]] internal method of C with an argument list containing the single item len.
      // 14. a. Else, Let A be ArrayCreate(len).
      var A = isCallable(C) ? Object(new C(len)) : new Array(len);

      // 16. Let k be 0.
      var k = 0;
      // 17. Repeat, while k < len… (also steps a - h)
      var kValue;
      while (k < len) {
        kValue = items[k];
        if (mapFn) {
          A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
        } else {
          A[k] = kValue;
        }
        k += 1;
      }
      // 18. Let putStatus be Put(A, "length", len, true).
      A.length = len;
      // 20. Return A.
      return A;
    };
  }());
}

function unwrapExports (x) {
	return x && x.__esModule ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var _global = createCommonjsModule(function (module) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();
if (typeof __g == 'number') { __g = global; } // eslint-disable-line no-undef
});

var _core = createCommonjsModule(function (module) {
var core = module.exports = { version: '2.5.1' };
if (typeof __e == 'number') { __e = core; } // eslint-disable-line no-undef
});

var _isObject = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

var isObject = _isObject;
var _anObject = function (it) {
  if (!isObject(it)) { throw TypeError(it + ' is not an object!'); }
  return it;
};

var _fails = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

// Thank's IE8 for his funny defineProperty
var _descriptors = !_fails(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

var isObject$1 = _isObject;
var document$1 = _global.document;
// typeof document.createElement is 'object' in old IE
var is = isObject$1(document$1) && isObject$1(document$1.createElement);
var _domCreate = function (it) {
  return is ? document$1.createElement(it) : {};
};

var _ie8DomDefine = !_descriptors && !_fails(function () {
  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
});

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject$2 = _isObject;
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
var _toPrimitive = function (it, S) {
  if (!isObject$2(it)) { return it; }
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject$2(val = fn.call(it))) { return val; }
  if (typeof (fn = it.valueOf) == 'function' && !isObject$2(val = fn.call(it))) { return val; }
  if (!S && typeof (fn = it.toString) == 'function' && !isObject$2(val = fn.call(it))) { return val; }
  throw TypeError("Can't convert object to primitive value");
};

var anObject = _anObject;
var IE8_DOM_DEFINE = _ie8DomDefine;
var toPrimitive = _toPrimitive;
var dP$1 = Object.defineProperty;

var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) { try {
    return dP$1(O, P, Attributes);
  } catch (e) { /* empty */ } }
  if ('get' in Attributes || 'set' in Attributes) { throw TypeError('Accessors not supported!'); }
  if ('value' in Attributes) { O[P] = Attributes.value; }
  return O;
};

var _objectDp = {
	f: f
};

var _propertyDesc = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var dP = _objectDp;
var createDesc = _propertyDesc;
var _hide = _descriptors ? function (object, key, value) {
  return dP.f(object, key, createDesc(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var hasOwnProperty = {}.hasOwnProperty;
var _has = function (it, key) {
  return hasOwnProperty.call(it, key);
};

var id = 0;
var px = Math.random();
var _uid = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

var _redefine = createCommonjsModule(function (module) {
var global = _global;
var hide = _hide;
var has = _has;
var SRC = _uid('src');
var TO_STRING = 'toString';
var $toString = Function[TO_STRING];
var TPL = ('' + $toString).split(TO_STRING);

_core.inspectSource = function (it) {
  return $toString.call(it);
};

(module.exports = function (O, key, val, safe) {
  var isFunction = typeof val == 'function';
  if (isFunction) { has(val, 'name') || hide(val, 'name', key); }
  if (O[key] === val) { return; }
  if (isFunction) { has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key))); }
  if (O === global) {
    O[key] = val;
  } else if (!safe) {
    delete O[key];
    hide(O, key, val);
  } else if (O[key]) {
    O[key] = val;
  } else {
    hide(O, key, val);
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString() {
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
});

var _aFunction = function (it) {
  if (typeof it != 'function') { throw TypeError(it + ' is not a function!'); }
  return it;
};

// optional / simple context binding
var aFunction = _aFunction;
var _ctx = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) { return fn; }
  switch (length) {
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

var global$1 = _global;
var core = _core;
var hide = _hide;
var redefine = _redefine;
var ctx = _ctx;
var PROTOTYPE = 'prototype';

var $export$1 = function (type, name, source) {
  var IS_FORCED = type & $export$1.F;
  var IS_GLOBAL = type & $export$1.G;
  var IS_STATIC = type & $export$1.S;
  var IS_PROTO = type & $export$1.P;
  var IS_BIND = type & $export$1.B;
  var target = IS_GLOBAL ? global$1 : IS_STATIC ? global$1[name] || (global$1[name] = {}) : (global$1[name] || {})[PROTOTYPE];
  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});
  var key, own, out, exp;
  if (IS_GLOBAL) { source = name; }
  for (key in source) {
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global$1) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if (target) { redefine(target, key, out, type & $export$1.U); }
    // export
    if (exports[key] != out) { hide(exports, key, exp); }
    if (IS_PROTO && expProto[key] != out) { expProto[key] = out; }
  }
};
global$1.core = core;
// type bitmap
$export$1.F = 1;   // forced
$export$1.G = 2;   // global
$export$1.S = 4;   // static
$export$1.P = 8;   // proto
$export$1.B = 16;  // bind
$export$1.W = 32;  // wrap
$export$1.U = 64;  // safe
$export$1.R = 128; // real proto method for `library`
var _export = $export$1;

var toString$1 = {}.toString;

var _cof = function (it) {
  return toString$1.call(it).slice(8, -1);
};

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = _cof;
// eslint-disable-next-line no-prototype-builtins
var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
  return cof(it) == 'String' ? it.split('') : Object(it);
};

// 7.2.1 RequireObjectCoercible(argument)
var _defined = function (it) {
  if (it == undefined) { throw TypeError("Can't call method on  " + it); }
  return it;
};

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject$1 = _iobject;
var defined = _defined;
var _toIobject = function (it) {
  return IObject$1(defined(it));
};

// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
var _toInteger = function (it) {
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

// 7.1.15 ToLength
var toInteger = _toInteger;
var min = Math.min;
var _toLength = function (it) {
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

var toInteger$1 = _toInteger;
var max = Math.max;
var min$1 = Math.min;
var _toAbsoluteIndex = function (index, length) {
  index = toInteger$1(index);
  return index < 0 ? max(index + length, 0) : min$1(index, length);
};

// false -> Array#indexOf
// true  -> Array#includes
var toIObject$1 = _toIobject;
var toLength = _toLength;
var toAbsoluteIndex = _toAbsoluteIndex;
var _arrayIncludes = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIObject$1($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) { while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) { return true; }
    // Array#indexOf ignores holes, Array#includes - not
    } } else { for (;length > index; index++) { if (IS_INCLUDES || index in O) {
      if (O[index] === el) { return IS_INCLUDES || index || 0; }
    } } } return !IS_INCLUDES && -1;
  };
};

var global$2 = _global;
var SHARED = '__core-js_shared__';
var store = global$2[SHARED] || (global$2[SHARED] = {});
var _shared = function (key) {
  return store[key] || (store[key] = {});
};

var shared = _shared('keys');
var uid = _uid;
var _sharedKey = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

var has = _has;
var toIObject = _toIobject;
var arrayIndexOf = _arrayIncludes(false);
var IE_PROTO = _sharedKey('IE_PROTO');

var _objectKeysInternal = function (object, names) {
  var O = toIObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) { if (key != IE_PROTO) { has(O, key) && result.push(key); } }
  // Don't enum bug & hidden keys
  while (names.length > i) { if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  } }
  return result;
};

// IE 8- don't enum bug keys
var _enumBugKeys = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = _objectKeysInternal;
var enumBugKeys = _enumBugKeys;

var _objectKeys = Object.keys || function keys(O) {
  return $keys(O, enumBugKeys);
};

var f$1 = Object.getOwnPropertySymbols;

var _objectGops = {
	f: f$1
};

var f$2 = {}.propertyIsEnumerable;

var _objectPie = {
	f: f$2
};

// 7.1.13 ToObject(argument)
var defined$1 = _defined;
var _toObject = function (it) {
  return Object(defined$1(it));
};

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys = _objectKeys;
var gOPS = _objectGops;
var pIE = _objectPie;
var toObject = _toObject;
var IObject = _iobject;
var $assign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
var _objectAssign = !$assign || _fails(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var S = Symbol();
  var K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function (k) { B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source) {
  var arguments$1 = arguments;
 // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var aLen = arguments.length;
  var index = 1;
  var getSymbols = gOPS.f;
  var isEnum = pIE.f;
  while (aLen > index) {
    var S = IObject(arguments$1[index++]);
    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) { if (isEnum.call(S, key = keys[j++])) { T[key] = S[key]; } }
  } return T;
} : $assign;

// 19.1.3.1 Object.assign(target, source)
var $export = _export;

$export($export.S + $export.F, 'Object', { assign: _objectAssign });

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* eslint-disable */

// https://gist.github.com/WebReflection/5593554

/* istanbul ignore if */
if (!Object.setPrototypeOf) {
  Object.setPrototypeOf = (function(Object, magic) {
    var set;
    function setPrototypeOf(O, proto) {
      set.call(O, proto);
      return O;
    }
    try {
      // this works already in Firefox and Safari
      set = Object.getOwnPropertyDescriptor(Object.prototype, magic).set;
      set.call({}, null);
    } catch (e) {
      if (
        // IE < 11 cannot be shimmed
        Object.prototype !== {}[magic] ||
        // neither can any browser that actually
        // implemented __proto__ correctly
        // (all but old V8 will return here)
        {__proto__: null}.__proto__ === void 0
        // this case means null objects cannot be passed
        // through setPrototypeOf in a reliable way
        // which means here a **Sham** is needed instead
      ) {
        return;
      }
      // nodejs 0.8 and 0.10 are (buggy and..) fine here
      // probably Chrome or some old Mobile stock browser
      set = function(proto) {
        this[magic] = proto;
      };
      // please note that this will **not** work
      // in those browsers that do not inherit
      // __proto__ by mistake from Object.prototype
      // in these cases we should probably throw an error
      // or at least be informed about the issue
      setPrototypeOf.polyfill = setPrototypeOf(
        setPrototypeOf({}, null),
        Object.prototype
      ) instanceof Object;
      // setPrototypeOf.polyfill === true means it works as meant
      // setPrototypeOf.polyfill === false means it's not 100% reliable
      // setPrototypeOf.polyfill === undefined
      // or
      // setPrototypeOf.polyfill ==  null means it's not a polyfill
      // which means it works as expected
      // we can even delete Object.prototype.__proto__;
    }
    return setPrototypeOf;
  }(Object, '__proto__'));
}

var _wks = createCommonjsModule(function (module) {
var store = _shared('wks');
var uid = _uid;
var Symbol = _global.Symbol;
var USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function (name) {
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
});

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof$1 = _cof;
var TAG = _wks('toStringTag');
// ES3 wrong here
var ARG = cof$1(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

var _classof = function (it) {
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof$1(O)
    // ES3 arguments fallback
    : (B = cof$1(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

// 19.1.3.6 Object.prototype.toString()
var classof = _classof;
var test = {};
test[_wks('toStringTag')] = 'z';
if (test + '' != '[object z]') {
  _redefine(Object.prototype, 'toString', function toString() {
    return '[object ' + classof(this) + ']';
  }, true);
}

var toInteger$2 = _toInteger;
var defined$2 = _defined;
// true  -> String#at
// false -> String#codePointAt
var _stringAt = function (TO_STRING) {
  return function (that, pos) {
    var s = String(defined$2(that));
    var i = toInteger$2(pos);
    var l = s.length;
    var a, b;
    if (i < 0 || i >= l) { return TO_STRING ? '' : undefined; }
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

var _library = false;

var _iterators = {};

var dP$2 = _objectDp;
var anObject$2 = _anObject;
var getKeys$1 = _objectKeys;

var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$2(O);
  var keys = getKeys$1(Properties);
  var length = keys.length;
  var i = 0;
  var P;
  while (length > i) { dP$2.f(O, P = keys[i++], Properties[P]); }
  return O;
};

var document$2 = _global.document;
var _html = document$2 && document$2.documentElement;

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject$1 = _anObject;
var dPs = _objectDps;
var enumBugKeys$1 = _enumBugKeys;
var IE_PROTO$1 = _sharedKey('IE_PROTO');
var Empty = function () { /* empty */ };
var PROTOTYPE$1 = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = _domCreate('iframe');
  var i = enumBugKeys$1.length;
  var lt = '<';
  var gt = '>';
  var iframeDocument;
  iframe.style.display = 'none';
  _html.appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (i--) { delete createDict[PROTOTYPE$1][enumBugKeys$1[i]]; }
  return createDict();
};

var _objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE$1] = anObject$1(O);
    result = new Empty();
    Empty[PROTOTYPE$1] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO$1] = O;
  } else { result = createDict(); }
  return Properties === undefined ? result : dPs(result, Properties);
};

var def = _objectDp.f;
var has$2 = _has;
var TAG$1 = _wks('toStringTag');

var _setToStringTag = function (it, tag, stat) {
  if (it && !has$2(it = stat ? it : it.prototype, TAG$1)) { def(it, TAG$1, { configurable: true, value: tag }); }
};

var create$1 = _objectCreate;
var descriptor = _propertyDesc;
var setToStringTag$1 = _setToStringTag;
var IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
_hide(IteratorPrototype, _wks('iterator'), function () { return this; });

var _iterCreate = function (Constructor, NAME, next) {
  Constructor.prototype = create$1(IteratorPrototype, { next: descriptor(1, next) });
  setToStringTag$1(Constructor, NAME + ' Iterator');
};

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has$3 = _has;
var toObject$1 = _toObject;
var IE_PROTO$2 = _sharedKey('IE_PROTO');
var ObjectProto = Object.prototype;

var _objectGpo = Object.getPrototypeOf || function (O) {
  O = toObject$1(O);
  if (has$3(O, IE_PROTO$2)) { return O[IE_PROTO$2]; }
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

var LIBRARY = _library;
var $export$2 = _export;
var redefine$1 = _redefine;
var hide$1 = _hide;
var has$1 = _has;
var Iterators = _iterators;
var $iterCreate = _iterCreate;
var setToStringTag = _setToStringTag;
var getPrototypeOf = _objectGpo;
var ITERATOR = _wks('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';

var returnThis = function () { return this; };

var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
  $iterCreate(Constructor, NAME, next);
  var getMethod = function (kind) {
    if (!BUGGY && kind in proto) { return proto[kind]; }
    switch (kind) {
      case KEYS: return function keys() { return new Constructor(this, kind); };
      case VALUES: return function values() { return new Constructor(this, kind); };
    } return function entries() { return new Constructor(this, kind); };
  };
  var TAG = NAME + ' Iterator';
  var DEF_VALUES = DEFAULT == VALUES;
  var VALUES_BUG = false;
  var proto = Base.prototype;
  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
  var $default = $native || getMethod(DEFAULT);
  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
  var methods, key, IteratorPrototype;
  // Fix native
  if ($anyNative) {
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if (!LIBRARY && !has$1(IteratorPrototype, ITERATOR)) { hide$1(IteratorPrototype, ITERATOR, returnThis); }
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEF_VALUES && $native && $native.name !== VALUES) {
    VALUES_BUG = true;
    $default = function values() { return $native.call(this); };
  }
  // Define iterator
  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
    hide$1(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG] = returnThis;
  if (DEFAULT) {
    methods = {
      values: DEF_VALUES ? $default : getMethod(VALUES),
      keys: IS_SET ? $default : getMethod(KEYS),
      entries: $entries
    };
    if (FORCED) { for (key in methods) {
      if (!(key in proto)) { redefine$1(proto, key, methods[key]); }
    } } else { $export$2($export$2.P + $export$2.F * (BUGGY || VALUES_BUG), NAME, methods); }
  }
  return methods;
};

var $at = _stringAt(true);

// 21.1.3.27 String.prototype[@@iterator]()
_iterDefine(String, 'String', function (iterated) {
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var index = this._i;
  var point;
  if (index >= O.length) { return { value: undefined, done: true }; }
  point = $at(O, index);
  this._i += point.length;
  return { value: point, done: false };
});

// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = _wks('unscopables');
var ArrayProto = Array.prototype;
if (ArrayProto[UNSCOPABLES] == undefined) { _hide(ArrayProto, UNSCOPABLES, {}); }
var _addToUnscopables = function (key) {
  ArrayProto[UNSCOPABLES][key] = true;
};

var _iterStep = function (done, value) {
  return { value: value, done: !!done };
};

var addToUnscopables = _addToUnscopables;
var step = _iterStep;
var Iterators$2 = _iterators;
var toIObject$2 = _toIobject;

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
  this._t = toIObject$2(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function () {
  var O = this._t;
  var kind = this._k;
  var index = this._i++;
  if (!O || index >= O.length) {
    this._t = undefined;
    return step(1);
  }
  if (kind == 'keys') { return step(0, index); }
  if (kind == 'values') { return step(0, O[index]); }
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators$2.Arguments = Iterators$2.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

var $iterators = es6_array_iterator;
var getKeys$2 = _objectKeys;
var redefine$2 = _redefine;
var global$3 = _global;
var hide$2 = _hide;
var Iterators$1 = _iterators;
var wks = _wks;
var ITERATOR$1 = wks('iterator');
var TO_STRING_TAG = wks('toStringTag');
var ArrayValues = Iterators$1.Array;

var DOMIterables = {
  CSSRuleList: true, // TODO: Not spec compliant, should be false.
  CSSStyleDeclaration: false,
  CSSValueList: false,
  ClientRectList: false,
  DOMRectList: false,
  DOMStringList: false,
  DOMTokenList: true,
  DataTransferItemList: false,
  FileList: false,
  HTMLAllCollection: false,
  HTMLCollection: false,
  HTMLFormElement: false,
  HTMLSelectElement: false,
  MediaList: true, // TODO: Not spec compliant, should be false.
  MimeTypeArray: false,
  NamedNodeMap: false,
  NodeList: true,
  PaintRequestList: false,
  Plugin: false,
  PluginArray: false,
  SVGLengthList: false,
  SVGNumberList: false,
  SVGPathSegList: false,
  SVGPointList: false,
  SVGStringList: false,
  SVGTransformList: false,
  SourceBufferList: false,
  StyleSheetList: true, // TODO: Not spec compliant, should be false.
  TextTrackCueList: false,
  TextTrackList: false,
  TouchList: false
};

for (var collections = getKeys$2(DOMIterables), i = 0; i < collections.length; i++) {
  var NAME = collections[i];
  var explicit = DOMIterables[NAME];
  var Collection = global$3[NAME];
  var proto = Collection && Collection.prototype;
  var key;
  if (proto) {
    if (!proto[ITERATOR$1]) { hide$2(proto, ITERATOR$1, ArrayValues); }
    if (!proto[TO_STRING_TAG]) { hide$2(proto, TO_STRING_TAG, NAME); }
    Iterators$1[NAME] = ArrayValues;
    if (explicit) { for (key in $iterators) { if (!proto[key]) { redefine$2(proto, key, $iterators[key], true); } } }
  }
}

var _anInstance = function (it, Constructor, name, forbiddenField) {
  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

// call something on iterator step with safe closing on error
var anObject$3 = _anObject;
var _iterCall = function (iterator, fn, value, entries) {
  try {
    return entries ? fn(anObject$3(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch (e) {
    var ret = iterator['return'];
    if (ret !== undefined) { anObject$3(ret.call(iterator)); }
    throw e;
  }
};

// check on default Array iterator
var Iterators$3 = _iterators;
var ITERATOR$2 = _wks('iterator');
var ArrayProto$1 = Array.prototype;

var _isArrayIter = function (it) {
  return it !== undefined && (Iterators$3.Array === it || ArrayProto$1[ITERATOR$2] === it);
};

var classof$2 = _classof;
var ITERATOR$3 = _wks('iterator');
var Iterators$4 = _iterators;
var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
  if (it != undefined) { return it[ITERATOR$3]
    || it['@@iterator']
    || Iterators$4[classof$2(it)]; }
};

var _forOf = createCommonjsModule(function (module) {
var ctx = _ctx;
var call = _iterCall;
var isArrayIter = _isArrayIter;
var anObject = _anObject;
var toLength = _toLength;
var getIterFn = core_getIteratorMethod;
var BREAK = {};
var RETURN = {};
var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);
  var f = ctx(fn, that, entries ? 2 : 1);
  var index = 0;
  var length, step, iterator, result;
  if (typeof iterFn != 'function') { throw TypeError(iterable + ' is not iterable!'); }
  // fast case for arrays with default iterator
  if (isArrayIter(iterFn)) { for (length = toLength(iterable.length); length > index; index++) {
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if (result === BREAK || result === RETURN) { return result; }
  } } else { for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
    result = call(iterator, f, step.value, entries);
    if (result === BREAK || result === RETURN) { return result; }
  } }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;
});

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject$4 = _anObject;
var aFunction$2 = _aFunction;
var SPECIES = _wks('species');
var _speciesConstructor = function (O, D) {
  var C = anObject$4(O).constructor;
  var S;
  return C === undefined || (S = anObject$4(C)[SPECIES]) == undefined ? D : aFunction$2(S);
};

// fast apply, http://jsperf.lnkit.com/fast-apply/5
var _invoke = function (fn, args, that) {
  var un = that === undefined;
  switch (args.length) {
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return fn.apply(that, args);
};

var ctx$2 = _ctx;
var invoke = _invoke;
var html = _html;
var cel = _domCreate;
var global$5 = _global;
var process$1 = global$5.process;
var setTask = global$5.setImmediate;
var clearTask = global$5.clearImmediate;
var MessageChannel = global$5.MessageChannel;
var Dispatch = global$5.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer;
var channel;
var port;
var run = function () {
  var id = +this;
  // eslint-disable-next-line no-prototype-builtins
  if (queue.hasOwnProperty(id)) {
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function (event) {
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
  setTask = function setImmediate(fn) {
    var arguments$1 = arguments;

    var args = [];
    var i = 1;
    while (arguments.length > i) { args.push(arguments$1[i++]); }
    queue[++counter] = function () {
      // eslint-disable-next-line no-new-func
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id) {
    delete queue[id];
  };
  // Node.js 0.8-
  if (_cof(process$1) == 'process') {
    defer = function (id) {
      process$1.nextTick(ctx$2(run, id, 1));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(ctx$2(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if (MessageChannel) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx$2(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (global$5.addEventListener && typeof postMessage == 'function' && !global$5.importScripts) {
    defer = function (id) {
      global$5.postMessage(id + '', '*');
    };
    global$5.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in cel('script')) {
    defer = function (id) {
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(ctx$2(run, id, 1), 0);
    };
  }
}
var _task = {
  set: setTask,
  clear: clearTask
};

var global$6 = _global;
var macrotask = _task.set;
var Observer = global$6.MutationObserver || global$6.WebKitMutationObserver;
var process$2 = global$6.process;
var Promise$1 = global$6.Promise;
var isNode$1 = _cof(process$2) == 'process';

var _microtask = function () {
  var head, last, notify;

  var flush = function () {
    var parent, fn;
    if (isNode$1 && (parent = process$2.domain)) { parent.exit(); }
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (e) {
        if (head) { notify(); }
        else { last = undefined; }
        throw e;
      }
    } last = undefined;
    if (parent) { parent.enter(); }
  };

  // Node.js
  if (isNode$1) {
    notify = function () {
      process$2.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if (Observer) {
    var toggle = true;
    var node = document.createTextNode('');
    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
    notify = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (Promise$1 && Promise$1.resolve) {
    var promise = Promise$1.resolve();
    notify = function () {
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function () {
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global$6, flush);
    };
  }

  return function (fn) {
    var task = { fn: fn, next: undefined };
    if (last) { last.next = task; }
    if (!head) {
      head = task;
      notify();
    } last = task;
  };
};

// 25.4.1.5 NewPromiseCapability(C)
var aFunction$3 = _aFunction;

function PromiseCapability(C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) { throw TypeError('Bad Promise constructor'); }
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aFunction$3(resolve);
  this.reject = aFunction$3(reject);
}

var f$3 = function (C) {
  return new PromiseCapability(C);
};

var _newPromiseCapability = {
	f: f$3
};

var _perform = function (exec) {
  try {
    return { e: false, v: exec() };
  } catch (e) {
    return { e: true, v: e };
  }
};

var anObject$5 = _anObject;
var isObject$4 = _isObject;
var newPromiseCapability$1 = _newPromiseCapability;

var _promiseResolve = function (C, x) {
  anObject$5(C);
  if (isObject$4(x) && x.constructor === C) { return x; }
  var promiseCapability = newPromiseCapability$1.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

var redefine$3 = _redefine;
var _redefineAll = function (target, src, safe) {
  for (var key in src) { redefine$3(target, key, src[key], safe); }
  return target;
};

var global$7 = _global;
var dP$3 = _objectDp;
var DESCRIPTORS = _descriptors;
var SPECIES$1 = _wks('species');

var _setSpecies = function (KEY) {
  var C = global$7[KEY];
  if (DESCRIPTORS && C && !C[SPECIES$1]) { dP$3.f(C, SPECIES$1, {
    configurable: true,
    get: function () { return this; }
  }); }
};

var ITERATOR$4 = _wks('iterator');
var SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR$4]();
  riter['return'] = function () { SAFE_CLOSING = true; };
  // eslint-disable-next-line no-throw-literal
  Array.from(riter, function () { throw 2; });
} catch (e) { /* empty */ }

var _iterDetect = function (exec, skipClosing) {
  if (!skipClosing && !SAFE_CLOSING) { return false; }
  var safe = false;
  try {
    var arr = [7];
    var iter = arr[ITERATOR$4]();
    iter.next = function () { return { done: safe = true }; };
    arr[ITERATOR$4] = function () { return iter; };
    exec(arr);
  } catch (e) { /* empty */ }
  return safe;
};

var LIBRARY$1 = _library;
var global$4 = _global;
var ctx$1 = _ctx;
var classof$1 = _classof;
var $export$3 = _export;
var isObject$3 = _isObject;
var aFunction$1 = _aFunction;
var anInstance = _anInstance;
var forOf = _forOf;
var speciesConstructor = _speciesConstructor;
var task = _task.set;
var microtask = _microtask();
var newPromiseCapabilityModule = _newPromiseCapability;
var perform = _perform;
var promiseResolve = _promiseResolve;
var PROMISE = 'Promise';
var TypeError$1 = global$4.TypeError;
var process = global$4.process;
var $Promise = global$4[PROMISE];
var isNode = classof$1(process) == 'process';
var empty = function () { /* empty */ };
var Internal;
var newGenericPromiseCapability;
var OwnPromiseCapability;
var Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;

var USE_NATIVE = !!function () {
  try {
    // correct subclassing with @@species support
    var promise = $Promise.resolve(1);
    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
      exec(empty, empty);
    };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch (e) { /* empty */ }
}();

// helpers
var isThenable = function (it) {
  var then;
  return isObject$3(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function (promise, isReject) {
  if (promise._n) { return; }
  promise._n = true;
  var chain = promise._c;
  microtask(function () {
    var value = promise._v;
    var ok = promise._s == 1;
    var i = 0;
    var run = function (reaction) {
      var handler = ok ? reaction.ok : reaction.fail;
      var resolve = reaction.resolve;
      var reject = reaction.reject;
      var domain = reaction.domain;
      var result, then;
      try {
        if (handler) {
          if (!ok) {
            if (promise._h == 2) { onHandleUnhandled(promise); }
            promise._h = 1;
          }
          if (handler === true) { result = value; }
          else {
            if (domain) { domain.enter(); }
            result = handler(value);
            if (domain) { domain.exit(); }
          }
          if (result === reaction.promise) {
            reject(TypeError$1('Promise-chain cycle'));
          } else if (then = isThenable(result)) {
            then.call(result, resolve, reject);
          } else { resolve(result); }
        } else { reject(value); }
      } catch (e) {
        reject(e);
      }
    };
    while (chain.length > i) { run(chain[i++]); } // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if (isReject && !promise._h) { onUnhandled(promise); }
  });
};
var onUnhandled = function (promise) {
  task.call(global$4, function () {
    var value = promise._v;
    var unhandled = isUnhandled(promise);
    var result, handler, console;
    if (unhandled) {
      result = perform(function () {
        if (isNode) {
          process.emit('unhandledRejection', value, promise);
        } else if (handler = global$4.onunhandledrejection) {
          handler({ promise: promise, reason: value });
        } else if ((console = global$4.console) && console.error) {
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if (unhandled && result.e) { throw result.v; }
  });
};
var isUnhandled = function (promise) {
  if (promise._h == 1) { return false; }
  var chain = promise._a || promise._c;
  var i = 0;
  var reaction;
  while (chain.length > i) {
    reaction = chain[i++];
    if (reaction.fail || !isUnhandled(reaction.promise)) { return false; }
  } return true;
};
var onHandleUnhandled = function (promise) {
  task.call(global$4, function () {
    var handler;
    if (isNode) {
      process.emit('rejectionHandled', promise);
    } else if (handler = global$4.onrejectionhandled) {
      handler({ promise: promise, reason: promise._v });
    }
  });
};
var $reject = function (value) {
  var promise = this;
  if (promise._d) { return; }
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if (!promise._a) { promise._a = promise._c.slice(); }
  notify(promise, true);
};
var $resolve = function (value) {
  var promise = this;
  var then;
  if (promise._d) { return; }
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if (promise === value) { throw TypeError$1("Promise can't be resolved itself"); }
    if (then = isThenable(value)) {
      microtask(function () {
        var wrapper = { _w: promise, _d: false }; // wrap
        try {
          then.call(value, ctx$1($resolve, wrapper, 1), ctx$1($reject, wrapper, 1));
        } catch (e) {
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch (e) {
    $reject.call({ _w: promise, _d: false }, e); // wrap
  }
};

// constructor polyfill
if (!USE_NATIVE) {
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor) {
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction$1(executor);
    Internal.call(this);
    try {
      executor(ctx$1($resolve, this, 1), ctx$1($reject, this, 1));
    } catch (err) {
      $reject.call(this, err);
    }
  };
  // eslint-disable-next-line no-unused-vars
  Internal = function Promise(executor) {
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = _redefineAll($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected) {
      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if (this._a) { this._a.push(reaction); }
      if (this._s) { notify(this, false); }
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function (onRejected) {
      return this.then(undefined, onRejected);
    }
  });
  OwnPromiseCapability = function () {
    var promise = new Internal();
    this.promise = promise;
    this.resolve = ctx$1($resolve, promise, 1);
    this.reject = ctx$1($reject, promise, 1);
  };
  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {
    return C === $Promise || C === Wrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };
}

$export$3($export$3.G + $export$3.W + $export$3.F * !USE_NATIVE, { Promise: $Promise });
_setToStringTag($Promise, PROMISE);
_setSpecies(PROMISE);
Wrapper = _core[PROMISE];

// statics
$export$3($export$3.S + $export$3.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r) {
    var capability = newPromiseCapability(this);
    var $$reject = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export$3($export$3.S + $export$3.F * (LIBRARY$1 || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x) {
    return promiseResolve(LIBRARY$1 && this === Wrapper ? $Promise : this, x);
  }
});
$export$3($export$3.S + $export$3.F * !(USE_NATIVE && _iterDetect(function (iter) {
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform(function () {
      var values = [];
      var index = 0;
      var remaining = 1;
      forOf(iterable, false, function (promise) {
        var $index = index++;
        var alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function (value) {
          if (alreadyCalled) { return; }
          alreadyCalled = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.e) { reject(result.v); }
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapability(C);
    var reject = capability.reject;
    var result = perform(function () {
      forOf(iterable, false, function (promise) {
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if (result.e) { reject(result.v); }
    return capability.promise;
  }
});

var lib$2 = window.lib || (window.lib = {});

/**
 * Version class.
 * @class lib.env~Version
 * @param {String} v - version number.
 */
function Version (v) {
  Object.defineProperty(this, 'val', {
    value: v.toString(),
    enumerable: true
  });

  /**
   * larger than
   * @method gt
   * @param {String} v - version
   * @return {Boolean} result
   * @instance
   * @memberof Version
   */
  this.gt = function (v) {
    return Version.compare(this, v) > 0
  };

  /**
   * larger than or equal to.
   * @method gte
   * @param {String} v - version
   * @return {Boolean} result
   * @instance
   * @memberof Version
   */
  this.gte = function (v) {
    return Version.compare(this, v) >= 0
  };

  /**
   * less than.
   * @method lt
   * @param {String} v - version
   * @return {Boolean} result
   * @instance
   * @memberof Version
   */
  this.lt = function (v) {
    return Version.compare(this, v) < 0
  };

  /**
   * less than or equal to.
   * @method lte
   * @param {String} v - version
   * @return {Boolean} result
   * @instance
   * @memberof Version
   */
  this.lte = function (v) {
    return Version.compare(this, v) <= 0
  };

  /**
   * equal to.
   * @method eq
   * @param {String} v - version
   * @return {Boolean} equal to
   * @instance
   * @memberof Version
   */
  this.eq = function (v) {
    return Version.compare(this, v) === 0
  };
}

/**
 * version number string.
 * @method toString
 * @return {String} current version number string.
 * @instance
 * @memberof Version
 */
Version.prototype.toString = function () {
  return this.val
};

/**
 * return current version number.
 * @method valueOf
 * @return {Boolean} version number
 * @instance
 * @memberof Version
 */
Version.prototype.valueOf = function () {
  var v = this.val.split('.');
  var r = [];
  for (var i = 0; i < v.length; i++) {
    var n = parseInt(v[i], 10);
    if (isNaN(n)) {
      n = 0;
    }
    var s = n.toString();
    if (s.length < 5) {
      s = Array(6 - s.length).join('0') + s;
    }
    r.push(s);
    if (r.length === 1) {
      r.push('.');
    }
  }
  return parseFloat(r.join(''))
};

/**
 * compare two versions.
 * @method compare
 * @param {String} v1 - version1
 * @param {String} v2 - version2
 * @return {Number} 0 for equality，-1 for less than，1 for larger than.
 * @memberof Version
 */
Version.compare = function (v1, v2) {
  v1 = v1.toString().split('.');
  v2 = v2.toString().split('.');
  for (var i = 0; i < v1.length || i < v2.length; i++) {
    var n1 = parseInt(v1[i], 10);
    var n2 = parseInt(v2[i], 10);
    if (window.isNaN(n1)) {
      n1 = 0;
    }
    if (window.isNaN(n2)) {
      n2 = 0;
    }
    if (n1 < n2) {
      return -1
    }
    else if (n1 > n2) {
      return 1
    }
  }
  return 0
};

/**
 * 解析和操作版本号
 * @method version
 * @param {string} v - 需要解析的版本号
 * @return {lib.env~Version} Verson实例
 * @memberof lib
 */
lib$2.version = function (v) {
  return new Version(v)
};

var lib$3 = window.lib || (window.lib = {});
var env$1 = lib$3.env || (lib$3.env = {});

var search = window.location.search.replace(/^\?/, '');
env$1.params = {};
if (search) {
  var params = search.split('&');
  for (var i$1 = 0; i$1 < params.length; i$1++) {
    params[i$1] = params[i$1].split('=');
    try {
      env$1.params[params[i$1][0]] = decodeURIComponent(params[i$1][1]);
    }
    catch (e) {
      env$1.params[params[i$1][0]] = params[i$1][1];
    }
  }
}

var lib$1 = window.lib || (window.lib = {});
var env = lib$1.env || (lib$1.env = {});

var ua = window.navigator.userAgent;
var match;

/**
 * os
 */

match = ua.match(/Windows\sPhone\s(?:OS\s)?([\d.]+)/);
if (match) {
  /**
   * @type {Object}
   * @memberof lib.env
   * @property {String} name - os name, e.g. Android/AndroidPad/iPhone/iPod/iPad/Windows Phone/unknown, etc.
   * @property {lib.env~Version} version - os version.
   * @property {Boolean} isWindowsPhone
   * @property {Boolean} isIPhone - is iPhone/iTouch
   * @property {Boolean} isIPad
   * @property {Boolean} isIOS
   * @property {Boolean} isAndroid
   * @property {Boolean} isAndroidPad
   */
  env.os = {
    name: 'Windows Phone',
    isWindowsPhone: true,
    version: match[1]
  };
}
else if (!!ua.match(/Safari/) && (match = ua.match(/Android[\s/]([\d.]+)/))) {
  env.os = {
    version: match[1]
  };

  if ((ua.match(/Mobile\s+Safari/))) {
    env.os.name = 'Android';
    env.os.isAndroid = true;
  }
  else {
    env.os.name = 'AndroidPad';
    env.os.isAndroidPad = true;
  }
}
else if ((match = ua.match(/(iPhone|iPad|iPod)/))) {
  var name = match[1];

  match = ua.match(/OS ([\d_.]+) like Mac OS X/);

  env.os = {
    name: name,
    isIPhone: (name === 'iPhone' || name === 'iPod'),
    isIPad: name === 'iPad',
    isIOS: true,
    version: match && match[1].split('_').join('.') || ''
  };
}
else {
  env.os = {
    name: 'unknown',
    version: '0.0.0'
  };
}

if (lib$1.version) {
  env.os.version = lib$1.version(env.os.version);
}

/**
 * browser
 */

match = ua.match(/(?:UCWEB|UCBrowser\/)([\d.]+)/);

if (match) {
  /**
   * @type {Object}
   * @memberof env
   * @property {String} name - browser name，e.g. UC/QQ/Firefox/Chrome/Android/Safari/iOS Webview/Chrome Webview/IE/IEMobile/unknown, etc.
   * @property {env~Version} version - browser version.
   * @property {Boolean} isUC
   * @property {Boolean} isQQ
   * @property {Boolean} isIE
   * @property {Boolean} isIEMobile
   * @property {Boolean} isIELikeWebkit
   * @property {Boolean} isChrome
   * @property {Boolean} isAndroid
   * @property {Boolean} isSafari
   * @property {Boolean} isWebview
   */
  env.browser = {
    name: 'UC',
    isUC: true,
    version: match[1]
  };
}
else if ((match = ua.match(/MQQBrowser\/([\d.]+)/))) {
  env.browser = {
    name: 'QQ',
    isQQ: true,
    version: match[1]
  };
}
else if ((match = ua.match(/Firefox\/([\d.]+)/))) {
  env.browser = {
    name: 'Firefox',
    isFirefox: true,
    version: match[1]
  };
}
else if ((match = ua.match(/MSIE\s([\d.]+)/))
  || (match = ua.match(/IEMobile\/([\d.]+)/))) {
  env.browser = {
    version: match[1]
  };

  if (ua.match(/IEMobile/)) {
    env.browser.name = 'IEMobile';
    env.browser.isIEMobile = true;
  }
  else {
    env.browser.name = 'IE';
    env.browser.isIE = true;
  }

  if (ua.match(/Android|iPhone/)) {
    env.browser.isIELikeWebkit = true;
  }
}
else if ((match = ua.match(/(?:Chrome|CriOS)\/([\d.]+)/))) {
  env.browser = {
    name: 'Chrome',
    isChrome: true,
    version: match[1]
  };

  if (ua.match(/Version\/[\d+.]+\s*Chrome/)) {
    env.browser.name = 'Chrome Webview';
    env.browser.isWebview = true;
  }
}
else if (!!ua.match(/Safari/) && (match = ua.match(/Android[\s/]([\d.]+)/))) {
  env.browser = {
    name: 'Android',
    isAndroid: true,
    version: match[1]
  };
}
else if (ua.match(/iPhone|iPad|iPod/)) {
  if (ua.match(/Safari/)) {
    match = ua.match(/Version\/([\d.]+)/);
    env.browser = {
      name: 'Safari',
      isSafari: true,
      version: match && match[1] || ''
    };
  }
  else {
    match = ua.match(/OS ([\d_.]+) like Mac OS X/);
    env.browser = {
      name: 'iOS Webview',
      isWebview: true,
      version: match && match[1].replace(/_/g, '.') || ''
    };
  }
}
else {
  env.browser = {
    name: 'unknown',
    version: '0.0.0'
  };
}

if (lib$1.version) {
  env.browser.version = lib$1.version(env.browser.version);
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// 

var toString$2 = Object.prototype.toString;

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 *
 * @param {*} obj
 * @return {Boolean}
 */
var OBJECT_STRING = '[object Object]';
function isPlainObject (obj) {
  return toString$2.call(obj) === OBJECT_STRING
}

var ARRAY_STRING = '[object Array]';
function isArray (arr) {
  return toString$2.call(arr) === ARRAY_STRING
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// 
/**
 * Mix properties into target object.
 * the rightest object's value has the highest priority.
 */
function extend (to) {
  var args = [], len = arguments.length - 1;
  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  if (!args || args.length <= 0) {
    return to
  }
  args.forEach(function (from) {
    if (typeof from !== 'object') {
      return
    }
    for (var key in from) {
      to[key] = from[key];
    }
  });
  return to
}
/**
 * Mix truthy or '' property values into target object.
 * mostly for merging styles. (that's why '' is falsy but still should be counted in.)
 * the rightest object's value has the highest priority.
 */
function extendTruthy (to) {
  var args = [], len = arguments.length - 1;
  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  if (!args || args.length <= 0) {
    return to
  }
  args.forEach(function (from) {
    if (typeof from !== 'object') {
      return
    }
    var i;
    for (var key in from) {
      if (((i = from[key]) || i === '' || i === 0) && i !== 'undefined') {
        to[key] = i;
      }
    }
  });
  return to
}
/**
 * Mix specified properties into target object.
 */
function extendKeys (to, from, keys) {
  if ( from === void 0 ) from = {};

  (keys || []).forEach(function (key) {
    from && (to[key] = from[key]);
  });
  return to
}
/**
 * Extract specified properties from src to target object.
 */
function extractKeys (to, from, keys) {
  if ( from === void 0 ) from = {};

  if (!from) {
    return to
  }
  (keys || []).forEach(function (key) {
    from && (to[key] = from[key]);
    from && (delete from[key]);
  });
  return to
}
/**
 * Simple bind, faster than native
 *
 * @param {Function} fn
 * @param {Object} ctx
 * @return {Function}
 */
function bind (fn, ctx) {
  return function (a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx)
  }
}
/**
 * Only call the func the last time before it's not that frequently called.
 */
function debounce (func, wait) {
  var timerId;
  function later () {
    timerId = null;
    func.apply(null);
  }
  return function () {
    clearTimeout(timerId);
    timerId = setTimeout(later, wait);
  }
}
/**
 * Only call the func the first time before a series frequently function calls happen.
 */
function depress (func, wait) {
  var timerId;

  function later () {
    timerId = null;
  }
  return function () {
    if (!timerId) {
      func.apply();
    }
    clearTimeout(timerId);
    timerId = setTimeout(later, wait);
  }
}
/**
 * Only call the func every time after a wait milliseconds if it's too frequently called.
 */
function throttle (func, wait, callLastTime) {
  var last = 0;
  var lastTimer = null;
  var lastTimeDuration = wait + (wait > 25 ? wait : 25); // plus half wait time.
  return function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var context = this;
    var time = new Date().getTime();
    if (time - last > wait) {
      if (callLastTime) {
        lastTimer && clearTimeout(lastTimer);
        lastTimer = setTimeout(function () {
          lastTimer = null;
          func.apply(context, args);
        }, lastTimeDuration);
      }
      func.apply(context, args);
      last = time;
    }
  }
}
// direction: 'l' | 'r', default is 'r'
// num: how many times to loop, should be a positive integer
function loopArray (arr, num, direction) {
  if (!isArray(arr)) {
    return
  }
  var isLeft = (direction + '').toLowerCase() === 'l';
  var len = arr.length;
  num = num % len;
  if (num < 0) {
    num = -num;
    isLeft = !isLeft;
  }
  if (num === 0) {
    return arr
  }
  var lp, rp;
  if (isLeft) {
    lp = arr.slice(0, num);
    rp = arr.slice(num);
  }
  else {
    lp = arr.slice(0, len - num);
    rp = arr.slice(len - num);
  }
  return rp.concat(lp)
}
/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  }
}
/**
 * Camelize a hyphen-delmited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c.toUpperCase(); })
});
function camelizeKeys (obj) {
  var res = {};
  for (var key in obj) {
    res[camelize(key)] = obj[key];
  }
  return res
}
/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});
  /**
   * Hyphenate a camelCase string.
   */
var hyphenateRE = /([^-])([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase()
});
function hyphenateKeys (obj) {
  var res = {};
  for (var key in obj) {
    res[hyphenate(key)] = obj[key];
  }
  return res
}
var vendorsReg = /webkit-|moz-|o-|ms-/;
function hyphenateStyleKeys (obj) {
  var res = {};
  for (var key in obj) {
    var hk = hyphenate(key).replace(vendorsReg, function ($0) {
      return '-' + $0
    });
    res[hk] = obj[key];
  }
  return res
}
function camelToKebab (name) {
  if (!name) {
    return ''
  }
  return name.replace(/([A-Z])/g, function (g, g1) {
    return ("-" + (g1.toLowerCase()))
  })
}
function appendCss (css, cssId, replace) {
  var style = document.getElementById(cssId);
  if (style && replace) {
    style.parentNode.removeChild(style);
    style = null;
  }
  if (!style) {
    style = document.createElement('style');
    style.type = 'text/css';
    cssId && (style.id = cssId);
    document.getElementsByTagName('head')[0].appendChild(style);
  }
  style.appendChild(document.createTextNode(css));
}
function nextFrame (callback) {
  var runner = window.requestAnimationFrame
    || window.webkitRequestAnimationFrame
    || window.mozRequestAnimationFrame
    || (function (cb) { return setTimeout(cb, 16); });
  runner(callback);
}
function toCSSText (object) {
  if (!object) {
    return
  }
  var obj = hyphenateStyleKeys(object);
  var cssText = '';
  for (var key in obj) {
    cssText += key + ":" + (obj[key]) + ";";
  }
  return cssText
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// 

/**
 * viewport priority:
 *
 * 1. meta weex-viewport (developer custom)
 * 2. setViewport(config) := config.width (private code) @deprecated
 * 3. 750 (buid time)
 *
 */
var isInited = false;
var DEFAULT_VIEWPORT_WIDTH = 750;

/**
 * get viewport width from weex-viewport meta.
 */
var envViewportWidth = parseInt(750);
var width = !isNaN(envViewportWidth) && envViewportWidth > 0
  ? envViewportWidth
  : DEFAULT_VIEWPORT_WIDTH;

var wxViewportMeta = document.querySelector('meta[name="weex-viewport"]');
var metaWidth = wxViewportMeta && parseInt(wxViewportMeta.getAttribute('content'));
if (metaWidth && !isNaN(metaWidth) && metaWidth > 0) {
  width = metaWidth;
}

var dpr = 0;
var screenWidth = 0;
var screenHeight = 0;

var info = {
  dpr: dpr,
  scale: 0,
  rem: 0,
  deviceWidth: 0,
  deviceHeight: 0
};

/**
 * set root font-size for rem units. If already been set, just skip this.
 */
function setRootFont (width) {
  var doc = window.document;
  var rem = width / 10;
  if (!doc.documentElement) { return }
  var rootFontSize = doc.documentElement.style.fontSize;
  if (!rootFontSize) {
    doc.documentElement.style.fontSize = rem + 'px';
    info.rem = rem;
  }
}

function setMetaViewport (width) {
  if (!wxViewportMeta) {
    wxViewportMeta = document.createElement('meta');
    wxViewportMeta.setAttribute('name', 'weex-viewport');
  }
  else {
    var metaWidth = parseInt(wxViewportMeta.getAttribute('content'));
    if (metaWidth === width) {
      return
    }
  }
  wxViewportMeta.setAttribute('content', width + '');
}

/**
 * export viewport info.
 */
function init$2 (viewportWidth) {
  if ( viewportWidth === void 0 ) viewportWidth = width;

  if (!isInited) {
    isInited = true;

    var doc = window.document;
    if (!doc) {
      console.error('[vue-render] window.document is undfined.');
      return
    }
    if (!doc.documentElement) {
      console.error('[vue-render] document.documentElement is undfined.');
      return
    }

    dpr = info.dpr = window.devicePixelRatio;
    screenWidth = doc.documentElement.clientWidth;
    screenHeight = doc.documentElement.clientHeight;

    var resetDeviceHeight = function () {
      screenHeight = doc.documentElement.clientHeight;
      var env = window.weex && window.weex.config.env;
      info.deviceHeight = env.deviceHeight = screenHeight * dpr;
    };

    // set root font for rem.
    setRootFont(screenWidth);
    setMetaViewport(viewportWidth);

    window.addEventListener('resize', resetDeviceHeight);

    /**
     * why not to use window.screen.width to get screenWidth ? Because in some
     * old webkit browser on android system it get the device pixel width, which
     * is the screenWidth multiply by the device pixel ratio.
     * e.g. ip6 -> get 375 for virtual screen width.
     */
    var scale = screenWidth / viewportWidth;
    /**
     * 1. if set initial/maximum/mimimum-scale some how the page will have a bounce
     * effect when user drag the page towards horizontal axis.
     * 2. Due to compatibility reasons, not to use viewport meta anymore. Just bring
     * a parameter scale into the style value processing.
     */

    // const contents = [
    //   `width=${viewportWidth}`,
    //   `initial-scale=${scale}`,
    //   `maximum-scale=${scale}`,
    //   `minimum-scale=${scale}`,
    //   `user-scalable=no`
    // ]

    // let meta = doc.querySelector('meta[name="viewport"]')
    // if (!meta) {
    //   meta = doc.createElement('meta')
    //   meta.setAttribute('name', 'viewport')
    //   document.querySelector('head').appendChild(meta)
    // }
    // meta.setAttribute('content', contents.join(','))

    extend(info, {
      scale: scale,
      deviceWidth: screenWidth * dpr,
      deviceHeight: screenHeight * dpr
    });
  }

  return info
}

/**
 * reset viewport width and scale.
 * @return new scale.
 */


function getViewportInfo () {
  return info
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function extend$1 (to) {
  var args = [], len = arguments.length - 1;
  while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

  if (!args || args.length <= 0) { return to }
  args.forEach(function (from) {
    if (typeof from !== 'object') { return }
    for (var key in from) {
      to[key] = from[key];
    }
  });
  return to
}

// if support passive event listeners.
var _supportsPassive = false;
try {
  document.createElement('div').addEventListener('test', function (_) {}, {
    get passive () {
      _supportsPassive = true;
    }
  });
}
catch (e) {
  // do nothing.
}
function supportsPassive () {
  return _supportsPassive
}

/**
 * Create Event.
 * @param {DOMString} type
 * @param {Object} props
 */
function createEvent (target, type, props) {
  var event = new Event(type, { bubbles: false });

  extend$1(event, props);
  //  phantomjs don't support customer event
  if (window.navigator.userAgent.toLowerCase().indexOf('phantomjs') !== -1) {
    return event
  }
  try {
    Object.defineProperty(event, 'target', {
      enumerable: true,
      value: target
    });
  }
  catch (err) {
    return extend$1({}, event, { target: target })
  }
  return event
}

/**
 * Create a bubbable Event.
 * @param {DOMString} type
 * @param {Object} props
 */
function createBubblesEvent (target, type, props) {
  var event = new Event(type, { bubbles: true });
  extend$1(event, props);
  //  phantomjs don't support customer event
  if (window.navigator.userAgent.toLowerCase().indexOf('phantomjs') !== -1) {
    return event
  }
  try {
    Object.defineProperty(event, 'target', {
      enumerable: true,
      value: target
    });
  }
  catch (err) {
    return extend$1({}, event, { target: target })
  }
  return event
}

/**
 * Create Custom Event.
 * @param {DOMString} type
 * @param {Object} props
 */
function createCustomEvent (target, type, props) {
  // compatibility: http://caniuse.com/#search=customevent
  // const event = new CustomEvent(type)
  var event = document.createEvent('CustomEvent');
  event.initCustomEvent(type, false, true, {});
  // event.preventDefault()
  // event.stopPropagation()

  extend$1(event, props);

  // event.target is readonly
  try {
    Object.defineProperty(event, 'target', {
      enumerable: true,
      value: target || null
    });
  }
  catch (err) {
    return extend$1({}, event, { target: target || null })
  }

  return event
}

/**
 * dispatch a event on a dom element.
 * @param  {HTMLElement} dom
 * @param  {Event} event
 */
function dispatchEvent (dom, event) {
  dom.dispatchEvent(event);
}

function mapFormEvents (context) {
  var eventMap = {};['input', 'change', 'focus', 'blur'].forEach(function (type) {
    eventMap[type] = function (event) {
      if (context.$el) {
        event.value = context.$el.value;
      }
      context.$emit(type, event);
    };
  });
  return eventMap
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var config = {
  scrollableTypes: ['scroller', 'list', 'waterfall'],
  gestureEvents: [
    'panstart',
    'panmove',
    'panend',
    'swipe',
    'longpress',
    'tap'
  ]
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function getParentScroller (vm) {
  if (!vm) { return null }
  if (vm._parentScroller) {
    return vm._parentScroller
  }
  function _getParentScroller (parent) {
    if (!parent) { return }
    if (config.scrollableTypes.indexOf(parent.weexType) > -1) {
      vm._parentScroller = parent;
      return parent
    }
    return _getParentScroller(parent.$parent)
  }
  return _getParentScroller(vm.$parent)
}

function horizontalBalance (rect, ctRect) {
  return rect.left < ctRect.right && rect.right > ctRect.left
}

function verticalBalance (rect, ctRect) {
  return rect.top < ctRect.bottom && rect.bottom > ctRect.top
}

/**
 * return a data array with two boolean value, which are:
 * 1. visible in current ct's viewport.
 * 2. visible with offset in current ct's viewport.
 */
function hasIntersection (rect, ctRect, dir, offset) {
  dir = dir || 'up';
  var isHorizontal = dir === 'left' || dir === 'right';
  var isVertical = dir === 'up' || dir === 'down';
  if (isHorizontal && !verticalBalance(rect, ctRect)) {
    return [false, false]
  }
  if (isVertical && !horizontalBalance(rect, ctRect)) {
    return [false, false]
  }
  offset = parseInt(offset || 0) * weex.config.env.scale;
  switch (dir) {
    case 'up':
      return [
        rect.top < ctRect.bottom && rect.bottom > ctRect.top,
        rect.top < ctRect.bottom + offset && rect.bottom > ctRect.top - offset
      ]
    case 'down':
      return [
        rect.bottom > ctRect.top && rect.top < ctRect.bottom,
        rect.bottom > ctRect.top - offset && rect.top < ctRect.bottom + offset
      ]
    case 'left':
      return [
        rect.left < ctRect.right && rect.right > ctRect.left,
        rect.left < ctRect.right + offset && rect.right > ctRect.left - offset
      ]
    case 'right':
      return [
        rect.right > ctRect.left && rect.left < ctRect.right,
        rect.right > ctRect.left - offset && rect.left < ctRect.right + offset
      ]
  }
}

/**
 * isElementVisible
 * @param  {HTMLElement}  el    a dom element.
 * @param  {HTMLElement}  container  optional, the container of this el.
 */
function isElementVisible (el, container, dir, offset) {
  if (!el.getBoundingClientRect) { return false }
  var bodyRect = {
    top: 0,
    left: 0,
    bottom: window.innerHeight,
    right: window.innerWidth
  };
  var ctRect = (container === window || container === document.body)
    ? bodyRect : container
    ? container.getBoundingClientRect() : bodyRect;
  return hasIntersection(el.getBoundingClientRect(), ctRect, dir, offset)
}

// to trigger the appear/disappear event.
function triggerEvent (elm, handlers, evt, dir) {
  var listener = handlers[evt];
  if (listener && listener.fn) {
    listener = listener.fn;
  }
  if (listener) {
    listener(createEvent(elm, evt, {
      direction: dir
    }));
  }
}

/**
 * get all event listeners. including bound handlers in all parent vnodes.
 */
function getEventHandlers (context) {
  var vnode = context.$vnode;
  var handlers = {};
  var attachedVnodes = [];
  while (vnode) {
    attachedVnodes.push(vnode);
    vnode = vnode.parent;
  }
  attachedVnodes.forEach(function (vnode) {
    var parentListeners = vnode.componentOptions && vnode.componentOptions.listeners;
    var dataOn = vnode.data && vnode.data.on;
    extend(handlers, parentListeners, dataOn);
  });
  return handlers
}

function getAppearOffset (el) {
  return el && el.getAttribute('appear-offset')
}

function checkHandlers (handlers) {
  return [
    !!(handlers.appear || handlers.disappear),
    !!(handlers.offsetAppear || handlers.offsetDisappear)
  ]
}

/**
 * Watch element's visibility to tell whether should trigger a appear/disappear
 * event in scroll handler.
 */
function watchAppear (context, fireNow) {
  var el = context && context.$el;
  if (!el || el.nodeType !== 1) { return }
  var appearOffset = getAppearOffset(el);

  var handlers = getEventHandlers(context);
  var checkResults = checkHandlers(handlers);
  // no appear or offsetAppear handler was bound.
  if (!checkResults[0] && !checkResults[1]) {
    return
  }

  var isWindow = false;
  var container = window;
  var scroller = getParentScroller(context);
  if (scroller && scroller.$el) {
    container = scroller.$el;
  }
  else {
    isWindow = true;
  }

  if (fireNow) {
    var visibleData = isElementVisible(el, container, null, appearOffset);
    detectAppear(context, visibleData, null);
  }

  // add current vm to the container's appear watch list.
  if (!container._watchAppearList) {
    container._watchAppearList = [];
  }
  container._watchAppearList.push(context);

  /**
   * Code below will only exec once for binding scroll handler for parent container.
   */
  if (container._scrollWatched) {
    return
  }
  container._scrollWatched = true;
  var scrollHandler = throttle(function (event) {
    /**
     * detect scrolling direction.
     * direction only support up & down yet.
     * TODO: direction support left & right.
     */
    var scrollTop = isWindow ? window.pageYOffset : container.scrollTop;
    var preTop = container._lastScrollTop;
    container._lastScrollTop = scrollTop;
    var dir = (scrollTop < preTop
      ? 'down' : scrollTop > preTop
      ? 'up' : container._prevDirection) || null;
    container._prevDirection = dir;
    var watchAppearList = container._watchAppearList || [];
    var len = watchAppearList.length;
    for (var i = 0; i < len; i++) {
      var vm = watchAppearList[i];
      var el = vm.$el;
      var appearOffset = getAppearOffset(el);
      var visibleData = isElementVisible(el, container, dir, appearOffset);
      detectAppear(vm, visibleData, dir);
    }
  }, 25, true);
  container.addEventListener('scroll', scrollHandler, false);
  /**
   * In case the users use the body's overflow to scroll. Then the scroll
   * event would not be handled on the window object but on the body.
   */
  if (isWindow) {
    document.body.addEventListener('scroll', scrollHandler, false);
  }
}

/**
 * trigger a disappear event.
 */
function triggerDisappear (context) {
  return detectAppear(context, [false, false])
}

/**
 * decide whether to trigger a appear/disappear event.
 * @param {VueComponent} context
 * @param {boolean} visible
 * @param {string} dir
 */
function detectAppear (context, visibleData, dir, appearOffset) {
  if ( dir === void 0 ) dir = null;

  var el = context && context.$el;
  var visible = visibleData[0];
  var offsetVisible = visibleData[1];
  if (!el) { return }
  var handlers = getEventHandlers(context);
  /**
   * No matter it's binding appear/disappear or both of them. Always
   * should test it's visibility and change the context/._visible.
   * If neithor of them was bound, then just ignore it.
   */
  /**
   * if the component hasn't appeared for once yet, then it shouldn't trigger
   * a disappear event at all.
   */
  if (context._appearedOnce || visible) {
    if (context._visible !== visible) {
      if (!context._appearedOnce) {
        context._appearedOnce = true;
      }
      context._visible = visible;
      triggerEvent(el, handlers, visible ? 'appear' : 'disappear', dir);
    }
  }
  if (context._offsetAppearedOnce || offsetVisible) {
    if (context._offsetVisible !== offsetVisible) {
      if (!context._offsetAppearedOnce) {
        context._offsetAppearedOnce = true;
      }
      context._offsetVisible = offsetVisible;
      triggerEvent(el, handlers, offsetVisible ? 'offsetAppear' : 'offsetDisappear', dir);
    }
  }
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// 

function preLoadImg (src,
    loadCallback,
    errorCallback) {
  var img = new Image();
  img.onload = loadCallback ? loadCallback.bind(img) : null;
  img.onerror = errorCallback ? errorCallback.bind(img) : null;
  img.src = src;
}

function applySrc (item, src, placeholderSrc) {
  if (!src) { return }
  function finallCb () {
    delete item._src_loading;
  }
  if (item._src_loading === src) {
    return
  }
  /**
   * 1. apply src immediately in case javscript blocks the image loading
   *  before next tick.
   */
  item.style.backgroundImage = "url(" + (src || '') + ")";
  item.removeAttribute('img-src');
  /**
   * 2. then load the img src with Image constructor (but would not post
   *  a request again), just to trigger the load event.
   */
  item._src_loading = src;
  preLoadImg(src, function (evt) {
    item.style.backgroundImage = "url(" + (src || '') + ")";
    var ref = this;
    var naturalWidth = ref.width;
    var naturalHeight = ref.height;
    var params = {
      success: true,
      size: { naturalWidth: naturalWidth, naturalHeight: naturalHeight }
    };
    dispatchEvent(item, createEvent(item, 'load', params));
    finallCb();
  }, function (evt) {
    var params = {
      success: false,
      size: { naturalWidth: 0, naturalHeight: 0 }
    };
    dispatchEvent(item, createEvent(item, 'load', params));
    if (placeholderSrc) {
      preLoadImg(placeholderSrc, function () {
        item.style.backgroundImage = "url(" + (placeholderSrc || '') + ")";
      });
    }
    finallCb();
  });
}

function getCtScroller (el) {
  if (!el) { return }
  var scroller = el._ptScroller;
  if (!scroller) {
    var pt = el.parentElement;
    while (pt && pt !== document.body) {
      if ((pt.className + '' || '').match(/weex-list|weex-scroller|weex-waterfall/)) {
        scroller = pt;
        break
      }
      pt = pt.parentElement;
    }
    scroller = pt;
    el._ptScroller = pt;
  }
  return scroller
}

function fireLazyload (el, ignoreVisibility) {
  if (Array.isArray(el)) {
    return el.forEach(function (ct) { return fireLazyload(ct); })
  }
  el = el || document.body;
  if (!el) { return }
  var imgs = (el || document.body).querySelectorAll('[img-src]');
  if (el.getAttribute('img-src')) { imgs = [el]; }
  for (var i = 0; i < imgs.length; i++) {
    var img = imgs[i];
    if (typeof ignoreVisibility === 'boolean' && ignoreVisibility) {
      applySrc(img, img.getAttribute('img-src'), img.getAttribute('img-placeholder'));
    }
    else if (isElementVisible(img, getCtScroller(el))[0]) {
      applySrc(img, img.getAttribute('img-src'), img.getAttribute('img-placeholder'));
    }
  }
}

/**
 * cache a throttle lazyload function for every container element
 * once for different wait times separate.
 *   the architecture of this cache:
 *      cache: {
 *        el.id: {
 *          wait: throttledFunction () { ... }
 *        }
 *      }
 */
var cache = {};
var _uid$2 = 1;
function getThrottleLazyload (wait, el) {
  if ( wait === void 0 ) wait = 16;
  if ( el === void 0 ) el = document.body;

  var id = +(el && el.dataset.throttleId);
  if (isNaN(id) || id <= 0) {
    id = _uid$2++;
    el && el.setAttribute('data-throttle-id', id + '');
  }

  !cache[id] && (cache[id] = {});
  var throttled = cache[id][wait] ||
    (cache[id][wait] = throttle(
      fireLazyload.bind(this, el),
      parseFloat(wait),
      // true for callLastTime.
      // to trigger once more time after the last throttled function called with a little more delay.
      true)
    );
  return throttled
}

var capitalizeString_1 = createCommonjsModule(function (module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = capitalizeString;
function capitalizeString(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
module.exports = exports["default"];
});

var prefixProperty_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixProperty;

var _capitalizeString = capitalizeString_1;

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function prefixProperty(prefixProperties, property, style) {
  if (prefixProperties.hasOwnProperty(property)) {
    var requiredPrefixes = prefixProperties[property];
    for (var i = 0, len = requiredPrefixes.length; i < len; ++i) {
      style[requiredPrefixes[i] + (0, _capitalizeString2.default)(property)] = style[property];
    }
  }
}
module.exports = exports['default'];
});

var prefixValue_1 = createCommonjsModule(function (module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = prefixValue;
function prefixValue(plugins, property, value, style, metaData) {
  for (var i = 0, len = plugins.length; i < len; ++i) {
    var processedValue = plugins[i](property, value, style, metaData);

    // we can stop processing if a value is returned
    // as all plugin criteria are unique
    if (processedValue) {
      return processedValue;
    }
  }
}
module.exports = exports["default"];
});

var addNewValuesOnly_1 = createCommonjsModule(function (module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = addNewValuesOnly;
function addIfNew(list, value) {
  if (list.indexOf(value) === -1) {
    list.push(value);
  }
}

function addNewValuesOnly(list, values) {
  if (Array.isArray(values)) {
    for (var i = 0, len = values.length; i < len; ++i) {
      addIfNew(list, values[i]);
    }
  } else {
    addIfNew(list, values);
  }
}
module.exports = exports["default"];
});

var isObject_1 = createCommonjsModule(function (module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isObject;
function isObject(value) {
  return value instanceof Object && !Array.isArray(value);
}
module.exports = exports["default"];
});

var createPrefixer_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createPrefixer;

var _prefixProperty = prefixProperty_1;

var _prefixProperty2 = _interopRequireDefault(_prefixProperty);

var _prefixValue = prefixValue_1;

var _prefixValue2 = _interopRequireDefault(_prefixValue);

var _addNewValuesOnly = addNewValuesOnly_1;

var _addNewValuesOnly2 = _interopRequireDefault(_addNewValuesOnly);

var _isObject = isObject_1;

var _isObject2 = _interopRequireDefault(_isObject);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createPrefixer(_ref) {
  var prefixMap = _ref.prefixMap,
      plugins = _ref.plugins;

  function prefixAll(style) {
    for (var property in style) {
      var value = style[property];

      // handle nested objects
      if ((0, _isObject2.default)(value)) {
        style[property] = prefixAll(value);
        // handle array values
      } else if (Array.isArray(value)) {
        var combinedValue = [];

        for (var i = 0, len = value.length; i < len; ++i) {
          var processedValue = (0, _prefixValue2.default)(plugins, property, value[i], style, prefixMap);
          (0, _addNewValuesOnly2.default)(combinedValue, processedValue || value[i]);
        }

        // only modify the value if it was touched
        // by any plugin to prevent unnecessary mutations
        if (combinedValue.length > 0) {
          style[property] = combinedValue;
        }
      } else {
        var _processedValue = (0, _prefixValue2.default)(plugins, property, value, style, prefixMap);

        // only modify the value if it was touched
        // by any plugin to prevent unnecessary mutations
        if (_processedValue) {
          style[property] = _processedValue;
        }

        (0, _prefixProperty2.default)(prefixMap, property, style);
      }
    }

    return style;
  }

  return prefixAll;
}
module.exports = exports['default'];
});

var staticData = createCommonjsModule(function (module, exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var w = ["Webkit"];
var m = ["Moz"];
var ms = ["ms"];
var wm = ["Webkit", "Moz"];
var wms = ["Webkit", "ms"];
var wmms = ["Webkit", "Moz", "ms"];

exports.default = {
  plugins: [],
  prefixMap: { "appearance": wm, "userSelect": wmms, "textEmphasisPosition": w, "textEmphasis": w, "textEmphasisStyle": w, "textEmphasisColor": w, "boxDecorationBreak": w, "clipPath": w, "maskImage": w, "maskMode": w, "maskRepeat": w, "maskPosition": w, "maskClip": w, "maskOrigin": w, "maskSize": w, "maskComposite": w, "mask": w, "maskBorderSource": w, "maskBorderMode": w, "maskBorderSlice": w, "maskBorderWidth": w, "maskBorderOutset": w, "maskBorderRepeat": w, "maskBorder": w, "maskType": w, "textDecorationStyle": w, "textDecorationSkip": w, "textDecorationLine": w, "textDecorationColor": w, "filter": w, "fontFeatureSettings": w, "breakAfter": wmms, "breakBefore": wmms, "breakInside": wmms, "columnCount": wm, "columnFill": wm, "columnGap": wm, "columnRule": wm, "columnRuleColor": wm, "columnRuleStyle": wm, "columnRuleWidth": wm, "columns": wm, "columnSpan": wm, "columnWidth": wm, "writingMode": wms, "flex": w, "flexBasis": w, "flexDirection": w, "flexGrow": w, "flexFlow": w, "flexShrink": w, "flexWrap": w, "alignContent": w, "alignItems": w, "alignSelf": w, "justifyContent": w, "order": w, "transform": w, "transformOrigin": w, "transformOriginX": w, "transformOriginY": w, "backfaceVisibility": w, "perspective": w, "perspectiveOrigin": w, "transformStyle": w, "transformOriginZ": w, "animation": w, "animationDelay": w, "animationDirection": w, "animationFillMode": w, "animationDuration": w, "animationIterationCount": w, "animationName": w, "animationPlayState": w, "animationTimingFunction": w, "backdropFilter": w, "fontKerning": w, "scrollSnapType": wms, "scrollSnapPointsX": wms, "scrollSnapPointsY": wms, "scrollSnapDestination": wms, "scrollSnapCoordinate": wms, "shapeImageThreshold": w, "shapeImageMargin": w, "shapeImageOutside": w, "hyphens": wmms, "flowInto": wms, "flowFrom": wms, "regionFragment": wms, "textAlignLast": m, "tabSize": m, "wrapFlow": ms, "wrapThrough": ms, "wrapMargin": ms, "gridTemplateColumns": ms, "gridTemplateRows": ms, "gridTemplateAreas": ms, "gridTemplate": ms, "gridAutoColumns": ms, "gridAutoRows": ms, "gridAutoFlow": ms, "grid": ms, "gridRowStart": ms, "gridColumnStart": ms, "gridRowEnd": ms, "gridRow": ms, "gridColumn": ms, "gridColumnEnd": ms, "gridColumnGap": ms, "gridRowGap": ms, "gridArea": ms, "gridGap": ms, "textSizeAdjust": wms, "borderImage": w, "borderImageOutset": w, "borderImageRepeat": w, "borderImageSlice": w, "borderImageSource": w, "borderImageWidth": w, "transitionDelay": w, "transitionDuration": w, "transitionProperty": w, "transitionTimingFunction": w }
};
module.exports = exports["default"];
});

var cursor_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cursor;
var prefixes = ['-webkit-', '-moz-', ''];

var values = {
  'zoom-in': true,
  'zoom-out': true,
  grab: true,
  grabbing: true
};

function cursor(property, value) {
  if (property === 'cursor' && values.hasOwnProperty(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];
});

var isPrefixedValue_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = isPrefixedValue;
var regex = /-webkit-|-moz-|-ms-/;

function isPrefixedValue(value) {
  return typeof value === 'string' && regex.test(value);
}
module.exports = exports['default'];
});

var crossFade_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = crossFade;

var _isPrefixedValue = isPrefixedValue_1;

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#search=cross-fade
var prefixes = ['-webkit-', ''];
function crossFade(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('cross-fade(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/cross-fade\(/g, prefix + 'cross-fade(');
    });
  }
}
module.exports = exports['default'];
});

var filter_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filter;

var _isPrefixedValue = isPrefixedValue_1;

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#feat=css-filter-function
var prefixes = ['-webkit-', ''];
function filter(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('filter(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/filter\(/g, prefix + 'filter(');
    });
  }
}
module.exports = exports['default'];
});

var flex_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flex;
var values = {
  flex: ['-webkit-box', '-moz-box', '-ms-flexbox', '-webkit-flex', 'flex'],
  'inline-flex': ['-webkit-inline-box', '-moz-inline-box', '-ms-inline-flexbox', '-webkit-inline-flex', 'inline-flex']
};

function flex(property, value) {
  if (property === 'display' && values.hasOwnProperty(value)) {
    return values[value];
  }
}
module.exports = exports['default'];
});

var flexboxOld_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = flexboxOld;
var alternativeValues = {
  'space-around': 'justify',
  'space-between': 'justify',
  'flex-start': 'start',
  'flex-end': 'end',
  'wrap-reverse': 'multiple',
  wrap: 'multiple'
};

var alternativeProps = {
  alignItems: 'WebkitBoxAlign',
  justifyContent: 'WebkitBoxPack',
  flexWrap: 'WebkitBoxLines'
};

function flexboxOld(property, value, style) {
  if (property === 'flexDirection' && typeof value === 'string') {
    if (value.indexOf('column') > -1) {
      style.WebkitBoxOrient = 'vertical';
    } else {
      style.WebkitBoxOrient = 'horizontal';
    }
    if (value.indexOf('reverse') > -1) {
      style.WebkitBoxDirection = 'reverse';
    } else {
      style.WebkitBoxDirection = 'normal';
    }
  }
  if (alternativeProps.hasOwnProperty(property)) {
    style[alternativeProps[property]] = alternativeValues[value] || value;
  }
}
module.exports = exports['default'];
});

var gradient_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = gradient;

var _isPrefixedValue = isPrefixedValue_1;

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var prefixes = ['-webkit-', '-moz-', ''];

var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

function gradient(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];
});

var imageSet_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = imageSet;

var _isPrefixedValue = isPrefixedValue_1;

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// http://caniuse.com/#feat=css-image-set
var prefixes = ['-webkit-', ''];
function imageSet(property, value) {
  if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('image-set(') > -1) {
    return prefixes.map(function (prefix) {
      return value.replace(/image-set\(/g, prefix + 'image-set(');
    });
  }
}
module.exports = exports['default'];
});

var position_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = position;
function position(property, value) {
  if (property === 'position' && value === 'sticky') {
    return ['-webkit-sticky', 'sticky'];
  }
}
module.exports = exports['default'];
});

var sizing_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sizing;
var prefixes = ['-webkit-', '-moz-', ''];

var properties = {
  maxHeight: true,
  maxWidth: true,
  width: true,
  height: true,
  columnWidth: true,
  minWidth: true,
  minHeight: true
};
var values = {
  'min-content': true,
  'max-content': true,
  'fill-available': true,
  'fit-content': true,
  'contain-floats': true
};

function sizing(property, value) {
  if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
    return prefixes.map(function (prefix) {
      return prefix + value;
    });
  }
}
module.exports = exports['default'];
});

var uppercasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var cache$1 = {};

function hyphenateStyleName(string) {
    return string in cache$1
    ? cache$1[string]
    : cache$1[string] = string
      .replace(uppercasePattern, '-$&')
      .toLowerCase()
      .replace(msPattern, '-ms-');
}

var index$2 = hyphenateStyleName;

var hyphenateProperty_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = hyphenateProperty;

var _hyphenateStyleName = index$2;

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function hyphenateProperty(property) {
  return (0, _hyphenateStyleName2.default)(property);
}
module.exports = exports['default'];
});

var transition_1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transition;

var _hyphenateProperty = hyphenateProperty_1;

var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);

var _isPrefixedValue = isPrefixedValue_1;

var _isPrefixedValue2 = _interopRequireDefault(_isPrefixedValue);

var _capitalizeString = capitalizeString_1;

var _capitalizeString2 = _interopRequireDefault(_capitalizeString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var properties = {
  transition: true,
  transitionProperty: true,
  WebkitTransition: true,
  WebkitTransitionProperty: true,
  MozTransition: true,
  MozTransitionProperty: true
};


var prefixMapping = {
  Webkit: '-webkit-',
  Moz: '-moz-',
  ms: '-ms-'
};

function prefixValue(value, propertyPrefixMap) {
  if ((0, _isPrefixedValue2.default)(value)) {
    return value;
  }

  // only split multi values, not cubic beziers
  var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

  for (var i = 0, len = multipleValues.length; i < len; ++i) {
    var singleValue = multipleValues[i];
    var values = [singleValue];
    for (var property in propertyPrefixMap) {
      var dashCaseProperty = (0, _hyphenateProperty2.default)(property);

      if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
        var prefixes = propertyPrefixMap[property];
        for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {
          // join all prefixes and create a new value
          values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes[j]] + dashCaseProperty));
        }
      }
    }

    multipleValues[i] = values.join(',');
  }

  return multipleValues.join(',');
}

function transition(property, value, style, propertyPrefixMap) {
  // also check for already prefixed transitions
  if (typeof value === 'string' && properties.hasOwnProperty(property)) {
    var outputValue = prefixValue(value, propertyPrefixMap);
    // if the property is already prefixed
    var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
      return !/-moz-|-ms-/.test(val);
    }).join(',');

    if (property.indexOf('Webkit') > -1) {
      return webkitOutput;
    }

    var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
      return !/-webkit-|-ms-/.test(val);
    }).join(',');

    if (property.indexOf('Moz') > -1) {
      return mozOutput;
    }

    style['Webkit' + (0, _capitalizeString2.default)(property)] = webkitOutput;
    style['Moz' + (0, _capitalizeString2.default)(property)] = mozOutput;
    return outputValue;
  }
}
module.exports = exports['default'];
});

var index$1 = createCommonjsModule(function (module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createPrefixer = createPrefixer_1;

var _createPrefixer2 = _interopRequireDefault(_createPrefixer);

var _staticData = staticData;

var _staticData2 = _interopRequireDefault(_staticData);

var _cursor = cursor_1;

var _cursor2 = _interopRequireDefault(_cursor);

var _crossFade = crossFade_1;

var _crossFade2 = _interopRequireDefault(_crossFade);

var _filter = filter_1;

var _filter2 = _interopRequireDefault(_filter);

var _flex = flex_1;

var _flex2 = _interopRequireDefault(_flex);

var _flexboxOld = flexboxOld_1;

var _flexboxOld2 = _interopRequireDefault(_flexboxOld);

var _gradient = gradient_1;

var _gradient2 = _interopRequireDefault(_gradient);

var _imageSet = imageSet_1;

var _imageSet2 = _interopRequireDefault(_imageSet);

var _position = position_1;

var _position2 = _interopRequireDefault(_position);

var _sizing = sizing_1;

var _sizing2 = _interopRequireDefault(_sizing);

var _transition = transition_1;

var _transition2 = _interopRequireDefault(_transition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var plugins = [_crossFade2.default, _cursor2.default, _filter2.default, _flexboxOld2.default, _gradient2.default, _imageSet2.default, _position2.default, _sizing2.default, _transition2.default, _flex2.default];

exports.default = (0, _createPrefixer2.default)({
  prefixMap: _staticData2.default.prefixMap,
  plugins: plugins
});
module.exports = exports['default'];
});

var addPrefix = unwrapExports(index$1);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// 

var noUnitsNumberKeys = [
  'flex',
  'opacity',
  'zIndex',
  'fontWeight',
  'lines'
];

// whether to support using 0.5px to paint 1px width border.
var _supportHairlines;
function supportHairlines () {
  if (typeof _supportHairlines === 'undefined') {
    var dpr = window.devicePixelRatio;
    if (dpr && dpr >= 2 && document.documentElement) {
      var docElm = document.documentElement;
      var testElm = document.createElement('div');
      var fakeBody = document.createElement('body');
      var beforeNode = docElm.firstElementChild || docElm.firstChild;
      testElm.style.border = '0.5px solid transparent';
      fakeBody.appendChild(testElm);
      docElm.insertBefore(fakeBody, beforeNode);
      _supportHairlines = testElm.offsetHeight === 1;
      docElm.removeChild(fakeBody);
    }
    else {
      _supportHairlines = false;
    }
  }
  return _supportHairlines
}

/**
 * remove comments from a cssText.
 */
function trimComment (cssText) {
  return cssText.replace(/(?:\/\*)[\s\S]*?\*\//g, '')
}

var support$1 = null;

function supportSticky () {
  if (support$1 !== null) {
    return support$1
  }
  var element = window.document.createElement('div');
  var elementStyle = element.style;
  elementStyle.cssText = 'position:-webkit-sticky;position:sticky;';
  support$1 = elementStyle.position.indexOf('sticky') !== -1;
  return support$1
}

var regPercentage = /^[+-]?\d+(\.\d+)?%$/;
function isPercentage (val) {
  return regPercentage.test(val)
}

var regUnitsNum = /^([+-]?\d+(?:\.\d+)?)([p,w]x)?$/; // support units: px, wx.
function normalizeUnitsNum (val) {
  var match = val.match(regUnitsNum);
  if (!match) { return '' }
  var unit = 'px'; // px by default.
  if (match[2]) {
    unit = match[2];
  }
  return parseScale(parseFloat(match[1]), unit)
}

function getUnitScaleMap () {
  var ref = getViewportInfo();
  var scale = ref.scale;
  var dpr = ref.dpr;
  return {
    px: scale,
    wx: scale * dpr
  }
}

function limitScale (val, limit) {
  limit = limit || 1;
  var sign = val === 0 ? 0 : val > 0 ? 1 : -1;
  var newVal = Math.abs(val) > limit ? val : sign * limit;
  // support 1px device width.
  if (newVal === 1 && val < 1 && supportHairlines()) {
    newVal = 0.5;
  }
  return newVal
}

function parseScale (val, unit) {
  var unitScaleMap = getUnitScaleMap();
  return limitScale(val * unitScaleMap[unit]) + 'px'
}

function normalizeString (styleKey, styleVal) {
  if (isPercentage(styleVal)) {
    return styleVal
  }

  /**
   * 1. test if is a regular scale css. e.g. `width: 100px;`
   *  this should be a standalone number value with or without unit, otherwise
   *  it shouldn't be changed.
   */
  var unitsNum = normalizeUnitsNum(styleVal);
  if (unitsNum) { return unitsNum }

  /**
   * 2. if a string contains multiple px values, than they should be all normalized.
   *  values should have wx or px units, otherwise they should be left unchanged.
   *  e.g.
   *    transform: translate(10px, 6px, 0)
   *    border: 2px solid red
   */
  var numReg = /([+-]?[\d.]+)([p,w]x)/ig;
  if (numReg.test(styleVal)) {
    var unitScaleMap = getUnitScaleMap();
    var val = styleVal.replace(numReg, function (m, $0, $1) {
      var res = parseFloat($0) * unitScaleMap[$1];
      return limitScale(res) + 'px'
    });
    return val
  }

  // otherwise
  return styleVal
}

function autoPrefix (style) {
  var prefixed = addPrefix(style);
  // flex only added WebkitFlex. Should add WebkitBoxFlex also.
  var flex = prefixed.flex;
  if (flex) {
    prefixed.WebkitBoxFlex = flex;
    prefixed.MozBoxFlex = flex;
    prefixed.MsFlex = flex;
  }
  return prefixed
}

function normalizeNumber (styleKey, styleVal) {
  var ref = getViewportInfo();
  var scale = ref.scale;
  return styleVal * scale + 'px'
}

/**
 * normalize style to adapte to current viewport by multiply current scale.
 * @param  {object} style: should be camelCase.
 */
function normalizeStyle (style) {
  var res = {};
  for (var key in style) {
    var val = style[key];
    if (noUnitsNumberKeys.indexOf(key) > -1) {
      res[key] = val;
      continue
    }
    switch (typeof val) {
      case 'string':
        res[key] = normalizeString(key, val);
        break
      case 'number':
        res[key] = normalizeNumber(key, val);
        break
      default:
        res[key] = val;
        break
    }
  }
  return res
}

/**
 * get transformObj
 */
function getTransformObj (elm) {
  var styleObj = {};
  if (!elm) { return styleObj }
  var transformStr = elm.style.webkitTransform
    || elm.style.mozTransform
    || elm.style.transform;
  if (transformStr && transformStr.match(/(?: *(?:translate|rotate|scale)[^(]*\([^(]+\))+/i)) {
    styleObj = transformStr.trim().replace(/, +/g, ',').split(' ').reduce(function (pre, str) {
      ['translate', 'scale', 'rotate'].forEach(function (name) {
        if (new RegExp(name, 'i').test(str)) {
          pre[name] = str;
        }
      });
      return pre
    }, {});
  }
  return styleObj
}

/**
 * translate a transform string from a transformObj.
 */
function getTransformStr (obj) {
  return Object.keys(obj).reduce(function (pre, key) {
    return pre + obj[key] + ' '
  }, '')
}

/**
 * add transform style to element.
 * @param {HTMLElement} elm
 * @param {object} style: transform object, format is like this:
 *   {
 *     translate: 'translate3d(2px, 2px, 2px)',
 *     scale: 'scale(0.2)',
 *     rotate: 'rotate(30deg)'
 *   }
 * @param {boolean} replace: whether to replace all transform properties.
 */
function addTransform (elm, style, replace) {
  if (!style) { return }
  var styleObj = {};
  if (!replace) {
    styleObj = getTransformObj(elm);
  }
  for (var key in style) {
    var val = style[key];
    if (val) {
      styleObj[key] = val;
    }
  }
  var resStr = getTransformStr(styleObj);
  elm.style.webkitTransform = resStr;
  elm.style.mozTransform = resStr;
  elm.style.transform = resStr;
}

/**
 * add translate X to the element.
 */
function addTranslateX (elm, toAdd) {
  if (!toAdd) { return }
  var styleObj = getTransformObj(elm);
  if (!styleObj.translate) {
    styleObj.translate = 'translate3d(0px, 0px, 0px)';
  }
  styleObj.translate = styleObj.translate.replace(/[+-\d.]+[pw]x/, function ($0) {
    return (parseFloat($0) + toAdd) + 'px'
  });
  var resStr = getTransformStr(styleObj);
  elm.style.webkitTransform = resStr;
  elm.style.mozTransform = resStr;
  elm.style.transform = resStr;
}

/**
 * copy a transform behaviour from one element to another.
 * key could be: 'translate' | 'scale' | 'rotate'
 */
function copyTransform (from, to, key) {
  var str;
  if (!key) {
    str = from.style.webkitTransform
      || from.style.mozTransform
      || from.style.transform;
  }
  else {
    var fromObj = getTransformObj(from);
    if (!fromObj[key]) { return }
    var toObj = getTransformObj(to);
    toObj[key] = fromObj[key];
    str = getTransformStr(toObj);
  }
  to.style.webkitTransform = str;
  to.style.mozTransform = str;
  to.style.transform = str;
}

/**
 * get color's r, g, b value.
 * @param {string} color support all kinds of value of color.
 */
function getRgb (color) {
  var haxReg = /#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})/;
  var rgbReg = /rgb\((\d+),\s*(\d+),\s*(\d+)\)/;
  var span = document.createElement('span');
  var body = document.body;
  span.style.cssText = "color: " + color + "; width: 0px; height: 0px;";
  body && body.appendChild(span);
  color = window.getComputedStyle(span).color + '';
  body && body.removeChild(span);

  var match;
  match = color.match(haxReg);
  if (match) {
    return {
      r: parseInt(match[1], 16),
      g: parseInt(match[2], 16),
      b: parseInt(match[3], 16)
    }
  }
  match = color.match(rgbReg);
  if (match) {
    return {
      r: parseInt(match[1]),
      g: parseInt(match[2]),
      b: parseInt(match[3])
    }
  }
}

/**
 * get style sheet with owner node's id
 * @param {string} id owner node id.
 */
function getStyleSheetById (id) {
  if (!id) { return }
  var styleSheets = document.styleSheets;
  var len = styleSheets.length;
  for (var i = 0; i < len; i++) {
    var styleSheet = styleSheets[i];
    if (styleSheet.ownerNode.id === id) {
      return styleSheet
    }
  }
}

function getChildrenTotalWidth (children) {
  var len = children.length;
  var total = 0;
  for (var i = 0; i < len; i++) {
    total += children[i].getBoundingClientRect().width;
  }
  return total
}
/**
 * get total content width of the element.
 * @param {HTMLElement} elm
 */
function getRangeWidth (elm) {
  var children = elm.children;
  if (!children) {
    return elm.getBoundingClientRect().width
  }
  if (!Range) {
    return getChildrenTotalWidth(children)
  }
  var range = document.createRange();
  if (!range.selectNodeContents) {
    return getChildrenTotalWidth(children)
  }
  range.selectNodeContents(elm);
  return range.getBoundingClientRect().width
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */



var utils = Object.freeze({
	extend: extend,
	extendTruthy: extendTruthy,
	extendKeys: extendKeys,
	extractKeys: extractKeys,
	bind: bind,
	debounce: debounce,
	depress: depress,
	throttle: throttle,
	loopArray: loopArray,
	cached: cached,
	camelize: camelize,
	camelizeKeys: camelizeKeys,
	capitalize: capitalize,
	hyphenate: hyphenate,
	hyphenateKeys: hyphenateKeys,
	hyphenateStyleKeys: hyphenateStyleKeys,
	camelToKebab: camelToKebab,
	appendCss: appendCss,
	nextFrame: nextFrame,
	toCSSText: toCSSText,
	supportsPassive: supportsPassive,
	createEvent: createEvent,
	createBubblesEvent: createBubblesEvent,
	createCustomEvent: createCustomEvent,
	dispatchEvent: dispatchEvent,
	mapFormEvents: mapFormEvents,
	getParentScroller: getParentScroller,
	hasIntersection: hasIntersection,
	isElementVisible: isElementVisible,
	getEventHandlers: getEventHandlers,
	watchAppear: watchAppear,
	triggerDisappear: triggerDisappear,
	detectAppear: detectAppear,
	applySrc: applySrc,
	fireLazyload: fireLazyload,
	getThrottleLazyload: getThrottleLazyload,
	supportHairlines: supportHairlines,
	trimComment: trimComment,
	supportSticky: supportSticky,
	isPercentage: isPercentage,
	normalizeUnitsNum: normalizeUnitsNum,
	normalizeString: normalizeString,
	autoPrefix: autoPrefix,
	normalizeNumber: normalizeNumber,
	normalizeStyle: normalizeStyle,
	getTransformObj: getTransformObj,
	getTransformStr: getTransformStr,
	addTransform: addTransform,
	addTranslateX: addTranslateX,
	copyTransform: copyTransform,
	getRgb: getRgb,
	getStyleSheetById: getStyleSheetById,
	getRangeWidth: getRangeWidth,
	isPlainObject: isPlainObject,
	isArray: isArray
});

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * get WXEnvironment info.
 * @param  {object} viewportInfo: info about viewport.
 * @param  {object} envInfo: info parsed from lib.env.
 */
function initEnv (viewportInfo, envInfo) {
  var browserName = envInfo.browser ? envInfo.browser.name : navigator.appName;
  var browserVersion = envInfo.browser ? envInfo.browser.version.val : null;
  var osName = envInfo.os.name;
  if (osName.match(/(iPhone|iPad|iPod)/i)) {
    osName = 'iOS';
  }
  else if (osName.match(/Android/i)) {
    osName = 'android';
  }
  var osVersion = envInfo.os.version.val;
  var env = {
    platform: 'Web',
    weexVersion: '0.12.25',
    userAgent: navigator.userAgent,
    appName: browserName,
    appVersion: browserVersion,
    osName: osName,
    osVersion: osVersion,
    deviceModel: envInfo.os.name || null
  };
  /**
   * viewportInfo: scale, deviceWidth, deviceHeight. dpr
   */
  return extend(env, viewportInfo)
}

// const viewportInfo = initViewport()

// 750 by default currently
// const scale = viewportInfo.scale

// const units = {
//   REM: 12 * scale,
//   VW: viewportInfo.deviceWidth / 100,
//   VH: viewportInfo.deviceHeight / 100,
//   VMIN: Math.min(viewportInfo.deviceWidth, viewportInfo.deviceHeight) / 100,
//   VMAX: Math.max(viewportInfo.deviceWidth, viewportInfo.deviceHeight) / 100,
//   CM: 96 / 2.54 * scale,
//   MM: 96 / 25.4 * scale,
//   Q: 96 / 25.4 / 4 * scale,
//   IN: 96 * scale,
//   PT: 96 / 72 * scale,
//   PC: 96 / 6 * scale,
//   PX: scale
// }

// Object.freeze(units)
// Object.freeze(env)

// window.CSS_UNIT = units
window.WXEnvironment = initEnv(init$2(), window.lib.env);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* global Vue */

var weexModules = {};
var _roots = [];

var weex$4 = {
  __vue__: null,
  utils: utils,
  // units: window.CSS_UNIT,
  config: {
    env: window.WXEnvironment,
    bundleUrl: location.href
  },

  _components: {},
  _modules: weexModules,

  _meta: {
    mounted: {},
    updated: {},
    destroyed: {},
    requiredModules: {},
    apiCalled: {},
    perf: {}
  },

  document: {
    body: {}
  },

  requireModule: function requireModule (moduleName) {
    var metaMod = weex$4._meta.requiredModules;
    if (!metaMod[moduleName]) {
      metaMod[moduleName] = 0;
    }
    metaMod[moduleName]++;
    return weexModules[moduleName]
  },

  registerModule: function registerModule () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    return (ref = this).registerApiModule.apply(ref, args)
    var ref;
  },

  support: function support (feature) {
    if ( feature === void 0 ) feature = '';

    var match = (feature + '').match(/@(component|module)\/(\w+)(.\w+)?/);
    if (match) {
      var type = match[1];
      var mod = match[2];
      var method = match[3];
      method = method && method.replace(/^\./, '');
      switch (type) {
        case 'component':
          return typeof this._components[mod] !== 'undefined'
        case 'module':
          var module = weexModules[mod];
          return module && method ? !!module[method] : !!module
      }
    }
    else {
      console.warn(("[vue-render] invalid argument for weex.support: " + feature));
      return null
    }
  },

  /**
   * Register a new vue instance in this weex instance. Put its root element into weex.document.body.children, so
   * that user can use weex.document.body to walk through all dom structures in all vue instances in the page.
   */
  registerVueInstance: function registerVueInstance (instance) {
    if (!instance instanceof Vue) {
      return
    }
    var root = instance.$root;
    if (!root || !root.$el) {
      return
    }
    this.document.body.children.push(root.$el);
  },

  // @deprecated
  require: function require () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    console.log("[Vue Render] \"weex.require\" is deprecated, please use \"weex.requireModule\" instead.");
    return (ref = this).requireModule.apply(ref, args)
    var ref;
  },

  // @deprecated
  // TODO: rename to registerModule
  registerApiModule: function registerApiModule (name, module, meta) {
    if (!weexModules[name]) {
      weexModules[name] = {};
    }
    if (!!meta && meta.mountType === 'full') {
      weexModules[name] = module;
    }
    var loop = function ( key ) {
      if (module.hasOwnProperty(key)) {
        weexModules[name][key] = function () {
          var called = weex$4._meta.apiCalled;
          if (!called[name]) {
            called[name] = {};
          }
          var calledMod = called[name];
          if (!calledMod[key]) {
            calledMod[key] = 0;
          }
          calledMod[key]++;
          return module[key].apply(weex$4, arguments)
        };
      }
    };

    for (var key in module) loop( key );
  },

  registerComponent: function registerComponent (name, component) {
    if (!this.__vue__) {
      return console.log('[Vue Render] Vue is not found. Please import Vue.js before register a component.')
    }
    this._components[name] = 0;
    if (component._css) {
      var css = component._css.replace(/\b[+-]?[\d.]+rem;?\b/g, function (m) {
        return parseFloat(m) * 75 * weex$4.config.env.scale + 'px'
      });
      appendCss(css, ("weex-cmp-" + name));
      delete component._css;
    }
    this.__vue__.component(name, component);
  },

  // @deprecated
  getRoot: function getRoot () {},

  // @deprecated
  sender: {
    performCallback: function performCallback (callback, data, keepAlive) {
      if (typeof callback === 'function') {
        return callback(data)
      }
      return null
    }
  },

  // @deprecated
  install: function install (module) {
    module.init(this);
  }
};

Object.defineProperty(weex$4.document.body, 'children', {
  get: function get () { return _roots }
})

; ['on', 'once', 'off', 'emit'].forEach(function (method) {
  weex$4[method] = function () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    if (!this._vue) {
      this._vue = new this.__vue__();
    }
    return (ref = this._vue)[("$" + method)].apply(ref, args)
    var ref;
  };
});

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// 
/**
 * @fileOverview: perf data recorder.
 */

var perf = window._weex_perf = {
  time: {}
};

var tmp = {};

function getNow () {
  var performance = window.performance;
  return performance && performance.now ? performance.now() : new Date().getTime()
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* istanbul ignore next */

var pseudoId = 0;
/**
 * get scoped class style map from stylesheets in <head>.
 */
function getHeadStyleMap () {
  var needToRemoveStyleSheetNodes = [];
  var styleSheetsArr = Array.from(document.styleSheets || []).filter(function (styleSheet) {
    return styleSheet.ownerNode.getAttribute('weex-scanned') !== '1'
  });

  var res = Array.from(styleSheetsArr)
    .reduce(function (pre, styleSheet) {
      styleSheet.ownerNode.setAttribute('weex-scanned', 1);
      /**
       * why not using styleSheet.rules || styleSheet.cssRules to get css rules ?
       * because weex's components defined non-standard style attributes, which is
       * auto ignored when access rule.cssText.
       * another reason not to use cssRules directy:
       * @issue: https://stackoverflow.com/questions/21642277/security-error-the-operation-is-insecure-in-firefox-document-stylesheets
       */
      if (
        // css in a link. just ignore this. probably a link stylesheet.
        (styleSheet.ownerNode.tagName.toLowerCase() === 'link')
        || !styleSheet.ownerNode.textContent
        // pseudo class styleSheet node is generated by weex. just ignore it.
        || styleSheet.ownerNode.id.match(/weex-pseudo-\d+/)) {
        return pre
      }
      /**
       * start to analyze it's content.
       */
      var strArr = trimComment(styleSheet.ownerNode.textContent.trim()).split(/}/);
      var len = strArr.length;
      var rules = [];
      for (var i = 0; i < len; i++) {
        var str = strArr[i];
        if (!str || str.match(/^\s*$/)) {
          continue
        }
        /**
         * should match these cases:
         * .a[data-v-xxx] { color: red; }
         * .a[data-v-xxx]:active { color: green; }
         * .a[data-v-xxx], .b[data-v-xxx] { color: red; }
         *
         * should not match these cases:
         * .a { color: red; }
         * etc.
         */
        var match = str.match(/((?:,?\s*\.[\w-]+\[data-v-\w+\](?::\w+)?)+)\s*({[^}]+)/);
        if (!match) {
          // not the vue static class styles map. so acquire no rules for this styleSheet.
          // just jump through this styleSheet and go to analyzing next.
          return pre
        }
        var clsNms = match[1].split(',').map(function (n) { return n.trim(); });
        var cssText = match[2].replace(/[{}]/g, '').trim();
        var clsNmsIdx = 0;
        var clsNmsLen = clsNms.length;
        while (clsNmsIdx < clsNmsLen) {
          rules.push({
            selectorText: clsNms[clsNmsIdx],
            cssText: cssText
          });
          clsNmsIdx++;
        }
      }
      Array.from(rules).forEach(function (rule) {
        var selector = rule.selectorText || '';
        var isPseudo = false;
        if (selector.match(/:(?:active|focus|enabled|disabled)/)) {
          isPseudo = true;
        }
        var styleObj = trimComment(rule.cssText).split(';')
          .reduce(function (styleObj, statement) {
            statement = statement.trim();
            if (statement && statement.indexOf('/*') <= -1) {
              var resArr = statement.split(':').map(function (part) { return part.trim(); });
              styleObj[resArr[0]] = resArr[1];
            }
            return styleObj
          }, {});
        if (isPseudo) {
          var txt = Object.keys(styleObj).reduce(function (pre, cur) {
            return pre + cur + ":" + (styleObj[cur]) + "!important;"
          }, '');
          appendCss((selector + "{" + txt + "}"), ("weex-pseudo-" + (pseudoId++)));
        }
        var objMap = !isPseudo ? pre : pre.pseudo;
        var res = objMap[selector];
        if (!res) {
          objMap[selector] = styleObj;
        }
        else {
          extend(objMap[selector], styleObj);
        }
      });
      /**
       * remove this styleSheet node since it's in the styleMap already. And this style
       * should only be fetched and used from styleMap to generate the final combined
       * component style, not from the stylesheet itself.
       */
      needToRemoveStyleSheetNodes.push(styleSheet.ownerNode);
      return pre
    }, { pseudo: {}});
  if (!window._no_remove_style_sheets) {
    needToRemoveStyleSheetNodes.forEach(function (node) {
      node.parentNode.removeChild(node);
    });
  }
  else {}
  return res
}

// export function getScopeIds (context) {
//   const arr = []
//   let ctx = context
//   let scopeId
//   while (ctx) {
//     scopeId = ctx.$options._scopeId
//     scopeId && arr.push(scopeId)
//     ctx = ctx.$options.parent
//   }
//   return arr
// }

function getScopeId (vnode) {
  return vnode.context.$options._scopeId
}

/**
 * get style in <style scoped> tags for this component.
 */
function getScopeStyle (vnode, classNames) {
  var scopeId = getScopeId(vnode);
  var style = {};
  var styleMap = weex._styleMap || {};
  var clsNmsIdx = 0;
  var clsNmsLen = classNames.length;
  while (clsNmsIdx < clsNmsLen) {
    var cls = "." + (classNames[clsNmsIdx]) + "[" + scopeId + "]";
    var map = styleMap[cls];
    map && extendTruthy(style, map);
    clsNmsIdx++;
  }
  return camelizeKeys(style)
}

function getStyle (vnode, extract) {
  var data = vnode.data || {};
  var staticClassNames = (typeof data.staticClass === 'string') ? data.staticClass.split(' ') : (data.staticClass || []);
  var classNames = (typeof data.class === 'string') ? data.class.split(' ') : (data.class || []);
  var clsNms = staticClassNames.concat(classNames);
  var style = normalizeStyle(getScopeStyle(vnode, clsNms));
  /**
   * cache static style and bind style.
   * cached staticStyle (including style and staticStyle) has already been normalized
   * in $processStyle. So there's no need to normalize it again.
   */
  if (!data.cached) {
    // cache staticStyle once in the beginning.
    data.cached = extendTruthy({}, data.staticStyle);
  }
  // cache binding style every time since the binding style is variable.
  extendTruthy(data.cached, data.style);
  extend(style, data.cached);
  data.staticStyle = style;
  if (extract) {
    delete data.staticStyle;
    delete data.style;
  }
  return style
}

/**
 * get style merged with static styles, binding styles, and scoped class styles,
 * with keys in camelcase.
 */
function getComponentStyle (context, extract) {
  if (!context.$vnode) {
    return {}
  }
  var style = {};
  var vnode = context.$vnode;
  while (vnode) {
    extend(style, getStyle(vnode, extract));
    vnode = vnode.parent;
  }
  style = autoPrefix(style);
  /**
   * when prefixed value is a array, it should be applied to element
   * during the next tick.
   * e.g.
   *  background-image:  linear-gradient(to top,#f5fefd,#ffffff);
   *  will generate:
   *  {
   *    backgroundImage: [
   *      "-webkit-linear-gradient(to top,#f5fefd,#ffffff)",
   *      "-moz-linear-gradient(to top,#f5fefd,#ffffff)",
   *      "linear-gradient(to top,#f5fefd,#ffffff)"]
   *  }
   */
  var loop = function ( k ) {
    if (Array.isArray(style[k])) {
      var vals = style[k];
      context.$nextTick(function () {
        var el = context.$el;
        if (el) {
          for (var i = 0; i < vals.length; i++) {
            el.style[k] = vals[i];
          }
        }
      });
      if (k !== 'position') { delete style[k]; }
    }
  };

  for (var k in style) loop( k );

  /**
   * If position is 'sticky', then add it to the stickyChildren of the parent scroller.
   */
  var pos = style.position;
  var reg = /sticky$/;
  if (pos === 'fixed') {
    context.$nextTick(function () {
      var el = context.$el;
      if (el) {
        el.classList.add('weex-fixed');
      }
    });
  }
  else if (isArray(pos) && pos[0].match(reg) || (pos + '').match(reg)) {
    delete style.position;
    // use native sticky.
    if (supportSticky()) {
      context.$nextTick(function () {
        var el = context.$el;
        if (el) {
          el.classList.add('weex-ios-sticky');
        }
      });
    }
    // use re-implementation of sticky.
    else if (!context._stickyAdded) {
      var uid = context._uid;
      var scroller = getParentScroller(context);
      if (scroller) {
        context._stickyAdded = true;
        if (!scroller._stickyChildren) {
          scroller._stickyChildren = {};
        }
        scroller._stickyChildren[uid] = context;
      }
      context.$nextTick(function () {
        var el = context.$el;
        if (el) {
          context._initOffsetTop = el.offsetTop;
        }
      });
    }
  }

  return style
}

function extractComponentStyle (context) {
  return getComponentStyle(context, true)
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * remove text nodes in the nodes array.
 * @param  {Array} nodes
 * @return {Array} nodes without text nodes.
 */
function trimTextVNodes (vnodes) {
  if (isArray(vnodes)) {
    return vnodes.filter(function (vnode) { return !!vnode.tag; })
  }
  return vnodes
}

/**
 * get listeners from on config and v-on binding.
 * v-on binding has a priority over on config.
 * @param {vnode} vnode
 * @param {String} evt: event name.
 */
function getListeners (vnode, evt) {
  var handlers = [];
  while (vnode) {
    if (vnode.data && vnode.data.on) {
      var handler = vnode.data.on[evt];
      handler && handlers.push(handler);
    }
    if (vnode.componentOptions && vnode.componentOptions.listeners) {
      var handler$1 = vnode.componentOptions.listeners[evt];
      handler$1 && handlers.push(handler$1);
    }
    vnode = vnode.parent;
  }
  return handlers
}

/**
 * Instead of vue's invoker, this function should check if the binding function
 * has a _weex_hook flag. If there is one, the handler should not be triggered.
 * @param {Array | Function} fns
 */
function applyFns (fns) {
  var args = [], len$1 = arguments.length - 1;
  while ( len$1-- > 0 ) args[ len$1 ] = arguments[ len$1 + 1 ];

  if (Array.isArray(fns)) {
    var cloned = fns.slice();
    var len = cloned.length;
    for (var i = 0; i < len; i++) {
      var fn = cloned[i];
      if (fn._weex_hook) {
        continue
      }
      fn.apply(null, args);
    }
  }
  else {
    if (!fns._weex_hook) {
      fns.apply(null, args);
    }
  }
}

/**
 * emit native events to enable v-on.
 * @param {VComponent} context: which one to emit a event on.
 * @param {array | object} events: extra events. You can pass in multiple arguments here.
 */
function createEventMap (context) {
  var events = [], len$1 = arguments.length - 1;
  while ( len$1-- > 0 ) events[ len$1 ] = arguments[ len$1 + 1 ];

  var eventMap = {};
  /**
   * Bind some original type event to your specified type event handler.
   * e.g. bind 'tap' event to 'click' event listener: bindFunc('tap')('click').
   * Or bind certian event with your specified handler: bindFunc('click', someFunction)
   */
  var bindFunc = function (originalType) {
    return function (listenTo) {
      var handler;
      var evtName = originalType || listenTo;
      if (typeof listenTo === 'function') {
        handler = listenTo;
      }
      else if (typeof listenTo === 'string') {
        handler = function (e) {
          /**
           * use '_triggered' to control actural bubbling (allow original bubbling).
           */
          if (e._triggered) {
            return
          }
          /**
           * trigger the closest parent which has bound event handlers.
           */
          var vm = context;
          while (vm) {
            var ons = getListeners(vm._vnode || vm.$vnode, listenTo);
            var len = ons.length;
            if (len > 0) {
              var idx = 0;
              while (idx < len) {
                var on = ons[idx];
                applyFns(on.fns, e);
                idx++;
              }
              // once a parent node (or self node) has triggered the handler, then
              // it stops bubbling immediately, and a '_triggered' object is set.
              e._triggered = {
                el: vm.$el
              };
              return
            }
            vm = vm.$parent;
          }
        };
        // flag to distinguish from user-binding listeners.
        handler._weex_hook = true;
      }
      if (!eventMap[evtName]) {
        eventMap[evtName] = [];
      }
      eventMap[evtName].push(handler);
    }
  };

  /**
   * component's extra event bindings. This is mostly for the needs of component's
   * own special behaviours. These handlers will be processed after the user's
   * corresponding event handlers.
   */
  if (events) {
    var len = events.length;
    for (var i = 0; i < len; i++) {
      var extra = events[i];
      if (isArray(extra)) {
        extra.forEach(bindFunc());
      }
      else if (typeof extra === 'object') {
        for (var key in extra) {
          bindFunc(key)(extra[key]);
        }
      }
    }
  }

  return eventMap
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */



var core$1 = Object.freeze({
	getHeadStyleMap: getHeadStyleMap,
	getScopeId: getScopeId,
	getScopeStyle: getScopeStyle,
	getComponentStyle: getComponentStyle,
	extractComponentStyle: extractComponentStyle,
	trimTextVNodes: trimTextVNodes,
	applyFns: applyFns,
	createEventMap: createEventMap
});

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var lazyloadWatched = false;
function watchLazyload () {
  lazyloadWatched = true
  ; [
    'scroll',
    // 'transitionend',
    // 'webkitTransitionEnd',
    // 'animationend',
    // 'webkitAnimationEnd',
    'resize'
  ].forEach(function (evt) {
    window.addEventListener(evt, getThrottleLazyload(25, document.body));
  });
  /**
   * In case the users use the body's overflow to scroll. Then the scroll
   * event would not be triggered on the window object but on the body.
   */
  document.body.addEventListener('scroll', getThrottleLazyload(25, document.body));
}

var warned = false;
var notePage = 'https://gist.github.com/MrRaindrop/5a805a067146609e5cfd4d64d775d693#file-weex-vue-render-config-for-vue-loader-js';
function warnProcessStyle () {
  if (!warned) {
    warned = true;
    var page = window._process_style_note_page || notePage;
    console.warn("[vue-render]: you should add vue-loader config with $processStyle to enable inline styles's "
      + "normalization. see " + page + " If you already did this, please ignore this message.");
  }
}

var idCnt = 0;

var base$1 = {
  beforeCreate: function beforeCreate () {
    if (!lazyloadWatched) {
      watchLazyload();
    }
  },

  updated: function updated () {
    if (this._rootId) {
      var el = this.$el;
      if (el.nodeType === 1
        && el.className.indexOf('weex-root') <= -1) {
        el.classList.add('weex-root');
        el.setAttribute('data-wx-root-id', this._rootId);
      }
    }

    var tagName = this.$options && this.$options._componentTag;
    var metaUp = weex._meta.updated;
    if (!metaUp[tagName]) {
      metaUp[tagName] = 0;
    }
    metaUp[tagName]++;
    /**
     * since the updating of component may affect the layout, the lazyloading should
     * be fired.
     */
    this._fireLazyload();
  },

  mounted: function mounted () {
    var tagName = this.$options && this.$options._componentTag;
    if (typeof weex._components[tagName] !== 'undefined') {
      weex._components[tagName]++;
    }
    var metaMt = weex._meta.mounted;
    if (!metaMt[tagName]) {
      metaMt[tagName] = 0;
    }
    metaMt[tagName]++;
    if (this === this.$root) {
      var rootId = "wx-root-" + (idCnt++);
      if (!weex._root) {
        weex._root = {};
      }
      weex._root[rootId] = this;
      this._rootId = rootId;
      var el = this.$el;
      if (el.nodeType !== 1) {
        return
      }
      el.classList.add('weex-root');
      el.setAttribute('data-wx-root-id', rootId);
      this._fireLazyload(el);
    }

    // give warning for not using $processStyle in vue-loader config.
    if (!warned && !window._style_processing_added) {
      warnProcessStyle();
    }

    // bind attrs to $el.
    var i, j;
    if (this.$el && (i = j = this.$vnode) && (i = i.data) && (j = j.componentOptions)) {
      this.$el.attrs = extend({}, i.attrs, j.propsData);
    }
    watchAppear(this, true);
  },

  destroyed: function destroyed () {
    /**
     * if the destroyed element is above another panel with images inside, and the images
     * moved into the viewport, then the lazyloading should be triggered.
     */
    if (this._rootId) {
      delete weex._root[this._rootId];
      delete this._rootId;
    }
    var tagName = this.$options && this.$options._componentTag;
    if (typeof weex._components[tagName] !== 'undefined') {
      weex._components[tagName]--;
    }
    var metaDs = weex._meta.destroyed;
    if (!metaDs[tagName]) {
      metaDs[tagName] = 0;
    }
    metaDs[tagName]++;

    this._fireLazyload();
    triggerDisappear(this);
  },

  methods: {
    _fireLazyload: function _fireLazyload (el) {
      getThrottleLazyload(25, el || document.body)();
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * get a beforeCreate hook, which has a mark to identify the hook function itself.
 */
function getIdentifiedBeforeCreate () {
  var disposed = {}; // disposed components. Already scanned.
  function beforeCreate () {
    /**
     * get static class style map from document's styleSheets.
     * Weex.on will create a Vue instance. In this case we'll ignore it, since
     * it's not sure whether the scoped style has already attached to head or not.
     */
    var tagName = this.$options && this.$options._componentTag;
    /**
     * For vue-loader ^11.3.x, there's no injectStyle function. The styleSheet
     * is already injected into the head. Just scan it.
     */
    // async component.
    if ((this.$vnode && this.$vnode.data && this.$vnode.data.tag === 'component')
      || (this === this.$root && this.$options && !this._firstScanned)) {
      this._firstScanned = true;
      extend(weex._styleMap, getHeadStyleMap());
    }
    /**
     * For vue-loader ^12.0, the injectStyle function is hooked. We should scan
     * style map after the injectStyle hook called.
     */
    if (((this === this.$root && this.$options)
      || (tagName
      && (typeof weex._components[tagName] === 'undefined')
      && !disposed[tagName]))
      && !this._secondScanned) {
      disposed[tagName] = 1;
      this._secondScanned = true;
      var hooks = this.$options.beforeCreate;
      var len = hooks.length;
      var thisHookIdx = 0; // index of this hook in the hooks array.
      for (; thisHookIdx < len; thisHookIdx++) {
        if (hooks[thisHookIdx]._styleMixin) { break }
      }
      if (thisHookIdx !== len - 1) {
        var func = hooks[len - 1];
        hooks[len - 1] = function () {
          // call the original injectStyle hook.
          func.call(this);
          // scan the new appended styleSheet.
          extend(weex._styleMap, getHeadStyleMap());
          hooks[len - 1] = func;
        };
      }
    }
  }
  beforeCreate._styleMixin = true;
  return beforeCreate
}

var style = {
  beforeCreate: getIdentifiedBeforeCreate(),

  methods: {
    $processStyle: function $processStyle (style) {
      window._style_processing_added = true;
      if (!style) {
        return
      }
      return normalizeStyle(camelizeKeys(style))
    },

    _getParentRect: function _getParentRect () {
      var parentElm = this.$options._parentElm;
      return parentElm && parentElm.getBoundingClientRect()
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// 

// input and textare has some common api and event
var findEnterKeyType = function (key) {
  var keys = ['default', 'go', 'next', 'search', 'send'];
  if (keys.indexOf(key) > -1) {
    return key
  }
  return 'done'
};

var inputCommon = {
  methods: {
    focus: function focus () {
      this.$el && this.$el.focus();
    },
    blur: function blur () {
      this.$el && this.$el.blur();
    },

    setSelectionRange: function setSelectionRange (start, end) {
      try {
        this.$el.setSelectionRange(start, end);
      }
      catch (e) {
        
      }
    },

    getSelectionRange: function getSelectionRange (callback) {
      try {
        var selection = window.getSelection();
        var str = selection.toString();
        var selectionStart = this.$el.value.indexOf(str);
        var selectionEnd = selectionStart === -1 ? selectionStart : selectionStart + str.length;
        callback && callback({
          selectionStart: selectionStart,
          selectionEnd: selectionEnd
        });
      }
      catch (e) {
        callback && callback(new Error('[vue-render] getSelection is not supported.'));
      }
    },

    getEditSelectionRange: function getEditSelectionRange (callback) {
      return this.getSelectionRange(callback)
    },

    // support enter key event
    createKeyboardEvent: function createKeyboardEvent (events) {
      var customKeyType = this.returnKeyType;
      var self = this;
      if (this._events['return']) {
        var keyboardEvents = {
          'keyup': function (ev) {
            var code = ev.keyCode;
            var key = ev.key;
            if (code === 13) {
              if (!key || key.toLowerCase() === 'tab') {
                ev.key = 'next';
              }
              var rightKeyType = findEnterKeyType(customKeyType);
              ev.returnKeyType = rightKeyType;
              ev.value = ev.target.value;
              self.$emit('return', ev);
            }
          }
        };
        events = extend(events, keyboardEvents);
      }
      return events
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var sticky = {
  destroyed: function destroyed () {
    if (!this._stickyAdded) { return }
    var scroller = getParentScroller(this);
    if (!scroller) { return }
    delete scroller._stickyChildren[this._uid];
  },

  methods: {
    _addSticky: function _addSticky () {
      var el = this.$el;
      if (!el || el.nodeType === 1) {
        return
      }
      el.classList.add('sticky');
      if (!this._placeholder) {
        this._placeholder = el.cloneNode(true);
      }
      this._placeholder.style.display = 'block';
      this._placeholder.style.width = this.$el.offsetWidth + 'px';
      this._placeholder.style.height = this.$el.offsetHeight + 'px';
      el.parentNode.insertBefore(this._placeholder, this.$el);
    },

    _removeSticky: function _removeSticky () {
      var el = this.$el;
      if (!el || el.nodeType === 1) {
        return
      }
      el.classList.remove('sticky');
      if (this._placeholder) {
        this._placeholder.parentNode.removeChild(this._placeholder);
      }
      this._placeholder = null;
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
window.global = window;
window.weex = weex$4;

weex$4._styleMap = {}

; ['getComponentStyle',
  'extractComponentStyle',
  'createEventMap',
  'trimTextVNodes'].forEach(function (method) {
    weex$4[method] = core$1[method].bind(weex$4);
  });

weex$4.mixins = {
  inputCommon: inputCommon
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function setVue (vue) {
  if (!vue) {
    throw new Error('[Vue Render] Vue not found. Please make sure vue 2.x runtime is imported.')
  }
  global.weex.__vue__ = vue;
  console.log(("[Vue Render] install Vue " + (vue.version) + "."));
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var gestureEvents = config.gestureEvents;
var nativeEvents = ['click', 'touchstart', 'touchmove', 'touchend'];
var needPassive = ['touchmove'];

var events = gestureEvents.concat(nativeEvents);

/**
 * if el is a `<a>` element.
 * @param {HTMLElement} el
 */
function isANode (el) {
  return el.tagName.toLowerCase() === 'a'
}

function isInANode (el) {
  var parent = el.parentElement;
  while (parent && parent !== document.body) {
    if (parent.tagName === 'A') { return true }
    parent = parent.parentElement;
  }
  return false
}

/**
 * get listeners from on config and v-on binding.
 * v-on binding has a priority over on config.
 * @param {vnode} vnode
 * @param {String} evt: event name.
 */
function getListeners$1 (vnode, evt) {
  var handlers = [];
  while (vnode) {
    if (vnode.data && vnode.data.on) {
      var handler = vnode.data.on[evt];
      handler && handlers.push(handler);
    }
    if (vnode.componentOptions && vnode.componentOptions.listeners) {
      var handler$1 = vnode.componentOptions.listeners[evt];
      handler$1 && handlers.push(handler$1);
    }
    vnode = vnode.parent;
  }
  return handlers
}

var _inited$1 = false;
function _init (doc) {
  if (_inited$1) {
    return
  }
  if (!doc) {
    return
  }
  _inited$1 = true;
  var _sp = supportsPassive();
  events.forEach(function (evt) {
    /**
     * use capture for click handling, therefore there's a chance to handle
     * it before any other listeners binding on document or document.body.
     */
    var option =
      evt === 'click'
      ? true : needPassive.indexOf(evt) > -1 && _sp
      ? { passive: true } : false;
    doc.addEventListener(evt, function (e) {
      var el = e.target;
      var vm = el.__vue__;
      while (!vm && el && el !== document.body) {
        el = el.parentElement;
        vm = el && el.__vue__;
      }
      if (!vm) {  // not a vue component.
        return
      }
      var disposed = false;
      var evtName = e.type;

      if (evtName === 'tap' && e._for !== 'weex') {
        return
      }

      while (vm) {
        var vnode = vm._vnode || vm.$vnode;
        var elm = vm.$el;
        var ons = getListeners$1(vnode, evtName === 'tap' ? 'click' : evtName);
        var len = ons && ons.length;

        if (len > 0) {
          if (evtName !== 'click') {
            for (var i = 0; i < len; i++) {
              var handler = ons[i];
              var newEvt = evtName === 'tap'
                ? createEvent(el, 'click')
                : e;
              newEvt._triggered = { target: elm };
              applyFns(handler.fns, newEvt);
            }
          }
          e._triggered = { target: elm };
          disposed = true;
        }

        if (isANode(elm)
          && (evtName === 'click' || evtName === 'tap')) {
          var href = elm.getAttribute('href');
          var voidHrefReg = /^\s*javascript\s*:\s*void\s*(?:\(\s*0\s*\)|0)\s*;?\s*$/;
          var prevent = elm.getAttribute('prevent');
          if (window._should_intercept_a_jump && window._should_intercept_a_jump(elm)) {
            // e._triggered should not be true since we left the intercepter to handle the event.
            e._triggered = false;
            disposed = true;
          }
          else if (href.match(voidHrefReg)
            || prevent === '' || prevent === 'true') {
            e._triggered = false;
            e.preventDefault();
          }
          else {
            e._triggered = { target: elm };
            disposed = true; // handled by default behavior for clicking on a element.
          }
        }

        /**
         * If the click handler is binding on a element inside a <a> element,
         * then should prevent default.
         */
        if (disposed && evtName === 'click' && isInANode(elm)) {
          e._triggered = { target: elm };
          e.preventDefault();
          return
        }

        if (disposed) {
          return
        }
        vm = vm.$parent;
      }
    }, option);
  });
}

function init$3 () {
  _init(document);
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * init weex.
 * @param  {Vue$2} Vue: Vue Constructor.
 * @param  {object} options: extend weex plugins.
 *         - components.
 *         - modules.
 */
var _inited = false;
function init$1 (Vue/*, options = {}*/) {
  if (_inited) { return }
  _inited = true;

  setVue(Vue);

  Vue.prototype.$getConfig = function () {
    console.warn('[Vue Render] "this.$getConfig" is deprecated, please use "weex.config" instead.');
    return weex.config
  };

  var htmlRegex = /^html:/i;
  Vue.config.isReservedTag = function (tag) { return htmlRegex.test(tag); };
  Vue.config.parsePlatformTagName = function (tag) { return tag.replace(htmlRegex, ''); };

  function isWeexTag (tag) {
    return typeof weex._components[tag] !== 'undefined'
  }
  var oldGetTagNamespace = Vue.config.getTagNamespace;
  Vue.config.getTagNamespace = function (tag) {
    if (isWeexTag(tag)) {
      return
    }
    return oldGetTagNamespace(tag)
  };

  Vue.mixin(base$1);
  Vue.mixin(style);
  Vue.mixin(sticky);

  init$3();
}

// auto init in dist mode.
if (typeof window !== 'undefined' && window.Vue) {
  init$1(window.Vue);
}

weex.init = init$1;

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// import { validateStyles } from '../validator'

var _css = "\n.weex-a {\n  text-decoration: none;\n}\n";

function getA (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var trimTextVNodes = weex.trimTextVNodes;

  return {
    name: 'weex-a',
    props: {
      href: String
    },
    render: function render (createElement) {
      /* istanbul ignore next */
      // if ("production" === 'development') {
      //   validateStyles('a', this.$vnode.data && this.$vnode.data.staticStyle)
      // }
      return createElement('html:a', {
        attrs: {
          'weex-type': 'a',
          href: this.href
        },
        staticClass: 'weex-a weex-ct',
        staticStyle: extractComponentStyle(this)
      }, trimTextVNodes(this.$slots.default))
    },
    _css: _css
  }
}

var a = {
  init: function init (weex) {
    weex.registerComponent('a', getA(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var _css$1 = "\nbody > .weex-div {\n  min-height: 100%;\n}\n";

function getDiv (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var trimTextVNodes = weex.trimTextVNodes;

  return {
    name: 'weex-div',
    render: function render (createElement) {
      return createElement('html:div', {
        attrs: { 'weex-type': 'div' },
        staticClass: 'weex-div weex-ct',
        staticStyle: extractComponentStyle(this)
      }, trimTextVNodes(this.$slots.default))
    },
    _css: _css$1
  }
}

var div = {
  init: function init (weex) {
    var div = getDiv(weex);
    weex.registerComponent('div', div);
    weex.registerComponent('container', div);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var extractComponentStyle$1;
var createEventMap$1;
var extend$2;
var isArray$1;

var IMG_NAME_BITS = 15;

var _css$2 = "\n.weex-image, .weex-img {\n  background-repeat: no-repeat;\n  background-position: 50% 50%;\n}\n";
/**
 * 1. get sprite style if spritePosition is set.
 * 2. else get resize (stetch|cover|contain) related styles.
 */
function getCustomStyle (context, mergedStyle) {
  var spritePosition = context.spritePosition;
  if (spritePosition && !isArray$1(spritePosition)) {
    spritePosition = (spritePosition + '').split(',').map(function (val) {
      return val.replace(/[[\]]/g, '').replace(/^\s*(\S[\s\S]*?)\s*$/g, function ($0, $1) {
        return parseInt($1)
      })
    });
  }
  if (spritePosition) {
    var posX = -spritePosition[0];
    var posY = -spritePosition[1];
    var scale = weex.config.env.scale;
    var sizeScale = parseFloat(context.spriteWidth) / parseFloat(mergedStyle.width) * weex.config.env.scale;
    return {
      'background-position': ((posX * scale) + "px " + (posY * scale) + "px"),
      'background-size': ((sizeScale * 100) + "%")
    }
  }
  var stretch = '100% 100%';
  var resize = context.resize || stretch;
  var bgSize = ['cover', 'contain', stretch].indexOf(resize) > -1 ? resize : stretch;
  // compatibility: http://caniuse.com/#search=background-size
  return { 'background-size': bgSize }
}

function preProcessSrc (context, url, mergedStyle) {
  // somehow the merged style in _prerender hook is gone.
  // just return the original src.
  if (!mergedStyle || !mergedStyle.width || !mergedStyle.height) {
    return url
  }
  var width = mergedStyle.width;
  var height = mergedStyle.height;
  return context.processImgSrc && context.processImgSrc(url, {
    width: parseFloat(width),
    height: parseFloat(height),
    quality: context.quality,
    sharpen: context.sharpen,
    original: context.original
  }) || url
}

function download (url, callback) {
  function success () {
    callback && callback({
      success: true
    });
  }
  function fail (err) {
    callback && callback({
      success: false,
      errorDesc: err + ''
    });
  }
  try {
    var isDataUrl = false;
    var parts;
    var name;
    if (url.match(/data:image\/[^;]+;base64,/)) {
      isDataUrl = true;
      parts = url.split(',');
    }
    if (!isDataUrl) {
      name = url
        .replace(/\?[^?]+/, '')
        .replace(/#[^#]+/, '')
        .match(/([^/]+)$/);
    }
    else {
      name = parts[1].substr(0, IMG_NAME_BITS);
    }
    var aEl = document.createElement('a');
    aEl.href = url;
    /**
     * Not all browser support this 'download' attribute. In these browsers it'll jump
     * to the photo url page and user have to longpress the photo to save it.
     */
    aEl.download = name;
    var clickEvt = new Event('click', { bubbles: false });
    aEl.dispatchEvent(clickEvt);
    success();
  }
  catch (err) {
    fail(err);
  }
}

var image = {
  name: 'weex-image',
  props: {
    src: String,
    placeholder: String,
    resize: String,
    quality: String,
    sharpen: String,
    original: [String, Boolean],
    spriteSrc: String,
    spritePosition: [String, Array],
    spriteWidth: [String, Number]
  },

  updated: function updated () {
    this._fireLazyload();
  },

  mounted: function mounted () {
    this._fireLazyload();
  },

  methods: {
    save: function save (callback) {
      download(this.src, callback);
    }
  },

  render: function render (createElement) {
    var style = extractComponentStyle$1(this);
    var customStyle = getCustomStyle(this, style);
    return createElement('figure', {
      attrs: {
        'weex-type': 'image',
        'img-src': this.spriteSrc || preProcessSrc(this, this.src, style),
        'img-placeholder': preProcessSrc(this, this.placeholder, style),
        'sprite-src': this.spriteSrc,
        'sprite-position': this.spritePosition,
        'sprite-width': this.spriteWidth
      },
      on: createEventMap$1(this, ['load', 'error']),
      staticClass: 'weex-image weex-el',
      staticStyle: extend$2(style, customStyle)
    })
  },
  _css: _css$2
};

var image$1 = {
  init: function init (weex) {
    extractComponentStyle$1 = weex.extractComponentStyle;
    createEventMap$1 = weex.createEventMap;
    extend$2 = weex.utils.extend;
    isArray$1 = weex.utils.isArray;

    weex.registerComponent('image', image);
    weex.registerComponent('img', image);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * @fileOverview Input component.
 * Support v-model only if vue version is larger than 2.2.0
 */
var extractComponentStyle$2;
var mapFormEvents$1;
var appendCss$1;

var ID_PREFIX_PLACEHOLDER_COLOR = 'wipt_plc_';
var ID_PREFIX_INPUT = 'wipt_';
var idCount = 0;

var _css$3 = "\n.weex-input, .weex-textarea {\n  font-size: 0.426667rem;\n}\n.weex-input:focus, .weex-textarea:focus {\n  outline: none;\n}\n";

function setPlaceholderColor (inputVm, placeholderColor) {
  if (!placeholderColor) {
    return
  }
  var vendors = [
    '::-webkit-input-placeholder',
    ':-moz-placeholder',
    '::-moz-placeholder',
    ':-ms-input-placeholder',
    ':placeholder-shown'
  ];
  var id = inputVm._id;
  appendCss$1(
    vendors.map(function (vendor, idx) {
      return ("#" + ID_PREFIX_INPUT + id + (vendors[idx]) + "{color:" + placeholderColor + ";}")
    }).join(''),
    ("" + ID_PREFIX_PLACEHOLDER_COLOR + id),
    true);
}

function processStyle (vm) {
  var styles = extractComponentStyle$2(vm);
  var phColor = styles.placeholderColor;
  if (phColor) {
    setPlaceholderColor(vm, phColor);
  }
  return styles
}

function getInput (weex) {
  var ref = weex.mixins;
  var inputCommon = ref.inputCommon;

  return {
    name: 'weex-input',
    mixins: [inputCommon],
    props: {
      type: {
        type: String,
        default: 'text',
        validator: function validator (value) {
          return [
            'email', 'number', 'password', 'search', 'tel', 'text', 'url', 'date',
            'datetime', 'time' ].indexOf(value) !== -1
        }
      },
      value: String,
      placeholder: String,
      disabled: {
        type: [String, Boolean],
        default: false
      },
      autofocus: {
        type: [String, Boolean],
        default: false
      },
      maxlength: [String, Number],
      returnKeyType: String
    },

    render: function render (createElement) {
      if (!this._id) {
        this._id = idCount++;
      }
      var events = mapFormEvents$1(this);
      return createElement('html:input', {
        attrs: {
          'weex-type': 'input',
          id: ("" + ID_PREFIX_INPUT + (this._id)),
          type: this.type,
          value: this.value,
          disabled: (this.disabled !== 'false' && this.disabled !== false),
          autofocus: (this.autofocus !== 'false' && this.autofocus !== false),
          placeholder: this.placeholder,
          maxlength: this.maxlength,
          'returnKeyType': this.returnKeyType
        },
        domProps: {
          value: this.value
        },
        on: this.createKeyboardEvent(events),
        staticClass: 'weex-input weex-el',
        staticStyle: processStyle(this)
      })
    },
    _css: _css$3
  }
}

var input = {
  init: function init (weex) {
    extractComponentStyle$2 = weex.extractComponentStyle;
    mapFormEvents$1 = weex.utils.mapFormEvents;
    appendCss$1 = weex.utils.appendCss;

    weex.registerComponent('input', getInput(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var _css$4 = "\n.weex-switch {\n  border: 0.013333rem solid #dfdfdf;\n  cursor: pointer;\n  display: inline-block;\n  position: relative;\n  vertical-align: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  box-sizing: content-box;\n  background-clip: content-box;\n  color: #64bd63;\n  width: 1.333333rem;\n  height: 0.8rem;\n  background-color: white;\n  border-color: #dfdfdf;\n  box-shadow: #dfdfdf 0 0 0 0 inset;\n  border-radius: 0.8rem;\n  -webkit-transition: border 0.4s, box-shadow 0.4s, background-color 1.2s;\n  -moz-transition: border 0.4s, box-shadow 0.4s, background-color 1.2s;\n  transition: border 0.4s, box-shadow 0.4s, background-color 1.2s;\n}\n\n.weex-switch-checked {\n  background-color: #64bd63;\n  border-color: #64bd63;\n  box-shadow: #64bd63 0 0 0 0.533333rem inset;\n}\n\n.weex-switch-checked.weex-switch-disabled {\n  background-color: #A0CCA0;\n  box-shadow: #A0CCA0 0 0 0 0.533333rem inset;\n}\n\n.weex-switch-disabled {\n  background-color: #EEEEEE;\n}\n\n.weex-switch-inner {\n  width: 0.8rem;\n  height: 0.8rem;\n  background: #fff;\n  border-radius: 100%;\n  box-shadow: 0 0.013333rem 0.04rem rgba(0, 0, 0, 0.4);\n  position: absolute;\n  top: 0;\n  left: 0;\n  -webkit-transition: background-color 0.4s, left 0.2s;\n  -moz-transition: background-color 0.4s, left 0.2s;\n  transition: background-color 0.4s, left 0.2s;\n}\n\n.weex-switch-checked > .weex-switch-inner {\n  left: 0.533333rem;\n}\n";

function getSwitch (weex) {
  var extractComponentStyle = weex.extractComponentStyle;

  return {
    name: 'weex-switch',
    props: {
      checked: {
        type: [Boolean, String],
        default: false
      },
      disabled: {
        type: [Boolean, String],
        default: false
      }
    },
    data: function data () {
      return {
        isChecked: (this.checked !== 'false' && this.checked !== false),
        isDisabled: (this.disabled !== 'false' && this.disabled !== false)
      }
    },
    computed: {
      wrapperClass: function wrapperClass () {
        var classArray = ['weex-switch'];
        this.isChecked && classArray.push('weex-switch-checked');
        this.isDisabled && classArray.push('weex-switch-disabled');
        return classArray.join(' ')
      }
    },
    methods: {
      toggle: function toggle () {
        // TODO: handle the events
        if (!this.isDisabled) {
          this.isChecked = !this.isChecked;
          this.$emit('change', { value: this.isChecked });
        }
      }
    },

    render: function render (createElement) {
      var this$1 = this;

      /* istanbul ignore next */
      // if ("production" === 'development') {
      //   validateStyles('switch', this.$vnode.data && this.$vnode.data.staticStyle)
      // }
      return createElement('span', {
        attrs: { 'weex-type': 'switch' },
        on: {
          click: function (event) {
            this$1.$emit('click', event);
            this$1.toggle();
          }
        },
        staticClass: this.wrapperClass,
        staticStyle: extractComponentStyle(this)
      }, [createElement('small', { staticClass: 'weex-switch-inner' })])
    },
    _css: _css$4
  }
}

var _switch = {
  init: function init (weex) {
    weex.registerComponent('switch', getSwitch(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var DEFAULT_OFFSET_ACCURACY = 10;
var DEFAULT_LOADMORE_OFFSET = 0;

function getThrottledScroll (context) {
  var scale = weex.config.env.scale;
  if (!context._throttleScroll) {
    var wrapper = context.$refs.wrapper;
    var inner = context.$refs.inner;
    var preOffset = (context.scrollDirection === 'horizontal'
        ? wrapper.scrollLeft
        : wrapper.scrollTop)
      || 0;
    context._throttleScroll = weex.utils.throttle(function (evt) {
      var offset = context.scrollDirection === 'horizontal'
        ? wrapper.scrollLeft
        : wrapper.scrollTop;
      var indent = parseInt(context.offsetAccuracy) * scale;
      function triggerScroll () {
        var rect = inner.getBoundingClientRect();
        evt.contentSize = { width: rect.width, height: rect.height };
        evt.contentOffset = {
          x: wrapper.scrollLeft,
          /**
           * positive direciton for y-axis is down.
           * so should use negative operation on scrollTop.
           *
           *  (0,0)---------------> x
           *       |
           *       |
           *       |
           *       |
           *       v y
           *
           */
          y: -wrapper.scrollTop
        };
        context.$emit('scroll', evt);
      }
      if (Math.abs(offset - preOffset) >= indent) {
        triggerScroll();
        preOffset = offset;
      }
    }, 16, true);
  }
  return context._throttleScroll
}

var scrollable$1 = {
  props: {
    loadmoreoffset: {
      type: [String, Number],
      default: DEFAULT_LOADMORE_OFFSET,
      validator: function validator (value) {
        var val = parseInt(value);
        return !isNaN(val) && val >= DEFAULT_LOADMORE_OFFSET
      }
    },

    offsetAccuracy: {
      type: [Number, String],
      default: DEFAULT_OFFSET_ACCURACY,
      validator: function validator$1 (value) {
        var val = parseInt(value);
        return !isNaN(val) && val >= DEFAULT_OFFSET_ACCURACY
      }
    }
  },

  created: function created () {
    // should call resetLoadmore() to enable loadmore event.
    this._loadmoreReset = true;
  },

  methods: {
    updateLayout: function updateLayout () {
      var wrapper = this.$refs.wrapper;
      if (wrapper) {
        var rect = wrapper.getBoundingClientRect();
        this._wrapperWidth = rect.width;
        this._wrapperHeight = rect.height;
      }
      var inner = this.$refs.inner;
      var children = inner && inner.children;
      if (inner) {
        var rect$1 = inner.getBoundingClientRect();
        this._innerWidth = rect$1.width;
        this._innerHeight = rect$1.height;
      }
      var loadingEl = this._loading && this._loading.$el;
      var refreshEl = this._refresh && this._refresh.$el;
      if (loadingEl) {
        this._innerHeight -= loadingEl.getBoundingClientRect().height;
      }
      if (refreshEl) {
        this._innerHeight -= refreshEl.getBoundingClientRect().height;
      }
      // inner width is always the viewport width somehow in horizontal
      // scoller, therefore the inner width should be reclaculated.
      if (this.scrollDirection === 'horizontal' && children) {
        this._innerWidth = weex.utils.getRangeWidth(inner);
      }
    },

    resetLoadmore: function resetLoadmore () {
      this._loadmoreReset = true;
    },

    /**
     * process sticky children in scrollable components.
     * current only support list and vertical scroller.
     */
    processSticky: function processSticky () {
      /**
       * current browser support 'sticky' or '-webkit-sticky', so there's no need
       * to do further more.
       */
      if (weex.utils.supportSticky()) {
        return
      }
      // current only support list and vertical scroller.
      if (this.scrollDirection === 'horizontal') {
        return
      }
      var stickyChildren = this._stickyChildren;
      var len = stickyChildren && stickyChildren.length || 0;
      if (len <= 0) { return }

      var container = this.$el;
      if (!container) { return }
      var scrollTop = container.scrollTop;

      var stickyChild;
      for (var i = 0; i < len; i++) {
        stickyChild = stickyChildren[i];
        if (stickyChild._initOffsetTop < scrollTop) {
          stickyChild._addSticky();
        }
        else {
          stickyChild._removeSticky();
        }
      }
    },

    handleScroll: function handleScroll (event) {
      weex.utils.getThrottleLazyload(25, this.$el, 'scroll')();
      getThrottledScroll(this)(event);

      this.processSticky();

      // fire loadmore event.
      var inner = this.$refs.inner;
      if (inner) {
        var innerLength = this.scrollDirection === 'horizontal'
          ? this._innerWidth
          : this._innerHeight;
        if (!this._innerLength) {
          this._innerLength = innerLength;
        }
        if (this._innerLength !== innerLength) {
          this._innerLength = innerLength;
          this._loadmoreReset = true;
        }
        if (this._loadmoreReset && this.reachBottom(this.loadmoreoffset)) {
          this._loadmoreReset = false;
          this.$emit('loadmore', event);
        }
      }
    },

    reachTop: function reachTop () {
      var wrapper = this.$refs.wrapper;
      return (!!wrapper) && (wrapper.scrollTop <= 0)
    },

    reachBottom: function reachBottom (offset) {
      var wrapper = this.$refs.wrapper;
      var inner = this.$refs.inner;
      offset = parseInt(offset || 0) * weex.config.env.scale;

      if (wrapper && inner) {
        var key = this.scrollDirection === 'horizontal'
          ? 'width'
          : 'height';
        var innerLength = this[("_inner" + (key[0].toUpperCase()) + (key.substr(1)))];
        var wrapperLength = this[("_wrapper" + (key[0].toUpperCase()) + (key.substr(1)))];
        var scrollOffset = this.scrollDirection === 'horizontal'
          ? wrapper.scrollLeft
          : wrapper.scrollTop;
        return scrollOffset >= innerLength - wrapperLength - offset
      }
      return false
    },

    handleTouchStart: function handleTouchStart (event) {
      if (this._loading || this._refresh) {
        var touch = event.changedTouches[0];
        this._touchParams = {
          reachTop: this.reachTop(),
          reachBottom: this.reachBottom(),
          startTouchEvent: touch,
          startX: touch.pageX,
          startY: touch.pageY,
          timeStamp: event.timeStamp
        };
      }
    },

    handleTouchMove: function handleTouchMove (event) {
      if (!this._touchParams || !this._refresh && !this._loading) {
        return
      }
      var inner = this.$refs.inner;
      var ref = this._touchParams;
      var startY = ref.startY;
      var reachTop = ref.reachTop;
      var reachBottom = ref.reachBottom;
      if (inner) {
        var touch = event.changedTouches[0];
        var offsetY = touch.pageY - startY;
        var dir = offsetY > 0 ? 'down' : 'up';
        this._touchParams.offsetY = offsetY;
        if (this._refresh && (dir === 'down') && reachTop) {
          this._refresh.pullingDown(offsetY);
        }
        else if (this._loading && (dir === 'up') && reachBottom) {
          this._loading.pullingUp(-offsetY);
        }
      }
    },

    handleTouchEnd: function handleTouchEnd (event) {
      if (!this._touchParams || !this._refresh && !this._loading) {
        return
      }
      var inner = this.$refs.inner;
      var ref = this._touchParams;
      var startY = ref.startY;
      var reachTop = ref.reachTop;
      var reachBottom = ref.reachBottom;
      if (inner) {
        var touch = event.changedTouches[0];
        var offsetY = touch.pageY - startY;
        var dir = offsetY > 0 ? 'down' : 'up';
        this._touchParams.offsetY = offsetY;
        if (this._refresh && (dir === 'down') && reachTop) {
          this._refresh.pullingEnd();
        }
        else if (this._loading && (dir === 'up') && reachBottom) {
          this._loading.pullingEnd();
        }
      }
      delete this._touchParams;
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var listMixin = {
  methods: {
    handleListScroll: function handleListScroll (event) {
      this.handleScroll(event);

      if (weex.utils.supportSticky()) {
        return
      }

      var scrollTop = this.$el.scrollTop;
      var h = this.$children.filter(function (vm) { return vm.$refs.header; });

      if (h.length <= 0) {
        return
      }

      for (var i = 0; i < h.length; i++) {
        if (h[i].initTop < scrollTop) {
          h[i].addSticky();
        }
        else {
          h[i].removeSticky();
        }
      }
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
function getList (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var createEventMap = weex.createEventMap;

  return {
    name: 'weex-list',
    mixins: [scrollable$1, listMixin],
    computed: {
      wrapperClass: function wrapperClass () {
        var classArray = ['weex-list', 'weex-list-wrapper', 'weex-ct'];
        this._refresh && classArray.push('with-refresh');
        this._loading && classArray.push('with-loading');
        return classArray.join(' ')
      }
    },

    methods: {
      createChildren: function createChildren (h) {
        var slots = this.$slots.default || [];
        this._cells = slots.filter(function (vnode) {
          if (!vnode.tag || !vnode.componentOptions) { return false }
          return true
        });
        return [
          h('article', {
            ref: 'inner',
            staticClass: 'weex-list-inner weex-ct'
          }, this._cells)
        ]
      }
    },

    render: function render (createElement) {
      var this$1 = this;

      this.weexType = 'list';

      this.$nextTick(function () {
        this$1.updateLayout();
      });

      return createElement('main', {
        ref: 'wrapper',
        attrs: { 'weex-type': 'list' },
        staticClass: this.wrapperClass,
        on: createEventMap(this, {
          scroll: this.handleListScroll,
          touchstart: this.handleTouchStart,
          touchmove: this.handleTouchMove,
          touchend: this.handleTouchEnd
        }),
        staticStyle: extractComponentStyle(this)
      }, this.createChildren(createElement))
    }
  }
}

var list$$1 = {
  init: function init (weex) {
    weex.registerComponent('list', getList(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getScroller (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var createEventMap = weex.createEventMap;

  return {
    name: 'weex-scroller',
    mixins: [scrollable$1, listMixin],
    props: {
      scrollDirection: {
        type: [String],
        default: 'vertical',
        validator: function validator (value) {
          return ['horizontal', 'vertical'].indexOf(value) !== -1
        }
      },
      scrollable: {
        type: [Boolean],
        default: true
      }
    },
    computed: {
      wrapperClass: function wrapperClass () {
        var classArray = ['weex-scroller', 'weex-scroller-wrapper', 'weex-ct'];
        if (this.scrollDirection === 'horizontal') {
          classArray.push('weex-scroller-horizontal');
        }
        else {
          classArray.push('weex-scroller-vertical');
        }
        if (!this.scrollable) {
          classArray.push('weex-scroller-disabled');
        }
        return classArray.join(' ')
      }
    },

    methods: {
      createChildren: function createChildren (h) {
        var slots = this.$slots.default || [];
        this._cells = slots.filter(function (vnode) {
          if (!vnode.tag || !vnode.componentOptions) { return false }
          return true
        });
        return [
          h('article', {
            ref: 'inner',
            staticClass: 'weex-scroller-inner weex-ct'
          }, this._cells)
        ]
      }
    },

    render: function render (createElement) {
      var this$1 = this;

      this.weexType = 'scroller';

      /* istanbul ignore next */
      // if ("production" === 'development') {
      //   validateStyles('scroller', this.$vnode.data && this.$vnode.data.staticStyle)
      // }

      this._cells = this.$slots.default || [];
      this.$nextTick(function () {
        this$1.updateLayout();
      });

      return createElement('main', {
        ref: 'wrapper',
        attrs: { 'weex-type': 'scroller' },
        on: createEventMap(this, {
          scroll: this.handleScroll,
          touchstart: this.handleTouchStart,
          touchmove: this.handleTouchMove,
          touchend: this.handleTouchEnd
        }),
        staticClass: this.wrapperClass,
        staticStyle: extractComponentStyle(this)
      }, this.createChildren(createElement))
    }
  }
}

var scroller = {
  init: function init (weex) {
    weex.registerComponent('scroller', getScroller(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND,  either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * @fileoverview waterfall
 * NOTE: only support full screen width waterfall.
 */

var NORMAL_GAP_SIZE = 32;
var DEFAULT_COLUMN_COUNT = 1;

function getWaterfall (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var createEventMap = weex.createEventMap;

  return {
    name: 'weex-waterfall',
    mixins: [scrollable$1],
    props: {
      /**
       * specified gap size.
       * value can be number or 'normal'. 'normal' (32px) by default.
       */
      columnGap: {
        type: [String, Number],
        default: 'normal',
        validator: function validator (val) {
          if (!val || val === 'normal') {
            return true
          }
          val = parseInt(val);
          return !isNaN(val) && val > 0
        }
      },
      /**
       * the maximum column counts.
       * value can be number or 'auto'. 1 by default.
       */
      columnCount: {
        type: [String, Number],
        default: DEFAULT_COLUMN_COUNT,
        validator: function validator$1 (val) {
          val = parseInt(val);
          return !isNaN(val) && val > 0
        }
      },
      /**
       * the mimimum column width.
       * value can be number or 'auto'. 'auto' by default.
       */
      columnWidth: {
        type: [String, Number],
        default: 'auto',
        validator: function validator$2 (val) {
          if (!val || val === 'auto') {
            return true
          }
          val = parseInt(val);
          return !isNaN(val) && val > 0
        }
      }
    },

    mounted: function mounted () {
      this._nextTick();
    },

    updated: function updated () {
      this.$nextTick(this._nextTick());
    },

    methods: {
      _createChildren: function _createChildren (h, rootStyle) {
        var this$1 = this;

        var slots = this.$slots.default || [];
        this._headers = [];
        this._others = [];
        this._cells = slots.filter(function (vnode) {
          if (!vnode.tag || !vnode.componentOptions) { return false }
          var tag = vnode.componentOptions.tag;
          if (tag === 'refresh' || tag === 'loading') {
            this$1[("_" + tag)] = vnode;
            return false
          }
          if (tag === 'header') {
            this$1._headers.push(vnode);
            return false
          }
          if (tag !== 'cell') {
            this$1._others.push(vnode);
            return false
          }
          return true
        });
        this._reCalc(rootStyle);
        this._genColumns(h);
        var children = [];
        this._refresh && children.push(this._refresh);
        children = children
          .concat(this._headers)
          .concat(this._others);
        children.push(h('html:div', {
          ref: 'columns',
          staticClass: 'weex-waterfall-inner-columns weex-ct'
        }, this._columns));
        this._loading && children.push(this._loading);
        return [
          h('article', {
            ref: 'inner',
            staticClass: 'weex-waterfall-inner weex-ct'
          }, children)
        ]
      },

      _reCalc: function _reCalc (rootStyle) {
        /**
         * NOTE: columnGap and columnWidth can't both be auto.
         * NOTE: the formula:
         *  totalWidth = n * w + (n - 1) * gap
         * 1. if columnCount = n then calc w
         * 2. if columnWidth = w then calc n
         * 3. if columnWidth = w and columnCount = n then calc totalWidth
         *    3.1 if totalWidth < ctWidth then increase columnWidth
         *    3.2 if totalWidth > ctWidth then decrease columnCount
         */
        var width, gap, cnt, ctWidth;
        var scale = weex.config.env.scale;
        var el = this.$el;
        function getCtWidth (width, style) {
          var padding = style.padding
            ? parseInt(style.padding) * 2
            : parseInt(style.paddingLeft || 0) + parseInt(style.paddingRight || 0);
          return width - padding
        }
        if (el && el.nodeType === 1) {  // already mounted
          var cstyle = window.getComputedStyle(el);
          ctWidth = getCtWidth(el.getBoundingClientRect().width, cstyle);
        }
        else {  // not mounted.
          // only support full screen width for waterfall component.
          ctWidth = getCtWidth(document.documentElement.clientWidth, rootStyle);
        }

        gap = this.columnGap;
        if (gap && gap !== 'normal') {
          gap = parseInt(gap);
        }
        else {
          gap = NORMAL_GAP_SIZE;
        }
        gap = gap * scale;

        width = this.columnWidth;
        cnt = this.columnCount;
        if (width && width !== 'auto') {
          width = parseInt(width) * scale;
        }
        if (cnt && cnt !== 'auto') {
          cnt = parseInt(cnt);
        }

        // 0. if !columnCount && !columnWidth
        if (cnt === 'auto' && width === 'auto') {
          
        }
        // 1. if columnCount = n then calc w.
        else if (cnt !== 'auto' && width === 'auto') {
          width = (ctWidth - (cnt - 1) * gap) / cnt;
        }
        // 2. if columnWidth = w then calc n.
        else if (cnt === 'auto' && width !== 'auto') {
          cnt = (ctWidth + gap) / (width + gap);
        }
        // 3. if columnWidth = w and columnCount = n then calc totalWidth
        else if (cnt !== 'auto' && width !== 'auto') {
          var totalWidth;
          var adjustCountAndWidth = function () {
            totalWidth = cnt * width + (cnt - 1) * gap;
            if (totalWidth < ctWidth) {
              width += (ctWidth - totalWidth) / cnt;
            }
            else if (totalWidth > ctWidth && cnt > 1) {
              cnt--;
              adjustCountAndWidth();
            }
            else if (totalWidth > ctWidth) {  // cnt === 1
              width = ctWidth;
            }
          };
          adjustCountAndWidth();
        }
        this._columnCount = cnt;
        this._columnWidth = width;
        this._columnGap = gap;
      },

      _genColumns: function _genColumns (createElement) {
        var this$1 = this;

        this._columns = [];
        var cells = this._cells;
        var columnCnt = this._columnCount;
        var len = cells.length;
        var columnCells = this._columnCells = Array(columnCnt).join('.').split('.').map(function () { return [] });
        // spread cells to the columns using simpole polling algorithm.
        for (var i = 0; i < len; i++) {
          (cells[i].data.attrs || (cells[i].data.attrs = {}))['data-cell'] = i;
          columnCells[i % columnCnt].push(cells[i]);
        }
        for (var i$1 = 0; i$1 < columnCnt; i$1++) {
          this$1._columns.push(createElement('html:div', {
            ref: ("column" + i$1),
            attrs: {
              'data-column': i$1
            },
            staticClass: 'weex-ct',
            staticStyle: {
              width: this$1._columnWidth + 'px',
              marginLeft: i$1 === 0 ? 0 : this$1._columnGap + 'px'
            }
          }, columnCells[i$1]));
        }
      },

      _nextTick: function _nextTick () {
        this._reLayoutChildren();
      },

      _reLayoutChildren: function _reLayoutChildren () {
        var this$1 = this;

        /**
         * treat the shortest column bottom as the match standard.
         * whichever cell exceeded it would be rearranged.
         * 1. m = shortest column bottom.
         * 2. get all cell ids who is below m.
         * 3. calculate which cell should be in which column.
         */
        var columnCnt = this._columnCount;
        var columnDoms = [];
        var columnAppendFragments = [];
        var columnBottoms = [];
        var minBottom = Number.MAX_SAFE_INTEGER;
        var minBottomColumnIndex = 0;

        // 1. find the shortest column bottom.
        for (var i = 0; i < columnCnt; i++) {
          var columnDom = this$1._columns[i].elm;
          var lastChild = columnDom.lastElementChild;
          var bottom = lastChild ? lastChild.getBoundingClientRect().bottom : 0;
          columnDoms.push(columnDom);
          columnBottoms[i] = bottom;
          columnAppendFragments.push(document.createDocumentFragment());
          if (bottom < minBottom) {
            minBottom = bottom;
            minBottomColumnIndex = i;
          }
        }

        // 2. get all cell ids who is below m.
        var belowCellIds = [];
        var belowCells = {};
        for (var i$1 = 0; i$1 < columnCnt; i$1++) {
          if (i$1 === minBottomColumnIndex) {
            continue
          }
          var columnDom$1 = columnDoms[i$1];
          var cellsInColumn = columnDom$1.querySelectorAll('section.weex-cell');
          var len = cellsInColumn.length;
          for (var j = len - 1; j >= 0; j--) {
            var cellDom = cellsInColumn[j];
            var cellRect = cellDom.getBoundingClientRect();
            if (cellRect.top > minBottom) {
              var id = ~~cellDom.getAttribute('data-cell');
              belowCellIds.push(id);
              belowCells[id] = { elm: cellDom, height: cellRect.height };
              columnBottoms[i$1] -= cellRect.height;
            }
          }
        }

        // 3. calculate which cell should be in which column and rearrange them
        //  in the dom tree.
        belowCellIds.sort(function (a, b) { return a > b });
        var cellIdsLen = belowCellIds.length;
        function addToShortestColumn (belowCell) {
          // find shortest bottom.
          minBottom = Math.min.apply(Math, columnBottoms);
          minBottomColumnIndex = columnBottoms.indexOf(minBottom);
          var cellElm = belowCell.elm;
          var cellHeight = belowCell.height;
          columnAppendFragments[minBottomColumnIndex].appendChild(cellElm);
          columnBottoms[minBottomColumnIndex] += cellHeight;
        }
        for (var i$2 = 0; i$2 < cellIdsLen; i$2++) {
          addToShortestColumn(belowCells[belowCellIds[i$2]]);
        }
        for (var i$3 = 0; i$3 < columnCnt; i$3++) {
          columnDoms[i$3].appendChild(columnAppendFragments[i$3]);
        }
      }
    },

    render: function render (createElement) {
      var this$1 = this;

      this.weexType = 'waterfall';
      this._cells = this.$slots.default || [];
      this.$nextTick(function () {
        this$1.updateLayout();
      });
      var mergedStyle = extractComponentStyle(this);
      return createElement('main', {
        ref: 'wrapper',
        attrs: { 'weex-type': 'waterfall' },
        on: createEventMap(this, {
          scroll: this.handleScroll,
          touchstart: this.handleTouchStart,
          touchmove: this.handleTouchMove,
          touchend: this.handleTouchEnd
        }),
        staticClass: 'weex-waterfall weex-waterfall-wrapper weex-ct',
        staticStyle: mergedStyle
      }, this._createChildren(createElement, mergedStyle))
    }
  }
}

var waterfall = {
  init: function init (weex) {
    weex.registerComponent('waterfall', getWaterfall(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getCell (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  return {
    name: 'weex-cell',
    render: function render (createElement) {
      return createElement('section', {
        attrs: { 'weex-type': 'cell' },
        staticClass: 'weex-cell weex-ct',
        staticStyle: extractComponentStyle(this)
      }, this.$slots.default)
    }
  }
}

var cell = {
  init: function init (weex) {
    weex.registerComponent('cell', getCell(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getHeader (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var ref = weex.utils;
  var supportSticky = ref.supportSticky;

  return {
    data: function data () {
      return {
        sticky: false,
        initTop: 0,
        placeholder: null,
        supportSticky: supportSticky()
      }
    },

    mounted: function mounted () {
      this.initTop = this.$el.offsetTop;
      this.placeholder = window.document.createElement('header');
    },

    updated: function updated () {
      if (!this.sticky) {
        this.initTop = this.$el.offsetTop;
      }
    },

    methods: {
      addSticky: function addSticky () {
        this.sticky = true;
        this.placeholder.style.display = 'block';
        this.placeholder.style.width = this.$el.offsetWidth + 'px';
        this.placeholder.style.height = this.$el.offsetHeight + 'px';
        this.$el.parentNode.insertBefore(this.placeholder, this.$el);
      },

      removeSticky: function removeSticky () {
        this.sticky = false;
        try {
          this.$el.parentNode.removeChild(this.placeholder);
        }
        catch (e) {
        }
      }
    },

    render: function render (createElement) {
      /* istanbul ignore next */
      // if ("production" === 'development') {
      //   validateStyles('header', this.$vnode.data && this.$vnode.data.staticStyle)
      // }
      return createElement('html:header', {
        attrs: { 'weex-type': 'header' },
        ref: 'header',
        staticClass: 'weex-header weex-ct',
        class: { 'weex-sticky': this.sticky, 'weex-ios-sticky': this.supportSticky },
        staticStyle: extractComponentStyle(this)
      }, this.$slots.default)
    }
  }
}

var header = {
  init: function init (weex) {
    weex.registerComponent('header', getHeader(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getLoading () {
  var extractComponentStyle = weex.extractComponentStyle;

  return {
    name: 'weex-loading',
    props: {
      display: {
        type: String,
        default: 'show',
        validator: function validator (value) {
          return ['show', 'hide'].indexOf(value) !== -1
        }
      }
    },
    data: function data () {
      return {
        height: -1,
        viewHeight: 0
      }
    },
    mounted: function mounted () {
      this.viewHeight = this.$el.offsetHeight;
      if (this.display === 'hide') {
        this.height = 0;
      }
      else {
        this.height = this.viewHeight;
      }
    },
    watch: {
      height: function height (val) {
        this.$el.style.height = val + "px";
      },
      display: function display (val) {
        if (val === 'hide') {
          this.height = 0;
        }
        else {
          this.height = this.viewHeight;
        }
      }
    },
    methods: {
      pulling: function pulling (offsetY) {
        if ( offsetY === void 0 ) offsetY = 0;

        this.height = offsetY;
      },
      pullingUp: function pullingUp (offsetY) {
        this.$el.style.transition = "height 0s";
        this.pulling(offsetY);
      },
      pullingEnd: function pullingEnd () {
        this.$el.style.transition = "height .2s";
        if (this.height >= this.viewHeight) {
          this.pulling(this.viewHeight);
          this.$emit('loading');
        }
        else {
          this.pulling(0);
        }
      },
      getChildren: function getChildren () {
        var children = this.$slots.default || [];
        if (this.display === 'show') {
          return children
        }
        return children.filter(function (vnode) {
          return vnode.componentOptions
            && vnode.componentOptions.tag !== 'loading-indicator'
        })
      }
    },
    render: function render (createElement) {
      this.$parent._loading = this;
      return createElement('aside', {
        ref: 'loading',
        attrs: { 'weex-type': 'loading' },
        staticClass: 'weex-loading weex-ct',
        staticStyle: extractComponentStyle(this)
      }, this.getChildren())
    }
  }
}

var loading = {
  init: function init (weex) {
    weex.registerComponent('loading', getLoading(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getRefresh (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var ref = weex.utils;
  var createEvent = ref.createEvent;

  return {
    name: 'weex-refresh',
    props: {
      display: {
        type: String,
        default: 'show',
        validator: function validator (value) {
          return ['show', 'hide'].indexOf(value) !== -1
        }
      }
    },
    data: function data () {
      return {
        lastDy: 0,
        viewHeight: 0,
        height: -1
      }
    },
    mounted: function mounted () {
      this.viewHeight = this.$el.offsetHeight;
      if (this.display === 'hide') {
        this.height = 0;
      }
      else {
        this.height = this.viewHeight;
      }
    },
    watch: {
      height: function height (val) {
        this.$el.style.height = val + "px";
      },
      display: function display (val) {
        if (val === 'hide') {
          this.height = 0;
        }
        else {
          this.height = this.viewHeight;
        }
      }
    },
    methods: {
      pulling: function pulling (offsetY) {
        if ( offsetY === void 0 ) offsetY = 0;

        this.height = offsetY;
        this.$emit('pullingdown', createEvent(this, 'pullingdown', {
          dy: offsetY - this.lastDy,
          pullingDistance: offsetY,
          viewHeight: this.viewHeight
        }));
        this.lastDy = offsetY;
      },
      pullingDown: function pullingDown (offsetY) {
        this.$el.style.transition = "height 0s";
        this.pulling(offsetY);
      },
      pullingEnd: function pullingEnd () {
        this.$el.style.transition = "height .2s";
        if (this.height >= this.viewHeight) {
          this.pulling(this.viewHeight);
          this.$emit('refresh');
        }
        else {
          this.pulling(0);
        }
      },
      getChildren: function getChildren () {
        var children = this.$slots.default || [];
        if (this.display === 'show') {
          return children
        }
        return children.filter(function (vnode) {
          return vnode.componentOptions
            && vnode.componentOptions.tag !== 'loading-indicator'
        })
      }
    },
    render: function render (createElement) {
      this.$parent._refresh = this;
      return createElement('aside', {
        ref: 'refresh',
        attrs: { 'weex-type': 'refresh' },
        staticClass: 'weex-refresh weex-ct',
        staticStyle: extractComponentStyle(this)
      }, this.getChildren())
    }
  }
}

var refresh = {
  init: function init (weex) {
    weex.registerComponent('refresh', getRefresh(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var extractComponentStyle$3;
var getRgb$1;
var loopArray$1;
var getStyleSheetById$1;

var _css$5 = "\n.weex-refresh-indicator,\n.weex-loading-indicator {\n  width: 1rem !important;\n  height: 1rem !important;\n  -webkit-box-align: center;\n  -moz-box-align: center;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -moz-box-pack: center;\n  -webkit-justify-content: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  overflow: visible;\n  background: none;\n}\n.weex-refresh-indicator:before,\n.weex-loading-indicator:before {\n  display: block;\n  content: '';\n  font-size: 0.16rem;\n  width: 0.5em;\n  height: 0.5em;\n  left: 0;\n  top: 0;\n  border-radius: 50%;\n  position: relative;\n  text-indent: -9999em;\n  -webkit-animation: weex-spinner 1.1s infinite ease;\n  -moz-animation: weex-spinner 1.1s infinite ease;\n  animation: weex-spinner 1.1s infinite ease;\n}\n\n@-webkit-keyframes weex-spinner {\n  0%,\n  100% {\n    box-shadow: 0em -1.3em 0em 0em #ffffff, 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.5), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7);\n  }\n  11.25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.7), 0.9em -0.9em 0 0em #ffffff, 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5);\n  }\n  25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.5), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7), 1.25em 0em 0 0em #ffffff, 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  37.5% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5), 1.25em 0em 0 0em rgba(255, 255, 255, 0.7), 0.875em 0.875em 0 0em #ffffff, 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  50% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.5), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.7), 0em 1.25em 0 0em #ffffff, -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  61.25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.5), 0em 1.25em 0 0em rgba(255, 255, 255, 0.7), -0.9em 0.9em 0 0em #ffffff, -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  75% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.5), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.7), -1.3em 0em 0 0em #ffffff, -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  87.5% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.5), -1.3em 0em 0 0em rgba(255, 255, 255, 0.7), -0.9em -0.9em 0 0em #ffffff;\n  }\n}\n\n@keyframes weex-spinner {\n  0%,\n  100% {\n    box-shadow: 0em -1.3em 0em 0em #ffffff, 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.5), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7);\n  }\n  11.25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.7), 0.9em -0.9em 0 0em #ffffff, 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5);\n  }\n  25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.5), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.7), 1.25em 0em 0 0em #ffffff, 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  37.5% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.5), 1.25em 0em 0 0em rgba(255, 255, 255, 0.7), 0.875em 0.875em 0 0em #ffffff, 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  50% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.5), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.7), 0em 1.25em 0 0em #ffffff, -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.2), -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  61.25% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.5), 0em 1.25em 0 0em rgba(255, 255, 255, 0.7), -0.9em 0.9em 0 0em #ffffff, -1.3em 0em 0 0em rgba(255, 255, 255, 0.2), -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  75% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.5), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.7), -1.3em 0em 0 0em #ffffff, -0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2);\n  }\n  87.5% {\n    box-shadow: 0em -1.3em 0em 0em rgba(255, 255, 255, 0.2), 0.9em -0.9em 0 0em rgba(255, 255, 255, 0.2), 1.25em 0em 0 0em rgba(255, 255, 255, 0.2), 0.875em 0.875em 0 0em rgba(255, 255, 255, 0.2), 0em 1.25em 0 0em rgba(255, 255, 255, 0.2), -0.9em 0.9em 0 0em rgba(255, 255, 255, 0.5), -1.3em 0em 0 0em rgba(255, 255, 255, 0.7), -0.9em -0.9em 0 0em #ffffff;\n  }\n}\n";

function getStyleSheet (spinnerVm) {
  if (spinnerVm._styleSheet) {
    return
  }
  spinnerVm._styleSheet = getStyleSheetById$1('weex-cmp-loading-indicator');
}

function setKeyframeColor (spinnerVm, val) {
  getStyleSheet(spinnerVm);
  var keyframeRules = computeKeyFrameRules(val);
  var rules = spinnerVm._styleSheet.rules || spinnerVm._styleSheet.cssRules;
  for (var i = 0, l = rules.length; i < l; i++) {
    var item = rules.item(i);
    if ((item.type === CSSRule.KEYFRAMES_RULE
          || item.type === CSSRule.WEBKIT_KEYFRAMES_RULE)
        && item.name === 'weex-spinner') {
      var cssRules = item.cssRules;
      for (var j = 0, m = cssRules.length; j < m; j++) {
        var keyframe = cssRules[j];
        if (keyframe.type === CSSRule.KEYFRAME_RULE
          || keyframe.type === CSSRule.WEBKIT_KEYFRAME_RULE) {
          keyframe.style.boxShadow = keyframeRules[j];
        }
      }
    }
  }
}

function computeKeyFrameRules (rgb) {
  if (!rgb) {
    return
  }
  var scaleArr = [
    '0em -1.3em 0em 0em',
    '0.9em -0.9em 0 0em',
    '1.25em 0em 0 0em',
    '0.875em 0.875em 0 0em',
    '0em 1.25em 0 0em',
    '-0.9em 0.9em 0 0em',
    '-1.3em 0em 0 0em',
    '-0.9em -0.9em 0 0em'];
  var colorArr = [
    '1',
    '0.2',
    '0.2',
    '0.2',
    '0.2',
    '0.2',
    '0.5',
    '0.7'].map(function (e) {
      return 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + e + ')'
    });
  var rules = [];
  var loop = function ( i ) {
    var tmpColorArr = loopArray$1(colorArr, i, 'r');
    rules.push(scaleArr.map(function (scaleStr, i) {
      return scaleStr + ' ' + tmpColorArr[i]
    }).join(', '));
  };

  for (var i = 0; i < scaleArr.length; i++) loop( i );
  return rules
}

function processStyle$1 (vm) {
  var style = extractComponentStyle$3(vm);
  var color = style.color;
  var rgb = color && getRgb$1(color);
  if (rgb) {
    setKeyframeColor(vm, rgb);
  }
  return style
}

var loadingIndicator = {
  name: 'weex-loading-indicator',
  render: function render (createElement) {
    this.weexType = 'loading-indicator';
    return createElement('mark', {
      attrs: { 'weex-type': 'loading-indicator' },
      staticClass: 'weex-loading-indicator weex-ct',
      staticStyle: processStyle$1(this)
    })
  },
  _css: _css$5
};

var loadingIndicator$1 = {
  init: function init (weex) {
    extractComponentStyle$3 = weex.extractComponentStyle;
    getRgb$1 = weex.utils.getRgb;
    loopArray$1 = weex.utils.loopArray;
    getStyleSheetById$1 = weex.utils.getStyleSheetById;
    weex.registerComponent('loading-indicator', loadingIndicator);
  }
};

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nbody > .weex-list,\nbody > .weex-scroller,\nbody > .weex-waterfall {\n  max-height: 100%;\n}\n\n.weex-list-wrapper,\n.weex-scroller-wrapper,\n.weex-waterfall-wrapper {\n  -webkit-overflow-scrolling: touch;\n}\n\n.weex-list-wrapper,\n.weex-waterfall-wrapper {\n  overflow-y: scroll !important;\n  overflow-x: hidden !important;\n}\n\n.weex-list-inner,\n.weex-scroller-inner,\n.weex-waterfall-inner {\n  -webkit-overflow-scrolling: touch;\n}\n\n.weex-waterfall-inner-columns {\n  -webkit-flex-direction: row;\n  -moz-box-orient: horizontal;\n  -moz-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-orient: horizontal;\n}\n\n.weex-scroller-wrapper.weex-scroller-vertical {\n  overflow-x: hidden;\n  overflow-y: scroll;\n}\n\n.weex-scroller-wrapper.weex-scroller-horizontal {\n  overflow-x: scroll;\n  overflow-y: hidden;\n}\n\n.weex-scroller-wrapper.weex-scroller-disabled {\n  overflow-x: hidden;\n  overflow-y: hidden;\n}\n\n.weex-scroller-horizontal .weex-scroller-inner {\n  -webkit-flex-direction: row;\n  -ms-flex-direction: row;\n  -moz-box-orient: horizontal;\n  -moz-box-direction: normal;\n  flex-direction: row;\n  -webkit-box-orient: horizontal;\n  height: 100%;\n}\n\n.weex-cell {\n  width: 100%;\n}\n\n.weex-refresh,\n.weex-loading {\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n  -moz-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -moz-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 100%;\n  overflow: hidden;\n}\n",undefined);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var modules = [
  list$$1,
  scroller,
  waterfall,
  cell,
  header,
  loading,
  refresh,
  loadingIndicator$1
];

var scrollable = {
  init: function init (weex) {
    modules.forEach(function (mod) {
      weex.install(mod);
    });
  }
};

__$styleInject("/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n \n.weex-slider-wrapper {\n  overflow-x: hidden;\n  overflow-y: visible;\n}\n\n.weex-slider-inner {\n  width: 100%;\n  height: 100%;\n  overflow: visible;\n  -webkit-flex-direction: row;\n  -moz-box-orient: horizontal;\n  -moz-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -webkit-box-orient: horizontal;\n}\n\n.weex-slider-cell {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  background: transparent !important;\n  overflow: hidden;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n  -moz-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -moz-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n}\n\n.neighbor-cell {\n  overflow: visible !important;\n}",undefined);

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var TRANSITION_TIME = 400;
var NEIGHBOR_SCALE_TIME = 100;
var MAIN_SLIDE_OPACITY = 1;
var THROTTLE_SCROLL_TIME = 25;
var INTERVAL_MINIMUM = 200;

var slideMixin = {
  created: function created () {
    this._clones = [];
    this.innerOffset = 0;
    this._indicator = null;
  },

  beforeUpdate: function beforeUpdate () {
    this._getWrapperSize();
  },

  updated: function updated () {
    var children = this.$children;
    var len = children && children.length;
    if (children && len > 0) {
      for (var i = 0; i < len; i++) {
        var vm = children[i];
        if (vm.$options._componentTag === 'indicator'
          || vm.$vnode.data.ref === 'indicator') {
          vm._watcher.get();
          break
        }
      }
    }
    weex.utils.fireLazyload(this.$el, true);
    if (this._preIndex !== this.currentIndex) {
      this._slideTo(this.currentIndex);
    }
  },

  mounted: function mounted () {
    this._getWrapperSize();
    this._slideTo(this.currentIndex);
    weex.utils.fireLazyload(this.$el, true);
  },

  methods: {
    _getWrapperSize: function _getWrapperSize () {
      var wrapper = this.$refs.wrapper;
      if (wrapper) {
        var rect = wrapper.getBoundingClientRect();
        this._wrapperWidth = rect.width;
        this._wrapperHeight = rect.height;
      }
    },

    _formatChildren: function _formatChildren (createElement) {
      var this$1 = this;

      var children = this.$slots.default || [];
      var indicatorVnode;
      var cells = children.filter(function (vnode) {
        if (!vnode.tag) { return false }
        if (vnode.componentOptions && vnode.componentOptions.tag === 'indicator') {
          indicatorVnode = vnode;
          return false
        }
        return true
      }).map(function (vnode) {
        return createElement('li', {
          ref: 'cells',
          staticClass: ("weex-slider-cell weex-ct" + (this$1.isNeighbor ? ' neighbor-cell' : ''))
        }, [vnode])
      });
      if (indicatorVnode) {
        indicatorVnode.data.attrs = indicatorVnode.data.attrs || {};
        indicatorVnode.data.attrs.count = cells.length;
        indicatorVnode.data.attrs.active = this.currentIndex;
        this._indicator = indicatorVnode;
      }
      return cells
    },

    _renderSlides: function _renderSlides (createElement) {
      this._cells = this._formatChildren(createElement);
      this.frameCount = this._cells.length;
      return createElement(
        'nav',
        {
          ref: 'wrapper',
          attrs: { 'weex-type': this.isNeighbor ? 'slider-neighbor' : 'slider' },
          on: weex.createEventMap(
            this,
            ['scroll', 'scrollstart', 'scrollend'],
            {
              touchstart: this._handleTouchStart,
              touchmove: weex.utils.throttle(weex.utils.bind(this._handleTouchMove, this), 25),
              touchend: this._handleTouchEnd,
              touchcancel: this._handleTouchCancel
            }
          ),
          staticClass: 'weex-slider weex-slider-wrapper weex-ct',
          staticStyle: weex.extractComponentStyle(this)
        },
        [
          createElement('ul', {
            ref: 'inner',
            staticClass: 'weex-slider-inner weex-ct'
          }, this._cells),
          this._indicator
        ]
      )
    },

    // get standard index
    _normalizeIndex: function _normalizeIndex (index) {
      var newIndex = (index + this.frameCount) % this.frameCount;
      return Math.min(Math.max(newIndex, 0), this.frameCount - 1)
    },

    _startAutoPlay: function _startAutoPlay () {
      if (!this.autoPlay || this.autoPlay === 'false') {
        return
      }
      if (this._autoPlayTimer) {
        clearTimeout(this._autoPlayTimer);
        this._autoPlayTimer = null;
      }
      var interval = parseInt(this.interval - TRANSITION_TIME - NEIGHBOR_SCALE_TIME);
      interval = interval > INTERVAL_MINIMUM ? interval : INTERVAL_MINIMUM;
      this._autoPlayTimer = setTimeout(weex.utils.bind(this._next, this), interval);
    },

    _stopAutoPlay: function _stopAutoPlay () {
      if (this._autoPlayTimer) {
        clearTimeout(this._autoPlayTimer);
        this._autoPlayTimer = null;
      }
    },

    _slideTo: function _slideTo (index, isTouchScroll) {
      var this$1 = this;

      if (this.frameCount <= 0) {
        return
      }
      if (!this.infinite || this.infinite === 'false') {
        if (index === -1 || index > (this.frameCount - 1)) {
          this._slideTo(this.currentIndex);
          return
        }
      }

      if (!this._preIndex && this._preIndex !== 0) {
        if (this._showNodes && this._showNodes[0]) {
          this._preIndex = this._showNodes[0].index;
        }
        else {
          this._preIndex = this.currentIndex;
        }
      }

      if (this._sliding) {
        return
      }
      this._sliding = true;

      var newIndex = this._normalizeIndex(index);
      var inner = this.$refs.inner;
      var step = this._step = this.frameCount <= 1 ? 0 : this._preIndex - index;

      if (inner) {
        this._prepareNodes();
        var translate = weex.utils.getTransformObj(inner).translate;
        var match = translate && translate.match(/translate[^(]+\(([+-\d.]+)/);
        var innerX = match && match[1] || 0;
        var dist = innerX - this.innerOffset;
        this.innerOffset += step * this._wrapperWidth;
        // transform the whole slides group.
        inner.style.webkitTransition = "-webkit-transform " + (TRANSITION_TIME / 1000) + "s ease-in-out";
        inner.style.mozTransition = "transform " + (TRANSITION_TIME / 1000) + "s ease-in-out";
        inner.style.transition = "transform " + (TRANSITION_TIME / 1000) + "s ease-in-out";
        inner.style.webkitTransform = "translate3d(" + (this.innerOffset) + "px, 0, 0)";
        inner.style.mozTransform = "translate3d(" + (this.innerOffset) + "px, 0, 0)";
        inner.style.transform = "translate3d(" + (this.innerOffset) + "px, 0, 0)";

        // emit scroll events.
        if (!isTouchScroll) {
          this._emitScrollEvent('scrollstart');
        }
        setTimeout(function () {
          this$1._throttleEmitScroll(dist, function () {
            this$1._emitScrollEvent('scrollend');
          });
        }, THROTTLE_SCROLL_TIME);

        this._loopShowNodes(step);

        setTimeout(function () {
          if (this$1.isNeighbor) {
            this$1._setNeighbors();
          }

          setTimeout(function () {
            inner.style.webkitTransition = '';
            inner.style.mozTransition = '';
            inner.style.transition = '';
            for (var i = this$1._showStartIdx; i <= this$1._showEndIdx; i++) {
              var node = this$1._showNodes[i];
              if (!node) { continue }
              var elm = node.firstElementChild;
              elm.style.webkitTransition = '';
              elm.style.mozTransition = '';
              elm.style.transition = '';
            }
            // clean cloned nodes and rearrange slide cells.
            this$1._rearrangeNodes(newIndex);
          }, NEIGHBOR_SCALE_TIME);
        }, TRANSITION_TIME);
      }

      if (newIndex !== this._preIndex) {
        this.$emit('change', weex.utils.createEvent(this.$el, 'change', {
          index: newIndex
        }));
      }
    },

    _clearNodesOffset: function _clearNodesOffset () {
      var this$1 = this;

      var end = this._showEndIdx;
      for (var i = this._showStartIdx; i <= end; i++) {
        var node = this$1._showNodes[i];
        node = node && node.firstElementChild;
        if (!node) { continue }
        weex.utils.addTransform(this$1._showNodes[i].firstElementChild, {
          translate: 'translate3d(0px, 0px, 0px)'
        });
      }
    },

    _loopShowNodes: function _loopShowNodes (step) {
      var this$1 = this;

      if (!step || this.frameCount <= 1) {
        return
      }
      var sign = step > 0 ? 1 : -1;
      var i = step <= 0 ? this._showStartIdx : this._showEndIdx;
      var end = step <= 0 ? this._showEndIdx : this._showStartIdx;
      for (; i !== end - sign; i -= sign) {
        var nextIdx = i + step;
        this$1._showNodes[nextIdx] = this$1._showNodes[i];
        this$1._showNodes[nextIdx]._showIndex = nextIdx;
        delete this$1._showNodes[i];
      }
      this._showStartIdx += step;
      this._showEndIdx += step;
    },

    _prepareNodes: function _prepareNodes () {
      // test if the next slide towards the direction exists.
      // e.g. currentIndex 0 -> 1: should prepare 4 slides: -1, 0, 1, 2
      // if not, translate a node to here, or just clone it.
      var step = this._step;
      if (!this._inited) {
        this._initNodes();
        this._inited = true;
        this._showNodes = {};
      }
      if (this.frameCount <= 1) {
        this._showStartIdx = this._showEndIdx = 0;
        var node = this._cells[0].elm;
        node.style.opacity = 1;
        node.style.zIndex = 99;
        node.index = 0;
        this._showNodes[0] = node;
        node._inShow = true;
        node._showIndex = 0;
        return
      }
      var showCount = this._showCount = Math.abs(step) + 3;
      this._showStartIdx = step <= 0 ? -1 : 2 - showCount;
      this._showEndIdx = step <= 0 ? showCount - 2 : 1;
      this._clearNodesOffset();
      this._positionNodes(this._showStartIdx, this._showEndIdx, step);
    },

    _initNodes: function _initNodes () {
      var total = this.frameCount;
      var cells = this._cells;
      for (var i = 0; i < total; i++) {
        var node = cells[i].elm;
        node.index = i;
        node._inShow = false;
        node.style.zIndex = 0;
        node.style.opacity = 0;
      }
    },

    _positionNodes: function _positionNodes (begin, end, step, anim) {
      var this$1 = this;

      var cells = this._cells;
      var start = step <= 0 ? begin : end;
      var stop = step <= 0 ? end : begin;
      var sign = step <= 0 ? -1 : 1;
      var cellIndex = this._preIndex + sign;
      for (var i = start; i !== stop - sign; i = i - sign) {
        var node = cells[this$1._normalizeIndex(cellIndex)].elm;
        cellIndex = cellIndex - sign;
        this$1._positionNode(node, i);
      }
    },

    /**
     * index: position index in the showing cells' view.
     */
    _positionNode: function _positionNode (node, index) {
      var holder = this._showNodes[index];
      if (node._inShow && holder !== node) {
        if (holder) { this._removeClone(holder); }
        node = this._getClone(node.index);
      }
      else if (node._inShow) {
        return
      }

      node._inShow = true;
      var translateX = index * this._wrapperWidth - this.innerOffset;
      weex.utils.addTransform(node, {
        translate: ("translate3d(" + translateX + "px, 0px, 0px)")
      });
      node.style.zIndex = 99 - Math.abs(index);
      node.style.opacity = 1;
      node._showIndex = index;
      this._showNodes[index] = node;
    },

    _getClone: function _getClone (index) {
      var arr = this._clones[index];
      if (!arr) {
        this._clones[index] = arr = [];
      }
      if (arr.length <= 0) {
        var origNode = this._cells[index].elm;
        var clone = origNode.cloneNode(true);
        clone._isClone = true;
        clone._inShow = origNode._inShow;
        clone.index = origNode.index;
        clone.style.opacity = 0;
        clone.style.zIndex = 0;
        var ct = this.$refs.inner;
        ct.appendChild(clone);
        arr.push(clone);
      }
      return arr.pop()
    },

    _removeClone: function _removeClone (node) {
      var idx = node.index;
      this._hideNode(node);
      var arr = this._clones[idx];
      arr.push(node);
    },

    _hideNode: function _hideNode (node) {
      node._inShow = false;
      node.style.opacity = 0;
      node.style.zIndex = 0;
    },

    /**
     * hide nodes from begin to end in showArray.
     * if it is clone node, just move the clone node to the buffer.
     */
    _clearNodes: function _clearNodes (begin, end) {
      var this$1 = this;

      for (var i = begin; i <= end; i++) {
        var node = this$1._showNodes[i];
        if (!node) { return }
        if (node._isClone) {
          this$1._removeClone(node);
        }
        else if (!node._inShow) {
          this$1._hideNode(node);
        }
        delete this$1._showNodes[i];
      }
    },

    /**
     * copy node style props (opacity and zIndex) and transform status from
     * one element to another.
     */
    _copyStyle: function _copyStyle (from, to, styles, transformExtra) {
      if ( styles === void 0 ) styles = ['opacity', 'zIndex'];
      if ( transformExtra === void 0 ) transformExtra = {};

      weex.utils.extendKeys(to.style, from.style, styles);
      var transObj = weex.utils.getTransformObj(from);
      for (var k in transformExtra) {
        transObj[k] = transformExtra[k];
      }
      weex.utils.addTransform(to, transObj);
      var fromInner = from.firstElementChild;
      var toInner = to.firstElementChild;
      toInner.style.opacity = fromInner.style.opacity;
      weex.utils.copyTransform(fromInner, toInner);
    },

    /**
     * replace a clone node with the original node if it's not in use.
     */
    _replaceClone: function _replaceClone (clone, pos) {
      var this$1 = this;

      var origNode = this._cells[clone.index].elm;
      if (origNode._inShow) {
        return
      }
      var origShowIndex = origNode._showIndex;
      var styleProps = ['opacity', 'zIndex'];
      var cl;
      if (Math.abs(origShowIndex) <= 1) {
        // leave a clone to replace the origNode in the show zone(-1 ~ 1).
        cl = this._getClone(origNode.index);
        this._copyStyle(origNode, cl);
        this._showNodes[origShowIndex] = cl;
      }
      origNode._inShow = true;
      var transObj = weex.utils.getTransformObj(clone);
      transObj.translate = transObj.translate.replace(/[+-\d.]+[pw]x/, function ($0) {
        return pos * this$1._wrapperWidth - this$1.innerOffset + 'px'
      });
      this._copyStyle(clone, origNode, styleProps, transObj);
      this._removeClone(clone);
      if (!cl) {
        delete this._showNodes[origShowIndex];
      }
      this._showNodes[pos] = origNode;
      origNode._showIndex = pos;
    },

    _rearrangeNodes: function _rearrangeNodes (newIndex) {
      var this$1 = this;

      if (this.frameCount <= 1) {
        this._sliding = false;
        this.currentIndex = 0;
        return
      }

      // clear autoPlay timer (and restart after updated hook).
      this._startAutoPlay();

      /**
       * clean nodes. replace current node with non-cloned node.
       * set current index to the new index.
       */
      var shows = this._showNodes;
      for (var i = this._showStartIdx; i <= this._showEndIdx; i++) {
        shows[i]._inShow = false;
      }
      for (var i$1 = -1; i$1 <= 1; i$1++) {
        var node = shows[i$1];
        if (!node._isClone) {
          node._inShow = true;
        }
        else {
          this$1._replaceClone(node, i$1);
        }
      }

      this._clearNodes(this._showStartIdx, -2);
      this._showStartIdx = -1;
      this._clearNodes(2, this._showEndIdx);
      this._showEndIdx = 1;
      this._sliding = false;

      // set current index to the new index.
      this.currentIndex = newIndex;
      this._preIndex = newIndex;
    },

    /**
     * according to the attrs: neighborScale, neighborAlpha, neighborSpace.
     * 1. apply the main cell transform effects.
     * 2. set the previous cell and the next cell's positon, scale and alpha.
     * 3. set other cells' scale and alpha.
     */
    _setNeighbors: function _setNeighbors () {
      var this$1 = this;

      for (var i = this._showStartIdx; i <= this._showEndIdx; i++) {
        var elm = this$1._showNodes[i].firstElementChild;
        elm.style.webkitTransition = "all " + (NEIGHBOR_SCALE_TIME / 1000) + "s ease";
        elm.style.mozTransition = "all " + (NEIGHBOR_SCALE_TIME / 1000) + "s ease";
        elm.style.transition = "all " + (NEIGHBOR_SCALE_TIME / 1000) + "s ease";
        var transObj = {
          scale: ("scale(" + (i === 0 ? this$1.currentItemScale : this$1.neighborScale) + ")")
        };
        var translateX = (void 0);
        if (!this$1._neighborWidth) {
          this$1._neighborWidth = parseFloat(elm.style.width) || elm.getBoundingClientRect().width;
        }
        // calculate position offsets according to neighbor scales.
        if (Math.abs(i) === 1) {
          var dist = ((this$1._wrapperWidth - this$1._neighborWidth * this$1.neighborScale) / 2
            + this$1.neighborSpace * weex.config.env.scale) / this$1.neighborScale;
          translateX = -i * dist;
        }
        else {
          // clear position offsets.
          translateX = 0;
        }
        transObj.translate = "translate3d(" + translateX + "px, 0px, 0px)";
        weex.utils.addTransform(elm, transObj);
        elm.style.opacity = i === 0 ? MAIN_SLIDE_OPACITY : this$1.neighborAlpha;
      }
    },

    _next: function _next () {
      var next = this.currentIndex + 1;
      if (this.frameCount <= 1) {
        next--;
      }
      this._slideTo(next);
    },

    _prev: function _prev () {
      var prev = this.currentIndex - 1;
      if (this.frameCount <= 1) {
        prev++;
      }
      this._slideTo(prev);
    },

    _handleTouchStart: function _handleTouchStart (event) {
      var touch = event.changedTouches[0];
      this._stopAutoPlay();
      var inner = this.$refs.inner;
      this._touchParams = {
        originalTransform: inner.style.webkitTransform
          || inner.style.mozTransform
          || inner.style.transform,
        startTouchEvent: touch,
        startX: touch.pageX,
        startY: touch.pageY,
        timeStamp: event.timeStamp
      };
    },

    _handleTouchMove: function _handleTouchMove (event) {
      var tp = this._touchParams;
      if (!tp) { return }
      if (this._sliding) {
        return
      }
      var ref = this._touchParams;
      var startX = ref.startX;
      var startY = ref.startY;
      var touch = event.changedTouches[0];
      var offsetX = touch.pageX - startX;
      var offsetY = touch.pageY - startY;
      tp.offsetX = offsetX;
      tp.offsetY = offsetY;
      var isV = tp.isVertical;
      if (typeof isV === 'undefined') {
        isV = tp.isVertical = Math.abs(offsetX) < Math.abs(offsetY);
        if (!isV) {
          this._emitScrollEvent('scrollstart');
        }
      }
      // vertical scroll. just ignore it.
      if (isV) {
        return
      }
      // horizontal scroll. trigger scroll event.
      event.preventDefault();
      var inner = this.$refs.inner;
      if (inner && offsetX) {
        if (!this._nodesOffsetCleared) {
          this._nodesOffsetCleared = true;
          this._clearNodesOffset();
        }
        this._emitScrollEvent('scroll', {
          offsetXRatio: offsetX / this._wrapperWidth
        });
        inner.style.webkitTransform = "translate3d(" + (this.innerOffset + offsetX) + "px, 0, 0)";
        inner.style.mozTransform = "translate3d(" + (this.innerOffset + offsetX) + "px, 0, 0)";
        inner.style.transform = "translate3d(" + (this.innerOffset + offsetX) + "px, 0, 0)";
      }
    },

    _handleTouchEnd: function _handleTouchEnd (event) {
      this._startAutoPlay();
      var tp = this._touchParams;
      if (!tp) { return }
      var isV = tp.isVertical;
      if (typeof isV === 'undefined') {
        return
      }
      var inner = this.$refs.inner;
      var offsetX = tp.offsetX;
      if (inner) {
        this._nodesOffsetCleared = false;
        // TODO: test the velocity if it's less than 0.2.
        var reset = Math.abs(offsetX / this._wrapperWidth) < 0.2;
        var direction = offsetX > 0 ? 1 : -1;
        var newIndex = reset ? this.currentIndex : (this.currentIndex - direction);
        this._slideTo(newIndex, true);
      }
      delete this._touchParams;
    },

    _handleTouchCancel: function _handleTouchCancel (event) {
      return this._handleTouchEnd(event)
    },

    _emitScrollEvent: function _emitScrollEvent (type, data) {
      if ( data === void 0 ) data = {};

      this.$emit(type, weex.utils.createEvent(this.$el, type, data));
    },

    _throttleEmitScroll: function _throttleEmitScroll (offset, callback) {
      var this$1 = this;

      var i = 0;
      var throttleTime = THROTTLE_SCROLL_TIME;
      var cnt = parseInt(TRANSITION_TIME / throttleTime) - 1;
      var sign = offset > 0 ? 1 : -1;
      var r = Math.abs(offset / this._wrapperWidth);
      var throttledScroll = function () {
        if (++i > cnt) {
          return callback && callback.call(this$1)
        }
        var ratio = this$1._step === 0
          ? sign * r * (1 - i / cnt)
          : sign * (r + (1 - r) * i / cnt);
        this$1._emitScrollEvent('scroll', {
          offsetXRatio: ratio
        });
        setTimeout(throttledScroll, THROTTLE_SCROLL_TIME);
      };
      throttledScroll();
    }
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// import { validateStyles } from '../../validator'
// import indicator from './indicator'
var slider$1 = {
  mixins: [slideMixin],
  props: {
    index: {
      type: [String, Number],
      default: 0
    },
    'auto-play': {
      type: [String, Boolean],
      default: false
    },
    interval: {
      type: [String, Number],
      default: 3000
    },
    infinite: {
      type: [String, Boolean],
      default: true
    }
  },

  watch: {
    index: function index () {
      this.currentIndex = this._normalizeIndex(this.index);
    }
  },

  data: function data () {
    return {
      frameCount: 0,
      currentIndex: this.index
    }
  },

  beforeCreate: function beforeCreate () {
    this.weexType = 'slider';
  },

  render: function render (createElement) {
    /* istanbul ignore next */
    // if ("production" === 'development') {
    //   validateStyles('slider', this.$vnode.data && this.$vnode.data.staticStyle)
    // }
    return this._renderSlides(createElement)
  }
};

var slider$2 = {
  init: function init (weex) {
    weex.registerComponent('slider', slider$1);
    weex.registerComponent('cycleslider', slider$1);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var DEFAULT_NEIGHBOR_SPACE = 20;
var DEFAULT_NEIGHBOR_ALPHA = 0.6;
var DEFAULT_NEIGHBOR_SCALE = 0.8;
var DEFAULT_CURRENT_ITEM_SCALE = 0.9;

var sliderNeighbor = {
  mixins: [slideMixin],
  props: {
    index: {
      type: [String, Number],
      default: 0
    },
    autoPlay: {
      type: [String, Boolean],
      default: false
    },
    interval: {
      type: [String, Number],
      default: 3000
    },
    infinite: {
      type: [String, Boolean],
      default: true
    },
    neighborSpace: {
      type: [String, Number],
      validator: function (val) {
        val = parseFloat(val);
        return !isNaN(val) && val > 0
      },
      default: DEFAULT_NEIGHBOR_SPACE
    },
    neighborAlpha: {
      type: [String, Number],
      validator: function (val) {
        val = parseFloat(val);
        return !isNaN(val) && val >= 0 && val <= 1
      },
      default: DEFAULT_NEIGHBOR_ALPHA
    },
    neighborScale: {
      type: [String, Number],
      validator: function (val) {
        val = parseFloat(val);
        return !isNaN(val) && val >= 0 && val <= 1
      },
      default: DEFAULT_NEIGHBOR_SCALE
    },
    currentItemScale: {
      type: [String, Number],
      validator: function (val) {
        val = parseFloat(val);
        return !isNaN(val) && val >= 0 && val <= 1
      },
      default: DEFAULT_CURRENT_ITEM_SCALE
    }
  },

  watch: {
    index: function index () {
      this.currentIndex = this._normalizeIndex(this.index);
    }
  },

  data: function data () {
    return {
      currentIndex: this.index,
      frameCount: 0
    }
  },

  beforeCreate: function beforeCreate () {
    this.isNeighbor = true;
    this.weexType = 'slider-neighbor';
  },

  render: function render (createElement) {
    return this._renderSlides(createElement)
  }
};

var neighbor = {
  init: function init (weex) {
    weex.registerComponent('slider-neighbor', sliderNeighbor);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var _css$6 = "\n.weex-indicator {\n  position: absolute;\n  z-index: 10;\n  -webkit-flex-direction: row;\n  -ms-flex-direction: row;\n  -moz-box-orient: horizontal;\n  -moz-box-direction: normal;\n  flex-direction: row;\n  -webkit-box-orient: horizontal;\n  margin: 0;\n  padding: 0;\n}\n\n.weex-indicator-item {\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  width: 0.266667rem;\n  height: 0.266667rem;\n  background-color: #BBBBBB;\n}\n.weex-indicator-item + .weex-indicator-item {\n  margin-left: 0.133333rem;\n}\n\n.weex-indicator-item-active {\n  background-color: blue;\n}\n";

var extractComponentStyle$4;
var extend$3;
var extendKeys$1;

function getIndicatorItemStyle (spec, isActive) {
  var style = {};
  style['background-color'] = spec[isActive ? 'itemSelectedColor' : 'itemColor'];
  style['width'] = style['height'] = spec['itemSize'];
  return style
}

function _render (context, h) {
  var children = [];
  var mergedStyle = extractComponentStyle$4(context);
  var indicatorSpecStyle = extendKeys$1(
      {},
      mergedStyle,
      ['itemColor', 'itemSelectedColor', 'itemSize']
    );
  for (var i = 0; i < Number(context.count); ++i) {
    var classNames = ['weex-indicator-item weex-el'];
    var isActive = false;
    if (i === Number(context.active)) {
      classNames.push('weex-indicator-item-active');
      isActive = true;
    }
    children.push(h('mark', {
      staticClass: classNames.join(' '),
      staticStyle: getIndicatorItemStyle(indicatorSpecStyle, isActive)
    }));
  }
  context.$nextTick(function () {
    _reLayout(this, _getVirtualRect(this, mergedStyle), _getLtbr(this, mergedStyle));
  });
  return h('nav', {
    attrs: { 'weex-type': 'indicator' },
    staticClass: 'weex-indicator weex-ct',
    staticStyle: mergedStyle
  }, children)
}

/**
 * get indicator's virtual rect (width, height), which is the .
 */
function _getVirtualRect (context, mergedStyle) {
  var ct = context._getParentRect();
  var rect = ['width', 'height'].reduce(function (pre, key) {
    var msv = mergedStyle && mergedStyle[key];
    pre[key] = msv ? parseFloat(msv) : ct[key];
    return pre
  }, {});
  return rect
}

/**
 * get indicator's ltbr values (without units).
 */
function _getLtbr (context, mergedStyle) {
  return ['left', 'top', 'bottom', 'right'].reduce(function (pre, key) {
    var msv = mergedStyle && mergedStyle[key];
    if (!msv && msv !== 0) { return pre }
    pre[key] = parseFloat(msv);
    return pre
  }, {})
}

/**
 * get indicator's rect (width, height).
 */
function _getIndicatorRect (el) {
  var width, height;
  if (el.children.length === 1) {
    var itemComputedStyle = window.getComputedStyle(el.children[0]);
    width = parseFloat(itemComputedStyle.width);
    height = parseFloat(itemComputedStyle.height);
  }
  else {
    var itemComputedStyle$1 = window.getComputedStyle(el.children[1]);
    var padding = parseFloat(itemComputedStyle$1.marginLeft);
    height = parseFloat(itemComputedStyle$1.height);
    width = el.children.length * (height + padding) - padding;
  }
  return { width: width, height: height }
}

/**
 * calculate and reset indicator's width, height, and ltbr.
 * @param {object} virtualRect. width and height of indicator's virtual rect box.
 * @param {object} ltbr. the user specified left, top, bottom, right pixels (without units).
 */
function _reLayout (context, virtualRect, ltbr) {
  var el = context.$el;
  var rect = _getIndicatorRect(el);
  var rectWithPx = Object.keys(rect).reduce(function (pre, key) {
    pre[key] = rect[key] + 'px';
    return pre
  }, {});
  extend$3(el.style, rectWithPx);
  var axisMap = [{
    dir: ltbr.left || ltbr.left === 0
      ? 'left' : ltbr.right || ltbr.right === 0
      ? 'right' : 'left',
    scale: 'width'
  }, {
    dir: ltbr.top || ltbr.top === 0
      ? 'top' : ltbr.bottom || ltbr.bottom === 0
      ? 'bottom' : 'top',
    scale: 'height'
  }];
  Object.keys(axisMap).forEach(function (key) {
    var ref = axisMap[key];
    var dir = ref.dir;
    var scale = ref.scale;
    el.style[dir] = (ltbr[dir] || 0) + virtualRect[scale] / 2 - rect[scale] / 2 + 'px';
  });
}

var indicator = {
  name: 'weex-indicator',
  methods: {
    show: function () {
      this.$el.style.visibility = 'visible';
    }
  },
  data: function data () {
    return {
      count: 0,
      active: 0
    }
  },
  render: function render (createElement) {
    var ref = this.$vnode.data.attrs || {};
    var count = ref.count;
    var active = ref.active;
    this.count = count;
    this.active = active;
    if (!this.count) { return }
    return _render(this, createElement)
  },
  _css: _css$6
};

var indicator$1 = {
  init: function init (weex) {
    extractComponentStyle$4 = weex.extractComponentStyle;
    extend$3 = weex.utils.extend;
    extendKeys$1 = weex.utils.extendKeys;
    weex.registerComponent('indicator', indicator);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var slider = {
  init: function init (weex) {
    weex.install(slider$2);
    weex.install(neighbor);
    weex.install(indicator$1);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * @fileOverview Impl of text component.
 *
 * Notes about the style 'height' and 'lines':
 * if the computed value of 'height' is bigger than 'lines', than the text will
 * be clipped according to the 'lines'. Otherwise, it'll be the 'height'.
 */

var _css$7 = "\n.weex-text {\n  display: -webkit-box;\n  display: -moz-box;\n  -webkit-box-orient: vertical;\n  -moz-box-orient: vertical;\n  -moz-box-direction: normal;\n  position: relative;\n  white-space: pre-wrap;  /* not using 'pre': support auto line feed. */\n  font-size: 0.426667rem;\n  word-wrap: break-word;\n  overflow: hidden; /* it'll be clipped if the height is not high enough. */\n}\n";

/**
 * Get text special styles (lines and text-overflow).
 */
function getTextSpecStyle (ms) {
  if ( ms === void 0 ) ms = {};

  var lines = parseInt(ms.lines) || 0;
  var overflow = ms['text-overflow'] || 'ellipsis';
  if (lines > 0) {
    return {
      overflow: 'hidden',
      'text-overflow': overflow,
      '-webkit-line-clamp': lines
    }
  }
}

function getText (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var createEventMap = weex.createEventMap;
  var ref = weex.utils;
  var extend = ref.extend;

  return {
    name: 'weex-text',
    props: {
      lines: [Number, String],
      value: [String]
    },

    render: function render (createElement) {
      var style = extractComponentStyle(this);
      var textSpecStyle = getTextSpecStyle(style);
      return createElement('p', {
        attrs: { 'weex-type': 'text' },
        on: createEventMap(this),
        staticClass: 'weex-text weex-el',
        staticStyle: extend(style, textSpecStyle)
      }, this.$slots.default || [this.value])
    },
    _css: _css$7
  }
}

var text = {
  init: function init (weex) {
    weex.registerComponent('text', getText(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var _css$8 = "\n.weex-textarea {\n  font-size: 0.426667rem\n}\n.weex-textarea:focus {\n  outline: none;\n}\n";

function getTextarea (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var createEventMap = weex.createEventMap;
  var ref = weex.mixins;
  var inputCommon = ref.inputCommon;
  var ref$1 = weex.utils;
  var extend = ref$1.extend;
  var mapFormEvents = ref$1.mapFormEvents;

  return {
    name: 'weex-textarea',
    mixins: [inputCommon],
    props: {
      value: String,
      placeholder: String,
      disabled: {
        type: [String, Boolean],
        default: false
      },
      autofocus: {
        type: [String, Boolean],
        default: false
      },
      rows: {
        type: [String, Number],
        default: 2
      },
      returnKeyType: String
    },

    render: function render (createElement) {
      /* istanbul ignore next */
      // if ("production" === 'development') {
      //   validateStyles('textarea', this.$vnode.data && this.$vnode.data.staticStyle)
      // }
      var events = extend(createEventMap(this), mapFormEvents(this));
      return createElement('html:textarea', {
        attrs: {
          'weex-type': 'textarea',
          value: this.value,
          disabled: (this.disabled !== 'false' && this.disabled !== false),
          autofocus: (this.autofocus !== 'false' && this.autofocus !== false),
          placeholder: this.placeholder,
          rows: this.rows,
          'return-key-type': this.returnKeyType
        },
        domProps: {
          value: this.value
        },
        on: this.createKeyboardEvent(events),
        staticClass: 'weex-textarea weex-el',
        staticStyle: extractComponentStyle(this)
      })
    },
    _css: _css$8
  }
}

var textarea = {
  init: function init (weex) {
    weex.registerComponent('textarea', getTextarea(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

function getVideo (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var createEventMap = weex.createEventMap;

  return {
    name: 'weex-video',
    props: {
      src: String,
      playStatus: {
        type: String,
        default: 'pause',
        validator: function validator (value) {
          return ['play', 'pause'].indexOf(value) !== -1
        }
      },
      autoplay: {
        type: [String, Boolean],
        default: false
      },
      autoPlay: {
        type: [String, Boolean],
        default: false
      },
      playsinline: {
        type: [String, Boolean],
        default: true
      },
      controls: {
        type: [String, Boolean],
        default: false
      }
    },

    render: function render (createElement) {
      if (this.playStatus === 'play') {
        this.$nextTick(function () {
          this.$el && this.$el.play();
        });
      }
      else if (this.playStatus === 'pause') {
        this.$nextTick(function () {
          this.$el && this.$el.pause();
        });
      }

      return createElement('html:video', {
        attrs: {
          'weex-type': 'video',
          autoplay: ((this.autoplay !== 'false' && this.autoplay !== false)
            || (this.autoPlay !== 'false' && this.autoPlay !== false)),
          'webkit-playsinline': this.playsinline,
          controls: this.controls,
          src: this.src
        },
        on: createEventMap(this, ['start', 'pause', 'finish', 'fail']),
        staticClass: 'weex-video weex-el',
        staticStyle: extractComponentStyle(this)
      })
    }
  }
}

var video = {
  init: function init (weex) {
    weex.registerComponent('video', getVideo(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var _css$9 = "\n.weex-web {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: none;\n  box-sizing: border-box;\n}\n";

function getWeb (weex) {
  var extractComponentStyle = weex.extractComponentStyle;
  var createEventMap = weex.createEventMap;
  var ref = weex.utils;
  var createEvent = ref.createEvent;

  return {
    name: 'weex-web',
    props: {
      src: String
    },
    methods: {
      // TODO: check cross-origin
      goBack: function goBack () {
        if (this.$el) {
          this.$el.contentWindow.history.back();
        }
      },
      goForward: function goForward () {
        if (this.$el) {
          this.$el.contentWindow.history.forward();
        }
      },
      reload: function reload () {
        if (this.$el) {
          this.$el.contentWindow.history.reload();
        }
      }
    },

    mounted: function mounted () {
      var this$1 = this;

      if (this.$el) {
        this.$emit('pagestart', createEvent(this.$el, 'pagestart', { url: this.src }));
        this.$el.addEventListener('load', function (event) {
          this$1.$emit('pagefinish', createEvent(this$1.$el, 'pagefinish', { url: this$1.src }));
        });
      }
    },

    render: function render (createElement) {
      /* istanbul ignore next */
      // if ("production" === 'development') {
      //   validateStyles('web', this.$vnode.data && this.$vnode.data.staticStyle)
      // }
      return createElement('iframe', {
        attrs: {
          'weex-type': 'web',
          src: this.src
        },
        on: createEventMap(this, ['error']),
        staticClass: 'weex-web weex-el',
        staticStyle: extractComponentStyle(this)
      })
    },
    _css: _css$9
  }
}

var web = {
  init: function init (weex) {
    weex.registerComponent('web', getWeb(weex));
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var components = [
  a,
  div,
  image$1,
  input,
  _switch,
  scrollable,
  slider,
  text,
  textarea,
  video,
  web
];

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var supportGeolocation = 'geolocation' in navigator;
var errorMsg = "[h5-render]: browser doesn't support geolocation.";

var geolocation = {
  // options:
  //   - enableHighAccuracy optional, value is true or false, false by default.
  //   - timeout [none-native] optional, value is a number (milliseconds), default vaule is FINFINITY.
  //   - maximumAge [none-native] optional, value is a number (milliseconds), default value is 0.
  getCurrentPosition: function getCurrentPosition (successCbId, errorCbId, options) {
    var this$1 = this;

    var successCb = function (pos) { return this$1.sender.performCallback(successCbId, pos); };
    var errorCb = function (err) { return this$1.sender.performCallback(errorCbId, err); };
    if (supportGeolocation) {
      navigator.geolocation.getCurrentPosition(successCb, errorCb, options);
    }
    else {
      console.warn(errorMsg);
      errorCb(new Error(errorMsg));
    }
  },

  // options: the same with `getCurrentPosition`.
  watchPosition: function watchPosition (successCbId, errorCbId, options) {
    var this$1 = this;

    var successCb = function (pos) { return this$1.sender.performCallback(successCbId, pos, true); };
    var errorCb = function (err) { return this$1.sender.performCallback(errorCbId, err); };
    if (supportGeolocation) {
      var id = navigator.geolocation.watchPosition(function (pos) {
        pos.watchId = id;
        successCb(pos);
      }, errorCb, options);
    }
    else {
      console.warn(errorMsg);
      errorCb(new Error(errorMsg));
    }
  },

  clearWatch: function clearWatch (watchId) {
    if (supportGeolocation) {
      navigator.geolocation.clearWatch(watchId);
    }
    else {
      console.warn(errorMsg);
    }
  }
};

var meta = {
  geolocation: [{
    name: 'getCurrentPosition',
    args: ['function', 'function', 'object']
  }, {
    name: 'watchPosition',
    args: ['function', 'function', 'object']
  }, {
    name: 'clearWatch',
    args: ['string']
  }]
};

var geolocation$1 = {
  init: function init (Weex) {
    Weex.registerApiModule('geolocation', geolocation, meta);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* global localStorage */

var supportLocalStorage = false;
try {
  supportLocalStorage = typeof localStorage !== 'undefined';
}
catch (err) {
  // not support.
}

var SUCCESS = 'success';
var FAILED = 'failed';
var INVALID_PARAM = 'invalid_param';
var UNDEFINED = 'undefined';

function callFail (sender, callbackId, errorMsg) {
  sender.performCallback(callbackId, {
    result: FAILED,
    data: errorMsg || UNDEFINED
  });
}

function callNotSupportFail (sender, callbackId) {
  sender.performCallback(callbackId, {
    result: FAILED,
    data: 'localStorage is disabled or not supported.'
  });
}

var storage = {

  /**
   * When passed a key name and value, will add that key to the storage,
   * or update that key's value if it already exists.
   * @param {string} key
   * @param {string} value not null nor undifined，but 0 works.
   * @param {function} callbackId
   */
  setItem: function (key, value, callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    if (!key || (!value && value !== 0)) {
      sender.performCallback(callbackId, {
        result: 'failed',
        data: INVALID_PARAM
      });
      return
    }
    try {
      localStorage.setItem(key, value);
      sender.performCallback(callbackId, {
        result: SUCCESS,
        data: UNDEFINED
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  },

  /**
   * When passed a key name, will return that key's value.
   * @param {string} key
   * @param {function} callbackId
   */
  getItem: function (key, callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    if (!key) {
      sender.performCallback(callbackId, {
        result: FAILED,
        data: INVALID_PARAM
      });
      return
    }
    try {
      var val = localStorage.getItem(key);
      sender.performCallback(callbackId, {
        result: val ? SUCCESS : FAILED,
        data: val || UNDEFINED
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  },

  /**
   *When passed a key name, will remove that key from the storage.
   * @param {string} key
   * @param {function} callbackId
   */
  removeItem: function (key, callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    if (!key) {
      sender.performCallback(callbackId, {
        result: FAILED,
        data: INVALID_PARAM
      });
      return
    }
    try {
      localStorage.removeItem(key);
      sender.performCallback(callbackId, {
        result: SUCCESS,
        data: UNDEFINED
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  },

  /**
   * Returns an integer representing the number of data items stored in the Storage object.
   * @param {function} callbackId
   */
  length: function (callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    try {
      var len = localStorage.length;
      sender.performCallback(callbackId, {
        result: SUCCESS,
        data: len
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  },

  /**
   * Returns an array that contains all keys stored in Storage object.
   * @param {function} callbackId
   */
  getAllKeys: function (callbackId) {
    var sender = this.sender;
    if (!supportLocalStorage) {
      return callNotSupportFail(sender, callbackId)
    }
    try {
      var _arr = [];
      for (var i = 0; i < localStorage.length; i++) {
        _arr.push(localStorage.key(i));
      }
      sender.performCallback(callbackId, {
        result: SUCCESS,
        data: _arr
      });
    }
    catch (e) {
      // accept any exception thrown during a storage attempt as a quota error
      callFail(sender, callbackId);
    }
  }
};

var meta$1 = {
  storage: [{
    name: 'setItem',
    args: ['string', 'string', 'function']
  }, {
    name: 'getItem',
    args: ['string', 'function']
  }, {
    name: 'removeItem',
    args: ['string', 'function']
  }, {
    name: 'length',
    args: ['function']
  }, {
    name: 'getAllKeys',
    args: ['function']
  }]
};

var storage$1 = {
  init: function (Weex) {
    Weex.registerApiModule('storage', storage, meta$1);
  }
};

(typeof window === 'undefined') && (window = {ctrl: {}, lib: {}});!window.ctrl && (window.ctrl = {});!window.lib && (window.lib = {});!function(a,b){function c(a){var b={};Object.defineProperty(this,"params",{set:function(a){if("object"==typeof a){for(var c in b){ delete b[c]; }for(var c in a){ b[c]=a[c]; }}},get:function(){return b},enumerable:!0}),Object.defineProperty(this,"search",{set:function(a){if("string"==typeof a){0===a.indexOf("?")&&(a=a.substr(1));var c=a.split("&");for(var d in b){ delete b[d]; }for(var e=0;e<c.length;e++){var f=c[e].split("=");if(void 0!==f[1]&&(f[1]=f[1].toString()),f[0]){ try{b[decodeURIComponent(f[0])]=decodeURIComponent(f[1]);}catch(g){b[f[0]]=f[1];} }}}},get:function(){var a=[];for(var c in b){ if(void 0!==b[c]){ if(""!==b[c]){ try{a.push(encodeURIComponent(c)+"="+encodeURIComponent(b[c]));}catch(d){a.push(c+"="+b[c]);} }else { try{a.push(encodeURIComponent(c));}catch(d){a.push(c);} } } }return a.length?"?"+a.join("&"):""},enumerable:!0});var c;Object.defineProperty(this,"hash",{set:function(a){"string"==typeof a&&(a&&a.indexOf("#")<0&&(a="#"+a),c=a||"");},get:function(){return c},enumerable:!0}),this.set=function(a){a=a||"";var b;if(!(b=a.match(new RegExp("^([a-z0-9-]+:)?[/]{2}(?:([^@/:?]+)(?::([^@/:]+))?@)?([^:/?#]+)(?:[:]([0-9]+))?([/][^?#;]*)?(?:[?]([^#]*))?([#][^?]*)?$","i")))){ throw new Error("Wrong uri scheme."); }this.protocol=b[1]||("object"==typeof location?location.protocol:""),this.username=b[2]||"",this.password=b[3]||"",this.hostname=this.host=b[4],this.port=b[5]||"",this.pathname=b[6]||"/",this.search=b[7]||"",this.hash=b[8]||"",this.origin=this.protocol+"//"+this.hostname;},this.toString=function(){var a=this.protocol+"//";return this.username&&(a+=this.username,this.password&&(a+=":"+this.password),a+="@"),a+=this.host,this.port&&"80"!==this.port&&(a+=":"+this.port),this.pathname&&(a+=this.pathname),this.search&&(a+=this.search),this.hash&&(a+=this.hash),a},a&&this.set(a.toString());}b.httpurl=function(a){return new c(a)};}(window,window.lib||(window.lib={}));

var index$5 = function (str) {
	return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
		return '%' + c.charCodeAt(0).toString(16).toUpperCase();
	});
};

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject$2(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

var index$7 = shouldUseNative() ? Object.assign : function (target, source) {
	var arguments$1 = arguments;

	var from;
	var to = toObject$2(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments$1[s]);

		for (var key in from) {
			if (hasOwnProperty$1.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};

var strictUriEncode = index$5;
var objectAssign = index$7;

function encoderForArrayFormat(opts) {
	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, index) {
				return value === null ? [
					encode(key, opts),
					'[',
					index,
					']'
				].join('') : [
					encode(key, opts),
					'[',
					encode(index, opts),
					']=',
					encode(value, opts)
				].join('');
			};

		case 'bracket':
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'[]=',
					encode(value, opts)
				].join('');
			};

		default:
			return function (key, value) {
				return value === null ? encode(key, opts) : [
					encode(key, opts),
					'=',
					encode(value, opts)
				].join('');
			};
	}
}

function parserForArrayFormat(opts) {
	var result;

	switch (opts.arrayFormat) {
		case 'index':
			return function (key, value, accumulator) {
				result = /\[(\d*)\]$/.exec(key);

				key = key.replace(/\[\d*\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				}

				if (accumulator[key] === undefined) {
					accumulator[key] = {};
				}

				accumulator[key][result[1]] = value;
			};

		case 'bracket':
			return function (key, value, accumulator) {
				result = /(\[\])$/.exec(key);
				key = key.replace(/\[\]$/, '');

				if (!result) {
					accumulator[key] = value;
					return;
				} else if (accumulator[key] === undefined) {
					accumulator[key] = [value];
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};

		default:
			return function (key, value, accumulator) {
				if (accumulator[key] === undefined) {
					accumulator[key] = value;
					return;
				}

				accumulator[key] = [].concat(accumulator[key], value);
			};
	}
}

function encode(value, opts) {
	if (opts.encode) {
		return opts.strict ? strictUriEncode(value) : encodeURIComponent(value);
	}

	return value;
}

function keysSorter(input) {
	if (Array.isArray(input)) {
		return input.sort();
	} else if (typeof input === 'object') {
		return keysSorter(Object.keys(input)).sort(function (a, b) {
			return Number(a) - Number(b);
		}).map(function (key) {
			return input[key];
		});
	}

	return input;
}

var extract = function (str) {
	return str.split('?')[1] || '';
};

var parse = function (str, opts) {
	opts = objectAssign({arrayFormat: 'none'}, opts);

	var formatter = parserForArrayFormat(opts);

	// Create an object with no prototype
	// https://github.com/sindresorhus/query-string/issues/47
	var ret = Object.create(null);

	if (typeof str !== 'string') {
		return ret;
	}

	str = str.trim().replace(/^(\?|#|&)/, '');

	if (!str) {
		return ret;
	}

	str.split('&').forEach(function (param) {
		var parts = param.replace(/\+/g, ' ').split('=');
		// Firefox (pre 40) decodes `%3D` to `=`
		// https://github.com/sindresorhus/query-string/pull/37
		var key = parts.shift();
		var val = parts.length > 0 ? parts.join('=') : undefined;

		// missing `=` should be `null`:
		// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
		val = val === undefined ? null : decodeURIComponent(val);

		formatter(decodeURIComponent(key), val, ret);
	});

	return Object.keys(ret).sort().reduce(function (result, key) {
		var val = ret[key];
		if (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {
			// Sort object keys, not values
			result[key] = keysSorter(val);
		} else {
			result[key] = val;
		}

		return result;
	}, Object.create(null));
};

var stringify = function (obj, opts) {
	var defaults = {
		encode: true,
		strict: true,
		arrayFormat: 'none'
	};

	opts = objectAssign(defaults, opts);

	var formatter = encoderForArrayFormat(opts);

	return obj ? Object.keys(obj).sort().map(function (key) {
		var val = obj[key];

		if (val === undefined) {
			return '';
		}

		if (val === null) {
			return encode(key, opts);
		}

		if (Array.isArray(val)) {
			var result = [];

			val.slice().forEach(function (val2) {
				if (val2 === undefined) {
					return;
				}

				result.push(formatter(key, val2, result.length));
			});

			return result.join('&');
		}

		return encode(key, opts) + '=' + encode(val, opts);
	}).filter(function (x) {
		return x.length > 0;
	}).join('&') : '';
};

var index$4 = {
	extract: extract,
	parse: parse,
	stringify: stringify
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/* global lib, XMLHttpRequest */
/* deps: httpurl */

var utils$1;

var jsonpCnt = 0;
var ERROR_STATE = -1;

function _jsonp (config, callback, progressCallback) {
  var cbName = 'jsonp_' + (++jsonpCnt);
  var url;

  if (!config.url) {
    console.error('[h5-render] config.url should be set in _jsonp for \'fetch\' API.');
  }

  global[cbName] = (function (cb) {
    return function (response) {
      callback({
        status: 200,
        ok: true,
        statusText: 'OK',
        data: response
      });
      delete global[cb];
    }
  })(cbName);

  var script = document.createElement('script');
  try {
    url = lib.httpurl(config.url);
  }
  catch (err) {
    console.error('[h5-render] invalid config.url in _jsonp for \'fetch\' API: '
      + config.url);
  }
  url.params.callback = cbName;
  script.type = 'text/javascript';
  script.src = url.toString();
  // script.onerror is not working on IE or safari.
  // but they are not considered here.
  script.onerror = (function (cb) {
    return function (err) {
      console.error('[h5-render] unexpected error in _jsonp for \'fetch\' API', err);
      callback({
        status: ERROR_STATE,
        ok: false,
        statusText: '',
        data: ''
      });
      delete global[cb];
    }
  })(cbName);
  var head = document.getElementsByTagName('head')[0];
  head.insertBefore(script, null);
}

function _xhr (config, callback, progressCallback) {
  var xhr = new XMLHttpRequest();
  xhr.responseType = config.type;
  xhr.open(config.method, config.url, true);

  // cors cookie support
  if (config.withCredentials === true) {
    xhr.withCredentials = true;
  }

  var headers = config.headers || {};
  for (var k in headers) {
    xhr.setRequestHeader(k, headers[k]);
  }

  xhr.onload = function (res) {
    callback({
      status: xhr.status,
      ok: xhr.status >= 200 && xhr.status < 300,
      statusText: xhr.statusText,
      data: xhr.response,
      headers: xhr.getAllResponseHeaders().split('\n')
        .reduce(function (obj, headerStr) {
          var headerArr = headerStr.match(/(.+): (.+)/);
          if (headerArr) {
            obj[headerArr[1]] = headerArr[2];
          }
          return obj
        }, {})
    });
  };

  if (progressCallback) {
    xhr.onprogress = function (e) {
      progressCallback({
        readyState: xhr.readyState,
        status: xhr.status,
        length: e.loaded,
        total: e.total,
        statusText: xhr.statusText,
        headers: xhr.getAllResponseHeaders().split('\n')
          .reduce(function (obj, headerStr) {
            var headerArr = headerStr.match(/(.+): (.+)/);
            if (headerArr) {
              obj[headerArr[1]] = headerArr[2];
            }
            return obj
          }, {})
      });
    };
  }

  xhr.onerror = function (err) {
    console.error('[h5-render] unexpected error in _xhr for \'fetch\' API', err);
    callback({
      status: ERROR_STATE,
      ok: false,
      statusText: '',
      data: ''
    });
  };

  xhr.send(config.body || null);
}

var stream = {

  /**
   * sendHttp
   * @deprecated
   * Note: This API is deprecated. Please use stream.fetch instead.
   * send a http request through XHR.
   * @param  {obj} params
   *  - method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'PATCH',
   *  - url: url requested
   * @param  {string} callbackId
   */
  sendHttp: function (param, callbackId) {
    if (typeof param === 'string') {
      try {
        param = JSON.parse(param);
      }
      catch (e) {
        return
      }
    }
    if (typeof param !== 'object' || !param.url) {
      return console.error(
        '[h5-render] invalid config or invalid config.url for sendHttp API')
    }

    var sender = this.sender;
    var method = param.method || 'GET';
    var xhr = new XMLHttpRequest();
    xhr.open(method, param.url, true);
    xhr.onload = function () {
      sender.performCallback(callbackId, this.responseText);
    };
    xhr.onerror = function (error) {
      return console.error('[h5-render] unexpected error in sendHttp API', error)
      // sender.performCallback(
      //   callbackId,
      //   new Error('unexpected error in sendHttp API')
      // )
    };
    xhr.send();
  },

  /**
   * fetch
   * use stream.fetch to request for a json file, a plain text file or
   * a arraybuffer for a file stream. (You can use Blob and FileReader
   * API implemented by most modern browsers to read a arraybuffer.)
   * @param  {object} options config options
   *   - method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'HEAD' | 'PATCH'
   *   - headers {obj}
   *   - url {string}
   *   - mode {string} 'cors' | 'no-cors' | 'same-origin' | 'navigate'
   *   - withCredentials {boolean}
   *   - body
   *   - type {string} 'json' | 'jsonp' | 'text'
   * @param  {string} callbackId
   * @param  {string} progressCallbackId
   */
  fetch: function (options, callbackId, progressCallbackId) {
    var DEFAULT_METHOD = 'GET';
    var DEFAULT_MODE = 'cors';
    var DEFAULT_TYPE = 'text';

    var methodOptions = ['GET', 'POST', 'PUT', 'DELETE', 'HEAD', 'PATCH'];
    var modeOptions = ['cors', 'no-cors', 'same-origin', 'navigate'];
    var typeOptions = ['text', 'json', 'jsonp', 'arraybuffer'];

    // const fallback = false  // fallback from 'fetch' API to XHR.
    var sender = this.sender;

    var config = utils$1.extend({}, options);

    // validate options.method
    if (typeof config.method === 'undefined') {
      config.method = DEFAULT_METHOD;
      console.warn('[h5-render] options.method for \'fetch\' API has been set to '
        + 'default value \'' + config.method + '\'');
    }
    else if (methodOptions.indexOf((config.method + '')
        .toUpperCase()) === -1) {
      return console.error('[h5-render] options.method \''
        + config.method
        + '\' for \'fetch\' API should be one of '
        + methodOptions + '.')
    }

    // validate options.url
    if (!config.url) {
      return console.error('[h5-render] options.url should be set for \'fetch\' API.')
    }

    // validate body content for method 'GET'.
    if (config.method.toUpperCase() === 'GET') {
      var body = config.body;
      if (utils$1.isPlainObject(body)) {
        body = index$4.stringify(body);
      }
      var url = config.url;
      var hashIdx = url.indexOf('#');
      hashIdx <= -1 && (hashIdx = url.length);
      var hash = url.substr(hashIdx);
      if (hash && hash[0] === '#') {
        hash = hash.substr(1);
      }
      url = url.substring(0, hashIdx);
      if (body) {
        url += (config.url.indexOf('?') <= -1 ? '?' : '&') + body;
      }
      url += '#' + hash;
      config.url = url;
    }

    // validate options.mode
    if (typeof config.mode === 'undefined') {
      config.mode = DEFAULT_MODE;
    }
    else if (modeOptions.indexOf((config.mode + '').toLowerCase()) === -1) {
      return console.error('[h5-render] options.mode \''
        + config.mode
        + '\' for \'fetch\' API should be one of '
        + modeOptions + '.')
    }

    // validate options.type
    if (typeof config.type === 'undefined') {
      config.type = DEFAULT_TYPE;
      console.warn('[h5-render] options.type for \'fetch\' API has been set to '
        + 'default value \'' + config.type + '\'.');
    }
    else if (typeOptions.indexOf((config.type + '').toLowerCase()) === -1) {
      return console.error('[h5-render] options.type \''
          + config.type
          + '\' for \'fetch\' API should be one of '
          + typeOptions + '.')
    }

    // validate options.headers
    config.headers = config.headers || {};
    if (!utils$1.isPlainObject(config.headers)) {
      return console.error('[h5-render] options.headers should be a plain object')
    }

    // validate options.timeout
    config.timeout = parseInt(config.timeout, 10) || 2500;

    var _callArgs = [config, function (res) {
      sender.performCallback(callbackId, res);
    }];
    if (progressCallbackId) {
      _callArgs.push(function (res) {
        // Set 'keepAlive' to true for sending continuous callbacks
        sender.performCallback(progressCallbackId, res, true);
      });
    }

    if (config.type === 'jsonp') {
      _jsonp.apply(this, _callArgs);
    }
    else {
      _xhr.apply(this, _callArgs);
    }
  }

};

var meta$2 = {
  stream: [{
    name: 'sendHttp',
    args: ['object', 'function']
  }, {
    name: 'fetch',
    args: ['object', 'function', 'function']
  }]
};

var stream$1 = {
  init: function (Weex) {
    utils$1 = Weex.utils;
    Weex.registerApiModule('stream', stream, meta$2);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**

AUCTION:
taskQueue
Clipboard.setString()  NOW not works, facing to user-act lose of taskQueue.

works in Chrome Firefox Opera. but not in Safari.
@see https://developer.mozilla.org/en-US/docs/Web/API/Document/execCommand#Browser_compatibility

Clipboard.getString() unimplemented. There is no easy way to do paste from clipboard to js variable.

So look out your app behavior, when downgrade to html5 render.
Any idea is welcome.
**/

var WEEX_CLIPBOARD_ID = '__weex_clipboard_id__';

var clipboard = {

  getString: function (callbackId) {
    // not supported in html5
    console.log('clipboard.getString() is not supported now.');
  },

  setString: function (text) {
    // not support safari
    if (typeof text === 'string' && text !== '' && document.execCommand) {
      var tempInput = element();
      tempInput.value = text;

      tempInput.select();
      document.execCommand('copy');
      // var out = document.execCommand('copy');
      // console.log("execCommand out is " + out);
      tempInput.value = '';
      tempInput.blur();
    }
    else {
      console.log('only support string input now');
    }
  }

};

function element () {
  var tempInput = document.getElementById(WEEX_CLIPBOARD_ID);
  if (!tempInput) {
    tempInput = document.createElement('input');
    tempInput.setAttribute('id', WEEX_CLIPBOARD_ID);
    tempInput.style.cssText = 'height:1px;width:1px;border:none;';
    // tempInput.style.cssText = "height:40px;width:300px;border:solid;"
    document.body.appendChild(tempInput);
  }
  return tempInput
}

var meta$3 = {
  clipboard: [{
    name: 'getString',
    args: ['function']
  }, {
    name: 'setString',
    args: ['string']
  }]
};

var clipboard$1 = {
  init: function (Weex) {
    Weex.registerApiModule('clipboard', clipboard, meta$3);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var event$1 = {
  /**
   * openUrl
   * @param  {string} url
   */
  openURL: function (url) {
    location.href = url;
  }

};

var meta$4 = {
  event: [{
    name: 'openURL',
    args: ['string']
  }]
};

var eventModule = {
  init: function (Weex) {
    Weex.registerApiModule('event', event$1, meta$4);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var utils$2 = {};
var endEvent;
var styleName;

var EVENT_NAME_MAP = {
  transition: 'transitionend',
  WebkitTransition: 'webkitTransitionEnd',
  MozTransition: 'mozTransitionEnd',
  OTransition: 'oTransitionEnd',
  msTransition: 'MSTransitionEnd'
};

function detectEvents () {
  var testEl = document.createElement('div');
  var style = testEl.style;
  for (var name in EVENT_NAME_MAP) {
    if (name in style) {
      endEvent = EVENT_NAME_MAP[name];
      styleName = name;
      break
    }
  }
}

detectEvents();

function transitionOnce (vnode, config, callback) {
  var nextFrame = utils$2.nextFrame;
  var toCSSText = utils$2.toCSSText;
  var autoPrefix = utils$2.autoPrefix;
  var camelizeKeys = utils$2.camelizeKeys;
  var normalizeStyle = utils$2.normalizeStyle;
  var isArray = utils$2.isArray;

  if (isArray(vnode)) {
    vnode = vnode[0];
  }

  var duration = config.duration || 0; // ms
  var timing = config.timingFunction || 'linear';
  var delay = config.delay || 0;  // ms

  // TODO: parse transition properties
  var transitionValue = "all " + duration + "ms " + timing + " " + delay + "ms";

  var dom = vnode.$el;
  // trigger image lazyloading by force.
  dom && weex.utils.fireLazyload(dom, true);

  var transitionEndHandler = function (event) {
    event && event.stopPropagation();
    if (endEvent) {
      dom.removeEventListener(endEvent, transitionEndHandler);
      dom.style[styleName] = '';
    }
    callback();
  };
  if (endEvent) {
    dom.style[styleName] = transitionValue;
    dom.addEventListener(endEvent, transitionEndHandler);
  }
  nextFrame(function () {
    dom.style.cssText
      += toCSSText(autoPrefix(normalizeStyle(camelizeKeys(config.styles))) || {});
  });
}

var animation = {
  /**
   * transition
   * @param  {String} vnode
   * @param  {Object} config
   * @param  {String} callback
   */
  transition: function transition (vnode, config, callback) {
    if (!config.styles) { return }
    return transitionOnce(vnode, config, function () {
      callback && callback();
    })
  }
};

var animation$1 = {
  init: function init (weex) {
    var extendKeys = weex.utils.extendKeys;
    extendKeys(utils$2, weex.utils, [
      'nextFrame',
      'toCSSText',
      'autoPrefix',
      'camelizeKeys',
      'normalizeStyle',
      'isArray'
    ]);

    weex.registerModule('animation', animation);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var utils$3 = {};

function getParentScroller$1 (vnode) {
  if (!vnode) { return null }
  var vm = vnode.$el
  ? vnode : vnode.elm
  ? vnode.componentInstance || vnode.context : null;
  if (!vm) { return null }
  var type = vm.$el && vm.$el.getAttribute('weex-type');
  if (config.scrollableTypes.indexOf(type) > -1) {
    return vm
  }
  return getParentScroller$1(vm.$parent)
}

function now () {
  var now = window.performance && window.performance.now
  ? window.performance.now.bind(window.performance) : Date.now;
  return now()
}

function scrollElement (dSuffix, position) {
  if ((this === document.body) || (this === window)
    && window.scrollTo) {
    return window.scrollTo(0, position)
  }
  this[("scroll" + dSuffix)] = position;
}
/**
 * self invoked function that, given a context, steps through scrolling
 * @method step
 * @param {Object} context
 */
function step$1 (context) {
  // call method again on next available frame
  context.frame = window.requestAnimationFrame(step$1.bind(window, context));
  var time = now();
  var elapsed = (time - context.startTime) / 468;
  // avoid elapsed times higher than one
  elapsed = elapsed > 1 ? 1 : elapsed;
  // apply easing to elapsed time
  var value = ease(elapsed);
  var currentPosition = context.startPosition + (context.position - context.startPosition) * value;
  context.method.call(context.scrollable, context.dSuffix, currentPosition);
  // return when end points have been reached
  /**
    * NOTE: should use ~~ to parse position number into integer. Otherwise
    * this two float numbers maybe have a slicely little difference, which
    * will cause this function never to stop.
  */
  if (~~currentPosition === ~~context.position) {
    window.cancelAnimationFrame(context.frame);
    return
  }
}
/**
 * returns result of applying ease math function to a number
 * @method ease
 * @param {Number} k
 * @returns {Number}
 */
function ease (k) {
  return 0.5 * (1 - Math.cos(Math.PI * k))
}
var dom = {
  /**
   * scrollToElement
   * @param  {Vnode | VComponent} vnode
   * @param  {Object} options {offset:Number}
   *   ps: scroll-to has 'ease' and 'duration'(ms) as options.
   */
  scrollToElement: function (vnode, options) {
    var isArray = utils$3.isArray;
    if (isArray(vnode)) {
      vnode = vnode[0];
    }
    var scroller = getParentScroller$1(vnode);
    var scrollDirection = scroller && scroller.scrollDirection || 'vertical';
    var isWindow = !scroller;
    var ct = isWindow ? document.body : scroller.$el;
    var el = vnode.$el || vnode.elm;
    if (ct && el) {
      // if it's a list, then the listVnode.scrollDirection is undefined. just
      // assum it is the default value 'vertical'.
      var dSuffix = ({
        horizontal: 'Left',
        vertical: 'Top'
      })[scrollDirection];
      var ctRect = ct.getBoundingClientRect();
      var elRect = el.getBoundingClientRect();
      /**
        * if it's a waterfall, and you want to scroll to a header, then just
        * scroll to the top.
      */
      if (scroller && scroller.weexType === 'waterfall' && scroller._headers && scroller._headers.indexOf(vnode.$vnode || vnode) > -1) {
        // it's in waterfall. just scroll to the top.
        elRect = ct.firstElementChild.getBoundingClientRect();
      }
      var dir = dSuffix.toLowerCase();
      var offset = (isWindow ? 0 : ct[("scroll" + dSuffix)]) + elRect[dir] - ctRect[dir];
      if (options) {
        offset += options.offset && options.offset * weex.config.env.scale || 0;
        // offset *= weex.config.env.scale /* adapt offset to different screen scales. */
      }
      else {}
      if (options && options.animated === false) {
        return scrollElement.call(ct, dSuffix, offset)
      }
      step$1({
        scrollable: ct,
        startTime: now(),
        frame: null,
        startPosition: isWindow ? window.pageYOffset : ct[("scroll" + dSuffix)],
        position: offset,
        method: scrollElement,
        dSuffix: dSuffix
      });
    }
  },
  /**
   * getComponentRect
   * @param {String} vnode
   * @param {Function} callback
   */
  getComponentRect: function (vnode, callback) {
    var isArray = utils$3.isArray;
    if (isArray(vnode)) {
      vnode = vnode[0];
    }
    var scale = window.weex.config.env.scale;
    var info = {
      result: false
    };
    var rectKeys = ['width', 'height', 'top', 'bottom', 'left', 'right'];

    function recalc (rect) {
      var res = {};
      rectKeys.forEach(function (key) {
        if (rect[key]) {
          res[key] = rect[key] / scale;
        }
      });
      return res
    }
    if (vnode && vnode === 'viewport') {
      info.result = true;
      info.size = recalc({
        width: document.documentElement.clientWidth,
        height: document.documentElement.clientHeight,
        top: 0,
        left: 0,
        right: document.documentElement.clientWidth,
        bottom: document.documentElement.clientHeight
      });
      info.contentSize = recalc({
        width: document.documentElement.offsetWidth,
        height: document.documentElement.offsetHeight
      });
    }
    else if (vnode && vnode.$el) {
      info.result = true;
      info.size = recalc(vnode.$el.getBoundingClientRect());
      if (vnode.$refs.inner) {
        info.contentSize = recalc({
          width: vnode.$refs.inner.offsetWidth,
          height: vnode.$refs.inner.offsetHeight
        });
      }
      else {
        info.contentSize = recalc({
          width: vnode.$el.offsetWidth,
          height: vnode.$el.offsetHeight
        });
      }
    }
    var message = info.result ? info : {
      result: false,
      errMsg: 'Illegal parameter'
    };
    callback && callback(message);
    return message
  },
  /**
   * for adding fontFace
   * @param {string} key fontFace
   * @param {object} styles rules
   */
  addRule: function (key, styles) {
    var camelToKebab = utils$3.camelToKebab;
    var appendCss = utils$3.appendCss;
    key = camelToKebab(key);
    var stylesText = '';
    for (var k in styles) {
      if (styles.hasOwnProperty(k)) {
        stylesText += camelToKebab(k) + ':' + styles[k] + ';';
      }
    }
    var styleText = "@" + key + "{" + stylesText + "}";
    appendCss(styleText, 'dom-added-rules');
  }
};
var dom$1 = {
  init: function init (weex) {
    var extendKeys = weex.utils.extendKeys;
    extendKeys(utils$3, weex.utils, ['camelToKebab', 'appendCss', 'isArray']);
    weex.registerModule('dom', dom);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * globalEvent API:
 * @doc http://weex.apache.org/cn/references/modules/globalevent.html
 */
// track varies kinds of events and listeners.
var handlerTraker = {};

var globalEvent = {
  /**
   * addEventListener
   * NOTE: one callback can only be bound to the same event once. Bind a callback twice doesn't
   *  mean it will be called twice when the event fired once.
   * @param {string} evt - the event name to add a listener on.
   */
  addEventListener: function addEventListener (evt, callback) {
    if (!callback) {
      return
    }
    var handlers = handlerTraker[evt];
    if (!handlers) {
      handlers = handlerTraker[evt] = [];
    }
    var len = handlers.length;
    for (var i = 0; i < len; i++) {
      if (handlers[i] === callback) {
        // this callback is already bound. no need to bind it again.
        return
      }
    }
    handlers.push(callback);
    document.addEventListener(evt, callback);
  },

  /**
   * removeEventListener
   * NOTE: remove all the event handlers for the specified event type.
   * @param {string} evt - the event name to remove a listener from.
   */
  removeEventListener: function removeEventListener (evt) {
    var handlers = handlerTraker[evt];
    if (!handlers) {
      // evt handlers has been already removed.
      return
    }
    handlers.forEach(function (cb) { return document.removeEventListener(evt, cb); });
    delete handlerTraker[evt];
  }
};

var globalEvent$1 = {
  init: function init (weex) {
    weex.registerModule('globalEvent', globalEvent);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var queue$1 = [];
var isProcessing = false;
var toastWin;
var TOAST_WIN_CLASS_NAME = 'weex-toast';
var TOAST_TRANSITION_DURATION = 0.4;

var DEFAULT_DURATION = 0.8;

function showToastWindow (msg, callback) {
  if (!toastWin) {
    toastWin = document.createElement('div');
    toastWin.classList.add(TOAST_WIN_CLASS_NAME);
    toastWin.classList.add('hide');
    document.body.appendChild(toastWin);
  }
  toastWin.textContent = msg;
  setTimeout(function () {
    toastWin.classList.remove('hide');
    callback && callback();
  }, 16);
}

function hideToastWindow (callback) {
  if (!toastWin) {
    return
  }
  toastWin.classList.add('hide');
  setTimeout(function () {
    callback && callback();
  }, TOAST_TRANSITION_DURATION * 1000);
}

var toast = {
  push: function (msg, duration) {
    queue$1.push({
      msg: msg,
      duration: duration || DEFAULT_DURATION
    });
    this.show();
  },

  show: function () {
    var that = this;

    // All messages had been toasted already, so remove the toast window,
    if (!queue$1.length) {
      toastWin && toastWin.parentNode.removeChild(toastWin);
      toastWin = null;
      return
    }

    // the previous toast is not ended yet.
    if (isProcessing) {
      return
    }
    isProcessing = true;

    var toastInfo = queue$1.shift();
    showToastWindow(toastInfo.msg, function () {
      setTimeout(function () {
        hideToastWindow(function () {
          isProcessing = false;
          that.show();
        });
      }, toastInfo.duration * 1000);
    });
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// there will be only one instance of modal.
var MODAL_WRAP_CLASS = 'weex-modal-wrap';
var MODAL_NODE_CLASS = 'weex-modal-node';

function Modal () {
  this.wrap = document.querySelector(MODAL_WRAP_CLASS);
  this.node = document.querySelector(MODAL_NODE_CLASS);
  if (!this.wrap) {
    this.createWrap();
  }
  if (!this.node) {
    this.createNode();
  }
  this.clearNode();
  this.createNodeContent();
  this.bindEvents();
}

Modal.prototype = {

  show: function () {
    this.wrap.style.display = 'block';
    this.node.classList.remove('hide');
  },

  destroy: function () {
    document.body.removeChild(this.wrap);
    document.body.removeChild(this.node);
    this.wrap = null;
    this.node = null;
  },

  createWrap: function () {
    this.wrap = document.createElement('div');
    this.wrap.className = MODAL_WRAP_CLASS;
    document.body.appendChild(this.wrap);
  },

  createNode: function () {
    this.node = document.createElement('div');
    this.node.classList.add(MODAL_NODE_CLASS, 'hide');
    document.body.appendChild(this.node);
  },

  clearNode: function () {
    this.node.innerHTML = '';
  },

  createNodeContent: function () {

    // do nothing.
    // child classes can override this method.
  },

  bindEvents: function () {
    this.wrap.addEventListener('click', function (e) {
      e.preventDefault();
      e.stopPropagation();
    });
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var CONTENT_CLASS = 'content';
var MSG_CLASS = 'content-msg';
var BUTTON_GROUP_CLASS = 'btn-group';
var BUTTON_CLASS = 'btn';

function Alert (config) {
  this.msg = config.message || '';
  this.callback = config.callback;
  this.okTitle = config.okTitle || 'OK';
  Modal.call(this);
  this.node.classList.add('weex-alert');
}

Alert.prototype = Object.create(Modal.prototype);

Alert.prototype.createNodeContent = function () {
  var content = document.createElement('div');
  content.classList.add(CONTENT_CLASS);
  this.node.appendChild(content);

  var msg = document.createElement('div');
  msg.classList.add(MSG_CLASS);
  msg.appendChild(document.createTextNode(this.msg));
  content.appendChild(msg);

  var buttonGroup = document.createElement('div');
  buttonGroup.classList.add(BUTTON_GROUP_CLASS);
  this.node.appendChild(buttonGroup);
  var button = document.createElement('div');
  button.classList.add(BUTTON_CLASS, 'alert-ok');
  button.appendChild(document.createTextNode(this.okTitle));
  buttonGroup.appendChild(button);
};

Alert.prototype.bindEvents = function () {
  Modal.prototype.bindEvents.call(this);
  var button = this.node.querySelector('.' + BUTTON_CLASS);
  button.addEventListener('click', function () {
    this.destroy();
    this.callback && this.callback();
  }.bind(this));
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var CONTENT_CLASS$1 = 'content';
var MSG_CLASS$1 = 'content-msg';
var BUTTON_GROUP_CLASS$1 = 'btn-group';
var BUTTON_CLASS$1 = 'btn';

function Confirm (config) {
  this.msg = config.message || '';
  this.callback = config.callback;
  this.okTitle = config.okTitle || 'OK';
  this.cancelTitle = config.cancelTitle || 'Cancel';
  Modal.call(this);
  this.node.classList.add('weex-confirm');
}

Confirm.prototype = Object.create(Modal.prototype);

Confirm.prototype.createNodeContent = function () {
  var content = document.createElement('div');
  content.classList.add(CONTENT_CLASS$1);
  this.node.appendChild(content);

  var msg = document.createElement('div');
  msg.classList.add(MSG_CLASS$1);
  msg.appendChild(document.createTextNode(this.msg));
  content.appendChild(msg);

  var buttonGroup = document.createElement('div');
  buttonGroup.classList.add(BUTTON_GROUP_CLASS$1);
  this.node.appendChild(buttonGroup);
  var btnOk = document.createElement('div');
  btnOk.appendChild(document.createTextNode(this.okTitle));
  btnOk.classList.add('btn-ok', BUTTON_CLASS$1);
  var btnCancel = document.createElement('div');
  btnCancel.appendChild(document.createTextNode(this.cancelTitle));
  btnCancel.classList.add('btn-cancel', BUTTON_CLASS$1);
  buttonGroup.appendChild(btnOk);
  buttonGroup.appendChild(btnCancel);
  this.node.appendChild(buttonGroup);
};

Confirm.prototype.bindEvents = function () {
  Modal.prototype.bindEvents.call(this);
  var btnOk = this.node.querySelector('.' + BUTTON_CLASS$1 + '.btn-ok');
  var btnCancel = this.node.querySelector('.' + BUTTON_CLASS$1 + '.btn-cancel');
  btnOk.addEventListener('click', function () {
    this.destroy();
    this.callback && this.callback(this.okTitle);
  }.bind(this));
  btnCancel.addEventListener('click', function () {
    this.destroy();
    this.callback && this.callback(this.cancelTitle);
  }.bind(this));
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var CONTENT_CLASS$2 = 'content';
var MSG_CLASS$2 = 'content-msg';
var BUTTON_GROUP_CLASS$2 = 'btn-group';
var BUTTON_CLASS$2 = 'btn';
var INPUT_WRAP_CLASS = 'input-wrap';
var INPUT_CLASS = 'input';

function Prompt (config) {
  this.msg = config.message || '';
  this.defaultMsg = config.default || '';
  this.callback = config.callback;
  this.okTitle = config.okTitle || 'OK';
  this.cancelTitle = config.cancelTitle || 'Cancel';
  Modal.call(this);
  this.node.classList.add('weex-prompt');
}

Prompt.prototype = Object.create(Modal.prototype);

Prompt.prototype.createNodeContent = function () {
  var content = document.createElement('div');
  content.classList.add(CONTENT_CLASS$2);
  this.node.appendChild(content);

  var msg = document.createElement('div');
  msg.classList.add(MSG_CLASS$2);
  msg.appendChild(document.createTextNode(this.msg));
  content.appendChild(msg);

  var inputWrap = document.createElement('div');
  inputWrap.classList.add(INPUT_WRAP_CLASS);
  content.appendChild(inputWrap);
  var input = document.createElement('input');
  input.classList.add(INPUT_CLASS);
  input.type = 'text';
  input.autofocus = true;
  input.placeholder = this.defaultMsg;
  inputWrap.appendChild(input);

  var buttonGroup = document.createElement('div');
  buttonGroup.classList.add(BUTTON_GROUP_CLASS$2);
  var btnOk = document.createElement('div');
  btnOk.appendChild(document.createTextNode(this.okTitle));
  btnOk.classList.add('btn-ok', BUTTON_CLASS$2);
  var btnCancel = document.createElement('div');
  btnCancel.appendChild(document.createTextNode(this.cancelTitle));
  btnCancel.classList.add('btn-cancel', BUTTON_CLASS$2);
  buttonGroup.appendChild(btnOk);
  buttonGroup.appendChild(btnCancel);
  this.node.appendChild(buttonGroup);
};

Prompt.prototype.bindEvents = function () {
  Modal.prototype.bindEvents.call(this);
  var btnOk = this.node.querySelector('.' + BUTTON_CLASS$2 + '.btn-ok');
  var btnCancel = this.node.querySelector('.' + BUTTON_CLASS$2 + '.btn-cancel');
  var that = this;
  btnOk.addEventListener('click', function () {
    var val = document.querySelector('input').value;
    this.destroy();
    this.callback && this.callback({
      result: that.okTitle,
      data: val
    });
  }.bind(this));
  btnCancel.addEventListener('click', function () {
    var val = document.querySelector('input').value;
    this.destroy();
    this.callback && this.callback({
      result: that.cancelTitle,
      data: val
    });
  }.bind(this));
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
var _css$10 = "\n.weex-toast {\n  font-size: 0.426667rem;\n  line-height: 0.426667rem;\n  position: fixed;\n  z-index: 1999999999;\n  box-sizing: border-box;\n  max-width: 80%;\n  bottom: 50%;\n  left: 50%;\n  padding: 0.213333rem;\n  background-color: #000;\n  color: #fff;\n  text-align: center;\n  opacity: 0.7;\n  -webkit-transition: all 0.4s ease-in-out;\n  -moz-transition: all 0.4s ease-in-out;\n  -ms-transition: all 0.4s ease-in-out;\n  transition: all 0.4s ease-in-out;\n  border-radius: 0.066667rem;\n  -webkit-transform: translateX(-50%);\n  -moz-transform: translateX(-50%);\n  -ms-transform: translateX(-50%);\n  transform: translateX(-50%);\n}\n\n.weex-toast.hide {\n  opacity: 0;\n}\n\n.weex-alert .weex-alert-ok {\n  width: 100%;\n}\n\n.weex-confirm .btn-group .btn {\n  float: left;\n  width: 50%;\n}\n\n.weex-confirm .btn-group .btn.btn-ok {\n  border-right: 0.013333rem solid #ddd;\n}\n\n.weex-modal-wrap {\n  display: none;\n  position: fixed;\n  z-index: 999999999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: #000;\n  opacity: 0.5;\n}\n\n.weex-modal-node {\n  position: fixed;\n  z-index: 9999999999;\n  top: 50%;\n  left: 50%;\n  width: 6.666667rem;\n  min-height: 2.666667rem;\n  border-radius: 0.066667rem;\n  -webkit-transform: translate(-50%, -50%);\n  -moz-transform: translate(-50%, -50%);\n  -ms-transform: translate(-50%, -50%);\n  transform: translate(-50%, -50%);\n  background-color: #fff;\n}\n\n.weex-modal-node.hide {\n  display: none;\n}\n\n.weex-modal-node .content {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -moz-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-flex-direction: column;\n  -moz-box-orient: vertical;\n  -moz-box-direction: normal;\n  -ms-flex-direction: column;\n      flex-direction: column;\n  -webkit-box-align: center;\n  -webkit-align-items: center;\n  -ms-flex-align: center;\n  -moz-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n  -webkit-box-pack: center;\n  -webkit-justify-content: center;\n  -moz-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 100%;\n  min-height: 1.866667rem;\n  box-sizing: border-box;\n  font-size: 0.426667rem;\n  line-height: 0.426667rem;\n  padding: 0.213333rem;\n  border-bottom: 0.013333rem solid #ddd;\n}\n\n.weex-modal-node .btn-group {\n  width: 100%;\n  height: 0.8rem;\n  font-size: 0.373333rem;\n  text-align: center;\n  margin: 0;\n  padding: 0;\n  border: none;\n}\n\n.weex-modal-node .btn-group .btn {\n  text-align: center;\n}\n\n.weex-modal-node .btn-group .btn {\n  box-sizing: border-box;\n  height: 0.8rem;\n  line-height: 0.8rem;\n  margin: 0;\n  padding: 0;\n  border: none;\n  background: none;\n  text-align: center;\n}\n\n.weex-prompt .input-wrap {\n  box-sizing: border-box;\n  width: 100%;\n  margin-top: 0.133333rem;\n  height: 0.96rem;\n}\n\n.weex-prompt .input-wrap .input {\n  box-sizing: border-box;\n  width: 100%;\n  height: 0.56rem;\n  line-height: 0.56rem;\n  font-size: 0.426667rem;\n  border: 0.013333rem solid #999;\n}\n\n.weex-prompt .btn-group .btn {\n  float: left;\n  width: 50%;\n}\n\n.weex-prompt .btn-group .btn.btn-ok {\n  border-right: 0.013333rem solid #ddd;\n}\n";

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// TODO: rewrite the modal styles
var modal = {

  // duration: default is 0.8 seconds.
  toast: function (config) {
    toast.push(config.message, config.duration);
  },

  // config:
  //  - message: string
  //  - okTitle: title of ok button
  //  - callback
  alert: function (config, callback) {
    config.callback = function () {
      callback && callback();
    };
    new Alert(config).show();
  },

  // config:
  //  - message: string
  //  - okTitle: title of ok button
  //  - cancelTitle: title of cancel button
  //  - callback
  confirm: function (config, callback) {
    config.callback = function (val) {
      callback && callback(val);
    };
    new Confirm(config).show();
  },

  // config:
  //  - message: string
  //  - okTitle: title of ok button
  //  - cancelTitle: title of cancel button
  //  - callback
  prompt: function (config, callback) {
    config.callback = function (val) {
      callback && callback(val);
    };
    new Prompt(config).show();
  }
};

var modal$1 = {
  init: function (Weex) {
    Weex.utils.appendCss(_css$10, 'weex-mud-modal');
    Weex.registerModule('modal', modal);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Navigator module
 */
var navigatorModule = {
  push: function (config, callback) {
    window.location.href = config.url;
    callback && callback();
  },

  pop: function (config, callback) {
    window.history.back();
    callback && callback();
  }
};

var navigatorModule$1 = {
  init: function init (weex) {
    weex.registerModule('navigator', navigatorModule);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Webview module
 */
var isArray$2;

var webview = {
  goBack: function goBack (vnode) {
    if (isArray$2(vnode)) {
      vnode = vnode[0];
    }
    if (vnode && typeof vnode.goBack === 'function') {
      vnode.goBack();
    }
  },
  goForward: function goForward (vnode) {
    if (isArray$2(vnode)) {
      vnode = vnode[0];
    }
    if (vnode && typeof vnode.goForward === 'function') {
      vnode.goForward();
    }
  },
  reload: function reload (vnode) {
    if (isArray$2(vnode)) {
      vnode = vnode[0];
    }
    if (vnode && typeof vnode.reload === 'function') {
      vnode.reload();
    }
  }
};

var webview$1 = {
  init: function init (weex) {
    isArray$2 = weex.utils.isArray;
    weex.registerModule('webview', webview);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
/**
 * websocket module
 */
/*global WebSocket*/
var websocket$1 = (function () {
  var registerListeners = ['onopen', 'onmessage', 'onerror', 'onclose'];
  var ws = {
    INSTANCE: null,
    WebSocket: function (url, protocol) {
      if (!url) {
        ws.INSTANCE = null;
        return
      }
      if (!protocol) {
        ws.INSTANCE = new WebSocket(url);
      }
      else {
        ws.INSTANCE = new WebSocket(url, protocol);
      }
      return ws.INSTANCE
    },
    send: function (messages) {
      ws.INSTANCE && ws.INSTANCE.send(messages);
    },
    close: function () {
      ws.INSTANCE && ws.INSTANCE.close();
    }
  };
  var loop = function ( i ) {
    if (registerListeners.hasOwnProperty(i)) {
      Object.defineProperty(ws, registerListeners[i], {
        get: function () {
          return ws.INSTANCE && ws.INSTANCE[registerListeners[i]]
        },
        set: function (fn) {
          if (ws.INSTANCE) {
            ws.INSTANCE[registerListeners[i]] = fn;
          }
        }
      });
    }
  };

  for (var i in registerListeners) loop( i );
  return ws
})();

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
// TODO: rewrite the module meta
var websocket = {
  init: function (Weex) {
    Weex.registerModule('webSocket', websocket$1, { mountType: 'full' });
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

var meta$5 = {
  /**
   * setViewport
   * Changing viewport width at runtime is not supported. Please use weex-viewport meta
   * tag to specify your viewport in your html file.
   */
  setViewport: function setViewport (options) {
    console.warn("[vue-render] meta.setViewport doesn't works as expected in web platform."
    + " Please use <meta name=\"weex-viewport\" content=\"xxx\"> to specify your viewport width.");
  }
};

var meta$6 = {
  init: function init (weex) {
    weex.registerModule('meta', meta$5);
  }
};

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// modules from render/browesr (legacy modules)

// custom modules
var modules$1 = [
  geolocation$1,
  storage$1,
  stream$1,
  clipboard$1,
  eventModule,
  modal$1,
  websocket,
  animation$1,
  dom$1,
  globalEvent$1,
  navigatorModule$1,
  webview$1,
  meta$6
];

var preInit = weex.init;

weex.init = function () {
  preInit.apply(weex, arguments);
  var plugins = components.concat(modules$1);

  plugins.forEach(function (plugin) {
    weex.install(plugin);
  });
};

if (global.Vue) {
  weex.init(global.Vue);
}

module.exports = weex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNjE1ZDg1ZTQ4YzBkZTc0YWVlMTEiLCJ3ZWJwYWNrOi8vLy4vcGx1Z2lucy9wbHVnaW5JbnN0YWxsLmpzIiwid2VicGFjazovLy8uL3BsdWdpbnMvd2ViL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9wbHVnaW5zL3dlYi9oZWxsby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvX3dlZXgtdnVlLXJlbmRlckAwLjEyLjI1QHdlZXgtdnVlLXJlbmRlci9kaXN0L2luZGV4LmNvbW1vbi5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIl0sIm5hbWVzIjpbImluc3RhbGwiLCJ3ZWV4dGVzdCIsInNldFRpdGxlIiwidGl0bGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJlIiwiZG9jdW1lbnQiLCJsb2ciLCJwYXJhbSIsImNvbnNvbGUiLCJ3ZWV4IiwicmVxdWlyZU1vZHVsZSIsInRvYXN0IiwibWVzc2FnZSIsIm1ldGEiLCJuYW1lIiwiYXJncyIsImluaXQiLCJXZWV4IiwicmVnaXN0ZXJBcGlNb2R1bGUiLCJfY3NzIiwiZ2V0RGl2IiwiZXh0cmFjdENvbXBvbmVudFN0eWxlIiwidHJpbVRleHRWTm9kZXMiLCJyZW5kZXIiLCJjcmVhdGVFbGVtZW50IiwiYXR0cnMiLCJzdGF0aWNDbGFzcyIsInN0YXRpY1N0eWxlIiwiJHNsb3RzIiwiZGVmYXVsdCIsImRpdiIsInJlZ2lzdGVyQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDNURBOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7O0FBRUE7QUFDQTtBQUNBLHdCQUFPQSxPQUFQO0FBQ0Esc0I7Ozs7Ozs7Ozs7Ozs7QUNSQSxJQUFNQyxXQUFXOztBQUVYQyxZQUFVLGtCQUFVQyxLQUFWLEVBQWlCO0FBQ3pCQSxZQUFRQSxTQUFTLFlBQWpCO0FBQ0EsUUFBSTtBQUNGQSxjQUFRQyxtQkFBbUJELEtBQW5CLENBQVI7QUFDRCxLQUZELENBR0EsT0FBT0UsQ0FBUCxFQUFVLENBQUU7QUFDWkMsYUFBU0gsS0FBVCxHQUFpQkEsS0FBakI7QUFDRCxHQVRVO0FBVVhJLEtBVlcsZUFVUEMsS0FWTyxFQVVEO0FBQ1JDLFlBQVFGLEdBQVIsQ0FBWUMsS0FBWjtBQUNBRSxTQUFLQyxhQUFMLENBQW1CLE9BQW5CLEVBQTRCQyxLQUE1QixDQUFrQyxFQUFDQyxTQUFRTCxLQUFULEVBQWxDO0FBQ0Q7QUFiVSxDQUFqQjs7QUFnQkEsSUFBTU0sT0FBTztBQUNQYixZQUFVLENBQUM7QUFDVGMsVUFBTSxVQURHO0FBRVRDLFVBQU0sQ0FBQyxRQUFEO0FBRkcsR0FBRDtBQURILENBQWI7O0FBT0EsSUFBTUMsT0FBTyxTQUFQQSxJQUFPLENBQVNDLElBQVQsRUFBYztBQUN2QkEsT0FBS0MsaUJBQUwsQ0FBdUIsVUFBdkIsRUFBbUNsQixRQUFuQyxFQUE2Q2EsSUFBN0M7QUFDSCxDQUZEOztrQkFJZTtBQUNiRztBQURhLEM7Ozs7Ozs7Ozs7OztBQzVCZixJQUFNRyx1REFBTjs7QUFNQSxTQUFTQyxNQUFULENBQWlCWCxJQUFqQixFQUF1QjtBQUFBLE1BRW5CWSxxQkFGbUIsR0FJakJaLElBSmlCLENBRW5CWSxxQkFGbUI7QUFBQSxNQUduQkMsY0FIbUIsR0FJakJiLElBSmlCLENBR25CYSxjQUhtQjs7O0FBTXJCLFNBQU87QUFDTFIsVUFBTSxVQUREO0FBRUxTLFVBRkssa0JBRUdDLGFBRkgsRUFFa0I7QUFDckIsYUFBT0EsY0FBYyxVQUFkLEVBQTBCO0FBQy9CQyxlQUFPLEVBQUUsYUFBYSxLQUFmLEVBRHdCO0FBRS9CQyxxQkFBYSxrQkFGa0I7QUFHL0JDLHFCQUFhTixzQkFBc0IsSUFBdEI7QUFIa0IsT0FBMUIsRUFJSkMsZUFBZSxLQUFLTSxNQUFMLENBQVlDLE9BQTNCLENBSkksQ0FBUDtBQUtELEtBUkk7O0FBU0xWO0FBVEssR0FBUDtBQVdEOztrQkFFYztBQUNiSCxNQURhLGdCQUNQUCxJQURPLEVBQ0Q7QUFDVixRQUFNcUIsTUFBTVYsT0FBT1gsSUFBUCxDQUFaO0FBQ0FBLFNBQUtzQixpQkFBTCxDQUF1QixLQUF2QixFQUE4QkQsR0FBOUI7QUFDQXJCLFNBQUtzQixpQkFBTCxDQUF1QixXQUF2QixFQUFvQ0QsR0FBcEM7QUFDRDtBQUxZLEM7Ozs7Ozs7QUN4QmY7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbVZBQW1WLHloQkFBeWhCLG1CQUFtQixvQkFBb0IsdUJBQXVCLGtCQUFrQix5QkFBeUIsdUJBQXVCLHdCQUF3QiwwQkFBMEIseUJBQXlCLHlCQUF5Qix3QkFBd0IseUJBQXlCLHdCQUF3Qix5QkFBeUIsMEJBQTBCLHVHQUF1RyxHQUFHLDRFQUE0RSwyQkFBMkIsbUNBQW1DLGdDQUFnQywrQkFBK0IsMkJBQTJCLEdBQUcscUpBQXFKLG1DQUFtQyxtQ0FBbUMsR0FBRyxrRUFBa0UsY0FBYyxlQUFlLEdBQUcsbUJBQW1CLHFCQUFxQixHQUFHLHVCQUF1QixjQUFjLEdBQUcseUJBQXlCLGlCQUFpQixHQUFHLG9EQUFvRCxrQkFBa0IsR0FBRzs7QUFFdGlFLG1WQUFtViw0Z0JBQTRnQixvQkFBb0IsMEJBQTBCLHdCQUF3QixHQUFHLG1CQUFtQix5QkFBeUIsMEJBQTBCLHNCQUFzQix5QkFBeUIsa0JBQWtCLEdBQUcsY0FBYywyQkFBMkIseUJBQXlCLDBCQUEwQixzQkFBc0IseUJBQXlCLGtCQUFrQix1QkFBdUIsaUNBQWlDLG1DQUFtQyw4QkFBOEIsK0JBQStCLCtCQUErQiwyQkFBMkIsMkJBQTJCLHlCQUF5QixtQkFBbUIseUJBQXlCLHFCQUFxQixxQkFBcUIsaUJBQWlCLDZCQUE2QixrQ0FBa0MscUJBQXFCLCtCQUErQixpQ0FBaUMsNEJBQTRCLDRCQUE0Qix5QkFBeUIsc0NBQXNDLDhCQUE4Qiw4QkFBOEIsMEJBQTBCLGNBQWMsZUFBZSxpQkFBaUIsR0FBRyx5QkFBeUIsbUNBQW1DLGdDQUFnQyxnQ0FBZ0MsK0JBQStCLDRCQUE0Qix3QkFBd0IsR0FBRyxjQUFjLG1CQUFtQiwyQkFBMkIsdUJBQXVCLDJCQUEyQix5QkFBeUIsbUJBQW1CLHlCQUF5QixxQkFBcUIscUJBQXFCLGlCQUFpQiw2QkFBNkIsa0NBQWtDLHFCQUFxQiwwQkFBMEIsY0FBYyxlQUFlLGlCQUFpQixHQUFHLHNCQUFzQix3Q0FBd0MsZ0NBQWdDLGtCQUFrQixXQUFXLEdBQUcsaUJBQWlCLG9CQUFvQixlQUFlLEdBQUcsa0JBQWtCLG9CQUFvQixXQUFXLGtCQUFrQixHQUFHOztBQUV4eUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLFlBQVksUUFBUTtBQUNwQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsWUFBWSxPQUFPO0FBQ25CLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZLE9BQU87QUFDbkIsWUFBWSxPQUFPO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZLE9BQU87QUFDbkIsWUFBWSxPQUFPO0FBQ25CLFlBQVksT0FBTztBQUNuQixZQUFZLE9BQU87QUFDbkIsWUFBWSxPQUFPO0FBQ25CLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixpQ0FBaUM7QUFDbEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0EsaUJBQWlCLGlDQUFpQztBQUNsRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1CQUFtQiwwQkFBMEI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE1BQU07QUFDbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBLGlCQUFpQixpQ0FBaUM7QUFDbEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxpQkFBaUIsaUNBQWlDO0FBQ2xEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDJEQUEyRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLFlBQVksRUFBRTtBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsY0FBYyxFQUFFO0FBQzdDLENBQUM7O0FBRUQ7QUFDQSw2QkFBNkI7QUFDN0IsNkJBQTZCLFlBQVksRUFBRTtBQUMzQyxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQXNCLDRDQUE0QztBQUNsRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxRQUFRLG1CQUFtQixVQUFVLEVBQUUsRUFBRTtBQUMxRSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0RBQXdELG1CQUFtQixVQUFVLEVBQUUsRUFBRTtBQUN6RixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsV0FBVztBQUNuQztBQUNBLHVGQUF1RixZQUFZO0FBQ25HLGlGQUFpRixZQUFZO0FBQzdGLHdGQUF3RixZQUFZO0FBQ3BHO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSxHQUFHLFlBQVksY0FBYztBQUM3QixtREFBbUQsNkNBQTZDO0FBQ2hHLDhCQUE4Qix5QkFBeUI7QUFDdkQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsNENBQTRDO0FBQy9ELHVCQUF1QixRQUFRO0FBQy9CLG1CQUFtQiwrRUFBK0U7QUFDbEc7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRCxDQUFDOztBQUVEO0FBQ0EsZ0NBQWdDLDZDQUE2QztBQUM3RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFdBQVc7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RkFBd0YseUJBQXlCO0FBQ2pILGlFQUFpRTtBQUNqRSwrREFBK0Q7QUFDL0Q7QUFDQSxrQkFBa0IsZUFBZTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdEQUFnRDtBQUNqRTtBQUNBLDhCQUE4Qix5QkFBeUI7QUFDdkQsMkNBQTJDLHFCQUFxQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQixnQkFBZ0I7QUFDaEIsZ0JBQWdCO0FBQ2hCLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakIsaUJBQWlCO0FBQ2pCLGlCQUFpQjtBQUNqQixrQkFBa0I7QUFDbEI7O0FBRUEsbUJBQW1COztBQUVuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsZ0RBQWdEO0FBQ3hFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRDtBQUMzRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0EsMkJBQTJCLGFBQWE7QUFDeEM7QUFDQSxLQUFLLEVBQUUsT0FBTyxPQUFPLGVBQWUsV0FBVztBQUMvQyw0QkFBNEIsa0NBQWtDO0FBQzlELEtBQUssRUFBRSxFQUFFO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0EsdUNBQXVDO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1QkFBdUIsaUNBQWlDLEVBQUU7QUFDNUU7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsVUFBVSxFQUFFO0FBQ2hELG1CQUFtQixzQ0FBc0M7QUFDekQsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVDQUF1QyxpQkFBaUIsRUFBRTtBQUNsRixHQUFHO0FBQ0gsQ0FBQzs7QUFFRDtBQUNBOztBQUVBLDBDQUEwQyx3QkFBd0I7O0FBRWxFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsS0FBSztBQUNMO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsU0FBUyxnQkFBZ0I7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGtCQUFrQixFQUFFOztBQUVqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsWUFBWTtBQUNmOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG1DQUFtQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQix5Q0FBeUM7QUFDL0Q7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtEQUFrRDtBQUNqRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLE9BQU8sdUJBQXVCO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMkRBQTJELGlCQUFpQixpQ0FBaUMsRUFBRTtBQUMvRzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdEQUF3RCxhQUFhLEVBQUU7O0FBRXZFO0FBQ0EsdURBQXVELDRCQUE0QjtBQUNuRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZCQUE2QixzQkFBc0I7QUFDbkQ7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7O0FBRUEsOEJBQThCLGFBQWE7O0FBRTNDO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxvQkFBb0I7QUFDdEQ7QUFDQSx5Q0FBeUMsb0NBQW9DO0FBQzdFLDZDQUE2QyxvQ0FBb0M7QUFDakYsS0FBSyw0QkFBNEIsb0NBQW9DO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsaURBQWlEO0FBQzdHO0FBQ0E7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7QUFDQSxrQ0FBa0MsMkJBQTJCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsNEJBQTRCLHNDQUFzQztBQUNsRSxLQUFLLEVBQUUsT0FBTyw2RUFBNkU7QUFDM0Y7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IsY0FBYztBQUNkO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixTQUFTLGdDQUFnQztBQUNuRTtBQUNBO0FBQ0EsVUFBVTtBQUNWLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGtDQUFrQyxFQUFFO0FBQy9FO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDLGNBQWM7QUFDZCxpQkFBaUI7QUFDakI7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsdUJBQXVCO0FBQzlDLHlCQUF5QiwwQkFBMEI7QUFDbkQ7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzREFBc0Qsd0JBQXdCO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2Qix3Q0FBd0M7QUFDckUsZ0NBQWdDLG9DQUFvQztBQUNwRTtBQUNBLG1CQUFtQiwwQkFBMEIsbUJBQW1CLCtDQUErQyxFQUFFLEVBQUU7QUFDbkg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsNEJBQTRCLGdDQUFnQztBQUM1RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0Esa0NBQWtDO0FBQ2xDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGlCQUFpQixFQUFFO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxpREFBaUQ7QUFDckY7QUFDQSw0QkFBNEIseUNBQXlDLGdCQUFnQjtBQUNyRjtBQUNBLGdEQUFnRCxlQUFlO0FBQy9ELEdBQUcsRUFBRSxPQUFPLHVDQUF1QyxnQ0FBZ0M7QUFDbkY7QUFDQSxnREFBZ0QsZUFBZTtBQUMvRCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQ0FBa0MsNkJBQTZCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esa0RBQWtELGVBQWU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxtQkFBbUIsVUFBVTtBQUM3QixjQUFjLGtCQUFrQjtBQUNoQztBQUNBO0FBQ0EsS0FBSztBQUNMLGlCQUFpQixnQkFBZ0I7QUFDakM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSx1Q0FBdUMsc0JBQXNCLEVBQUU7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQjtBQUNoQixlQUFlLGtCQUFrQjtBQUNqQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RCw0Q0FBNEM7QUFDcEc7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLEdBQUc7QUFDSCxZQUFZO0FBQ1o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDZDQUE2QyxVQUFVO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3Qix5Q0FBeUM7QUFDakU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0Esc0JBQXNCLGFBQWE7QUFDbkMsR0FBRyxFQUFFO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaUNBQWlDLHFCQUFxQjtBQUN0RDtBQUNBLGlDQUFpQyxTQUFTLEVBQUU7QUFDNUMsQ0FBQyxZQUFZOztBQUViO0FBQ0Esc0NBQXNDLGNBQWM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsU0FBUyxxQkFBcUI7QUFDM0QsbUNBQW1DLGFBQWE7QUFDaEQ7QUFDQSxHQUFHLFlBQVk7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsWUFBWTtBQUNmLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLDRCQUE0QjtBQUM5RDtBQUNBO0FBQ0EsaUNBQWlDLGdCQUFnQjtBQUNqRDtBQUNBLHlCQUF5QixnQkFBZ0I7QUFDekM7QUFDQSx5QkFBeUIsZUFBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXLE9BQU8saUJBQWlCO0FBQ25DLFNBQVMsT0FBTyxlQUFlO0FBQy9CLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsaUJBQWlCLEVBQUU7QUFDakQ7QUFDQTtBQUNBLGtDQUFrQyxzQkFBc0I7QUFDeEQsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULG1CQUFtQixrQ0FBa0M7QUFDckQsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTCxnQ0FBZ0MsZ0JBQWdCO0FBQ2hELEdBQUc7QUFDSDtBQUNBO0FBQ0Esd0JBQXdCLGNBQWM7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxjQUFjO0FBQ3hFLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsZUFBZSx1Q0FBdUM7QUFDdEQ7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0I7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBLG9CQUFvQixpQ0FBaUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixRQUFRO0FBQzNCO0FBQ0Esa0NBQWtDO0FBQ2xDO0FBQ0EsNEJBQTRCLHVEQUF1RDtBQUNuRjtBQUNBO0FBQ0EsdUJBQXVCLDBCQUEwQjtBQUNqRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILGtCQUFrQix5QkFBeUIsS0FBSztBQUNoRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLHdCQUF3QjtBQUN4QixnQkFBZ0I7QUFDaEIsb0JBQW9CO0FBQ3BCLHdCQUF3QjtBQUN4QixnQkFBZ0I7QUFDaEIsb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix3QkFBd0I7QUFDNUMsb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0VBQWtFLG9CQUFvQjtBQUN0RjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixRQUFRO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0wsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTCxtQkFBbUIsa0JBQWtCO0FBQ3JDO0FBQ0E7QUFDQSxDQUFDOztBQUVELDBDQUEwQzs7QUFFMUM7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLFFBQVE7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsWUFBWSxPQUFPO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0NBQWdDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVksZ0JBQWdCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDO0FBQzFDLHdDQUF3Qzs7QUFFeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIscUJBQXFCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQ0FBMEM7QUFDMUMsc0NBQXNDOztBQUV0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsZ0JBQWdCO0FBQ2hDLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQixZQUFZO0FBQzVCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxFQUFFO0FBQ2IsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEIsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHdCQUF3QixFQUFFO0FBQzVFLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDJCQUEyQixFQUFFO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0JBQWtCLGNBQWM7QUFDaEMsMEJBQTBCLE1BQU07QUFDaEMsMEJBQTBCLE1BQU07QUFDaEMsMEJBQTBCLE1BQU07QUFDaEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtDQUFrQztBQUNsQztBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCOztBQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHNCQUFzQixVQUFVLGlCQUFpQjtBQUNqRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBLCtCQUErQixnQkFBZ0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQkFBc0IsVUFBVSxpQkFBaUI7QUFDakQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQkFBc0IsVUFBVSx5QkFBeUI7QUFDekQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCLFlBQVksTUFBTTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFlBQVk7QUFDeEIsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsU0FBUztBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCLFdBQVcsUUFBUTtBQUNuQixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHFDQUFxQyx5QkFBeUIsRUFBRTtBQUNoRTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsbUNBQW1DLGFBQWE7QUFDaEQsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTs7QUFFQSxzQ0FBc0MsdUNBQXVDLGdCQUFnQjs7QUFFN0Y7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSx1Q0FBdUMsU0FBUztBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3Q0FBd0MsU0FBUztBQUNqRDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBLHNDQUFzQyx1Q0FBdUMsZ0JBQWdCOztBQUU3RjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBLDJDQUEyQyxTQUFTO0FBQ3BEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7O0FBRUE7O0FBRUE7O0FBRUEsc0NBQXNDLHVDQUF1QyxnQkFBZ0I7O0FBRTdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTs7QUFFQSxzQ0FBc0MsdUNBQXVDLGdCQUFnQjs7QUFFN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBOztBQUVBOztBQUVBLHNDQUFzQyx1Q0FBdUMsZ0JBQWdCOztBQUU3Rjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTs7QUFFQSxzQ0FBc0MsdUNBQXVDLGdCQUFnQjs7QUFFN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTs7QUFFQSxzQ0FBc0MsdUNBQXVDLGdCQUFnQjs7QUFFN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxzQ0FBc0MsdUNBQXVDLGdCQUFnQjs7QUFFN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLDhDQUE4QyxTQUFTO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQ0FBK0MsVUFBVTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsc0NBQXNDLHVDQUF1QyxnQkFBZ0I7O0FBRTdGOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxnQkFBZ0I7QUFDbEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9EQUFvRDtBQUNwRDtBQUNBO0FBQ0EsZUFBZTtBQUNmLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJEQUEyRDtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUssSUFBSTtBQUNUO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QixXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBLDZCQUE2QixFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUU7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFlBQVksYUFBYTtBQUN0RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSCxpQkFBaUI7QUFDakI7O0FBRUE7QUFDQSxlQUFlO0FBQ2YsZUFBZTtBQUNmLGlCQUFpQjtBQUNqQix1QkFBdUI7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLGlDQUFpQzs7QUFFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QjtBQUN4QixDQUFDOztBQUVELENBQUM7QUFDRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEY7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixZQUFZO0FBQ3ZDLGtDQUFrQyxjQUFjO0FBQ2hELDJDQUEyQyxZQUFZO0FBQ3ZEO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0I7QUFDQTtBQUNBLCtFQUErRSxHQUFHO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsaUJBQWlCLEVBQUU7QUFDOUUsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQTtBQUNBO0FBQ0EscUVBQXFFLG9CQUFvQixFQUFFO0FBQzNGO0FBQ0E7QUFDQTtBQUNBLFdBQVcsSUFBSTtBQUNmO0FBQ0E7QUFDQSxtRUFBbUU7QUFDbkUsV0FBVztBQUNYLGtDQUFrQyxZQUFZO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssR0FBRyxZQUFZO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsaUJBQWlCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCw2QkFBNkIsaUJBQWlCO0FBQzlDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVksTUFBTTtBQUNsQixZQUFZLE1BQU07QUFDbEI7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLG9CQUFvQixFQUFFO0FBQ2pFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE1BQU07QUFDakIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEIsV0FBVyxlQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCLFlBQVksbUJBQW1CO0FBQy9CLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCLFdBQVcsT0FBTztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdCQUFnQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkJBQTJCLFNBQVM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsOEVBQThFO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQyxnQkFBZ0I7QUFDaEI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2Q0FBNkMsNEJBQTRCO0FBQ3pFLG9EQUFvRCxtQ0FBbUM7O0FBRXZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7O0FBRTVCLHVCQUF1QiwwQkFBMEIsR0FBRzs7QUFFcEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQ0FBa0MscUJBQXFCLEdBQUc7O0FBRTFEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQkFBcUI7QUFDckM7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLHdDQUF3QyxpQ0FBaUMsaUNBQWlDLEdBQUc7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxHQUFHO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGlCQUFpQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDZDQUE2QywyQkFBMkIsR0FBRywyQ0FBMkMsa0JBQWtCLEdBQUc7O0FBRTNJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsZ0NBQWdDO0FBQzlGLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOEJBQThCLHNDQUFzQyxvQkFBb0IsMEJBQTBCLHVCQUF1QiwyQkFBMkIsOEJBQThCLDJCQUEyQiwwQkFBMEIsc0JBQXNCLDRCQUE0QixpQ0FBaUMsbUJBQW1CLHVCQUF1QixtQkFBbUIsNEJBQTRCLDBCQUEwQixzQ0FBc0MsMEJBQTBCLDRFQUE0RSx5RUFBeUUsb0VBQW9FLEdBQUcsMEJBQTBCLDhCQUE4QiwwQkFBMEIsZ0RBQWdELEdBQUcsK0NBQStDLDhCQUE4QixnREFBZ0QsR0FBRywyQkFBMkIsOEJBQThCLEdBQUcsd0JBQXdCLGtCQUFrQixtQkFBbUIscUJBQXFCLHdCQUF3Qix5REFBeUQsdUJBQXVCLFdBQVcsWUFBWSx5REFBeUQsc0RBQXNELGlEQUFpRCxHQUFHLCtDQUErQyxzQkFBc0IsR0FBRzs7QUFFdDlDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx3QkFBd0I7QUFDeEQ7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdCQUF3QjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPLDJCQUEyQixtQ0FBbUM7QUFDckUsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCOztBQUVyQjtBQUNBLHVCQUF1QjtBQUN2Qjs7QUFFQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbURBQW1ELHdCQUF3QixFQUFFOztBQUU3RTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLGNBQWM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUdBQXFHLFlBQVk7QUFDakg7QUFDQSx1QkFBdUIsU0FBUztBQUNoQywyREFBMkQ7QUFDM0Q7QUFDQTtBQUNBLHlCQUF5QixpQkFBaUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVCQUF1QixlQUFlO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlCQUFpQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQ0FBMkMsZUFBZTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBLHlCQUF5QixpQkFBaUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwyQkFBMkI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixzQkFBc0I7QUFDdEM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHdCQUF3QjtBQUN4QztBQUNBO0FBQ0EsZ0JBQWdCLG9FQUFvRTtBQUNwRjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHlCQUF5QjtBQUN6QztBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix5QkFBeUI7QUFDekM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1FQUFtRSwyQkFBMkIsNEJBQTRCLDhCQUE4QiwyQkFBMkIsZ0NBQWdDLDJCQUEyQix3QkFBd0IsNkJBQTZCLDBCQUEwQixvQ0FBb0MsMEJBQTBCLDRCQUE0QixzQkFBc0IscUJBQXFCLEdBQUcsbUVBQW1FLG1CQUFtQixnQkFBZ0IsdUJBQXVCLGlCQUFpQixrQkFBa0IsWUFBWSxXQUFXLHVCQUF1Qix1QkFBdUIseUJBQXlCLHVEQUF1RCxvREFBb0QsK0NBQStDLEdBQUcscUNBQXFDLGlCQUFpQixzV0FBc1csS0FBSyxZQUFZLHNXQUFzVyxLQUFLLFNBQVMsc1dBQXNXLEtBQUssV0FBVyxzV0FBc1csS0FBSyxTQUFTLHNXQUFzVyxLQUFLLFlBQVksc1dBQXNXLEtBQUssU0FBUyxzV0FBc1csS0FBSyxXQUFXLHNXQUFzVyxLQUFLLEdBQUcsNkJBQTZCLGlCQUFpQixzV0FBc1csS0FBSyxZQUFZLHNXQUFzVyxLQUFLLFNBQVMsc1dBQXNXLEtBQUssV0FBVyxzV0FBc1csS0FBSyxTQUFTLHNXQUFzVyxLQUFLLFlBQVksc1dBQXNXLEtBQUssU0FBUyxzV0FBc1csS0FBSyxXQUFXLHNXQUFzVyxLQUFLLEdBQUc7O0FBRTV3TjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLE9BQU87QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQSxpQkFBaUIscUJBQXFCO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1DQUFtQztBQUNqRDtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtVkFBbVYsaWtCQUFpa0IscUJBQXFCLEdBQUcsMkVBQTJFLHNDQUFzQyxHQUFHLGtEQUFrRCxrQ0FBa0Msa0NBQWtDLEdBQUcscUVBQXFFLHNDQUFzQyxHQUFHLG1DQUFtQyxnQ0FBZ0MsZ0NBQWdDLCtCQUErQiw0QkFBNEIsd0JBQXdCLG1DQUFtQyxHQUFHLG1EQUFtRCx1QkFBdUIsdUJBQXVCLEdBQUcscURBQXFELHVCQUF1Qix1QkFBdUIsR0FBRyxtREFBbUQsdUJBQXVCLHVCQUF1QixHQUFHLG9EQUFvRCxnQ0FBZ0MsNEJBQTRCLGdDQUFnQywrQkFBK0Isd0JBQXdCLG1DQUFtQyxpQkFBaUIsR0FBRyxnQkFBZ0IsZ0JBQWdCLEdBQUcsbUNBQW1DLDhCQUE4QixnQ0FBZ0MsMkJBQTJCLDJCQUEyQix3QkFBd0IsNkJBQTZCLG9DQUFvQywwQkFBMEIsMEJBQTBCLDRCQUE0QixnQkFBZ0IscUJBQXFCLEdBQUc7O0FBRTE1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLG1WQUFtVixvaEJBQW9oQix1QkFBdUIsd0JBQXdCLEdBQUcsd0JBQXdCLGdCQUFnQixpQkFBaUIsc0JBQXNCLGdDQUFnQyxnQ0FBZ0MsK0JBQStCLDRCQUE0Qix3QkFBd0IsbUNBQW1DLEdBQUcsdUJBQXVCLGdCQUFnQixpQkFBaUIsdUJBQXVCLGFBQWEsY0FBYyx1Q0FBdUMscUJBQXFCLDhCQUE4QixnQ0FBZ0MsMkJBQTJCLDJCQUEyQix3QkFBd0IsNkJBQTZCLG9DQUFvQywwQkFBMEIsMEJBQTBCLDRCQUE0QixHQUFHLG9CQUFvQixpQ0FBaUMsR0FBRzs7QUFFL3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsOERBQThEO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMseUJBQXlCO0FBQ3ZFO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQSxzQ0FBc0MsVUFBVTtBQUNoRDtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixXQUFXO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDJCQUEyQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUJBQXlCLFVBQVU7QUFDbkM7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyx1QkFBdUI7QUFDN0Q7QUFDQTtBQUNBLHdCQUF3QixVQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDLHVCQUF1QjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQyx1QkFBdUIsZ0JBQWdCLGdDQUFnQyw0QkFBNEIsZ0NBQWdDLCtCQUErQix3QkFBd0IsbUNBQW1DLGNBQWMsZUFBZSxHQUFHLDBCQUEwQiwwQkFBMEIsdUJBQXVCLHVCQUF1Qix1QkFBdUIsd0JBQXdCLDhCQUE4QixHQUFHLCtDQUErQyw2QkFBNkIsR0FBRyxpQ0FBaUMsMkJBQTJCLEdBQUc7O0FBRTlsQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiwyQkFBMkI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLFlBQVksMkJBQTJCO0FBQ3ZDO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxJQUFJO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBLEdBQUcsSUFBSTtBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxJQUFJO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEIseUJBQXlCLHNCQUFzQixpQ0FBaUMsOEJBQThCLCtCQUErQix1QkFBdUIsMEJBQTBCLDJFQUEyRSwwQkFBMEIscUJBQXFCLDREQUE0RDs7QUFFaFo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLHNCQUFzQjtBQUN0QztBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDZCQUE2Qix3QkFBd0Isa0JBQWtCLEdBQUc7O0FBRTFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkIsdUJBQXVCLGdCQUFnQixpQkFBaUIsaUJBQWlCLDJCQUEyQixHQUFHOztBQUVsSTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBOztBQUVBO0FBQ0Esb0VBQW9FLGdCQUFnQjtBQUNwRjtBQUNBLDRFQUE0RSxrQkFBa0I7QUFDOUYsU0FBUztBQUNUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0Msd0RBQXdEO0FBQzVGLGtDQUFrQyxzREFBc0Q7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0MsOERBQThEO0FBQ2xHLGtDQUFrQyxzREFBc0Q7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxPQUFPO0FBQ3BCLGFBQWEsT0FBTztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGFBQWEsU0FBUztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQix5QkFBeUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsOENBQThDLFFBQVEsVUFBVSxFQUFFLGlDQUFpQyxFQUFFLCtCQUErQixFQUFFLGVBQWUsY0FBYyxTQUFTLHFDQUFxQyxnQkFBZ0IsdUJBQXVCLGdCQUFnQixhQUFhLEVBQUUsZ0JBQWdCLFdBQVcsSUFBSSxnQkFBZ0IsU0FBUyxlQUFlLHVDQUF1QyxnQkFBZ0IsdUJBQXVCLG9DQUFvQyxtQkFBbUIsZ0JBQWdCLGFBQWEsRUFBRSxZQUFZLFdBQVcsS0FBSyxzQkFBc0IsK0NBQStDLEtBQUssc0RBQXNELFNBQVMsY0FBYyxLQUFLLGdCQUFnQixTQUFTLGdCQUFnQixtQkFBbUIsZUFBZSxLQUFLLDREQUE0RCxTQUFTLG9CQUFvQixFQUFFLE1BQU0sS0FBSywrQkFBK0IsU0FBUyxXQUFXLEVBQUUsRUFBRSxFQUFFLG1DQUFtQyxlQUFlLEVBQUUsTUFBTSxtQ0FBbUMsZ0JBQWdCLDhEQUE4RCxnQkFBZ0IsU0FBUyxlQUFlLHVCQUF1QixRQUFRLE1BQU0sOENBQThDLEVBQUUsa0VBQWtFLHlDQUF5QyxzQ0FBc0MsRUFBRSxpUkFBaVIsMEJBQTBCLHlCQUF5QiwrT0FBK08sNEJBQTRCLHNCQUFzQixrQkFBa0Isa0NBQWtDOztBQUU3L0Q7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsa0NBQWtDO0FBQ2xDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxnQkFBZ0Isc0JBQXNCO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixvQkFBb0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0Isb0JBQW9COztBQUUxQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLElBQUk7QUFDYixLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxJQUFJO0FBQ2YsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxJQUFJO0FBQ2xCO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQSxrQkFBa0I7QUFDbEIsY0FBYztBQUNkLGVBQWUsT0FBTztBQUN0QiwwQkFBMEI7QUFDMUI7QUFDQSxlQUFlLE9BQU87QUFDdEIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtDQUFrQzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQyxVQUFVLFlBQVk7QUFDaEUsOENBQThDLFlBQVksYUFBYTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEM7QUFDQSxnQ0FBZ0M7O0FBRWhDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0Y7QUFDaEYsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBbUI7QUFDakMsY0FBYyxPQUFPLFVBQVU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQ7QUFDNUQ7QUFDQTtBQUNBLGtDQUFrQyxtQkFBbUI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsOENBQThDLEVBQUU7QUFDcEY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwyQkFBMkIsNkJBQTZCLG9CQUFvQix3QkFBd0IsMkJBQTJCLG1CQUFtQixnQkFBZ0IsY0FBYyx5QkFBeUIsMkJBQTJCLGdCQUFnQix1QkFBdUIsaUJBQWlCLDZDQUE2QywwQ0FBMEMseUNBQXlDLHFDQUFxQywrQkFBK0Isd0NBQXdDLHFDQUFxQyxvQ0FBb0MsZ0NBQWdDLEdBQUcsc0JBQXNCLGVBQWUsR0FBRyxnQ0FBZ0MsZ0JBQWdCLEdBQUcsbUNBQW1DLGdCQUFnQixlQUFlLEdBQUcsMENBQTBDLHlDQUF5QyxHQUFHLHNCQUFzQixrQkFBa0Isb0JBQW9CLHVCQUF1QixXQUFXLFlBQVksZ0JBQWdCLGlCQUFpQiwyQkFBMkIsaUJBQWlCLEdBQUcsc0JBQXNCLG9CQUFvQix3QkFBd0IsYUFBYSxjQUFjLHVCQUF1Qiw0QkFBNEIsK0JBQStCLDZDQUE2QywwQ0FBMEMseUNBQXlDLHFDQUFxQywyQkFBMkIsR0FBRywyQkFBMkIsa0JBQWtCLEdBQUcsK0JBQStCLHlCQUF5QiwwQkFBMEIsc0JBQXNCLHlCQUF5QixrQkFBa0IsaUNBQWlDLG1DQUFtQyw4QkFBOEIsK0JBQStCLCtCQUErQiwrQkFBK0IsOEJBQThCLGdDQUFnQywyQkFBMkIsMkJBQTJCLDJCQUEyQix3QkFBd0IsNkJBQTZCLG9DQUFvQywwQkFBMEIsMEJBQTBCLDRCQUE0QixnQkFBZ0IsNEJBQTRCLDJCQUEyQiwyQkFBMkIsNkJBQTZCLHlCQUF5QiwwQ0FBMEMsR0FBRyxpQ0FBaUMsZ0JBQWdCLG1CQUFtQiwyQkFBMkIsdUJBQXVCLGNBQWMsZUFBZSxpQkFBaUIsR0FBRyxzQ0FBc0MsdUJBQXVCLEdBQUcsc0NBQXNDLDJCQUEyQixtQkFBbUIsd0JBQXdCLGNBQWMsZUFBZSxpQkFBaUIscUJBQXFCLHVCQUF1QixHQUFHLDhCQUE4QiwyQkFBMkIsZ0JBQWdCLDRCQUE0QixvQkFBb0IsR0FBRyxxQ0FBcUMsMkJBQTJCLGdCQUFnQixvQkFBb0IseUJBQXlCLDJCQUEyQixtQ0FBbUMsR0FBRyxrQ0FBa0MsZ0JBQWdCLGVBQWUsR0FBRyx5Q0FBeUMseUNBQXlDLEdBQUc7O0FBRXRyRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsb0JBQW9CO0FBQ3ZFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQyxjQUFjOzs7Ozs7OztBQzM3V3pEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6InBsdWdpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIDYxNWQ4NWU0OGMwZGU3NGFlZTExIiwiXHJcbmltcG9ydCB3ZWV4dGVzdCBmcm9tICcuL3dlYi9hcGkuanMnXHJcbmltcG9ydCBoZWxsbyBmcm9tICcuL3dlYi9oZWxsby5qcydcclxuXHJcbmltcG9ydCBSZW5kZXIgZnJvbSAnd2VleC12dWUtcmVuZGVyJ1xyXG5cclxuLy8gY29uc29sZS5sb2coKVxyXG4vLyBXZWV4Lmluc3RhbGwoaGVsbG8pXHJcblJlbmRlci5pbnN0YWxsKHdlZXh0ZXN0KVxyXG4vLyBXZWV4Lmluc3RhbGwoaGVsbG8pXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGx1Z2lucy9wbHVnaW5JbnN0YWxsLmpzIiwiXHJcbmNvbnN0IHdlZXh0ZXN0ID0ge1xyXG4gICAgXHJcbiAgICAgIHNldFRpdGxlOiBmdW5jdGlvbiAodGl0bGUpIHtcclxuICAgICAgICB0aXRsZSA9IHRpdGxlIHx8ICdXZWV4IEhUTUw1J1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB0aXRsZSA9IGRlY29kZVVSSUNvbXBvbmVudCh0aXRsZSlcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHt9XHJcbiAgICAgICAgZG9jdW1lbnQudGl0bGUgPSB0aXRsZVxyXG4gICAgICB9LFxyXG4gICAgICBsb2cocGFyYW0pe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHBhcmFtKVxyXG4gICAgICAgIHdlZXgucmVxdWlyZU1vZHVsZSgnbW9kYWwnKS50b2FzdCh7bWVzc2FnZTpwYXJhbX0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG5jb25zdCBtZXRhID0ge1xyXG4gICAgICB3ZWV4dGVzdDogW3tcclxuICAgICAgICBuYW1lOiAnc2V0VGl0bGUnLFxyXG4gICAgICAgIGFyZ3M6IFsnc3RyaW5nJ11cclxuICAgICAgfV1cclxuICAgIH1cclxuICAgIFxyXG5jb25zdCBpbml0ID0gZnVuY3Rpb24oV2VleCl7XHJcbiAgICBXZWV4LnJlZ2lzdGVyQXBpTW9kdWxlKCd3ZWV4dGVzdCcsIHdlZXh0ZXN0LCBtZXRhKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgaW5pdFxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vcGx1Z2lucy93ZWIvYXBpLmpzIiwiY29uc3QgX2NzcyA9IGBcclxuYm9keSA+IC53ZWV4LWRpdiB7XHJcbiAgbWluLWhlaWdodDogMTAwJTtcclxufVxyXG5gXHJcblxyXG5mdW5jdGlvbiBnZXREaXYgKHdlZXgpIHtcclxuICBjb25zdCB7XHJcbiAgICBleHRyYWN0Q29tcG9uZW50U3R5bGUsXHJcbiAgICB0cmltVGV4dFZOb2Rlc1xyXG4gIH0gPSB3ZWV4XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBuYW1lOiAnd2VleC1kaXYnLFxyXG4gICAgcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdodG1sOmRpdicsIHtcclxuICAgICAgICBhdHRyczogeyAnd2VleC10eXBlJzogJ2RpdicgfSxcclxuICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtZGl2IHdlZXgtY3QnLFxyXG4gICAgICAgIHN0YXRpY1N0eWxlOiBleHRyYWN0Q29tcG9uZW50U3R5bGUodGhpcylcclxuICAgICAgfSwgdHJpbVRleHRWTm9kZXModGhpcy4kc2xvdHMuZGVmYXVsdCkpXHJcbiAgICB9LFxyXG4gICAgX2Nzc1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGluaXQgKHdlZXgpIHtcclxuICAgIGNvbnN0IGRpdiA9IGdldERpdih3ZWV4KVxyXG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnZGl2JywgZGl2KVxyXG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnY29udGFpbmVyJywgZGl2KVxyXG4gIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3BsdWdpbnMvd2ViL2hlbGxvLmpzIiwiXG5jb25zb2xlLmxvZygnU1RBUlQgV0VFWCBWVUUgUkVOREVSOiAwLjEyLjI1LCBCdWlsZCAyMDE3LTEwLTMxIDIyOjEzLicpO1xuXG5cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX18kc3R5bGVJbmplY3QoY3NzLCByZXR1cm5WYWx1ZSkge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiByZXR1cm5WYWx1ZTtcbiAgfVxuICBjc3MgPSBjc3MgfHwgJyc7XG4gIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICBzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcbiAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIFxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCl7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG4gIHJldHVybiByZXR1cm5WYWx1ZTtcbn1cbl9fJHN0eWxlSW5qZWN0KFwiLypcXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXFxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXFxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXFxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxcbiAqIFxcXCJMaWNlbnNlXFxcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XFxuICpcXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxcbiAqXFxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXFxuICogXFxcIkFTIElTXFxcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXFxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXFxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxcbiAqL1xcbiBcXG4ud2VleC1yb290LFxcbi53ZWV4LXJvb3QgKiB7XFxuICBjb2xvcjogaW5pdGlhbDtcXG4gIGN1cnNvcjogaW5pdGlhbDtcXG4gIGRpcmVjdGlvbjogaW5pdGlhbDtcXG4gIGZvbnQ6IGluaXRpYWw7XFxuICBmb250LWZhbWlseTogaW5pdGlhbDtcXG4gIGZvbnQtc2l6ZTogaW5pdGlhbDtcXG4gIGZvbnQtc3R5bGU6IGluaXRpYWw7XFxuICBmb250LXZhcmlhbnQ6IGluaXRpYWw7XFxuICBmb250LXdlaWdodDogaW5pdGlhbDtcXG4gIGxpbmUtaGVpZ2h0OiBpbml0aWFsO1xcbiAgdGV4dC1hbGlnbjogaW5pdGlhbDtcXG4gIHRleHQtaW5kZW50OiBpbml0aWFsO1xcbiAgdmlzaWJpbGl0eTogaW5pdGlhbDtcXG4gIHdoaXRlLXNwYWNlOiBpbml0aWFsO1xcbiAgd29yZC1zcGFjaW5nOiBpbml0aWFsO1xcbiAgZm9udC1mYW1pbHk6IEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NvdXJjZSBTYW5zIFBybycsICdIZWx2ZXRpY2EgTmV1ZScsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxufVxcblxcbi53ZWV4LXJvb3QsXFxuLndlZXgtcm9vdCAqLFxcbi53ZWV4LXJvb3QgKjo6YmVmb3JlLFxcbi53ZWV4LXJvb3QgKjo6YWZ0ZXIge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogbm9uZTtcXG4gIC1tb3otdGV4dC1zaXplLWFkanVzdDogbm9uZTtcXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiBub25lO1xcbiAgdGV4dC1zaXplLWFkanVzdDogbm9uZTtcXG59XFxuXFxuLndlZXgtcm9vdCBhLFxcbi53ZWV4LXJvb3QgYnV0dG9uLFxcbi53ZWV4LXJvb3QgW3JvbGU9XFxcImJ1dHRvblxcXCJdLFxcbi53ZWV4LXJvb3QgaW5wdXQsXFxuLndlZXgtcm9vdCBsYWJlbCxcXG4ud2VleC1yb290IHNlbGVjdCxcXG4ud2VleC1yb290IHRleHRhcmVhIHtcXG4gIC1tcy10b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcXG4gICAgICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjtcXG59XFxuXFxuLndlZXgtcm9vdCBwLFxcbi53ZWV4LXJvb3Qgb2wsXFxuLndlZXgtcm9vdCB1bCxcXG4ud2VleC1yb290IGRsIHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi53ZWV4LXJvb3QgbGkge1xcbiAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuLndlZXgtcm9vdCBmaWd1cmUge1xcbiAgbWFyZ2luOiAwO1xcbn1cXG5cXG4ud2VleC1yb290IHRleHRhcmVhIHtcXG4gIHJlc2l6ZTogbm9uZTtcXG59XFxuXFxuLyogc2hvdyBubyBzY3JvbGwgYmFyLiAqL1xcbjo6LXdlYmtpdC1zY3JvbGxiYXIge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXCIsdW5kZWZpbmVkKTtcblxuX18kc3R5bGVJbmplY3QoXCIvKlxcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxcbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXFxuICogXFxcIkxpY2Vuc2VcXFwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcXG4gKlxcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXFxuICpcXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cXG4gKiBcXFwiQVMgSVNcXFwiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXFxuICogdW5kZXIgdGhlIExpY2Vuc2UuXFxuICovXFxuIFxcbi53ZWV4LXJvb3QgKiB7XFxuICBib3JkZXItd2lkdGg6IDA7XFxuICBib3JkZXItY29sb3I6IGluaGVyaXQ7XFxuICBib3JkZXItc3R5bGU6IHNvbGlkO1xcbn1cXG5cXG4ud2VleC1mbGV4LWN0IHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLXdlYmtpdC1mbGV4O1xcbiAgZGlzcGxheTogLW1vei1ib3g7XFxuICBkaXNwbGF5OiAtbXMtZmxleGJveDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbi53ZWV4LWN0IHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcXG4gIGRpc3BsYXk6IC1tb3otYm94O1xcbiAgZGlzcGxheTogLW1zLWZsZXhib3g7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIC1tb3otYm94LW9yaWVudDogdmVydGljYWw7XFxuICAtbW96LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIC13ZWJraXQtZmxleC1zaHJpbms6IDA7XFxuICAtbXMtZmxleC1uZWdhdGl2ZTogMDtcXG4gIGZsZXgtc2hyaW5rOiAwO1xcbiAgLXdlYmtpdC1mbGV4LWdyb3c6IDA7XFxuICAtbW96LWJveC1mbGV4OiAwO1xcbiAgLW1zLWZsZXgtZ3JvdzogMDtcXG4gIGZsZXgtZ3JvdzogMDtcXG4gIC13ZWJraXQtZmxleC1iYXNpczogYXV0bztcXG4gIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiBhdXRvO1xcbiAgZmxleC1iYXNpczogYXV0bztcXG4gIC13ZWJraXQtYm94LWFsaWduOiBzdHJldGNoO1xcbiAgLXdlYmtpdC1hbGlnbi1pdGVtczogc3RyZXRjaDtcXG4gIC1tb3otYm94LWFsaWduOiBzdHJldGNoO1xcbiAgLW1zLWZsZXgtYWxpZ246IHN0cmV0Y2g7XFxuICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG4gIC13ZWJraXQtYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcXG4gIC1tcy1mbGV4LWxpbmUtcGFjazogc3RhcnQ7XFxuICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgYm9yZGVyOiAwIHNvbGlkIGJsYWNrO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIG1pbi13aWR0aDogMDtcXG59XFxuXFxuLndlZXgtY3QuaG9yaXpvbnRhbCB7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAtbW96LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAtbW96LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG59XFxuXFxuLndlZXgtZWwge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgLXdlYmtpdC1mbGV4LXNocmluazogMDtcXG4gIC1tcy1mbGV4LW5lZ2F0aXZlOiAwO1xcbiAgZmxleC1zaHJpbms6IDA7XFxuICAtd2Via2l0LWZsZXgtZ3JvdzogMDtcXG4gIC1tb3otYm94LWZsZXg6IDA7XFxuICAtbXMtZmxleC1ncm93OiAwO1xcbiAgZmxleC1ncm93OiAwO1xcbiAgLXdlYmtpdC1mbGV4LWJhc2lzOiBhdXRvO1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IGF1dG87XFxuICBmbGV4LWJhc2lzOiBhdXRvO1xcbiAgYm9yZGVyOiAwIHNvbGlkIGJsYWNrO1xcbiAgbWFyZ2luOiAwO1xcbiAgcGFkZGluZzogMDtcXG4gIG1pbi13aWR0aDogMDtcXG59XFxuXFxuLndlZXgtaW9zLXN0aWNreSB7XFxuICBwb3NpdGlvbjogLXdlYmtpdC1zdGlja3kgIWltcG9ydGFudDtcXG4gIHBvc2l0aW9uOiBzdGlja3kgIWltcG9ydGFudDtcXG4gIHotaW5kZXg6IDk5OTk7XFxuICB0b3A6IDA7XFxufVxcblxcbi53ZWV4LWZpeGVkIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHotaW5kZXg6IDE7XFxufVxcblxcbi53ZWV4LXN0aWNreSB7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB0b3A6IDA7XFxuICB6LWluZGV4OiA5OTk5O1xcbn1cXG5cIix1bmRlZmluZWQpO1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlICovXG5cbnZhciBpc0luaXRpYWxpemVkID0gZmFsc2U7XG5cbi8vIG1ham9yIGV2ZW50cyBzdXBwb3J0ZWQ6XG4vLyAgIHBhbnN0YXJ0XG4vLyAgIHBhbm1vdmVcbi8vICAgcGFuZW5kXG4vLyAgIHN3aXBlXG4vLyAgIGxvbmdwcmVzc1xuLy8gZXh0cmEgZXZlbnRzIHN1cHBvcnRlZDpcbi8vICAgZHVhbHRvdWNoc3RhcnRcbi8vICAgZHVhbHRvdWNoXG4vLyAgIGR1YWx0b3VjaGVuZFxuLy8gICB0YXBcbi8vICAgZG91YmxldGFwXG4vLyAgIHByZXNzZW5kXG5cbnZhciBkb2MgPSB3aW5kb3cuZG9jdW1lbnQ7XG52YXIgZG9jRWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGdlc3R1cmVzID0ge307XG52YXIgbGFzdFRhcCA9IG51bGw7XG5cbi8qKlxuICogZmluZCB0aGUgY2xvc2VzdCBjb21tb24gYW5jZXN0b3JcbiAqIGlmIHRoZXJlJ3Mgbm8gb25lLCByZXR1cm4gbnVsbFxuICpcbiAqIEBwYXJhbSAge0VsZW1lbnR9IGVsMSBmaXJzdCBlbGVtZW50XG4gKiBAcGFyYW0gIHtFbGVtZW50fSBlbDIgc2Vjb25kIGVsZW1lbnRcbiAqIEByZXR1cm4ge0VsZW1lbnR9ICAgICBjb21tb24gYW5jZXN0b3JcbiAqL1xuZnVuY3Rpb24gZ2V0Q29tbW9uQW5jZXN0b3IoZWwxLCBlbDIpIHtcbiAgdmFyIGVsID0gZWwxO1xuICB3aGlsZSAoZWwpIHtcbiAgICBpZiAoZWwuY29udGFpbnMoZWwyKSB8fCBlbCA9PSBlbDIpIHtcbiAgICAgIHJldHVybiBlbFxuICAgIH1cbiAgICBlbCA9IGVsLnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIG51bGxcbn1cblxuLyoqXG4gKiBmaXJlIGEgSFRNTEV2ZW50XG4gKlxuICogQHBhcmFtICB7RWxlbWVudH0gZWxlbWVudCB3aGljaCBlbGVtZW50IHRvIGZpcmUgYSBldmVudCBvblxuICogQHBhcmFtICB7c3RyaW5nfSAgdHlwZSAgICB0eXBlIG9mIGV2ZW50XG4gKiBAcGFyYW0gIHtvYmplY3R9ICBleHRyYSAgIGV4dHJhIGRhdGEgZm9yIHRoZSBldmVudCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZmlyZUV2ZW50KGVsZW1lbnQsIHR5cGUsIGV4dHJhKSB7XG4gIHZhciBldmVudCA9IGRvYy5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBldmVudC5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgaWYgKHR5cGVvZiBleHRyYSA9PT0gJ29iamVjdCcpIHtcbiAgICBmb3IgKHZhciBwIGluIGV4dHJhKSB7XG4gICAgICBldmVudFtwXSA9IGV4dHJhW3BdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBIGZsYWcgdG8gZGlzdGluZ3Vpc2ggd2l0aCBvdGhlciBldmVudHMgd2l0aCB0aGUgc2FtZSBuYW1lIGdlbmVyYXRlZFxuICAgKiBieSBhbm90aGVyIGxpYnJhcnkgaW4gdGhlIHNhbWUgcGFnZS5cbiAgICovIFxuICBldmVudC5fZm9yID0gJ3dlZXgnO1xuXG4gIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbi8qKlxuICogY2FsYyB0aGUgdHJhbnNmb3JtXG4gKiBhc3N1bWUgNCBwb2ludHMgQUJDRCBvbiB0aGUgY29vcmRpbmF0ZSBzeXN0ZW1cbiAqID4gcm90YXRl77yaYW5nbGUgcm90YXRpbmcgZnJvbSBBQiB0byBDRFxuICogPiBzY2FsZe+8mnNjYWxlIHJhdGlvIGZyb20gQUIgdG8gQ0RcbiAqID4gdHJhbnNsYXRl77yadHJhbnNsYXRlIHNoaWZ0IGZyb20gQSB0byBDXG4gKlxuICogQHBhcmFtICB7bnVtYmVyfSB4MSBhYnNjaXNzYSBvZiBBXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHkxIG9yZGluYXRlIG9mIEFcbiAqIEBwYXJhbSAge251bWJlcn0geDIgYWJzY2lzc2Egb2YgQlxuICogQHBhcmFtICB7bnVtYmVyfSB5MiBvcmRpbmF0ZSBvZiBCXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHgzIGFic2Npc3NhIG9mIENcbiAqIEBwYXJhbSAge251bWJlcn0geTMgb3JkaW5hdGUgb2YgQ1xuICogQHBhcmFtICB7bnVtYmVyfSB4NCBhYnNjaXNzYSBvZiBEXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHk0IG9yZGluYXRlIG9mIERcbiAqIEByZXR1cm4ge29iamVjdH0gICAgdHJhbnNmb3JtIG9iamVjdCBsaWtlXG4gKiAgIHtyb3RhdGUsIHNjYWxlLCB0cmFuc2xhdGVbMl0sIG1hdHJpeFszXVszXX1cbiAqL1xuZnVuY3Rpb24gY2FsYyh4MSwgeTEsIHgyLCB5MiwgeDMsIHkzLCB4NCwgeTQpIHtcbiAgdmFyIHJvdGF0ZSA9IE1hdGguYXRhbjIoeTQgLSB5MywgeDQgLSB4MykgLSBNYXRoLmF0YW4yKHkyIC0geTEsIHgyIC0geDEpO1xuICB2YXIgc2NhbGUgPSBNYXRoLnNxcnQoKE1hdGgucG93KHk0IC0geTMsIDIpXG4gICAgKyBNYXRoLnBvdyh4NCAtIHgzLCAyKSkgLyAoTWF0aC5wb3coeTIgLSB5MSwgMilcbiAgICArIE1hdGgucG93KHgyIC0geDEsIDIpKSk7XG4gIHZhciB0cmFuc2xhdGUgPSBbXG4gICAgeDNcbiAgICAtIHNjYWxlICogeDEgKiBNYXRoLmNvcyhyb3RhdGUpXG4gICAgKyBzY2FsZSAqIHkxICogTWF0aC5zaW4ocm90YXRlKSxcbiAgICB5M1xuICAgIC0gc2NhbGUgKiB5MSAqIE1hdGguY29zKHJvdGF0ZSlcbiAgICAtIHNjYWxlICogeDEgKiBNYXRoLnNpbihyb3RhdGUpXTtcblxuICByZXR1cm4ge1xuICAgIHJvdGF0ZTogcm90YXRlLFxuICAgIHNjYWxlOiBzY2FsZSxcbiAgICB0cmFuc2xhdGU6IHRyYW5zbGF0ZSxcbiAgICBtYXRyaXg6IFtcbiAgICAgIFtzY2FsZSAqIE1hdGguY29zKHJvdGF0ZSksIC1zY2FsZSAqIE1hdGguc2luKHJvdGF0ZSksIHRyYW5zbGF0ZVswXV0sXG4gICAgICBbc2NhbGUgKiBNYXRoLnNpbihyb3RhdGUpLCBzY2FsZSAqIE1hdGguY29zKHJvdGF0ZSksIHRyYW5zbGF0ZVsxXV0sXG4gICAgICBbMCwgMCwgMV1cbiAgICBdXG4gIH1cbn1cblxuLyoqXG4gKiB0YWtlIG92ZXIgdGhlIHRvdWNoc3RhcnQgZXZlbnRzLiBBZGQgbmV3IHRvdWNoZXMgdG8gdGhlIGdlc3R1cmVzLlxuICogSWYgdGhlcmUgaXMgbm8gcHJldmlvdXMgcmVjb3JkcywgdGhlbiBiaW5kIHRvdWNobW92ZSwgdG9jaGVuZFxuICogYW5kIHRvdWNoY2FuY2VsIGV2ZW50cy5cbiAqIG5ldyB0b3VjaGVzIGluaXRpYWxpemVkIHdpdGggc3RhdGUgJ3RhcHBpbmcnLCBhbmQgd2l0aGluIDUwMCBtaWxsaXNlY29uZHNcbiAqIGlmIHRoZSBzdGF0ZSBpcyBzdGlsbCB0YXBwaW5nLCB0aGVuIHRyaWdnZXIgZ2VzdHVyZSAncHJlc3MnLlxuICogSWYgdGhlcmUgYXJlIHR3byB0b3VjaGUgcG9pbnRzLCB0aGVuIHRoZSAnZHVhbHRvdWNoc3RhcnQnIGlzIHRyaWdnZXJkLiBUaGVcbiAqIG5vZGUgb2YgdGhlIHRvdWNoIGdlc3R1cmUgaXMgdGhlaXIgY2xvZXN0IGNvbW1vbiBhbmNlc3Rvci5cbiAqXG4gKiBAZXZlbnRcbiAqIEBwYXJhbSAge2V2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiB0b3VjaHN0YXJ0SGFuZGxlcihldmVudCkge1xuXG4gIGlmIChPYmplY3Qua2V5cyhnZXN0dXJlcykubGVuZ3RoID09PSAwKSB7XG4gICAgZG9jRWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdG91Y2htb3ZlSGFuZGxlciwgZmFsc2UpO1xuICAgIGRvY0VsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdG91Y2hlbmRIYW5kbGVyLCBmYWxzZSk7XG4gICAgZG9jRWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCB0b3VjaGNhbmNlbEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxuXG4gIC8vIHJlY29yZCBldmVyeSB0b3VjaFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50LmNoYW5nZWRUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbaV07XG4gICAgdmFyIHRvdWNoUmVjb3JkID0ge307XG5cbiAgICBmb3IgKHZhciBwIGluIHRvdWNoKSB7XG4gICAgICB0b3VjaFJlY29yZFtwXSA9IHRvdWNoW3BdO1xuICAgIH1cblxuICAgIHZhciBnZXN0dXJlID0ge1xuICAgICAgc3RhcnRUb3VjaDogdG91Y2hSZWNvcmQsXG4gICAgICBzdGFydFRpbWU6IERhdGUubm93KCksXG4gICAgICBzdGF0dXM6ICd0YXBwaW5nJyxcbiAgICAgIGVsZW1lbnQ6IGV2ZW50LnNyY0VsZW1lbnQgfHwgZXZlbnQudGFyZ2V0LFxuICAgICAgcHJlc3NpbmdIYW5kbGVyOiBzZXRUaW1lb3V0KGZ1bmN0aW9uIChlbGVtZW50LCB0b3VjaCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3RhcHBpbmcnKSB7XG4gICAgICAgICAgICBnZXN0dXJlLnN0YXR1cyA9ICdwcmVzc2luZyc7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudChlbGVtZW50LCAnbG9uZ3ByZXNzJywge1xuICAgICAgICAgICAgICAvLyBhZGQgdG91Y2ggZGF0YSBmb3Igd2VleFxuICAgICAgICAgICAgICB0b3VjaDogdG91Y2gsXG4gICAgICAgICAgICAgIHRvdWNoZXM6IGV2ZW50LnRvdWNoZXMsXG4gICAgICAgICAgICAgIGNoYW5nZWRUb3VjaGVzOiBldmVudC5jaGFuZ2VkVG91Y2hlcyxcbiAgICAgICAgICAgICAgdG91Y2hFdmVudDogZXZlbnRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNsZWFyVGltZW91dChnZXN0dXJlLnByZXNzaW5nSGFuZGxlcik7XG4gICAgICAgICAgZ2VzdHVyZS5wcmVzc2luZ0hhbmRsZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9KGV2ZW50LnNyY0VsZW1lbnQgfHwgZXZlbnQudGFyZ2V0LCBldmVudC5jaGFuZ2VkVG91Y2hlc1tpXSksIDUwMClcbiAgICB9O1xuICAgIGdlc3R1cmVzW3RvdWNoLmlkZW50aWZpZXJdID0gZ2VzdHVyZTtcbiAgfVxuXG4gIGlmIChPYmplY3Qua2V5cyhnZXN0dXJlcykubGVuZ3RoID09IDIpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcblxuICAgIGZvciAodmFyIHAgaW4gZ2VzdHVyZXMpIHtcbiAgICAgIGVsZW1lbnRzLnB1c2goZ2VzdHVyZXNbcF0uZWxlbWVudCk7XG4gICAgfVxuXG4gICAgZmlyZUV2ZW50KGdldENvbW1vbkFuY2VzdG9yKGVsZW1lbnRzWzBdLCBlbGVtZW50c1sxXSksICdkdWFsdG91Y2hzdGFydCcsIHtcbiAgICAgIHRvdWNoZXM6IHNsaWNlLmNhbGwoZXZlbnQudG91Y2hlcyksXG4gICAgICB0b3VjaEV2ZW50OiBldmVudFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogdGFrZSBvdmVyIHRvdWNobW92ZSBldmVudHMsIGFuZCBoYW5kbGUgcGFuIGFuZCBkdWFsIHJlbGF0ZWQgZ2VzdHVyZXMuXG4gKlxuICogMS4gdHJhdmVyc2UgZXZlcnkgdG91Y2ggcG9pbnTvvJpcbiAqID4gaWYgJ3RhcHBpbmcnIGFuZCB0aGUgc2hpZnQgaXMgb3ZlciAxMCBwaXhsZXMsIHRoZW4gaXQncyBhICdwYW5uaW5nJy5cbiAqIDIuIGlmIHRoZXJlIGFyZSB0d28gdG91Y2ggcG9pbnRzLCB0aGVuIGNhbGMgdGhlIHRyYW5mb3JtIGFuZCB0cmlnZ2VyXG4gKiAgICdkdWFsdG91Y2gnLlxuICpcbiAqIEBldmVudFxuICogQHBhcmFtICB7ZXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHRvdWNobW92ZUhhbmRsZXIoZXZlbnQpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldO1xuICAgIHZhciBnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2guaWRlbnRpZmllcl07XG5cbiAgICBpZiAoIWdlc3R1cmUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmICghZ2VzdHVyZS5sYXN0VG91Y2gpIHtcbiAgICAgIGdlc3R1cmUubGFzdFRvdWNoID0gZ2VzdHVyZS5zdGFydFRvdWNoO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUubGFzdFRpbWUpIHtcbiAgICAgIGdlc3R1cmUubGFzdFRpbWUgPSBnZXN0dXJlLnN0YXJ0VGltZTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLnZlbG9jaXR5WCkge1xuICAgICAgZ2VzdHVyZS52ZWxvY2l0eVggPSAwO1xuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUudmVsb2NpdHlZKSB7XG4gICAgICBnZXN0dXJlLnZlbG9jaXR5WSA9IDA7XG4gICAgfVxuICAgIGlmICghZ2VzdHVyZS5kdXJhdGlvbikge1xuICAgICAgZ2VzdHVyZS5kdXJhdGlvbiA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHRpbWUgPSAgRGF0ZS5ub3coKSAtIGdlc3R1cmUubGFzdFRpbWU7XG4gICAgdmFyIHZ4ID0gKHRvdWNoLmNsaWVudFggLSBnZXN0dXJlLmxhc3RUb3VjaC5jbGllbnRYKSAvIHRpbWU7XG4gICAgdmFyIHZ5ID0gKHRvdWNoLmNsaWVudFkgLSBnZXN0dXJlLmxhc3RUb3VjaC5jbGllbnRZKSAvIHRpbWU7XG5cbiAgICB2YXIgUkVDT1JEX0RVUkFUSU9OID0gNzA7XG4gICAgaWYgKHRpbWUgPiBSRUNPUkRfRFVSQVRJT04pIHtcbiAgICAgIHRpbWUgPSBSRUNPUkRfRFVSQVRJT047XG4gICAgfVxuICAgIGlmIChnZXN0dXJlLmR1cmF0aW9uICsgdGltZSA+IFJFQ09SRF9EVVJBVElPTikge1xuICAgICAgZ2VzdHVyZS5kdXJhdGlvbiA9IFJFQ09SRF9EVVJBVElPTiAtIHRpbWU7XG4gICAgfVxuXG4gICAgZ2VzdHVyZS52ZWxvY2l0eVggPSAoZ2VzdHVyZS52ZWxvY2l0eVggKiBnZXN0dXJlLmR1cmF0aW9uICsgdnggKiB0aW1lKVxuICAgICAgLyAoZ2VzdHVyZS5kdXJhdGlvbiArIHRpbWUpO1xuICAgIGdlc3R1cmUudmVsb2NpdHlZID0gKGdlc3R1cmUudmVsb2NpdHlZICogZ2VzdHVyZS5kdXJhdGlvbiArIHZ5ICogdGltZSlcbiAgICAgIC8gKGdlc3R1cmUuZHVyYXRpb24gKyB0aW1lKTtcbiAgICBnZXN0dXJlLmR1cmF0aW9uICs9IHRpbWU7XG5cbiAgICBnZXN0dXJlLmxhc3RUb3VjaCA9IHt9O1xuXG4gICAgZm9yICh2YXIgcCBpbiB0b3VjaCkge1xuICAgICAgZ2VzdHVyZS5sYXN0VG91Y2hbcF0gPSB0b3VjaFtwXTtcbiAgICB9XG4gICAgZ2VzdHVyZS5sYXN0VGltZSA9IERhdGUubm93KCk7XG5cbiAgICB2YXIgZGlzcGxhY2VtZW50WCA9IHRvdWNoLmNsaWVudFggLSBnZXN0dXJlLnN0YXJ0VG91Y2guY2xpZW50WDtcbiAgICB2YXIgZGlzcGxhY2VtZW50WSA9IHRvdWNoLmNsaWVudFkgLSBnZXN0dXJlLnN0YXJ0VG91Y2guY2xpZW50WTtcbiAgICB2YXIgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coZGlzcGxhY2VtZW50WCwgMilcbiAgICAgICsgTWF0aC5wb3coZGlzcGxhY2VtZW50WSwgMikpO1xuICAgIHZhciBpc1ZlcnRpY2FsID0gIShNYXRoLmFicyhkaXNwbGFjZW1lbnRYKSA+IE1hdGguYWJzKGRpc3BsYWNlbWVudFkpKTtcbiAgICB2YXIgZGlyZWN0aW9uID0gaXNWZXJ0aWNhbFxuICAgICAgPyBkaXNwbGFjZW1lbnRZID49IDAgPyAnZG93bicgOiAndXAnXG4gICAgICA6IGRpc3BsYWNlbWVudFggPj0gMCA/ICdyaWdodCcgOiAnbGVmdCc7XG5cbiAgICAvLyBtYWdpYyBudW1iZXIgMTA6IG1vdmluZyAxMHB4IG1lYW5zIHBhbiwgbm90IHRhcFxuICAgIGlmICgoZ2VzdHVyZS5zdGF0dXMgPT09ICd0YXBwaW5nJyB8fCBnZXN0dXJlLnN0YXR1cyA9PT0gJ3ByZXNzaW5nJylcbiAgICAgICAgJiYgZGlzdGFuY2UgPiAxMCkge1xuICAgICAgZ2VzdHVyZS5zdGF0dXMgPSAncGFubmluZyc7XG4gICAgICBnZXN0dXJlLmlzVmVydGljYWwgPSBpc1ZlcnRpY2FsO1xuICAgICAgZ2VzdHVyZS5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG5cbiAgICAgIGZpcmVFdmVudChnZXN0dXJlLmVsZW1lbnQsICdwYW5zdGFydCcsIHtcbiAgICAgICAgdG91Y2g6IHRvdWNoLFxuICAgICAgICB0b3VjaGVzOiBldmVudC50b3VjaGVzLFxuICAgICAgICBjaGFuZ2VkVG91Y2hlczogZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIHRvdWNoRXZlbnQ6IGV2ZW50LFxuICAgICAgICBpc1ZlcnRpY2FsOiBnZXN0dXJlLmlzVmVydGljYWwsXG4gICAgICAgIGRpcmVjdGlvbjogZGlyZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZ2VzdHVyZS5zdGF0dXMgPT09ICdwYW5uaW5nJykge1xuICAgICAgZ2VzdHVyZS5wYW5UaW1lID0gRGF0ZS5ub3coKTtcblxuICAgICAgZmlyZUV2ZW50KGdlc3R1cmUuZWxlbWVudCwgJ3Bhbm1vdmUnLCB7XG4gICAgICAgIGRpc3BsYWNlbWVudFg6IGRpc3BsYWNlbWVudFgsXG4gICAgICAgIGRpc3BsYWNlbWVudFk6IGRpc3BsYWNlbWVudFksXG4gICAgICAgIHRvdWNoOiB0b3VjaCxcbiAgICAgICAgdG91Y2hlczogZXZlbnQudG91Y2hlcyxcbiAgICAgICAgY2hhbmdlZFRvdWNoZXM6IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICB0b3VjaEV2ZW50OiBldmVudCxcbiAgICAgICAgaXNWZXJ0aWNhbDogZ2VzdHVyZS5pc1ZlcnRpY2FsLFxuICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGdlc3R1cmVzKS5sZW5ndGggPT0gMikge1xuICAgIHZhciBwb3NpdGlvbiA9IFtdO1xuICAgIHZhciBjdXJyZW50ID0gW107XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgdmFyIHRyYW5zZm9ybTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnQudG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRvdWNoID0gZXZlbnQudG91Y2hlc1tpXTtcbiAgICAgIHZhciBnZXN0dXJlID0gZ2VzdHVyZXNbdG91Y2guaWRlbnRpZmllcl07XG4gICAgICBwb3NpdGlvbi5wdXNoKFtnZXN0dXJlLnN0YXJ0VG91Y2guY2xpZW50WCwgZ2VzdHVyZS5zdGFydFRvdWNoLmNsaWVudFldKTtcbiAgICAgIGN1cnJlbnQucHVzaChbdG91Y2guY2xpZW50WCwgdG91Y2guY2xpZW50WV0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIHAgaW4gZ2VzdHVyZXMpIHtcbiAgICAgIGVsZW1lbnRzLnB1c2goZ2VzdHVyZXNbcF0uZWxlbWVudCk7XG4gICAgfVxuXG4gICAgdHJhbnNmb3JtID0gY2FsYyhcbiAgICAgIHBvc2l0aW9uWzBdWzBdLFxuICAgICAgcG9zaXRpb25bMF1bMV0sXG4gICAgICBwb3NpdGlvblsxXVswXSxcbiAgICAgIHBvc2l0aW9uWzFdWzFdLFxuICAgICAgY3VycmVudFswXVswXSxcbiAgICAgIGN1cnJlbnRbMF1bMV0sXG4gICAgICBjdXJyZW50WzFdWzBdLFxuICAgICAgY3VycmVudFsxXVsxXVxuICAgICk7XG4gICAgZmlyZUV2ZW50KGdldENvbW1vbkFuY2VzdG9yKGVsZW1lbnRzWzBdLCBlbGVtZW50c1sxXSksICdkdWFsdG91Y2gnLCB7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcbiAgICAgIHRvdWNoZXM6IGV2ZW50LnRvdWNoZXMsXG4gICAgICB0b3VjaEV2ZW50OiBldmVudFxuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogaGFuZGxlIHRvdWNoZW5kIGV2ZW50XG4gKlxuICogMS4gaWYgdGhlcmUgYXJlIHRvdyB0b3VjaCBwb2ludHMsIHRoZW4gdHJpZ2dlciAnZHVhbHRvdWNoZW5kJ+WmglxuICpcbiAqIDIuIHRyYXZlcnNlIGV2ZXJ5IHRvdWNoIHBpb25077yaXG4gKiA+IGlmIHRhcHBpbmcsIHRoZW4gdHJpZ2dlciAndGFwJy5cbiAqIElmIHRoZXJlIGlzIGEgdGFwIDMwMCBtaWxsaXNlY29uZHMgYmVmb3JlLCB0aGVuIGl0J3MgYSAnZG91YmxldGFwJy5cbiAqID4gaWYgcGFkZGluZywgdGhlbiBkZWNpZGUgdG8gdHJpZ2dlciAncGFuZW5kJyBvciAnc3dpcGUnXG4gKiA+IGlmIHByZXNzaW5nLCB0aGVuIHRyaWdnZXIgJ3ByZXNzZW5kJy5cbiAqXG4gKiAzLiByZW1vdmUgbGlzdGVuZXJzLlxuICpcbiAqIEBldmVudFxuICogQHBhcmFtICB7ZXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIHRvdWNoZW5kSGFuZGxlcihldmVudCkge1xuXG4gIGlmIChPYmplY3Qua2V5cyhnZXN0dXJlcykubGVuZ3RoID09IDIpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICBmb3IgKHZhciBwIGluIGdlc3R1cmVzKSB7XG4gICAgICBlbGVtZW50cy5wdXNoKGdlc3R1cmVzW3BdLmVsZW1lbnQpO1xuICAgIH1cbiAgICBmaXJlRXZlbnQoZ2V0Q29tbW9uQW5jZXN0b3IoZWxlbWVudHNbMF0sIGVsZW1lbnRzWzFdKSwgJ2R1YWx0b3VjaGVuZCcsIHtcbiAgICAgIHRvdWNoZXM6IHNsaWNlLmNhbGwoZXZlbnQudG91Y2hlcyksXG4gICAgICB0b3VjaEV2ZW50OiBldmVudFxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudC5jaGFuZ2VkVG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzW2ldO1xuICAgIHZhciBpZCA9IHRvdWNoLmlkZW50aWZpZXI7XG4gICAgdmFyIGdlc3R1cmUgPSBnZXN0dXJlc1tpZF07XG5cbiAgICBpZiAoIWdlc3R1cmUpIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaWYgKGdlc3R1cmUucHJlc3NpbmdIYW5kbGVyKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZ2VzdHVyZS5wcmVzc2luZ0hhbmRsZXIpO1xuICAgICAgZ2VzdHVyZS5wcmVzc2luZ0hhbmRsZXIgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3RhcHBpbmcnKSB7XG4gICAgICBnZXN0dXJlLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gICAgICAvLyBmaXJlIGNsaWNrLCBub3QgdGFwLlxuICAgICAgZmlyZUV2ZW50KGdlc3R1cmUuZWxlbWVudCwgJ3RhcCcsIHtcbiAgICAgICAgdG91Y2g6IHRvdWNoLFxuICAgICAgICB0b3VjaEV2ZW50OiBldmVudFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChsYXN0VGFwICYmIGdlc3R1cmUudGltZXN0YW1wIC0gbGFzdFRhcC50aW1lc3RhbXAgPCAzMDApIHtcbiAgICAgICAgZmlyZUV2ZW50KGdlc3R1cmUuZWxlbWVudCwgJ2RvdWJsZXRhcCcsIHtcbiAgICAgICAgICB0b3VjaDogdG91Y2gsXG4gICAgICAgICAgdG91Y2hFdmVudDogZXZlbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGxhc3RUYXAgPSBnZXN0dXJlO1xuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3Bhbm5pbmcnKSB7XG4gICAgICB2YXIgbm93ID0gRGF0ZS5ub3coKTtcbiAgICAgIHZhciBkdXJhdGlvbiA9IG5vdyAtIGdlc3R1cmUuc3RhcnRUaW1lO1xuICAgICAgdmFyIGRpc3BsYWNlbWVudFggPSB0b3VjaC5jbGllbnRYIC0gZ2VzdHVyZS5zdGFydFRvdWNoLmNsaWVudFg7XG4gICAgICB2YXIgZGlzcGxhY2VtZW50WSA9IHRvdWNoLmNsaWVudFkgLSBnZXN0dXJlLnN0YXJ0VG91Y2guY2xpZW50WTtcblxuICAgICAgdmFyIHZlbG9jaXR5ID0gTWF0aC5zcXJ0KGdlc3R1cmUudmVsb2NpdHlZICogZ2VzdHVyZS52ZWxvY2l0eVlcbiAgICAgICAgKyBnZXN0dXJlLnZlbG9jaXR5WCAqIGdlc3R1cmUudmVsb2NpdHlYKTtcbiAgICAgIHZhciBpc1N3aXBlID0gdmVsb2NpdHkgPiAwLjUgJiYgKG5vdyAtIGdlc3R1cmUubGFzdFRpbWUpIDwgMTAwO1xuICAgICAgdmFyIGV4dHJhID0ge1xuICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgIGlzU3dpcGU6IGlzU3dpcGUsXG4gICAgICAgIHZlbG9jaXR5WDogZ2VzdHVyZS52ZWxvY2l0eVgsXG4gICAgICAgIHZlbG9jaXR5WTogZ2VzdHVyZS52ZWxvY2l0eVksXG4gICAgICAgIGRpc3BsYWNlbWVudFg6IGRpc3BsYWNlbWVudFgsXG4gICAgICAgIGRpc3BsYWNlbWVudFk6IGRpc3BsYWNlbWVudFksXG4gICAgICAgIHRvdWNoOiB0b3VjaCxcbiAgICAgICAgdG91Y2hlczogZXZlbnQudG91Y2hlcyxcbiAgICAgICAgY2hhbmdlZFRvdWNoZXM6IGV2ZW50LmNoYW5nZWRUb3VjaGVzLFxuICAgICAgICB0b3VjaEV2ZW50OiBldmVudCxcbiAgICAgICAgaXNWZXJ0aWNhbDogZ2VzdHVyZS5pc1ZlcnRpY2FsLFxuICAgICAgICBkaXJlY3Rpb246IGdlc3R1cmUuZGlyZWN0aW9uXG4gICAgICB9O1xuXG4gICAgICBmaXJlRXZlbnQoZ2VzdHVyZS5lbGVtZW50LCAncGFuZW5kJywgZXh0cmEpO1xuICAgICAgaWYgKGlzU3dpcGUpIHtcbiAgICAgICAgZmlyZUV2ZW50KGdlc3R1cmUuZWxlbWVudCwgJ3N3aXBlJywgZXh0cmEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLnN0YXR1cyA9PT0gJ3ByZXNzaW5nJykge1xuICAgICAgZmlyZUV2ZW50KGdlc3R1cmUuZWxlbWVudCwgJ3ByZXNzZW5kJywge1xuICAgICAgICB0b3VjaDogdG91Y2gsXG4gICAgICAgIHRvdWNoRXZlbnQ6IGV2ZW50XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBkZWxldGUgZ2VzdHVyZXNbaWRdO1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGdlc3R1cmVzKS5sZW5ndGggPT09IDApIHtcbiAgICBkb2NFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0b3VjaG1vdmVIYW5kbGVyLCBmYWxzZSk7XG4gICAgZG9jRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0b3VjaGVuZEhhbmRsZXIsIGZhbHNlKTtcbiAgICBkb2NFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRvdWNoY2FuY2VsSGFuZGxlciwgZmFsc2UpO1xuICB9XG59XG5cbi8qKlxuICogaGFuZGxlIHRvdWNoY2FuY2VsXG4gKlxuICogMS4gaWYgdGhlcmUgYXJlIHR3byB0b3VjaCBwb2ludHMsIHRoZW4gdHJpZ2dlciAnZHVhbHRvdWNoZW5kJ1xuICpcbiAqIDIuIHRyYXZlcnNlIGV2ZXJ0eSB0b3VjaCBwb2ludDpcbiAqID4gaWYgcGFubm5pZywgdGhlbiB0cmlnZ2VyICdwYW5lbmQnXG4gKiA+IGlmIHByZXNzaW5nLCB0aGVuIHRyaWdnZXIgJ3ByZXNzZW5kJ1xuICpcbiAqIDMuIHJlbW92ZSBsaXN0ZW5lcnNcbiAqXG4gKiBAZXZlbnRcbiAqIEBwYXJhbSAge2V2ZW50fSBldmVudFxuICovXG5mdW5jdGlvbiB0b3VjaGNhbmNlbEhhbmRsZXIoZXZlbnQpIHtcblxuICBpZiAoT2JqZWN0LmtleXMoZ2VzdHVyZXMpLmxlbmd0aCA9PSAyKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gW107XG4gICAgZm9yICh2YXIgcCBpbiBnZXN0dXJlcykge1xuICAgICAgZWxlbWVudHMucHVzaChnZXN0dXJlc1twXS5lbGVtZW50KTtcbiAgICB9XG4gICAgZmlyZUV2ZW50KGdldENvbW1vbkFuY2VzdG9yKGVsZW1lbnRzWzBdLCBlbGVtZW50c1sxXSksICdkdWFsdG91Y2hlbmQnLCB7XG4gICAgICB0b3VjaGVzOiBzbGljZS5jYWxsKGV2ZW50LnRvdWNoZXMpLFxuICAgICAgdG91Y2hFdmVudDogZXZlbnRcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnQuY2hhbmdlZFRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1tpXTtcbiAgICB2YXIgaWQgPSB0b3VjaC5pZGVudGlmaWVyO1xuICAgIHZhciBnZXN0dXJlID0gZ2VzdHVyZXNbaWRdO1xuXG4gICAgaWYgKCFnZXN0dXJlKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmIChnZXN0dXJlLnByZXNzaW5nSGFuZGxlcikge1xuICAgICAgY2xlYXJUaW1lb3V0KGdlc3R1cmUucHJlc3NpbmdIYW5kbGVyKTtcbiAgICAgIGdlc3R1cmUucHJlc3NpbmdIYW5kbGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoZ2VzdHVyZS5zdGF0dXMgPT09ICdwYW5uaW5nJykge1xuICAgICAgZmlyZUV2ZW50KGdlc3R1cmUuZWxlbWVudCwgJ3BhbmVuZCcsIHtcbiAgICAgICAgdG91Y2g6IHRvdWNoLFxuICAgICAgICB0b3VjaGVzOiBldmVudC50b3VjaGVzLFxuICAgICAgICBjaGFuZ2VkVG91Y2hlczogZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgIHRvdWNoRXZlbnQ6IGV2ZW50XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGdlc3R1cmUuc3RhdHVzID09PSAncHJlc3NpbmcnKSB7XG4gICAgICBmaXJlRXZlbnQoZ2VzdHVyZS5lbGVtZW50LCAncHJlc3NlbmQnLCB7XG4gICAgICAgIHRvdWNoOiB0b3VjaCxcbiAgICAgICAgdG91Y2hFdmVudDogZXZlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgICBkZWxldGUgZ2VzdHVyZXNbaWRdO1xuICB9XG5cbiAgaWYgKE9iamVjdC5rZXlzKGdlc3R1cmVzKS5sZW5ndGggPT09IDApIHtcbiAgICBkb2NFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0b3VjaG1vdmVIYW5kbGVyLCBmYWxzZSk7XG4gICAgZG9jRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0b3VjaGVuZEhhbmRsZXIsIGZhbHNlKTtcbiAgICBkb2NFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaGNhbmNlbCcsIHRvdWNoY2FuY2VsSGFuZGxlciwgZmFsc2UpO1xuICB9XG59XG5cbmlmICghaXNJbml0aWFsaXplZCkge1xuICBkb2NFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdG91Y2hzdGFydEhhbmRsZXIsIGZhbHNlKTtcbiAgaXNJbml0aWFsaXplZCA9IHRydWU7XG59XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vLyBQcm9kdWN0aW9uIHN0ZXBzIG9mIEVDTUEtMjYyLCBFZGl0aW9uIDYsIDIyLjEuMi4xXG4vLyBSZWZlcmVuY2U6IGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1hcnJheS5mcm9tXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuaWYgKCFBcnJheS5mcm9tKSB7XG4gIEFycmF5LmZyb20gPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbiAgICB2YXIgaXNDYWxsYWJsZSA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmNhbGwoZm4pID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuICAgIH07XG4gICAgdmFyIHRvSW50ZWdlciA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbnVtYmVyID0gTnVtYmVyKHZhbHVlKTtcbiAgICAgIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgaWYgKG51bWJlciA9PT0gMCB8fCAhaXNGaW5pdGUobnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIChudW1iZXIgPiAwID8gMSA6IC0xKSAqIE1hdGguZmxvb3IoTWF0aC5hYnMobnVtYmVyKSk7XG4gICAgfTtcbiAgICB2YXIgbWF4U2FmZUludGVnZXIgPSBNYXRoLnBvdygyLCA1MykgLSAxO1xuICAgIHZhciB0b0xlbmd0aCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICB2YXIgbGVuID0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChsZW4sIDApLCBtYXhTYWZlSW50ZWdlcik7XG4gICAgfTtcblxuICAgIC8vIFRoZSBsZW5ndGggcHJvcGVydHkgb2YgdGhlIGZyb20gbWV0aG9kIGlzIDEuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlLyosIG1hcEZuLCB0aGlzQXJnICovKSB7XG4gICAgICAvLyAxLiBMZXQgQyBiZSB0aGUgdGhpcyB2YWx1ZS5cbiAgICAgIHZhciBDID0gdGhpcztcblxuICAgICAgLy8gMi4gTGV0IGl0ZW1zIGJlIFRvT2JqZWN0KGFycmF5TGlrZSkuXG4gICAgICB2YXIgaXRlbXMgPSBPYmplY3QoYXJyYXlMaWtlKTtcblxuICAgICAgLy8gMy4gUmV0dXJuSWZBYnJ1cHQoaXRlbXMpLlxuICAgICAgaWYgKGFycmF5TGlrZSA9PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LmZyb20gcmVxdWlyZXMgYW4gYXJyYXktbGlrZSBvYmplY3QgLSBub3QgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgICAgIH1cblxuICAgICAgLy8gNC4gSWYgbWFwZm4gaXMgdW5kZWZpbmVkLCB0aGVuIGxldCBtYXBwaW5nIGJlIGZhbHNlLlxuICAgICAgdmFyIG1hcEZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB2b2lkIHVuZGVmaW5lZDtcbiAgICAgIHZhciBUO1xuICAgICAgaWYgKHR5cGVvZiBtYXBGbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gNS4gZWxzZVxuICAgICAgICAvLyA1LiBhIElmIElzQ2FsbGFibGUobWFwZm4pIGlzIGZhbHNlLCB0aHJvdyBhIFR5cGVFcnJvciBleGNlcHRpb24uXG4gICAgICAgIGlmICghaXNDYWxsYWJsZShtYXBGbikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcnJheS5mcm9tOiB3aGVuIHByb3ZpZGVkLCB0aGUgc2Vjb25kIGFyZ3VtZW50IG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gNS4gYi4gSWYgdGhpc0FyZyB3YXMgc3VwcGxpZWQsIGxldCBUIGJlIHRoaXNBcmc7IGVsc2UgbGV0IFQgYmUgdW5kZWZpbmVkLlxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICBUID0gYXJndW1lbnRzWzJdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIDEwLiBMZXQgbGVuVmFsdWUgYmUgR2V0KGl0ZW1zLCBcImxlbmd0aFwiKS5cbiAgICAgIC8vIDExLiBMZXQgbGVuIGJlIFRvTGVuZ3RoKGxlblZhbHVlKS5cbiAgICAgIHZhciBsZW4gPSB0b0xlbmd0aChpdGVtcy5sZW5ndGgpO1xuXG4gICAgICAvLyAxMy4gSWYgSXNDb25zdHJ1Y3RvcihDKSBpcyB0cnVlLCB0aGVuXG4gICAgICAvLyAxMy4gYS4gTGV0IEEgYmUgdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCBvZiBDIHdpdGggYW4gYXJndW1lbnQgbGlzdCBjb250YWluaW5nIHRoZSBzaW5nbGUgaXRlbSBsZW4uXG4gICAgICAvLyAxNC4gYS4gRWxzZSwgTGV0IEEgYmUgQXJyYXlDcmVhdGUobGVuKS5cbiAgICAgIHZhciBBID0gaXNDYWxsYWJsZShDKSA/IE9iamVjdChuZXcgQyhsZW4pKSA6IG5ldyBBcnJheShsZW4pO1xuXG4gICAgICAvLyAxNi4gTGV0IGsgYmUgMC5cbiAgICAgIHZhciBrID0gMDtcbiAgICAgIC8vIDE3LiBSZXBlYXQsIHdoaWxlIGsgPCBsZW7igKYgKGFsc28gc3RlcHMgYSAtIGgpXG4gICAgICB2YXIga1ZhbHVlO1xuICAgICAgd2hpbGUgKGsgPCBsZW4pIHtcbiAgICAgICAga1ZhbHVlID0gaXRlbXNba107XG4gICAgICAgIGlmIChtYXBGbikge1xuICAgICAgICAgIEFba10gPSB0eXBlb2YgVCA9PT0gJ3VuZGVmaW5lZCcgPyBtYXBGbihrVmFsdWUsIGspIDogbWFwRm4uY2FsbChULCBrVmFsdWUsIGspO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIEFba10gPSBrVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgayArPSAxO1xuICAgICAgfVxuICAgICAgLy8gMTguIExldCBwdXRTdGF0dXMgYmUgUHV0KEEsIFwibGVuZ3RoXCIsIGxlbiwgdHJ1ZSkuXG4gICAgICBBLmxlbmd0aCA9IGxlbjtcbiAgICAgIC8vIDIwLiBSZXR1cm4gQS5cbiAgICAgIHJldHVybiBBO1xuICAgIH07XG4gIH0oKSk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcEV4cG9ydHMgKHgpIHtcblx0cmV0dXJuIHggJiYgeC5fX2VzTW9kdWxlID8geFsnZGVmYXVsdCddIDogeDtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBfZ2xvYmFsID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIHsgX19nID0gZ2xvYmFsOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbn0pO1xuXG52YXIgX2NvcmUgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG52YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjEnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgeyBfX2UgPSBjb3JlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbn0pO1xuXG52YXIgX2lzT2JqZWN0ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XG59O1xuXG52YXIgaXNPYmplY3QgPSBfaXNPYmplY3Q7XG52YXIgX2FuT2JqZWN0ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7IHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTsgfVxuICByZXR1cm4gaXQ7XG59O1xuXG52YXIgX2ZhaWxzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gISFleGVjKCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxudmFyIF9kZXNjcmlwdG9ycyA9ICFfZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuXG52YXIgaXNPYmplY3QkMSA9IF9pc09iamVjdDtcbnZhciBkb2N1bWVudCQxID0gX2dsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QkMShkb2N1bWVudCQxKSAmJiBpc09iamVjdCQxKGRvY3VtZW50JDEuY3JlYXRlRWxlbWVudCk7XG52YXIgX2RvbUNyZWF0ZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudCQxLmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuXG52YXIgX2llOERvbURlZmluZSA9ICFfZGVzY3JpcHRvcnMgJiYgIV9mYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2RvbUNyZWF0ZSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG5cbi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0JDIgPSBfaXNPYmplY3Q7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbnZhciBfdG9QcmltaXRpdmUgPSBmdW5jdGlvbiAoaXQsIFMpIHtcbiAgaWYgKCFpc09iamVjdCQyKGl0KSkgeyByZXR1cm4gaXQ7IH1cbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QkMih2YWwgPSBmbi5jYWxsKGl0KSkpIHsgcmV0dXJuIHZhbDsgfVxuICBpZiAodHlwZW9mIChmbiA9IGl0LnZhbHVlT2YpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0JDIodmFsID0gZm4uY2FsbChpdCkpKSB7IHJldHVybiB2YWw7IH1cbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QkMih2YWwgPSBmbi5jYWxsKGl0KSkpIHsgcmV0dXJuIHZhbDsgfVxuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XG59O1xuXG52YXIgYW5PYmplY3QgPSBfYW5PYmplY3Q7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSBfaWU4RG9tRGVmaW5lO1xudmFyIHRvUHJpbWl0aXZlID0gX3RvUHJpbWl0aXZlO1xudmFyIGRQJDEgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbnZhciBmID0gX2Rlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB7IHRyeSB7XG4gICAgcmV0dXJuIGRQJDEoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfSB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHsgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTsgfVxuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSB7IE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlOyB9XG4gIHJldHVybiBPO1xufTtcblxudmFyIF9vYmplY3REcCA9IHtcblx0ZjogZlxufTtcblxudmFyIF9wcm9wZXJ0eURlc2MgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcblxudmFyIGRQID0gX29iamVjdERwO1xudmFyIGNyZWF0ZURlc2MgPSBfcHJvcGVydHlEZXNjO1xudmFyIF9oaWRlID0gX2Rlc2NyaXB0b3JzID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICByZXR1cm4gZFAuZihvYmplY3QsIGtleSwgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xudmFyIF9oYXMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG5cbnZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xudmFyIF91aWQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuXG52YXIgX3JlZGVmaW5lID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xudmFyIGdsb2JhbCA9IF9nbG9iYWw7XG52YXIgaGlkZSA9IF9oaWRlO1xudmFyIGhhcyA9IF9oYXM7XG52YXIgU1JDID0gX3VpZCgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxuX2NvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gJHRvU3RyaW5nLmNhbGwoaXQpO1xufTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsLCBzYWZlKSB7XG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xuICBpZiAoaXNGdW5jdGlvbikgeyBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7IH1cbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSB7IHJldHVybjsgfVxuICBpZiAoaXNGdW5jdGlvbikgeyBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTsgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2UgaWYgKCFzYWZlKSB7XG4gICAgZGVsZXRlIE9ba2V5XTtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSB7XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH1cbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XG59KTtcbn0pO1xuXG52YXIgX2FGdW5jdGlvbiA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHsgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTsgfVxuICByZXR1cm4gaXQ7XG59O1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSBfYUZ1bmN0aW9uO1xudmFyIF9jdHggPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSB7IHJldHVybiBmbjsgfVxuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcblxudmFyIGdsb2JhbCQxID0gX2dsb2JhbDtcbnZhciBjb3JlID0gX2NvcmU7XG52YXIgaGlkZSA9IF9oaWRlO1xudmFyIHJlZGVmaW5lID0gX3JlZGVmaW5lO1xudmFyIGN0eCA9IF9jdHg7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0JDEgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XG4gIHZhciBJU19GT1JDRUQgPSB0eXBlICYgJGV4cG9ydCQxLkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydCQxLkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydCQxLlM7XG4gIHZhciBJU19QUk9UTyA9IHR5cGUgJiAkZXhwb3J0JDEuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydCQxLkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwkMSA6IElTX1NUQVRJQyA/IGdsb2JhbCQxW25hbWVdIHx8IChnbG9iYWwkMVtuYW1lXSA9IHt9KSA6IChnbG9iYWwkMVtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcbiAgdmFyIGV4cG9ydHMgPSBJU19HTE9CQUwgPyBjb3JlIDogY29yZVtuYW1lXSB8fCAoY29yZVtuYW1lXSA9IHt9KTtcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XG4gIGlmIChJU19HTE9CQUwpIHsgc291cmNlID0gbmFtZTsgfVxuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsJDEpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIGlmICh0YXJnZXQpIHsgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQkMS5VKTsgfVxuICAgIC8vIGV4cG9ydFxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSB7IGhpZGUoZXhwb3J0cywga2V5LCBleHApOyB9XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSB7IGV4cFByb3RvW2tleV0gPSBvdXQ7IH1cbiAgfVxufTtcbmdsb2JhbCQxLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQkMS5GID0gMTsgICAvLyBmb3JjZWRcbiRleHBvcnQkMS5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQkMS5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQkMS5QID0gODsgICAvLyBwcm90b1xuJGV4cG9ydCQxLkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQkMS5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0JDEuVSA9IDY0OyAgLy8gc2FmZVxuJGV4cG9ydCQxLlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbnZhciBfZXhwb3J0ID0gJGV4cG9ydCQxO1xuXG52YXIgdG9TdHJpbmckMSA9IHt9LnRvU3RyaW5nO1xuXG52YXIgX2NvZiA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmckMS5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuXG4vLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xudmFyIGNvZiA9IF9jb2Y7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG52YXIgX2lvYmplY3QgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY29mKGl0KSA9PSAnU3RyaW5nJyA/IGl0LnNwbGl0KCcnKSA6IE9iamVjdChpdCk7XG59O1xuXG4vLyA3LjIuMSBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KVxudmFyIF9kZWZpbmVkID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHsgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpOyB9XG4gIHJldHVybiBpdDtcbn07XG5cbi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QkMSA9IF9pb2JqZWN0O1xudmFyIGRlZmluZWQgPSBfZGVmaW5lZDtcbnZhciBfdG9Jb2JqZWN0ID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0JDEoZGVmaW5lZChpdCkpO1xufTtcblxuLy8gNy4xLjQgVG9JbnRlZ2VyXG52YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgX3RvSW50ZWdlciA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXNOYU4oaXQgPSAraXQpID8gMCA6IChpdCA+IDAgPyBmbG9vciA6IGNlaWwpKGl0KTtcbn07XG5cbi8vIDcuMS4xNSBUb0xlbmd0aFxudmFyIHRvSW50ZWdlciA9IF90b0ludGVnZXI7XG52YXIgbWluID0gTWF0aC5taW47XG52YXIgX3RvTGVuZ3RoID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuXG52YXIgdG9JbnRlZ2VyJDEgPSBfdG9JbnRlZ2VyO1xudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiQxID0gTWF0aC5taW47XG52YXIgX3RvQWJzb2x1dGVJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyJDEoaW5kZXgpO1xuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbiQxKGluZGV4LCBsZW5ndGgpO1xufTtcblxuLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QkMSA9IF90b0lvYmplY3Q7XG52YXIgdG9MZW5ndGggPSBfdG9MZW5ndGg7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gX3RvQWJzb2x1dGVJbmRleDtcbnZhciBfYXJyYXlJbmNsdWRlcyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QkMSgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgeyB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IH0gZWxzZSB7IGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7IGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSB7IHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwOyB9XG4gICAgfSB9IH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbnZhciBnbG9iYWwkMiA9IF9nbG9iYWw7XG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWwkMltTSEFSRURdIHx8IChnbG9iYWwkMltTSEFSRURdID0ge30pO1xudmFyIF9zaGFyZWQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0ge30pO1xufTtcblxudmFyIHNoYXJlZCA9IF9zaGFyZWQoJ2tleXMnKTtcbnZhciB1aWQgPSBfdWlkO1xudmFyIF9zaGFyZWRLZXkgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBzaGFyZWRba2V5XSB8fCAoc2hhcmVkW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuXG52YXIgaGFzID0gX2hhcztcbnZhciB0b0lPYmplY3QgPSBfdG9Jb2JqZWN0O1xudmFyIGFycmF5SW5kZXhPZiA9IF9hcnJheUluY2x1ZGVzKGZhbHNlKTtcbnZhciBJRV9QUk9UTyA9IF9zaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBfb2JqZWN0S2V5c0ludGVybmFsID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIHsgaWYgKGtleSAhPSBJRV9QUk9UTykgeyBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpOyB9IH1cbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgeyBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG52YXIgX2VudW1CdWdLZXlzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuXG4vLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IF9vYmplY3RLZXlzSW50ZXJuYWw7XG52YXIgZW51bUJ1Z0tleXMgPSBfZW51bUJ1Z0tleXM7XG5cbnZhciBfb2JqZWN0S2V5cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcblxudmFyIGYkMSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbnZhciBfb2JqZWN0R29wcyA9IHtcblx0ZjogZiQxXG59O1xuXG52YXIgZiQyID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbnZhciBfb2JqZWN0UGllID0ge1xuXHRmOiBmJDJcbn07XG5cbi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkJDEgPSBfZGVmaW5lZDtcbnZhciBfdG9PYmplY3QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkJDEoaXQpKTtcbn07XG5cbi8vIDE5LjEuMi4xIE9iamVjdC5hc3NpZ24odGFyZ2V0LCBzb3VyY2UsIC4uLilcbnZhciBnZXRLZXlzID0gX29iamVjdEtleXM7XG52YXIgZ09QUyA9IF9vYmplY3RHb3BzO1xudmFyIHBJRSA9IF9vYmplY3RQaWU7XG52YXIgdG9PYmplY3QgPSBfdG9PYmplY3Q7XG52YXIgSU9iamVjdCA9IF9pb2JqZWN0O1xudmFyICRhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbnZhciBfb2JqZWN0QXNzaWduID0gISRhc3NpZ24gfHwgX2ZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBTID0gU3ltYm9sKCk7XG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtTXSA9IDc7XG4gIEsuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGspIHsgQltrXSA9IGs7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcbiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAxO1xuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICB3aGlsZSAoYUxlbiA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50cyQxW2luZGV4KytdKTtcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7IGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSB7IFRba2V5XSA9IFNba2V5XTsgfSB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcblxuLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcbnZhciAkZXhwb3J0ID0gX2V4cG9ydDtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogX29iamVjdEFzc2lnbiB9KTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uLzU1OTM1NTRcblxuLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5pZiAoIU9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICBPYmplY3Quc2V0UHJvdG90eXBlT2YgPSAoZnVuY3Rpb24oT2JqZWN0LCBtYWdpYykge1xuICAgIHZhciBzZXQ7XG4gICAgZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgIHNldC5jYWxsKE8sIHByb3RvKTtcbiAgICAgIHJldHVybiBPO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgLy8gdGhpcyB3b3JrcyBhbHJlYWR5IGluIEZpcmVmb3ggYW5kIFNhZmFyaVxuICAgICAgc2V0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCBtYWdpYykuc2V0O1xuICAgICAgc2V0LmNhbGwoe30sIG51bGwpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gSUUgPCAxMSBjYW5ub3QgYmUgc2hpbW1lZFxuICAgICAgICBPYmplY3QucHJvdG90eXBlICE9PSB7fVttYWdpY10gfHxcbiAgICAgICAgLy8gbmVpdGhlciBjYW4gYW55IGJyb3dzZXIgdGhhdCBhY3R1YWxseVxuICAgICAgICAvLyBpbXBsZW1lbnRlZCBfX3Byb3RvX18gY29ycmVjdGx5XG4gICAgICAgIC8vIChhbGwgYnV0IG9sZCBWOCB3aWxsIHJldHVybiBoZXJlKVxuICAgICAgICB7X19wcm90b19fOiBudWxsfS5fX3Byb3RvX18gPT09IHZvaWQgMFxuICAgICAgICAvLyB0aGlzIGNhc2UgbWVhbnMgbnVsbCBvYmplY3RzIGNhbm5vdCBiZSBwYXNzZWRcbiAgICAgICAgLy8gdGhyb3VnaCBzZXRQcm90b3R5cGVPZiBpbiBhIHJlbGlhYmxlIHdheVxuICAgICAgICAvLyB3aGljaCBtZWFucyBoZXJlIGEgKipTaGFtKiogaXMgbmVlZGVkIGluc3RlYWRcbiAgICAgICkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBub2RlanMgMC44IGFuZCAwLjEwIGFyZSAoYnVnZ3kgYW5kLi4pIGZpbmUgaGVyZVxuICAgICAgLy8gcHJvYmFibHkgQ2hyb21lIG9yIHNvbWUgb2xkIE1vYmlsZSBzdG9jayBicm93c2VyXG4gICAgICBzZXQgPSBmdW5jdGlvbihwcm90bykge1xuICAgICAgICB0aGlzW21hZ2ljXSA9IHByb3RvO1xuICAgICAgfTtcbiAgICAgIC8vIHBsZWFzZSBub3RlIHRoYXQgdGhpcyB3aWxsICoqbm90Kiogd29ya1xuICAgICAgLy8gaW4gdGhvc2UgYnJvd3NlcnMgdGhhdCBkbyBub3QgaW5oZXJpdFxuICAgICAgLy8gX19wcm90b19fIGJ5IG1pc3Rha2UgZnJvbSBPYmplY3QucHJvdG90eXBlXG4gICAgICAvLyBpbiB0aGVzZSBjYXNlcyB3ZSBzaG91bGQgcHJvYmFibHkgdGhyb3cgYW4gZXJyb3JcbiAgICAgIC8vIG9yIGF0IGxlYXN0IGJlIGluZm9ybWVkIGFib3V0IHRoZSBpc3N1ZVxuICAgICAgc2V0UHJvdG90eXBlT2YucG9seWZpbGwgPSBzZXRQcm90b3R5cGVPZihcbiAgICAgICAgc2V0UHJvdG90eXBlT2Yoe30sIG51bGwpLFxuICAgICAgICBPYmplY3QucHJvdG90eXBlXG4gICAgICApIGluc3RhbmNlb2YgT2JqZWN0O1xuICAgICAgLy8gc2V0UHJvdG90eXBlT2YucG9seWZpbGwgPT09IHRydWUgbWVhbnMgaXQgd29ya3MgYXMgbWVhbnRcbiAgICAgIC8vIHNldFByb3RvdHlwZU9mLnBvbHlmaWxsID09PSBmYWxzZSBtZWFucyBpdCdzIG5vdCAxMDAlIHJlbGlhYmxlXG4gICAgICAvLyBzZXRQcm90b3R5cGVPZi5wb2x5ZmlsbCA9PT0gdW5kZWZpbmVkXG4gICAgICAvLyBvclxuICAgICAgLy8gc2V0UHJvdG90eXBlT2YucG9seWZpbGwgPT0gIG51bGwgbWVhbnMgaXQncyBub3QgYSBwb2x5ZmlsbFxuICAgICAgLy8gd2hpY2ggbWVhbnMgaXQgd29ya3MgYXMgZXhwZWN0ZWRcbiAgICAgIC8vIHdlIGNhbiBldmVuIGRlbGV0ZSBPYmplY3QucHJvdG90eXBlLl9fcHJvdG9fXztcbiAgICB9XG4gICAgcmV0dXJuIHNldFByb3RvdHlwZU9mO1xuICB9KE9iamVjdCwgJ19fcHJvdG9fXycpKTtcbn1cblxudmFyIF93a3MgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlKSB7XG52YXIgc3RvcmUgPSBfc2hhcmVkKCd3a3MnKTtcbnZhciB1aWQgPSBfdWlkO1xudmFyIFN5bWJvbCA9IF9nbG9iYWwuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG59KTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YkMSA9IF9jb2Y7XG52YXIgVEFHID0gX3drcygndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mJDEoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxudmFyIF9jbGFzc29mID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YkMShPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mJDEoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xufTtcblxuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IF9jbGFzc29mO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbX3drcygndG9TdHJpbmdUYWcnKV0gPSAneic7XG5pZiAodGVzdCArICcnICE9ICdbb2JqZWN0IHpdJykge1xuICBfcmVkZWZpbmUoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cblxudmFyIHRvSW50ZWdlciQyID0gX3RvSW50ZWdlcjtcbnZhciBkZWZpbmVkJDIgPSBfZGVmaW5lZDtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG52YXIgX3N0cmluZ0F0ID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xuICAgIHZhciBzID0gU3RyaW5nKGRlZmluZWQkMih0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIkMihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgeyByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7IH1cbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG52YXIgX2xpYnJhcnkgPSBmYWxzZTtcblxudmFyIF9pdGVyYXRvcnMgPSB7fTtcblxudmFyIGRQJDIgPSBfb2JqZWN0RHA7XG52YXIgYW5PYmplY3QkMiA9IF9hbk9iamVjdDtcbnZhciBnZXRLZXlzJDEgPSBfb2JqZWN0S2V5cztcblxudmFyIF9vYmplY3REcHMgPSBfZGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdCQyKE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMkMShQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaSA9IDA7XG4gIHZhciBQO1xuICB3aGlsZSAobGVuZ3RoID4gaSkgeyBkUCQyLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7IH1cbiAgcmV0dXJuIE87XG59O1xuXG52YXIgZG9jdW1lbnQkMiA9IF9nbG9iYWwuZG9jdW1lbnQ7XG52YXIgX2h0bWwgPSBkb2N1bWVudCQyICYmIGRvY3VtZW50JDIuZG9jdW1lbnRFbGVtZW50O1xuXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCQxID0gX2FuT2JqZWN0O1xudmFyIGRQcyA9IF9vYmplY3REcHM7XG52YXIgZW51bUJ1Z0tleXMkMSA9IF9lbnVtQnVnS2V5cztcbnZhciBJRV9QUk9UTyQxID0gX3NoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUkMSA9ICdwcm90b3R5cGUnO1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgY3JlYXRlRGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcbiAgdmFyIGlmcmFtZSA9IF9kb21DcmVhdGUoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzJDEubGVuZ3RoO1xuICB2YXIgbHQgPSAnPCc7XG4gIHZhciBndCA9ICc+JztcbiAgdmFyIGlmcmFtZURvY3VtZW50O1xuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgX2h0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgeyBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEUkMV1bZW51bUJ1Z0tleXMkMVtpXV07IH1cbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbnZhciBfb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRSQxXSA9IGFuT2JqZWN0JDEoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFJDFdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPJDFdID0gTztcbiAgfSBlbHNlIHsgcmVzdWx0ID0gY3JlYXRlRGljdCgpOyB9XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG5cbnZhciBkZWYgPSBfb2JqZWN0RHAuZjtcbnZhciBoYXMkMiA9IF9oYXM7XG52YXIgVEFHJDEgPSBfd2tzKCd0b1N0cmluZ1RhZycpO1xuXG52YXIgX3NldFRvU3RyaW5nVGFnID0gZnVuY3Rpb24gKGl0LCB0YWcsIHN0YXQpIHtcbiAgaWYgKGl0ICYmICFoYXMkMihpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHJDEpKSB7IGRlZihpdCwgVEFHJDEsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pOyB9XG59O1xuXG52YXIgY3JlYXRlJDEgPSBfb2JqZWN0Q3JlYXRlO1xudmFyIGRlc2NyaXB0b3IgPSBfcHJvcGVydHlEZXNjO1xudmFyIHNldFRvU3RyaW5nVGFnJDEgPSBfc2V0VG9TdHJpbmdUYWc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcblxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcbl9oaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBfd2tzKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxudmFyIF9pdGVyQ3JlYXRlID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZSQxKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnJDEoQ29uc3RydWN0b3IsIE5BTUUgKyAnIEl0ZXJhdG9yJyk7XG59O1xuXG4vLyAxOS4xLjIuOSAvIDE1LjIuMy4yIE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxudmFyIGhhcyQzID0gX2hhcztcbnZhciB0b09iamVjdCQxID0gX3RvT2JqZWN0O1xudmFyIElFX1BST1RPJDIgPSBfc2hhcmVkS2V5KCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxudmFyIF9vYmplY3RHcG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0JDEoTyk7XG4gIGlmIChoYXMkMyhPLCBJRV9QUk9UTyQyKSkgeyByZXR1cm4gT1tJRV9QUk9UTyQyXTsgfVxuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG5cbnZhciBMSUJSQVJZID0gX2xpYnJhcnk7XG52YXIgJGV4cG9ydCQyID0gX2V4cG9ydDtcbnZhciByZWRlZmluZSQxID0gX3JlZGVmaW5lO1xudmFyIGhpZGUkMSA9IF9oaWRlO1xudmFyIGhhcyQxID0gX2hhcztcbnZhciBJdGVyYXRvcnMgPSBfaXRlcmF0b3JzO1xudmFyICRpdGVyQ3JlYXRlID0gX2l0ZXJDcmVhdGU7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSBfc2V0VG9TdHJpbmdUYWc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBfb2JqZWN0R3BvO1xudmFyIElURVJBVE9SID0gX3drcygnaXRlcmF0b3InKTtcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxudmFyIEZGX0lURVJBVE9SID0gJ0BAaXRlcmF0b3InO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxudmFyIF9pdGVyRGVmaW5lID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgeyByZXR1cm4gcHJvdG9ba2luZF07IH1cbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmICFoYXMkMShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IpKSB7IGhpZGUkMShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpOyB9XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlJDEocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XG4gIH1cbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcbiAgSXRlcmF0b3JzW1RBR10gPSByZXR1cm5UaGlzO1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IERFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xuICAgIH07XG4gICAgaWYgKEZPUkNFRCkgeyBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSB7IHJlZGVmaW5lJDEocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTsgfVxuICAgIH0gfSBlbHNlIHsgJGV4cG9ydCQyKCRleHBvcnQkMi5QICsgJGV4cG9ydCQyLkYgKiAoQlVHR1kgfHwgVkFMVUVTX0JVRyksIE5BTUUsIG1ldGhvZHMpOyB9XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuXG52YXIgJGF0ID0gX3N0cmluZ0F0KHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5faXRlckRlZmluZShTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuLy8gMjEuMS41LjIuMSAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHQoKVxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgTyA9IHRoaXMuX3Q7XG4gIHZhciBpbmRleCA9IHRoaXMuX2k7XG4gIHZhciBwb2ludDtcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSB7IHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTsgfVxuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xuICByZXR1cm4geyB2YWx1ZTogcG9pbnQsIGRvbmU6IGZhbHNlIH07XG59KTtcblxuLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxudmFyIFVOU0NPUEFCTEVTID0gX3drcygndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgeyBfaGlkZShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pOyB9XG52YXIgX2FkZFRvVW5zY29wYWJsZXMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcblxudmFyIF9pdGVyU3RlcCA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcblxudmFyIGFkZFRvVW5zY29wYWJsZXMgPSBfYWRkVG9VbnNjb3BhYmxlcztcbnZhciBzdGVwID0gX2l0ZXJTdGVwO1xudmFyIEl0ZXJhdG9ycyQyID0gX2l0ZXJhdG9ycztcbnZhciB0b0lPYmplY3QkMiA9IF90b0lvYmplY3Q7XG5cbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXG4vLyAyMi4xLjMuMjkgQXJyYXkucHJvdG90eXBlLnZhbHVlcygpXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcbnZhciBlczZfYXJyYXlfaXRlcmF0b3IgPSBfaXRlckRlZmluZShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHRoaXMuX3QgPSB0b0lPYmplY3QkMihpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSB7IHJldHVybiBzdGVwKDAsIGluZGV4KTsgfVxuICBpZiAoa2luZCA9PSAndmFsdWVzJykgeyByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7IH1cbiAgcmV0dXJuIHN0ZXAoMCwgW2luZGV4LCBPW2luZGV4XV0pO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyUgKDkuNC40LjYsIDkuNC40LjcpXG5JdGVyYXRvcnMkMi5Bcmd1bWVudHMgPSBJdGVyYXRvcnMkMi5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbnZhciAkaXRlcmF0b3JzID0gZXM2X2FycmF5X2l0ZXJhdG9yO1xudmFyIGdldEtleXMkMiA9IF9vYmplY3RLZXlzO1xudmFyIHJlZGVmaW5lJDIgPSBfcmVkZWZpbmU7XG52YXIgZ2xvYmFsJDMgPSBfZ2xvYmFsO1xudmFyIGhpZGUkMiA9IF9oaWRlO1xudmFyIEl0ZXJhdG9ycyQxID0gX2l0ZXJhdG9ycztcbnZhciB3a3MgPSBfd2tzO1xudmFyIElURVJBVE9SJDEgPSB3a3MoJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycyQxLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMkMihET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWwkM1tOQU1FXTtcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgdmFyIGtleTtcbiAgaWYgKHByb3RvKSB7XG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUiQxXSkgeyBoaWRlJDIocHJvdG8sIElURVJBVE9SJDEsIEFycmF5VmFsdWVzKTsgfVxuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIHsgaGlkZSQyKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTsgfVxuICAgIEl0ZXJhdG9ycyQxW05BTUVdID0gQXJyYXlWYWx1ZXM7XG4gICAgaWYgKGV4cGxpY2l0KSB7IGZvciAoa2V5IGluICRpdGVyYXRvcnMpIHsgaWYgKCFwcm90b1trZXldKSB7IHJlZGVmaW5lJDIocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTsgfSB9IH1cbiAgfVxufVxuXG52YXIgX2FuSW5zdGFuY2UgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSB8fCAoZm9yYmlkZGVuRmllbGQgIT09IHVuZGVmaW5lZCAmJiBmb3JiaWRkZW5GaWVsZCBpbiBpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xuICB9IHJldHVybiBpdDtcbn07XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCQzID0gX2FuT2JqZWN0O1xudmFyIF9pdGVyQ2FsbCA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCQzKHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlKSB7XG4gICAgdmFyIHJldCA9IGl0ZXJhdG9yWydyZXR1cm4nXTtcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIHsgYW5PYmplY3QkMyhyZXQuY2FsbChpdGVyYXRvcikpOyB9XG4gICAgdGhyb3cgZTtcbiAgfVxufTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyQzID0gX2l0ZXJhdG9ycztcbnZhciBJVEVSQVRPUiQyID0gX3drcygnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvJDEgPSBBcnJheS5wcm90b3R5cGU7XG5cbnZhciBfaXNBcnJheUl0ZXIgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycyQzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvJDFbSVRFUkFUT1IkMl0gPT09IGl0KTtcbn07XG5cbnZhciBjbGFzc29mJDIgPSBfY2xhc3NvZjtcbnZhciBJVEVSQVRPUiQzID0gX3drcygnaXRlcmF0b3InKTtcbnZhciBJdGVyYXRvcnMkNCA9IF9pdGVyYXRvcnM7XG52YXIgY29yZV9nZXRJdGVyYXRvck1ldGhvZCA9IF9jb3JlLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHsgcmV0dXJuIGl0W0lURVJBVE9SJDNdXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxuICAgIHx8IEl0ZXJhdG9ycyQ0W2NsYXNzb2YkMihpdCldOyB9XG59O1xuXG52YXIgX2Zvck9mID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xudmFyIGN0eCA9IF9jdHg7XG52YXIgY2FsbCA9IF9pdGVyQ2FsbDtcbnZhciBpc0FycmF5SXRlciA9IF9pc0FycmF5SXRlcjtcbnZhciBhbk9iamVjdCA9IF9hbk9iamVjdDtcbnZhciB0b0xlbmd0aCA9IF90b0xlbmd0aDtcbnZhciBnZXRJdGVyRm4gPSBjb3JlX2dldEl0ZXJhdG9yTWV0aG9kO1xudmFyIEJSRUFLID0ge307XG52YXIgUkVUVVJOID0ge307XG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBlbnRyaWVzLCBmbiwgdGhhdCwgSVRFUkFUT1IpIHtcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgeyB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTsgfVxuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIHsgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcbiAgICBpZiAocmVzdWx0ID09PSBCUkVBSyB8fCByZXN1bHQgPT09IFJFVFVSTikgeyByZXR1cm4gcmVzdWx0OyB9XG4gIH0gfSBlbHNlIHsgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSB7IHJldHVybiByZXN1bHQ7IH1cbiAgfSB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG59KTtcblxuLy8gNy4zLjIwIFNwZWNpZXNDb25zdHJ1Y3RvcihPLCBkZWZhdWx0Q29uc3RydWN0b3IpXG52YXIgYW5PYmplY3QkNCA9IF9hbk9iamVjdDtcbnZhciBhRnVuY3Rpb24kMiA9IF9hRnVuY3Rpb247XG52YXIgU1BFQ0lFUyA9IF93a3MoJ3NwZWNpZXMnKTtcbnZhciBfc3BlY2llc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdCQ0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0JDQoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24kMihTKTtcbn07XG5cbi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxudmFyIF9pbnZva2UgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcblxudmFyIGN0eCQyID0gX2N0eDtcbnZhciBpbnZva2UgPSBfaW52b2tlO1xudmFyIGh0bWwgPSBfaHRtbDtcbnZhciBjZWwgPSBfZG9tQ3JlYXRlO1xudmFyIGdsb2JhbCQ1ID0gX2dsb2JhbDtcbnZhciBwcm9jZXNzJDEgPSBnbG9iYWwkNS5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwkNS5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsJDUuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwkNS5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbCQ1LkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXI7XG52YXIgY2hhbm5lbDtcbnZhciBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgeyBhcmdzLnB1c2goYXJndW1lbnRzJDFbaSsrXSk7IH1cbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKF9jb2YocHJvY2VzcyQxKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2VzcyQxLm5leHRUaWNrKGN0eCQyKHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eCQyKHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eCQyKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwkNS5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwkNS5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbCQ1LnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwkNS5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eCQyKHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG52YXIgX3Rhc2sgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcblxudmFyIGdsb2JhbCQ2ID0gX2dsb2JhbDtcbnZhciBtYWNyb3Rhc2sgPSBfdGFzay5zZXQ7XG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwkNi5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbCQ2LldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyQyID0gZ2xvYmFsJDYucHJvY2VzcztcbnZhciBQcm9taXNlJDEgPSBnbG9iYWwkNi5Qcm9taXNlO1xudmFyIGlzTm9kZSQxID0gX2NvZihwcm9jZXNzJDIpID09ICdwcm9jZXNzJztcblxudmFyIF9taWNyb3Rhc2sgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XG5cbiAgdmFyIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChpc05vZGUkMSAmJiAocGFyZW50ID0gcHJvY2VzcyQyLmRvbWFpbikpIHsgcGFyZW50LmV4aXQoKTsgfVxuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIHsgbm90aWZ5KCk7IH1cbiAgICAgICAgZWxzZSB7IGxhc3QgPSB1bmRlZmluZWQ7IH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgeyBwYXJlbnQuZW50ZXIoKTsgfVxuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSQxKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2VzcyQyLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXJcbiAgfSBlbHNlIGlmIChPYnNlcnZlcikge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UkMSAmJiBQcm9taXNlJDEucmVzb2x2ZSkge1xuICAgIHZhciBwcm9taXNlID0gUHJvbWlzZSQxLnJlc29sdmUoKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwkNiwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIHsgbGFzdC5uZXh0ID0gdGFzazsgfVxuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcblxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcbnZhciBhRnVuY3Rpb24kMyA9IF9hRnVuY3Rpb247XG5cbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB7IHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTsgfVxuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24kMyhyZXNvbHZlKTtcbiAgdGhpcy5yZWplY3QgPSBhRnVuY3Rpb24kMyhyZWplY3QpO1xufVxuXG52YXIgZiQzID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG5cbnZhciBfbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSB7XG5cdGY6IGYkM1xufTtcblxudmFyIF9wZXJmb3JtID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG5cbnZhciBhbk9iamVjdCQ1ID0gX2FuT2JqZWN0O1xudmFyIGlzT2JqZWN0JDQgPSBfaXNPYmplY3Q7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkkMSA9IF9uZXdQcm9taXNlQ2FwYWJpbGl0eTtcblxudmFyIF9wcm9taXNlUmVzb2x2ZSA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0JDUoQyk7XG4gIGlmIChpc09iamVjdCQ0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHsgcmV0dXJuIHg7IH1cbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkkMS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcblxudmFyIHJlZGVmaW5lJDMgPSBfcmVkZWZpbmU7XG52YXIgX3JlZGVmaW5lQWxsID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBzYWZlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHsgcmVkZWZpbmUkMyh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpOyB9XG4gIHJldHVybiB0YXJnZXQ7XG59O1xuXG52YXIgZ2xvYmFsJDcgPSBfZ2xvYmFsO1xudmFyIGRQJDMgPSBfb2JqZWN0RHA7XG52YXIgREVTQ1JJUFRPUlMgPSBfZGVzY3JpcHRvcnM7XG52YXIgU1BFQ0lFUyQxID0gX3drcygnc3BlY2llcycpO1xuXG52YXIgX3NldFNwZWNpZXMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsJDdbS0VZXTtcbiAgaWYgKERFU0NSSVBUT1JTICYmIEMgJiYgIUNbU1BFQ0lFUyQxXSkgeyBkUCQzLmYoQywgU1BFQ0lFUyQxLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTsgfVxufTtcblxudmFyIElURVJBVE9SJDQgPSBfd2tzKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1IkNF0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbnZhciBfaXRlckRldGVjdCA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUiQ0XSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1IkNF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcblxudmFyIExJQlJBUlkkMSA9IF9saWJyYXJ5O1xudmFyIGdsb2JhbCQ0ID0gX2dsb2JhbDtcbnZhciBjdHgkMSA9IF9jdHg7XG52YXIgY2xhc3NvZiQxID0gX2NsYXNzb2Y7XG52YXIgJGV4cG9ydCQzID0gX2V4cG9ydDtcbnZhciBpc09iamVjdCQzID0gX2lzT2JqZWN0O1xudmFyIGFGdW5jdGlvbiQxID0gX2FGdW5jdGlvbjtcbnZhciBhbkluc3RhbmNlID0gX2FuSW5zdGFuY2U7XG52YXIgZm9yT2YgPSBfZm9yT2Y7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX3NwZWNpZXNDb25zdHJ1Y3RvcjtcbnZhciB0YXNrID0gX3Rhc2suc2V0O1xudmFyIG1pY3JvdGFzayA9IF9taWNyb3Rhc2soKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IF9uZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBwZXJmb3JtID0gX3BlcmZvcm07XG52YXIgcHJvbWlzZVJlc29sdmUgPSBfcHJvbWlzZVJlc29sdmU7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IkMSA9IGdsb2JhbCQ0LlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsJDQucHJvY2VzcztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbCQ0W1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YkMShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgSW50ZXJuYWw7XG52YXIgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5O1xudmFyIE93blByb21pc2VDYXBhYmlsaXR5O1xudmFyIFdyYXBwZXI7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xuXG52YXIgVVNFX05BVElWRSA9ICEhZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxuICAgIHZhciBwcm9taXNlID0gJFByb21pc2UucmVzb2x2ZSgxKTtcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtfd2tzKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG59KCk7XG5cbi8vIGhlbHBlcnNcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciB0aGVuO1xuICByZXR1cm4gaXNPYmplY3QkMyhpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSB7IHJldHVybjsgfVxuICBwcm9taXNlLl9uID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcbiAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcbiAgICAgIHZhciByZXNvbHZlID0gcmVhY3Rpb24ucmVzb2x2ZTtcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xuICAgICAgdmFyIHJlc3VsdCwgdGhlbjtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgeyBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTsgfVxuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSB7IHJlc3VsdCA9IHZhbHVlOyB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7IGRvbWFpbi5lbnRlcigpOyB9XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChkb21haW4pIHsgZG9tYWluLmV4aXQoKTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yJDEoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7IHJlc29sdmUocmVzdWx0KTsgfVxuICAgICAgICB9IGVsc2UgeyByZWplY3QodmFsdWUpOyB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSB7IHJ1bihjaGFpbltpKytdKTsgfSAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSB7IG9uVW5oYW5kbGVkKHByb21pc2UpOyB9XG4gIH0pO1xufTtcbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwkNCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsJDQub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbCQ0LmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHVuaGFuZGxlZCAmJiByZXN1bHQuZSkgeyB0aHJvdyByZXN1bHQudjsgfVxuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICBpZiAocHJvbWlzZS5faCA9PSAxKSB7IHJldHVybiBmYWxzZTsgfVxuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9hIHx8IHByb21pc2UuX2M7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlYWN0aW9uO1xuICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkge1xuICAgIHJlYWN0aW9uID0gY2hhaW5baSsrXTtcbiAgICBpZiAocmVhY3Rpb24uZmFpbCB8fCAhaXNVbmhhbmRsZWQocmVhY3Rpb24ucHJvbWlzZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCQ0LCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhbmRsZXI7XG4gICAgaWYgKGlzTm9kZSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsJDQub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgeyByZXR1cm47IH1cbiAgcHJvbWlzZS5fZCA9IHRydWU7XG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxuICBwcm9taXNlLl92ID0gdmFsdWU7XG4gIHByb21pc2UuX3MgPSAyO1xuICBpZiAoIXByb21pc2UuX2EpIHsgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTsgfVxuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSB7IHJldHVybjsgfVxuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7IHRocm93IFR5cGVFcnJvciQxKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7IH1cbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgkMSgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCQxKCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgICAgIHByb21pc2UuX3MgPSAxO1xuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXG4gIH1cbn07XG5cbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXG5pZiAoIVVTRV9OQVRJVkUpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkUHJvbWlzZSwgUFJPTUlTRSwgJ19oJyk7XG4gICAgYUZ1bmN0aW9uJDEoZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCQxKCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4JDEoJHJlamVjdCwgdGhpcywgMSkpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgJHJlamVjdC5jYWxsKHRoaXMsIGVycik7XG4gICAgfVxuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcbiAgICB0aGlzLl9hID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIGNoZWNrZWQgaW4gaXNVbmhhbmRsZWQgcmVhY3Rpb25zXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxuICAgIHRoaXMuX3YgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gdmFsdWVcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcbiAgfTtcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gX3JlZGVmaW5lQWxsKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB7IHRoaXMuX2EucHVzaChyZWFjdGlvbik7IH1cbiAgICAgIGlmICh0aGlzLl9zKSB7IG5vdGlmeSh0aGlzLCBmYWxzZSk7IH1cbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xuICAgIH0sXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICAgIH1cbiAgfSk7XG4gIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBjdHgkMSgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgkMSgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0JDMoJGV4cG9ydCQzLkcgKyAkZXhwb3J0JDMuVyArICRleHBvcnQkMy5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XG5fc2V0VG9TdHJpbmdUYWcoJFByb21pc2UsIFBST01JU0UpO1xuX3NldFNwZWNpZXMoUFJPTUlTRSk7XG5XcmFwcGVyID0gX2NvcmVbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQkMygkZXhwb3J0JDMuUyArICRleHBvcnQkMy5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0JDMoJGV4cG9ydCQzLlMgKyAkZXhwb3J0JDMuRiAqIChMSUJSQVJZJDEgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSQxICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xuICB9XG59KTtcbiRleHBvcnQkMygkZXhwb3J0JDMuUyArICRleHBvcnQkMy5GICogIShVU0VfTkFUSVZFICYmIF9pdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgeyByZXR1cm47IH1cbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgeyByZWplY3QocmVzdWx0LnYpOyB9XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfSxcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSB7IHJlamVjdChyZXN1bHQudik7IH1cbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxudmFyIGxpYiQyID0gd2luZG93LmxpYiB8fCAod2luZG93LmxpYiA9IHt9KTtcblxuLyoqXG4gKiBWZXJzaW9uIGNsYXNzLlxuICogQGNsYXNzIGxpYi5lbnZ+VmVyc2lvblxuICogQHBhcmFtIHtTdHJpbmd9IHYgLSB2ZXJzaW9uIG51bWJlci5cbiAqL1xuZnVuY3Rpb24gVmVyc2lvbiAodikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3ZhbCcsIHtcbiAgICB2YWx1ZTogdi50b1N0cmluZygpLFxuICAgIGVudW1lcmFibGU6IHRydWVcbiAgfSk7XG5cbiAgLyoqXG4gICAqIGxhcmdlciB0aGFuXG4gICAqIEBtZXRob2QgZ3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHYgLSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICAgKiBAaW5zdGFuY2VcbiAgICogQG1lbWJlcm9mIFZlcnNpb25cbiAgICovXG4gIHRoaXMuZ3QgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBWZXJzaW9uLmNvbXBhcmUodGhpcywgdikgPiAwXG4gIH07XG5cbiAgLyoqXG4gICAqIGxhcmdlciB0aGFuIG9yIGVxdWFsIHRvLlxuICAgKiBAbWV0aG9kIGd0ZVxuICAgKiBAcGFyYW0ge1N0cmluZ30gdiAtIHZlcnNpb25cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gcmVzdWx0XG4gICAqIEBpbnN0YW5jZVxuICAgKiBAbWVtYmVyb2YgVmVyc2lvblxuICAgKi9cbiAgdGhpcy5ndGUgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBWZXJzaW9uLmNvbXBhcmUodGhpcywgdikgPj0gMFxuICB9O1xuXG4gIC8qKlxuICAgKiBsZXNzIHRoYW4uXG4gICAqIEBtZXRob2QgbHRcbiAgICogQHBhcmFtIHtTdHJpbmd9IHYgLSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICAgKiBAaW5zdGFuY2VcbiAgICogQG1lbWJlcm9mIFZlcnNpb25cbiAgICovXG4gIHRoaXMubHQgPSBmdW5jdGlvbiAodikge1xuICAgIHJldHVybiBWZXJzaW9uLmNvbXBhcmUodGhpcywgdikgPCAwXG4gIH07XG5cbiAgLyoqXG4gICAqIGxlc3MgdGhhbiBvciBlcXVhbCB0by5cbiAgICogQG1ldGhvZCBsdGVcbiAgICogQHBhcmFtIHtTdHJpbmd9IHYgLSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IHJlc3VsdFxuICAgKiBAaW5zdGFuY2VcbiAgICogQG1lbWJlcm9mIFZlcnNpb25cbiAgICovXG4gIHRoaXMubHRlID0gZnVuY3Rpb24gKHYpIHtcbiAgICByZXR1cm4gVmVyc2lvbi5jb21wYXJlKHRoaXMsIHYpIDw9IDBcbiAgfTtcblxuICAvKipcbiAgICogZXF1YWwgdG8uXG4gICAqIEBtZXRob2QgZXFcbiAgICogQHBhcmFtIHtTdHJpbmd9IHYgLSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IGVxdWFsIHRvXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAbWVtYmVyb2YgVmVyc2lvblxuICAgKi9cbiAgdGhpcy5lcSA9IGZ1bmN0aW9uICh2KSB7XG4gICAgcmV0dXJuIFZlcnNpb24uY29tcGFyZSh0aGlzLCB2KSA9PT0gMFxuICB9O1xufVxuXG4vKipcbiAqIHZlcnNpb24gbnVtYmVyIHN0cmluZy5cbiAqIEBtZXRob2QgdG9TdHJpbmdcbiAqIEByZXR1cm4ge1N0cmluZ30gY3VycmVudCB2ZXJzaW9uIG51bWJlciBzdHJpbmcuXG4gKiBAaW5zdGFuY2VcbiAqIEBtZW1iZXJvZiBWZXJzaW9uXG4gKi9cblZlcnNpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy52YWxcbn07XG5cbi8qKlxuICogcmV0dXJuIGN1cnJlbnQgdmVyc2lvbiBudW1iZXIuXG4gKiBAbWV0aG9kIHZhbHVlT2ZcbiAqIEByZXR1cm4ge0Jvb2xlYW59IHZlcnNpb24gbnVtYmVyXG4gKiBAaW5zdGFuY2VcbiAqIEBtZW1iZXJvZiBWZXJzaW9uXG4gKi9cblZlcnNpb24ucHJvdG90eXBlLnZhbHVlT2YgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB2ID0gdGhpcy52YWwuc3BsaXQoJy4nKTtcbiAgdmFyIHIgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG4gPSBwYXJzZUludCh2W2ldLCAxMCk7XG4gICAgaWYgKGlzTmFOKG4pKSB7XG4gICAgICBuID0gMDtcbiAgICB9XG4gICAgdmFyIHMgPSBuLnRvU3RyaW5nKCk7XG4gICAgaWYgKHMubGVuZ3RoIDwgNSkge1xuICAgICAgcyA9IEFycmF5KDYgLSBzLmxlbmd0aCkuam9pbignMCcpICsgcztcbiAgICB9XG4gICAgci5wdXNoKHMpO1xuICAgIGlmIChyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgci5wdXNoKCcuJyk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJzZUZsb2F0KHIuam9pbignJykpXG59O1xuXG4vKipcbiAqIGNvbXBhcmUgdHdvIHZlcnNpb25zLlxuICogQG1ldGhvZCBjb21wYXJlXG4gKiBAcGFyYW0ge1N0cmluZ30gdjEgLSB2ZXJzaW9uMVxuICogQHBhcmFtIHtTdHJpbmd9IHYyIC0gdmVyc2lvbjJcbiAqIEByZXR1cm4ge051bWJlcn0gMCBmb3IgZXF1YWxpdHnvvIwtMSBmb3IgbGVzcyB0aGFu77yMMSBmb3IgbGFyZ2VyIHRoYW4uXG4gKiBAbWVtYmVyb2YgVmVyc2lvblxuICovXG5WZXJzaW9uLmNvbXBhcmUgPSBmdW5jdGlvbiAodjEsIHYyKSB7XG4gIHYxID0gdjEudG9TdHJpbmcoKS5zcGxpdCgnLicpO1xuICB2MiA9IHYyLnRvU3RyaW5nKCkuc3BsaXQoJy4nKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2MS5sZW5ndGggfHwgaSA8IHYyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG4xID0gcGFyc2VJbnQodjFbaV0sIDEwKTtcbiAgICB2YXIgbjIgPSBwYXJzZUludCh2MltpXSwgMTApO1xuICAgIGlmICh3aW5kb3cuaXNOYU4objEpKSB7XG4gICAgICBuMSA9IDA7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuaXNOYU4objIpKSB7XG4gICAgICBuMiA9IDA7XG4gICAgfVxuICAgIGlmIChuMSA8IG4yKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgZWxzZSBpZiAobjEgPiBuMikge1xuICAgICAgcmV0dXJuIDFcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDBcbn07XG5cbi8qKlxuICog6Kej5p6Q5ZKM5pON5L2c54mI5pys5Y+3XG4gKiBAbWV0aG9kIHZlcnNpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSB2IC0g6ZyA6KaB6Kej5p6Q55qE54mI5pys5Y+3XG4gKiBAcmV0dXJuIHtsaWIuZW52flZlcnNpb259IFZlcnNvbuWunuS+i1xuICogQG1lbWJlcm9mIGxpYlxuICovXG5saWIkMi52ZXJzaW9uID0gZnVuY3Rpb24gKHYpIHtcbiAgcmV0dXJuIG5ldyBWZXJzaW9uKHYpXG59O1xuXG52YXIgbGliJDMgPSB3aW5kb3cubGliIHx8ICh3aW5kb3cubGliID0ge30pO1xudmFyIGVudiQxID0gbGliJDMuZW52IHx8IChsaWIkMy5lbnYgPSB7fSk7XG5cbnZhciBzZWFyY2ggPSB3aW5kb3cubG9jYXRpb24uc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJyk7XG5lbnYkMS5wYXJhbXMgPSB7fTtcbmlmIChzZWFyY2gpIHtcbiAgdmFyIHBhcmFtcyA9IHNlYXJjaC5zcGxpdCgnJicpO1xuICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwYXJhbXMubGVuZ3RoOyBpJDErKykge1xuICAgIHBhcmFtc1tpJDFdID0gcGFyYW1zW2kkMV0uc3BsaXQoJz0nKTtcbiAgICB0cnkge1xuICAgICAgZW52JDEucGFyYW1zW3BhcmFtc1tpJDFdWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbXNbaSQxXVsxXSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICBlbnYkMS5wYXJhbXNbcGFyYW1zW2kkMV1bMF1dID0gcGFyYW1zW2kkMV1bMV07XG4gICAgfVxuICB9XG59XG5cbnZhciBsaWIkMSA9IHdpbmRvdy5saWIgfHwgKHdpbmRvdy5saWIgPSB7fSk7XG52YXIgZW52ID0gbGliJDEuZW52IHx8IChsaWIkMS5lbnYgPSB7fSk7XG5cbnZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xudmFyIG1hdGNoO1xuXG4vKipcbiAqIG9zXG4gKi9cblxubWF0Y2ggPSB1YS5tYXRjaCgvV2luZG93c1xcc1Bob25lXFxzKD86T1NcXHMpPyhbXFxkLl0rKS8pO1xuaWYgKG1hdGNoKSB7XG4gIC8qKlxuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKiBAbWVtYmVyb2YgbGliLmVudlxuICAgKiBAcHJvcGVydHkge1N0cmluZ30gbmFtZSAtIG9zIG5hbWUsIGUuZy4gQW5kcm9pZC9BbmRyb2lkUGFkL2lQaG9uZS9pUG9kL2lQYWQvV2luZG93cyBQaG9uZS91bmtub3duLCBldGMuXG4gICAqIEBwcm9wZXJ0eSB7bGliLmVudn5WZXJzaW9ufSB2ZXJzaW9uIC0gb3MgdmVyc2lvbi5cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc1dpbmRvd3NQaG9uZVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzSVBob25lIC0gaXMgaVBob25lL2lUb3VjaFxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzSVBhZFxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzSU9TXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNBbmRyb2lkXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNBbmRyb2lkUGFkXG4gICAqL1xuICBlbnYub3MgPSB7XG4gICAgbmFtZTogJ1dpbmRvd3MgUGhvbmUnLFxuICAgIGlzV2luZG93c1Bob25lOiB0cnVlLFxuICAgIHZlcnNpb246IG1hdGNoWzFdXG4gIH07XG59XG5lbHNlIGlmICghIXVhLm1hdGNoKC9TYWZhcmkvKSAmJiAobWF0Y2ggPSB1YS5tYXRjaCgvQW5kcm9pZFtcXHMvXShbXFxkLl0rKS8pKSkge1xuICBlbnYub3MgPSB7XG4gICAgdmVyc2lvbjogbWF0Y2hbMV1cbiAgfTtcblxuICBpZiAoKHVhLm1hdGNoKC9Nb2JpbGVcXHMrU2FmYXJpLykpKSB7XG4gICAgZW52Lm9zLm5hbWUgPSAnQW5kcm9pZCc7XG4gICAgZW52Lm9zLmlzQW5kcm9pZCA9IHRydWU7XG4gIH1cbiAgZWxzZSB7XG4gICAgZW52Lm9zLm5hbWUgPSAnQW5kcm9pZFBhZCc7XG4gICAgZW52Lm9zLmlzQW5kcm9pZFBhZCA9IHRydWU7XG4gIH1cbn1cbmVsc2UgaWYgKChtYXRjaCA9IHVhLm1hdGNoKC8oaVBob25lfGlQYWR8aVBvZCkvKSkpIHtcbiAgdmFyIG5hbWUgPSBtYXRjaFsxXTtcblxuICBtYXRjaCA9IHVhLm1hdGNoKC9PUyAoW1xcZF8uXSspIGxpa2UgTWFjIE9TIFgvKTtcblxuICBlbnYub3MgPSB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpc0lQaG9uZTogKG5hbWUgPT09ICdpUGhvbmUnIHx8IG5hbWUgPT09ICdpUG9kJyksXG4gICAgaXNJUGFkOiBuYW1lID09PSAnaVBhZCcsXG4gICAgaXNJT1M6IHRydWUsXG4gICAgdmVyc2lvbjogbWF0Y2ggJiYgbWF0Y2hbMV0uc3BsaXQoJ18nKS5qb2luKCcuJykgfHwgJydcbiAgfTtcbn1cbmVsc2Uge1xuICBlbnYub3MgPSB7XG4gICAgbmFtZTogJ3Vua25vd24nLFxuICAgIHZlcnNpb246ICcwLjAuMCdcbiAgfTtcbn1cblxuaWYgKGxpYiQxLnZlcnNpb24pIHtcbiAgZW52Lm9zLnZlcnNpb24gPSBsaWIkMS52ZXJzaW9uKGVudi5vcy52ZXJzaW9uKTtcbn1cblxuLyoqXG4gKiBicm93c2VyXG4gKi9cblxubWF0Y2ggPSB1YS5tYXRjaCgvKD86VUNXRUJ8VUNCcm93c2VyXFwvKShbXFxkLl0rKS8pO1xuXG5pZiAobWF0Y2gpIHtcbiAgLyoqXG4gICAqIEB0eXBlIHtPYmplY3R9XG4gICAqIEBtZW1iZXJvZiBlbnZcbiAgICogQHByb3BlcnR5IHtTdHJpbmd9IG5hbWUgLSBicm93c2VyIG5hbWXvvIxlLmcuIFVDL1FRL0ZpcmVmb3gvQ2hyb21lL0FuZHJvaWQvU2FmYXJpL2lPUyBXZWJ2aWV3L0Nocm9tZSBXZWJ2aWV3L0lFL0lFTW9iaWxlL3Vua25vd24sIGV0Yy5cbiAgICogQHByb3BlcnR5IHtlbnZ+VmVyc2lvbn0gdmVyc2lvbiAtIGJyb3dzZXIgdmVyc2lvbi5cbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc1VDXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNRUVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzSUVcbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc0lFTW9iaWxlXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNJRUxpa2VXZWJraXRcbiAgICogQHByb3BlcnR5IHtCb29sZWFufSBpc0Nocm9tZVxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzQW5kcm9pZFxuICAgKiBAcHJvcGVydHkge0Jvb2xlYW59IGlzU2FmYXJpXG4gICAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gaXNXZWJ2aWV3XG4gICAqL1xuICBlbnYuYnJvd3NlciA9IHtcbiAgICBuYW1lOiAnVUMnLFxuICAgIGlzVUM6IHRydWUsXG4gICAgdmVyc2lvbjogbWF0Y2hbMV1cbiAgfTtcbn1cbmVsc2UgaWYgKChtYXRjaCA9IHVhLm1hdGNoKC9NUVFCcm93c2VyXFwvKFtcXGQuXSspLykpKSB7XG4gIGVudi5icm93c2VyID0ge1xuICAgIG5hbWU6ICdRUScsXG4gICAgaXNRUTogdHJ1ZSxcbiAgICB2ZXJzaW9uOiBtYXRjaFsxXVxuICB9O1xufVxuZWxzZSBpZiAoKG1hdGNoID0gdWEubWF0Y2goL0ZpcmVmb3hcXC8oW1xcZC5dKykvKSkpIHtcbiAgZW52LmJyb3dzZXIgPSB7XG4gICAgbmFtZTogJ0ZpcmVmb3gnLFxuICAgIGlzRmlyZWZveDogdHJ1ZSxcbiAgICB2ZXJzaW9uOiBtYXRjaFsxXVxuICB9O1xufVxuZWxzZSBpZiAoKG1hdGNoID0gdWEubWF0Y2goL01TSUVcXHMoW1xcZC5dKykvKSlcbiAgfHwgKG1hdGNoID0gdWEubWF0Y2goL0lFTW9iaWxlXFwvKFtcXGQuXSspLykpKSB7XG4gIGVudi5icm93c2VyID0ge1xuICAgIHZlcnNpb246IG1hdGNoWzFdXG4gIH07XG5cbiAgaWYgKHVhLm1hdGNoKC9JRU1vYmlsZS8pKSB7XG4gICAgZW52LmJyb3dzZXIubmFtZSA9ICdJRU1vYmlsZSc7XG4gICAgZW52LmJyb3dzZXIuaXNJRU1vYmlsZSA9IHRydWU7XG4gIH1cbiAgZWxzZSB7XG4gICAgZW52LmJyb3dzZXIubmFtZSA9ICdJRSc7XG4gICAgZW52LmJyb3dzZXIuaXNJRSA9IHRydWU7XG4gIH1cblxuICBpZiAodWEubWF0Y2goL0FuZHJvaWR8aVBob25lLykpIHtcbiAgICBlbnYuYnJvd3Nlci5pc0lFTGlrZVdlYmtpdCA9IHRydWU7XG4gIH1cbn1cbmVsc2UgaWYgKChtYXRjaCA9IHVhLm1hdGNoKC8oPzpDaHJvbWV8Q3JpT1MpXFwvKFtcXGQuXSspLykpKSB7XG4gIGVudi5icm93c2VyID0ge1xuICAgIG5hbWU6ICdDaHJvbWUnLFxuICAgIGlzQ2hyb21lOiB0cnVlLFxuICAgIHZlcnNpb246IG1hdGNoWzFdXG4gIH07XG5cbiAgaWYgKHVhLm1hdGNoKC9WZXJzaW9uXFwvW1xcZCsuXStcXHMqQ2hyb21lLykpIHtcbiAgICBlbnYuYnJvd3Nlci5uYW1lID0gJ0Nocm9tZSBXZWJ2aWV3JztcbiAgICBlbnYuYnJvd3Nlci5pc1dlYnZpZXcgPSB0cnVlO1xuICB9XG59XG5lbHNlIGlmICghIXVhLm1hdGNoKC9TYWZhcmkvKSAmJiAobWF0Y2ggPSB1YS5tYXRjaCgvQW5kcm9pZFtcXHMvXShbXFxkLl0rKS8pKSkge1xuICBlbnYuYnJvd3NlciA9IHtcbiAgICBuYW1lOiAnQW5kcm9pZCcsXG4gICAgaXNBbmRyb2lkOiB0cnVlLFxuICAgIHZlcnNpb246IG1hdGNoWzFdXG4gIH07XG59XG5lbHNlIGlmICh1YS5tYXRjaCgvaVBob25lfGlQYWR8aVBvZC8pKSB7XG4gIGlmICh1YS5tYXRjaCgvU2FmYXJpLykpIHtcbiAgICBtYXRjaCA9IHVhLm1hdGNoKC9WZXJzaW9uXFwvKFtcXGQuXSspLyk7XG4gICAgZW52LmJyb3dzZXIgPSB7XG4gICAgICBuYW1lOiAnU2FmYXJpJyxcbiAgICAgIGlzU2FmYXJpOiB0cnVlLFxuICAgICAgdmVyc2lvbjogbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJydcbiAgICB9O1xuICB9XG4gIGVsc2Uge1xuICAgIG1hdGNoID0gdWEubWF0Y2goL09TIChbXFxkXy5dKykgbGlrZSBNYWMgT1MgWC8pO1xuICAgIGVudi5icm93c2VyID0ge1xuICAgICAgbmFtZTogJ2lPUyBXZWJ2aWV3JyxcbiAgICAgIGlzV2VidmlldzogdHJ1ZSxcbiAgICAgIHZlcnNpb246IG1hdGNoICYmIG1hdGNoWzFdLnJlcGxhY2UoL18vZywgJy4nKSB8fCAnJ1xuICAgIH07XG4gIH1cbn1cbmVsc2Uge1xuICBlbnYuYnJvd3NlciA9IHtcbiAgICBuYW1lOiAndW5rbm93bicsXG4gICAgdmVyc2lvbjogJzAuMC4wJ1xuICB9O1xufVxuXG5pZiAobGliJDEudmVyc2lvbikge1xuICBlbnYuYnJvd3Nlci52ZXJzaW9uID0gbGliJDEudmVyc2lvbihlbnYuYnJvd3Nlci52ZXJzaW9uKTtcbn1cblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIFxuXG52YXIgdG9TdHJpbmckMiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICogZm9yIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqL1xudmFyIE9CSkVDVF9TVFJJTkcgPSAnW29iamVjdCBPYmplY3RdJztcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmckMi5jYWxsKG9iaikgPT09IE9CSkVDVF9TVFJJTkdcbn1cblxudmFyIEFSUkFZX1NUUklORyA9ICdbb2JqZWN0IEFycmF5XSc7XG5mdW5jdGlvbiBpc0FycmF5IChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nJDIuY2FsbChhcnIpID09PSBBUlJBWV9TVFJJTkdcbn1cblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBcbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICogdGhlIHJpZ2h0ZXN0IG9iamVjdCdzIHZhbHVlIGhhcyB0aGUgaGlnaGVzdCBwcmlvcml0eS5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kICh0bykge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIGlmICghYXJncyB8fCBhcmdzLmxlbmd0aCA8PSAwKSB7XG4gICAgcmV0dXJuIHRvXG4gIH1cbiAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChmcm9tKSB7XG4gICAgaWYgKHR5cGVvZiBmcm9tICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgICB0b1trZXldID0gZnJvbVtrZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0b1xufVxuLyoqXG4gKiBNaXggdHJ1dGh5IG9yICcnIHByb3BlcnR5IHZhbHVlcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKiBtb3N0bHkgZm9yIG1lcmdpbmcgc3R5bGVzLiAodGhhdCdzIHdoeSAnJyBpcyBmYWxzeSBidXQgc3RpbGwgc2hvdWxkIGJlIGNvdW50ZWQgaW4uKVxuICogdGhlIHJpZ2h0ZXN0IG9iamVjdCdzIHZhbHVlIGhhcyB0aGUgaGlnaGVzdCBwcmlvcml0eS5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kVHJ1dGh5ICh0bykge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgd2hpbGUgKCBsZW4tLSA+IDAgKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuICsgMSBdO1xuXG4gIGlmICghYXJncyB8fCBhcmdzLmxlbmd0aCA8PSAwKSB7XG4gICAgcmV0dXJuIHRvXG4gIH1cbiAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChmcm9tKSB7XG4gICAgaWYgKHR5cGVvZiBmcm9tICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBpO1xuICAgIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgICBpZiAoKChpID0gZnJvbVtrZXldKSB8fCBpID09PSAnJyB8fCBpID09PSAwKSAmJiBpICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0b1trZXldID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdG9cbn1cbi8qKlxuICogTWl4IHNwZWNpZmllZCBwcm9wZXJ0aWVzIGludG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kS2V5cyAodG8sIGZyb20sIGtleXMpIHtcbiAgaWYgKCBmcm9tID09PSB2b2lkIDAgKSBmcm9tID0ge307XG5cbiAgKGtleXMgfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGZyb20gJiYgKHRvW2tleV0gPSBmcm9tW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIHRvXG59XG4vKipcbiAqIEV4dHJhY3Qgc3BlY2lmaWVkIHByb3BlcnRpZXMgZnJvbSBzcmMgdG8gdGFyZ2V0IG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gZXh0cmFjdEtleXMgKHRvLCBmcm9tLCBrZXlzKSB7XG4gIGlmICggZnJvbSA9PT0gdm9pZCAwICkgZnJvbSA9IHt9O1xuXG4gIGlmICghZnJvbSkge1xuICAgIHJldHVybiB0b1xuICB9XG4gIChrZXlzIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBmcm9tICYmICh0b1trZXldID0gZnJvbVtrZXldKTtcbiAgICBmcm9tICYmIChkZWxldGUgZnJvbVtrZXldKTtcbiAgfSk7XG4gIHJldHVybiB0b1xufVxuLyoqXG4gKiBTaW1wbGUgYmluZCwgZmFzdGVyIHRoYW4gbmF0aXZlXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjdHhcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBiaW5kIChmbiwgY3R4KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbCA/IGwgPiAxID8gZm4uYXBwbHkoY3R4LCBhcmd1bWVudHMpIDogZm4uY2FsbChjdHgsIGEpIDogZm4uY2FsbChjdHgpXG4gIH1cbn1cbi8qKlxuICogT25seSBjYWxsIHRoZSBmdW5jIHRoZSBsYXN0IHRpbWUgYmVmb3JlIGl0J3Mgbm90IHRoYXQgZnJlcXVlbnRseSBjYWxsZWQuXG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlIChmdW5jLCB3YWl0KSB7XG4gIHZhciB0aW1lcklkO1xuICBmdW5jdGlvbiBsYXRlciAoKSB7XG4gICAgdGltZXJJZCA9IG51bGw7XG4gICAgZnVuYy5hcHBseShudWxsKTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICB0aW1lcklkID0gc2V0VGltZW91dChsYXRlciwgd2FpdCk7XG4gIH1cbn1cbi8qKlxuICogT25seSBjYWxsIHRoZSBmdW5jIHRoZSBmaXJzdCB0aW1lIGJlZm9yZSBhIHNlcmllcyBmcmVxdWVudGx5IGZ1bmN0aW9uIGNhbGxzIGhhcHBlbi5cbiAqL1xuZnVuY3Rpb24gZGVwcmVzcyAoZnVuYywgd2FpdCkge1xuICB2YXIgdGltZXJJZDtcblxuICBmdW5jdGlvbiBsYXRlciAoKSB7XG4gICAgdGltZXJJZCA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRpbWVySWQpIHtcbiAgICAgIGZ1bmMuYXBwbHkoKTtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgfVxufVxuLyoqXG4gKiBPbmx5IGNhbGwgdGhlIGZ1bmMgZXZlcnkgdGltZSBhZnRlciBhIHdhaXQgbWlsbGlzZWNvbmRzIGlmIGl0J3MgdG9vIGZyZXF1ZW50bHkgY2FsbGVkLlxuICovXG5mdW5jdGlvbiB0aHJvdHRsZSAoZnVuYywgd2FpdCwgY2FsbExhc3RUaW1lKSB7XG4gIHZhciBsYXN0ID0gMDtcbiAgdmFyIGxhc3RUaW1lciA9IG51bGw7XG4gIHZhciBsYXN0VGltZUR1cmF0aW9uID0gd2FpdCArICh3YWl0ID4gMjUgPyB3YWl0IDogMjUpOyAvLyBwbHVzIGhhbGYgd2FpdCB0aW1lLlxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICB2YXIgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmICh0aW1lIC0gbGFzdCA+IHdhaXQpIHtcbiAgICAgIGlmIChjYWxsTGFzdFRpbWUpIHtcbiAgICAgICAgbGFzdFRpbWVyICYmIGNsZWFyVGltZW91dChsYXN0VGltZXIpO1xuICAgICAgICBsYXN0VGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBsYXN0VGltZXIgPSBudWxsO1xuICAgICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIH0sIGxhc3RUaW1lRHVyYXRpb24pO1xuICAgICAgfVxuICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGxhc3QgPSB0aW1lO1xuICAgIH1cbiAgfVxufVxuLy8gZGlyZWN0aW9uOiAnbCcgfCAncicsIGRlZmF1bHQgaXMgJ3InXG4vLyBudW06IGhvdyBtYW55IHRpbWVzIHRvIGxvb3AsIHNob3VsZCBiZSBhIHBvc2l0aXZlIGludGVnZXJcbmZ1bmN0aW9uIGxvb3BBcnJheSAoYXJyLCBudW0sIGRpcmVjdGlvbikge1xuICBpZiAoIWlzQXJyYXkoYXJyKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBpc0xlZnQgPSAoZGlyZWN0aW9uICsgJycpLnRvTG93ZXJDYXNlKCkgPT09ICdsJztcbiAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gIG51bSA9IG51bSAlIGxlbjtcbiAgaWYgKG51bSA8IDApIHtcbiAgICBudW0gPSAtbnVtO1xuICAgIGlzTGVmdCA9ICFpc0xlZnQ7XG4gIH1cbiAgaWYgKG51bSA9PT0gMCkge1xuICAgIHJldHVybiBhcnJcbiAgfVxuICB2YXIgbHAsIHJwO1xuICBpZiAoaXNMZWZ0KSB7XG4gICAgbHAgPSBhcnIuc2xpY2UoMCwgbnVtKTtcbiAgICBycCA9IGFyci5zbGljZShudW0pO1xuICB9XG4gIGVsc2Uge1xuICAgIGxwID0gYXJyLnNsaWNlKDAsIGxlbiAtIG51bSk7XG4gICAgcnAgPSBhcnIuc2xpY2UobGVuIC0gbnVtKTtcbiAgfVxuICByZXR1cm4gcnAuY29uY2F0KGxwKVxufVxuLyoqXG4gKiBDcmVhdGUgYSBjYWNoZWQgdmVyc2lvbiBvZiBhIHB1cmUgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgdmFyIGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIGNhY2hlZEZuIChzdHIpIHtcbiAgICB2YXIgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfVxufVxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxtaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG59KTtcbmZ1bmN0aW9uIGNhbWVsaXplS2V5cyAob2JqKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIHJlc1tjYW1lbGl6ZShrZXkpXSA9IG9ialtrZXldO1xuICB9XG4gIHJldHVybiByZXNcbn1cbi8qKlxuICogQ2FwaXRhbGl6ZSBhIHN0cmluZy5cbiAqL1xudmFyIGNhcGl0YWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcbiAgLyoqXG4gICAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gICAqL1xudmFyIGh5cGhlbmF0ZVJFID0gLyhbXi1dKShbQS1aXSkvZztcbnZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpLnJlcGxhY2UoaHlwaGVuYXRlUkUsICckMS0kMicpLnRvTG93ZXJDYXNlKClcbn0pO1xuZnVuY3Rpb24gaHlwaGVuYXRlS2V5cyAob2JqKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIHJlc1toeXBoZW5hdGUoa2V5KV0gPSBvYmpba2V5XTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG52YXIgdmVuZG9yc1JlZyA9IC93ZWJraXQtfG1vei18by18bXMtLztcbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlS2V5cyAob2JqKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIHZhciBoayA9IGh5cGhlbmF0ZShrZXkpLnJlcGxhY2UodmVuZG9yc1JlZywgZnVuY3Rpb24gKCQwKSB7XG4gICAgICByZXR1cm4gJy0nICsgJDBcbiAgICB9KTtcbiAgICByZXNbaGtdID0gb2JqW2tleV07XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuZnVuY3Rpb24gY2FtZWxUb0tlYmFiIChuYW1lKSB7XG4gIGlmICghbmFtZSkge1xuICAgIHJldHVybiAnJ1xuICB9XG4gIHJldHVybiBuYW1lLnJlcGxhY2UoLyhbQS1aXSkvZywgZnVuY3Rpb24gKGcsIGcxKSB7XG4gICAgcmV0dXJuIChcIi1cIiArIChnMS50b0xvd2VyQ2FzZSgpKSlcbiAgfSlcbn1cbmZ1bmN0aW9uIGFwcGVuZENzcyAoY3NzLCBjc3NJZCwgcmVwbGFjZSkge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChjc3NJZCk7XG4gIGlmIChzdHlsZSAmJiByZXBsYWNlKSB7XG4gICAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgc3R5bGUgPSBudWxsO1xuICB9XG4gIGlmICghc3R5bGUpIHtcbiAgICBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgY3NzSWQgJiYgKHN0eWxlLmlkID0gY3NzSWQpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG4gIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xufVxuZnVuY3Rpb24gbmV4dEZyYW1lIChjYWxsYmFjaykge1xuICB2YXIgcnVubmVyID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgIHx8IHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgfHwgKGZ1bmN0aW9uIChjYikgeyByZXR1cm4gc2V0VGltZW91dChjYiwgMTYpOyB9KTtcbiAgcnVubmVyKGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIHRvQ1NTVGV4dCAob2JqZWN0KSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iaiA9IGh5cGhlbmF0ZVN0eWxlS2V5cyhvYmplY3QpO1xuICB2YXIgY3NzVGV4dCA9ICcnO1xuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgY3NzVGV4dCArPSBrZXkgKyBcIjpcIiArIChvYmpba2V5XSkgKyBcIjtcIjtcbiAgfVxuICByZXR1cm4gY3NzVGV4dFxufVxuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIFxuXG4vKipcbiAqIHZpZXdwb3J0IHByaW9yaXR5OlxuICpcbiAqIDEuIG1ldGEgd2VleC12aWV3cG9ydCAoZGV2ZWxvcGVyIGN1c3RvbSlcbiAqIDIuIHNldFZpZXdwb3J0KGNvbmZpZykgOj0gY29uZmlnLndpZHRoIChwcml2YXRlIGNvZGUpIEBkZXByZWNhdGVkXG4gKiAzLiA3NTAgKGJ1aWQgdGltZSlcbiAqXG4gKi9cbnZhciBpc0luaXRlZCA9IGZhbHNlO1xudmFyIERFRkFVTFRfVklFV1BPUlRfV0lEVEggPSA3NTA7XG5cbi8qKlxuICogZ2V0IHZpZXdwb3J0IHdpZHRoIGZyb20gd2VleC12aWV3cG9ydCBtZXRhLlxuICovXG52YXIgZW52Vmlld3BvcnRXaWR0aCA9IHBhcnNlSW50KDc1MCk7XG52YXIgd2lkdGggPSAhaXNOYU4oZW52Vmlld3BvcnRXaWR0aCkgJiYgZW52Vmlld3BvcnRXaWR0aCA+IDBcbiAgPyBlbnZWaWV3cG9ydFdpZHRoXG4gIDogREVGQVVMVF9WSUVXUE9SVF9XSURUSDtcblxudmFyIHd4Vmlld3BvcnRNZXRhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwid2VleC12aWV3cG9ydFwiXScpO1xudmFyIG1ldGFXaWR0aCA9IHd4Vmlld3BvcnRNZXRhICYmIHBhcnNlSW50KHd4Vmlld3BvcnRNZXRhLmdldEF0dHJpYnV0ZSgnY29udGVudCcpKTtcbmlmIChtZXRhV2lkdGggJiYgIWlzTmFOKG1ldGFXaWR0aCkgJiYgbWV0YVdpZHRoID4gMCkge1xuICB3aWR0aCA9IG1ldGFXaWR0aDtcbn1cblxudmFyIGRwciA9IDA7XG52YXIgc2NyZWVuV2lkdGggPSAwO1xudmFyIHNjcmVlbkhlaWdodCA9IDA7XG5cbnZhciBpbmZvID0ge1xuICBkcHI6IGRwcixcbiAgc2NhbGU6IDAsXG4gIHJlbTogMCxcbiAgZGV2aWNlV2lkdGg6IDAsXG4gIGRldmljZUhlaWdodDogMFxufTtcblxuLyoqXG4gKiBzZXQgcm9vdCBmb250LXNpemUgZm9yIHJlbSB1bml0cy4gSWYgYWxyZWFkeSBiZWVuIHNldCwganVzdCBza2lwIHRoaXMuXG4gKi9cbmZ1bmN0aW9uIHNldFJvb3RGb250ICh3aWR0aCkge1xuICB2YXIgZG9jID0gd2luZG93LmRvY3VtZW50O1xuICB2YXIgcmVtID0gd2lkdGggLyAxMDtcbiAgaWYgKCFkb2MuZG9jdW1lbnRFbGVtZW50KSB7IHJldHVybiB9XG4gIHZhciByb290Rm9udFNpemUgPSBkb2MuZG9jdW1lbnRFbGVtZW50LnN0eWxlLmZvbnRTaXplO1xuICBpZiAoIXJvb3RGb250U2l6ZSkge1xuICAgIGRvYy5kb2N1bWVudEVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSByZW0gKyAncHgnO1xuICAgIGluZm8ucmVtID0gcmVtO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldE1ldGFWaWV3cG9ydCAod2lkdGgpIHtcbiAgaWYgKCF3eFZpZXdwb3J0TWV0YSkge1xuICAgIHd4Vmlld3BvcnRNZXRhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbWV0YScpO1xuICAgIHd4Vmlld3BvcnRNZXRhLnNldEF0dHJpYnV0ZSgnbmFtZScsICd3ZWV4LXZpZXdwb3J0Jyk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIG1ldGFXaWR0aCA9IHBhcnNlSW50KHd4Vmlld3BvcnRNZXRhLmdldEF0dHJpYnV0ZSgnY29udGVudCcpKTtcbiAgICBpZiAobWV0YVdpZHRoID09PSB3aWR0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIHd4Vmlld3BvcnRNZXRhLnNldEF0dHJpYnV0ZSgnY29udGVudCcsIHdpZHRoICsgJycpO1xufVxuXG4vKipcbiAqIGV4cG9ydCB2aWV3cG9ydCBpbmZvLlxuICovXG5mdW5jdGlvbiBpbml0JDIgKHZpZXdwb3J0V2lkdGgpIHtcbiAgaWYgKCB2aWV3cG9ydFdpZHRoID09PSB2b2lkIDAgKSB2aWV3cG9ydFdpZHRoID0gd2lkdGg7XG5cbiAgaWYgKCFpc0luaXRlZCkge1xuICAgIGlzSW5pdGVkID0gdHJ1ZTtcblxuICAgIHZhciBkb2MgPSB3aW5kb3cuZG9jdW1lbnQ7XG4gICAgaWYgKCFkb2MpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1t2dWUtcmVuZGVyXSB3aW5kb3cuZG9jdW1lbnQgaXMgdW5kZmluZWQuJyk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCFkb2MuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbdnVlLXJlbmRlcl0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IGlzIHVuZGZpbmVkLicpO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgZHByID0gaW5mby5kcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICBzY3JlZW5XaWR0aCA9IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgc2NyZWVuSGVpZ2h0ID0gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICB2YXIgcmVzZXREZXZpY2VIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzY3JlZW5IZWlnaHQgPSBkb2MuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcbiAgICAgIHZhciBlbnYgPSB3aW5kb3cud2VleCAmJiB3aW5kb3cud2VleC5jb25maWcuZW52O1xuICAgICAgaW5mby5kZXZpY2VIZWlnaHQgPSBlbnYuZGV2aWNlSGVpZ2h0ID0gc2NyZWVuSGVpZ2h0ICogZHByO1xuICAgIH07XG5cbiAgICAvLyBzZXQgcm9vdCBmb250IGZvciByZW0uXG4gICAgc2V0Um9vdEZvbnQoc2NyZWVuV2lkdGgpO1xuICAgIHNldE1ldGFWaWV3cG9ydCh2aWV3cG9ydFdpZHRoKTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNldERldmljZUhlaWdodCk7XG5cbiAgICAvKipcbiAgICAgKiB3aHkgbm90IHRvIHVzZSB3aW5kb3cuc2NyZWVuLndpZHRoIHRvIGdldCBzY3JlZW5XaWR0aCA/IEJlY2F1c2UgaW4gc29tZVxuICAgICAqIG9sZCB3ZWJraXQgYnJvd3NlciBvbiBhbmRyb2lkIHN5c3RlbSBpdCBnZXQgdGhlIGRldmljZSBwaXhlbCB3aWR0aCwgd2hpY2hcbiAgICAgKiBpcyB0aGUgc2NyZWVuV2lkdGggbXVsdGlwbHkgYnkgdGhlIGRldmljZSBwaXhlbCByYXRpby5cbiAgICAgKiBlLmcuIGlwNiAtPiBnZXQgMzc1IGZvciB2aXJ0dWFsIHNjcmVlbiB3aWR0aC5cbiAgICAgKi9cbiAgICB2YXIgc2NhbGUgPSBzY3JlZW5XaWR0aCAvIHZpZXdwb3J0V2lkdGg7XG4gICAgLyoqXG4gICAgICogMS4gaWYgc2V0IGluaXRpYWwvbWF4aW11bS9taW1pbXVtLXNjYWxlIHNvbWUgaG93IHRoZSBwYWdlIHdpbGwgaGF2ZSBhIGJvdW5jZVxuICAgICAqIGVmZmVjdCB3aGVuIHVzZXIgZHJhZyB0aGUgcGFnZSB0b3dhcmRzIGhvcml6b250YWwgYXhpcy5cbiAgICAgKiAyLiBEdWUgdG8gY29tcGF0aWJpbGl0eSByZWFzb25zLCBub3QgdG8gdXNlIHZpZXdwb3J0IG1ldGEgYW55bW9yZS4gSnVzdCBicmluZ1xuICAgICAqIGEgcGFyYW1ldGVyIHNjYWxlIGludG8gdGhlIHN0eWxlIHZhbHVlIHByb2Nlc3NpbmcuXG4gICAgICovXG5cbiAgICAvLyBjb25zdCBjb250ZW50cyA9IFtcbiAgICAvLyAgIGB3aWR0aD0ke3ZpZXdwb3J0V2lkdGh9YCxcbiAgICAvLyAgIGBpbml0aWFsLXNjYWxlPSR7c2NhbGV9YCxcbiAgICAvLyAgIGBtYXhpbXVtLXNjYWxlPSR7c2NhbGV9YCxcbiAgICAvLyAgIGBtaW5pbXVtLXNjYWxlPSR7c2NhbGV9YCxcbiAgICAvLyAgIGB1c2VyLXNjYWxhYmxlPW5vYFxuICAgIC8vIF1cblxuICAgIC8vIGxldCBtZXRhID0gZG9jLnF1ZXJ5U2VsZWN0b3IoJ21ldGFbbmFtZT1cInZpZXdwb3J0XCJdJylcbiAgICAvLyBpZiAoIW1ldGEpIHtcbiAgICAvLyAgIG1ldGEgPSBkb2MuY3JlYXRlRWxlbWVudCgnbWV0YScpXG4gICAgLy8gICBtZXRhLnNldEF0dHJpYnV0ZSgnbmFtZScsICd2aWV3cG9ydCcpXG4gICAgLy8gICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkJykuYXBwZW5kQ2hpbGQobWV0YSlcbiAgICAvLyB9XG4gICAgLy8gbWV0YS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnQnLCBjb250ZW50cy5qb2luKCcsJykpXG5cbiAgICBleHRlbmQoaW5mbywge1xuICAgICAgc2NhbGU6IHNjYWxlLFxuICAgICAgZGV2aWNlV2lkdGg6IHNjcmVlbldpZHRoICogZHByLFxuICAgICAgZGV2aWNlSGVpZ2h0OiBzY3JlZW5IZWlnaHQgKiBkcHJcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBpbmZvXG59XG5cbi8qKlxuICogcmVzZXQgdmlld3BvcnQgd2lkdGggYW5kIHNjYWxlLlxuICogQHJldHVybiBuZXcgc2NhbGUuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRWaWV3cG9ydEluZm8gKCkge1xuICByZXR1cm4gaW5mb1xufVxuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gZXh0ZW5kJDEgKHRvKSB7XG4gIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICB3aGlsZSAoIGxlbi0tID4gMCApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gKyAxIF07XG5cbiAgaWYgKCFhcmdzIHx8IGFyZ3MubGVuZ3RoIDw9IDApIHsgcmV0dXJuIHRvIH1cbiAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChmcm9tKSB7XG4gICAgaWYgKHR5cGVvZiBmcm9tICE9PSAnb2JqZWN0JykgeyByZXR1cm4gfVxuICAgIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgICB0b1trZXldID0gZnJvbVtrZXldO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB0b1xufVxuXG4vLyBpZiBzdXBwb3J0IHBhc3NpdmUgZXZlbnQgbGlzdGVuZXJzLlxudmFyIF9zdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbnRyeSB7XG4gIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBmdW5jdGlvbiAoXykge30sIHtcbiAgICBnZXQgcGFzc2l2ZSAoKSB7XG4gICAgICBfc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuY2F0Y2ggKGUpIHtcbiAgLy8gZG8gbm90aGluZy5cbn1cbmZ1bmN0aW9uIHN1cHBvcnRzUGFzc2l2ZSAoKSB7XG4gIHJldHVybiBfc3VwcG9ydHNQYXNzaXZlXG59XG5cbi8qKlxuICogQ3JlYXRlIEV2ZW50LlxuICogQHBhcmFtIHtET01TdHJpbmd9IHR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wc1xuICovXG5mdW5jdGlvbiBjcmVhdGVFdmVudCAodGFyZ2V0LCB0eXBlLCBwcm9wcykge1xuICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQodHlwZSwgeyBidWJibGVzOiBmYWxzZSB9KTtcblxuICBleHRlbmQkMShldmVudCwgcHJvcHMpO1xuICAvLyAgcGhhbnRvbWpzIGRvbid0IHN1cHBvcnQgY3VzdG9tZXIgZXZlbnRcbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZigncGhhbnRvbWpzJykgIT09IC0xKSB7XG4gICAgcmV0dXJuIGV2ZW50XG4gIH1cbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHRhcmdldFxuICAgIH0pO1xuICB9XG4gIGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZXh0ZW5kJDEoe30sIGV2ZW50LCB7IHRhcmdldDogdGFyZ2V0IH0pXG4gIH1cbiAgcmV0dXJuIGV2ZW50XG59XG5cbi8qKlxuICogQ3JlYXRlIGEgYnViYmFibGUgRXZlbnQuXG4gKiBAcGFyYW0ge0RPTVN0cmluZ30gdHlwZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3BzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1YmJsZXNFdmVudCAodGFyZ2V0LCB0eXBlLCBwcm9wcykge1xuICB2YXIgZXZlbnQgPSBuZXcgRXZlbnQodHlwZSwgeyBidWJibGVzOiB0cnVlIH0pO1xuICBleHRlbmQkMShldmVudCwgcHJvcHMpO1xuICAvLyAgcGhhbnRvbWpzIGRvbid0IHN1cHBvcnQgY3VzdG9tZXIgZXZlbnRcbiAgaWYgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkuaW5kZXhPZigncGhhbnRvbWpzJykgIT09IC0xKSB7XG4gICAgcmV0dXJuIGV2ZW50XG4gIH1cbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHRhcmdldFxuICAgIH0pO1xuICB9XG4gIGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZXh0ZW5kJDEoe30sIGV2ZW50LCB7IHRhcmdldDogdGFyZ2V0IH0pXG4gIH1cbiAgcmV0dXJuIGV2ZW50XG59XG5cbi8qKlxuICogQ3JlYXRlIEN1c3RvbSBFdmVudC5cbiAqIEBwYXJhbSB7RE9NU3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvcHNcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ3VzdG9tRXZlbnQgKHRhcmdldCwgdHlwZSwgcHJvcHMpIHtcbiAgLy8gY29tcGF0aWJpbGl0eTogaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y3VzdG9tZXZlbnRcbiAgLy8gY29uc3QgZXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQodHlwZSlcbiAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7XG4gIGV2ZW50LmluaXRDdXN0b21FdmVudCh0eXBlLCBmYWxzZSwgdHJ1ZSwge30pO1xuICAvLyBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIC8vIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgZXh0ZW5kJDEoZXZlbnQsIHByb3BzKTtcblxuICAvLyBldmVudC50YXJnZXQgaXMgcmVhZG9ubHlcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXZlbnQsICd0YXJnZXQnLCB7XG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IHRhcmdldCB8fCBudWxsXG4gICAgfSk7XG4gIH1cbiAgY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBleHRlbmQkMSh7fSwgZXZlbnQsIHsgdGFyZ2V0OiB0YXJnZXQgfHwgbnVsbCB9KVxuICB9XG5cbiAgcmV0dXJuIGV2ZW50XG59XG5cbi8qKlxuICogZGlzcGF0Y2ggYSBldmVudCBvbiBhIGRvbSBlbGVtZW50LlxuICogQHBhcmFtICB7SFRNTEVsZW1lbnR9IGRvbVxuICogQHBhcmFtICB7RXZlbnR9IGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQgKGRvbSwgZXZlbnQpIHtcbiAgZG9tLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBtYXBGb3JtRXZlbnRzIChjb250ZXh0KSB7XG4gIHZhciBldmVudE1hcCA9IHt9O1snaW5wdXQnLCAnY2hhbmdlJywgJ2ZvY3VzJywgJ2JsdXInXS5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgZXZlbnRNYXBbdHlwZV0gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChjb250ZXh0LiRlbCkge1xuICAgICAgICBldmVudC52YWx1ZSA9IGNvbnRleHQuJGVsLnZhbHVlO1xuICAgICAgfVxuICAgICAgY29udGV4dC4kZW1pdCh0eXBlLCBldmVudCk7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBldmVudE1hcFxufVxuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBjb25maWcgPSB7XG4gIHNjcm9sbGFibGVUeXBlczogWydzY3JvbGxlcicsICdsaXN0JywgJ3dhdGVyZmFsbCddLFxuICBnZXN0dXJlRXZlbnRzOiBbXG4gICAgJ3BhbnN0YXJ0JyxcbiAgICAncGFubW92ZScsXG4gICAgJ3BhbmVuZCcsXG4gICAgJ3N3aXBlJyxcbiAgICAnbG9uZ3ByZXNzJyxcbiAgICAndGFwJ1xuICBdXG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbmZ1bmN0aW9uIGdldFBhcmVudFNjcm9sbGVyICh2bSkge1xuICBpZiAoIXZtKSB7IHJldHVybiBudWxsIH1cbiAgaWYgKHZtLl9wYXJlbnRTY3JvbGxlcikge1xuICAgIHJldHVybiB2bS5fcGFyZW50U2Nyb2xsZXJcbiAgfVxuICBmdW5jdGlvbiBfZ2V0UGFyZW50U2Nyb2xsZXIgKHBhcmVudCkge1xuICAgIGlmICghcGFyZW50KSB7IHJldHVybiB9XG4gICAgaWYgKGNvbmZpZy5zY3JvbGxhYmxlVHlwZXMuaW5kZXhPZihwYXJlbnQud2VleFR5cGUpID4gLTEpIHtcbiAgICAgIHZtLl9wYXJlbnRTY3JvbGxlciA9IHBhcmVudDtcbiAgICAgIHJldHVybiBwYXJlbnRcbiAgICB9XG4gICAgcmV0dXJuIF9nZXRQYXJlbnRTY3JvbGxlcihwYXJlbnQuJHBhcmVudClcbiAgfVxuICByZXR1cm4gX2dldFBhcmVudFNjcm9sbGVyKHZtLiRwYXJlbnQpXG59XG5cbmZ1bmN0aW9uIGhvcml6b250YWxCYWxhbmNlIChyZWN0LCBjdFJlY3QpIHtcbiAgcmV0dXJuIHJlY3QubGVmdCA8IGN0UmVjdC5yaWdodCAmJiByZWN0LnJpZ2h0ID4gY3RSZWN0LmxlZnRcbn1cblxuZnVuY3Rpb24gdmVydGljYWxCYWxhbmNlIChyZWN0LCBjdFJlY3QpIHtcbiAgcmV0dXJuIHJlY3QudG9wIDwgY3RSZWN0LmJvdHRvbSAmJiByZWN0LmJvdHRvbSA+IGN0UmVjdC50b3Bcbn1cblxuLyoqXG4gKiByZXR1cm4gYSBkYXRhIGFycmF5IHdpdGggdHdvIGJvb2xlYW4gdmFsdWUsIHdoaWNoIGFyZTpcbiAqIDEuIHZpc2libGUgaW4gY3VycmVudCBjdCdzIHZpZXdwb3J0LlxuICogMi4gdmlzaWJsZSB3aXRoIG9mZnNldCBpbiBjdXJyZW50IGN0J3Mgdmlld3BvcnQuXG4gKi9cbmZ1bmN0aW9uIGhhc0ludGVyc2VjdGlvbiAocmVjdCwgY3RSZWN0LCBkaXIsIG9mZnNldCkge1xuICBkaXIgPSBkaXIgfHwgJ3VwJztcbiAgdmFyIGlzSG9yaXpvbnRhbCA9IGRpciA9PT0gJ2xlZnQnIHx8IGRpciA9PT0gJ3JpZ2h0JztcbiAgdmFyIGlzVmVydGljYWwgPSBkaXIgPT09ICd1cCcgfHwgZGlyID09PSAnZG93bic7XG4gIGlmIChpc0hvcml6b250YWwgJiYgIXZlcnRpY2FsQmFsYW5jZShyZWN0LCBjdFJlY3QpKSB7XG4gICAgcmV0dXJuIFtmYWxzZSwgZmFsc2VdXG4gIH1cbiAgaWYgKGlzVmVydGljYWwgJiYgIWhvcml6b250YWxCYWxhbmNlKHJlY3QsIGN0UmVjdCkpIHtcbiAgICByZXR1cm4gW2ZhbHNlLCBmYWxzZV1cbiAgfVxuICBvZmZzZXQgPSBwYXJzZUludChvZmZzZXQgfHwgMCkgKiB3ZWV4LmNvbmZpZy5lbnYuc2NhbGU7XG4gIHN3aXRjaCAoZGlyKSB7XG4gICAgY2FzZSAndXAnOlxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgcmVjdC50b3AgPCBjdFJlY3QuYm90dG9tICYmIHJlY3QuYm90dG9tID4gY3RSZWN0LnRvcCxcbiAgICAgICAgcmVjdC50b3AgPCBjdFJlY3QuYm90dG9tICsgb2Zmc2V0ICYmIHJlY3QuYm90dG9tID4gY3RSZWN0LnRvcCAtIG9mZnNldFxuICAgICAgXVxuICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgcmVjdC5ib3R0b20gPiBjdFJlY3QudG9wICYmIHJlY3QudG9wIDwgY3RSZWN0LmJvdHRvbSxcbiAgICAgICAgcmVjdC5ib3R0b20gPiBjdFJlY3QudG9wIC0gb2Zmc2V0ICYmIHJlY3QudG9wIDwgY3RSZWN0LmJvdHRvbSArIG9mZnNldFxuICAgICAgXVxuICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgcmV0dXJuIFtcbiAgICAgICAgcmVjdC5sZWZ0IDwgY3RSZWN0LnJpZ2h0ICYmIHJlY3QucmlnaHQgPiBjdFJlY3QubGVmdCxcbiAgICAgICAgcmVjdC5sZWZ0IDwgY3RSZWN0LnJpZ2h0ICsgb2Zmc2V0ICYmIHJlY3QucmlnaHQgPiBjdFJlY3QubGVmdCAtIG9mZnNldFxuICAgICAgXVxuICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHJlY3QucmlnaHQgPiBjdFJlY3QubGVmdCAmJiByZWN0LmxlZnQgPCBjdFJlY3QucmlnaHQsXG4gICAgICAgIHJlY3QucmlnaHQgPiBjdFJlY3QubGVmdCAtIG9mZnNldCAmJiByZWN0LmxlZnQgPCBjdFJlY3QucmlnaHQgKyBvZmZzZXRcbiAgICAgIF1cbiAgfVxufVxuXG4vKipcbiAqIGlzRWxlbWVudFZpc2libGVcbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgZWwgICAgYSBkb20gZWxlbWVudC5cbiAqIEBwYXJhbSAge0hUTUxFbGVtZW50fSAgY29udGFpbmVyICBvcHRpb25hbCwgdGhlIGNvbnRhaW5lciBvZiB0aGlzIGVsLlxuICovXG5mdW5jdGlvbiBpc0VsZW1lbnRWaXNpYmxlIChlbCwgY29udGFpbmVyLCBkaXIsIG9mZnNldCkge1xuICBpZiAoIWVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCkgeyByZXR1cm4gZmFsc2UgfVxuICB2YXIgYm9keVJlY3QgPSB7XG4gICAgdG9wOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgYm90dG9tOiB3aW5kb3cuaW5uZXJIZWlnaHQsXG4gICAgcmlnaHQ6IHdpbmRvdy5pbm5lcldpZHRoXG4gIH07XG4gIHZhciBjdFJlY3QgPSAoY29udGFpbmVyID09PSB3aW5kb3cgfHwgY29udGFpbmVyID09PSBkb2N1bWVudC5ib2R5KVxuICAgID8gYm9keVJlY3QgOiBjb250YWluZXJcbiAgICA/IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IGJvZHlSZWN0O1xuICByZXR1cm4gaGFzSW50ZXJzZWN0aW9uKGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCBjdFJlY3QsIGRpciwgb2Zmc2V0KVxufVxuXG4vLyB0byB0cmlnZ2VyIHRoZSBhcHBlYXIvZGlzYXBwZWFyIGV2ZW50LlxuZnVuY3Rpb24gdHJpZ2dlckV2ZW50IChlbG0sIGhhbmRsZXJzLCBldnQsIGRpcikge1xuICB2YXIgbGlzdGVuZXIgPSBoYW5kbGVyc1tldnRdO1xuICBpZiAobGlzdGVuZXIgJiYgbGlzdGVuZXIuZm4pIHtcbiAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLmZuO1xuICB9XG4gIGlmIChsaXN0ZW5lcikge1xuICAgIGxpc3RlbmVyKGNyZWF0ZUV2ZW50KGVsbSwgZXZ0LCB7XG4gICAgICBkaXJlY3Rpb246IGRpclxuICAgIH0pKTtcbiAgfVxufVxuXG4vKipcbiAqIGdldCBhbGwgZXZlbnQgbGlzdGVuZXJzLiBpbmNsdWRpbmcgYm91bmQgaGFuZGxlcnMgaW4gYWxsIHBhcmVudCB2bm9kZXMuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50SGFuZGxlcnMgKGNvbnRleHQpIHtcbiAgdmFyIHZub2RlID0gY29udGV4dC4kdm5vZGU7XG4gIHZhciBoYW5kbGVycyA9IHt9O1xuICB2YXIgYXR0YWNoZWRWbm9kZXMgPSBbXTtcbiAgd2hpbGUgKHZub2RlKSB7XG4gICAgYXR0YWNoZWRWbm9kZXMucHVzaCh2bm9kZSk7XG4gICAgdm5vZGUgPSB2bm9kZS5wYXJlbnQ7XG4gIH1cbiAgYXR0YWNoZWRWbm9kZXMuZm9yRWFjaChmdW5jdGlvbiAodm5vZGUpIHtcbiAgICB2YXIgcGFyZW50TGlzdGVuZXJzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucyAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zLmxpc3RlbmVycztcbiAgICB2YXIgZGF0YU9uID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLm9uO1xuICAgIGV4dGVuZChoYW5kbGVycywgcGFyZW50TGlzdGVuZXJzLCBkYXRhT24pO1xuICB9KTtcbiAgcmV0dXJuIGhhbmRsZXJzXG59XG5cbmZ1bmN0aW9uIGdldEFwcGVhck9mZnNldCAoZWwpIHtcbiAgcmV0dXJuIGVsICYmIGVsLmdldEF0dHJpYnV0ZSgnYXBwZWFyLW9mZnNldCcpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSGFuZGxlcnMgKGhhbmRsZXJzKSB7XG4gIHJldHVybiBbXG4gICAgISEoaGFuZGxlcnMuYXBwZWFyIHx8IGhhbmRsZXJzLmRpc2FwcGVhciksXG4gICAgISEoaGFuZGxlcnMub2Zmc2V0QXBwZWFyIHx8IGhhbmRsZXJzLm9mZnNldERpc2FwcGVhcilcbiAgXVxufVxuXG4vKipcbiAqIFdhdGNoIGVsZW1lbnQncyB2aXNpYmlsaXR5IHRvIHRlbGwgd2hldGhlciBzaG91bGQgdHJpZ2dlciBhIGFwcGVhci9kaXNhcHBlYXJcbiAqIGV2ZW50IGluIHNjcm9sbCBoYW5kbGVyLlxuICovXG5mdW5jdGlvbiB3YXRjaEFwcGVhciAoY29udGV4dCwgZmlyZU5vdykge1xuICB2YXIgZWwgPSBjb250ZXh0ICYmIGNvbnRleHQuJGVsO1xuICBpZiAoIWVsIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7IHJldHVybiB9XG4gIHZhciBhcHBlYXJPZmZzZXQgPSBnZXRBcHBlYXJPZmZzZXQoZWwpO1xuXG4gIHZhciBoYW5kbGVycyA9IGdldEV2ZW50SGFuZGxlcnMoY29udGV4dCk7XG4gIHZhciBjaGVja1Jlc3VsdHMgPSBjaGVja0hhbmRsZXJzKGhhbmRsZXJzKTtcbiAgLy8gbm8gYXBwZWFyIG9yIG9mZnNldEFwcGVhciBoYW5kbGVyIHdhcyBib3VuZC5cbiAgaWYgKCFjaGVja1Jlc3VsdHNbMF0gJiYgIWNoZWNrUmVzdWx0c1sxXSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGlzV2luZG93ID0gZmFsc2U7XG4gIHZhciBjb250YWluZXIgPSB3aW5kb3c7XG4gIHZhciBzY3JvbGxlciA9IGdldFBhcmVudFNjcm9sbGVyKGNvbnRleHQpO1xuICBpZiAoc2Nyb2xsZXIgJiYgc2Nyb2xsZXIuJGVsKSB7XG4gICAgY29udGFpbmVyID0gc2Nyb2xsZXIuJGVsO1xuICB9XG4gIGVsc2Uge1xuICAgIGlzV2luZG93ID0gdHJ1ZTtcbiAgfVxuXG4gIGlmIChmaXJlTm93KSB7XG4gICAgdmFyIHZpc2libGVEYXRhID0gaXNFbGVtZW50VmlzaWJsZShlbCwgY29udGFpbmVyLCBudWxsLCBhcHBlYXJPZmZzZXQpO1xuICAgIGRldGVjdEFwcGVhcihjb250ZXh0LCB2aXNpYmxlRGF0YSwgbnVsbCk7XG4gIH1cblxuICAvLyBhZGQgY3VycmVudCB2bSB0byB0aGUgY29udGFpbmVyJ3MgYXBwZWFyIHdhdGNoIGxpc3QuXG4gIGlmICghY29udGFpbmVyLl93YXRjaEFwcGVhckxpc3QpIHtcbiAgICBjb250YWluZXIuX3dhdGNoQXBwZWFyTGlzdCA9IFtdO1xuICB9XG4gIGNvbnRhaW5lci5fd2F0Y2hBcHBlYXJMaXN0LnB1c2goY29udGV4dCk7XG5cbiAgLyoqXG4gICAqIENvZGUgYmVsb3cgd2lsbCBvbmx5IGV4ZWMgb25jZSBmb3IgYmluZGluZyBzY3JvbGwgaGFuZGxlciBmb3IgcGFyZW50IGNvbnRhaW5lci5cbiAgICovXG4gIGlmIChjb250YWluZXIuX3Njcm9sbFdhdGNoZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb250YWluZXIuX3Njcm9sbFdhdGNoZWQgPSB0cnVlO1xuICB2YXIgc2Nyb2xsSGFuZGxlciA9IHRocm90dGxlKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8qKlxuICAgICAqIGRldGVjdCBzY3JvbGxpbmcgZGlyZWN0aW9uLlxuICAgICAqIGRpcmVjdGlvbiBvbmx5IHN1cHBvcnQgdXAgJiBkb3duIHlldC5cbiAgICAgKiBUT0RPOiBkaXJlY3Rpb24gc3VwcG9ydCBsZWZ0ICYgcmlnaHQuXG4gICAgICovXG4gICAgdmFyIHNjcm9sbFRvcCA9IGlzV2luZG93ID8gd2luZG93LnBhZ2VZT2Zmc2V0IDogY29udGFpbmVyLnNjcm9sbFRvcDtcbiAgICB2YXIgcHJlVG9wID0gY29udGFpbmVyLl9sYXN0U2Nyb2xsVG9wO1xuICAgIGNvbnRhaW5lci5fbGFzdFNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICB2YXIgZGlyID0gKHNjcm9sbFRvcCA8IHByZVRvcFxuICAgICAgPyAnZG93bicgOiBzY3JvbGxUb3AgPiBwcmVUb3BcbiAgICAgID8gJ3VwJyA6IGNvbnRhaW5lci5fcHJldkRpcmVjdGlvbikgfHwgbnVsbDtcbiAgICBjb250YWluZXIuX3ByZXZEaXJlY3Rpb24gPSBkaXI7XG4gICAgdmFyIHdhdGNoQXBwZWFyTGlzdCA9IGNvbnRhaW5lci5fd2F0Y2hBcHBlYXJMaXN0IHx8IFtdO1xuICAgIHZhciBsZW4gPSB3YXRjaEFwcGVhckxpc3QubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciB2bSA9IHdhdGNoQXBwZWFyTGlzdFtpXTtcbiAgICAgIHZhciBlbCA9IHZtLiRlbDtcbiAgICAgIHZhciBhcHBlYXJPZmZzZXQgPSBnZXRBcHBlYXJPZmZzZXQoZWwpO1xuICAgICAgdmFyIHZpc2libGVEYXRhID0gaXNFbGVtZW50VmlzaWJsZShlbCwgY29udGFpbmVyLCBkaXIsIGFwcGVhck9mZnNldCk7XG4gICAgICBkZXRlY3RBcHBlYXIodm0sIHZpc2libGVEYXRhLCBkaXIpO1xuICAgIH1cbiAgfSwgMjUsIHRydWUpO1xuICBjb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc2Nyb2xsSGFuZGxlciwgZmFsc2UpO1xuICAvKipcbiAgICogSW4gY2FzZSB0aGUgdXNlcnMgdXNlIHRoZSBib2R5J3Mgb3ZlcmZsb3cgdG8gc2Nyb2xsLiBUaGVuIHRoZSBzY3JvbGxcbiAgICogZXZlbnQgd291bGQgbm90IGJlIGhhbmRsZWQgb24gdGhlIHdpbmRvdyBvYmplY3QgYnV0IG9uIHRoZSBib2R5LlxuICAgKi9cbiAgaWYgKGlzV2luZG93KSB7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxIYW5kbGVyLCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiB0cmlnZ2VyIGEgZGlzYXBwZWFyIGV2ZW50LlxuICovXG5mdW5jdGlvbiB0cmlnZ2VyRGlzYXBwZWFyIChjb250ZXh0KSB7XG4gIHJldHVybiBkZXRlY3RBcHBlYXIoY29udGV4dCwgW2ZhbHNlLCBmYWxzZV0pXG59XG5cbi8qKlxuICogZGVjaWRlIHdoZXRoZXIgdG8gdHJpZ2dlciBhIGFwcGVhci9kaXNhcHBlYXIgZXZlbnQuXG4gKiBAcGFyYW0ge1Z1ZUNvbXBvbmVudH0gY29udGV4dFxuICogQHBhcmFtIHtib29sZWFufSB2aXNpYmxlXG4gKiBAcGFyYW0ge3N0cmluZ30gZGlyXG4gKi9cbmZ1bmN0aW9uIGRldGVjdEFwcGVhciAoY29udGV4dCwgdmlzaWJsZURhdGEsIGRpciwgYXBwZWFyT2Zmc2V0KSB7XG4gIGlmICggZGlyID09PSB2b2lkIDAgKSBkaXIgPSBudWxsO1xuXG4gIHZhciBlbCA9IGNvbnRleHQgJiYgY29udGV4dC4kZWw7XG4gIHZhciB2aXNpYmxlID0gdmlzaWJsZURhdGFbMF07XG4gIHZhciBvZmZzZXRWaXNpYmxlID0gdmlzaWJsZURhdGFbMV07XG4gIGlmICghZWwpIHsgcmV0dXJuIH1cbiAgdmFyIGhhbmRsZXJzID0gZ2V0RXZlbnRIYW5kbGVycyhjb250ZXh0KTtcbiAgLyoqXG4gICAqIE5vIG1hdHRlciBpdCdzIGJpbmRpbmcgYXBwZWFyL2Rpc2FwcGVhciBvciBib3RoIG9mIHRoZW0uIEFsd2F5c1xuICAgKiBzaG91bGQgdGVzdCBpdCdzIHZpc2liaWxpdHkgYW5kIGNoYW5nZSB0aGUgY29udGV4dC8uX3Zpc2libGUuXG4gICAqIElmIG5laXRob3Igb2YgdGhlbSB3YXMgYm91bmQsIHRoZW4ganVzdCBpZ25vcmUgaXQuXG4gICAqL1xuICAvKipcbiAgICogaWYgdGhlIGNvbXBvbmVudCBoYXNuJ3QgYXBwZWFyZWQgZm9yIG9uY2UgeWV0LCB0aGVuIGl0IHNob3VsZG4ndCB0cmlnZ2VyXG4gICAqIGEgZGlzYXBwZWFyIGV2ZW50IGF0IGFsbC5cbiAgICovXG4gIGlmIChjb250ZXh0Ll9hcHBlYXJlZE9uY2UgfHwgdmlzaWJsZSkge1xuICAgIGlmIChjb250ZXh0Ll92aXNpYmxlICE9PSB2aXNpYmxlKSB7XG4gICAgICBpZiAoIWNvbnRleHQuX2FwcGVhcmVkT25jZSkge1xuICAgICAgICBjb250ZXh0Ll9hcHBlYXJlZE9uY2UgPSB0cnVlO1xuICAgICAgfVxuICAgICAgY29udGV4dC5fdmlzaWJsZSA9IHZpc2libGU7XG4gICAgICB0cmlnZ2VyRXZlbnQoZWwsIGhhbmRsZXJzLCB2aXNpYmxlID8gJ2FwcGVhcicgOiAnZGlzYXBwZWFyJywgZGlyKTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRleHQuX29mZnNldEFwcGVhcmVkT25jZSB8fCBvZmZzZXRWaXNpYmxlKSB7XG4gICAgaWYgKGNvbnRleHQuX29mZnNldFZpc2libGUgIT09IG9mZnNldFZpc2libGUpIHtcbiAgICAgIGlmICghY29udGV4dC5fb2Zmc2V0QXBwZWFyZWRPbmNlKSB7XG4gICAgICAgIGNvbnRleHQuX29mZnNldEFwcGVhcmVkT25jZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBjb250ZXh0Ll9vZmZzZXRWaXNpYmxlID0gb2Zmc2V0VmlzaWJsZTtcbiAgICAgIHRyaWdnZXJFdmVudChlbCwgaGFuZGxlcnMsIG9mZnNldFZpc2libGUgPyAnb2Zmc2V0QXBwZWFyJyA6ICdvZmZzZXREaXNhcHBlYXInLCBkaXIpO1xuICAgIH1cbiAgfVxufVxuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gXG5cbmZ1bmN0aW9uIHByZUxvYWRJbWcgKHNyYyxcbiAgICBsb2FkQ2FsbGJhY2ssXG4gICAgZXJyb3JDYWxsYmFjaykge1xuICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gIGltZy5vbmxvYWQgPSBsb2FkQ2FsbGJhY2sgPyBsb2FkQ2FsbGJhY2suYmluZChpbWcpIDogbnVsbDtcbiAgaW1nLm9uZXJyb3IgPSBlcnJvckNhbGxiYWNrID8gZXJyb3JDYWxsYmFjay5iaW5kKGltZykgOiBudWxsO1xuICBpbWcuc3JjID0gc3JjO1xufVxuXG5mdW5jdGlvbiBhcHBseVNyYyAoaXRlbSwgc3JjLCBwbGFjZWhvbGRlclNyYykge1xuICBpZiAoIXNyYykgeyByZXR1cm4gfVxuICBmdW5jdGlvbiBmaW5hbGxDYiAoKSB7XG4gICAgZGVsZXRlIGl0ZW0uX3NyY19sb2FkaW5nO1xuICB9XG4gIGlmIChpdGVtLl9zcmNfbG9hZGluZyA9PT0gc3JjKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyoqXG4gICAqIDEuIGFwcGx5IHNyYyBpbW1lZGlhdGVseSBpbiBjYXNlIGphdnNjcmlwdCBibG9ja3MgdGhlIGltYWdlIGxvYWRpbmdcbiAgICogIGJlZm9yZSBuZXh0IHRpY2suXG4gICAqL1xuICBpdGVtLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IFwidXJsKFwiICsgKHNyYyB8fCAnJykgKyBcIilcIjtcbiAgaXRlbS5yZW1vdmVBdHRyaWJ1dGUoJ2ltZy1zcmMnKTtcbiAgLyoqXG4gICAqIDIuIHRoZW4gbG9hZCB0aGUgaW1nIHNyYyB3aXRoIEltYWdlIGNvbnN0cnVjdG9yIChidXQgd291bGQgbm90IHBvc3RcbiAgICogIGEgcmVxdWVzdCBhZ2FpbiksIGp1c3QgdG8gdHJpZ2dlciB0aGUgbG9hZCBldmVudC5cbiAgICovXG4gIGl0ZW0uX3NyY19sb2FkaW5nID0gc3JjO1xuICBwcmVMb2FkSW1nKHNyYywgZnVuY3Rpb24gKGV2dCkge1xuICAgIGl0ZW0uc3R5bGUuYmFja2dyb3VuZEltYWdlID0gXCJ1cmwoXCIgKyAoc3JjIHx8ICcnKSArIFwiKVwiO1xuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBuYXR1cmFsV2lkdGggPSByZWYud2lkdGg7XG4gICAgdmFyIG5hdHVyYWxIZWlnaHQgPSByZWYuaGVpZ2h0O1xuICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgc2l6ZTogeyBuYXR1cmFsV2lkdGg6IG5hdHVyYWxXaWR0aCwgbmF0dXJhbEhlaWdodDogbmF0dXJhbEhlaWdodCB9XG4gICAgfTtcbiAgICBkaXNwYXRjaEV2ZW50KGl0ZW0sIGNyZWF0ZUV2ZW50KGl0ZW0sICdsb2FkJywgcGFyYW1zKSk7XG4gICAgZmluYWxsQ2IoKTtcbiAgfSwgZnVuY3Rpb24gKGV2dCkge1xuICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgIHNpemU6IHsgbmF0dXJhbFdpZHRoOiAwLCBuYXR1cmFsSGVpZ2h0OiAwIH1cbiAgICB9O1xuICAgIGRpc3BhdGNoRXZlbnQoaXRlbSwgY3JlYXRlRXZlbnQoaXRlbSwgJ2xvYWQnLCBwYXJhbXMpKTtcbiAgICBpZiAocGxhY2Vob2xkZXJTcmMpIHtcbiAgICAgIHByZUxvYWRJbWcocGxhY2Vob2xkZXJTcmMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaXRlbS5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSBcInVybChcIiArIChwbGFjZWhvbGRlclNyYyB8fCAnJykgKyBcIilcIjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmaW5hbGxDYigpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q3RTY3JvbGxlciAoZWwpIHtcbiAgaWYgKCFlbCkgeyByZXR1cm4gfVxuICB2YXIgc2Nyb2xsZXIgPSBlbC5fcHRTY3JvbGxlcjtcbiAgaWYgKCFzY3JvbGxlcikge1xuICAgIHZhciBwdCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgd2hpbGUgKHB0ICYmIHB0ICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICBpZiAoKHB0LmNsYXNzTmFtZSArICcnIHx8ICcnKS5tYXRjaCgvd2VleC1saXN0fHdlZXgtc2Nyb2xsZXJ8d2VleC13YXRlcmZhbGwvKSkge1xuICAgICAgICBzY3JvbGxlciA9IHB0O1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgcHQgPSBwdC5wYXJlbnRFbGVtZW50O1xuICAgIH1cbiAgICBzY3JvbGxlciA9IHB0O1xuICAgIGVsLl9wdFNjcm9sbGVyID0gcHQ7XG4gIH1cbiAgcmV0dXJuIHNjcm9sbGVyXG59XG5cbmZ1bmN0aW9uIGZpcmVMYXp5bG9hZCAoZWwsIGlnbm9yZVZpc2liaWxpdHkpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZWwpKSB7XG4gICAgcmV0dXJuIGVsLmZvckVhY2goZnVuY3Rpb24gKGN0KSB7IHJldHVybiBmaXJlTGF6eWxvYWQoY3QpOyB9KVxuICB9XG4gIGVsID0gZWwgfHwgZG9jdW1lbnQuYm9keTtcbiAgaWYgKCFlbCkgeyByZXR1cm4gfVxuICB2YXIgaW1ncyA9IChlbCB8fCBkb2N1bWVudC5ib2R5KS5xdWVyeVNlbGVjdG9yQWxsKCdbaW1nLXNyY10nKTtcbiAgaWYgKGVsLmdldEF0dHJpYnV0ZSgnaW1nLXNyYycpKSB7IGltZ3MgPSBbZWxdOyB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaW1ncy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpbWcgPSBpbWdzW2ldO1xuICAgIGlmICh0eXBlb2YgaWdub3JlVmlzaWJpbGl0eSA9PT0gJ2Jvb2xlYW4nICYmIGlnbm9yZVZpc2liaWxpdHkpIHtcbiAgICAgIGFwcGx5U3JjKGltZywgaW1nLmdldEF0dHJpYnV0ZSgnaW1nLXNyYycpLCBpbWcuZ2V0QXR0cmlidXRlKCdpbWctcGxhY2Vob2xkZXInKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRWxlbWVudFZpc2libGUoaW1nLCBnZXRDdFNjcm9sbGVyKGVsKSlbMF0pIHtcbiAgICAgIGFwcGx5U3JjKGltZywgaW1nLmdldEF0dHJpYnV0ZSgnaW1nLXNyYycpLCBpbWcuZ2V0QXR0cmlidXRlKCdpbWctcGxhY2Vob2xkZXInKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogY2FjaGUgYSB0aHJvdHRsZSBsYXp5bG9hZCBmdW5jdGlvbiBmb3IgZXZlcnkgY29udGFpbmVyIGVsZW1lbnRcbiAqIG9uY2UgZm9yIGRpZmZlcmVudCB3YWl0IHRpbWVzIHNlcGFyYXRlLlxuICogICB0aGUgYXJjaGl0ZWN0dXJlIG9mIHRoaXMgY2FjaGU6XG4gKiAgICAgIGNhY2hlOiB7XG4gKiAgICAgICAgZWwuaWQ6IHtcbiAqICAgICAgICAgIHdhaXQ6IHRocm90dGxlZEZ1bmN0aW9uICgpIHsgLi4uIH1cbiAqICAgICAgICB9XG4gKiAgICAgIH1cbiAqL1xudmFyIGNhY2hlID0ge307XG52YXIgX3VpZCQyID0gMTtcbmZ1bmN0aW9uIGdldFRocm90dGxlTGF6eWxvYWQgKHdhaXQsIGVsKSB7XG4gIGlmICggd2FpdCA9PT0gdm9pZCAwICkgd2FpdCA9IDE2O1xuICBpZiAoIGVsID09PSB2b2lkIDAgKSBlbCA9IGRvY3VtZW50LmJvZHk7XG5cbiAgdmFyIGlkID0gKyhlbCAmJiBlbC5kYXRhc2V0LnRocm90dGxlSWQpO1xuICBpZiAoaXNOYU4oaWQpIHx8IGlkIDw9IDApIHtcbiAgICBpZCA9IF91aWQkMisrO1xuICAgIGVsICYmIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS10aHJvdHRsZS1pZCcsIGlkICsgJycpO1xuICB9XG5cbiAgIWNhY2hlW2lkXSAmJiAoY2FjaGVbaWRdID0ge30pO1xuICB2YXIgdGhyb3R0bGVkID0gY2FjaGVbaWRdW3dhaXRdIHx8XG4gICAgKGNhY2hlW2lkXVt3YWl0XSA9IHRocm90dGxlKFxuICAgICAgZmlyZUxhenlsb2FkLmJpbmQodGhpcywgZWwpLFxuICAgICAgcGFyc2VGbG9hdCh3YWl0KSxcbiAgICAgIC8vIHRydWUgZm9yIGNhbGxMYXN0VGltZS5cbiAgICAgIC8vIHRvIHRyaWdnZXIgb25jZSBtb3JlIHRpbWUgYWZ0ZXIgdGhlIGxhc3QgdGhyb3R0bGVkIGZ1bmN0aW9uIGNhbGxlZCB3aXRoIGEgbGl0dGxlIG1vcmUgZGVsYXkuXG4gICAgICB0cnVlKVxuICAgICk7XG4gIHJldHVybiB0aHJvdHRsZWRcbn1cblxudmFyIGNhcGl0YWxpemVTdHJpbmdfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gY2FwaXRhbGl6ZVN0cmluZztcbmZ1bmN0aW9uIGNhcGl0YWxpemVTdHJpbmcoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbXCJkZWZhdWx0XCJdO1xufSk7XG5cbnZhciBwcmVmaXhQcm9wZXJ0eV8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJlZml4UHJvcGVydHk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZyA9IGNhcGl0YWxpemVTdHJpbmdfMTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhcGl0YWxpemVTdHJpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBwcmVmaXhQcm9wZXJ0eShwcmVmaXhQcm9wZXJ0aWVzLCBwcm9wZXJ0eSwgc3R5bGUpIHtcbiAgaWYgKHByZWZpeFByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpKSB7XG4gICAgdmFyIHJlcXVpcmVkUHJlZml4ZXMgPSBwcmVmaXhQcm9wZXJ0aWVzW3Byb3BlcnR5XTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmVxdWlyZWRQcmVmaXhlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgc3R5bGVbcmVxdWlyZWRQcmVmaXhlc1tpXSArICgwLCBfY2FwaXRhbGl6ZVN0cmluZzIuZGVmYXVsdCkocHJvcGVydHkpXSA9IHN0eWxlW3Byb3BlcnR5XTtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnZhciBwcmVmaXhWYWx1ZV8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwcmVmaXhWYWx1ZTtcbmZ1bmN0aW9uIHByZWZpeFZhbHVlKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIG1ldGFEYXRhKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwbHVnaW5zLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gcGx1Z2luc1tpXShwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlLCBtZXRhRGF0YSk7XG5cbiAgICAvLyB3ZSBjYW4gc3RvcCBwcm9jZXNzaW5nIGlmIGEgdmFsdWUgaXMgcmV0dXJuZWRcbiAgICAvLyBhcyBhbGwgcGx1Z2luIGNyaXRlcmlhIGFyZSB1bmlxdWVcbiAgICBpZiAocHJvY2Vzc2VkVmFsdWUpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgICB9XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG59KTtcblxudmFyIGFkZE5ld1ZhbHVlc09ubHlfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gYWRkTmV3VmFsdWVzT25seTtcbmZ1bmN0aW9uIGFkZElmTmV3KGxpc3QsIHZhbHVlKSB7XG4gIGlmIChsaXN0LmluZGV4T2YodmFsdWUpID09PSAtMSkge1xuICAgIGxpc3QucHVzaCh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRkTmV3VmFsdWVzT25seShsaXN0LCB2YWx1ZXMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIGFkZElmTmV3KGxpc3QsIHZhbHVlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFkZElmTmV3KGxpc3QsIHZhbHVlcyk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG59KTtcblxudmFyIGlzT2JqZWN0XzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzT2JqZWN0O1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgT2JqZWN0ICYmICFBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG59KTtcblxudmFyIGNyZWF0ZVByZWZpeGVyXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVQcmVmaXhlcjtcblxudmFyIF9wcmVmaXhQcm9wZXJ0eSA9IHByZWZpeFByb3BlcnR5XzE7XG5cbnZhciBfcHJlZml4UHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJlZml4UHJvcGVydHkpO1xuXG52YXIgX3ByZWZpeFZhbHVlID0gcHJlZml4VmFsdWVfMTtcblxudmFyIF9wcmVmaXhWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcmVmaXhWYWx1ZSk7XG5cbnZhciBfYWRkTmV3VmFsdWVzT25seSA9IGFkZE5ld1ZhbHVlc09ubHlfMTtcblxudmFyIF9hZGROZXdWYWx1ZXNPbmx5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2FkZE5ld1ZhbHVlc09ubHkpO1xuXG52YXIgX2lzT2JqZWN0ID0gaXNPYmplY3RfMTtcblxudmFyIF9pc09iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc09iamVjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGNyZWF0ZVByZWZpeGVyKF9yZWYpIHtcbiAgdmFyIHByZWZpeE1hcCA9IF9yZWYucHJlZml4TWFwLFxuICAgICAgcGx1Z2lucyA9IF9yZWYucGx1Z2lucztcblxuICBmdW5jdGlvbiBwcmVmaXhBbGwoc3R5bGUpIHtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcGVydHldO1xuXG4gICAgICAvLyBoYW5kbGUgbmVzdGVkIG9iamVjdHNcbiAgICAgIGlmICgoMCwgX2lzT2JqZWN0Mi5kZWZhdWx0KSh2YWx1ZSkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gcHJlZml4QWxsKHZhbHVlKTtcbiAgICAgICAgLy8gaGFuZGxlIGFycmF5IHZhbHVlc1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YXIgY29tYmluZWRWYWx1ZSA9IFtdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9ICgwLCBfcHJlZml4VmFsdWUyLmRlZmF1bHQpKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZVtpXSwgc3R5bGUsIHByZWZpeE1hcCk7XG4gICAgICAgICAgKDAsIF9hZGROZXdWYWx1ZXNPbmx5Mi5kZWZhdWx0KShjb21iaW5lZFZhbHVlLCBwcm9jZXNzZWRWYWx1ZSB8fCB2YWx1ZVtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBvbmx5IG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgd2FzIHRvdWNoZWRcbiAgICAgICAgLy8gYnkgYW55IHBsdWdpbiB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IG11dGF0aW9uc1xuICAgICAgICBpZiAoY29tYmluZWRWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3R5bGVbcHJvcGVydHldID0gY29tYmluZWRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIF9wcm9jZXNzZWRWYWx1ZSA9ICgwLCBfcHJlZml4VmFsdWUyLmRlZmF1bHQpKHBsdWdpbnMsIHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIHByZWZpeE1hcCk7XG5cbiAgICAgICAgLy8gb25seSBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IHdhcyB0b3VjaGVkXG4gICAgICAgIC8vIGJ5IGFueSBwbHVnaW4gdG8gcHJldmVudCB1bm5lY2Vzc2FyeSBtdXRhdGlvbnNcbiAgICAgICAgaWYgKF9wcm9jZXNzZWRWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlW3Byb3BlcnR5XSA9IF9wcm9jZXNzZWRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgICgwLCBfcHJlZml4UHJvcGVydHkyLmRlZmF1bHQpKHByZWZpeE1hcCwgcHJvcGVydHksIHN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICByZXR1cm4gcHJlZml4QWxsO1xufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIHN0YXRpY0RhdGEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIHcgPSBbXCJXZWJraXRcIl07XG52YXIgbSA9IFtcIk1velwiXTtcbnZhciBtcyA9IFtcIm1zXCJdO1xudmFyIHdtID0gW1wiV2Via2l0XCIsIFwiTW96XCJdO1xudmFyIHdtcyA9IFtcIldlYmtpdFwiLCBcIm1zXCJdO1xudmFyIHdtbXMgPSBbXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiXTtcblxuZXhwb3J0cy5kZWZhdWx0ID0ge1xuICBwbHVnaW5zOiBbXSxcbiAgcHJlZml4TWFwOiB7IFwiYXBwZWFyYW5jZVwiOiB3bSwgXCJ1c2VyU2VsZWN0XCI6IHdtbXMsIFwidGV4dEVtcGhhc2lzUG9zaXRpb25cIjogdywgXCJ0ZXh0RW1waGFzaXNcIjogdywgXCJ0ZXh0RW1waGFzaXNTdHlsZVwiOiB3LCBcInRleHRFbXBoYXNpc0NvbG9yXCI6IHcsIFwiYm94RGVjb3JhdGlvbkJyZWFrXCI6IHcsIFwiY2xpcFBhdGhcIjogdywgXCJtYXNrSW1hZ2VcIjogdywgXCJtYXNrTW9kZVwiOiB3LCBcIm1hc2tSZXBlYXRcIjogdywgXCJtYXNrUG9zaXRpb25cIjogdywgXCJtYXNrQ2xpcFwiOiB3LCBcIm1hc2tPcmlnaW5cIjogdywgXCJtYXNrU2l6ZVwiOiB3LCBcIm1hc2tDb21wb3NpdGVcIjogdywgXCJtYXNrXCI6IHcsIFwibWFza0JvcmRlclNvdXJjZVwiOiB3LCBcIm1hc2tCb3JkZXJNb2RlXCI6IHcsIFwibWFza0JvcmRlclNsaWNlXCI6IHcsIFwibWFza0JvcmRlcldpZHRoXCI6IHcsIFwibWFza0JvcmRlck91dHNldFwiOiB3LCBcIm1hc2tCb3JkZXJSZXBlYXRcIjogdywgXCJtYXNrQm9yZGVyXCI6IHcsIFwibWFza1R5cGVcIjogdywgXCJ0ZXh0RGVjb3JhdGlvblN0eWxlXCI6IHcsIFwidGV4dERlY29yYXRpb25Ta2lwXCI6IHcsIFwidGV4dERlY29yYXRpb25MaW5lXCI6IHcsIFwidGV4dERlY29yYXRpb25Db2xvclwiOiB3LCBcImZpbHRlclwiOiB3LCBcImZvbnRGZWF0dXJlU2V0dGluZ3NcIjogdywgXCJicmVha0FmdGVyXCI6IHdtbXMsIFwiYnJlYWtCZWZvcmVcIjogd21tcywgXCJicmVha0luc2lkZVwiOiB3bW1zLCBcImNvbHVtbkNvdW50XCI6IHdtLCBcImNvbHVtbkZpbGxcIjogd20sIFwiY29sdW1uR2FwXCI6IHdtLCBcImNvbHVtblJ1bGVcIjogd20sIFwiY29sdW1uUnVsZUNvbG9yXCI6IHdtLCBcImNvbHVtblJ1bGVTdHlsZVwiOiB3bSwgXCJjb2x1bW5SdWxlV2lkdGhcIjogd20sIFwiY29sdW1uc1wiOiB3bSwgXCJjb2x1bW5TcGFuXCI6IHdtLCBcImNvbHVtbldpZHRoXCI6IHdtLCBcIndyaXRpbmdNb2RlXCI6IHdtcywgXCJmbGV4XCI6IHcsIFwiZmxleEJhc2lzXCI6IHcsIFwiZmxleERpcmVjdGlvblwiOiB3LCBcImZsZXhHcm93XCI6IHcsIFwiZmxleEZsb3dcIjogdywgXCJmbGV4U2hyaW5rXCI6IHcsIFwiZmxleFdyYXBcIjogdywgXCJhbGlnbkNvbnRlbnRcIjogdywgXCJhbGlnbkl0ZW1zXCI6IHcsIFwiYWxpZ25TZWxmXCI6IHcsIFwianVzdGlmeUNvbnRlbnRcIjogdywgXCJvcmRlclwiOiB3LCBcInRyYW5zZm9ybVwiOiB3LCBcInRyYW5zZm9ybU9yaWdpblwiOiB3LCBcInRyYW5zZm9ybU9yaWdpblhcIjogdywgXCJ0cmFuc2Zvcm1PcmlnaW5ZXCI6IHcsIFwiYmFja2ZhY2VWaXNpYmlsaXR5XCI6IHcsIFwicGVyc3BlY3RpdmVcIjogdywgXCJwZXJzcGVjdGl2ZU9yaWdpblwiOiB3LCBcInRyYW5zZm9ybVN0eWxlXCI6IHcsIFwidHJhbnNmb3JtT3JpZ2luWlwiOiB3LCBcImFuaW1hdGlvblwiOiB3LCBcImFuaW1hdGlvbkRlbGF5XCI6IHcsIFwiYW5pbWF0aW9uRGlyZWN0aW9uXCI6IHcsIFwiYW5pbWF0aW9uRmlsbE1vZGVcIjogdywgXCJhbmltYXRpb25EdXJhdGlvblwiOiB3LCBcImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50XCI6IHcsIFwiYW5pbWF0aW9uTmFtZVwiOiB3LCBcImFuaW1hdGlvblBsYXlTdGF0ZVwiOiB3LCBcImFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uXCI6IHcsIFwiYmFja2Ryb3BGaWx0ZXJcIjogdywgXCJmb250S2VybmluZ1wiOiB3LCBcInNjcm9sbFNuYXBUeXBlXCI6IHdtcywgXCJzY3JvbGxTbmFwUG9pbnRzWFwiOiB3bXMsIFwic2Nyb2xsU25hcFBvaW50c1lcIjogd21zLCBcInNjcm9sbFNuYXBEZXN0aW5hdGlvblwiOiB3bXMsIFwic2Nyb2xsU25hcENvb3JkaW5hdGVcIjogd21zLCBcInNoYXBlSW1hZ2VUaHJlc2hvbGRcIjogdywgXCJzaGFwZUltYWdlTWFyZ2luXCI6IHcsIFwic2hhcGVJbWFnZU91dHNpZGVcIjogdywgXCJoeXBoZW5zXCI6IHdtbXMsIFwiZmxvd0ludG9cIjogd21zLCBcImZsb3dGcm9tXCI6IHdtcywgXCJyZWdpb25GcmFnbWVudFwiOiB3bXMsIFwidGV4dEFsaWduTGFzdFwiOiBtLCBcInRhYlNpemVcIjogbSwgXCJ3cmFwRmxvd1wiOiBtcywgXCJ3cmFwVGhyb3VnaFwiOiBtcywgXCJ3cmFwTWFyZ2luXCI6IG1zLCBcImdyaWRUZW1wbGF0ZUNvbHVtbnNcIjogbXMsIFwiZ3JpZFRlbXBsYXRlUm93c1wiOiBtcywgXCJncmlkVGVtcGxhdGVBcmVhc1wiOiBtcywgXCJncmlkVGVtcGxhdGVcIjogbXMsIFwiZ3JpZEF1dG9Db2x1bW5zXCI6IG1zLCBcImdyaWRBdXRvUm93c1wiOiBtcywgXCJncmlkQXV0b0Zsb3dcIjogbXMsIFwiZ3JpZFwiOiBtcywgXCJncmlkUm93U3RhcnRcIjogbXMsIFwiZ3JpZENvbHVtblN0YXJ0XCI6IG1zLCBcImdyaWRSb3dFbmRcIjogbXMsIFwiZ3JpZFJvd1wiOiBtcywgXCJncmlkQ29sdW1uXCI6IG1zLCBcImdyaWRDb2x1bW5FbmRcIjogbXMsIFwiZ3JpZENvbHVtbkdhcFwiOiBtcywgXCJncmlkUm93R2FwXCI6IG1zLCBcImdyaWRBcmVhXCI6IG1zLCBcImdyaWRHYXBcIjogbXMsIFwidGV4dFNpemVBZGp1c3RcIjogd21zLCBcImJvcmRlckltYWdlXCI6IHcsIFwiYm9yZGVySW1hZ2VPdXRzZXRcIjogdywgXCJib3JkZXJJbWFnZVJlcGVhdFwiOiB3LCBcImJvcmRlckltYWdlU2xpY2VcIjogdywgXCJib3JkZXJJbWFnZVNvdXJjZVwiOiB3LCBcImJvcmRlckltYWdlV2lkdGhcIjogdywgXCJ0cmFuc2l0aW9uRGVsYXlcIjogdywgXCJ0cmFuc2l0aW9uRHVyYXRpb25cIjogdywgXCJ0cmFuc2l0aW9uUHJvcGVydHlcIjogdywgXCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb25cIjogdyB9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXTtcbn0pO1xuXG52YXIgY3Vyc29yXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjdXJzb3I7XG52YXIgcHJlZml4ZXMgPSBbJy13ZWJraXQtJywgJy1tb3otJywgJyddO1xuXG52YXIgdmFsdWVzID0ge1xuICAnem9vbS1pbic6IHRydWUsXG4gICd6b29tLW91dCc6IHRydWUsXG4gIGdyYWI6IHRydWUsXG4gIGdyYWJiaW5nOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBjdXJzb3IocHJvcGVydHksIHZhbHVlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2N1cnNvcicgJiYgdmFsdWVzLmhhc093blByb3BlcnR5KHZhbHVlKSkge1xuICAgIHJldHVybiBwcmVmaXhlcy5tYXAoZnVuY3Rpb24gKHByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pO1xuXG52YXIgaXNQcmVmaXhlZFZhbHVlXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc1ByZWZpeGVkVmFsdWU7XG52YXIgcmVnZXggPSAvLXdlYmtpdC18LW1vei18LW1zLS87XG5cbmZ1bmN0aW9uIGlzUHJlZml4ZWRWYWx1ZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiByZWdleC50ZXN0KHZhbHVlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnZhciBjcm9zc0ZhZGVfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyb3NzRmFkZTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSBpc1ByZWZpeGVkVmFsdWVfMTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9Y3Jvc3MtZmFkZVxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICcnXTtcbmZ1bmN0aW9uIGNyb3NzRmFkZShwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignY3Jvc3MtZmFkZSgnKSA+IC0xKSB7XG4gICAgcmV0dXJuIHByZWZpeGVzLm1hcChmdW5jdGlvbiAocHJlZml4KSB7XG4gICAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvY3Jvc3MtZmFkZVxcKC9nLCBwcmVmaXggKyAnY3Jvc3MtZmFkZSgnKTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIGZpbHRlcl8xID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZmlsdGVyO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZSA9IGlzUHJlZml4ZWRWYWx1ZV8xO1xuXG52YXIgX2lzUHJlZml4ZWRWYWx1ZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ByZWZpeGVkVmFsdWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBodHRwOi8vY2FuaXVzZS5jb20vI2ZlYXQ9Y3NzLWZpbHRlci1mdW5jdGlvblxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICcnXTtcbmZ1bmN0aW9uIGZpbHRlcihwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignZmlsdGVyKCcpID4gLTEpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9maWx0ZXJcXCgvZywgcHJlZml4ICsgJ2ZpbHRlcignKTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIGZsZXhfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGZsZXg7XG52YXIgdmFsdWVzID0ge1xuICBmbGV4OiBbJy13ZWJraXQtYm94JywgJy1tb3otYm94JywgJy1tcy1mbGV4Ym94JywgJy13ZWJraXQtZmxleCcsICdmbGV4J10sXG4gICdpbmxpbmUtZmxleCc6IFsnLXdlYmtpdC1pbmxpbmUtYm94JywgJy1tb3otaW5saW5lLWJveCcsICctbXMtaW5saW5lLWZsZXhib3gnLCAnLXdlYmtpdC1pbmxpbmUtZmxleCcsICdpbmxpbmUtZmxleCddXG59O1xuXG5mdW5jdGlvbiBmbGV4KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdkaXNwbGF5JyAmJiB2YWx1ZXMuaGFzT3duUHJvcGVydHkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlc1t2YWx1ZV07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnZhciBmbGV4Ym94T2xkXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBmbGV4Ym94T2xkO1xudmFyIGFsdGVybmF0aXZlVmFsdWVzID0ge1xuICAnc3BhY2UtYXJvdW5kJzogJ2p1c3RpZnknLFxuICAnc3BhY2UtYmV0d2Vlbic6ICdqdXN0aWZ5JyxcbiAgJ2ZsZXgtc3RhcnQnOiAnc3RhcnQnLFxuICAnZmxleC1lbmQnOiAnZW5kJyxcbiAgJ3dyYXAtcmV2ZXJzZSc6ICdtdWx0aXBsZScsXG4gIHdyYXA6ICdtdWx0aXBsZSdcbn07XG5cbnZhciBhbHRlcm5hdGl2ZVByb3BzID0ge1xuICBhbGlnbkl0ZW1zOiAnV2Via2l0Qm94QWxpZ24nLFxuICBqdXN0aWZ5Q29udGVudDogJ1dlYmtpdEJveFBhY2snLFxuICBmbGV4V3JhcDogJ1dlYmtpdEJveExpbmVzJ1xufTtcblxuZnVuY3Rpb24gZmxleGJveE9sZChwcm9wZXJ0eSwgdmFsdWUsIHN0eWxlKSB7XG4gIGlmIChwcm9wZXJ0eSA9PT0gJ2ZsZXhEaXJlY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodmFsdWUuaW5kZXhPZignY29sdW1uJykgPiAtMSkge1xuICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ3ZlcnRpY2FsJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuV2Via2l0Qm94T3JpZW50ID0gJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAodmFsdWUuaW5kZXhPZigncmV2ZXJzZScpID4gLTEpIHtcbiAgICAgIHN0eWxlLldlYmtpdEJveERpcmVjdGlvbiA9ICdyZXZlcnNlJztcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuV2Via2l0Qm94RGlyZWN0aW9uID0gJ25vcm1hbCc7XG4gICAgfVxuICB9XG4gIGlmIChhbHRlcm5hdGl2ZVByb3BzLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgIHN0eWxlW2FsdGVybmF0aXZlUHJvcHNbcHJvcGVydHldXSA9IGFsdGVybmF0aXZlVmFsdWVzW3ZhbHVlXSB8fCB2YWx1ZTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIGdyYWRpZW50XzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBncmFkaWVudDtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSBpc1ByZWZpeGVkVmFsdWVfMTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByZWZpeGVzID0gWyctd2Via2l0LScsICctbW96LScsICcnXTtcblxudmFyIHZhbHVlcyA9IC9saW5lYXItZ3JhZGllbnR8cmFkaWFsLWdyYWRpZW50fHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnR8cmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudC87XG5cbmZ1bmN0aW9uIGdyYWRpZW50KHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAhKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSAmJiB2YWx1ZXMudGVzdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIGltYWdlU2V0XzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpbWFnZVNldDtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUgPSBpc1ByZWZpeGVkVmFsdWVfMTtcblxudmFyIF9pc1ByZWZpeGVkVmFsdWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNQcmVmaXhlZFZhbHVlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gaHR0cDovL2Nhbml1c2UuY29tLyNmZWF0PWNzcy1pbWFnZS1zZXRcbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnJ107XG5mdW5jdGlvbiBpbWFnZVNldChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgISgwLCBfaXNQcmVmaXhlZFZhbHVlMi5kZWZhdWx0KSh2YWx1ZSkgJiYgdmFsdWUuaW5kZXhPZignaW1hZ2Utc2V0KCcpID4gLTEpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9pbWFnZS1zZXRcXCgvZywgcHJlZml4ICsgJ2ltYWdlLXNldCgnKTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIHBvc2l0aW9uXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBwb3NpdGlvbjtcbmZ1bmN0aW9uIHBvc2l0aW9uKHByb3BlcnR5LCB2YWx1ZSkge1xuICBpZiAocHJvcGVydHkgPT09ICdwb3NpdGlvbicgJiYgdmFsdWUgPT09ICdzdGlja3knKSB7XG4gICAgcmV0dXJuIFsnLXdlYmtpdC1zdGlja3knLCAnc3RpY2t5J107XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnZhciBzaXppbmdfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHNpemluZztcbnZhciBwcmVmaXhlcyA9IFsnLXdlYmtpdC0nLCAnLW1vei0nLCAnJ107XG5cbnZhciBwcm9wZXJ0aWVzID0ge1xuICBtYXhIZWlnaHQ6IHRydWUsXG4gIG1heFdpZHRoOiB0cnVlLFxuICB3aWR0aDogdHJ1ZSxcbiAgaGVpZ2h0OiB0cnVlLFxuICBjb2x1bW5XaWR0aDogdHJ1ZSxcbiAgbWluV2lkdGg6IHRydWUsXG4gIG1pbkhlaWdodDogdHJ1ZVxufTtcbnZhciB2YWx1ZXMgPSB7XG4gICdtaW4tY29udGVudCc6IHRydWUsXG4gICdtYXgtY29udGVudCc6IHRydWUsXG4gICdmaWxsLWF2YWlsYWJsZSc6IHRydWUsXG4gICdmaXQtY29udGVudCc6IHRydWUsXG4gICdjb250YWluLWZsb2F0cyc6IHRydWVcbn07XG5cbmZ1bmN0aW9uIHNpemluZyhwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgaWYgKHByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkocHJvcGVydHkpICYmIHZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZXMubWFwKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzWydkZWZhdWx0J107XG59KTtcblxudmFyIHVwcGVyY2FzZVBhdHRlcm4gPSAvW0EtWl0vZztcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG52YXIgY2FjaGUkMSA9IHt9O1xuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZyBpbiBjYWNoZSQxXG4gICAgPyBjYWNoZSQxW3N0cmluZ11cbiAgICA6IGNhY2hlJDFbc3RyaW5nXSA9IHN0cmluZ1xuICAgICAgLnJlcGxhY2UodXBwZXJjYXNlUGF0dGVybiwgJy0kJicpXG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG52YXIgaW5kZXgkMiA9IGh5cGhlbmF0ZVN0eWxlTmFtZTtcblxudmFyIGh5cGhlbmF0ZVByb3BlcnR5XzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBoeXBoZW5hdGVQcm9wZXJ0eTtcblxudmFyIF9oeXBoZW5hdGVTdHlsZU5hbWUgPSBpbmRleCQyO1xuXG52YXIgX2h5cGhlbmF0ZVN0eWxlTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVTdHlsZU5hbWUpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBoeXBoZW5hdGVQcm9wZXJ0eShwcm9wZXJ0eSkge1xuICByZXR1cm4gKDAsIF9oeXBoZW5hdGVTdHlsZU5hbWUyLmRlZmF1bHQpKHByb3BlcnR5KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnZhciB0cmFuc2l0aW9uXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4ndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB0cmFuc2l0aW9uO1xuXG52YXIgX2h5cGhlbmF0ZVByb3BlcnR5ID0gaHlwaGVuYXRlUHJvcGVydHlfMTtcblxudmFyIF9oeXBoZW5hdGVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9oeXBoZW5hdGVQcm9wZXJ0eSk7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlID0gaXNQcmVmaXhlZFZhbHVlXzE7XG5cbnZhciBfaXNQcmVmaXhlZFZhbHVlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzUHJlZml4ZWRWYWx1ZSk7XG5cbnZhciBfY2FwaXRhbGl6ZVN0cmluZyA9IGNhcGl0YWxpemVTdHJpbmdfMTtcblxudmFyIF9jYXBpdGFsaXplU3RyaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NhcGl0YWxpemVTdHJpbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgcHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogdHJ1ZSxcbiAgdHJhbnNpdGlvblByb3BlcnR5OiB0cnVlLFxuICBXZWJraXRUcmFuc2l0aW9uOiB0cnVlLFxuICBXZWJraXRUcmFuc2l0aW9uUHJvcGVydHk6IHRydWUsXG4gIE1velRyYW5zaXRpb246IHRydWUsXG4gIE1velRyYW5zaXRpb25Qcm9wZXJ0eTogdHJ1ZVxufTtcblxuXG52YXIgcHJlZml4TWFwcGluZyA9IHtcbiAgV2Via2l0OiAnLXdlYmtpdC0nLFxuICBNb3o6ICctbW96LScsXG4gIG1zOiAnLW1zLSdcbn07XG5cbmZ1bmN0aW9uIHByZWZpeFZhbHVlKHZhbHVlLCBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICBpZiAoKDAsIF9pc1ByZWZpeGVkVmFsdWUyLmRlZmF1bHQpKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIG9ubHkgc3BsaXQgbXVsdGkgdmFsdWVzLCBub3QgY3ViaWMgYmV6aWVyc1xuICB2YXIgbXVsdGlwbGVWYWx1ZXMgPSB2YWx1ZS5zcGxpdCgvLCg/IVteKCldKig/OlxcKFteKCldKlxcKSk/XFwpKS9nKTtcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gbXVsdGlwbGVWYWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgc2luZ2xlVmFsdWUgPSBtdWx0aXBsZVZhbHVlc1tpXTtcbiAgICB2YXIgdmFsdWVzID0gW3NpbmdsZVZhbHVlXTtcbiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBwcm9wZXJ0eVByZWZpeE1hcCkge1xuICAgICAgdmFyIGRhc2hDYXNlUHJvcGVydHkgPSAoMCwgX2h5cGhlbmF0ZVByb3BlcnR5Mi5kZWZhdWx0KShwcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChzaW5nbGVWYWx1ZS5pbmRleE9mKGRhc2hDYXNlUHJvcGVydHkpID4gLTEgJiYgZGFzaENhc2VQcm9wZXJ0eSAhPT0gJ29yZGVyJykge1xuICAgICAgICB2YXIgcHJlZml4ZXMgPSBwcm9wZXJ0eVByZWZpeE1hcFtwcm9wZXJ0eV07XG4gICAgICAgIGZvciAodmFyIGogPSAwLCBwTGVuID0gcHJlZml4ZXMubGVuZ3RoOyBqIDwgcExlbjsgKytqKSB7XG4gICAgICAgICAgLy8gam9pbiBhbGwgcHJlZml4ZXMgYW5kIGNyZWF0ZSBhIG5ldyB2YWx1ZVxuICAgICAgICAgIHZhbHVlcy51bnNoaWZ0KHNpbmdsZVZhbHVlLnJlcGxhY2UoZGFzaENhc2VQcm9wZXJ0eSwgcHJlZml4TWFwcGluZ1twcmVmaXhlc1tqXV0gKyBkYXNoQ2FzZVByb3BlcnR5KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBtdWx0aXBsZVZhbHVlc1tpXSA9IHZhbHVlcy5qb2luKCcsJyk7XG4gIH1cblxuICByZXR1cm4gbXVsdGlwbGVWYWx1ZXMuam9pbignLCcpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uKHByb3BlcnR5LCB2YWx1ZSwgc3R5bGUsIHByb3BlcnR5UHJlZml4TWFwKSB7XG4gIC8vIGFsc28gY2hlY2sgZm9yIGFscmVhZHkgcHJlZml4ZWQgdHJhbnNpdGlvbnNcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICB2YXIgb3V0cHV0VmFsdWUgPSBwcmVmaXhWYWx1ZSh2YWx1ZSwgcHJvcGVydHlQcmVmaXhNYXApO1xuICAgIC8vIGlmIHRoZSBwcm9wZXJ0eSBpcyBhbHJlYWR5IHByZWZpeGVkXG4gICAgdmFyIHdlYmtpdE91dHB1dCA9IG91dHB1dFZhbHVlLnNwbGl0KC8sKD8hW14oKV0qKD86XFwoW14oKV0qXFwpKT9cXCkpL2cpLmZpbHRlcihmdW5jdGlvbiAodmFsKSB7XG4gICAgICByZXR1cm4gIS8tbW96LXwtbXMtLy50ZXN0KHZhbCk7XG4gICAgfSkuam9pbignLCcpO1xuXG4gICAgaWYgKHByb3BlcnR5LmluZGV4T2YoJ1dlYmtpdCcpID4gLTEpIHtcbiAgICAgIHJldHVybiB3ZWJraXRPdXRwdXQ7XG4gICAgfVxuXG4gICAgdmFyIG1vek91dHB1dCA9IG91dHB1dFZhbHVlLnNwbGl0KC8sKD8hW14oKV0qKD86XFwoW14oKV0qXFwpKT9cXCkpL2cpLmZpbHRlcihmdW5jdGlvbiAodmFsKSB7XG4gICAgICByZXR1cm4gIS8td2Via2l0LXwtbXMtLy50ZXN0KHZhbCk7XG4gICAgfSkuam9pbignLCcpO1xuXG4gICAgaWYgKHByb3BlcnR5LmluZGV4T2YoJ01veicpID4gLTEpIHtcbiAgICAgIHJldHVybiBtb3pPdXRwdXQ7XG4gICAgfVxuXG4gICAgc3R5bGVbJ1dlYmtpdCcgKyAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KV0gPSB3ZWJraXRPdXRwdXQ7XG4gICAgc3R5bGVbJ01veicgKyAoMCwgX2NhcGl0YWxpemVTdHJpbmcyLmRlZmF1bHQpKHByb3BlcnR5KV0gPSBtb3pPdXRwdXQ7XG4gICAgcmV0dXJuIG91dHB1dFZhbHVlO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbn0pO1xuXG52YXIgaW5kZXgkMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVQcmVmaXhlciA9IGNyZWF0ZVByZWZpeGVyXzE7XG5cbnZhciBfY3JlYXRlUHJlZml4ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlUHJlZml4ZXIpO1xuXG52YXIgX3N0YXRpY0RhdGEgPSBzdGF0aWNEYXRhO1xuXG52YXIgX3N0YXRpY0RhdGEyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RhdGljRGF0YSk7XG5cbnZhciBfY3Vyc29yID0gY3Vyc29yXzE7XG5cbnZhciBfY3Vyc29yMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2N1cnNvcik7XG5cbnZhciBfY3Jvc3NGYWRlID0gY3Jvc3NGYWRlXzE7XG5cbnZhciBfY3Jvc3NGYWRlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Nyb3NzRmFkZSk7XG5cbnZhciBfZmlsdGVyID0gZmlsdGVyXzE7XG5cbnZhciBfZmlsdGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZpbHRlcik7XG5cbnZhciBfZmxleCA9IGZsZXhfMTtcblxudmFyIF9mbGV4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ZsZXgpO1xuXG52YXIgX2ZsZXhib3hPbGQgPSBmbGV4Ym94T2xkXzE7XG5cbnZhciBfZmxleGJveE9sZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9mbGV4Ym94T2xkKTtcblxudmFyIF9ncmFkaWVudCA9IGdyYWRpZW50XzE7XG5cbnZhciBfZ3JhZGllbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ3JhZGllbnQpO1xuXG52YXIgX2ltYWdlU2V0ID0gaW1hZ2VTZXRfMTtcblxudmFyIF9pbWFnZVNldDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbWFnZVNldCk7XG5cbnZhciBfcG9zaXRpb24gPSBwb3NpdGlvbl8xO1xuXG52YXIgX3Bvc2l0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc2l0aW9uKTtcblxudmFyIF9zaXppbmcgPSBzaXppbmdfMTtcblxudmFyIF9zaXppbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2l6aW5nKTtcblxudmFyIF90cmFuc2l0aW9uID0gdHJhbnNpdGlvbl8xO1xuXG52YXIgX3RyYW5zaXRpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwbHVnaW5zID0gW19jcm9zc0ZhZGUyLmRlZmF1bHQsIF9jdXJzb3IyLmRlZmF1bHQsIF9maWx0ZXIyLmRlZmF1bHQsIF9mbGV4Ym94T2xkMi5kZWZhdWx0LCBfZ3JhZGllbnQyLmRlZmF1bHQsIF9pbWFnZVNldDIuZGVmYXVsdCwgX3Bvc2l0aW9uMi5kZWZhdWx0LCBfc2l6aW5nMi5kZWZhdWx0LCBfdHJhbnNpdGlvbjIuZGVmYXVsdCwgX2ZsZXgyLmRlZmF1bHRdO1xuXG5leHBvcnRzLmRlZmF1bHQgPSAoMCwgX2NyZWF0ZVByZWZpeGVyMi5kZWZhdWx0KSh7XG4gIHByZWZpeE1hcDogX3N0YXRpY0RhdGEyLmRlZmF1bHQucHJlZml4TWFwLFxuICBwbHVnaW5zOiBwbHVnaW5zXG59KTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xufSk7XG5cbnZhciBhZGRQcmVmaXggPSB1bndyYXBFeHBvcnRzKGluZGV4JDEpO1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gXG5cbnZhciBub1VuaXRzTnVtYmVyS2V5cyA9IFtcbiAgJ2ZsZXgnLFxuICAnb3BhY2l0eScsXG4gICd6SW5kZXgnLFxuICAnZm9udFdlaWdodCcsXG4gICdsaW5lcydcbl07XG5cbi8vIHdoZXRoZXIgdG8gc3VwcG9ydCB1c2luZyAwLjVweCB0byBwYWludCAxcHggd2lkdGggYm9yZGVyLlxudmFyIF9zdXBwb3J0SGFpcmxpbmVzO1xuZnVuY3Rpb24gc3VwcG9ydEhhaXJsaW5lcyAoKSB7XG4gIGlmICh0eXBlb2YgX3N1cHBvcnRIYWlybGluZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGRwciA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xuICAgIGlmIChkcHIgJiYgZHByID49IDIgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICB2YXIgZG9jRWxtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgdmFyIHRlc3RFbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHZhciBmYWtlQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICAgIHZhciBiZWZvcmVOb2RlID0gZG9jRWxtLmZpcnN0RWxlbWVudENoaWxkIHx8IGRvY0VsbS5maXJzdENoaWxkO1xuICAgICAgdGVzdEVsbS5zdHlsZS5ib3JkZXIgPSAnMC41cHggc29saWQgdHJhbnNwYXJlbnQnO1xuICAgICAgZmFrZUJvZHkuYXBwZW5kQ2hpbGQodGVzdEVsbSk7XG4gICAgICBkb2NFbG0uaW5zZXJ0QmVmb3JlKGZha2VCb2R5LCBiZWZvcmVOb2RlKTtcbiAgICAgIF9zdXBwb3J0SGFpcmxpbmVzID0gdGVzdEVsbS5vZmZzZXRIZWlnaHQgPT09IDE7XG4gICAgICBkb2NFbG0ucmVtb3ZlQ2hpbGQoZmFrZUJvZHkpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIF9zdXBwb3J0SGFpcmxpbmVzID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfc3VwcG9ydEhhaXJsaW5lc1xufVxuXG4vKipcbiAqIHJlbW92ZSBjb21tZW50cyBmcm9tIGEgY3NzVGV4dC5cbiAqL1xuZnVuY3Rpb24gdHJpbUNvbW1lbnQgKGNzc1RleHQpIHtcbiAgcmV0dXJuIGNzc1RleHQucmVwbGFjZSgvKD86XFwvXFwqKVtcXHNcXFNdKj9cXCpcXC8vZywgJycpXG59XG5cbnZhciBzdXBwb3J0JDEgPSBudWxsO1xuXG5mdW5jdGlvbiBzdXBwb3J0U3RpY2t5ICgpIHtcbiAgaWYgKHN1cHBvcnQkMSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBzdXBwb3J0JDFcbiAgfVxuICB2YXIgZWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIGVsZW1lbnRTdHlsZSA9IGVsZW1lbnQuc3R5bGU7XG4gIGVsZW1lbnRTdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOi13ZWJraXQtc3RpY2t5O3Bvc2l0aW9uOnN0aWNreTsnO1xuICBzdXBwb3J0JDEgPSBlbGVtZW50U3R5bGUucG9zaXRpb24uaW5kZXhPZignc3RpY2t5JykgIT09IC0xO1xuICByZXR1cm4gc3VwcG9ydCQxXG59XG5cbnZhciByZWdQZXJjZW50YWdlID0gL15bKy1dP1xcZCsoXFwuXFxkKyk/JSQvO1xuZnVuY3Rpb24gaXNQZXJjZW50YWdlICh2YWwpIHtcbiAgcmV0dXJuIHJlZ1BlcmNlbnRhZ2UudGVzdCh2YWwpXG59XG5cbnZhciByZWdVbml0c051bSA9IC9eKFsrLV0/XFxkKyg/OlxcLlxcZCspPykoW3Asd114KT8kLzsgLy8gc3VwcG9ydCB1bml0czogcHgsIHd4LlxuZnVuY3Rpb24gbm9ybWFsaXplVW5pdHNOdW0gKHZhbCkge1xuICB2YXIgbWF0Y2ggPSB2YWwubWF0Y2gocmVnVW5pdHNOdW0pO1xuICBpZiAoIW1hdGNoKSB7IHJldHVybiAnJyB9XG4gIHZhciB1bml0ID0gJ3B4JzsgLy8gcHggYnkgZGVmYXVsdC5cbiAgaWYgKG1hdGNoWzJdKSB7XG4gICAgdW5pdCA9IG1hdGNoWzJdO1xuICB9XG4gIHJldHVybiBwYXJzZVNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbMV0pLCB1bml0KVxufVxuXG5mdW5jdGlvbiBnZXRVbml0U2NhbGVNYXAgKCkge1xuICB2YXIgcmVmID0gZ2V0Vmlld3BvcnRJbmZvKCk7XG4gIHZhciBzY2FsZSA9IHJlZi5zY2FsZTtcbiAgdmFyIGRwciA9IHJlZi5kcHI7XG4gIHJldHVybiB7XG4gICAgcHg6IHNjYWxlLFxuICAgIHd4OiBzY2FsZSAqIGRwclxuICB9XG59XG5cbmZ1bmN0aW9uIGxpbWl0U2NhbGUgKHZhbCwgbGltaXQpIHtcbiAgbGltaXQgPSBsaW1pdCB8fCAxO1xuICB2YXIgc2lnbiA9IHZhbCA9PT0gMCA/IDAgOiB2YWwgPiAwID8gMSA6IC0xO1xuICB2YXIgbmV3VmFsID0gTWF0aC5hYnModmFsKSA+IGxpbWl0ID8gdmFsIDogc2lnbiAqIGxpbWl0O1xuICAvLyBzdXBwb3J0IDFweCBkZXZpY2Ugd2lkdGguXG4gIGlmIChuZXdWYWwgPT09IDEgJiYgdmFsIDwgMSAmJiBzdXBwb3J0SGFpcmxpbmVzKCkpIHtcbiAgICBuZXdWYWwgPSAwLjU7XG4gIH1cbiAgcmV0dXJuIG5ld1ZhbFxufVxuXG5mdW5jdGlvbiBwYXJzZVNjYWxlICh2YWwsIHVuaXQpIHtcbiAgdmFyIHVuaXRTY2FsZU1hcCA9IGdldFVuaXRTY2FsZU1hcCgpO1xuICByZXR1cm4gbGltaXRTY2FsZSh2YWwgKiB1bml0U2NhbGVNYXBbdW5pdF0pICsgJ3B4J1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTdHJpbmcgKHN0eWxlS2V5LCBzdHlsZVZhbCkge1xuICBpZiAoaXNQZXJjZW50YWdlKHN0eWxlVmFsKSkge1xuICAgIHJldHVybiBzdHlsZVZhbFxuICB9XG5cbiAgLyoqXG4gICAqIDEuIHRlc3QgaWYgaXMgYSByZWd1bGFyIHNjYWxlIGNzcy4gZS5nLiBgd2lkdGg6IDEwMHB4O2BcbiAgICogIHRoaXMgc2hvdWxkIGJlIGEgc3RhbmRhbG9uZSBudW1iZXIgdmFsdWUgd2l0aCBvciB3aXRob3V0IHVuaXQsIG90aGVyd2lzZVxuICAgKiAgaXQgc2hvdWxkbid0IGJlIGNoYW5nZWQuXG4gICAqL1xuICB2YXIgdW5pdHNOdW0gPSBub3JtYWxpemVVbml0c051bShzdHlsZVZhbCk7XG4gIGlmICh1bml0c051bSkgeyByZXR1cm4gdW5pdHNOdW0gfVxuXG4gIC8qKlxuICAgKiAyLiBpZiBhIHN0cmluZyBjb250YWlucyBtdWx0aXBsZSBweCB2YWx1ZXMsIHRoYW4gdGhleSBzaG91bGQgYmUgYWxsIG5vcm1hbGl6ZWQuXG4gICAqICB2YWx1ZXMgc2hvdWxkIGhhdmUgd3ggb3IgcHggdW5pdHMsIG90aGVyd2lzZSB0aGV5IHNob3VsZCBiZSBsZWZ0IHVuY2hhbmdlZC5cbiAgICogIGUuZy5cbiAgICogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoMTBweCwgNnB4LCAwKVxuICAgKiAgICBib3JkZXI6IDJweCBzb2xpZCByZWRcbiAgICovXG4gIHZhciBudW1SZWcgPSAvKFsrLV0/W1xcZC5dKykoW3Asd114KS9pZztcbiAgaWYgKG51bVJlZy50ZXN0KHN0eWxlVmFsKSkge1xuICAgIHZhciB1bml0U2NhbGVNYXAgPSBnZXRVbml0U2NhbGVNYXAoKTtcbiAgICB2YXIgdmFsID0gc3R5bGVWYWwucmVwbGFjZShudW1SZWcsIGZ1bmN0aW9uIChtLCAkMCwgJDEpIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZUZsb2F0KCQwKSAqIHVuaXRTY2FsZU1hcFskMV07XG4gICAgICByZXR1cm4gbGltaXRTY2FsZShyZXMpICsgJ3B4J1xuICAgIH0pO1xuICAgIHJldHVybiB2YWxcbiAgfVxuXG4gIC8vIG90aGVyd2lzZVxuICByZXR1cm4gc3R5bGVWYWxcbn1cblxuZnVuY3Rpb24gYXV0b1ByZWZpeCAoc3R5bGUpIHtcbiAgdmFyIHByZWZpeGVkID0gYWRkUHJlZml4KHN0eWxlKTtcbiAgLy8gZmxleCBvbmx5IGFkZGVkIFdlYmtpdEZsZXguIFNob3VsZCBhZGQgV2Via2l0Qm94RmxleCBhbHNvLlxuICB2YXIgZmxleCA9IHByZWZpeGVkLmZsZXg7XG4gIGlmIChmbGV4KSB7XG4gICAgcHJlZml4ZWQuV2Via2l0Qm94RmxleCA9IGZsZXg7XG4gICAgcHJlZml4ZWQuTW96Qm94RmxleCA9IGZsZXg7XG4gICAgcHJlZml4ZWQuTXNGbGV4ID0gZmxleDtcbiAgfVxuICByZXR1cm4gcHJlZml4ZWRcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplTnVtYmVyIChzdHlsZUtleSwgc3R5bGVWYWwpIHtcbiAgdmFyIHJlZiA9IGdldFZpZXdwb3J0SW5mbygpO1xuICB2YXIgc2NhbGUgPSByZWYuc2NhbGU7XG4gIHJldHVybiBzdHlsZVZhbCAqIHNjYWxlICsgJ3B4J1xufVxuXG4vKipcbiAqIG5vcm1hbGl6ZSBzdHlsZSB0byBhZGFwdGUgdG8gY3VycmVudCB2aWV3cG9ydCBieSBtdWx0aXBseSBjdXJyZW50IHNjYWxlLlxuICogQHBhcmFtICB7b2JqZWN0fSBzdHlsZTogc2hvdWxkIGJlIGNhbWVsQ2FzZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGUgKHN0eWxlKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIga2V5IGluIHN0eWxlKSB7XG4gICAgdmFyIHZhbCA9IHN0eWxlW2tleV07XG4gICAgaWYgKG5vVW5pdHNOdW1iZXJLZXlzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgICByZXNba2V5XSA9IHZhbDtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIHN3aXRjaCAodHlwZW9mIHZhbCkge1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmVzW2tleV0gPSBub3JtYWxpemVTdHJpbmcoa2V5LCB2YWwpO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgcmVzW2tleV0gPSBub3JtYWxpemVOdW1iZXIoa2V5LCB2YWwpO1xuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmVzW2tleV0gPSB2YWw7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyoqXG4gKiBnZXQgdHJhbnNmb3JtT2JqXG4gKi9cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybU9iaiAoZWxtKSB7XG4gIHZhciBzdHlsZU9iaiA9IHt9O1xuICBpZiAoIWVsbSkgeyByZXR1cm4gc3R5bGVPYmogfVxuICB2YXIgdHJhbnNmb3JtU3RyID0gZWxtLnN0eWxlLndlYmtpdFRyYW5zZm9ybVxuICAgIHx8IGVsbS5zdHlsZS5tb3pUcmFuc2Zvcm1cbiAgICB8fCBlbG0uc3R5bGUudHJhbnNmb3JtO1xuICBpZiAodHJhbnNmb3JtU3RyICYmIHRyYW5zZm9ybVN0ci5tYXRjaCgvKD86ICooPzp0cmFuc2xhdGV8cm90YXRlfHNjYWxlKVteKF0qXFwoW14oXStcXCkpKy9pKSkge1xuICAgIHN0eWxlT2JqID0gdHJhbnNmb3JtU3RyLnRyaW0oKS5yZXBsYWNlKC8sICsvZywgJywnKS5zcGxpdCgnICcpLnJlZHVjZShmdW5jdGlvbiAocHJlLCBzdHIpIHtcbiAgICAgIFsndHJhbnNsYXRlJywgJ3NjYWxlJywgJ3JvdGF0ZSddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgaWYgKG5ldyBSZWdFeHAobmFtZSwgJ2knKS50ZXN0KHN0cikpIHtcbiAgICAgICAgICBwcmVbbmFtZV0gPSBzdHI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHByZVxuICAgIH0sIHt9KTtcbiAgfVxuICByZXR1cm4gc3R5bGVPYmpcbn1cblxuLyoqXG4gKiB0cmFuc2xhdGUgYSB0cmFuc2Zvcm0gc3RyaW5nIGZyb20gYSB0cmFuc2Zvcm1PYmouXG4gKi9cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybVN0ciAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZShmdW5jdGlvbiAocHJlLCBrZXkpIHtcbiAgICByZXR1cm4gcHJlICsgb2JqW2tleV0gKyAnICdcbiAgfSwgJycpXG59XG5cbi8qKlxuICogYWRkIHRyYW5zZm9ybSBzdHlsZSB0byBlbGVtZW50LlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxtXG4gKiBAcGFyYW0ge29iamVjdH0gc3R5bGU6IHRyYW5zZm9ybSBvYmplY3QsIGZvcm1hdCBpcyBsaWtlIHRoaXM6XG4gKiAgIHtcbiAqICAgICB0cmFuc2xhdGU6ICd0cmFuc2xhdGUzZCgycHgsIDJweCwgMnB4KScsXG4gKiAgICAgc2NhbGU6ICdzY2FsZSgwLjIpJyxcbiAqICAgICByb3RhdGU6ICdyb3RhdGUoMzBkZWcpJ1xuICogICB9XG4gKiBAcGFyYW0ge2Jvb2xlYW59IHJlcGxhY2U6IHdoZXRoZXIgdG8gcmVwbGFjZSBhbGwgdHJhbnNmb3JtIHByb3BlcnRpZXMuXG4gKi9cbmZ1bmN0aW9uIGFkZFRyYW5zZm9ybSAoZWxtLCBzdHlsZSwgcmVwbGFjZSkge1xuICBpZiAoIXN0eWxlKSB7IHJldHVybiB9XG4gIHZhciBzdHlsZU9iaiA9IHt9O1xuICBpZiAoIXJlcGxhY2UpIHtcbiAgICBzdHlsZU9iaiA9IGdldFRyYW5zZm9ybU9iaihlbG0pO1xuICB9XG4gIGZvciAodmFyIGtleSBpbiBzdHlsZSkge1xuICAgIHZhciB2YWwgPSBzdHlsZVtrZXldO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHN0eWxlT2JqW2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG4gIHZhciByZXNTdHIgPSBnZXRUcmFuc2Zvcm1TdHIoc3R5bGVPYmopO1xuICBlbG0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gcmVzU3RyO1xuICBlbG0uc3R5bGUubW96VHJhbnNmb3JtID0gcmVzU3RyO1xuICBlbG0uc3R5bGUudHJhbnNmb3JtID0gcmVzU3RyO1xufVxuXG4vKipcbiAqIGFkZCB0cmFuc2xhdGUgWCB0byB0aGUgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gYWRkVHJhbnNsYXRlWCAoZWxtLCB0b0FkZCkge1xuICBpZiAoIXRvQWRkKSB7IHJldHVybiB9XG4gIHZhciBzdHlsZU9iaiA9IGdldFRyYW5zZm9ybU9iaihlbG0pO1xuICBpZiAoIXN0eWxlT2JqLnRyYW5zbGF0ZSkge1xuICAgIHN0eWxlT2JqLnRyYW5zbGF0ZSA9ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSc7XG4gIH1cbiAgc3R5bGVPYmoudHJhbnNsYXRlID0gc3R5bGVPYmoudHJhbnNsYXRlLnJlcGxhY2UoL1srLVxcZC5dK1twd114LywgZnVuY3Rpb24gKCQwKSB7XG4gICAgcmV0dXJuIChwYXJzZUZsb2F0KCQwKSArIHRvQWRkKSArICdweCdcbiAgfSk7XG4gIHZhciByZXNTdHIgPSBnZXRUcmFuc2Zvcm1TdHIoc3R5bGVPYmopO1xuICBlbG0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gcmVzU3RyO1xuICBlbG0uc3R5bGUubW96VHJhbnNmb3JtID0gcmVzU3RyO1xuICBlbG0uc3R5bGUudHJhbnNmb3JtID0gcmVzU3RyO1xufVxuXG4vKipcbiAqIGNvcHkgYSB0cmFuc2Zvcm0gYmVoYXZpb3VyIGZyb20gb25lIGVsZW1lbnQgdG8gYW5vdGhlci5cbiAqIGtleSBjb3VsZCBiZTogJ3RyYW5zbGF0ZScgfCAnc2NhbGUnIHwgJ3JvdGF0ZSdcbiAqL1xuZnVuY3Rpb24gY29weVRyYW5zZm9ybSAoZnJvbSwgdG8sIGtleSkge1xuICB2YXIgc3RyO1xuICBpZiAoIWtleSkge1xuICAgIHN0ciA9IGZyb20uc3R5bGUud2Via2l0VHJhbnNmb3JtXG4gICAgICB8fCBmcm9tLnN0eWxlLm1velRyYW5zZm9ybVxuICAgICAgfHwgZnJvbS5zdHlsZS50cmFuc2Zvcm07XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIGZyb21PYmogPSBnZXRUcmFuc2Zvcm1PYmooZnJvbSk7XG4gICAgaWYgKCFmcm9tT2JqW2tleV0pIHsgcmV0dXJuIH1cbiAgICB2YXIgdG9PYmogPSBnZXRUcmFuc2Zvcm1PYmoodG8pO1xuICAgIHRvT2JqW2tleV0gPSBmcm9tT2JqW2tleV07XG4gICAgc3RyID0gZ2V0VHJhbnNmb3JtU3RyKHRvT2JqKTtcbiAgfVxuICB0by5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdHI7XG4gIHRvLnN0eWxlLm1velRyYW5zZm9ybSA9IHN0cjtcbiAgdG8uc3R5bGUudHJhbnNmb3JtID0gc3RyO1xufVxuXG4vKipcbiAqIGdldCBjb2xvcidzIHIsIGcsIGIgdmFsdWUuXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3Igc3VwcG9ydCBhbGwga2luZHMgb2YgdmFsdWUgb2YgY29sb3IuXG4gKi9cbmZ1bmN0aW9uIGdldFJnYiAoY29sb3IpIHtcbiAgdmFyIGhheFJlZyA9IC8jKFtcXGRhLWZBLUZdezJ9KShbXFxkYS1mQS1GXXsyfSkoW1xcZGEtZkEtRl17Mn0pLztcbiAgdmFyIHJnYlJlZyA9IC9yZ2JcXCgoXFxkKyksXFxzKihcXGQrKSxcXHMqKFxcZCspXFwpLztcbiAgdmFyIHNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIHZhciBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgc3Bhbi5zdHlsZS5jc3NUZXh0ID0gXCJjb2xvcjogXCIgKyBjb2xvciArIFwiOyB3aWR0aDogMHB4OyBoZWlnaHQ6IDBweDtcIjtcbiAgYm9keSAmJiBib2R5LmFwcGVuZENoaWxkKHNwYW4pO1xuICBjb2xvciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHNwYW4pLmNvbG9yICsgJyc7XG4gIGJvZHkgJiYgYm9keS5yZW1vdmVDaGlsZChzcGFuKTtcblxuICB2YXIgbWF0Y2g7XG4gIG1hdGNoID0gY29sb3IubWF0Y2goaGF4UmVnKTtcbiAgaWYgKG1hdGNoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHI6IHBhcnNlSW50KG1hdGNoWzFdLCAxNiksXG4gICAgICBnOiBwYXJzZUludChtYXRjaFsyXSwgMTYpLFxuICAgICAgYjogcGFyc2VJbnQobWF0Y2hbM10sIDE2KVxuICAgIH1cbiAgfVxuICBtYXRjaCA9IGNvbG9yLm1hdGNoKHJnYlJlZyk7XG4gIGlmIChtYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICByOiBwYXJzZUludChtYXRjaFsxXSksXG4gICAgICBnOiBwYXJzZUludChtYXRjaFsyXSksXG4gICAgICBiOiBwYXJzZUludChtYXRjaFszXSlcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBnZXQgc3R5bGUgc2hlZXQgd2l0aCBvd25lciBub2RlJ3MgaWRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBvd25lciBub2RlIGlkLlxuICovXG5mdW5jdGlvbiBnZXRTdHlsZVNoZWV0QnlJZCAoaWQpIHtcbiAgaWYgKCFpZCkgeyByZXR1cm4gfVxuICB2YXIgc3R5bGVTaGVldHMgPSBkb2N1bWVudC5zdHlsZVNoZWV0cztcbiAgdmFyIGxlbiA9IHN0eWxlU2hlZXRzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBzdHlsZVNoZWV0ID0gc3R5bGVTaGVldHNbaV07XG4gICAgaWYgKHN0eWxlU2hlZXQub3duZXJOb2RlLmlkID09PSBpZCkge1xuICAgICAgcmV0dXJuIHN0eWxlU2hlZXRcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0Q2hpbGRyZW5Ub3RhbFdpZHRoIChjaGlsZHJlbikge1xuICB2YXIgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xuICB2YXIgdG90YWwgPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdG90YWwgKz0gY2hpbGRyZW5baV0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gIH1cbiAgcmV0dXJuIHRvdGFsXG59XG4vKipcbiAqIGdldCB0b3RhbCBjb250ZW50IHdpZHRoIG9mIHRoZSBlbGVtZW50LlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxtXG4gKi9cbmZ1bmN0aW9uIGdldFJhbmdlV2lkdGggKGVsbSkge1xuICB2YXIgY2hpbGRyZW4gPSBlbG0uY2hpbGRyZW47XG4gIGlmICghY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoXG4gIH1cbiAgaWYgKCFSYW5nZSkge1xuICAgIHJldHVybiBnZXRDaGlsZHJlblRvdGFsV2lkdGgoY2hpbGRyZW4pXG4gIH1cbiAgdmFyIHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgaWYgKCFyYW5nZS5zZWxlY3ROb2RlQ29udGVudHMpIHtcbiAgICByZXR1cm4gZ2V0Q2hpbGRyZW5Ub3RhbFdpZHRoKGNoaWxkcmVuKVxuICB9XG4gIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhlbG0pO1xuICByZXR1cm4gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGhcbn1cblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cblxuXG52YXIgdXRpbHMgPSBPYmplY3QuZnJlZXplKHtcblx0ZXh0ZW5kOiBleHRlbmQsXG5cdGV4dGVuZFRydXRoeTogZXh0ZW5kVHJ1dGh5LFxuXHRleHRlbmRLZXlzOiBleHRlbmRLZXlzLFxuXHRleHRyYWN0S2V5czogZXh0cmFjdEtleXMsXG5cdGJpbmQ6IGJpbmQsXG5cdGRlYm91bmNlOiBkZWJvdW5jZSxcblx0ZGVwcmVzczogZGVwcmVzcyxcblx0dGhyb3R0bGU6IHRocm90dGxlLFxuXHRsb29wQXJyYXk6IGxvb3BBcnJheSxcblx0Y2FjaGVkOiBjYWNoZWQsXG5cdGNhbWVsaXplOiBjYW1lbGl6ZSxcblx0Y2FtZWxpemVLZXlzOiBjYW1lbGl6ZUtleXMsXG5cdGNhcGl0YWxpemU6IGNhcGl0YWxpemUsXG5cdGh5cGhlbmF0ZTogaHlwaGVuYXRlLFxuXHRoeXBoZW5hdGVLZXlzOiBoeXBoZW5hdGVLZXlzLFxuXHRoeXBoZW5hdGVTdHlsZUtleXM6IGh5cGhlbmF0ZVN0eWxlS2V5cyxcblx0Y2FtZWxUb0tlYmFiOiBjYW1lbFRvS2ViYWIsXG5cdGFwcGVuZENzczogYXBwZW5kQ3NzLFxuXHRuZXh0RnJhbWU6IG5leHRGcmFtZSxcblx0dG9DU1NUZXh0OiB0b0NTU1RleHQsXG5cdHN1cHBvcnRzUGFzc2l2ZTogc3VwcG9ydHNQYXNzaXZlLFxuXHRjcmVhdGVFdmVudDogY3JlYXRlRXZlbnQsXG5cdGNyZWF0ZUJ1YmJsZXNFdmVudDogY3JlYXRlQnViYmxlc0V2ZW50LFxuXHRjcmVhdGVDdXN0b21FdmVudDogY3JlYXRlQ3VzdG9tRXZlbnQsXG5cdGRpc3BhdGNoRXZlbnQ6IGRpc3BhdGNoRXZlbnQsXG5cdG1hcEZvcm1FdmVudHM6IG1hcEZvcm1FdmVudHMsXG5cdGdldFBhcmVudFNjcm9sbGVyOiBnZXRQYXJlbnRTY3JvbGxlcixcblx0aGFzSW50ZXJzZWN0aW9uOiBoYXNJbnRlcnNlY3Rpb24sXG5cdGlzRWxlbWVudFZpc2libGU6IGlzRWxlbWVudFZpc2libGUsXG5cdGdldEV2ZW50SGFuZGxlcnM6IGdldEV2ZW50SGFuZGxlcnMsXG5cdHdhdGNoQXBwZWFyOiB3YXRjaEFwcGVhcixcblx0dHJpZ2dlckRpc2FwcGVhcjogdHJpZ2dlckRpc2FwcGVhcixcblx0ZGV0ZWN0QXBwZWFyOiBkZXRlY3RBcHBlYXIsXG5cdGFwcGx5U3JjOiBhcHBseVNyYyxcblx0ZmlyZUxhenlsb2FkOiBmaXJlTGF6eWxvYWQsXG5cdGdldFRocm90dGxlTGF6eWxvYWQ6IGdldFRocm90dGxlTGF6eWxvYWQsXG5cdHN1cHBvcnRIYWlybGluZXM6IHN1cHBvcnRIYWlybGluZXMsXG5cdHRyaW1Db21tZW50OiB0cmltQ29tbWVudCxcblx0c3VwcG9ydFN0aWNreTogc3VwcG9ydFN0aWNreSxcblx0aXNQZXJjZW50YWdlOiBpc1BlcmNlbnRhZ2UsXG5cdG5vcm1hbGl6ZVVuaXRzTnVtOiBub3JtYWxpemVVbml0c051bSxcblx0bm9ybWFsaXplU3RyaW5nOiBub3JtYWxpemVTdHJpbmcsXG5cdGF1dG9QcmVmaXg6IGF1dG9QcmVmaXgsXG5cdG5vcm1hbGl6ZU51bWJlcjogbm9ybWFsaXplTnVtYmVyLFxuXHRub3JtYWxpemVTdHlsZTogbm9ybWFsaXplU3R5bGUsXG5cdGdldFRyYW5zZm9ybU9iajogZ2V0VHJhbnNmb3JtT2JqLFxuXHRnZXRUcmFuc2Zvcm1TdHI6IGdldFRyYW5zZm9ybVN0cixcblx0YWRkVHJhbnNmb3JtOiBhZGRUcmFuc2Zvcm0sXG5cdGFkZFRyYW5zbGF0ZVg6IGFkZFRyYW5zbGF0ZVgsXG5cdGNvcHlUcmFuc2Zvcm06IGNvcHlUcmFuc2Zvcm0sXG5cdGdldFJnYjogZ2V0UmdiLFxuXHRnZXRTdHlsZVNoZWV0QnlJZDogZ2V0U3R5bGVTaGVldEJ5SWQsXG5cdGdldFJhbmdlV2lkdGg6IGdldFJhbmdlV2lkdGgsXG5cdGlzUGxhaW5PYmplY3Q6IGlzUGxhaW5PYmplY3QsXG5cdGlzQXJyYXk6IGlzQXJyYXlcbn0pO1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogZ2V0IFdYRW52aXJvbm1lbnQgaW5mby5cbiAqIEBwYXJhbSAge29iamVjdH0gdmlld3BvcnRJbmZvOiBpbmZvIGFib3V0IHZpZXdwb3J0LlxuICogQHBhcmFtICB7b2JqZWN0fSBlbnZJbmZvOiBpbmZvIHBhcnNlZCBmcm9tIGxpYi5lbnYuXG4gKi9cbmZ1bmN0aW9uIGluaXRFbnYgKHZpZXdwb3J0SW5mbywgZW52SW5mbykge1xuICB2YXIgYnJvd3Nlck5hbWUgPSBlbnZJbmZvLmJyb3dzZXIgPyBlbnZJbmZvLmJyb3dzZXIubmFtZSA6IG5hdmlnYXRvci5hcHBOYW1lO1xuICB2YXIgYnJvd3NlclZlcnNpb24gPSBlbnZJbmZvLmJyb3dzZXIgPyBlbnZJbmZvLmJyb3dzZXIudmVyc2lvbi52YWwgOiBudWxsO1xuICB2YXIgb3NOYW1lID0gZW52SW5mby5vcy5uYW1lO1xuICBpZiAob3NOYW1lLm1hdGNoKC8oaVBob25lfGlQYWR8aVBvZCkvaSkpIHtcbiAgICBvc05hbWUgPSAnaU9TJztcbiAgfVxuICBlbHNlIGlmIChvc05hbWUubWF0Y2goL0FuZHJvaWQvaSkpIHtcbiAgICBvc05hbWUgPSAnYW5kcm9pZCc7XG4gIH1cbiAgdmFyIG9zVmVyc2lvbiA9IGVudkluZm8ub3MudmVyc2lvbi52YWw7XG4gIHZhciBlbnYgPSB7XG4gICAgcGxhdGZvcm06ICdXZWInLFxuICAgIHdlZXhWZXJzaW9uOiAnMC4xMi4yNScsXG4gICAgdXNlckFnZW50OiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGFwcE5hbWU6IGJyb3dzZXJOYW1lLFxuICAgIGFwcFZlcnNpb246IGJyb3dzZXJWZXJzaW9uLFxuICAgIG9zTmFtZTogb3NOYW1lLFxuICAgIG9zVmVyc2lvbjogb3NWZXJzaW9uLFxuICAgIGRldmljZU1vZGVsOiBlbnZJbmZvLm9zLm5hbWUgfHwgbnVsbFxuICB9O1xuICAvKipcbiAgICogdmlld3BvcnRJbmZvOiBzY2FsZSwgZGV2aWNlV2lkdGgsIGRldmljZUhlaWdodC4gZHByXG4gICAqL1xuICByZXR1cm4gZXh0ZW5kKGVudiwgdmlld3BvcnRJbmZvKVxufVxuXG4vLyBjb25zdCB2aWV3cG9ydEluZm8gPSBpbml0Vmlld3BvcnQoKVxuXG4vLyA3NTAgYnkgZGVmYXVsdCBjdXJyZW50bHlcbi8vIGNvbnN0IHNjYWxlID0gdmlld3BvcnRJbmZvLnNjYWxlXG5cbi8vIGNvbnN0IHVuaXRzID0ge1xuLy8gICBSRU06IDEyICogc2NhbGUsXG4vLyAgIFZXOiB2aWV3cG9ydEluZm8uZGV2aWNlV2lkdGggLyAxMDAsXG4vLyAgIFZIOiB2aWV3cG9ydEluZm8uZGV2aWNlSGVpZ2h0IC8gMTAwLFxuLy8gICBWTUlOOiBNYXRoLm1pbih2aWV3cG9ydEluZm8uZGV2aWNlV2lkdGgsIHZpZXdwb3J0SW5mby5kZXZpY2VIZWlnaHQpIC8gMTAwLFxuLy8gICBWTUFYOiBNYXRoLm1heCh2aWV3cG9ydEluZm8uZGV2aWNlV2lkdGgsIHZpZXdwb3J0SW5mby5kZXZpY2VIZWlnaHQpIC8gMTAwLFxuLy8gICBDTTogOTYgLyAyLjU0ICogc2NhbGUsXG4vLyAgIE1NOiA5NiAvIDI1LjQgKiBzY2FsZSxcbi8vICAgUTogOTYgLyAyNS40IC8gNCAqIHNjYWxlLFxuLy8gICBJTjogOTYgKiBzY2FsZSxcbi8vICAgUFQ6IDk2IC8gNzIgKiBzY2FsZSxcbi8vICAgUEM6IDk2IC8gNiAqIHNjYWxlLFxuLy8gICBQWDogc2NhbGVcbi8vIH1cblxuLy8gT2JqZWN0LmZyZWV6ZSh1bml0cylcbi8vIE9iamVjdC5mcmVlemUoZW52KVxuXG4vLyB3aW5kb3cuQ1NTX1VOSVQgPSB1bml0c1xud2luZG93LldYRW52aXJvbm1lbnQgPSBpbml0RW52KGluaXQkMigpLCB3aW5kb3cubGliLmVudik7XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyogZ2xvYmFsIFZ1ZSAqL1xuXG52YXIgd2VleE1vZHVsZXMgPSB7fTtcbnZhciBfcm9vdHMgPSBbXTtcblxudmFyIHdlZXgkNCA9IHtcbiAgX192dWVfXzogbnVsbCxcbiAgdXRpbHM6IHV0aWxzLFxuICAvLyB1bml0czogd2luZG93LkNTU19VTklULFxuICBjb25maWc6IHtcbiAgICBlbnY6IHdpbmRvdy5XWEVudmlyb25tZW50LFxuICAgIGJ1bmRsZVVybDogbG9jYXRpb24uaHJlZlxuICB9LFxuXG4gIF9jb21wb25lbnRzOiB7fSxcbiAgX21vZHVsZXM6IHdlZXhNb2R1bGVzLFxuXG4gIF9tZXRhOiB7XG4gICAgbW91bnRlZDoge30sXG4gICAgdXBkYXRlZDoge30sXG4gICAgZGVzdHJveWVkOiB7fSxcbiAgICByZXF1aXJlZE1vZHVsZXM6IHt9LFxuICAgIGFwaUNhbGxlZDoge30sXG4gICAgcGVyZjoge31cbiAgfSxcblxuICBkb2N1bWVudDoge1xuICAgIGJvZHk6IHt9XG4gIH0sXG5cbiAgcmVxdWlyZU1vZHVsZTogZnVuY3Rpb24gcmVxdWlyZU1vZHVsZSAobW9kdWxlTmFtZSkge1xuICAgIHZhciBtZXRhTW9kID0gd2VleCQ0Ll9tZXRhLnJlcXVpcmVkTW9kdWxlcztcbiAgICBpZiAoIW1ldGFNb2RbbW9kdWxlTmFtZV0pIHtcbiAgICAgIG1ldGFNb2RbbW9kdWxlTmFtZV0gPSAwO1xuICAgIH1cbiAgICBtZXRhTW9kW21vZHVsZU5hbWVdKys7XG4gICAgcmV0dXJuIHdlZXhNb2R1bGVzW21vZHVsZU5hbWVdXG4gIH0sXG5cbiAgcmVnaXN0ZXJNb2R1bGU6IGZ1bmN0aW9uIHJlZ2lzdGVyTW9kdWxlICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICByZXR1cm4gKHJlZiA9IHRoaXMpLnJlZ2lzdGVyQXBpTW9kdWxlLmFwcGx5KHJlZiwgYXJncylcbiAgICB2YXIgcmVmO1xuICB9LFxuXG4gIHN1cHBvcnQ6IGZ1bmN0aW9uIHN1cHBvcnQgKGZlYXR1cmUpIHtcbiAgICBpZiAoIGZlYXR1cmUgPT09IHZvaWQgMCApIGZlYXR1cmUgPSAnJztcblxuICAgIHZhciBtYXRjaCA9IChmZWF0dXJlICsgJycpLm1hdGNoKC9AKGNvbXBvbmVudHxtb2R1bGUpXFwvKFxcdyspKC5cXHcrKT8vKTtcbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHZhciB0eXBlID0gbWF0Y2hbMV07XG4gICAgICB2YXIgbW9kID0gbWF0Y2hbMl07XG4gICAgICB2YXIgbWV0aG9kID0gbWF0Y2hbM107XG4gICAgICBtZXRob2QgPSBtZXRob2QgJiYgbWV0aG9kLnJlcGxhY2UoL15cXC4vLCAnJyk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnY29tcG9uZW50JzpcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIHRoaXMuX2NvbXBvbmVudHNbbW9kXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgY2FzZSAnbW9kdWxlJzpcbiAgICAgICAgICB2YXIgbW9kdWxlID0gd2VleE1vZHVsZXNbbW9kXTtcbiAgICAgICAgICByZXR1cm4gbW9kdWxlICYmIG1ldGhvZCA/ICEhbW9kdWxlW21ldGhvZF0gOiAhIW1vZHVsZVxuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybigoXCJbdnVlLXJlbmRlcl0gaW52YWxpZCBhcmd1bWVudCBmb3Igd2VleC5zdXBwb3J0OiBcIiArIGZlYXR1cmUpKTtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIG5ldyB2dWUgaW5zdGFuY2UgaW4gdGhpcyB3ZWV4IGluc3RhbmNlLiBQdXQgaXRzIHJvb3QgZWxlbWVudCBpbnRvIHdlZXguZG9jdW1lbnQuYm9keS5jaGlsZHJlbiwgc29cbiAgICogdGhhdCB1c2VyIGNhbiB1c2Ugd2VleC5kb2N1bWVudC5ib2R5IHRvIHdhbGsgdGhyb3VnaCBhbGwgZG9tIHN0cnVjdHVyZXMgaW4gYWxsIHZ1ZSBpbnN0YW5jZXMgaW4gdGhlIHBhZ2UuXG4gICAqL1xuICByZWdpc3RlclZ1ZUluc3RhbmNlOiBmdW5jdGlvbiByZWdpc3RlclZ1ZUluc3RhbmNlIChpbnN0YW5jZSkge1xuICAgIGlmICghaW5zdGFuY2UgaW5zdGFuY2VvZiBWdWUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgcm9vdCA9IGluc3RhbmNlLiRyb290O1xuICAgIGlmICghcm9vdCB8fCAhcm9vdC4kZWwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0aGlzLmRvY3VtZW50LmJvZHkuY2hpbGRyZW4ucHVzaChyb290LiRlbCk7XG4gIH0sXG5cbiAgLy8gQGRlcHJlY2F0ZWRcbiAgcmVxdWlyZTogZnVuY3Rpb24gcmVxdWlyZSAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgY29uc29sZS5sb2coXCJbVnVlIFJlbmRlcl0gXFxcIndlZXgucmVxdWlyZVxcXCIgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBcXFwid2VleC5yZXF1aXJlTW9kdWxlXFxcIiBpbnN0ZWFkLlwiKTtcbiAgICByZXR1cm4gKHJlZiA9IHRoaXMpLnJlcXVpcmVNb2R1bGUuYXBwbHkocmVmLCBhcmdzKVxuICAgIHZhciByZWY7XG4gIH0sXG5cbiAgLy8gQGRlcHJlY2F0ZWRcbiAgLy8gVE9ETzogcmVuYW1lIHRvIHJlZ2lzdGVyTW9kdWxlXG4gIHJlZ2lzdGVyQXBpTW9kdWxlOiBmdW5jdGlvbiByZWdpc3RlckFwaU1vZHVsZSAobmFtZSwgbW9kdWxlLCBtZXRhKSB7XG4gICAgaWYgKCF3ZWV4TW9kdWxlc1tuYW1lXSkge1xuICAgICAgd2VleE1vZHVsZXNbbmFtZV0gPSB7fTtcbiAgICB9XG4gICAgaWYgKCEhbWV0YSAmJiBtZXRhLm1vdW50VHlwZSA9PT0gJ2Z1bGwnKSB7XG4gICAgICB3ZWV4TW9kdWxlc1tuYW1lXSA9IG1vZHVsZTtcbiAgICB9XG4gICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgIGlmIChtb2R1bGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICB3ZWV4TW9kdWxlc1tuYW1lXVtrZXldID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBjYWxsZWQgPSB3ZWV4JDQuX21ldGEuYXBpQ2FsbGVkO1xuICAgICAgICAgIGlmICghY2FsbGVkW25hbWVdKSB7XG4gICAgICAgICAgICBjYWxsZWRbbmFtZV0gPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNhbGxlZE1vZCA9IGNhbGxlZFtuYW1lXTtcbiAgICAgICAgICBpZiAoIWNhbGxlZE1vZFtrZXldKSB7XG4gICAgICAgICAgICBjYWxsZWRNb2Rba2V5XSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhbGxlZE1vZFtrZXldKys7XG4gICAgICAgICAgcmV0dXJuIG1vZHVsZVtrZXldLmFwcGx5KHdlZXgkNCwgYXJndW1lbnRzKVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gbW9kdWxlKSBsb29wKCBrZXkgKTtcbiAgfSxcblxuICByZWdpc3RlckNvbXBvbmVudDogZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQgKG5hbWUsIGNvbXBvbmVudCkge1xuICAgIGlmICghdGhpcy5fX3Z1ZV9fKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5sb2coJ1tWdWUgUmVuZGVyXSBWdWUgaXMgbm90IGZvdW5kLiBQbGVhc2UgaW1wb3J0IFZ1ZS5qcyBiZWZvcmUgcmVnaXN0ZXIgYSBjb21wb25lbnQuJylcbiAgICB9XG4gICAgdGhpcy5fY29tcG9uZW50c1tuYW1lXSA9IDA7XG4gICAgaWYgKGNvbXBvbmVudC5fY3NzKSB7XG4gICAgICB2YXIgY3NzID0gY29tcG9uZW50Ll9jc3MucmVwbGFjZSgvXFxiWystXT9bXFxkLl0rcmVtOz9cXGIvZywgZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobSkgKiA3NSAqIHdlZXgkNC5jb25maWcuZW52LnNjYWxlICsgJ3B4J1xuICAgICAgfSk7XG4gICAgICBhcHBlbmRDc3MoY3NzLCAoXCJ3ZWV4LWNtcC1cIiArIG5hbWUpKTtcbiAgICAgIGRlbGV0ZSBjb21wb25lbnQuX2NzcztcbiAgICB9XG4gICAgdGhpcy5fX3Z1ZV9fLmNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpO1xuICB9LFxuXG4gIC8vIEBkZXByZWNhdGVkXG4gIGdldFJvb3Q6IGZ1bmN0aW9uIGdldFJvb3QgKCkge30sXG5cbiAgLy8gQGRlcHJlY2F0ZWRcbiAgc2VuZGVyOiB7XG4gICAgcGVyZm9ybUNhbGxiYWNrOiBmdW5jdGlvbiBwZXJmb3JtQ2FsbGJhY2sgKGNhbGxiYWNrLCBkYXRhLCBrZWVwQWxpdmUpIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGRhdGEpXG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbFxuICAgIH1cbiAgfSxcblxuICAvLyBAZGVwcmVjYXRlZFxuICBpbnN0YWxsOiBmdW5jdGlvbiBpbnN0YWxsIChtb2R1bGUpIHtcbiAgICBtb2R1bGUuaW5pdCh0aGlzKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdlZXgkNC5kb2N1bWVudC5ib2R5LCAnY2hpbGRyZW4nLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIF9yb290cyB9XG59KVxuXG47IFsnb24nLCAnb25jZScsICdvZmYnLCAnZW1pdCddLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICB3ZWV4JDRbbWV0aG9kXSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICBpZiAoIXRoaXMuX3Z1ZSkge1xuICAgICAgdGhpcy5fdnVlID0gbmV3IHRoaXMuX192dWVfXygpO1xuICAgIH1cbiAgICByZXR1cm4gKHJlZiA9IHRoaXMuX3Z1ZSlbKFwiJFwiICsgbWV0aG9kKV0uYXBwbHkocmVmLCBhcmdzKVxuICAgIHZhciByZWY7XG4gIH07XG59KTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8vIFxuLyoqXG4gKiBAZmlsZU92ZXJ2aWV3OiBwZXJmIGRhdGEgcmVjb3JkZXIuXG4gKi9cblxudmFyIHBlcmYgPSB3aW5kb3cuX3dlZXhfcGVyZiA9IHtcbiAgdGltZToge31cbn07XG5cbnZhciB0bXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0Tm93ICgpIHtcbiAgdmFyIHBlcmZvcm1hbmNlID0gd2luZG93LnBlcmZvcm1hbmNlO1xuICByZXR1cm4gcGVyZm9ybWFuY2UgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2Uubm93KCkgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxufVxuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cbnZhciBwc2V1ZG9JZCA9IDA7XG4vKipcbiAqIGdldCBzY29wZWQgY2xhc3Mgc3R5bGUgbWFwIGZyb20gc3R5bGVzaGVldHMgaW4gPGhlYWQ+LlxuICovXG5mdW5jdGlvbiBnZXRIZWFkU3R5bGVNYXAgKCkge1xuICB2YXIgbmVlZFRvUmVtb3ZlU3R5bGVTaGVldE5vZGVzID0gW107XG4gIHZhciBzdHlsZVNoZWV0c0FyciA9IEFycmF5LmZyb20oZG9jdW1lbnQuc3R5bGVTaGVldHMgfHwgW10pLmZpbHRlcihmdW5jdGlvbiAoc3R5bGVTaGVldCkge1xuICAgIHJldHVybiBzdHlsZVNoZWV0Lm93bmVyTm9kZS5nZXRBdHRyaWJ1dGUoJ3dlZXgtc2Nhbm5lZCcpICE9PSAnMSdcbiAgfSk7XG5cbiAgdmFyIHJlcyA9IEFycmF5LmZyb20oc3R5bGVTaGVldHNBcnIpXG4gICAgLnJlZHVjZShmdW5jdGlvbiAocHJlLCBzdHlsZVNoZWV0KSB7XG4gICAgICBzdHlsZVNoZWV0Lm93bmVyTm9kZS5zZXRBdHRyaWJ1dGUoJ3dlZXgtc2Nhbm5lZCcsIDEpO1xuICAgICAgLyoqXG4gICAgICAgKiB3aHkgbm90IHVzaW5nIHN0eWxlU2hlZXQucnVsZXMgfHwgc3R5bGVTaGVldC5jc3NSdWxlcyB0byBnZXQgY3NzIHJ1bGVzID9cbiAgICAgICAqIGJlY2F1c2Ugd2VleCdzIGNvbXBvbmVudHMgZGVmaW5lZCBub24tc3RhbmRhcmQgc3R5bGUgYXR0cmlidXRlcywgd2hpY2ggaXNcbiAgICAgICAqIGF1dG8gaWdub3JlZCB3aGVuIGFjY2VzcyBydWxlLmNzc1RleHQuXG4gICAgICAgKiBhbm90aGVyIHJlYXNvbiBub3QgdG8gdXNlIGNzc1J1bGVzIGRpcmVjdHk6XG4gICAgICAgKiBAaXNzdWU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIxNjQyMjc3L3NlY3VyaXR5LWVycm9yLXRoZS1vcGVyYXRpb24taXMtaW5zZWN1cmUtaW4tZmlyZWZveC1kb2N1bWVudC1zdHlsZXNoZWV0c1xuICAgICAgICovXG4gICAgICBpZiAoXG4gICAgICAgIC8vIGNzcyBpbiBhIGxpbmsuIGp1c3QgaWdub3JlIHRoaXMuIHByb2JhYmx5IGEgbGluayBzdHlsZXNoZWV0LlxuICAgICAgICAoc3R5bGVTaGVldC5vd25lck5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnbGluaycpXG4gICAgICAgIHx8ICFzdHlsZVNoZWV0Lm93bmVyTm9kZS50ZXh0Q29udGVudFxuICAgICAgICAvLyBwc2V1ZG8gY2xhc3Mgc3R5bGVTaGVldCBub2RlIGlzIGdlbmVyYXRlZCBieSB3ZWV4LiBqdXN0IGlnbm9yZSBpdC5cbiAgICAgICAgfHwgc3R5bGVTaGVldC5vd25lck5vZGUuaWQubWF0Y2goL3dlZXgtcHNldWRvLVxcZCsvKSkge1xuICAgICAgICByZXR1cm4gcHJlXG4gICAgICB9XG4gICAgICAvKipcbiAgICAgICAqIHN0YXJ0IHRvIGFuYWx5emUgaXQncyBjb250ZW50LlxuICAgICAgICovXG4gICAgICB2YXIgc3RyQXJyID0gdHJpbUNvbW1lbnQoc3R5bGVTaGVldC5vd25lck5vZGUudGV4dENvbnRlbnQudHJpbSgpKS5zcGxpdCgvfS8pO1xuICAgICAgdmFyIGxlbiA9IHN0ckFyci5sZW5ndGg7XG4gICAgICB2YXIgcnVsZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIHN0ciA9IHN0ckFycltpXTtcbiAgICAgICAgaWYgKCFzdHIgfHwgc3RyLm1hdGNoKC9eXFxzKiQvKSkge1xuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIHNob3VsZCBtYXRjaCB0aGVzZSBjYXNlczpcbiAgICAgICAgICogLmFbZGF0YS12LXh4eF0geyBjb2xvcjogcmVkOyB9XG4gICAgICAgICAqIC5hW2RhdGEtdi14eHhdOmFjdGl2ZSB7IGNvbG9yOiBncmVlbjsgfVxuICAgICAgICAgKiAuYVtkYXRhLXYteHh4XSwgLmJbZGF0YS12LXh4eF0geyBjb2xvcjogcmVkOyB9XG4gICAgICAgICAqXG4gICAgICAgICAqIHNob3VsZCBub3QgbWF0Y2ggdGhlc2UgY2FzZXM6XG4gICAgICAgICAqIC5hIHsgY29sb3I6IHJlZDsgfVxuICAgICAgICAgKiBldGMuXG4gICAgICAgICAqL1xuICAgICAgICB2YXIgbWF0Y2ggPSBzdHIubWF0Y2goLygoPzosP1xccypcXC5bXFx3LV0rXFxbZGF0YS12LVxcdytcXF0oPzo6XFx3Kyk/KSspXFxzKih7W159XSspLyk7XG4gICAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgICAvLyBub3QgdGhlIHZ1ZSBzdGF0aWMgY2xhc3Mgc3R5bGVzIG1hcC4gc28gYWNxdWlyZSBubyBydWxlcyBmb3IgdGhpcyBzdHlsZVNoZWV0LlxuICAgICAgICAgIC8vIGp1c3QganVtcCB0aHJvdWdoIHRoaXMgc3R5bGVTaGVldCBhbmQgZ28gdG8gYW5hbHl6aW5nIG5leHQuXG4gICAgICAgICAgcmV0dXJuIHByZVxuICAgICAgICB9XG4gICAgICAgIHZhciBjbHNObXMgPSBtYXRjaFsxXS5zcGxpdCgnLCcpLm1hcChmdW5jdGlvbiAobikgeyByZXR1cm4gbi50cmltKCk7IH0pO1xuICAgICAgICB2YXIgY3NzVGV4dCA9IG1hdGNoWzJdLnJlcGxhY2UoL1t7fV0vZywgJycpLnRyaW0oKTtcbiAgICAgICAgdmFyIGNsc05tc0lkeCA9IDA7XG4gICAgICAgIHZhciBjbHNObXNMZW4gPSBjbHNObXMubGVuZ3RoO1xuICAgICAgICB3aGlsZSAoY2xzTm1zSWR4IDwgY2xzTm1zTGVuKSB7XG4gICAgICAgICAgcnVsZXMucHVzaCh7XG4gICAgICAgICAgICBzZWxlY3RvclRleHQ6IGNsc05tc1tjbHNObXNJZHhdLFxuICAgICAgICAgICAgY3NzVGV4dDogY3NzVGV4dFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNsc05tc0lkeCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBBcnJheS5mcm9tKHJ1bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IHJ1bGUuc2VsZWN0b3JUZXh0IHx8ICcnO1xuICAgICAgICB2YXIgaXNQc2V1ZG8gPSBmYWxzZTtcbiAgICAgICAgaWYgKHNlbGVjdG9yLm1hdGNoKC86KD86YWN0aXZlfGZvY3VzfGVuYWJsZWR8ZGlzYWJsZWQpLykpIHtcbiAgICAgICAgICBpc1BzZXVkbyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0eWxlT2JqID0gdHJpbUNvbW1lbnQocnVsZS5jc3NUZXh0KS5zcGxpdCgnOycpXG4gICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoc3R5bGVPYmosIHN0YXRlbWVudCkge1xuICAgICAgICAgICAgc3RhdGVtZW50ID0gc3RhdGVtZW50LnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZW1lbnQgJiYgc3RhdGVtZW50LmluZGV4T2YoJy8qJykgPD0gLTEpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc0FyciA9IHN0YXRlbWVudC5zcGxpdCgnOicpLm1hcChmdW5jdGlvbiAocGFydCkgeyByZXR1cm4gcGFydC50cmltKCk7IH0pO1xuICAgICAgICAgICAgICBzdHlsZU9ialtyZXNBcnJbMF1dID0gcmVzQXJyWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0eWxlT2JqXG4gICAgICAgICAgfSwge30pO1xuICAgICAgICBpZiAoaXNQc2V1ZG8pIHtcbiAgICAgICAgICB2YXIgdHh0ID0gT2JqZWN0LmtleXMoc3R5bGVPYmopLnJlZHVjZShmdW5jdGlvbiAocHJlLCBjdXIpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmUgKyBjdXIgKyBcIjpcIiArIChzdHlsZU9ialtjdXJdKSArIFwiIWltcG9ydGFudDtcIlxuICAgICAgICAgIH0sICcnKTtcbiAgICAgICAgICBhcHBlbmRDc3MoKHNlbGVjdG9yICsgXCJ7XCIgKyB0eHQgKyBcIn1cIiksIChcIndlZXgtcHNldWRvLVwiICsgKHBzZXVkb0lkKyspKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9iak1hcCA9ICFpc1BzZXVkbyA/IHByZSA6IHByZS5wc2V1ZG87XG4gICAgICAgIHZhciByZXMgPSBvYmpNYXBbc2VsZWN0b3JdO1xuICAgICAgICBpZiAoIXJlcykge1xuICAgICAgICAgIG9iak1hcFtzZWxlY3Rvcl0gPSBzdHlsZU9iajtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBleHRlbmQob2JqTWFwW3NlbGVjdG9yXSwgc3R5bGVPYmopO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8qKlxuICAgICAgICogcmVtb3ZlIHRoaXMgc3R5bGVTaGVldCBub2RlIHNpbmNlIGl0J3MgaW4gdGhlIHN0eWxlTWFwIGFscmVhZHkuIEFuZCB0aGlzIHN0eWxlXG4gICAgICAgKiBzaG91bGQgb25seSBiZSBmZXRjaGVkIGFuZCB1c2VkIGZyb20gc3R5bGVNYXAgdG8gZ2VuZXJhdGUgdGhlIGZpbmFsIGNvbWJpbmVkXG4gICAgICAgKiBjb21wb25lbnQgc3R5bGUsIG5vdCBmcm9tIHRoZSBzdHlsZXNoZWV0IGl0c2VsZi5cbiAgICAgICAqL1xuICAgICAgbmVlZFRvUmVtb3ZlU3R5bGVTaGVldE5vZGVzLnB1c2goc3R5bGVTaGVldC5vd25lck5vZGUpO1xuICAgICAgcmV0dXJuIHByZVxuICAgIH0sIHsgcHNldWRvOiB7fX0pO1xuICBpZiAoIXdpbmRvdy5fbm9fcmVtb3ZlX3N0eWxlX3NoZWV0cykge1xuICAgIG5lZWRUb1JlbW92ZVN0eWxlU2hlZXROb2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfSk7XG4gIH1cbiAgZWxzZSB7fVxuICByZXR1cm4gcmVzXG59XG5cbi8vIGV4cG9ydCBmdW5jdGlvbiBnZXRTY29wZUlkcyAoY29udGV4dCkge1xuLy8gICBjb25zdCBhcnIgPSBbXVxuLy8gICBsZXQgY3R4ID0gY29udGV4dFxuLy8gICBsZXQgc2NvcGVJZFxuLy8gICB3aGlsZSAoY3R4KSB7XG4vLyAgICAgc2NvcGVJZCA9IGN0eC4kb3B0aW9ucy5fc2NvcGVJZFxuLy8gICAgIHNjb3BlSWQgJiYgYXJyLnB1c2goc2NvcGVJZClcbi8vICAgICBjdHggPSBjdHguJG9wdGlvbnMucGFyZW50XG4vLyAgIH1cbi8vICAgcmV0dXJuIGFyclxuLy8gfVxuXG5mdW5jdGlvbiBnZXRTY29wZUlkICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29udGV4dC4kb3B0aW9ucy5fc2NvcGVJZFxufVxuXG4vKipcbiAqIGdldCBzdHlsZSBpbiA8c3R5bGUgc2NvcGVkPiB0YWdzIGZvciB0aGlzIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gZ2V0U2NvcGVTdHlsZSAodm5vZGUsIGNsYXNzTmFtZXMpIHtcbiAgdmFyIHNjb3BlSWQgPSBnZXRTY29wZUlkKHZub2RlKTtcbiAgdmFyIHN0eWxlID0ge307XG4gIHZhciBzdHlsZU1hcCA9IHdlZXguX3N0eWxlTWFwIHx8IHt9O1xuICB2YXIgY2xzTm1zSWR4ID0gMDtcbiAgdmFyIGNsc05tc0xlbiA9IGNsYXNzTmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoY2xzTm1zSWR4IDwgY2xzTm1zTGVuKSB7XG4gICAgdmFyIGNscyA9IFwiLlwiICsgKGNsYXNzTmFtZXNbY2xzTm1zSWR4XSkgKyBcIltcIiArIHNjb3BlSWQgKyBcIl1cIjtcbiAgICB2YXIgbWFwID0gc3R5bGVNYXBbY2xzXTtcbiAgICBtYXAgJiYgZXh0ZW5kVHJ1dGh5KHN0eWxlLCBtYXApO1xuICAgIGNsc05tc0lkeCsrO1xuICB9XG4gIHJldHVybiBjYW1lbGl6ZUtleXMoc3R5bGUpXG59XG5cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgZXh0cmFjdCkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGEgfHwge307XG4gIHZhciBzdGF0aWNDbGFzc05hbWVzID0gKHR5cGVvZiBkYXRhLnN0YXRpY0NsYXNzID09PSAnc3RyaW5nJykgPyBkYXRhLnN0YXRpY0NsYXNzLnNwbGl0KCcgJykgOiAoZGF0YS5zdGF0aWNDbGFzcyB8fCBbXSk7XG4gIHZhciBjbGFzc05hbWVzID0gKHR5cGVvZiBkYXRhLmNsYXNzID09PSAnc3RyaW5nJykgPyBkYXRhLmNsYXNzLnNwbGl0KCcgJykgOiAoZGF0YS5jbGFzcyB8fCBbXSk7XG4gIHZhciBjbHNObXMgPSBzdGF0aWNDbGFzc05hbWVzLmNvbmNhdChjbGFzc05hbWVzKTtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGUoZ2V0U2NvcGVTdHlsZSh2bm9kZSwgY2xzTm1zKSk7XG4gIC8qKlxuICAgKiBjYWNoZSBzdGF0aWMgc3R5bGUgYW5kIGJpbmQgc3R5bGUuXG4gICAqIGNhY2hlZCBzdGF0aWNTdHlsZSAoaW5jbHVkaW5nIHN0eWxlIGFuZCBzdGF0aWNTdHlsZSkgaGFzIGFscmVhZHkgYmVlbiBub3JtYWxpemVkXG4gICAqIGluICRwcm9jZXNzU3R5bGUuIFNvIHRoZXJlJ3Mgbm8gbmVlZCB0byBub3JtYWxpemUgaXQgYWdhaW4uXG4gICAqL1xuICBpZiAoIWRhdGEuY2FjaGVkKSB7XG4gICAgLy8gY2FjaGUgc3RhdGljU3R5bGUgb25jZSBpbiB0aGUgYmVnaW5uaW5nLlxuICAgIGRhdGEuY2FjaGVkID0gZXh0ZW5kVHJ1dGh5KHt9LCBkYXRhLnN0YXRpY1N0eWxlKTtcbiAgfVxuICAvLyBjYWNoZSBiaW5kaW5nIHN0eWxlIGV2ZXJ5IHRpbWUgc2luY2UgdGhlIGJpbmRpbmcgc3R5bGUgaXMgdmFyaWFibGUuXG4gIGV4dGVuZFRydXRoeShkYXRhLmNhY2hlZCwgZGF0YS5zdHlsZSk7XG4gIGV4dGVuZChzdHlsZSwgZGF0YS5jYWNoZWQpO1xuICBkYXRhLnN0YXRpY1N0eWxlID0gc3R5bGU7XG4gIGlmIChleHRyYWN0KSB7XG4gICAgZGVsZXRlIGRhdGEuc3RhdGljU3R5bGU7XG4gICAgZGVsZXRlIGRhdGEuc3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlXG59XG5cbi8qKlxuICogZ2V0IHN0eWxlIG1lcmdlZCB3aXRoIHN0YXRpYyBzdHlsZXMsIGJpbmRpbmcgc3R5bGVzLCBhbmQgc2NvcGVkIGNsYXNzIHN0eWxlcyxcbiAqIHdpdGgga2V5cyBpbiBjYW1lbGNhc2UuXG4gKi9cbmZ1bmN0aW9uIGdldENvbXBvbmVudFN0eWxlIChjb250ZXh0LCBleHRyYWN0KSB7XG4gIGlmICghY29udGV4dC4kdm5vZGUpIHtcbiAgICByZXR1cm4ge31cbiAgfVxuICB2YXIgc3R5bGUgPSB7fTtcbiAgdmFyIHZub2RlID0gY29udGV4dC4kdm5vZGU7XG4gIHdoaWxlICh2bm9kZSkge1xuICAgIGV4dGVuZChzdHlsZSwgZ2V0U3R5bGUodm5vZGUsIGV4dHJhY3QpKTtcbiAgICB2bm9kZSA9IHZub2RlLnBhcmVudDtcbiAgfVxuICBzdHlsZSA9IGF1dG9QcmVmaXgoc3R5bGUpO1xuICAvKipcbiAgICogd2hlbiBwcmVmaXhlZCB2YWx1ZSBpcyBhIGFycmF5LCBpdCBzaG91bGQgYmUgYXBwbGllZCB0byBlbGVtZW50XG4gICAqIGR1cmluZyB0aGUgbmV4dCB0aWNrLlxuICAgKiBlLmcuXG4gICAqICBiYWNrZ3JvdW5kLWltYWdlOiAgbGluZWFyLWdyYWRpZW50KHRvIHRvcCwjZjVmZWZkLCNmZmZmZmYpO1xuICAgKiAgd2lsbCBnZW5lcmF0ZTpcbiAgICogIHtcbiAgICogICAgYmFja2dyb3VuZEltYWdlOiBbXG4gICAqICAgICAgXCItd2Via2l0LWxpbmVhci1ncmFkaWVudCh0byB0b3AsI2Y1ZmVmZCwjZmZmZmZmKVwiLFxuICAgKiAgICAgIFwiLW1vei1saW5lYXItZ3JhZGllbnQodG8gdG9wLCNmNWZlZmQsI2ZmZmZmZilcIixcbiAgICogICAgICBcImxpbmVhci1ncmFkaWVudCh0byB0b3AsI2Y1ZmVmZCwjZmZmZmZmKVwiXVxuICAgKiAgfVxuICAgKi9cbiAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGsgKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc3R5bGVba10pKSB7XG4gICAgICB2YXIgdmFscyA9IHN0eWxlW2tdO1xuICAgICAgY29udGV4dC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWwgPSBjb250ZXh0LiRlbDtcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBlbC5zdHlsZVtrXSA9IHZhbHNbaV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChrICE9PSAncG9zaXRpb24nKSB7IGRlbGV0ZSBzdHlsZVtrXTsgfVxuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrIGluIHN0eWxlKSBsb29wKCBrICk7XG5cbiAgLyoqXG4gICAqIElmIHBvc2l0aW9uIGlzICdzdGlja3knLCB0aGVuIGFkZCBpdCB0byB0aGUgc3RpY2t5Q2hpbGRyZW4gb2YgdGhlIHBhcmVudCBzY3JvbGxlci5cbiAgICovXG4gIHZhciBwb3MgPSBzdHlsZS5wb3NpdGlvbjtcbiAgdmFyIHJlZyA9IC9zdGlja3kkLztcbiAgaWYgKHBvcyA9PT0gJ2ZpeGVkJykge1xuICAgIGNvbnRleHQuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBlbCA9IGNvbnRleHQuJGVsO1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3dlZXgtZml4ZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBlbHNlIGlmIChpc0FycmF5KHBvcykgJiYgcG9zWzBdLm1hdGNoKHJlZykgfHwgKHBvcyArICcnKS5tYXRjaChyZWcpKSB7XG4gICAgZGVsZXRlIHN0eWxlLnBvc2l0aW9uO1xuICAgIC8vIHVzZSBuYXRpdmUgc3RpY2t5LlxuICAgIGlmIChzdXBwb3J0U3RpY2t5KCkpIHtcbiAgICAgIGNvbnRleHQuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVsID0gY29udGV4dC4kZWw7XG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3dlZXgtaW9zLXN0aWNreScpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gdXNlIHJlLWltcGxlbWVudGF0aW9uIG9mIHN0aWNreS5cbiAgICBlbHNlIGlmICghY29udGV4dC5fc3RpY2t5QWRkZWQpIHtcbiAgICAgIHZhciB1aWQgPSBjb250ZXh0Ll91aWQ7XG4gICAgICB2YXIgc2Nyb2xsZXIgPSBnZXRQYXJlbnRTY3JvbGxlcihjb250ZXh0KTtcbiAgICAgIGlmIChzY3JvbGxlcikge1xuICAgICAgICBjb250ZXh0Ll9zdGlja3lBZGRlZCA9IHRydWU7XG4gICAgICAgIGlmICghc2Nyb2xsZXIuX3N0aWNreUNoaWxkcmVuKSB7XG4gICAgICAgICAgc2Nyb2xsZXIuX3N0aWNreUNoaWxkcmVuID0ge307XG4gICAgICAgIH1cbiAgICAgICAgc2Nyb2xsZXIuX3N0aWNreUNoaWxkcmVuW3VpZF0gPSBjb250ZXh0O1xuICAgICAgfVxuICAgICAgY29udGV4dC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZWwgPSBjb250ZXh0LiRlbDtcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgY29udGV4dC5faW5pdE9mZnNldFRvcCA9IGVsLm9mZnNldFRvcDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0eWxlXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RDb21wb25lbnRTdHlsZSAoY29udGV4dCkge1xuICByZXR1cm4gZ2V0Q29tcG9uZW50U3R5bGUoY29udGV4dCwgdHJ1ZSlcbn1cblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogcmVtb3ZlIHRleHQgbm9kZXMgaW4gdGhlIG5vZGVzIGFycmF5LlxuICogQHBhcmFtICB7QXJyYXl9IG5vZGVzXG4gKiBAcmV0dXJuIHtBcnJheX0gbm9kZXMgd2l0aG91dCB0ZXh0IG5vZGVzLlxuICovXG5mdW5jdGlvbiB0cmltVGV4dFZOb2RlcyAodm5vZGVzKSB7XG4gIGlmIChpc0FycmF5KHZub2RlcykpIHtcbiAgICByZXR1cm4gdm5vZGVzLmZpbHRlcihmdW5jdGlvbiAodm5vZGUpIHsgcmV0dXJuICEhdm5vZGUudGFnOyB9KVxuICB9XG4gIHJldHVybiB2bm9kZXNcbn1cblxuLyoqXG4gKiBnZXQgbGlzdGVuZXJzIGZyb20gb24gY29uZmlnIGFuZCB2LW9uIGJpbmRpbmcuXG4gKiB2LW9uIGJpbmRpbmcgaGFzIGEgcHJpb3JpdHkgb3ZlciBvbiBjb25maWcuXG4gKiBAcGFyYW0ge3Zub2RlfSB2bm9kZVxuICogQHBhcmFtIHtTdHJpbmd9IGV2dDogZXZlbnQgbmFtZS5cbiAqL1xuZnVuY3Rpb24gZ2V0TGlzdGVuZXJzICh2bm9kZSwgZXZ0KSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICB3aGlsZSAodm5vZGUpIHtcbiAgICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLm9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IHZub2RlLmRhdGEub25bZXZ0XTtcbiAgICAgIGhhbmRsZXIgJiYgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmNvbXBvbmVudE9wdGlvbnMgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnMpIHtcbiAgICAgIHZhciBoYW5kbGVyJDEgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zLmxpc3RlbmVyc1tldnRdO1xuICAgICAgaGFuZGxlciQxICYmIGhhbmRsZXJzLnB1c2goaGFuZGxlciQxKTtcbiAgICB9XG4gICAgdm5vZGUgPSB2bm9kZS5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGhhbmRsZXJzXG59XG5cbi8qKlxuICogSW5zdGVhZCBvZiB2dWUncyBpbnZva2VyLCB0aGlzIGZ1bmN0aW9uIHNob3VsZCBjaGVjayBpZiB0aGUgYmluZGluZyBmdW5jdGlvblxuICogaGFzIGEgX3dlZXhfaG9vayBmbGFnLiBJZiB0aGVyZSBpcyBvbmUsIHRoZSBoYW5kbGVyIHNob3VsZCBub3QgYmUgdHJpZ2dlcmVkLlxuICogQHBhcmFtIHtBcnJheSB8IEZ1bmN0aW9ufSBmbnNcbiAqL1xuZnVuY3Rpb24gYXBwbHlGbnMgKGZucykge1xuICB2YXIgYXJncyA9IFtdLCBsZW4kMSA9IGFyZ3VtZW50cy5sZW5ndGggLSAxO1xuICB3aGlsZSAoIGxlbiQxLS0gPiAwICkgYXJnc1sgbGVuJDEgXSA9IGFyZ3VtZW50c1sgbGVuJDEgKyAxIF07XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICB2YXIgbGVuID0gY2xvbmVkLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgZm4gPSBjbG9uZWRbaV07XG4gICAgICBpZiAoZm4uX3dlZXhfaG9vaykge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgZm4uYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfVxuICB9XG4gIGVsc2Uge1xuICAgIGlmICghZm5zLl93ZWV4X2hvb2spIHtcbiAgICAgIGZucy5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBlbWl0IG5hdGl2ZSBldmVudHMgdG8gZW5hYmxlIHYtb24uXG4gKiBAcGFyYW0ge1ZDb21wb25lbnR9IGNvbnRleHQ6IHdoaWNoIG9uZSB0byBlbWl0IGEgZXZlbnQgb24uXG4gKiBAcGFyYW0ge2FycmF5IHwgb2JqZWN0fSBldmVudHM6IGV4dHJhIGV2ZW50cy4gWW91IGNhbiBwYXNzIGluIG11bHRpcGxlIGFyZ3VtZW50cyBoZXJlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVFdmVudE1hcCAoY29udGV4dCkge1xuICB2YXIgZXZlbnRzID0gW10sIGxlbiQxID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7XG4gIHdoaWxlICggbGVuJDEtLSA+IDAgKSBldmVudHNbIGxlbiQxIF0gPSBhcmd1bWVudHNbIGxlbiQxICsgMSBdO1xuXG4gIHZhciBldmVudE1hcCA9IHt9O1xuICAvKipcbiAgICogQmluZCBzb21lIG9yaWdpbmFsIHR5cGUgZXZlbnQgdG8geW91ciBzcGVjaWZpZWQgdHlwZSBldmVudCBoYW5kbGVyLlxuICAgKiBlLmcuIGJpbmQgJ3RhcCcgZXZlbnQgdG8gJ2NsaWNrJyBldmVudCBsaXN0ZW5lcjogYmluZEZ1bmMoJ3RhcCcpKCdjbGljaycpLlxuICAgKiBPciBiaW5kIGNlcnRpYW4gZXZlbnQgd2l0aCB5b3VyIHNwZWNpZmllZCBoYW5kbGVyOiBiaW5kRnVuYygnY2xpY2snLCBzb21lRnVuY3Rpb24pXG4gICAqL1xuICB2YXIgYmluZEZ1bmMgPSBmdW5jdGlvbiAob3JpZ2luYWxUeXBlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChsaXN0ZW5Ubykge1xuICAgICAgdmFyIGhhbmRsZXI7XG4gICAgICB2YXIgZXZ0TmFtZSA9IG9yaWdpbmFsVHlwZSB8fCBsaXN0ZW5UbztcbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuVG8gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaGFuZGxlciA9IGxpc3RlblRvO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodHlwZW9mIGxpc3RlblRvID09PSAnc3RyaW5nJykge1xuICAgICAgICBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiB1c2UgJ190cmlnZ2VyZWQnIHRvIGNvbnRyb2wgYWN0dXJhbCBidWJibGluZyAoYWxsb3cgb3JpZ2luYWwgYnViYmxpbmcpLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGlmIChlLl90cmlnZ2VyZWQpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiB0cmlnZ2VyIHRoZSBjbG9zZXN0IHBhcmVudCB3aGljaCBoYXMgYm91bmQgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAgICovXG4gICAgICAgICAgdmFyIHZtID0gY29udGV4dDtcbiAgICAgICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgICAgIHZhciBvbnMgPSBnZXRMaXN0ZW5lcnModm0uX3Zub2RlIHx8IHZtLiR2bm9kZSwgbGlzdGVuVG8pO1xuICAgICAgICAgICAgdmFyIGxlbiA9IG9ucy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAgICAgICB2YXIgaWR4ID0gMDtcbiAgICAgICAgICAgICAgd2hpbGUgKGlkeCA8IGxlbikge1xuICAgICAgICAgICAgICAgIHZhciBvbiA9IG9uc1tpZHhdO1xuICAgICAgICAgICAgICAgIGFwcGx5Rm5zKG9uLmZucywgZSk7XG4gICAgICAgICAgICAgICAgaWR4Kys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gb25jZSBhIHBhcmVudCBub2RlIChvciBzZWxmIG5vZGUpIGhhcyB0cmlnZ2VyZWQgdGhlIGhhbmRsZXIsIHRoZW5cbiAgICAgICAgICAgICAgLy8gaXQgc3RvcHMgYnViYmxpbmcgaW1tZWRpYXRlbHksIGFuZCBhICdfdHJpZ2dlcmVkJyBvYmplY3QgaXMgc2V0LlxuICAgICAgICAgICAgICBlLl90cmlnZ2VyZWQgPSB7XG4gICAgICAgICAgICAgICAgZWw6IHZtLiRlbFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZtID0gdm0uJHBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8vIGZsYWcgdG8gZGlzdGluZ3Vpc2ggZnJvbSB1c2VyLWJpbmRpbmcgbGlzdGVuZXJzLlxuICAgICAgICBoYW5kbGVyLl93ZWV4X2hvb2sgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFldmVudE1hcFtldnROYW1lXSkge1xuICAgICAgICBldmVudE1hcFtldnROYW1lXSA9IFtdO1xuICAgICAgfVxuICAgICAgZXZlbnRNYXBbZXZ0TmFtZV0ucHVzaChoYW5kbGVyKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIGNvbXBvbmVudCdzIGV4dHJhIGV2ZW50IGJpbmRpbmdzLiBUaGlzIGlzIG1vc3RseSBmb3IgdGhlIG5lZWRzIG9mIGNvbXBvbmVudCdzXG4gICAqIG93biBzcGVjaWFsIGJlaGF2aW91cnMuIFRoZXNlIGhhbmRsZXJzIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB1c2VyJ3NcbiAgICogY29ycmVzcG9uZGluZyBldmVudCBoYW5kbGVycy5cbiAgICovXG4gIGlmIChldmVudHMpIHtcbiAgICB2YXIgbGVuID0gZXZlbnRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgZXh0cmEgPSBldmVudHNbaV07XG4gICAgICBpZiAoaXNBcnJheShleHRyYSkpIHtcbiAgICAgICAgZXh0cmEuZm9yRWFjaChiaW5kRnVuYygpKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBleHRyYSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGV4dHJhKSB7XG4gICAgICAgICAgYmluZEZ1bmMoa2V5KShleHRyYVtrZXldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudE1hcFxufVxuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG5cbnZhciBjb3JlJDEgPSBPYmplY3QuZnJlZXplKHtcblx0Z2V0SGVhZFN0eWxlTWFwOiBnZXRIZWFkU3R5bGVNYXAsXG5cdGdldFNjb3BlSWQ6IGdldFNjb3BlSWQsXG5cdGdldFNjb3BlU3R5bGU6IGdldFNjb3BlU3R5bGUsXG5cdGdldENvbXBvbmVudFN0eWxlOiBnZXRDb21wb25lbnRTdHlsZSxcblx0ZXh0cmFjdENvbXBvbmVudFN0eWxlOiBleHRyYWN0Q29tcG9uZW50U3R5bGUsXG5cdHRyaW1UZXh0Vk5vZGVzOiB0cmltVGV4dFZOb2Rlcyxcblx0YXBwbHlGbnM6IGFwcGx5Rm5zLFxuXHRjcmVhdGVFdmVudE1hcDogY3JlYXRlRXZlbnRNYXBcbn0pO1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBsYXp5bG9hZFdhdGNoZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHdhdGNoTGF6eWxvYWQgKCkge1xuICBsYXp5bG9hZFdhdGNoZWQgPSB0cnVlXG4gIDsgW1xuICAgICdzY3JvbGwnLFxuICAgIC8vICd0cmFuc2l0aW9uZW5kJyxcbiAgICAvLyAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gICAgLy8gJ2FuaW1hdGlvbmVuZCcsXG4gICAgLy8gJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXG4gICAgJ3Jlc2l6ZSdcbiAgXS5mb3JFYWNoKGZ1bmN0aW9uIChldnQpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihldnQsIGdldFRocm90dGxlTGF6eWxvYWQoMjUsIGRvY3VtZW50LmJvZHkpKTtcbiAgfSk7XG4gIC8qKlxuICAgKiBJbiBjYXNlIHRoZSB1c2VycyB1c2UgdGhlIGJvZHkncyBvdmVyZmxvdyB0byBzY3JvbGwuIFRoZW4gdGhlIHNjcm9sbFxuICAgKiBldmVudCB3b3VsZCBub3QgYmUgdHJpZ2dlcmVkIG9uIHRoZSB3aW5kb3cgb2JqZWN0IGJ1dCBvbiB0aGUgYm9keS5cbiAgICovXG4gIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZ2V0VGhyb3R0bGVMYXp5bG9hZCgyNSwgZG9jdW1lbnQuYm9keSkpO1xufVxuXG52YXIgd2FybmVkID0gZmFsc2U7XG52YXIgbm90ZVBhZ2UgPSAnaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vTXJSYWluZHJvcC81YTgwNWEwNjcxNDY2MDllNWNmZDRkNjRkNzc1ZDY5MyNmaWxlLXdlZXgtdnVlLXJlbmRlci1jb25maWctZm9yLXZ1ZS1sb2FkZXItanMnO1xuZnVuY3Rpb24gd2FyblByb2Nlc3NTdHlsZSAoKSB7XG4gIGlmICghd2FybmVkKSB7XG4gICAgd2FybmVkID0gdHJ1ZTtcbiAgICB2YXIgcGFnZSA9IHdpbmRvdy5fcHJvY2Vzc19zdHlsZV9ub3RlX3BhZ2UgfHwgbm90ZVBhZ2U7XG4gICAgY29uc29sZS53YXJuKFwiW3Z1ZS1yZW5kZXJdOiB5b3Ugc2hvdWxkIGFkZCB2dWUtbG9hZGVyIGNvbmZpZyB3aXRoICRwcm9jZXNzU3R5bGUgdG8gZW5hYmxlIGlubGluZSBzdHlsZXMncyBcIlxuICAgICAgKyBcIm5vcm1hbGl6YXRpb24uIHNlZSBcIiArIHBhZ2UgKyBcIiBJZiB5b3UgYWxyZWFkeSBkaWQgdGhpcywgcGxlYXNlIGlnbm9yZSB0aGlzIG1lc3NhZ2UuXCIpO1xuICB9XG59XG5cbnZhciBpZENudCA9IDA7XG5cbnZhciBiYXNlJDEgPSB7XG4gIGJlZm9yZUNyZWF0ZTogZnVuY3Rpb24gYmVmb3JlQ3JlYXRlICgpIHtcbiAgICBpZiAoIWxhenlsb2FkV2F0Y2hlZCkge1xuICAgICAgd2F0Y2hMYXp5bG9hZCgpO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICBpZiAodGhpcy5fcm9vdElkKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzLiRlbDtcbiAgICAgIGlmIChlbC5ub2RlVHlwZSA9PT0gMVxuICAgICAgICAmJiBlbC5jbGFzc05hbWUuaW5kZXhPZignd2VleC1yb290JykgPD0gLTEpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCgnd2VleC1yb290Jyk7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS13eC1yb290LWlkJywgdGhpcy5fcm9vdElkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdGFnTmFtZSA9IHRoaXMuJG9wdGlvbnMgJiYgdGhpcy4kb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBtZXRhVXAgPSB3ZWV4Ll9tZXRhLnVwZGF0ZWQ7XG4gICAgaWYgKCFtZXRhVXBbdGFnTmFtZV0pIHtcbiAgICAgIG1ldGFVcFt0YWdOYW1lXSA9IDA7XG4gICAgfVxuICAgIG1ldGFVcFt0YWdOYW1lXSsrO1xuICAgIC8qKlxuICAgICAqIHNpbmNlIHRoZSB1cGRhdGluZyBvZiBjb21wb25lbnQgbWF5IGFmZmVjdCB0aGUgbGF5b3V0LCB0aGUgbGF6eWxvYWRpbmcgc2hvdWxkXG4gICAgICogYmUgZmlyZWQuXG4gICAgICovXG4gICAgdGhpcy5fZmlyZUxhenlsb2FkKCk7XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRhZ05hbWUgPSB0aGlzLiRvcHRpb25zICYmIHRoaXMuJG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICBpZiAodHlwZW9mIHdlZXguX2NvbXBvbmVudHNbdGFnTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB3ZWV4Ll9jb21wb25lbnRzW3RhZ05hbWVdKys7XG4gICAgfVxuICAgIHZhciBtZXRhTXQgPSB3ZWV4Ll9tZXRhLm1vdW50ZWQ7XG4gICAgaWYgKCFtZXRhTXRbdGFnTmFtZV0pIHtcbiAgICAgIG1ldGFNdFt0YWdOYW1lXSA9IDA7XG4gICAgfVxuICAgIG1ldGFNdFt0YWdOYW1lXSsrO1xuICAgIGlmICh0aGlzID09PSB0aGlzLiRyb290KSB7XG4gICAgICB2YXIgcm9vdElkID0gXCJ3eC1yb290LVwiICsgKGlkQ250KyspO1xuICAgICAgaWYgKCF3ZWV4Ll9yb290KSB7XG4gICAgICAgIHdlZXguX3Jvb3QgPSB7fTtcbiAgICAgIH1cbiAgICAgIHdlZXguX3Jvb3Rbcm9vdElkXSA9IHRoaXM7XG4gICAgICB0aGlzLl9yb290SWQgPSByb290SWQ7XG4gICAgICB2YXIgZWwgPSB0aGlzLiRlbDtcbiAgICAgIGlmIChlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ3dlZXgtcm9vdCcpO1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXd4LXJvb3QtaWQnLCByb290SWQpO1xuICAgICAgdGhpcy5fZmlyZUxhenlsb2FkKGVsKTtcbiAgICB9XG5cbiAgICAvLyBnaXZlIHdhcm5pbmcgZm9yIG5vdCB1c2luZyAkcHJvY2Vzc1N0eWxlIGluIHZ1ZS1sb2FkZXIgY29uZmlnLlxuICAgIGlmICghd2FybmVkICYmICF3aW5kb3cuX3N0eWxlX3Byb2Nlc3NpbmdfYWRkZWQpIHtcbiAgICAgIHdhcm5Qcm9jZXNzU3R5bGUoKTtcbiAgICB9XG5cbiAgICAvLyBiaW5kIGF0dHJzIHRvICRlbC5cbiAgICB2YXIgaSwgajtcbiAgICBpZiAodGhpcy4kZWwgJiYgKGkgPSBqID0gdGhpcy4kdm5vZGUpICYmIChpID0gaS5kYXRhKSAmJiAoaiA9IGouY29tcG9uZW50T3B0aW9ucykpIHtcbiAgICAgIHRoaXMuJGVsLmF0dHJzID0gZXh0ZW5kKHt9LCBpLmF0dHJzLCBqLnByb3BzRGF0YSk7XG4gICAgfVxuICAgIHdhdGNoQXBwZWFyKHRoaXMsIHRydWUpO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICAvKipcbiAgICAgKiBpZiB0aGUgZGVzdHJveWVkIGVsZW1lbnQgaXMgYWJvdmUgYW5vdGhlciBwYW5lbCB3aXRoIGltYWdlcyBpbnNpZGUsIGFuZCB0aGUgaW1hZ2VzXG4gICAgICogbW92ZWQgaW50byB0aGUgdmlld3BvcnQsIHRoZW4gdGhlIGxhenlsb2FkaW5nIHNob3VsZCBiZSB0cmlnZ2VyZWQuXG4gICAgICovXG4gICAgaWYgKHRoaXMuX3Jvb3RJZCkge1xuICAgICAgZGVsZXRlIHdlZXguX3Jvb3RbdGhpcy5fcm9vdElkXTtcbiAgICAgIGRlbGV0ZSB0aGlzLl9yb290SWQ7XG4gICAgfVxuICAgIHZhciB0YWdOYW1lID0gdGhpcy4kb3B0aW9ucyAmJiB0aGlzLiRvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgaWYgKHR5cGVvZiB3ZWV4Ll9jb21wb25lbnRzW3RhZ05hbWVdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgd2VleC5fY29tcG9uZW50c1t0YWdOYW1lXS0tO1xuICAgIH1cbiAgICB2YXIgbWV0YURzID0gd2VleC5fbWV0YS5kZXN0cm95ZWQ7XG4gICAgaWYgKCFtZXRhRHNbdGFnTmFtZV0pIHtcbiAgICAgIG1ldGFEc1t0YWdOYW1lXSA9IDA7XG4gICAgfVxuICAgIG1ldGFEc1t0YWdOYW1lXSsrO1xuXG4gICAgdGhpcy5fZmlyZUxhenlsb2FkKCk7XG4gICAgdHJpZ2dlckRpc2FwcGVhcih0aGlzKTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgX2ZpcmVMYXp5bG9hZDogZnVuY3Rpb24gX2ZpcmVMYXp5bG9hZCAoZWwpIHtcbiAgICAgIGdldFRocm90dGxlTGF6eWxvYWQoMjUsIGVsIHx8IGRvY3VtZW50LmJvZHkpKCk7XG4gICAgfVxuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogZ2V0IGEgYmVmb3JlQ3JlYXRlIGhvb2ssIHdoaWNoIGhhcyBhIG1hcmsgdG8gaWRlbnRpZnkgdGhlIGhvb2sgZnVuY3Rpb24gaXRzZWxmLlxuICovXG5mdW5jdGlvbiBnZXRJZGVudGlmaWVkQmVmb3JlQ3JlYXRlICgpIHtcbiAgdmFyIGRpc3Bvc2VkID0ge307IC8vIGRpc3Bvc2VkIGNvbXBvbmVudHMuIEFscmVhZHkgc2Nhbm5lZC5cbiAgZnVuY3Rpb24gYmVmb3JlQ3JlYXRlICgpIHtcbiAgICAvKipcbiAgICAgKiBnZXQgc3RhdGljIGNsYXNzIHN0eWxlIG1hcCBmcm9tIGRvY3VtZW50J3Mgc3R5bGVTaGVldHMuXG4gICAgICogV2VleC5vbiB3aWxsIGNyZWF0ZSBhIFZ1ZSBpbnN0YW5jZS4gSW4gdGhpcyBjYXNlIHdlJ2xsIGlnbm9yZSBpdCwgc2luY2VcbiAgICAgKiBpdCdzIG5vdCBzdXJlIHdoZXRoZXIgdGhlIHNjb3BlZCBzdHlsZSBoYXMgYWxyZWFkeSBhdHRhY2hlZCB0byBoZWFkIG9yIG5vdC5cbiAgICAgKi9cbiAgICB2YXIgdGFnTmFtZSA9IHRoaXMuJG9wdGlvbnMgJiYgdGhpcy4kb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIC8qKlxuICAgICAqIEZvciB2dWUtbG9hZGVyIF4xMS4zLngsIHRoZXJlJ3Mgbm8gaW5qZWN0U3R5bGUgZnVuY3Rpb24uIFRoZSBzdHlsZVNoZWV0XG4gICAgICogaXMgYWxyZWFkeSBpbmplY3RlZCBpbnRvIHRoZSBoZWFkLiBKdXN0IHNjYW4gaXQuXG4gICAgICovXG4gICAgLy8gYXN5bmMgY29tcG9uZW50LlxuICAgIGlmICgodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuZGF0YSAmJiB0aGlzLiR2bm9kZS5kYXRhLnRhZyA9PT0gJ2NvbXBvbmVudCcpXG4gICAgICB8fCAodGhpcyA9PT0gdGhpcy4kcm9vdCAmJiB0aGlzLiRvcHRpb25zICYmICF0aGlzLl9maXJzdFNjYW5uZWQpKSB7XG4gICAgICB0aGlzLl9maXJzdFNjYW5uZWQgPSB0cnVlO1xuICAgICAgZXh0ZW5kKHdlZXguX3N0eWxlTWFwLCBnZXRIZWFkU3R5bGVNYXAoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEZvciB2dWUtbG9hZGVyIF4xMi4wLCB0aGUgaW5qZWN0U3R5bGUgZnVuY3Rpb24gaXMgaG9va2VkLiBXZSBzaG91bGQgc2NhblxuICAgICAqIHN0eWxlIG1hcCBhZnRlciB0aGUgaW5qZWN0U3R5bGUgaG9vayBjYWxsZWQuXG4gICAgICovXG4gICAgaWYgKCgodGhpcyA9PT0gdGhpcy4kcm9vdCAmJiB0aGlzLiRvcHRpb25zKVxuICAgICAgfHwgKHRhZ05hbWVcbiAgICAgICYmICh0eXBlb2Ygd2VleC5fY29tcG9uZW50c1t0YWdOYW1lXSA9PT0gJ3VuZGVmaW5lZCcpXG4gICAgICAmJiAhZGlzcG9zZWRbdGFnTmFtZV0pKVxuICAgICAgJiYgIXRoaXMuX3NlY29uZFNjYW5uZWQpIHtcbiAgICAgIGRpc3Bvc2VkW3RhZ05hbWVdID0gMTtcbiAgICAgIHRoaXMuX3NlY29uZFNjYW5uZWQgPSB0cnVlO1xuICAgICAgdmFyIGhvb2tzID0gdGhpcy4kb3B0aW9ucy5iZWZvcmVDcmVhdGU7XG4gICAgICB2YXIgbGVuID0gaG9va3MubGVuZ3RoO1xuICAgICAgdmFyIHRoaXNIb29rSWR4ID0gMDsgLy8gaW5kZXggb2YgdGhpcyBob29rIGluIHRoZSBob29rcyBhcnJheS5cbiAgICAgIGZvciAoOyB0aGlzSG9va0lkeCA8IGxlbjsgdGhpc0hvb2tJZHgrKykge1xuICAgICAgICBpZiAoaG9va3NbdGhpc0hvb2tJZHhdLl9zdHlsZU1peGluKSB7IGJyZWFrIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzSG9va0lkeCAhPT0gbGVuIC0gMSkge1xuICAgICAgICB2YXIgZnVuYyA9IGhvb2tzW2xlbiAtIDFdO1xuICAgICAgICBob29rc1tsZW4gLSAxXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBjYWxsIHRoZSBvcmlnaW5hbCBpbmplY3RTdHlsZSBob29rLlxuICAgICAgICAgIGZ1bmMuY2FsbCh0aGlzKTtcbiAgICAgICAgICAvLyBzY2FuIHRoZSBuZXcgYXBwZW5kZWQgc3R5bGVTaGVldC5cbiAgICAgICAgICBleHRlbmQod2VleC5fc3R5bGVNYXAsIGdldEhlYWRTdHlsZU1hcCgpKTtcbiAgICAgICAgICBob29rc1tsZW4gLSAxXSA9IGZ1bmM7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGJlZm9yZUNyZWF0ZS5fc3R5bGVNaXhpbiA9IHRydWU7XG4gIHJldHVybiBiZWZvcmVDcmVhdGVcbn1cblxudmFyIHN0eWxlID0ge1xuICBiZWZvcmVDcmVhdGU6IGdldElkZW50aWZpZWRCZWZvcmVDcmVhdGUoKSxcblxuICBtZXRob2RzOiB7XG4gICAgJHByb2Nlc3NTdHlsZTogZnVuY3Rpb24gJHByb2Nlc3NTdHlsZSAoc3R5bGUpIHtcbiAgICAgIHdpbmRvdy5fc3R5bGVfcHJvY2Vzc2luZ19hZGRlZCA9IHRydWU7XG4gICAgICBpZiAoIXN0eWxlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVN0eWxlKGNhbWVsaXplS2V5cyhzdHlsZSkpXG4gICAgfSxcblxuICAgIF9nZXRQYXJlbnRSZWN0OiBmdW5jdGlvbiBfZ2V0UGFyZW50UmVjdCAoKSB7XG4gICAgICB2YXIgcGFyZW50RWxtID0gdGhpcy4kb3B0aW9ucy5fcGFyZW50RWxtO1xuICAgICAgcmV0dXJuIHBhcmVudEVsbSAmJiBwYXJlbnRFbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICB9XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyBcblxuLy8gaW5wdXQgYW5kIHRleHRhcmUgaGFzIHNvbWUgY29tbW9uIGFwaSBhbmQgZXZlbnRcbnZhciBmaW5kRW50ZXJLZXlUeXBlID0gZnVuY3Rpb24gKGtleSkge1xuICB2YXIga2V5cyA9IFsnZGVmYXVsdCcsICdnbycsICduZXh0JywgJ3NlYXJjaCcsICdzZW5kJ107XG4gIGlmIChrZXlzLmluZGV4T2Yoa2V5KSA+IC0xKSB7XG4gICAgcmV0dXJuIGtleVxuICB9XG4gIHJldHVybiAnZG9uZSdcbn07XG5cbnZhciBpbnB1dENvbW1vbiA9IHtcbiAgbWV0aG9kczoge1xuICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cyAoKSB7XG4gICAgICB0aGlzLiRlbCAmJiB0aGlzLiRlbC5mb2N1cygpO1xuICAgIH0sXG4gICAgYmx1cjogZnVuY3Rpb24gYmx1ciAoKSB7XG4gICAgICB0aGlzLiRlbCAmJiB0aGlzLiRlbC5ibHVyKCk7XG4gICAgfSxcblxuICAgIHNldFNlbGVjdGlvblJhbmdlOiBmdW5jdGlvbiBzZXRTZWxlY3Rpb25SYW5nZSAoc3RhcnQsIGVuZCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy4kZWwuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCk7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICBcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0U2VsZWN0aW9uUmFuZ2U6IGZ1bmN0aW9uIGdldFNlbGVjdGlvblJhbmdlIChjYWxsYmFjaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgdmFyIHN0ciA9IHNlbGVjdGlvbi50b1N0cmluZygpO1xuICAgICAgICB2YXIgc2VsZWN0aW9uU3RhcnQgPSB0aGlzLiRlbC52YWx1ZS5pbmRleE9mKHN0cik7XG4gICAgICAgIHZhciBzZWxlY3Rpb25FbmQgPSBzZWxlY3Rpb25TdGFydCA9PT0gLTEgPyBzZWxlY3Rpb25TdGFydCA6IHNlbGVjdGlvblN0YXJ0ICsgc3RyLmxlbmd0aDtcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soe1xuICAgICAgICAgIHNlbGVjdGlvblN0YXJ0OiBzZWxlY3Rpb25TdGFydCxcbiAgICAgICAgICBzZWxlY3Rpb25FbmQ6IHNlbGVjdGlvbkVuZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKG5ldyBFcnJvcignW3Z1ZS1yZW5kZXJdIGdldFNlbGVjdGlvbiBpcyBub3Qgc3VwcG9ydGVkLicpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZ2V0RWRpdFNlbGVjdGlvblJhbmdlOiBmdW5jdGlvbiBnZXRFZGl0U2VsZWN0aW9uUmFuZ2UgKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRTZWxlY3Rpb25SYW5nZShjYWxsYmFjaylcbiAgICB9LFxuXG4gICAgLy8gc3VwcG9ydCBlbnRlciBrZXkgZXZlbnRcbiAgICBjcmVhdGVLZXlib2FyZEV2ZW50OiBmdW5jdGlvbiBjcmVhdGVLZXlib2FyZEV2ZW50IChldmVudHMpIHtcbiAgICAgIHZhciBjdXN0b21LZXlUeXBlID0gdGhpcy5yZXR1cm5LZXlUeXBlO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgaWYgKHRoaXMuX2V2ZW50c1sncmV0dXJuJ10pIHtcbiAgICAgICAgdmFyIGtleWJvYXJkRXZlbnRzID0ge1xuICAgICAgICAgICdrZXl1cCc6IGZ1bmN0aW9uIChldikge1xuICAgICAgICAgICAgdmFyIGNvZGUgPSBldi5rZXlDb2RlO1xuICAgICAgICAgICAgdmFyIGtleSA9IGV2LmtleTtcbiAgICAgICAgICAgIGlmIChjb2RlID09PSAxMykge1xuICAgICAgICAgICAgICBpZiAoIWtleSB8fCBrZXkudG9Mb3dlckNhc2UoKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgICAgICAgICBldi5rZXkgPSAnbmV4dCc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIHJpZ2h0S2V5VHlwZSA9IGZpbmRFbnRlcktleVR5cGUoY3VzdG9tS2V5VHlwZSk7XG4gICAgICAgICAgICAgIGV2LnJldHVybktleVR5cGUgPSByaWdodEtleVR5cGU7XG4gICAgICAgICAgICAgIGV2LnZhbHVlID0gZXYudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgICBzZWxmLiRlbWl0KCdyZXR1cm4nLCBldik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBldmVudHMgPSBleHRlbmQoZXZlbnRzLCBrZXlib2FyZEV2ZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXZlbnRzXG4gICAgfVxuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBzdGlja3kgPSB7XG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBpZiAoIXRoaXMuX3N0aWNreUFkZGVkKSB7IHJldHVybiB9XG4gICAgdmFyIHNjcm9sbGVyID0gZ2V0UGFyZW50U2Nyb2xsZXIodGhpcyk7XG4gICAgaWYgKCFzY3JvbGxlcikgeyByZXR1cm4gfVxuICAgIGRlbGV0ZSBzY3JvbGxlci5fc3RpY2t5Q2hpbGRyZW5bdGhpcy5fdWlkXTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgX2FkZFN0aWNreTogZnVuY3Rpb24gX2FkZFN0aWNreSAoKSB7XG4gICAgICB2YXIgZWwgPSB0aGlzLiRlbDtcbiAgICAgIGlmICghZWwgfHwgZWwubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKCdzdGlja3knKTtcbiAgICAgIGlmICghdGhpcy5fcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXIgPSBlbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICB9XG4gICAgICB0aGlzLl9wbGFjZWhvbGRlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIHRoaXMuX3BsYWNlaG9sZGVyLnN0eWxlLndpZHRoID0gdGhpcy4kZWwub2Zmc2V0V2lkdGggKyAncHgnO1xuICAgICAgdGhpcy5fcGxhY2Vob2xkZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy4kZWwub2Zmc2V0SGVpZ2h0ICsgJ3B4JztcbiAgICAgIGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuX3BsYWNlaG9sZGVyLCB0aGlzLiRlbCk7XG4gICAgfSxcblxuICAgIF9yZW1vdmVTdGlja3k6IGZ1bmN0aW9uIF9yZW1vdmVTdGlja3kgKCkge1xuICAgICAgdmFyIGVsID0gdGhpcy4kZWw7XG4gICAgICBpZiAoIWVsIHx8IGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnc3RpY2t5Jyk7XG4gICAgICBpZiAodGhpcy5fcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgdGhpcy5fcGxhY2Vob2xkZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLl9wbGFjZWhvbGRlcik7XG4gICAgICB9XG4gICAgICB0aGlzLl9wbGFjZWhvbGRlciA9IG51bGw7XG4gICAgfVxuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG53aW5kb3cuZ2xvYmFsID0gd2luZG93O1xud2luZG93LndlZXggPSB3ZWV4JDQ7XG5cbndlZXgkNC5fc3R5bGVNYXAgPSB7fVxuXG47IFsnZ2V0Q29tcG9uZW50U3R5bGUnLFxuICAnZXh0cmFjdENvbXBvbmVudFN0eWxlJyxcbiAgJ2NyZWF0ZUV2ZW50TWFwJyxcbiAgJ3RyaW1UZXh0Vk5vZGVzJ10uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgd2VleCQ0W21ldGhvZF0gPSBjb3JlJDFbbWV0aG9kXS5iaW5kKHdlZXgkNCk7XG4gIH0pO1xuXG53ZWV4JDQubWl4aW5zID0ge1xuICBpbnB1dENvbW1vbjogaW5wdXRDb21tb25cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuZnVuY3Rpb24gc2V0VnVlICh2dWUpIHtcbiAgaWYgKCF2dWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tWdWUgUmVuZGVyXSBWdWUgbm90IGZvdW5kLiBQbGVhc2UgbWFrZSBzdXJlIHZ1ZSAyLnggcnVudGltZSBpcyBpbXBvcnRlZC4nKVxuICB9XG4gIGdsb2JhbC53ZWV4Ll9fdnVlX18gPSB2dWU7XG4gIGNvbnNvbGUubG9nKChcIltWdWUgUmVuZGVyXSBpbnN0YWxsIFZ1ZSBcIiArICh2dWUudmVyc2lvbikgKyBcIi5cIikpO1xufVxuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIGdlc3R1cmVFdmVudHMgPSBjb25maWcuZ2VzdHVyZUV2ZW50cztcbnZhciBuYXRpdmVFdmVudHMgPSBbJ2NsaWNrJywgJ3RvdWNoc3RhcnQnLCAndG91Y2htb3ZlJywgJ3RvdWNoZW5kJ107XG52YXIgbmVlZFBhc3NpdmUgPSBbJ3RvdWNobW92ZSddO1xuXG52YXIgZXZlbnRzID0gZ2VzdHVyZUV2ZW50cy5jb25jYXQobmF0aXZlRXZlbnRzKTtcblxuLyoqXG4gKiBpZiBlbCBpcyBhIGA8YT5gIGVsZW1lbnQuXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICovXG5mdW5jdGlvbiBpc0FOb2RlIChlbCkge1xuICByZXR1cm4gZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYSdcbn1cblxuZnVuY3Rpb24gaXNJbkFOb2RlIChlbCkge1xuICB2YXIgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICBpZiAocGFyZW50LnRhZ05hbWUgPT09ICdBJykgeyByZXR1cm4gdHJ1ZSB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qKlxuICogZ2V0IGxpc3RlbmVycyBmcm9tIG9uIGNvbmZpZyBhbmQgdi1vbiBiaW5kaW5nLlxuICogdi1vbiBiaW5kaW5nIGhhcyBhIHByaW9yaXR5IG92ZXIgb24gY29uZmlnLlxuICogQHBhcmFtIHt2bm9kZX0gdm5vZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBldnQ6IGV2ZW50IG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGdldExpc3RlbmVycyQxICh2bm9kZSwgZXZ0KSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICB3aGlsZSAodm5vZGUpIHtcbiAgICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLm9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IHZub2RlLmRhdGEub25bZXZ0XTtcbiAgICAgIGhhbmRsZXIgJiYgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9XG4gICAgaWYgKHZub2RlLmNvbXBvbmVudE9wdGlvbnMgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnMpIHtcbiAgICAgIHZhciBoYW5kbGVyJDEgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zLmxpc3RlbmVyc1tldnRdO1xuICAgICAgaGFuZGxlciQxICYmIGhhbmRsZXJzLnB1c2goaGFuZGxlciQxKTtcbiAgICB9XG4gICAgdm5vZGUgPSB2bm9kZS5wYXJlbnQ7XG4gIH1cbiAgcmV0dXJuIGhhbmRsZXJzXG59XG5cbnZhciBfaW5pdGVkJDEgPSBmYWxzZTtcbmZ1bmN0aW9uIF9pbml0IChkb2MpIHtcbiAgaWYgKF9pbml0ZWQkMSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICghZG9jKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgX2luaXRlZCQxID0gdHJ1ZTtcbiAgdmFyIF9zcCA9IHN1cHBvcnRzUGFzc2l2ZSgpO1xuICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZ0KSB7XG4gICAgLyoqXG4gICAgICogdXNlIGNhcHR1cmUgZm9yIGNsaWNrIGhhbmRsaW5nLCB0aGVyZWZvcmUgdGhlcmUncyBhIGNoYW5jZSB0byBoYW5kbGVcbiAgICAgKiBpdCBiZWZvcmUgYW55IG90aGVyIGxpc3RlbmVycyBiaW5kaW5nIG9uIGRvY3VtZW50IG9yIGRvY3VtZW50LmJvZHkuXG4gICAgICovXG4gICAgdmFyIG9wdGlvbiA9XG4gICAgICBldnQgPT09ICdjbGljaydcbiAgICAgID8gdHJ1ZSA6IG5lZWRQYXNzaXZlLmluZGV4T2YoZXZ0KSA+IC0xICYmIF9zcFxuICAgICAgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKGV2dCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBlbCA9IGUudGFyZ2V0O1xuICAgICAgdmFyIHZtID0gZWwuX192dWVfXztcbiAgICAgIHdoaWxlICghdm0gJiYgZWwgJiYgZWwgIT09IGRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB2bSA9IGVsICYmIGVsLl9fdnVlX187XG4gICAgICB9XG4gICAgICBpZiAoIXZtKSB7ICAvLyBub3QgYSB2dWUgY29tcG9uZW50LlxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBkaXNwb3NlZCA9IGZhbHNlO1xuICAgICAgdmFyIGV2dE5hbWUgPSBlLnR5cGU7XG5cbiAgICAgIGlmIChldnROYW1lID09PSAndGFwJyAmJiBlLl9mb3IgIT09ICd3ZWV4Jykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIHZhciB2bm9kZSA9IHZtLl92bm9kZSB8fCB2bS4kdm5vZGU7XG4gICAgICAgIHZhciBlbG0gPSB2bS4kZWw7XG4gICAgICAgIHZhciBvbnMgPSBnZXRMaXN0ZW5lcnMkMSh2bm9kZSwgZXZ0TmFtZSA9PT0gJ3RhcCcgPyAnY2xpY2snIDogZXZ0TmFtZSk7XG4gICAgICAgIHZhciBsZW4gPSBvbnMgJiYgb25zLmxlbmd0aDtcblxuICAgICAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAgIGlmIChldnROYW1lICE9PSAnY2xpY2snKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgIHZhciBoYW5kbGVyID0gb25zW2ldO1xuICAgICAgICAgICAgICB2YXIgbmV3RXZ0ID0gZXZ0TmFtZSA9PT0gJ3RhcCdcbiAgICAgICAgICAgICAgICA/IGNyZWF0ZUV2ZW50KGVsLCAnY2xpY2snKVxuICAgICAgICAgICAgICAgIDogZTtcbiAgICAgICAgICAgICAgbmV3RXZ0Ll90cmlnZ2VyZWQgPSB7IHRhcmdldDogZWxtIH07XG4gICAgICAgICAgICAgIGFwcGx5Rm5zKGhhbmRsZXIuZm5zLCBuZXdFdnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlLl90cmlnZ2VyZWQgPSB7IHRhcmdldDogZWxtIH07XG4gICAgICAgICAgZGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQU5vZGUoZWxtKVxuICAgICAgICAgICYmIChldnROYW1lID09PSAnY2xpY2snIHx8IGV2dE5hbWUgPT09ICd0YXAnKSkge1xuICAgICAgICAgIHZhciBocmVmID0gZWxtLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgICAgIHZhciB2b2lkSHJlZlJlZyA9IC9eXFxzKmphdmFzY3JpcHRcXHMqOlxccyp2b2lkXFxzKig/OlxcKFxccyowXFxzKlxcKXwwKVxccyo7P1xccyokLztcbiAgICAgICAgICB2YXIgcHJldmVudCA9IGVsbS5nZXRBdHRyaWJ1dGUoJ3ByZXZlbnQnKTtcbiAgICAgICAgICBpZiAod2luZG93Ll9zaG91bGRfaW50ZXJjZXB0X2FfanVtcCAmJiB3aW5kb3cuX3Nob3VsZF9pbnRlcmNlcHRfYV9qdW1wKGVsbSkpIHtcbiAgICAgICAgICAgIC8vIGUuX3RyaWdnZXJlZCBzaG91bGQgbm90IGJlIHRydWUgc2luY2Ugd2UgbGVmdCB0aGUgaW50ZXJjZXB0ZXIgdG8gaGFuZGxlIHRoZSBldmVudC5cbiAgICAgICAgICAgIGUuX3RyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgZGlzcG9zZWQgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChocmVmLm1hdGNoKHZvaWRIcmVmUmVnKVxuICAgICAgICAgICAgfHwgcHJldmVudCA9PT0gJycgfHwgcHJldmVudCA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICBlLl90cmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlLl90cmlnZ2VyZWQgPSB7IHRhcmdldDogZWxtIH07XG4gICAgICAgICAgICBkaXNwb3NlZCA9IHRydWU7IC8vIGhhbmRsZWQgYnkgZGVmYXVsdCBiZWhhdmlvciBmb3IgY2xpY2tpbmcgb24gYSBlbGVtZW50LlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZiB0aGUgY2xpY2sgaGFuZGxlciBpcyBiaW5kaW5nIG9uIGEgZWxlbWVudCBpbnNpZGUgYSA8YT4gZWxlbWVudCxcbiAgICAgICAgICogdGhlbiBzaG91bGQgcHJldmVudCBkZWZhdWx0LlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGRpc3Bvc2VkICYmIGV2dE5hbWUgPT09ICdjbGljaycgJiYgaXNJbkFOb2RlKGVsbSkpIHtcbiAgICAgICAgICBlLl90cmlnZ2VyZWQgPSB7IHRhcmdldDogZWxtIH07XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpc3Bvc2VkKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgIH0sIG9wdGlvbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpbml0JDMgKCkge1xuICBfaW5pdChkb2N1bWVudCk7XG59XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyoqXG4gKiBpbml0IHdlZXguXG4gKiBAcGFyYW0gIHtWdWUkMn0gVnVlOiBWdWUgQ29uc3RydWN0b3IuXG4gKiBAcGFyYW0gIHtvYmplY3R9IG9wdGlvbnM6IGV4dGVuZCB3ZWV4IHBsdWdpbnMuXG4gKiAgICAgICAgIC0gY29tcG9uZW50cy5cbiAqICAgICAgICAgLSBtb2R1bGVzLlxuICovXG52YXIgX2luaXRlZCA9IGZhbHNlO1xuZnVuY3Rpb24gaW5pdCQxIChWdWUvKiwgb3B0aW9ucyA9IHt9Ki8pIHtcbiAgaWYgKF9pbml0ZWQpIHsgcmV0dXJuIH1cbiAgX2luaXRlZCA9IHRydWU7XG5cbiAgc2V0VnVlKFZ1ZSk7XG5cbiAgVnVlLnByb3RvdHlwZS4kZ2V0Q29uZmlnID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnNvbGUud2FybignW1Z1ZSBSZW5kZXJdIFwidGhpcy4kZ2V0Q29uZmlnXCIgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBcIndlZXguY29uZmlnXCIgaW5zdGVhZC4nKTtcbiAgICByZXR1cm4gd2VleC5jb25maWdcbiAgfTtcblxuICB2YXIgaHRtbFJlZ2V4ID0gL15odG1sOi9pO1xuICBWdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7IHJldHVybiBodG1sUmVnZXgudGVzdCh0YWcpOyB9O1xuICBWdWUuY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gdGFnLnJlcGxhY2UoaHRtbFJlZ2V4LCAnJyk7IH07XG5cbiAgZnVuY3Rpb24gaXNXZWV4VGFnICh0YWcpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdlZXguX2NvbXBvbmVudHNbdGFnXSAhPT0gJ3VuZGVmaW5lZCdcbiAgfVxuICB2YXIgb2xkR2V0VGFnTmFtZXNwYWNlID0gVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2U7XG4gIFZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZnVuY3Rpb24gKHRhZykge1xuICAgIGlmIChpc1dlZXhUYWcodGFnKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHJldHVybiBvbGRHZXRUYWdOYW1lc3BhY2UodGFnKVxuICB9O1xuXG4gIFZ1ZS5taXhpbihiYXNlJDEpO1xuICBWdWUubWl4aW4oc3R5bGUpO1xuICBWdWUubWl4aW4oc3RpY2t5KTtcblxuICBpbml0JDMoKTtcbn1cblxuLy8gYXV0byBpbml0IGluIGRpc3QgbW9kZS5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlKSB7XG4gIGluaXQkMSh3aW5kb3cuVnVlKTtcbn1cblxud2VleC5pbml0ID0gaW5pdCQxO1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIGltcG9ydCB7IHZhbGlkYXRlU3R5bGVzIH0gZnJvbSAnLi4vdmFsaWRhdG9yJ1xuXG52YXIgX2NzcyA9IFwiXFxuLndlZXgtYSB7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxufVxcblwiO1xuXG5mdW5jdGlvbiBnZXRBICh3ZWV4KSB7XG4gIHZhciBleHRyYWN0Q29tcG9uZW50U3R5bGUgPSB3ZWV4LmV4dHJhY3RDb21wb25lbnRTdHlsZTtcbiAgdmFyIHRyaW1UZXh0Vk5vZGVzID0gd2VleC50cmltVGV4dFZOb2RlcztcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICd3ZWV4LWEnLFxuICAgIHByb3BzOiB7XG4gICAgICBocmVmOiBTdHJpbmdcbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgLy8gaWYgKFwicHJvZHVjdGlvblwiID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAvLyAgIHZhbGlkYXRlU3R5bGVzKCdhJywgdGhpcy4kdm5vZGUuZGF0YSAmJiB0aGlzLiR2bm9kZS5kYXRhLnN0YXRpY1N0eWxlKVxuICAgICAgLy8gfVxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2h0bWw6YScsIHtcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAnd2VleC10eXBlJzogJ2EnLFxuICAgICAgICAgIGhyZWY6IHRoaXMuaHJlZlxuICAgICAgICB9LFxuICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtYSB3ZWV4LWN0JyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSwgdHJpbVRleHRWTm9kZXModGhpcy4kc2xvdHMuZGVmYXVsdCkpXG4gICAgfSxcbiAgICBfY3NzOiBfY3NzXG4gIH1cbn1cblxudmFyIGEgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdhJywgZ2V0QSh3ZWV4KSk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgX2NzcyQxID0gXCJcXG5ib2R5ID4gLndlZXgtZGl2IHtcXG4gIG1pbi1oZWlnaHQ6IDEwMCU7XFxufVxcblwiO1xuXG5mdW5jdGlvbiBnZXREaXYgKHdlZXgpIHtcbiAgdmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICB2YXIgdHJpbVRleHRWTm9kZXMgPSB3ZWV4LnRyaW1UZXh0Vk5vZGVzO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3dlZXgtZGl2JyxcbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2h0bWw6ZGl2Jywge1xuICAgICAgICBhdHRyczogeyAnd2VleC10eXBlJzogJ2RpdicgfSxcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LWRpdiB3ZWV4LWN0JyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSwgdHJpbVRleHRWTm9kZXModGhpcy4kc2xvdHMuZGVmYXVsdCkpXG4gICAgfSxcbiAgICBfY3NzOiBfY3NzJDFcbiAgfVxufVxuXG52YXIgZGl2ID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgdmFyIGRpdiA9IGdldERpdih3ZWV4KTtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdkaXYnLCBkaXYpO1xuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ2NvbnRhaW5lcicsIGRpdik7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgZXh0cmFjdENvbXBvbmVudFN0eWxlJDE7XG52YXIgY3JlYXRlRXZlbnRNYXAkMTtcbnZhciBleHRlbmQkMjtcbnZhciBpc0FycmF5JDE7XG5cbnZhciBJTUdfTkFNRV9CSVRTID0gMTU7XG5cbnZhciBfY3NzJDIgPSBcIlxcbi53ZWV4LWltYWdlLCAud2VleC1pbWcge1xcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcXG4gIGJhY2tncm91bmQtcG9zaXRpb246IDUwJSA1MCU7XFxufVxcblwiO1xuLyoqXG4gKiAxLiBnZXQgc3ByaXRlIHN0eWxlIGlmIHNwcml0ZVBvc2l0aW9uIGlzIHNldC5cbiAqIDIuIGVsc2UgZ2V0IHJlc2l6ZSAoc3RldGNofGNvdmVyfGNvbnRhaW4pIHJlbGF0ZWQgc3R5bGVzLlxuICovXG5mdW5jdGlvbiBnZXRDdXN0b21TdHlsZSAoY29udGV4dCwgbWVyZ2VkU3R5bGUpIHtcbiAgdmFyIHNwcml0ZVBvc2l0aW9uID0gY29udGV4dC5zcHJpdGVQb3NpdGlvbjtcbiAgaWYgKHNwcml0ZVBvc2l0aW9uICYmICFpc0FycmF5JDEoc3ByaXRlUG9zaXRpb24pKSB7XG4gICAgc3ByaXRlUG9zaXRpb24gPSAoc3ByaXRlUG9zaXRpb24gKyAnJykuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbC5yZXBsYWNlKC9bW1xcXV0vZywgJycpLnJlcGxhY2UoL15cXHMqKFxcU1tcXHNcXFNdKj8pXFxzKiQvZywgZnVuY3Rpb24gKCQwLCAkMSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoJDEpXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG4gIGlmIChzcHJpdGVQb3NpdGlvbikge1xuICAgIHZhciBwb3NYID0gLXNwcml0ZVBvc2l0aW9uWzBdO1xuICAgIHZhciBwb3NZID0gLXNwcml0ZVBvc2l0aW9uWzFdO1xuICAgIHZhciBzY2FsZSA9IHdlZXguY29uZmlnLmVudi5zY2FsZTtcbiAgICB2YXIgc2l6ZVNjYWxlID0gcGFyc2VGbG9hdChjb250ZXh0LnNwcml0ZVdpZHRoKSAvIHBhcnNlRmxvYXQobWVyZ2VkU3R5bGUud2lkdGgpICogd2VleC5jb25maWcuZW52LnNjYWxlO1xuICAgIHJldHVybiB7XG4gICAgICAnYmFja2dyb3VuZC1wb3NpdGlvbic6ICgocG9zWCAqIHNjYWxlKSArIFwicHggXCIgKyAocG9zWSAqIHNjYWxlKSArIFwicHhcIiksXG4gICAgICAnYmFja2dyb3VuZC1zaXplJzogKChzaXplU2NhbGUgKiAxMDApICsgXCIlXCIpXG4gICAgfVxuICB9XG4gIHZhciBzdHJldGNoID0gJzEwMCUgMTAwJSc7XG4gIHZhciByZXNpemUgPSBjb250ZXh0LnJlc2l6ZSB8fCBzdHJldGNoO1xuICB2YXIgYmdTaXplID0gWydjb3ZlcicsICdjb250YWluJywgc3RyZXRjaF0uaW5kZXhPZihyZXNpemUpID4gLTEgPyByZXNpemUgOiBzdHJldGNoO1xuICAvLyBjb21wYXRpYmlsaXR5OiBodHRwOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1iYWNrZ3JvdW5kLXNpemVcbiAgcmV0dXJuIHsgJ2JhY2tncm91bmQtc2l6ZSc6IGJnU2l6ZSB9XG59XG5cbmZ1bmN0aW9uIHByZVByb2Nlc3NTcmMgKGNvbnRleHQsIHVybCwgbWVyZ2VkU3R5bGUpIHtcbiAgLy8gc29tZWhvdyB0aGUgbWVyZ2VkIHN0eWxlIGluIF9wcmVyZW5kZXIgaG9vayBpcyBnb25lLlxuICAvLyBqdXN0IHJldHVybiB0aGUgb3JpZ2luYWwgc3JjLlxuICBpZiAoIW1lcmdlZFN0eWxlIHx8ICFtZXJnZWRTdHlsZS53aWR0aCB8fCAhbWVyZ2VkU3R5bGUuaGVpZ2h0KSB7XG4gICAgcmV0dXJuIHVybFxuICB9XG4gIHZhciB3aWR0aCA9IG1lcmdlZFN0eWxlLndpZHRoO1xuICB2YXIgaGVpZ2h0ID0gbWVyZ2VkU3R5bGUuaGVpZ2h0O1xuICByZXR1cm4gY29udGV4dC5wcm9jZXNzSW1nU3JjICYmIGNvbnRleHQucHJvY2Vzc0ltZ1NyYyh1cmwsIHtcbiAgICB3aWR0aDogcGFyc2VGbG9hdCh3aWR0aCksXG4gICAgaGVpZ2h0OiBwYXJzZUZsb2F0KGhlaWdodCksXG4gICAgcXVhbGl0eTogY29udGV4dC5xdWFsaXR5LFxuICAgIHNoYXJwZW46IGNvbnRleHQuc2hhcnBlbixcbiAgICBvcmlnaW5hbDogY29udGV4dC5vcmlnaW5hbFxuICB9KSB8fCB1cmxcbn1cblxuZnVuY3Rpb24gZG93bmxvYWQgKHVybCwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gc3VjY2VzcyAoKSB7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soe1xuICAgICAgc3VjY2VzczogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGZhaWwgKGVycikge1xuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHtcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgZXJyb3JEZXNjOiBlcnIgKyAnJ1xuICAgIH0pO1xuICB9XG4gIHRyeSB7XG4gICAgdmFyIGlzRGF0YVVybCA9IGZhbHNlO1xuICAgIHZhciBwYXJ0cztcbiAgICB2YXIgbmFtZTtcbiAgICBpZiAodXJsLm1hdGNoKC9kYXRhOmltYWdlXFwvW147XSs7YmFzZTY0LC8pKSB7XG4gICAgICBpc0RhdGFVcmwgPSB0cnVlO1xuICAgICAgcGFydHMgPSB1cmwuc3BsaXQoJywnKTtcbiAgICB9XG4gICAgaWYgKCFpc0RhdGFVcmwpIHtcbiAgICAgIG5hbWUgPSB1cmxcbiAgICAgICAgLnJlcGxhY2UoL1xcP1teP10rLywgJycpXG4gICAgICAgIC5yZXBsYWNlKC8jW14jXSsvLCAnJylcbiAgICAgICAgLm1hdGNoKC8oW14vXSspJC8pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIG5hbWUgPSBwYXJ0c1sxXS5zdWJzdHIoMCwgSU1HX05BTUVfQklUUyk7XG4gICAgfVxuICAgIHZhciBhRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgYUVsLmhyZWYgPSB1cmw7XG4gICAgLyoqXG4gICAgICogTm90IGFsbCBicm93c2VyIHN1cHBvcnQgdGhpcyAnZG93bmxvYWQnIGF0dHJpYnV0ZS4gSW4gdGhlc2UgYnJvd3NlcnMgaXQnbGwganVtcFxuICAgICAqIHRvIHRoZSBwaG90byB1cmwgcGFnZSBhbmQgdXNlciBoYXZlIHRvIGxvbmdwcmVzcyB0aGUgcGhvdG8gdG8gc2F2ZSBpdC5cbiAgICAgKi9cbiAgICBhRWwuZG93bmxvYWQgPSBuYW1lO1xuICAgIHZhciBjbGlja0V2dCA9IG5ldyBFdmVudCgnY2xpY2snLCB7IGJ1YmJsZXM6IGZhbHNlIH0pO1xuICAgIGFFbC5kaXNwYXRjaEV2ZW50KGNsaWNrRXZ0KTtcbiAgICBzdWNjZXNzKCk7XG4gIH1cbiAgY2F0Y2ggKGVycikge1xuICAgIGZhaWwoZXJyKTtcbiAgfVxufVxuXG52YXIgaW1hZ2UgPSB7XG4gIG5hbWU6ICd3ZWV4LWltYWdlJyxcbiAgcHJvcHM6IHtcbiAgICBzcmM6IFN0cmluZyxcbiAgICBwbGFjZWhvbGRlcjogU3RyaW5nLFxuICAgIHJlc2l6ZTogU3RyaW5nLFxuICAgIHF1YWxpdHk6IFN0cmluZyxcbiAgICBzaGFycGVuOiBTdHJpbmcsXG4gICAgb3JpZ2luYWw6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgIHNwcml0ZVNyYzogU3RyaW5nLFxuICAgIHNwcml0ZVBvc2l0aW9uOiBbU3RyaW5nLCBBcnJheV0sXG4gICAgc3ByaXRlV2lkdGg6IFtTdHJpbmcsIE51bWJlcl1cbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB0aGlzLl9maXJlTGF6eWxvYWQoKTtcbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB0aGlzLl9maXJlTGF6eWxvYWQoKTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgc2F2ZTogZnVuY3Rpb24gc2F2ZSAoY2FsbGJhY2spIHtcbiAgICAgIGRvd25sb2FkKHRoaXMuc3JjLCBjYWxsYmFjayk7XG4gICAgfVxuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgdmFyIHN0eWxlID0gZXh0cmFjdENvbXBvbmVudFN0eWxlJDEodGhpcyk7XG4gICAgdmFyIGN1c3RvbVN0eWxlID0gZ2V0Q3VzdG9tU3R5bGUodGhpcywgc3R5bGUpO1xuICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdmaWd1cmUnLCB7XG4gICAgICBhdHRyczoge1xuICAgICAgICAnd2VleC10eXBlJzogJ2ltYWdlJyxcbiAgICAgICAgJ2ltZy1zcmMnOiB0aGlzLnNwcml0ZVNyYyB8fCBwcmVQcm9jZXNzU3JjKHRoaXMsIHRoaXMuc3JjLCBzdHlsZSksXG4gICAgICAgICdpbWctcGxhY2Vob2xkZXInOiBwcmVQcm9jZXNzU3JjKHRoaXMsIHRoaXMucGxhY2Vob2xkZXIsIHN0eWxlKSxcbiAgICAgICAgJ3Nwcml0ZS1zcmMnOiB0aGlzLnNwcml0ZVNyYyxcbiAgICAgICAgJ3Nwcml0ZS1wb3NpdGlvbic6IHRoaXMuc3ByaXRlUG9zaXRpb24sXG4gICAgICAgICdzcHJpdGUtd2lkdGgnOiB0aGlzLnNwcml0ZVdpZHRoXG4gICAgICB9LFxuICAgICAgb246IGNyZWF0ZUV2ZW50TWFwJDEodGhpcywgWydsb2FkJywgJ2Vycm9yJ10pLFxuICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LWltYWdlIHdlZXgtZWwnLFxuICAgICAgc3RhdGljU3R5bGU6IGV4dGVuZCQyKHN0eWxlLCBjdXN0b21TdHlsZSlcbiAgICB9KVxuICB9LFxuICBfY3NzOiBfY3NzJDJcbn07XG5cbnZhciBpbWFnZSQxID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgZXh0cmFjdENvbXBvbmVudFN0eWxlJDEgPSB3ZWV4LmV4dHJhY3RDb21wb25lbnRTdHlsZTtcbiAgICBjcmVhdGVFdmVudE1hcCQxID0gd2VleC5jcmVhdGVFdmVudE1hcDtcbiAgICBleHRlbmQkMiA9IHdlZXgudXRpbHMuZXh0ZW5kO1xuICAgIGlzQXJyYXkkMSA9IHdlZXgudXRpbHMuaXNBcnJheTtcblxuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ2ltYWdlJywgaW1hZ2UpO1xuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ2ltZycsIGltYWdlKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGZpbGVPdmVydmlldyBJbnB1dCBjb21wb25lbnQuXG4gKiBTdXBwb3J0IHYtbW9kZWwgb25seSBpZiB2dWUgdmVyc2lvbiBpcyBsYXJnZXIgdGhhbiAyLjIuMFxuICovXG52YXIgZXh0cmFjdENvbXBvbmVudFN0eWxlJDI7XG52YXIgbWFwRm9ybUV2ZW50cyQxO1xudmFyIGFwcGVuZENzcyQxO1xuXG52YXIgSURfUFJFRklYX1BMQUNFSE9MREVSX0NPTE9SID0gJ3dpcHRfcGxjXyc7XG52YXIgSURfUFJFRklYX0lOUFVUID0gJ3dpcHRfJztcbnZhciBpZENvdW50ID0gMDtcblxudmFyIF9jc3MkMyA9IFwiXFxuLndlZXgtaW5wdXQsIC53ZWV4LXRleHRhcmVhIHtcXG4gIGZvbnQtc2l6ZTogMC40MjY2NjdyZW07XFxufVxcbi53ZWV4LWlucHV0OmZvY3VzLCAud2VleC10ZXh0YXJlYTpmb2N1cyB7XFxuICBvdXRsaW5lOiBub25lO1xcbn1cXG5cIjtcblxuZnVuY3Rpb24gc2V0UGxhY2Vob2xkZXJDb2xvciAoaW5wdXRWbSwgcGxhY2Vob2xkZXJDb2xvcikge1xuICBpZiAoIXBsYWNlaG9sZGVyQ29sb3IpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdmVuZG9ycyA9IFtcbiAgICAnOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyJyxcbiAgICAnOi1tb3otcGxhY2Vob2xkZXInLFxuICAgICc6Oi1tb3otcGxhY2Vob2xkZXInLFxuICAgICc6LW1zLWlucHV0LXBsYWNlaG9sZGVyJyxcbiAgICAnOnBsYWNlaG9sZGVyLXNob3duJ1xuICBdO1xuICB2YXIgaWQgPSBpbnB1dFZtLl9pZDtcbiAgYXBwZW5kQ3NzJDEoXG4gICAgdmVuZG9ycy5tYXAoZnVuY3Rpb24gKHZlbmRvciwgaWR4KSB7XG4gICAgICByZXR1cm4gKFwiI1wiICsgSURfUFJFRklYX0lOUFVUICsgaWQgKyAodmVuZG9yc1tpZHhdKSArIFwie2NvbG9yOlwiICsgcGxhY2Vob2xkZXJDb2xvciArIFwiO31cIilcbiAgICB9KS5qb2luKCcnKSxcbiAgICAoXCJcIiArIElEX1BSRUZJWF9QTEFDRUhPTERFUl9DT0xPUiArIGlkKSxcbiAgICB0cnVlKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1N0eWxlICh2bSkge1xuICB2YXIgc3R5bGVzID0gZXh0cmFjdENvbXBvbmVudFN0eWxlJDIodm0pO1xuICB2YXIgcGhDb2xvciA9IHN0eWxlcy5wbGFjZWhvbGRlckNvbG9yO1xuICBpZiAocGhDb2xvcikge1xuICAgIHNldFBsYWNlaG9sZGVyQ29sb3Iodm0sIHBoQ29sb3IpO1xuICB9XG4gIHJldHVybiBzdHlsZXNcbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXQgKHdlZXgpIHtcbiAgdmFyIHJlZiA9IHdlZXgubWl4aW5zO1xuICB2YXIgaW5wdXRDb21tb24gPSByZWYuaW5wdXRDb21tb247XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnd2VleC1pbnB1dCcsXG4gICAgbWl4aW5zOiBbaW5wdXRDb21tb25dLFxuICAgIHByb3BzOiB7XG4gICAgICB0eXBlOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJ3RleHQnLFxuICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvciAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgJ2VtYWlsJywgJ251bWJlcicsICdwYXNzd29yZCcsICdzZWFyY2gnLCAndGVsJywgJ3RleHQnLCAndXJsJywgJ2RhdGUnLFxuICAgICAgICAgICAgJ2RhdGV0aW1lJywgJ3RpbWUnIF0uaW5kZXhPZih2YWx1ZSkgIT09IC0xXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB2YWx1ZTogU3RyaW5nLFxuICAgICAgcGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgICAgIGRpc2FibGVkOiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGF1dG9mb2N1czoge1xuICAgICAgICB0eXBlOiBbU3RyaW5nLCBCb29sZWFuXSxcbiAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBtYXhsZW5ndGg6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICByZXR1cm5LZXlUeXBlOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIGlmICghdGhpcy5faWQpIHtcbiAgICAgICAgdGhpcy5faWQgPSBpZENvdW50Kys7XG4gICAgICB9XG4gICAgICB2YXIgZXZlbnRzID0gbWFwRm9ybUV2ZW50cyQxKHRoaXMpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2h0bWw6aW5wdXQnLCB7XG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgJ3dlZXgtdHlwZSc6ICdpbnB1dCcsXG4gICAgICAgICAgaWQ6IChcIlwiICsgSURfUFJFRklYX0lOUFVUICsgKHRoaXMuX2lkKSksXG4gICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgIGRpc2FibGVkOiAodGhpcy5kaXNhYmxlZCAhPT0gJ2ZhbHNlJyAmJiB0aGlzLmRpc2FibGVkICE9PSBmYWxzZSksXG4gICAgICAgICAgYXV0b2ZvY3VzOiAodGhpcy5hdXRvZm9jdXMgIT09ICdmYWxzZScgJiYgdGhpcy5hdXRvZm9jdXMgIT09IGZhbHNlKSxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogdGhpcy5wbGFjZWhvbGRlcixcbiAgICAgICAgICBtYXhsZW5ndGg6IHRoaXMubWF4bGVuZ3RoLFxuICAgICAgICAgICdyZXR1cm5LZXlUeXBlJzogdGhpcy5yZXR1cm5LZXlUeXBlXG4gICAgICAgIH0sXG4gICAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWVcbiAgICAgICAgfSxcbiAgICAgICAgb246IHRoaXMuY3JlYXRlS2V5Ym9hcmRFdmVudChldmVudHMpLFxuICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtaW5wdXQgd2VleC1lbCcsXG4gICAgICAgIHN0YXRpY1N0eWxlOiBwcm9jZXNzU3R5bGUodGhpcylcbiAgICAgIH0pXG4gICAgfSxcbiAgICBfY3NzOiBfY3NzJDNcbiAgfVxufVxuXG52YXIgaW5wdXQgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICBleHRyYWN0Q29tcG9uZW50U3R5bGUkMiA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICAgIG1hcEZvcm1FdmVudHMkMSA9IHdlZXgudXRpbHMubWFwRm9ybUV2ZW50cztcbiAgICBhcHBlbmRDc3MkMSA9IHdlZXgudXRpbHMuYXBwZW5kQ3NzO1xuXG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnaW5wdXQnLCBnZXRJbnB1dCh3ZWV4KSk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgX2NzcyQ0ID0gXCJcXG4ud2VleC1zd2l0Y2gge1xcbiAgYm9yZGVyOiAwLjAxMzMzM3JlbSBzb2xpZCAjZGZkZmRmO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAtbW96LXVzZXItc2VsZWN0OiBub25lO1xcbiAgLW1zLXVzZXItc2VsZWN0OiBub25lO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcXG4gIGJhY2tncm91bmQtY2xpcDogY29udGVudC1ib3g7XFxuICBjb2xvcjogIzY0YmQ2MztcXG4gIHdpZHRoOiAxLjMzMzMzM3JlbTtcXG4gIGhlaWdodDogMC44cmVtO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXItY29sb3I6ICNkZmRmZGY7XFxuICBib3gtc2hhZG93OiAjZGZkZmRmIDAgMCAwIDAgaW5zZXQ7XFxuICBib3JkZXItcmFkaXVzOiAwLjhyZW07XFxuICAtd2Via2l0LXRyYW5zaXRpb246IGJvcmRlciAwLjRzLCBib3gtc2hhZG93IDAuNHMsIGJhY2tncm91bmQtY29sb3IgMS4ycztcXG4gIC1tb3otdHJhbnNpdGlvbjogYm9yZGVyIDAuNHMsIGJveC1zaGFkb3cgMC40cywgYmFja2dyb3VuZC1jb2xvciAxLjJzO1xcbiAgdHJhbnNpdGlvbjogYm9yZGVyIDAuNHMsIGJveC1zaGFkb3cgMC40cywgYmFja2dyb3VuZC1jb2xvciAxLjJzO1xcbn1cXG5cXG4ud2VleC1zd2l0Y2gtY2hlY2tlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNjRiZDYzO1xcbiAgYm9yZGVyLWNvbG9yOiAjNjRiZDYzO1xcbiAgYm94LXNoYWRvdzogIzY0YmQ2MyAwIDAgMCAwLjUzMzMzM3JlbSBpbnNldDtcXG59XFxuXFxuLndlZXgtc3dpdGNoLWNoZWNrZWQud2VleC1zd2l0Y2gtZGlzYWJsZWQge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI0EwQ0NBMDtcXG4gIGJveC1zaGFkb3c6ICNBMENDQTAgMCAwIDAgMC41MzMzMzNyZW0gaW5zZXQ7XFxufVxcblxcbi53ZWV4LXN3aXRjaC1kaXNhYmxlZCB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjRUVFRUVFO1xcbn1cXG5cXG4ud2VleC1zd2l0Y2gtaW5uZXIge1xcbiAgd2lkdGg6IDAuOHJlbTtcXG4gIGhlaWdodDogMC44cmVtO1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG4gIGJvcmRlci1yYWRpdXM6IDEwMCU7XFxuICBib3gtc2hhZG93OiAwIDAuMDEzMzMzcmVtIDAuMDRyZW0gcmdiYSgwLCAwLCAwLCAwLjQpO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIC13ZWJraXQtdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjRzLCBsZWZ0IDAuMnM7XFxuICAtbW96LXRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC40cywgbGVmdCAwLjJzO1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjRzLCBsZWZ0IDAuMnM7XFxufVxcblxcbi53ZWV4LXN3aXRjaC1jaGVja2VkID4gLndlZXgtc3dpdGNoLWlubmVyIHtcXG4gIGxlZnQ6IDAuNTMzMzMzcmVtO1xcbn1cXG5cIjtcblxuZnVuY3Rpb24gZ2V0U3dpdGNoICh3ZWV4KSB7XG4gIHZhciBleHRyYWN0Q29tcG9uZW50U3R5bGUgPSB3ZWV4LmV4dHJhY3RDb21wb25lbnRTdHlsZTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICd3ZWV4LXN3aXRjaCcsXG4gICAgcHJvcHM6IHtcbiAgICAgIGNoZWNrZWQ6IHtcbiAgICAgICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgZGlzYWJsZWQ6IHtcbiAgICAgICAgdHlwZTogW0Jvb2xlYW4sIFN0cmluZ10sXG4gICAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgICB9XG4gICAgfSxcbiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzQ2hlY2tlZDogKHRoaXMuY2hlY2tlZCAhPT0gJ2ZhbHNlJyAmJiB0aGlzLmNoZWNrZWQgIT09IGZhbHNlKSxcbiAgICAgICAgaXNEaXNhYmxlZDogKHRoaXMuZGlzYWJsZWQgIT09ICdmYWxzZScgJiYgdGhpcy5kaXNhYmxlZCAhPT0gZmFsc2UpXG4gICAgICB9XG4gICAgfSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgd3JhcHBlckNsYXNzOiBmdW5jdGlvbiB3cmFwcGVyQ2xhc3MgKCkge1xuICAgICAgICB2YXIgY2xhc3NBcnJheSA9IFsnd2VleC1zd2l0Y2gnXTtcbiAgICAgICAgdGhpcy5pc0NoZWNrZWQgJiYgY2xhc3NBcnJheS5wdXNoKCd3ZWV4LXN3aXRjaC1jaGVja2VkJyk7XG4gICAgICAgIHRoaXMuaXNEaXNhYmxlZCAmJiBjbGFzc0FycmF5LnB1c2goJ3dlZXgtc3dpdGNoLWRpc2FibGVkJyk7XG4gICAgICAgIHJldHVybiBjbGFzc0FycmF5LmpvaW4oJyAnKVxuICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgdG9nZ2xlOiBmdW5jdGlvbiB0b2dnbGUgKCkge1xuICAgICAgICAvLyBUT0RPOiBoYW5kbGUgdGhlIGV2ZW50c1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCkge1xuICAgICAgICAgIHRoaXMuaXNDaGVja2VkID0gIXRoaXMuaXNDaGVja2VkO1xuICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHsgdmFsdWU6IHRoaXMuaXNDaGVja2VkIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIC8vIGlmIChcInByb2R1Y3Rpb25cIiA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgICAgLy8gICB2YWxpZGF0ZVN0eWxlcygnc3dpdGNoJywgdGhpcy4kdm5vZGUuZGF0YSAmJiB0aGlzLiR2bm9kZS5kYXRhLnN0YXRpY1N0eWxlKVxuICAgICAgLy8gfVxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7XG4gICAgICAgIGF0dHJzOiB7ICd3ZWV4LXR5cGUnOiAnc3dpdGNoJyB9LFxuICAgICAgICBvbjoge1xuICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMkMS4kZW1pdCgnY2xpY2snLCBldmVudCk7XG4gICAgICAgICAgICB0aGlzJDEudG9nZ2xlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzdGF0aWNDbGFzczogdGhpcy53cmFwcGVyQ2xhc3MsXG4gICAgICAgIHN0YXRpY1N0eWxlOiBleHRyYWN0Q29tcG9uZW50U3R5bGUodGhpcylcbiAgICAgIH0sIFtjcmVhdGVFbGVtZW50KCdzbWFsbCcsIHsgc3RhdGljQ2xhc3M6ICd3ZWV4LXN3aXRjaC1pbm5lcicgfSldKVxuICAgIH0sXG4gICAgX2NzczogX2NzcyQ0XG4gIH1cbn1cblxudmFyIF9zd2l0Y2ggPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdzd2l0Y2gnLCBnZXRTd2l0Y2god2VleCkpO1xuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIERFRkFVTFRfT0ZGU0VUX0FDQ1VSQUNZID0gMTA7XG52YXIgREVGQVVMVF9MT0FETU9SRV9PRkZTRVQgPSAwO1xuXG5mdW5jdGlvbiBnZXRUaHJvdHRsZWRTY3JvbGwgKGNvbnRleHQpIHtcbiAgdmFyIHNjYWxlID0gd2VleC5jb25maWcuZW52LnNjYWxlO1xuICBpZiAoIWNvbnRleHQuX3Rocm90dGxlU2Nyb2xsKSB7XG4gICAgdmFyIHdyYXBwZXIgPSBjb250ZXh0LiRyZWZzLndyYXBwZXI7XG4gICAgdmFyIGlubmVyID0gY29udGV4dC4kcmVmcy5pbm5lcjtcbiAgICB2YXIgcHJlT2Zmc2V0ID0gKGNvbnRleHQuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCdcbiAgICAgICAgPyB3cmFwcGVyLnNjcm9sbExlZnRcbiAgICAgICAgOiB3cmFwcGVyLnNjcm9sbFRvcClcbiAgICAgIHx8IDA7XG4gICAgY29udGV4dC5fdGhyb3R0bGVTY3JvbGwgPSB3ZWV4LnV0aWxzLnRocm90dGxlKGZ1bmN0aW9uIChldnQpIHtcbiAgICAgIHZhciBvZmZzZXQgPSBjb250ZXh0LnNjcm9sbERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnXG4gICAgICAgID8gd3JhcHBlci5zY3JvbGxMZWZ0XG4gICAgICAgIDogd3JhcHBlci5zY3JvbGxUb3A7XG4gICAgICB2YXIgaW5kZW50ID0gcGFyc2VJbnQoY29udGV4dC5vZmZzZXRBY2N1cmFjeSkgKiBzY2FsZTtcbiAgICAgIGZ1bmN0aW9uIHRyaWdnZXJTY3JvbGwgKCkge1xuICAgICAgICB2YXIgcmVjdCA9IGlubmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBldnQuY29udGVudFNpemUgPSB7IHdpZHRoOiByZWN0LndpZHRoLCBoZWlnaHQ6IHJlY3QuaGVpZ2h0IH07XG4gICAgICAgIGV2dC5jb250ZW50T2Zmc2V0ID0ge1xuICAgICAgICAgIHg6IHdyYXBwZXIuc2Nyb2xsTGVmdCxcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBwb3NpdGl2ZSBkaXJlY2l0b24gZm9yIHktYXhpcyBpcyBkb3duLlxuICAgICAgICAgICAqIHNvIHNob3VsZCB1c2UgbmVnYXRpdmUgb3BlcmF0aW9uIG9uIHNjcm9sbFRvcC5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqICAoMCwwKS0tLS0tLS0tLS0tLS0tLT4geFxuICAgICAgICAgICAqICAgICAgIHxcbiAgICAgICAgICAgKiAgICAgICB8XG4gICAgICAgICAgICogICAgICAgfFxuICAgICAgICAgICAqICAgICAgIHxcbiAgICAgICAgICAgKiAgICAgICB2IHlcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHk6IC13cmFwcGVyLnNjcm9sbFRvcFxuICAgICAgICB9O1xuICAgICAgICBjb250ZXh0LiRlbWl0KCdzY3JvbGwnLCBldnQpO1xuICAgICAgfVxuICAgICAgaWYgKE1hdGguYWJzKG9mZnNldCAtIHByZU9mZnNldCkgPj0gaW5kZW50KSB7XG4gICAgICAgIHRyaWdnZXJTY3JvbGwoKTtcbiAgICAgICAgcHJlT2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgfVxuICAgIH0sIDE2LCB0cnVlKTtcbiAgfVxuICByZXR1cm4gY29udGV4dC5fdGhyb3R0bGVTY3JvbGxcbn1cblxudmFyIHNjcm9sbGFibGUkMSA9IHtcbiAgcHJvcHM6IHtcbiAgICBsb2FkbW9yZW9mZnNldDoge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIGRlZmF1bHQ6IERFRkFVTFRfTE9BRE1PUkVfT0ZGU0VULFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IgKHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWwgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAhaXNOYU4odmFsKSAmJiB2YWwgPj0gREVGQVVMVF9MT0FETU9SRV9PRkZTRVRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgb2Zmc2V0QWNjdXJhY3k6IHtcbiAgICAgIHR5cGU6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICBkZWZhdWx0OiBERUZBVUxUX09GRlNFVF9BQ0NVUkFDWSxcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yJDEgKHZhbHVlKSB7XG4gICAgICAgIHZhciB2YWwgPSBwYXJzZUludCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAhaXNOYU4odmFsKSAmJiB2YWwgPj0gREVGQVVMVF9PRkZTRVRfQUNDVVJBQ1lcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgLy8gc2hvdWxkIGNhbGwgcmVzZXRMb2FkbW9yZSgpIHRvIGVuYWJsZSBsb2FkbW9yZSBldmVudC5cbiAgICB0aGlzLl9sb2FkbW9yZVJlc2V0ID0gdHJ1ZTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgdXBkYXRlTGF5b3V0OiBmdW5jdGlvbiB1cGRhdGVMYXlvdXQgKCkge1xuICAgICAgdmFyIHdyYXBwZXIgPSB0aGlzLiRyZWZzLndyYXBwZXI7XG4gICAgICBpZiAod3JhcHBlcikge1xuICAgICAgICB2YXIgcmVjdCA9IHdyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMuX3dyYXBwZXJXaWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgICAgIHRoaXMuX3dyYXBwZXJIZWlnaHQgPSByZWN0LmhlaWdodDtcbiAgICAgIH1cbiAgICAgIHZhciBpbm5lciA9IHRoaXMuJHJlZnMuaW5uZXI7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBpbm5lciAmJiBpbm5lci5jaGlsZHJlbjtcbiAgICAgIGlmIChpbm5lcikge1xuICAgICAgICB2YXIgcmVjdCQxID0gaW5uZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMuX2lubmVyV2lkdGggPSByZWN0JDEud2lkdGg7XG4gICAgICAgIHRoaXMuX2lubmVySGVpZ2h0ID0gcmVjdCQxLmhlaWdodDtcbiAgICAgIH1cbiAgICAgIHZhciBsb2FkaW5nRWwgPSB0aGlzLl9sb2FkaW5nICYmIHRoaXMuX2xvYWRpbmcuJGVsO1xuICAgICAgdmFyIHJlZnJlc2hFbCA9IHRoaXMuX3JlZnJlc2ggJiYgdGhpcy5fcmVmcmVzaC4kZWw7XG4gICAgICBpZiAobG9hZGluZ0VsKSB7XG4gICAgICAgIHRoaXMuX2lubmVySGVpZ2h0IC09IGxvYWRpbmdFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICB9XG4gICAgICBpZiAocmVmcmVzaEVsKSB7XG4gICAgICAgIHRoaXMuX2lubmVySGVpZ2h0IC09IHJlZnJlc2hFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICB9XG4gICAgICAvLyBpbm5lciB3aWR0aCBpcyBhbHdheXMgdGhlIHZpZXdwb3J0IHdpZHRoIHNvbWVob3cgaW4gaG9yaXpvbnRhbFxuICAgICAgLy8gc2NvbGxlciwgdGhlcmVmb3JlIHRoZSBpbm5lciB3aWR0aCBzaG91bGQgYmUgcmVjbGFjdWxhdGVkLlxuICAgICAgaWYgKHRoaXMuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgY2hpbGRyZW4pIHtcbiAgICAgICAgdGhpcy5faW5uZXJXaWR0aCA9IHdlZXgudXRpbHMuZ2V0UmFuZ2VXaWR0aChpbm5lcik7XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlc2V0TG9hZG1vcmU6IGZ1bmN0aW9uIHJlc2V0TG9hZG1vcmUgKCkge1xuICAgICAgdGhpcy5fbG9hZG1vcmVSZXNldCA9IHRydWU7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHByb2Nlc3Mgc3RpY2t5IGNoaWxkcmVuIGluIHNjcm9sbGFibGUgY29tcG9uZW50cy5cbiAgICAgKiBjdXJyZW50IG9ubHkgc3VwcG9ydCBsaXN0IGFuZCB2ZXJ0aWNhbCBzY3JvbGxlci5cbiAgICAgKi9cbiAgICBwcm9jZXNzU3RpY2t5OiBmdW5jdGlvbiBwcm9jZXNzU3RpY2t5ICgpIHtcbiAgICAgIC8qKlxuICAgICAgICogY3VycmVudCBicm93c2VyIHN1cHBvcnQgJ3N0aWNreScgb3IgJy13ZWJraXQtc3RpY2t5Jywgc28gdGhlcmUncyBubyBuZWVkXG4gICAgICAgKiB0byBkbyBmdXJ0aGVyIG1vcmUuXG4gICAgICAgKi9cbiAgICAgIGlmICh3ZWV4LnV0aWxzLnN1cHBvcnRTdGlja3koKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIGN1cnJlbnQgb25seSBzdXBwb3J0IGxpc3QgYW5kIHZlcnRpY2FsIHNjcm9sbGVyLlxuICAgICAgaWYgKHRoaXMuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgc3RpY2t5Q2hpbGRyZW4gPSB0aGlzLl9zdGlja3lDaGlsZHJlbjtcbiAgICAgIHZhciBsZW4gPSBzdGlja3lDaGlsZHJlbiAmJiBzdGlja3lDaGlsZHJlbi5sZW5ndGggfHwgMDtcbiAgICAgIGlmIChsZW4gPD0gMCkgeyByZXR1cm4gfVxuXG4gICAgICB2YXIgY29udGFpbmVyID0gdGhpcy4kZWw7XG4gICAgICBpZiAoIWNvbnRhaW5lcikgeyByZXR1cm4gfVxuICAgICAgdmFyIHNjcm9sbFRvcCA9IGNvbnRhaW5lci5zY3JvbGxUb3A7XG5cbiAgICAgIHZhciBzdGlja3lDaGlsZDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgc3RpY2t5Q2hpbGQgPSBzdGlja3lDaGlsZHJlbltpXTtcbiAgICAgICAgaWYgKHN0aWNreUNoaWxkLl9pbml0T2Zmc2V0VG9wIDwgc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgc3RpY2t5Q2hpbGQuX2FkZFN0aWNreSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHN0aWNreUNoaWxkLl9yZW1vdmVTdGlja3koKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBoYW5kbGVTY3JvbGw6IGZ1bmN0aW9uIGhhbmRsZVNjcm9sbCAoZXZlbnQpIHtcbiAgICAgIHdlZXgudXRpbHMuZ2V0VGhyb3R0bGVMYXp5bG9hZCgyNSwgdGhpcy4kZWwsICdzY3JvbGwnKSgpO1xuICAgICAgZ2V0VGhyb3R0bGVkU2Nyb2xsKHRoaXMpKGV2ZW50KTtcblxuICAgICAgdGhpcy5wcm9jZXNzU3RpY2t5KCk7XG5cbiAgICAgIC8vIGZpcmUgbG9hZG1vcmUgZXZlbnQuXG4gICAgICB2YXIgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyO1xuICAgICAgaWYgKGlubmVyKSB7XG4gICAgICAgIHZhciBpbm5lckxlbmd0aCA9IHRoaXMuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCdcbiAgICAgICAgICA/IHRoaXMuX2lubmVyV2lkdGhcbiAgICAgICAgICA6IHRoaXMuX2lubmVySGVpZ2h0O1xuICAgICAgICBpZiAoIXRoaXMuX2lubmVyTGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5faW5uZXJMZW5ndGggPSBpbm5lckxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faW5uZXJMZW5ndGggIT09IGlubmVyTGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5faW5uZXJMZW5ndGggPSBpbm5lckxlbmd0aDtcbiAgICAgICAgICB0aGlzLl9sb2FkbW9yZVJlc2V0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fbG9hZG1vcmVSZXNldCAmJiB0aGlzLnJlYWNoQm90dG9tKHRoaXMubG9hZG1vcmVvZmZzZXQpKSB7XG4gICAgICAgICAgdGhpcy5fbG9hZG1vcmVSZXNldCA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuJGVtaXQoJ2xvYWRtb3JlJywgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHJlYWNoVG9wOiBmdW5jdGlvbiByZWFjaFRvcCAoKSB7XG4gICAgICB2YXIgd3JhcHBlciA9IHRoaXMuJHJlZnMud3JhcHBlcjtcbiAgICAgIHJldHVybiAoISF3cmFwcGVyKSAmJiAod3JhcHBlci5zY3JvbGxUb3AgPD0gMClcbiAgICB9LFxuXG4gICAgcmVhY2hCb3R0b206IGZ1bmN0aW9uIHJlYWNoQm90dG9tIChvZmZzZXQpIHtcbiAgICAgIHZhciB3cmFwcGVyID0gdGhpcy4kcmVmcy53cmFwcGVyO1xuICAgICAgdmFyIGlubmVyID0gdGhpcy4kcmVmcy5pbm5lcjtcbiAgICAgIG9mZnNldCA9IHBhcnNlSW50KG9mZnNldCB8fCAwKSAqIHdlZXguY29uZmlnLmVudi5zY2FsZTtcblxuICAgICAgaWYgKHdyYXBwZXIgJiYgaW5uZXIpIHtcbiAgICAgICAgdmFyIGtleSA9IHRoaXMuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCdcbiAgICAgICAgICA/ICd3aWR0aCdcbiAgICAgICAgICA6ICdoZWlnaHQnO1xuICAgICAgICB2YXIgaW5uZXJMZW5ndGggPSB0aGlzWyhcIl9pbm5lclwiICsgKGtleVswXS50b1VwcGVyQ2FzZSgpKSArIChrZXkuc3Vic3RyKDEpKSldO1xuICAgICAgICB2YXIgd3JhcHBlckxlbmd0aCA9IHRoaXNbKFwiX3dyYXBwZXJcIiArIChrZXlbMF0udG9VcHBlckNhc2UoKSkgKyAoa2V5LnN1YnN0cigxKSkpXTtcbiAgICAgICAgdmFyIHNjcm9sbE9mZnNldCA9IHRoaXMuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCdcbiAgICAgICAgICA/IHdyYXBwZXIuc2Nyb2xsTGVmdFxuICAgICAgICAgIDogd3JhcHBlci5zY3JvbGxUb3A7XG4gICAgICAgIHJldHVybiBzY3JvbGxPZmZzZXQgPj0gaW5uZXJMZW5ndGggLSB3cmFwcGVyTGVuZ3RoIC0gb2Zmc2V0XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9LFxuXG4gICAgaGFuZGxlVG91Y2hTdGFydDogZnVuY3Rpb24gaGFuZGxlVG91Y2hTdGFydCAoZXZlbnQpIHtcbiAgICAgIGlmICh0aGlzLl9sb2FkaW5nIHx8IHRoaXMuX3JlZnJlc2gpIHtcbiAgICAgICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICAgIHRoaXMuX3RvdWNoUGFyYW1zID0ge1xuICAgICAgICAgIHJlYWNoVG9wOiB0aGlzLnJlYWNoVG9wKCksXG4gICAgICAgICAgcmVhY2hCb3R0b206IHRoaXMucmVhY2hCb3R0b20oKSxcbiAgICAgICAgICBzdGFydFRvdWNoRXZlbnQ6IHRvdWNoLFxuICAgICAgICAgIHN0YXJ0WDogdG91Y2gucGFnZVgsXG4gICAgICAgICAgc3RhcnRZOiB0b3VjaC5wYWdlWSxcbiAgICAgICAgICB0aW1lU3RhbXA6IGV2ZW50LnRpbWVTdGFtcFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBoYW5kbGVUb3VjaE1vdmU6IGZ1bmN0aW9uIGhhbmRsZVRvdWNoTW92ZSAoZXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5fdG91Y2hQYXJhbXMgfHwgIXRoaXMuX3JlZnJlc2ggJiYgIXRoaXMuX2xvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyO1xuICAgICAgdmFyIHJlZiA9IHRoaXMuX3RvdWNoUGFyYW1zO1xuICAgICAgdmFyIHN0YXJ0WSA9IHJlZi5zdGFydFk7XG4gICAgICB2YXIgcmVhY2hUb3AgPSByZWYucmVhY2hUb3A7XG4gICAgICB2YXIgcmVhY2hCb3R0b20gPSByZWYucmVhY2hCb3R0b207XG4gICAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICAgIHZhciBvZmZzZXRZID0gdG91Y2gucGFnZVkgLSBzdGFydFk7XG4gICAgICAgIHZhciBkaXIgPSBvZmZzZXRZID4gMCA/ICdkb3duJyA6ICd1cCc7XG4gICAgICAgIHRoaXMuX3RvdWNoUGFyYW1zLm9mZnNldFkgPSBvZmZzZXRZO1xuICAgICAgICBpZiAodGhpcy5fcmVmcmVzaCAmJiAoZGlyID09PSAnZG93bicpICYmIHJlYWNoVG9wKSB7XG4gICAgICAgICAgdGhpcy5fcmVmcmVzaC5wdWxsaW5nRG93bihvZmZzZXRZKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9sb2FkaW5nICYmIChkaXIgPT09ICd1cCcpICYmIHJlYWNoQm90dG9tKSB7XG4gICAgICAgICAgdGhpcy5fbG9hZGluZy5wdWxsaW5nVXAoLW9mZnNldFkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGhhbmRsZVRvdWNoRW5kOiBmdW5jdGlvbiBoYW5kbGVUb3VjaEVuZCAoZXZlbnQpIHtcbiAgICAgIGlmICghdGhpcy5fdG91Y2hQYXJhbXMgfHwgIXRoaXMuX3JlZnJlc2ggJiYgIXRoaXMuX2xvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyO1xuICAgICAgdmFyIHJlZiA9IHRoaXMuX3RvdWNoUGFyYW1zO1xuICAgICAgdmFyIHN0YXJ0WSA9IHJlZi5zdGFydFk7XG4gICAgICB2YXIgcmVhY2hUb3AgPSByZWYucmVhY2hUb3A7XG4gICAgICB2YXIgcmVhY2hCb3R0b20gPSByZWYucmVhY2hCb3R0b207XG4gICAgICBpZiAoaW5uZXIpIHtcbiAgICAgICAgdmFyIHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XG4gICAgICAgIHZhciBvZmZzZXRZID0gdG91Y2gucGFnZVkgLSBzdGFydFk7XG4gICAgICAgIHZhciBkaXIgPSBvZmZzZXRZID4gMCA/ICdkb3duJyA6ICd1cCc7XG4gICAgICAgIHRoaXMuX3RvdWNoUGFyYW1zLm9mZnNldFkgPSBvZmZzZXRZO1xuICAgICAgICBpZiAodGhpcy5fcmVmcmVzaCAmJiAoZGlyID09PSAnZG93bicpICYmIHJlYWNoVG9wKSB7XG4gICAgICAgICAgdGhpcy5fcmVmcmVzaC5wdWxsaW5nRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5fbG9hZGluZyAmJiAoZGlyID09PSAndXAnKSAmJiByZWFjaEJvdHRvbSkge1xuICAgICAgICAgIHRoaXMuX2xvYWRpbmcucHVsbGluZ0VuZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBkZWxldGUgdGhpcy5fdG91Y2hQYXJhbXM7XG4gICAgfVxuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIGxpc3RNaXhpbiA9IHtcbiAgbWV0aG9kczoge1xuICAgIGhhbmRsZUxpc3RTY3JvbGw6IGZ1bmN0aW9uIGhhbmRsZUxpc3RTY3JvbGwgKGV2ZW50KSB7XG4gICAgICB0aGlzLmhhbmRsZVNjcm9sbChldmVudCk7XG5cbiAgICAgIGlmICh3ZWV4LnV0aWxzLnN1cHBvcnRTdGlja3koKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuJGVsLnNjcm9sbFRvcDtcbiAgICAgIHZhciBoID0gdGhpcy4kY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uICh2bSkgeyByZXR1cm4gdm0uJHJlZnMuaGVhZGVyOyB9KTtcblxuICAgICAgaWYgKGgubGVuZ3RoIDw9IDApIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaFtpXS5pbml0VG9wIDwgc2Nyb2xsVG9wKSB7XG4gICAgICAgICAgaFtpXS5hZGRTdGlja3koKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBoW2ldLnJlbW92ZVN0aWNreSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5mdW5jdGlvbiBnZXRMaXN0ICh3ZWV4KSB7XG4gIHZhciBleHRyYWN0Q29tcG9uZW50U3R5bGUgPSB3ZWV4LmV4dHJhY3RDb21wb25lbnRTdHlsZTtcbiAgdmFyIGNyZWF0ZUV2ZW50TWFwID0gd2VleC5jcmVhdGVFdmVudE1hcDtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICd3ZWV4LWxpc3QnLFxuICAgIG1peGluczogW3Njcm9sbGFibGUkMSwgbGlzdE1peGluXSxcbiAgICBjb21wdXRlZDoge1xuICAgICAgd3JhcHBlckNsYXNzOiBmdW5jdGlvbiB3cmFwcGVyQ2xhc3MgKCkge1xuICAgICAgICB2YXIgY2xhc3NBcnJheSA9IFsnd2VleC1saXN0JywgJ3dlZXgtbGlzdC13cmFwcGVyJywgJ3dlZXgtY3QnXTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaCAmJiBjbGFzc0FycmF5LnB1c2goJ3dpdGgtcmVmcmVzaCcpO1xuICAgICAgICB0aGlzLl9sb2FkaW5nICYmIGNsYXNzQXJyYXkucHVzaCgnd2l0aC1sb2FkaW5nJyk7XG4gICAgICAgIHJldHVybiBjbGFzc0FycmF5LmpvaW4oJyAnKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICBjcmVhdGVDaGlsZHJlbjogZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKGgpIHtcbiAgICAgICAgdmFyIHNsb3RzID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICAgICAgdGhpcy5fY2VsbHMgPSBzbG90cy5maWx0ZXIoZnVuY3Rpb24gKHZub2RlKSB7XG4gICAgICAgICAgaWYgKCF2bm9kZS50YWcgfHwgIXZub2RlLmNvbXBvbmVudE9wdGlvbnMpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICBoKCdhcnRpY2xlJywge1xuICAgICAgICAgICAgcmVmOiAnaW5uZXInLFxuICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LWxpc3QtaW5uZXIgd2VleC1jdCdcbiAgICAgICAgICB9LCB0aGlzLl9jZWxscylcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIHRoaXMud2VleFR5cGUgPSAnbGlzdCc7XG5cbiAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcyQxLnVwZGF0ZUxheW91dCgpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdtYWluJywge1xuICAgICAgICByZWY6ICd3cmFwcGVyJyxcbiAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6ICdsaXN0JyB9LFxuICAgICAgICBzdGF0aWNDbGFzczogdGhpcy53cmFwcGVyQ2xhc3MsXG4gICAgICAgIG9uOiBjcmVhdGVFdmVudE1hcCh0aGlzLCB7XG4gICAgICAgICAgc2Nyb2xsOiB0aGlzLmhhbmRsZUxpc3RTY3JvbGwsXG4gICAgICAgICAgdG91Y2hzdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgICAgIHRvdWNobW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUsXG4gICAgICAgICAgdG91Y2hlbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmRcbiAgICAgICAgfSksXG4gICAgICAgIHN0YXRpY1N0eWxlOiBleHRyYWN0Q29tcG9uZW50U3R5bGUodGhpcylcbiAgICAgIH0sIHRoaXMuY3JlYXRlQ2hpbGRyZW4oY3JlYXRlRWxlbWVudCkpXG4gICAgfVxuICB9XG59XG5cbnZhciBsaXN0JCQxID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnbGlzdCcsIGdldExpc3Qod2VleCkpO1xuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsZXIgKHdlZXgpIHtcbiAgdmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICB2YXIgY3JlYXRlRXZlbnRNYXAgPSB3ZWV4LmNyZWF0ZUV2ZW50TWFwO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3dlZXgtc2Nyb2xsZXInLFxuICAgIG1peGluczogW3Njcm9sbGFibGUkMSwgbGlzdE1peGluXSxcbiAgICBwcm9wczoge1xuICAgICAgc2Nyb2xsRGlyZWN0aW9uOiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmddLFxuICAgICAgICBkZWZhdWx0OiAndmVydGljYWwnLFxuICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvciAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gWydob3Jpem9udGFsJywgJ3ZlcnRpY2FsJ10uaW5kZXhPZih2YWx1ZSkgIT09IC0xXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzY3JvbGxhYmxlOiB7XG4gICAgICAgIHR5cGU6IFtCb29sZWFuXSxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgfVxuICAgIH0sXG4gICAgY29tcHV0ZWQ6IHtcbiAgICAgIHdyYXBwZXJDbGFzczogZnVuY3Rpb24gd3JhcHBlckNsYXNzICgpIHtcbiAgICAgICAgdmFyIGNsYXNzQXJyYXkgPSBbJ3dlZXgtc2Nyb2xsZXInLCAnd2VleC1zY3JvbGxlci13cmFwcGVyJywgJ3dlZXgtY3QnXTtcbiAgICAgICAgaWYgKHRoaXMuc2Nyb2xsRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBjbGFzc0FycmF5LnB1c2goJ3dlZXgtc2Nyb2xsZXItaG9yaXpvbnRhbCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNsYXNzQXJyYXkucHVzaCgnd2VleC1zY3JvbGxlci12ZXJ0aWNhbCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5zY3JvbGxhYmxlKSB7XG4gICAgICAgICAgY2xhc3NBcnJheS5wdXNoKCd3ZWV4LXNjcm9sbGVyLWRpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsYXNzQXJyYXkuam9pbignICcpXG4gICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgIGNyZWF0ZUNoaWxkcmVuOiBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAoaCkge1xuICAgICAgICB2YXIgc2xvdHMgPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgICAgICB0aGlzLl9jZWxscyA9IHNsb3RzLmZpbHRlcihmdW5jdGlvbiAodm5vZGUpIHtcbiAgICAgICAgICBpZiAoIXZub2RlLnRhZyB8fCAhdm5vZGUuY29tcG9uZW50T3B0aW9ucykgeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgIGgoJ2FydGljbGUnLCB7XG4gICAgICAgICAgICByZWY6ICdpbm5lcicsXG4gICAgICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtc2Nyb2xsZXItaW5uZXIgd2VleC1jdCdcbiAgICAgICAgICB9LCB0aGlzLl9jZWxscylcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIHRoaXMud2VleFR5cGUgPSAnc2Nyb2xsZXInO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgLy8gaWYgKFwicHJvZHVjdGlvblwiID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAvLyAgIHZhbGlkYXRlU3R5bGVzKCdzY3JvbGxlcicsIHRoaXMuJHZub2RlLmRhdGEgJiYgdGhpcy4kdm5vZGUuZGF0YS5zdGF0aWNTdHlsZSlcbiAgICAgIC8vIH1cblxuICAgICAgdGhpcy5fY2VsbHMgPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzJDEudXBkYXRlTGF5b3V0KCk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ21haW4nLCB7XG4gICAgICAgIHJlZjogJ3dyYXBwZXInLFxuICAgICAgICBhdHRyczogeyAnd2VleC10eXBlJzogJ3Njcm9sbGVyJyB9LFxuICAgICAgICBvbjogY3JlYXRlRXZlbnRNYXAodGhpcywge1xuICAgICAgICAgIHNjcm9sbDogdGhpcy5oYW5kbGVTY3JvbGwsXG4gICAgICAgICAgdG91Y2hzdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgICAgIHRvdWNobW92ZTogdGhpcy5oYW5kbGVUb3VjaE1vdmUsXG4gICAgICAgICAgdG91Y2hlbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmRcbiAgICAgICAgfSksXG4gICAgICAgIHN0YXRpY0NsYXNzOiB0aGlzLndyYXBwZXJDbGFzcyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSwgdGhpcy5jcmVhdGVDaGlsZHJlbihjcmVhdGVFbGVtZW50KSlcbiAgICB9XG4gIH1cbn1cblxudmFyIHNjcm9sbGVyID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnc2Nyb2xsZXInLCBnZXRTY3JvbGxlcih3ZWV4KSk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IHdhdGVyZmFsbFxuICogTk9URTogb25seSBzdXBwb3J0IGZ1bGwgc2NyZWVuIHdpZHRoIHdhdGVyZmFsbC5cbiAqL1xuXG52YXIgTk9STUFMX0dBUF9TSVpFID0gMzI7XG52YXIgREVGQVVMVF9DT0xVTU5fQ09VTlQgPSAxO1xuXG5mdW5jdGlvbiBnZXRXYXRlcmZhbGwgKHdlZXgpIHtcbiAgdmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICB2YXIgY3JlYXRlRXZlbnRNYXAgPSB3ZWV4LmNyZWF0ZUV2ZW50TWFwO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3dlZXgtd2F0ZXJmYWxsJyxcbiAgICBtaXhpbnM6IFtzY3JvbGxhYmxlJDFdLFxuICAgIHByb3BzOiB7XG4gICAgICAvKipcbiAgICAgICAqIHNwZWNpZmllZCBnYXAgc2l6ZS5cbiAgICAgICAqIHZhbHVlIGNhbiBiZSBudW1iZXIgb3IgJ25vcm1hbCcuICdub3JtYWwnICgzMnB4KSBieSBkZWZhdWx0LlxuICAgICAgICovXG4gICAgICBjb2x1bW5HYXA6IHtcbiAgICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgICAgZGVmYXVsdDogJ25vcm1hbCcsXG4gICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yICh2YWwpIHtcbiAgICAgICAgICBpZiAoIXZhbCB8fCB2YWwgPT09ICdub3JtYWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YWwgPSBwYXJzZUludCh2YWwpO1xuICAgICAgICAgIHJldHVybiAhaXNOYU4odmFsKSAmJiB2YWwgPiAwXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIHRoZSBtYXhpbXVtIGNvbHVtbiBjb3VudHMuXG4gICAgICAgKiB2YWx1ZSBjYW4gYmUgbnVtYmVyIG9yICdhdXRvJy4gMSBieSBkZWZhdWx0LlxuICAgICAgICovXG4gICAgICBjb2x1bW5Db3VudDoge1xuICAgICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgICBkZWZhdWx0OiBERUZBVUxUX0NPTFVNTl9DT1VOVCxcbiAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IkMSAodmFsKSB7XG4gICAgICAgICAgdmFsID0gcGFyc2VJbnQodmFsKTtcbiAgICAgICAgICByZXR1cm4gIWlzTmFOKHZhbCkgJiYgdmFsID4gMFxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiB0aGUgbWltaW11bSBjb2x1bW4gd2lkdGguXG4gICAgICAgKiB2YWx1ZSBjYW4gYmUgbnVtYmVyIG9yICdhdXRvJy4gJ2F1dG8nIGJ5IGRlZmF1bHQuXG4gICAgICAgKi9cbiAgICAgIGNvbHVtbldpZHRoOiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICAgIGRlZmF1bHQ6ICdhdXRvJyxcbiAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiB2YWxpZGF0b3IkMiAodmFsKSB7XG4gICAgICAgICAgaWYgKCF2YWwgfHwgdmFsID09PSAnYXV0bycpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbCA9IHBhcnNlSW50KHZhbCk7XG4gICAgICAgICAgcmV0dXJuICFpc05hTih2YWwpICYmIHZhbCA+IDBcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICAgIHRoaXMuX25leHRUaWNrKCk7XG4gICAgfSxcblxuICAgIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgICAgdGhpcy4kbmV4dFRpY2sodGhpcy5fbmV4dFRpY2soKSk7XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgIF9jcmVhdGVDaGlsZHJlbjogZnVuY3Rpb24gX2NyZWF0ZUNoaWxkcmVuIChoLCByb290U3R5bGUpIHtcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHNsb3RzID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICAgICAgdGhpcy5faGVhZGVycyA9IFtdO1xuICAgICAgICB0aGlzLl9vdGhlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5fY2VsbHMgPSBzbG90cy5maWx0ZXIoZnVuY3Rpb24gKHZub2RlKSB7XG4gICAgICAgICAgaWYgKCF2bm9kZS50YWcgfHwgIXZub2RlLmNvbXBvbmVudE9wdGlvbnMpIHsgcmV0dXJuIGZhbHNlIH1cbiAgICAgICAgICB2YXIgdGFnID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucy50YWc7XG4gICAgICAgICAgaWYgKHRhZyA9PT0gJ3JlZnJlc2gnIHx8IHRhZyA9PT0gJ2xvYWRpbmcnKSB7XG4gICAgICAgICAgICB0aGlzJDFbKFwiX1wiICsgdGFnKV0gPSB2bm9kZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGFnID09PSAnaGVhZGVyJykge1xuICAgICAgICAgICAgdGhpcyQxLl9oZWFkZXJzLnB1c2godm5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0YWcgIT09ICdjZWxsJykge1xuICAgICAgICAgICAgdGhpcyQxLl9vdGhlcnMucHVzaCh2bm9kZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3JlQ2FsYyhyb290U3R5bGUpO1xuICAgICAgICB0aGlzLl9nZW5Db2x1bW5zKGgpO1xuICAgICAgICB2YXIgY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy5fcmVmcmVzaCAmJiBjaGlsZHJlbi5wdXNoKHRoaXMuX3JlZnJlc2gpO1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuXG4gICAgICAgICAgLmNvbmNhdCh0aGlzLl9oZWFkZXJzKVxuICAgICAgICAgIC5jb25jYXQodGhpcy5fb3RoZXJzKTtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChoKCdodG1sOmRpdicsIHtcbiAgICAgICAgICByZWY6ICdjb2x1bW5zJyxcbiAgICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtd2F0ZXJmYWxsLWlubmVyLWNvbHVtbnMgd2VleC1jdCdcbiAgICAgICAgfSwgdGhpcy5fY29sdW1ucykpO1xuICAgICAgICB0aGlzLl9sb2FkaW5nICYmIGNoaWxkcmVuLnB1c2godGhpcy5fbG9hZGluZyk7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgaCgnYXJ0aWNsZScsIHtcbiAgICAgICAgICAgIHJlZjogJ2lubmVyJyxcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC13YXRlcmZhbGwtaW5uZXIgd2VleC1jdCdcbiAgICAgICAgICB9LCBjaGlsZHJlbilcbiAgICAgICAgXVxuICAgICAgfSxcblxuICAgICAgX3JlQ2FsYzogZnVuY3Rpb24gX3JlQ2FsYyAocm9vdFN0eWxlKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOT1RFOiBjb2x1bW5HYXAgYW5kIGNvbHVtbldpZHRoIGNhbid0IGJvdGggYmUgYXV0by5cbiAgICAgICAgICogTk9URTogdGhlIGZvcm11bGE6XG4gICAgICAgICAqICB0b3RhbFdpZHRoID0gbiAqIHcgKyAobiAtIDEpICogZ2FwXG4gICAgICAgICAqIDEuIGlmIGNvbHVtbkNvdW50ID0gbiB0aGVuIGNhbGMgd1xuICAgICAgICAgKiAyLiBpZiBjb2x1bW5XaWR0aCA9IHcgdGhlbiBjYWxjIG5cbiAgICAgICAgICogMy4gaWYgY29sdW1uV2lkdGggPSB3IGFuZCBjb2x1bW5Db3VudCA9IG4gdGhlbiBjYWxjIHRvdGFsV2lkdGhcbiAgICAgICAgICogICAgMy4xIGlmIHRvdGFsV2lkdGggPCBjdFdpZHRoIHRoZW4gaW5jcmVhc2UgY29sdW1uV2lkdGhcbiAgICAgICAgICogICAgMy4yIGlmIHRvdGFsV2lkdGggPiBjdFdpZHRoIHRoZW4gZGVjcmVhc2UgY29sdW1uQ291bnRcbiAgICAgICAgICovXG4gICAgICAgIHZhciB3aWR0aCwgZ2FwLCBjbnQsIGN0V2lkdGg7XG4gICAgICAgIHZhciBzY2FsZSA9IHdlZXguY29uZmlnLmVudi5zY2FsZTtcbiAgICAgICAgdmFyIGVsID0gdGhpcy4kZWw7XG4gICAgICAgIGZ1bmN0aW9uIGdldEN0V2lkdGggKHdpZHRoLCBzdHlsZSkge1xuICAgICAgICAgIHZhciBwYWRkaW5nID0gc3R5bGUucGFkZGluZ1xuICAgICAgICAgICAgPyBwYXJzZUludChzdHlsZS5wYWRkaW5nKSAqIDJcbiAgICAgICAgICAgIDogcGFyc2VJbnQoc3R5bGUucGFkZGluZ0xlZnQgfHwgMCkgKyBwYXJzZUludChzdHlsZS5wYWRkaW5nUmlnaHQgfHwgMCk7XG4gICAgICAgICAgcmV0dXJuIHdpZHRoIC0gcGFkZGluZ1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbCAmJiBlbC5ub2RlVHlwZSA9PT0gMSkgeyAgLy8gYWxyZWFkeSBtb3VudGVkXG4gICAgICAgICAgdmFyIGNzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgICAgICAgICBjdFdpZHRoID0gZ2V0Q3RXaWR0aChlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCwgY3N0eWxlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHsgIC8vIG5vdCBtb3VudGVkLlxuICAgICAgICAgIC8vIG9ubHkgc3VwcG9ydCBmdWxsIHNjcmVlbiB3aWR0aCBmb3Igd2F0ZXJmYWxsIGNvbXBvbmVudC5cbiAgICAgICAgICBjdFdpZHRoID0gZ2V0Q3RXaWR0aChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsIHJvb3RTdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBnYXAgPSB0aGlzLmNvbHVtbkdhcDtcbiAgICAgICAgaWYgKGdhcCAmJiBnYXAgIT09ICdub3JtYWwnKSB7XG4gICAgICAgICAgZ2FwID0gcGFyc2VJbnQoZ2FwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBnYXAgPSBOT1JNQUxfR0FQX1NJWkU7XG4gICAgICAgIH1cbiAgICAgICAgZ2FwID0gZ2FwICogc2NhbGU7XG5cbiAgICAgICAgd2lkdGggPSB0aGlzLmNvbHVtbldpZHRoO1xuICAgICAgICBjbnQgPSB0aGlzLmNvbHVtbkNvdW50O1xuICAgICAgICBpZiAod2lkdGggJiYgd2lkdGggIT09ICdhdXRvJykge1xuICAgICAgICAgIHdpZHRoID0gcGFyc2VJbnQod2lkdGgpICogc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNudCAmJiBjbnQgIT09ICdhdXRvJykge1xuICAgICAgICAgIGNudCA9IHBhcnNlSW50KGNudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAwLiBpZiAhY29sdW1uQ291bnQgJiYgIWNvbHVtbldpZHRoXG4gICAgICAgIGlmIChjbnQgPT09ICdhdXRvJyAmJiB3aWR0aCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgLy8gMS4gaWYgY29sdW1uQ291bnQgPSBuIHRoZW4gY2FsYyB3LlxuICAgICAgICBlbHNlIGlmIChjbnQgIT09ICdhdXRvJyAmJiB3aWR0aCA9PT0gJ2F1dG8nKSB7XG4gICAgICAgICAgd2lkdGggPSAoY3RXaWR0aCAtIChjbnQgLSAxKSAqIGdhcCkgLyBjbnQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gMi4gaWYgY29sdW1uV2lkdGggPSB3IHRoZW4gY2FsYyBuLlxuICAgICAgICBlbHNlIGlmIChjbnQgPT09ICdhdXRvJyAmJiB3aWR0aCAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgY250ID0gKGN0V2lkdGggKyBnYXApIC8gKHdpZHRoICsgZ2FwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBpZiBjb2x1bW5XaWR0aCA9IHcgYW5kIGNvbHVtbkNvdW50ID0gbiB0aGVuIGNhbGMgdG90YWxXaWR0aFxuICAgICAgICBlbHNlIGlmIChjbnQgIT09ICdhdXRvJyAmJiB3aWR0aCAhPT0gJ2F1dG8nKSB7XG4gICAgICAgICAgdmFyIHRvdGFsV2lkdGg7XG4gICAgICAgICAgdmFyIGFkanVzdENvdW50QW5kV2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0b3RhbFdpZHRoID0gY250ICogd2lkdGggKyAoY250IC0gMSkgKiBnYXA7XG4gICAgICAgICAgICBpZiAodG90YWxXaWR0aCA8IGN0V2lkdGgpIHtcbiAgICAgICAgICAgICAgd2lkdGggKz0gKGN0V2lkdGggLSB0b3RhbFdpZHRoKSAvIGNudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRvdGFsV2lkdGggPiBjdFdpZHRoICYmIGNudCA+IDEpIHtcbiAgICAgICAgICAgICAgY250LS07XG4gICAgICAgICAgICAgIGFkanVzdENvdW50QW5kV2lkdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHRvdGFsV2lkdGggPiBjdFdpZHRoKSB7ICAvLyBjbnQgPT09IDFcbiAgICAgICAgICAgICAgd2lkdGggPSBjdFdpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgYWRqdXN0Q291bnRBbmRXaWR0aCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbHVtbkNvdW50ID0gY250O1xuICAgICAgICB0aGlzLl9jb2x1bW5XaWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLl9jb2x1bW5HYXAgPSBnYXA7XG4gICAgICB9LFxuXG4gICAgICBfZ2VuQ29sdW1uczogZnVuY3Rpb24gX2dlbkNvbHVtbnMgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy5fY29sdW1ucyA9IFtdO1xuICAgICAgICB2YXIgY2VsbHMgPSB0aGlzLl9jZWxscztcbiAgICAgICAgdmFyIGNvbHVtbkNudCA9IHRoaXMuX2NvbHVtbkNvdW50O1xuICAgICAgICB2YXIgbGVuID0gY2VsbHMubGVuZ3RoO1xuICAgICAgICB2YXIgY29sdW1uQ2VsbHMgPSB0aGlzLl9jb2x1bW5DZWxscyA9IEFycmF5KGNvbHVtbkNudCkuam9pbignLicpLnNwbGl0KCcuJykubWFwKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtdIH0pO1xuICAgICAgICAvLyBzcHJlYWQgY2VsbHMgdG8gdGhlIGNvbHVtbnMgdXNpbmcgc2ltcG9sZSBwb2xsaW5nIGFsZ29yaXRobS5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgIChjZWxsc1tpXS5kYXRhLmF0dHJzIHx8IChjZWxsc1tpXS5kYXRhLmF0dHJzID0ge30pKVsnZGF0YS1jZWxsJ10gPSBpO1xuICAgICAgICAgIGNvbHVtbkNlbGxzW2kgJSBjb2x1bW5DbnRdLnB1c2goY2VsbHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNvbHVtbkNudDsgaSQxKyspIHtcbiAgICAgICAgICB0aGlzJDEuX2NvbHVtbnMucHVzaChjcmVhdGVFbGVtZW50KCdodG1sOmRpdicsIHtcbiAgICAgICAgICAgIHJlZjogKFwiY29sdW1uXCIgKyBpJDEpLFxuICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgJ2RhdGEtY29sdW1uJzogaSQxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LWN0JyxcbiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7XG4gICAgICAgICAgICAgIHdpZHRoOiB0aGlzJDEuX2NvbHVtbldpZHRoICsgJ3B4JyxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdDogaSQxID09PSAwID8gMCA6IHRoaXMkMS5fY29sdW1uR2FwICsgJ3B4J1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGNvbHVtbkNlbGxzW2kkMV0pKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX25leHRUaWNrOiBmdW5jdGlvbiBfbmV4dFRpY2sgKCkge1xuICAgICAgICB0aGlzLl9yZUxheW91dENoaWxkcmVuKCk7XG4gICAgICB9LFxuXG4gICAgICBfcmVMYXlvdXRDaGlsZHJlbjogZnVuY3Rpb24gX3JlTGF5b3V0Q2hpbGRyZW4gKCkge1xuICAgICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgICAvKipcbiAgICAgICAgICogdHJlYXQgdGhlIHNob3J0ZXN0IGNvbHVtbiBib3R0b20gYXMgdGhlIG1hdGNoIHN0YW5kYXJkLlxuICAgICAgICAgKiB3aGljaGV2ZXIgY2VsbCBleGNlZWRlZCBpdCB3b3VsZCBiZSByZWFycmFuZ2VkLlxuICAgICAgICAgKiAxLiBtID0gc2hvcnRlc3QgY29sdW1uIGJvdHRvbS5cbiAgICAgICAgICogMi4gZ2V0IGFsbCBjZWxsIGlkcyB3aG8gaXMgYmVsb3cgbS5cbiAgICAgICAgICogMy4gY2FsY3VsYXRlIHdoaWNoIGNlbGwgc2hvdWxkIGJlIGluIHdoaWNoIGNvbHVtbi5cbiAgICAgICAgICovXG4gICAgICAgIHZhciBjb2x1bW5DbnQgPSB0aGlzLl9jb2x1bW5Db3VudDtcbiAgICAgICAgdmFyIGNvbHVtbkRvbXMgPSBbXTtcbiAgICAgICAgdmFyIGNvbHVtbkFwcGVuZEZyYWdtZW50cyA9IFtdO1xuICAgICAgICB2YXIgY29sdW1uQm90dG9tcyA9IFtdO1xuICAgICAgICB2YXIgbWluQm90dG9tID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI7XG4gICAgICAgIHZhciBtaW5Cb3R0b21Db2x1bW5JbmRleCA9IDA7XG5cbiAgICAgICAgLy8gMS4gZmluZCB0aGUgc2hvcnRlc3QgY29sdW1uIGJvdHRvbS5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2x1bW5DbnQ7IGkrKykge1xuICAgICAgICAgIHZhciBjb2x1bW5Eb20gPSB0aGlzJDEuX2NvbHVtbnNbaV0uZWxtO1xuICAgICAgICAgIHZhciBsYXN0Q2hpbGQgPSBjb2x1bW5Eb20ubGFzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICB2YXIgYm90dG9tID0gbGFzdENoaWxkID8gbGFzdENoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSA6IDA7XG4gICAgICAgICAgY29sdW1uRG9tcy5wdXNoKGNvbHVtbkRvbSk7XG4gICAgICAgICAgY29sdW1uQm90dG9tc1tpXSA9IGJvdHRvbTtcbiAgICAgICAgICBjb2x1bW5BcHBlbmRGcmFnbWVudHMucHVzaChkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkpO1xuICAgICAgICAgIGlmIChib3R0b20gPCBtaW5Cb3R0b20pIHtcbiAgICAgICAgICAgIG1pbkJvdHRvbSA9IGJvdHRvbTtcbiAgICAgICAgICAgIG1pbkJvdHRvbUNvbHVtbkluZGV4ID0gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyAyLiBnZXQgYWxsIGNlbGwgaWRzIHdobyBpcyBiZWxvdyBtLlxuICAgICAgICB2YXIgYmVsb3dDZWxsSWRzID0gW107XG4gICAgICAgIHZhciBiZWxvd0NlbGxzID0ge307XG4gICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNvbHVtbkNudDsgaSQxKyspIHtcbiAgICAgICAgICBpZiAoaSQxID09PSBtaW5Cb3R0b21Db2x1bW5JbmRleCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGNvbHVtbkRvbSQxID0gY29sdW1uRG9tc1tpJDFdO1xuICAgICAgICAgIHZhciBjZWxsc0luQ29sdW1uID0gY29sdW1uRG9tJDEucXVlcnlTZWxlY3RvckFsbCgnc2VjdGlvbi53ZWV4LWNlbGwnKTtcbiAgICAgICAgICB2YXIgbGVuID0gY2VsbHNJbkNvbHVtbi5sZW5ndGg7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IGxlbiAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICAgICAgICB2YXIgY2VsbERvbSA9IGNlbGxzSW5Db2x1bW5bal07XG4gICAgICAgICAgICB2YXIgY2VsbFJlY3QgPSBjZWxsRG9tLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgaWYgKGNlbGxSZWN0LnRvcCA+IG1pbkJvdHRvbSkge1xuICAgICAgICAgICAgICB2YXIgaWQgPSB+fmNlbGxEb20uZ2V0QXR0cmlidXRlKCdkYXRhLWNlbGwnKTtcbiAgICAgICAgICAgICAgYmVsb3dDZWxsSWRzLnB1c2goaWQpO1xuICAgICAgICAgICAgICBiZWxvd0NlbGxzW2lkXSA9IHsgZWxtOiBjZWxsRG9tLCBoZWlnaHQ6IGNlbGxSZWN0LmhlaWdodCB9O1xuICAgICAgICAgICAgICBjb2x1bW5Cb3R0b21zW2kkMV0gLT0gY2VsbFJlY3QuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIDMuIGNhbGN1bGF0ZSB3aGljaCBjZWxsIHNob3VsZCBiZSBpbiB3aGljaCBjb2x1bW4gYW5kIHJlYXJyYW5nZSB0aGVtXG4gICAgICAgIC8vICBpbiB0aGUgZG9tIHRyZWUuXG4gICAgICAgIGJlbG93Q2VsbElkcy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhID4gYiB9KTtcbiAgICAgICAgdmFyIGNlbGxJZHNMZW4gPSBiZWxvd0NlbGxJZHMubGVuZ3RoO1xuICAgICAgICBmdW5jdGlvbiBhZGRUb1Nob3J0ZXN0Q29sdW1uIChiZWxvd0NlbGwpIHtcbiAgICAgICAgICAvLyBmaW5kIHNob3J0ZXN0IGJvdHRvbS5cbiAgICAgICAgICBtaW5Cb3R0b20gPSBNYXRoLm1pbi5hcHBseShNYXRoLCBjb2x1bW5Cb3R0b21zKTtcbiAgICAgICAgICBtaW5Cb3R0b21Db2x1bW5JbmRleCA9IGNvbHVtbkJvdHRvbXMuaW5kZXhPZihtaW5Cb3R0b20pO1xuICAgICAgICAgIHZhciBjZWxsRWxtID0gYmVsb3dDZWxsLmVsbTtcbiAgICAgICAgICB2YXIgY2VsbEhlaWdodCA9IGJlbG93Q2VsbC5oZWlnaHQ7XG4gICAgICAgICAgY29sdW1uQXBwZW5kRnJhZ21lbnRzW21pbkJvdHRvbUNvbHVtbkluZGV4XS5hcHBlbmRDaGlsZChjZWxsRWxtKTtcbiAgICAgICAgICBjb2x1bW5Cb3R0b21zW21pbkJvdHRvbUNvbHVtbkluZGV4XSArPSBjZWxsSGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGkkMiA9IDA7IGkkMiA8IGNlbGxJZHNMZW47IGkkMisrKSB7XG4gICAgICAgICAgYWRkVG9TaG9ydGVzdENvbHVtbihiZWxvd0NlbGxzW2JlbG93Q2VsbElkc1tpJDJdXSk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSQzID0gMDsgaSQzIDwgY29sdW1uQ250OyBpJDMrKykge1xuICAgICAgICAgIGNvbHVtbkRvbXNbaSQzXS5hcHBlbmRDaGlsZChjb2x1bW5BcHBlbmRGcmFnbWVudHNbaSQzXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB0aGlzLndlZXhUeXBlID0gJ3dhdGVyZmFsbCc7XG4gICAgICB0aGlzLl9jZWxscyA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMkMS51cGRhdGVMYXlvdXQoKTtcbiAgICAgIH0pO1xuICAgICAgdmFyIG1lcmdlZFN0eWxlID0gZXh0cmFjdENvbXBvbmVudFN0eWxlKHRoaXMpO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ21haW4nLCB7XG4gICAgICAgIHJlZjogJ3dyYXBwZXInLFxuICAgICAgICBhdHRyczogeyAnd2VleC10eXBlJzogJ3dhdGVyZmFsbCcgfSxcbiAgICAgICAgb246IGNyZWF0ZUV2ZW50TWFwKHRoaXMsIHtcbiAgICAgICAgICBzY3JvbGw6IHRoaXMuaGFuZGxlU2Nyb2xsLFxuICAgICAgICAgIHRvdWNoc3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgICB0b3VjaG1vdmU6IHRoaXMuaGFuZGxlVG91Y2hNb3ZlLFxuICAgICAgICAgIHRvdWNoZW5kOiB0aGlzLmhhbmRsZVRvdWNoRW5kXG4gICAgICAgIH0pLFxuICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtd2F0ZXJmYWxsIHdlZXgtd2F0ZXJmYWxsLXdyYXBwZXIgd2VleC1jdCcsXG4gICAgICAgIHN0YXRpY1N0eWxlOiBtZXJnZWRTdHlsZVxuICAgICAgfSwgdGhpcy5fY3JlYXRlQ2hpbGRyZW4oY3JlYXRlRWxlbWVudCwgbWVyZ2VkU3R5bGUpKVxuICAgIH1cbiAgfVxufVxuXG52YXIgd2F0ZXJmYWxsID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnd2F0ZXJmYWxsJywgZ2V0V2F0ZXJmYWxsKHdlZXgpKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmZ1bmN0aW9uIGdldENlbGwgKHdlZXgpIHtcbiAgdmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICByZXR1cm4ge1xuICAgIG5hbWU6ICd3ZWV4LWNlbGwnLFxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnc2VjdGlvbicsIHtcbiAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6ICdjZWxsJyB9LFxuICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtY2VsbCB3ZWV4LWN0JyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSwgdGhpcy4kc2xvdHMuZGVmYXVsdClcbiAgICB9XG4gIH1cbn1cblxudmFyIGNlbGwgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdjZWxsJywgZ2V0Q2VsbCh3ZWV4KSk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRIZWFkZXIgKHdlZXgpIHtcbiAgdmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICB2YXIgcmVmID0gd2VleC51dGlscztcbiAgdmFyIHN1cHBvcnRTdGlja3kgPSByZWYuc3VwcG9ydFN0aWNreTtcblxuICByZXR1cm4ge1xuICAgIGRhdGE6IGZ1bmN0aW9uIGRhdGEgKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RpY2t5OiBmYWxzZSxcbiAgICAgICAgaW5pdFRvcDogMCxcbiAgICAgICAgcGxhY2Vob2xkZXI6IG51bGwsXG4gICAgICAgIHN1cHBvcnRTdGlja3k6IHN1cHBvcnRTdGlja3koKVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICAgIHRoaXMuaW5pdFRvcCA9IHRoaXMuJGVsLm9mZnNldFRvcDtcbiAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaGVhZGVyJyk7XG4gICAgfSxcblxuICAgIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgICAgaWYgKCF0aGlzLnN0aWNreSkge1xuICAgICAgICB0aGlzLmluaXRUb3AgPSB0aGlzLiRlbC5vZmZzZXRUb3A7XG4gICAgICB9XG4gICAgfSxcblxuICAgIG1ldGhvZHM6IHtcbiAgICAgIGFkZFN0aWNreTogZnVuY3Rpb24gYWRkU3RpY2t5ICgpIHtcbiAgICAgICAgdGhpcy5zdGlja3kgPSB0cnVlO1xuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyLnN0eWxlLndpZHRoID0gdGhpcy4kZWwub2Zmc2V0V2lkdGggKyAncHgnO1xuICAgICAgICB0aGlzLnBsYWNlaG9sZGVyLnN0eWxlLmhlaWdodCA9IHRoaXMuJGVsLm9mZnNldEhlaWdodCArICdweCc7XG4gICAgICAgIHRoaXMuJGVsLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMucGxhY2Vob2xkZXIsIHRoaXMuJGVsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZVN0aWNreTogZnVuY3Rpb24gcmVtb3ZlU3RpY2t5ICgpIHtcbiAgICAgICAgdGhpcy5zdGlja3kgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLiRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAvLyBpZiAoXCJwcm9kdWN0aW9uXCIgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIC8vICAgdmFsaWRhdGVTdHlsZXMoJ2hlYWRlcicsIHRoaXMuJHZub2RlLmRhdGEgJiYgdGhpcy4kdm5vZGUuZGF0YS5zdGF0aWNTdHlsZSlcbiAgICAgIC8vIH1cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdodG1sOmhlYWRlcicsIHtcbiAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6ICdoZWFkZXInIH0sXG4gICAgICAgIHJlZjogJ2hlYWRlcicsXG4gICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC1oZWFkZXIgd2VleC1jdCcsXG4gICAgICAgIGNsYXNzOiB7ICd3ZWV4LXN0aWNreSc6IHRoaXMuc3RpY2t5LCAnd2VleC1pb3Mtc3RpY2t5JzogdGhpcy5zdXBwb3J0U3RpY2t5IH0sXG4gICAgICAgIHN0YXRpY1N0eWxlOiBleHRyYWN0Q29tcG9uZW50U3R5bGUodGhpcylcbiAgICAgIH0sIHRoaXMuJHNsb3RzLmRlZmF1bHQpXG4gICAgfVxuICB9XG59XG5cbnZhciBoZWFkZXIgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdoZWFkZXInLCBnZXRIZWFkZXIod2VleCkpO1xuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gZ2V0TG9hZGluZyAoKSB7XG4gIHZhciBleHRyYWN0Q29tcG9uZW50U3R5bGUgPSB3ZWV4LmV4dHJhY3RDb21wb25lbnRTdHlsZTtcblxuICByZXR1cm4ge1xuICAgIG5hbWU6ICd3ZWV4LWxvYWRpbmcnLFxuICAgIHByb3BzOiB7XG4gICAgICBkaXNwbGF5OiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJ3Nob3cnLFxuICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvciAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gWydzaG93JywgJ2hpZGUnXS5pbmRleE9mKHZhbHVlKSAhPT0gLTFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZGF0YTogZnVuY3Rpb24gZGF0YSAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBoZWlnaHQ6IC0xLFxuICAgICAgICB2aWV3SGVpZ2h0OiAwXG4gICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICAgIHRoaXMudmlld0hlaWdodCA9IHRoaXMuJGVsLm9mZnNldEhlaWdodDtcbiAgICAgIGlmICh0aGlzLmRpc3BsYXkgPT09ICdoaWRlJykge1xuICAgICAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLnZpZXdIZWlnaHQ7XG4gICAgICB9XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgaGVpZ2h0OiBmdW5jdGlvbiBoZWlnaHQgKHZhbCkge1xuICAgICAgICB0aGlzLiRlbC5zdHlsZS5oZWlnaHQgPSB2YWwgKyBcInB4XCI7XG4gICAgICB9LFxuICAgICAgZGlzcGxheTogZnVuY3Rpb24gZGlzcGxheSAodmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT09ICdoaWRlJykge1xuICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMudmlld0hlaWdodDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgcHVsbGluZzogZnVuY3Rpb24gcHVsbGluZyAob2Zmc2V0WSkge1xuICAgICAgICBpZiAoIG9mZnNldFkgPT09IHZvaWQgMCApIG9mZnNldFkgPSAwO1xuXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gb2Zmc2V0WTtcbiAgICAgIH0sXG4gICAgICBwdWxsaW5nVXA6IGZ1bmN0aW9uIHB1bGxpbmdVcCAob2Zmc2V0WSkge1xuICAgICAgICB0aGlzLiRlbC5zdHlsZS50cmFuc2l0aW9uID0gXCJoZWlnaHQgMHNcIjtcbiAgICAgICAgdGhpcy5wdWxsaW5nKG9mZnNldFkpO1xuICAgICAgfSxcbiAgICAgIHB1bGxpbmdFbmQ6IGZ1bmN0aW9uIHB1bGxpbmdFbmQgKCkge1xuICAgICAgICB0aGlzLiRlbC5zdHlsZS50cmFuc2l0aW9uID0gXCJoZWlnaHQgLjJzXCI7XG4gICAgICAgIGlmICh0aGlzLmhlaWdodCA+PSB0aGlzLnZpZXdIZWlnaHQpIHtcbiAgICAgICAgICB0aGlzLnB1bGxpbmcodGhpcy52aWV3SGVpZ2h0KTtcbiAgICAgICAgICB0aGlzLiRlbWl0KCdsb2FkaW5nJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5wdWxsaW5nKDApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ2V0Q2hpbGRyZW46IGZ1bmN0aW9uIGdldENoaWxkcmVuICgpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheSA9PT0gJ3Nob3cnKSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkcmVuXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAodm5vZGUpIHtcbiAgICAgICAgICByZXR1cm4gdm5vZGUuY29tcG9uZW50T3B0aW9uc1xuICAgICAgICAgICAgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucy50YWcgIT09ICdsb2FkaW5nLWluZGljYXRvcidcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgICB0aGlzLiRwYXJlbnQuX2xvYWRpbmcgPSB0aGlzO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2FzaWRlJywge1xuICAgICAgICByZWY6ICdsb2FkaW5nJyxcbiAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6ICdsb2FkaW5nJyB9LFxuICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtbG9hZGluZyB3ZWV4LWN0JyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSwgdGhpcy5nZXRDaGlsZHJlbigpKVxuICAgIH1cbiAgfVxufVxuXG52YXIgbG9hZGluZyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAod2VleCkge1xuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ2xvYWRpbmcnLCBnZXRMb2FkaW5nKHdlZXgpKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbmZ1bmN0aW9uIGdldFJlZnJlc2ggKHdlZXgpIHtcbiAgdmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICB2YXIgcmVmID0gd2VleC51dGlscztcbiAgdmFyIGNyZWF0ZUV2ZW50ID0gcmVmLmNyZWF0ZUV2ZW50O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3dlZXgtcmVmcmVzaCcsXG4gICAgcHJvcHM6IHtcbiAgICAgIGRpc3BsYXk6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiAnc2hvdycsXG4gICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gdmFsaWRhdG9yICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBbJ3Nob3cnLCAnaGlkZSddLmluZGV4T2YodmFsdWUpICE9PSAtMVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxhc3REeTogMCxcbiAgICAgICAgdmlld0hlaWdodDogMCxcbiAgICAgICAgaGVpZ2h0OiAtMVxuICAgICAgfVxuICAgIH0sXG4gICAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgICB0aGlzLnZpZXdIZWlnaHQgPSB0aGlzLiRlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBpZiAodGhpcy5kaXNwbGF5ID09PSAnaGlkZScpIHtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSAwO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy52aWV3SGVpZ2h0O1xuICAgICAgfVxuICAgIH0sXG4gICAgd2F0Y2g6IHtcbiAgICAgIGhlaWdodDogZnVuY3Rpb24gaGVpZ2h0ICh2YWwpIHtcbiAgICAgICAgdGhpcy4kZWwuc3R5bGUuaGVpZ2h0ID0gdmFsICsgXCJweFwiO1xuICAgICAgfSxcbiAgICAgIGRpc3BsYXk6IGZ1bmN0aW9uIGRpc3BsYXkgKHZhbCkge1xuICAgICAgICBpZiAodmFsID09PSAnaGlkZScpIHtcbiAgICAgICAgICB0aGlzLmhlaWdodCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLnZpZXdIZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIHB1bGxpbmc6IGZ1bmN0aW9uIHB1bGxpbmcgKG9mZnNldFkpIHtcbiAgICAgICAgaWYgKCBvZmZzZXRZID09PSB2b2lkIDAgKSBvZmZzZXRZID0gMDtcblxuICAgICAgICB0aGlzLmhlaWdodCA9IG9mZnNldFk7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3B1bGxpbmdkb3duJywgY3JlYXRlRXZlbnQodGhpcywgJ3B1bGxpbmdkb3duJywge1xuICAgICAgICAgIGR5OiBvZmZzZXRZIC0gdGhpcy5sYXN0RHksXG4gICAgICAgICAgcHVsbGluZ0Rpc3RhbmNlOiBvZmZzZXRZLFxuICAgICAgICAgIHZpZXdIZWlnaHQ6IHRoaXMudmlld0hlaWdodFxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMubGFzdER5ID0gb2Zmc2V0WTtcbiAgICAgIH0sXG4gICAgICBwdWxsaW5nRG93bjogZnVuY3Rpb24gcHVsbGluZ0Rvd24gKG9mZnNldFkpIHtcbiAgICAgICAgdGhpcy4kZWwuc3R5bGUudHJhbnNpdGlvbiA9IFwiaGVpZ2h0IDBzXCI7XG4gICAgICAgIHRoaXMucHVsbGluZyhvZmZzZXRZKTtcbiAgICAgIH0sXG4gICAgICBwdWxsaW5nRW5kOiBmdW5jdGlvbiBwdWxsaW5nRW5kICgpIHtcbiAgICAgICAgdGhpcy4kZWwuc3R5bGUudHJhbnNpdGlvbiA9IFwiaGVpZ2h0IC4yc1wiO1xuICAgICAgICBpZiAodGhpcy5oZWlnaHQgPj0gdGhpcy52aWV3SGVpZ2h0KSB7XG4gICAgICAgICAgdGhpcy5wdWxsaW5nKHRoaXMudmlld0hlaWdodCk7XG4gICAgICAgICAgdGhpcy4kZW1pdCgncmVmcmVzaCcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMucHVsbGluZygwKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGdldENoaWxkcmVuOiBmdW5jdGlvbiBnZXRDaGlsZHJlbiAoKSB7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgICAgIGlmICh0aGlzLmRpc3BsYXkgPT09ICdzaG93Jykge1xuICAgICAgICAgIHJldHVybiBjaGlsZHJlblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGlsZHJlbi5maWx0ZXIoZnVuY3Rpb24gKHZub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHZub2RlLmNvbXBvbmVudE9wdGlvbnNcbiAgICAgICAgICAgICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnMudGFnICE9PSAnbG9hZGluZy1pbmRpY2F0b3InXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgdGhpcy4kcGFyZW50Ll9yZWZyZXNoID0gdGhpcztcbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdhc2lkZScsIHtcbiAgICAgICAgcmVmOiAncmVmcmVzaCcsXG4gICAgICAgIGF0dHJzOiB7ICd3ZWV4LXR5cGUnOiAncmVmcmVzaCcgfSxcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LXJlZnJlc2ggd2VleC1jdCcsXG4gICAgICAgIHN0YXRpY1N0eWxlOiBleHRyYWN0Q29tcG9uZW50U3R5bGUodGhpcylcbiAgICAgIH0sIHRoaXMuZ2V0Q2hpbGRyZW4oKSlcbiAgICB9XG4gIH1cbn1cblxudmFyIHJlZnJlc2ggPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdyZWZyZXNoJywgZ2V0UmVmcmVzaCh3ZWV4KSk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSQzO1xudmFyIGdldFJnYiQxO1xudmFyIGxvb3BBcnJheSQxO1xudmFyIGdldFN0eWxlU2hlZXRCeUlkJDE7XG5cbnZhciBfY3NzJDUgPSBcIlxcbi53ZWV4LXJlZnJlc2gtaW5kaWNhdG9yLFxcbi53ZWV4LWxvYWRpbmctaW5kaWNhdG9yIHtcXG4gIHdpZHRoOiAxcmVtICFpbXBvcnRhbnQ7XFxuICBoZWlnaHQ6IDFyZW0gIWltcG9ydGFudDtcXG4gIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAtbW96LWJveC1hbGlnbjogY2VudGVyO1xcbiAgLXdlYmtpdC1hbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAtbW96LWJveC1wYWNrOiBjZW50ZXI7XFxuICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gIGJhY2tncm91bmQ6IG5vbmU7XFxufVxcbi53ZWV4LXJlZnJlc2gtaW5kaWNhdG9yOmJlZm9yZSxcXG4ud2VleC1sb2FkaW5nLWluZGljYXRvcjpiZWZvcmUge1xcbiAgZGlzcGxheTogYmxvY2s7XFxuICBjb250ZW50OiAnJztcXG4gIGZvbnQtc2l6ZTogMC4xNnJlbTtcXG4gIHdpZHRoOiAwLjVlbTtcXG4gIGhlaWdodDogMC41ZW07XFxuICBsZWZ0OiAwO1xcbiAgdG9wOiAwO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdGV4dC1pbmRlbnQ6IC05OTk5ZW07XFxuICAtd2Via2l0LWFuaW1hdGlvbjogd2VleC1zcGlubmVyIDEuMXMgaW5maW5pdGUgZWFzZTtcXG4gIC1tb3otYW5pbWF0aW9uOiB3ZWV4LXNwaW5uZXIgMS4xcyBpbmZpbml0ZSBlYXNlO1xcbiAgYW5pbWF0aW9uOiB3ZWV4LXNwaW5uZXIgMS4xcyBpbmZpbml0ZSBlYXNlO1xcbn1cXG5cXG5ALXdlYmtpdC1rZXlmcmFtZXMgd2VleC1zcGlubmVyIHtcXG4gIDAlLFxcbiAgMTAwJSB7XFxuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSAjZmZmZmZmLCAwLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG4gIH1cXG4gIDExLjI1JSB7XFxuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIDAuOWVtIC0wLjllbSAwIDBlbSAjZmZmZmZmLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXG4gIH1cXG4gIDI1JSB7XFxuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIDAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIDEuMjVlbSAwZW0gMCAwZW0gI2ZmZmZmZiwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcXG4gIH1cXG4gIDM3LjUlIHtcXG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSAjZmZmZmZmLCAwZW0gMS4yNWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIDAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgfVxcbiAgNTAlIHtcXG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIDBlbSAxLjI1ZW0gMCAwZW0gI2ZmZmZmZiwgLTAuOWVtIDAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgfVxcbiAgNjEuMjUlIHtcXG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIDBlbSAxLjI1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAtMC45ZW0gMC45ZW0gMCAwZW0gI2ZmZmZmZiwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgfVxcbiAgNzUlIHtcXG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDBlbSAxLjI1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpLCAtMC45ZW0gMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAtMS4zZW0gMGVtIDAgMGVtICNmZmZmZmYsIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgfVxcbiAgODcuNSUge1xcbiAgICBib3gtc2hhZG93OiAwZW0gLTEuM2VtIDBlbSAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAtMC45ZW0gLTAuOWVtIDAgMGVtICNmZmZmZmY7XFxuICB9XFxufVxcblxcbkBrZXlmcmFtZXMgd2VleC1zcGlubmVyIHtcXG4gIDAlLFxcbiAgMTAwJSB7XFxuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSAjZmZmZmZmLCAwLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43KTtcXG4gIH1cXG4gIDExLjI1JSB7XFxuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIDAuOWVtIC0wLjllbSAwIDBlbSAjZmZmZmZmLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KTtcXG4gIH1cXG4gIDI1JSB7XFxuICAgIGJveC1zaGFkb3c6IDBlbSAtMS4zZW0gMGVtIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIDAuOWVtIC0wLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIDEuMjVlbSAwZW0gMCAwZW0gI2ZmZmZmZiwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAtMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcXG4gIH1cXG4gIDM3LjUlIHtcXG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSAjZmZmZmZmLCAwZW0gMS4yNWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTAuOWVtIDAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgfVxcbiAgNTAlIHtcXG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNyksIDBlbSAxLjI1ZW0gMCAwZW0gI2ZmZmZmZiwgLTAuOWVtIDAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgfVxcbiAgNjEuMjUlIHtcXG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIDBlbSAxLjI1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAtMC45ZW0gMC45ZW0gMCAwZW0gI2ZmZmZmZiwgLTEuM2VtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgfVxcbiAgNzUlIHtcXG4gICAgYm94LXNoYWRvdzogMGVtIC0xLjNlbSAwZW0gMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC45ZW0gLTAuOWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMS4yNWVtIDBlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDAuODc1ZW0gMC44NzVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIDBlbSAxLjI1ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjUpLCAtMC45ZW0gMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAtMS4zZW0gMGVtIDAgMGVtICNmZmZmZmYsIC0wLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgfVxcbiAgODcuNSUge1xcbiAgICBib3gtc2hhZG93OiAwZW0gLTEuM2VtIDBlbSAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAwLjllbSAtMC45ZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpLCAxLjI1ZW0gMGVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMC44NzVlbSAwLjg3NWVtIDAgMGVtIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKSwgMGVtIDEuMjVlbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiksIC0wLjllbSAwLjllbSAwIDBlbSByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNSksIC0xLjNlbSAwZW0gMCAwZW0gcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpLCAtMC45ZW0gLTAuOWVtIDAgMGVtICNmZmZmZmY7XFxuICB9XFxufVxcblwiO1xuXG5mdW5jdGlvbiBnZXRTdHlsZVNoZWV0IChzcGlubmVyVm0pIHtcbiAgaWYgKHNwaW5uZXJWbS5fc3R5bGVTaGVldCkge1xuICAgIHJldHVyblxuICB9XG4gIHNwaW5uZXJWbS5fc3R5bGVTaGVldCA9IGdldFN0eWxlU2hlZXRCeUlkJDEoJ3dlZXgtY21wLWxvYWRpbmctaW5kaWNhdG9yJyk7XG59XG5cbmZ1bmN0aW9uIHNldEtleWZyYW1lQ29sb3IgKHNwaW5uZXJWbSwgdmFsKSB7XG4gIGdldFN0eWxlU2hlZXQoc3Bpbm5lclZtKTtcbiAgdmFyIGtleWZyYW1lUnVsZXMgPSBjb21wdXRlS2V5RnJhbWVSdWxlcyh2YWwpO1xuICB2YXIgcnVsZXMgPSBzcGlubmVyVm0uX3N0eWxlU2hlZXQucnVsZXMgfHwgc3Bpbm5lclZtLl9zdHlsZVNoZWV0LmNzc1J1bGVzO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHJ1bGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBpdGVtID0gcnVsZXMuaXRlbShpKTtcbiAgICBpZiAoKGl0ZW0udHlwZSA9PT0gQ1NTUnVsZS5LRVlGUkFNRVNfUlVMRVxuICAgICAgICAgIHx8IGl0ZW0udHlwZSA9PT0gQ1NTUnVsZS5XRUJLSVRfS0VZRlJBTUVTX1JVTEUpXG4gICAgICAgICYmIGl0ZW0ubmFtZSA9PT0gJ3dlZXgtc3Bpbm5lcicpIHtcbiAgICAgIHZhciBjc3NSdWxlcyA9IGl0ZW0uY3NzUnVsZXM7XG4gICAgICBmb3IgKHZhciBqID0gMCwgbSA9IGNzc1J1bGVzLmxlbmd0aDsgaiA8IG07IGorKykge1xuICAgICAgICB2YXIga2V5ZnJhbWUgPSBjc3NSdWxlc1tqXTtcbiAgICAgICAgaWYgKGtleWZyYW1lLnR5cGUgPT09IENTU1J1bGUuS0VZRlJBTUVfUlVMRVxuICAgICAgICAgIHx8IGtleWZyYW1lLnR5cGUgPT09IENTU1J1bGUuV0VCS0lUX0tFWUZSQU1FX1JVTEUpIHtcbiAgICAgICAgICBrZXlmcmFtZS5zdHlsZS5ib3hTaGFkb3cgPSBrZXlmcmFtZVJ1bGVzW2pdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVLZXlGcmFtZVJ1bGVzIChyZ2IpIHtcbiAgaWYgKCFyZ2IpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2NhbGVBcnIgPSBbXG4gICAgJzBlbSAtMS4zZW0gMGVtIDBlbScsXG4gICAgJzAuOWVtIC0wLjllbSAwIDBlbScsXG4gICAgJzEuMjVlbSAwZW0gMCAwZW0nLFxuICAgICcwLjg3NWVtIDAuODc1ZW0gMCAwZW0nLFxuICAgICcwZW0gMS4yNWVtIDAgMGVtJyxcbiAgICAnLTAuOWVtIDAuOWVtIDAgMGVtJyxcbiAgICAnLTEuM2VtIDBlbSAwIDBlbScsXG4gICAgJy0wLjllbSAtMC45ZW0gMCAwZW0nXTtcbiAgdmFyIGNvbG9yQXJyID0gW1xuICAgICcxJyxcbiAgICAnMC4yJyxcbiAgICAnMC4yJyxcbiAgICAnMC4yJyxcbiAgICAnMC4yJyxcbiAgICAnMC4yJyxcbiAgICAnMC41JyxcbiAgICAnMC43J10ubWFwKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gJ3JnYmEoJyArIHJnYi5yICsgJywnICsgcmdiLmcgKyAnLCcgKyByZ2IuYiArICcsJyArIGUgKyAnKSdcbiAgICB9KTtcbiAgdmFyIHJ1bGVzID0gW107XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBpICkge1xuICAgIHZhciB0bXBDb2xvckFyciA9IGxvb3BBcnJheSQxKGNvbG9yQXJyLCBpLCAncicpO1xuICAgIHJ1bGVzLnB1c2goc2NhbGVBcnIubWFwKGZ1bmN0aW9uIChzY2FsZVN0ciwgaSkge1xuICAgICAgcmV0dXJuIHNjYWxlU3RyICsgJyAnICsgdG1wQ29sb3JBcnJbaV1cbiAgICB9KS5qb2luKCcsICcpKTtcbiAgfTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHNjYWxlQXJyLmxlbmd0aDsgaSsrKSBsb29wKCBpICk7XG4gIHJldHVybiBydWxlc1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzU3R5bGUkMSAodm0pIHtcbiAgdmFyIHN0eWxlID0gZXh0cmFjdENvbXBvbmVudFN0eWxlJDModm0pO1xuICB2YXIgY29sb3IgPSBzdHlsZS5jb2xvcjtcbiAgdmFyIHJnYiA9IGNvbG9yICYmIGdldFJnYiQxKGNvbG9yKTtcbiAgaWYgKHJnYikge1xuICAgIHNldEtleWZyYW1lQ29sb3Iodm0sIHJnYik7XG4gIH1cbiAgcmV0dXJuIHN0eWxlXG59XG5cbnZhciBsb2FkaW5nSW5kaWNhdG9yID0ge1xuICBuYW1lOiAnd2VleC1sb2FkaW5nLWluZGljYXRvcicsXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgdGhpcy53ZWV4VHlwZSA9ICdsb2FkaW5nLWluZGljYXRvcic7XG4gICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ21hcmsnLCB7XG4gICAgICBhdHRyczogeyAnd2VleC10eXBlJzogJ2xvYWRpbmctaW5kaWNhdG9yJyB9LFxuICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LWxvYWRpbmctaW5kaWNhdG9yIHdlZXgtY3QnLFxuICAgICAgc3RhdGljU3R5bGU6IHByb2Nlc3NTdHlsZSQxKHRoaXMpXG4gICAgfSlcbiAgfSxcbiAgX2NzczogX2NzcyQ1XG59O1xuXG52YXIgbG9hZGluZ0luZGljYXRvciQxID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgZXh0cmFjdENvbXBvbmVudFN0eWxlJDMgPSB3ZWV4LmV4dHJhY3RDb21wb25lbnRTdHlsZTtcbiAgICBnZXRSZ2IkMSA9IHdlZXgudXRpbHMuZ2V0UmdiO1xuICAgIGxvb3BBcnJheSQxID0gd2VleC51dGlscy5sb29wQXJyYXk7XG4gICAgZ2V0U3R5bGVTaGVldEJ5SWQkMSA9IHdlZXgudXRpbHMuZ2V0U3R5bGVTaGVldEJ5SWQ7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnbG9hZGluZy1pbmRpY2F0b3InLCBsb2FkaW5nSW5kaWNhdG9yKTtcbiAgfVxufTtcblxuX18kc3R5bGVJbmplY3QoXCIvKlxcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxcbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXFxuICogXFxcIkxpY2Vuc2VcXFwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcXG4gKlxcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXFxuICpcXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cXG4gKiBcXFwiQVMgSVNcXFwiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXFxuICogdW5kZXIgdGhlIExpY2Vuc2UuXFxuICovXFxuXFxuYm9keSA+IC53ZWV4LWxpc3QsXFxuYm9keSA+IC53ZWV4LXNjcm9sbGVyLFxcbmJvZHkgPiAud2VleC13YXRlcmZhbGwge1xcbiAgbWF4LWhlaWdodDogMTAwJTtcXG59XFxuXFxuLndlZXgtbGlzdC13cmFwcGVyLFxcbi53ZWV4LXNjcm9sbGVyLXdyYXBwZXIsXFxuLndlZXgtd2F0ZXJmYWxsLXdyYXBwZXIge1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbn1cXG5cXG4ud2VleC1saXN0LXdyYXBwZXIsXFxuLndlZXgtd2F0ZXJmYWxsLXdyYXBwZXIge1xcbiAgb3ZlcmZsb3cteTogc2Nyb2xsICFpbXBvcnRhbnQ7XFxuICBvdmVyZmxvdy14OiBoaWRkZW4gIWltcG9ydGFudDtcXG59XFxuXFxuLndlZXgtbGlzdC1pbm5lcixcXG4ud2VleC1zY3JvbGxlci1pbm5lcixcXG4ud2VleC13YXRlcmZhbGwtaW5uZXIge1xcbiAgLXdlYmtpdC1vdmVyZmxvdy1zY3JvbGxpbmc6IHRvdWNoO1xcbn1cXG5cXG4ud2VleC13YXRlcmZhbGwtaW5uZXItY29sdW1ucyB7XFxuICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAtbW96LWJveC1vcmllbnQ6IGhvcml6b250YWw7XFxuICAtbW96LWJveC1kaXJlY3Rpb246IG5vcm1hbDtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG59XFxuXFxuLndlZXgtc2Nyb2xsZXItd3JhcHBlci53ZWV4LXNjcm9sbGVyLXZlcnRpY2FsIHtcXG4gIG92ZXJmbG93LXg6IGhpZGRlbjtcXG4gIG92ZXJmbG93LXk6IHNjcm9sbDtcXG59XFxuXFxuLndlZXgtc2Nyb2xsZXItd3JhcHBlci53ZWV4LXNjcm9sbGVyLWhvcml6b250YWwge1xcbiAgb3ZlcmZsb3cteDogc2Nyb2xsO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbn1cXG5cXG4ud2VleC1zY3JvbGxlci13cmFwcGVyLndlZXgtc2Nyb2xsZXItZGlzYWJsZWQge1xcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xcbiAgb3ZlcmZsb3cteTogaGlkZGVuO1xcbn1cXG5cXG4ud2VleC1zY3JvbGxlci1ob3Jpem9udGFsIC53ZWV4LXNjcm9sbGVyLWlubmVyIHtcXG4gIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgLW1vei1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbiAgLW1vei1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbn1cXG5cXG4ud2VleC1jZWxsIHtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5cXG4ud2VleC1yZWZyZXNoLFxcbi53ZWV4LWxvYWRpbmcge1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXG4gIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC1tb3otYm94LWFsaWduOiBjZW50ZXI7XFxuICAtbXMtZmxleC1hbGlnbjogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gIC13ZWJraXQtanVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAtbW96LWJveC1wYWNrOiBjZW50ZXI7XFxuICAtbXMtZmxleC1wYWNrOiBjZW50ZXI7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuXCIsdW5kZWZpbmVkKTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBtb2R1bGVzID0gW1xuICBsaXN0JCQxLFxuICBzY3JvbGxlcixcbiAgd2F0ZXJmYWxsLFxuICBjZWxsLFxuICBoZWFkZXIsXG4gIGxvYWRpbmcsXG4gIHJlZnJlc2gsXG4gIGxvYWRpbmdJbmRpY2F0b3IkMVxuXTtcblxudmFyIHNjcm9sbGFibGUgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICBtb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZCkge1xuICAgICAgd2VleC5pbnN0YWxsKG1vZCk7XG4gICAgfSk7XG4gIH1cbn07XG5cbl9fJHN0eWxlSW5qZWN0KFwiLypcXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXFxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXFxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXFxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxcbiAqIFxcXCJMaWNlbnNlXFxcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XFxuICpcXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxcbiAqXFxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXFxuICogXFxcIkFTIElTXFxcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXFxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXFxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxcbiAqL1xcbiBcXG4ud2VleC1zbGlkZXItd3JhcHBlciB7XFxuICBvdmVyZmxvdy14OiBoaWRkZW47XFxuICBvdmVyZmxvdy15OiB2aXNpYmxlO1xcbn1cXG5cXG4ud2VleC1zbGlkZXItaW5uZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBvdmVyZmxvdzogdmlzaWJsZTtcXG4gIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIC1tb3otYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gIC1tb3otYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgLXdlYmtpdC1ib3gtb3JpZW50OiBob3Jpem9udGFsO1xcbn1cXG5cXG4ud2VleC1zbGlkZXItY2VsbCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMHB4O1xcbiAgbGVmdDogMHB4O1xcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgIWltcG9ydGFudDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgLXdlYmtpdC1hbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLW1vei1ib3gtYWxpZ246IGNlbnRlcjtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgLXdlYmtpdC1qdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIC1tb3otYm94LXBhY2s6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LXBhY2s6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbn1cXG5cXG4ubmVpZ2hib3ItY2VsbCB7XFxuICBvdmVyZmxvdzogdmlzaWJsZSAhaW1wb3J0YW50O1xcbn1cIix1bmRlZmluZWQpO1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBUUkFOU0lUSU9OX1RJTUUgPSA0MDA7XG52YXIgTkVJR0hCT1JfU0NBTEVfVElNRSA9IDEwMDtcbnZhciBNQUlOX1NMSURFX09QQUNJVFkgPSAxO1xudmFyIFRIUk9UVExFX1NDUk9MTF9USU1FID0gMjU7XG52YXIgSU5URVJWQUxfTUlOSU1VTSA9IDIwMDtcblxudmFyIHNsaWRlTWl4aW4gPSB7XG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuX2Nsb25lcyA9IFtdO1xuICAgIHRoaXMuaW5uZXJPZmZzZXQgPSAwO1xuICAgIHRoaXMuX2luZGljYXRvciA9IG51bGw7XG4gIH0sXG5cbiAgYmVmb3JlVXBkYXRlOiBmdW5jdGlvbiBiZWZvcmVVcGRhdGUgKCkge1xuICAgIHRoaXMuX2dldFdyYXBwZXJTaXplKCk7XG4gIH0sXG5cbiAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy4kY2hpbGRyZW47XG4gICAgdmFyIGxlbiA9IGNoaWxkcmVuICYmIGNoaWxkcmVuLmxlbmd0aDtcbiAgICBpZiAoY2hpbGRyZW4gJiYgbGVuID4gMCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICB2YXIgdm0gPSBjaGlsZHJlbltpXTtcbiAgICAgICAgaWYgKHZtLiRvcHRpb25zLl9jb21wb25lbnRUYWcgPT09ICdpbmRpY2F0b3InXG4gICAgICAgICAgfHwgdm0uJHZub2RlLmRhdGEucmVmID09PSAnaW5kaWNhdG9yJykge1xuICAgICAgICAgIHZtLl93YXRjaGVyLmdldCgpO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgd2VleC51dGlscy5maXJlTGF6eWxvYWQodGhpcy4kZWwsIHRydWUpO1xuICAgIGlmICh0aGlzLl9wcmVJbmRleCAhPT0gdGhpcy5jdXJyZW50SW5kZXgpIHtcbiAgICAgIHRoaXMuX3NsaWRlVG8odGhpcy5jdXJyZW50SW5kZXgpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB0aGlzLl9nZXRXcmFwcGVyU2l6ZSgpO1xuICAgIHRoaXMuX3NsaWRlVG8odGhpcy5jdXJyZW50SW5kZXgpO1xuICAgIHdlZXgudXRpbHMuZmlyZUxhenlsb2FkKHRoaXMuJGVsLCB0cnVlKTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgX2dldFdyYXBwZXJTaXplOiBmdW5jdGlvbiBfZ2V0V3JhcHBlclNpemUgKCkge1xuICAgICAgdmFyIHdyYXBwZXIgPSB0aGlzLiRyZWZzLndyYXBwZXI7XG4gICAgICBpZiAod3JhcHBlcikge1xuICAgICAgICB2YXIgcmVjdCA9IHdyYXBwZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHRoaXMuX3dyYXBwZXJXaWR0aCA9IHJlY3Qud2lkdGg7XG4gICAgICAgIHRoaXMuX3dyYXBwZXJIZWlnaHQgPSByZWN0LmhlaWdodDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2Zvcm1hdENoaWxkcmVuOiBmdW5jdGlvbiBfZm9ybWF0Q2hpbGRyZW4gKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgICAgdmFyIGluZGljYXRvclZub2RlO1xuICAgICAgdmFyIGNlbGxzID0gY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uICh2bm9kZSkge1xuICAgICAgICBpZiAoIXZub2RlLnRhZykgeyByZXR1cm4gZmFsc2UgfVxuICAgICAgICBpZiAodm5vZGUuY29tcG9uZW50T3B0aW9ucyAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zLnRhZyA9PT0gJ2luZGljYXRvcicpIHtcbiAgICAgICAgICBpbmRpY2F0b3JWbm9kZSA9IHZub2RlO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9KS5tYXAoZnVuY3Rpb24gKHZub2RlKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdsaScsIHtcbiAgICAgICAgICByZWY6ICdjZWxscycsXG4gICAgICAgICAgc3RhdGljQ2xhc3M6IChcIndlZXgtc2xpZGVyLWNlbGwgd2VleC1jdFwiICsgKHRoaXMkMS5pc05laWdoYm9yID8gJyBuZWlnaGJvci1jZWxsJyA6ICcnKSlcbiAgICAgICAgfSwgW3Zub2RlXSlcbiAgICAgIH0pO1xuICAgICAgaWYgKGluZGljYXRvclZub2RlKSB7XG4gICAgICAgIGluZGljYXRvclZub2RlLmRhdGEuYXR0cnMgPSBpbmRpY2F0b3JWbm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAgICAgICBpbmRpY2F0b3JWbm9kZS5kYXRhLmF0dHJzLmNvdW50ID0gY2VsbHMubGVuZ3RoO1xuICAgICAgICBpbmRpY2F0b3JWbm9kZS5kYXRhLmF0dHJzLmFjdGl2ZSA9IHRoaXMuY3VycmVudEluZGV4O1xuICAgICAgICB0aGlzLl9pbmRpY2F0b3IgPSBpbmRpY2F0b3JWbm9kZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjZWxsc1xuICAgIH0sXG5cbiAgICBfcmVuZGVyU2xpZGVzOiBmdW5jdGlvbiBfcmVuZGVyU2xpZGVzIChjcmVhdGVFbGVtZW50KSB7XG4gICAgICB0aGlzLl9jZWxscyA9IHRoaXMuX2Zvcm1hdENoaWxkcmVuKGNyZWF0ZUVsZW1lbnQpO1xuICAgICAgdGhpcy5mcmFtZUNvdW50ID0gdGhpcy5fY2VsbHMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICduYXYnLFxuICAgICAgICB7XG4gICAgICAgICAgcmVmOiAnd3JhcHBlcicsXG4gICAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6IHRoaXMuaXNOZWlnaGJvciA/ICdzbGlkZXItbmVpZ2hib3InIDogJ3NsaWRlcicgfSxcbiAgICAgICAgICBvbjogd2VleC5jcmVhdGVFdmVudE1hcChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBbJ3Njcm9sbCcsICdzY3JvbGxzdGFydCcsICdzY3JvbGxlbmQnXSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdG91Y2hzdGFydDogdGhpcy5faGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgICAgICAgdG91Y2htb3ZlOiB3ZWV4LnV0aWxzLnRocm90dGxlKHdlZXgudXRpbHMuYmluZCh0aGlzLl9oYW5kbGVUb3VjaE1vdmUsIHRoaXMpLCAyNSksXG4gICAgICAgICAgICAgIHRvdWNoZW5kOiB0aGlzLl9oYW5kbGVUb3VjaEVuZCxcbiAgICAgICAgICAgICAgdG91Y2hjYW5jZWw6IHRoaXMuX2hhbmRsZVRvdWNoQ2FuY2VsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgKSxcbiAgICAgICAgICBzdGF0aWNDbGFzczogJ3dlZXgtc2xpZGVyIHdlZXgtc2xpZGVyLXdyYXBwZXIgd2VleC1jdCcsXG4gICAgICAgICAgc3RhdGljU3R5bGU6IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlKHRoaXMpXG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBjcmVhdGVFbGVtZW50KCd1bCcsIHtcbiAgICAgICAgICAgIHJlZjogJ2lubmVyJyxcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC1zbGlkZXItaW5uZXIgd2VleC1jdCdcbiAgICAgICAgICB9LCB0aGlzLl9jZWxscyksXG4gICAgICAgICAgdGhpcy5faW5kaWNhdG9yXG4gICAgICAgIF1cbiAgICAgIClcbiAgICB9LFxuXG4gICAgLy8gZ2V0IHN0YW5kYXJkIGluZGV4XG4gICAgX25vcm1hbGl6ZUluZGV4OiBmdW5jdGlvbiBfbm9ybWFsaXplSW5kZXggKGluZGV4KSB7XG4gICAgICB2YXIgbmV3SW5kZXggPSAoaW5kZXggKyB0aGlzLmZyYW1lQ291bnQpICUgdGhpcy5mcmFtZUNvdW50O1xuICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG5ld0luZGV4LCAwKSwgdGhpcy5mcmFtZUNvdW50IC0gMSlcbiAgICB9LFxuXG4gICAgX3N0YXJ0QXV0b1BsYXk6IGZ1bmN0aW9uIF9zdGFydEF1dG9QbGF5ICgpIHtcbiAgICAgIGlmICghdGhpcy5hdXRvUGxheSB8fCB0aGlzLmF1dG9QbGF5ID09PSAnZmFsc2UnKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuX2F1dG9QbGF5VGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2F1dG9QbGF5VGltZXIpO1xuICAgICAgICB0aGlzLl9hdXRvUGxheVRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHZhciBpbnRlcnZhbCA9IHBhcnNlSW50KHRoaXMuaW50ZXJ2YWwgLSBUUkFOU0lUSU9OX1RJTUUgLSBORUlHSEJPUl9TQ0FMRV9USU1FKTtcbiAgICAgIGludGVydmFsID0gaW50ZXJ2YWwgPiBJTlRFUlZBTF9NSU5JTVVNID8gaW50ZXJ2YWwgOiBJTlRFUlZBTF9NSU5JTVVNO1xuICAgICAgdGhpcy5fYXV0b1BsYXlUaW1lciA9IHNldFRpbWVvdXQod2VleC51dGlscy5iaW5kKHRoaXMuX25leHQsIHRoaXMpLCBpbnRlcnZhbCk7XG4gICAgfSxcblxuICAgIF9zdG9wQXV0b1BsYXk6IGZ1bmN0aW9uIF9zdG9wQXV0b1BsYXkgKCkge1xuICAgICAgaWYgKHRoaXMuX2F1dG9QbGF5VGltZXIpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2F1dG9QbGF5VGltZXIpO1xuICAgICAgICB0aGlzLl9hdXRvUGxheVRpbWVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX3NsaWRlVG86IGZ1bmN0aW9uIF9zbGlkZVRvIChpbmRleCwgaXNUb3VjaFNjcm9sbCkge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmZyYW1lQ291bnQgPD0gMCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmICghdGhpcy5pbmZpbml0ZSB8fCB0aGlzLmluZmluaXRlID09PSAnZmFsc2UnKSB7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEgfHwgaW5kZXggPiAodGhpcy5mcmFtZUNvdW50IC0gMSkpIHtcbiAgICAgICAgICB0aGlzLl9zbGlkZVRvKHRoaXMuY3VycmVudEluZGV4KTtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX3ByZUluZGV4ICYmIHRoaXMuX3ByZUluZGV4ICE9PSAwKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG93Tm9kZXMgJiYgdGhpcy5fc2hvd05vZGVzWzBdKSB7XG4gICAgICAgICAgdGhpcy5fcHJlSW5kZXggPSB0aGlzLl9zaG93Tm9kZXNbMF0uaW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5fcHJlSW5kZXggPSB0aGlzLmN1cnJlbnRJbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fc2xpZGluZykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHRoaXMuX3NsaWRpbmcgPSB0cnVlO1xuXG4gICAgICB2YXIgbmV3SW5kZXggPSB0aGlzLl9ub3JtYWxpemVJbmRleChpbmRleCk7XG4gICAgICB2YXIgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyO1xuICAgICAgdmFyIHN0ZXAgPSB0aGlzLl9zdGVwID0gdGhpcy5mcmFtZUNvdW50IDw9IDEgPyAwIDogdGhpcy5fcHJlSW5kZXggLSBpbmRleDtcblxuICAgICAgaWYgKGlubmVyKSB7XG4gICAgICAgIHRoaXMuX3ByZXBhcmVOb2RlcygpO1xuICAgICAgICB2YXIgdHJhbnNsYXRlID0gd2VleC51dGlscy5nZXRUcmFuc2Zvcm1PYmooaW5uZXIpLnRyYW5zbGF0ZTtcbiAgICAgICAgdmFyIG1hdGNoID0gdHJhbnNsYXRlICYmIHRyYW5zbGF0ZS5tYXRjaCgvdHJhbnNsYXRlW14oXStcXCgoWystXFxkLl0rKS8pO1xuICAgICAgICB2YXIgaW5uZXJYID0gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgMDtcbiAgICAgICAgdmFyIGRpc3QgPSBpbm5lclggLSB0aGlzLmlubmVyT2Zmc2V0O1xuICAgICAgICB0aGlzLmlubmVyT2Zmc2V0ICs9IHN0ZXAgKiB0aGlzLl93cmFwcGVyV2lkdGg7XG4gICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgd2hvbGUgc2xpZGVzIGdyb3VwLlxuICAgICAgICBpbm5lci5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gXCItd2Via2l0LXRyYW5zZm9ybSBcIiArIChUUkFOU0lUSU9OX1RJTUUgLyAxMDAwKSArIFwicyBlYXNlLWluLW91dFwiO1xuICAgICAgICBpbm5lci5zdHlsZS5tb3pUcmFuc2l0aW9uID0gXCJ0cmFuc2Zvcm0gXCIgKyAoVFJBTlNJVElPTl9USU1FIC8gMTAwMCkgKyBcInMgZWFzZS1pbi1vdXRcIjtcbiAgICAgICAgaW5uZXIuc3R5bGUudHJhbnNpdGlvbiA9IFwidHJhbnNmb3JtIFwiICsgKFRSQU5TSVRJT05fVElNRSAvIDEwMDApICsgXCJzIGVhc2UtaW4tb3V0XCI7XG4gICAgICAgIGlubmVyLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyAodGhpcy5pbm5lck9mZnNldCkgKyBcInB4LCAwLCAwKVwiO1xuICAgICAgICBpbm5lci5zdHlsZS5tb3pUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiICsgKHRoaXMuaW5uZXJPZmZzZXQpICsgXCJweCwgMCwgMClcIjtcbiAgICAgICAgaW5uZXIuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZChcIiArICh0aGlzLmlubmVyT2Zmc2V0KSArIFwicHgsIDAsIDApXCI7XG5cbiAgICAgICAgLy8gZW1pdCBzY3JvbGwgZXZlbnRzLlxuICAgICAgICBpZiAoIWlzVG91Y2hTY3JvbGwpIHtcbiAgICAgICAgICB0aGlzLl9lbWl0U2Nyb2xsRXZlbnQoJ3Njcm9sbHN0YXJ0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcyQxLl90aHJvdHRsZUVtaXRTY3JvbGwoZGlzdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcyQxLl9lbWl0U2Nyb2xsRXZlbnQoJ3Njcm9sbGVuZCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBUSFJPVFRMRV9TQ1JPTExfVElNRSk7XG5cbiAgICAgICAgdGhpcy5fbG9vcFNob3dOb2RlcyhzdGVwKTtcblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAodGhpcyQxLmlzTmVpZ2hib3IpIHtcbiAgICAgICAgICAgIHRoaXMkMS5fc2V0TmVpZ2hib3JzKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpbm5lci5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gJyc7XG4gICAgICAgICAgICBpbm5lci5zdHlsZS5tb3pUcmFuc2l0aW9uID0gJyc7XG4gICAgICAgICAgICBpbm5lci5zdHlsZS50cmFuc2l0aW9uID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gdGhpcyQxLl9zaG93U3RhcnRJZHg7IGkgPD0gdGhpcyQxLl9zaG93RW5kSWR4OyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzJDEuX3Nob3dOb2Rlc1tpXTtcbiAgICAgICAgICAgICAgaWYgKCFub2RlKSB7IGNvbnRpbnVlIH1cbiAgICAgICAgICAgICAgdmFyIGVsbSA9IG5vZGUuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgICAgICAgIGVsbS5zdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gJyc7XG4gICAgICAgICAgICAgIGVsbS5zdHlsZS5tb3pUcmFuc2l0aW9uID0gJyc7XG4gICAgICAgICAgICAgIGVsbS5zdHlsZS50cmFuc2l0aW9uID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjbGVhbiBjbG9uZWQgbm9kZXMgYW5kIHJlYXJyYW5nZSBzbGlkZSBjZWxscy5cbiAgICAgICAgICAgIHRoaXMkMS5fcmVhcnJhbmdlTm9kZXMobmV3SW5kZXgpO1xuICAgICAgICAgIH0sIE5FSUdIQk9SX1NDQUxFX1RJTUUpO1xuICAgICAgICB9LCBUUkFOU0lUSU9OX1RJTUUpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3SW5kZXggIT09IHRoaXMuX3ByZUluZGV4KSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHdlZXgudXRpbHMuY3JlYXRlRXZlbnQodGhpcy4kZWwsICdjaGFuZ2UnLCB7XG4gICAgICAgICAgaW5kZXg6IG5ld0luZGV4XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgX2NsZWFyTm9kZXNPZmZzZXQ6IGZ1bmN0aW9uIF9jbGVhck5vZGVzT2Zmc2V0ICgpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB2YXIgZW5kID0gdGhpcy5fc2hvd0VuZElkeDtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9zaG93U3RhcnRJZHg7IGkgPD0gZW5kOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzJDEuX3Nob3dOb2Rlc1tpXTtcbiAgICAgICAgbm9kZSA9IG5vZGUgJiYgbm9kZS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgaWYgKCFub2RlKSB7IGNvbnRpbnVlIH1cbiAgICAgICAgd2VleC51dGlscy5hZGRUcmFuc2Zvcm0odGhpcyQxLl9zaG93Tm9kZXNbaV0uZmlyc3RFbGVtZW50Q2hpbGQsIHtcbiAgICAgICAgICB0cmFuc2xhdGU6ICd0cmFuc2xhdGUzZCgwcHgsIDBweCwgMHB4KSdcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIF9sb29wU2hvd05vZGVzOiBmdW5jdGlvbiBfbG9vcFNob3dOb2RlcyAoc3RlcCkge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIGlmICghc3RlcCB8fCB0aGlzLmZyYW1lQ291bnQgPD0gMSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBzaWduID0gc3RlcCA+IDAgPyAxIDogLTE7XG4gICAgICB2YXIgaSA9IHN0ZXAgPD0gMCA/IHRoaXMuX3Nob3dTdGFydElkeCA6IHRoaXMuX3Nob3dFbmRJZHg7XG4gICAgICB2YXIgZW5kID0gc3RlcCA8PSAwID8gdGhpcy5fc2hvd0VuZElkeCA6IHRoaXMuX3Nob3dTdGFydElkeDtcbiAgICAgIGZvciAoOyBpICE9PSBlbmQgLSBzaWduOyBpIC09IHNpZ24pIHtcbiAgICAgICAgdmFyIG5leHRJZHggPSBpICsgc3RlcDtcbiAgICAgICAgdGhpcyQxLl9zaG93Tm9kZXNbbmV4dElkeF0gPSB0aGlzJDEuX3Nob3dOb2Rlc1tpXTtcbiAgICAgICAgdGhpcyQxLl9zaG93Tm9kZXNbbmV4dElkeF0uX3Nob3dJbmRleCA9IG5leHRJZHg7XG4gICAgICAgIGRlbGV0ZSB0aGlzJDEuX3Nob3dOb2Rlc1tpXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuX3Nob3dTdGFydElkeCArPSBzdGVwO1xuICAgICAgdGhpcy5fc2hvd0VuZElkeCArPSBzdGVwO1xuICAgIH0sXG5cbiAgICBfcHJlcGFyZU5vZGVzOiBmdW5jdGlvbiBfcHJlcGFyZU5vZGVzICgpIHtcbiAgICAgIC8vIHRlc3QgaWYgdGhlIG5leHQgc2xpZGUgdG93YXJkcyB0aGUgZGlyZWN0aW9uIGV4aXN0cy5cbiAgICAgIC8vIGUuZy4gY3VycmVudEluZGV4IDAgLT4gMTogc2hvdWxkIHByZXBhcmUgNCBzbGlkZXM6IC0xLCAwLCAxLCAyXG4gICAgICAvLyBpZiBub3QsIHRyYW5zbGF0ZSBhIG5vZGUgdG8gaGVyZSwgb3IganVzdCBjbG9uZSBpdC5cbiAgICAgIHZhciBzdGVwID0gdGhpcy5fc3RlcDtcbiAgICAgIGlmICghdGhpcy5faW5pdGVkKSB7XG4gICAgICAgIHRoaXMuX2luaXROb2RlcygpO1xuICAgICAgICB0aGlzLl9pbml0ZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zaG93Tm9kZXMgPSB7fTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmZyYW1lQ291bnQgPD0gMSkge1xuICAgICAgICB0aGlzLl9zaG93U3RhcnRJZHggPSB0aGlzLl9zaG93RW5kSWR4ID0gMDtcbiAgICAgICAgdmFyIG5vZGUgPSB0aGlzLl9jZWxsc1swXS5lbG07XG4gICAgICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICAgIG5vZGUuc3R5bGUuekluZGV4ID0gOTk7XG4gICAgICAgIG5vZGUuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLl9zaG93Tm9kZXNbMF0gPSBub2RlO1xuICAgICAgICBub2RlLl9pblNob3cgPSB0cnVlO1xuICAgICAgICBub2RlLl9zaG93SW5kZXggPSAwO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciBzaG93Q291bnQgPSB0aGlzLl9zaG93Q291bnQgPSBNYXRoLmFicyhzdGVwKSArIDM7XG4gICAgICB0aGlzLl9zaG93U3RhcnRJZHggPSBzdGVwIDw9IDAgPyAtMSA6IDIgLSBzaG93Q291bnQ7XG4gICAgICB0aGlzLl9zaG93RW5kSWR4ID0gc3RlcCA8PSAwID8gc2hvd0NvdW50IC0gMiA6IDE7XG4gICAgICB0aGlzLl9jbGVhck5vZGVzT2Zmc2V0KCk7XG4gICAgICB0aGlzLl9wb3NpdGlvbk5vZGVzKHRoaXMuX3Nob3dTdGFydElkeCwgdGhpcy5fc2hvd0VuZElkeCwgc3RlcCk7XG4gICAgfSxcblxuICAgIF9pbml0Tm9kZXM6IGZ1bmN0aW9uIF9pbml0Tm9kZXMgKCkge1xuICAgICAgdmFyIHRvdGFsID0gdGhpcy5mcmFtZUNvdW50O1xuICAgICAgdmFyIGNlbGxzID0gdGhpcy5fY2VsbHM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjZWxsc1tpXS5lbG07XG4gICAgICAgIG5vZGUuaW5kZXggPSBpO1xuICAgICAgICBub2RlLl9pblNob3cgPSBmYWxzZTtcbiAgICAgICAgbm9kZS5zdHlsZS56SW5kZXggPSAwO1xuICAgICAgICBub2RlLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfcG9zaXRpb25Ob2RlczogZnVuY3Rpb24gX3Bvc2l0aW9uTm9kZXMgKGJlZ2luLCBlbmQsIHN0ZXAsIGFuaW0pIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB2YXIgY2VsbHMgPSB0aGlzLl9jZWxscztcbiAgICAgIHZhciBzdGFydCA9IHN0ZXAgPD0gMCA/IGJlZ2luIDogZW5kO1xuICAgICAgdmFyIHN0b3AgPSBzdGVwIDw9IDAgPyBlbmQgOiBiZWdpbjtcbiAgICAgIHZhciBzaWduID0gc3RlcCA8PSAwID8gLTEgOiAxO1xuICAgICAgdmFyIGNlbGxJbmRleCA9IHRoaXMuX3ByZUluZGV4ICsgc2lnbjtcbiAgICAgIGZvciAodmFyIGkgPSBzdGFydDsgaSAhPT0gc3RvcCAtIHNpZ247IGkgPSBpIC0gc2lnbikge1xuICAgICAgICB2YXIgbm9kZSA9IGNlbGxzW3RoaXMkMS5fbm9ybWFsaXplSW5kZXgoY2VsbEluZGV4KV0uZWxtO1xuICAgICAgICBjZWxsSW5kZXggPSBjZWxsSW5kZXggLSBzaWduO1xuICAgICAgICB0aGlzJDEuX3Bvc2l0aW9uTm9kZShub2RlLCBpKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaW5kZXg6IHBvc2l0aW9uIGluZGV4IGluIHRoZSBzaG93aW5nIGNlbGxzJyB2aWV3LlxuICAgICAqL1xuICAgIF9wb3NpdGlvbk5vZGU6IGZ1bmN0aW9uIF9wb3NpdGlvbk5vZGUgKG5vZGUsIGluZGV4KSB7XG4gICAgICB2YXIgaG9sZGVyID0gdGhpcy5fc2hvd05vZGVzW2luZGV4XTtcbiAgICAgIGlmIChub2RlLl9pblNob3cgJiYgaG9sZGVyICE9PSBub2RlKSB7XG4gICAgICAgIGlmIChob2xkZXIpIHsgdGhpcy5fcmVtb3ZlQ2xvbmUoaG9sZGVyKTsgfVxuICAgICAgICBub2RlID0gdGhpcy5fZ2V0Q2xvbmUobm9kZS5pbmRleCk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChub2RlLl9pblNob3cpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIG5vZGUuX2luU2hvdyA9IHRydWU7XG4gICAgICB2YXIgdHJhbnNsYXRlWCA9IGluZGV4ICogdGhpcy5fd3JhcHBlcldpZHRoIC0gdGhpcy5pbm5lck9mZnNldDtcbiAgICAgIHdlZXgudXRpbHMuYWRkVHJhbnNmb3JtKG5vZGUsIHtcbiAgICAgICAgdHJhbnNsYXRlOiAoXCJ0cmFuc2xhdGUzZChcIiArIHRyYW5zbGF0ZVggKyBcInB4LCAwcHgsIDBweClcIilcbiAgICAgIH0pO1xuICAgICAgbm9kZS5zdHlsZS56SW5kZXggPSA5OSAtIE1hdGguYWJzKGluZGV4KTtcbiAgICAgIG5vZGUuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICBub2RlLl9zaG93SW5kZXggPSBpbmRleDtcbiAgICAgIHRoaXMuX3Nob3dOb2Rlc1tpbmRleF0gPSBub2RlO1xuICAgIH0sXG5cbiAgICBfZ2V0Q2xvbmU6IGZ1bmN0aW9uIF9nZXRDbG9uZSAoaW5kZXgpIHtcbiAgICAgIHZhciBhcnIgPSB0aGlzLl9jbG9uZXNbaW5kZXhdO1xuICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgdGhpcy5fY2xvbmVzW2luZGV4XSA9IGFyciA9IFtdO1xuICAgICAgfVxuICAgICAgaWYgKGFyci5sZW5ndGggPD0gMCkge1xuICAgICAgICB2YXIgb3JpZ05vZGUgPSB0aGlzLl9jZWxsc1tpbmRleF0uZWxtO1xuICAgICAgICB2YXIgY2xvbmUgPSBvcmlnTm9kZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIGNsb25lLl9pc0Nsb25lID0gdHJ1ZTtcbiAgICAgICAgY2xvbmUuX2luU2hvdyA9IG9yaWdOb2RlLl9pblNob3c7XG4gICAgICAgIGNsb25lLmluZGV4ID0gb3JpZ05vZGUuaW5kZXg7XG4gICAgICAgIGNsb25lLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICBjbG9uZS5zdHlsZS56SW5kZXggPSAwO1xuICAgICAgICB2YXIgY3QgPSB0aGlzLiRyZWZzLmlubmVyO1xuICAgICAgICBjdC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICAgIGFyci5wdXNoKGNsb25lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnIucG9wKClcbiAgICB9LFxuXG4gICAgX3JlbW92ZUNsb25lOiBmdW5jdGlvbiBfcmVtb3ZlQ2xvbmUgKG5vZGUpIHtcbiAgICAgIHZhciBpZHggPSBub2RlLmluZGV4O1xuICAgICAgdGhpcy5faGlkZU5vZGUobm9kZSk7XG4gICAgICB2YXIgYXJyID0gdGhpcy5fY2xvbmVzW2lkeF07XG4gICAgICBhcnIucHVzaChub2RlKTtcbiAgICB9LFxuXG4gICAgX2hpZGVOb2RlOiBmdW5jdGlvbiBfaGlkZU5vZGUgKG5vZGUpIHtcbiAgICAgIG5vZGUuX2luU2hvdyA9IGZhbHNlO1xuICAgICAgbm9kZS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgIG5vZGUuc3R5bGUuekluZGV4ID0gMDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaGlkZSBub2RlcyBmcm9tIGJlZ2luIHRvIGVuZCBpbiBzaG93QXJyYXkuXG4gICAgICogaWYgaXQgaXMgY2xvbmUgbm9kZSwganVzdCBtb3ZlIHRoZSBjbG9uZSBub2RlIHRvIHRoZSBidWZmZXIuXG4gICAgICovXG4gICAgX2NsZWFyTm9kZXM6IGZ1bmN0aW9uIF9jbGVhck5vZGVzIChiZWdpbiwgZW5kKSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgZm9yICh2YXIgaSA9IGJlZ2luOyBpIDw9IGVuZDsgaSsrKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcyQxLl9zaG93Tm9kZXNbaV07XG4gICAgICAgIGlmICghbm9kZSkgeyByZXR1cm4gfVxuICAgICAgICBpZiAobm9kZS5faXNDbG9uZSkge1xuICAgICAgICAgIHRoaXMkMS5fcmVtb3ZlQ2xvbmUobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW5vZGUuX2luU2hvdykge1xuICAgICAgICAgIHRoaXMkMS5faGlkZU5vZGUobm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMkMS5fc2hvd05vZGVzW2ldO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjb3B5IG5vZGUgc3R5bGUgcHJvcHMgKG9wYWNpdHkgYW5kIHpJbmRleCkgYW5kIHRyYW5zZm9ybSBzdGF0dXMgZnJvbVxuICAgICAqIG9uZSBlbGVtZW50IHRvIGFub3RoZXIuXG4gICAgICovXG4gICAgX2NvcHlTdHlsZTogZnVuY3Rpb24gX2NvcHlTdHlsZSAoZnJvbSwgdG8sIHN0eWxlcywgdHJhbnNmb3JtRXh0cmEpIHtcbiAgICAgIGlmICggc3R5bGVzID09PSB2b2lkIDAgKSBzdHlsZXMgPSBbJ29wYWNpdHknLCAnekluZGV4J107XG4gICAgICBpZiAoIHRyYW5zZm9ybUV4dHJhID09PSB2b2lkIDAgKSB0cmFuc2Zvcm1FeHRyYSA9IHt9O1xuXG4gICAgICB3ZWV4LnV0aWxzLmV4dGVuZEtleXModG8uc3R5bGUsIGZyb20uc3R5bGUsIHN0eWxlcyk7XG4gICAgICB2YXIgdHJhbnNPYmogPSB3ZWV4LnV0aWxzLmdldFRyYW5zZm9ybU9iaihmcm9tKTtcbiAgICAgIGZvciAodmFyIGsgaW4gdHJhbnNmb3JtRXh0cmEpIHtcbiAgICAgICAgdHJhbnNPYmpba10gPSB0cmFuc2Zvcm1FeHRyYVtrXTtcbiAgICAgIH1cbiAgICAgIHdlZXgudXRpbHMuYWRkVHJhbnNmb3JtKHRvLCB0cmFuc09iaik7XG4gICAgICB2YXIgZnJvbUlubmVyID0gZnJvbS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgIHZhciB0b0lubmVyID0gdG8uZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICB0b0lubmVyLnN0eWxlLm9wYWNpdHkgPSBmcm9tSW5uZXIuc3R5bGUub3BhY2l0eTtcbiAgICAgIHdlZXgudXRpbHMuY29weVRyYW5zZm9ybShmcm9tSW5uZXIsIHRvSW5uZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXBsYWNlIGEgY2xvbmUgbm9kZSB3aXRoIHRoZSBvcmlnaW5hbCBub2RlIGlmIGl0J3Mgbm90IGluIHVzZS5cbiAgICAgKi9cbiAgICBfcmVwbGFjZUNsb25lOiBmdW5jdGlvbiBfcmVwbGFjZUNsb25lIChjbG9uZSwgcG9zKSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgdmFyIG9yaWdOb2RlID0gdGhpcy5fY2VsbHNbY2xvbmUuaW5kZXhdLmVsbTtcbiAgICAgIGlmIChvcmlnTm9kZS5faW5TaG93KSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdmFyIG9yaWdTaG93SW5kZXggPSBvcmlnTm9kZS5fc2hvd0luZGV4O1xuICAgICAgdmFyIHN0eWxlUHJvcHMgPSBbJ29wYWNpdHknLCAnekluZGV4J107XG4gICAgICB2YXIgY2w7XG4gICAgICBpZiAoTWF0aC5hYnMob3JpZ1Nob3dJbmRleCkgPD0gMSkge1xuICAgICAgICAvLyBsZWF2ZSBhIGNsb25lIHRvIHJlcGxhY2UgdGhlIG9yaWdOb2RlIGluIHRoZSBzaG93IHpvbmUoLTEgfiAxKS5cbiAgICAgICAgY2wgPSB0aGlzLl9nZXRDbG9uZShvcmlnTm9kZS5pbmRleCk7XG4gICAgICAgIHRoaXMuX2NvcHlTdHlsZShvcmlnTm9kZSwgY2wpO1xuICAgICAgICB0aGlzLl9zaG93Tm9kZXNbb3JpZ1Nob3dJbmRleF0gPSBjbDtcbiAgICAgIH1cbiAgICAgIG9yaWdOb2RlLl9pblNob3cgPSB0cnVlO1xuICAgICAgdmFyIHRyYW5zT2JqID0gd2VleC51dGlscy5nZXRUcmFuc2Zvcm1PYmooY2xvbmUpO1xuICAgICAgdHJhbnNPYmoudHJhbnNsYXRlID0gdHJhbnNPYmoudHJhbnNsYXRlLnJlcGxhY2UoL1srLVxcZC5dK1twd114LywgZnVuY3Rpb24gKCQwKSB7XG4gICAgICAgIHJldHVybiBwb3MgKiB0aGlzJDEuX3dyYXBwZXJXaWR0aCAtIHRoaXMkMS5pbm5lck9mZnNldCArICdweCdcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fY29weVN0eWxlKGNsb25lLCBvcmlnTm9kZSwgc3R5bGVQcm9wcywgdHJhbnNPYmopO1xuICAgICAgdGhpcy5fcmVtb3ZlQ2xvbmUoY2xvbmUpO1xuICAgICAgaWYgKCFjbCkge1xuICAgICAgICBkZWxldGUgdGhpcy5fc2hvd05vZGVzW29yaWdTaG93SW5kZXhdO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2hvd05vZGVzW3Bvc10gPSBvcmlnTm9kZTtcbiAgICAgIG9yaWdOb2RlLl9zaG93SW5kZXggPSBwb3M7XG4gICAgfSxcblxuICAgIF9yZWFycmFuZ2VOb2RlczogZnVuY3Rpb24gX3JlYXJyYW5nZU5vZGVzIChuZXdJbmRleCkge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLmZyYW1lQ291bnQgPD0gMSkge1xuICAgICAgICB0aGlzLl9zbGlkaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3VycmVudEluZGV4ID0gMDtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8vIGNsZWFyIGF1dG9QbGF5IHRpbWVyIChhbmQgcmVzdGFydCBhZnRlciB1cGRhdGVkIGhvb2spLlxuICAgICAgdGhpcy5fc3RhcnRBdXRvUGxheSgpO1xuXG4gICAgICAvKipcbiAgICAgICAqIGNsZWFuIG5vZGVzLiByZXBsYWNlIGN1cnJlbnQgbm9kZSB3aXRoIG5vbi1jbG9uZWQgbm9kZS5cbiAgICAgICAqIHNldCBjdXJyZW50IGluZGV4IHRvIHRoZSBuZXcgaW5kZXguXG4gICAgICAgKi9cbiAgICAgIHZhciBzaG93cyA9IHRoaXMuX3Nob3dOb2RlcztcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9zaG93U3RhcnRJZHg7IGkgPD0gdGhpcy5fc2hvd0VuZElkeDsgaSsrKSB7XG4gICAgICAgIHNob3dzW2ldLl9pblNob3cgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGkkMSA9IC0xOyBpJDEgPD0gMTsgaSQxKyspIHtcbiAgICAgICAgdmFyIG5vZGUgPSBzaG93c1tpJDFdO1xuICAgICAgICBpZiAoIW5vZGUuX2lzQ2xvbmUpIHtcbiAgICAgICAgICBub2RlLl9pblNob3cgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHRoaXMkMS5fcmVwbGFjZUNsb25lKG5vZGUsIGkkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2xlYXJOb2Rlcyh0aGlzLl9zaG93U3RhcnRJZHgsIC0yKTtcbiAgICAgIHRoaXMuX3Nob3dTdGFydElkeCA9IC0xO1xuICAgICAgdGhpcy5fY2xlYXJOb2RlcygyLCB0aGlzLl9zaG93RW5kSWR4KTtcbiAgICAgIHRoaXMuX3Nob3dFbmRJZHggPSAxO1xuICAgICAgdGhpcy5fc2xpZGluZyA9IGZhbHNlO1xuXG4gICAgICAvLyBzZXQgY3VycmVudCBpbmRleCB0byB0aGUgbmV3IGluZGV4LlxuICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSBuZXdJbmRleDtcbiAgICAgIHRoaXMuX3ByZUluZGV4ID0gbmV3SW5kZXg7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGFjY29yZGluZyB0byB0aGUgYXR0cnM6IG5laWdoYm9yU2NhbGUsIG5laWdoYm9yQWxwaGEsIG5laWdoYm9yU3BhY2UuXG4gICAgICogMS4gYXBwbHkgdGhlIG1haW4gY2VsbCB0cmFuc2Zvcm0gZWZmZWN0cy5cbiAgICAgKiAyLiBzZXQgdGhlIHByZXZpb3VzIGNlbGwgYW5kIHRoZSBuZXh0IGNlbGwncyBwb3NpdG9uLCBzY2FsZSBhbmQgYWxwaGEuXG4gICAgICogMy4gc2V0IG90aGVyIGNlbGxzJyBzY2FsZSBhbmQgYWxwaGEuXG4gICAgICovXG4gICAgX3NldE5laWdoYm9yczogZnVuY3Rpb24gX3NldE5laWdoYm9ycyAoKSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMuX3Nob3dTdGFydElkeDsgaSA8PSB0aGlzLl9zaG93RW5kSWR4OyBpKyspIHtcbiAgICAgICAgdmFyIGVsbSA9IHRoaXMkMS5fc2hvd05vZGVzW2ldLmZpcnN0RWxlbWVudENoaWxkO1xuICAgICAgICBlbG0uc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9IFwiYWxsIFwiICsgKE5FSUdIQk9SX1NDQUxFX1RJTUUgLyAxMDAwKSArIFwicyBlYXNlXCI7XG4gICAgICAgIGVsbS5zdHlsZS5tb3pUcmFuc2l0aW9uID0gXCJhbGwgXCIgKyAoTkVJR0hCT1JfU0NBTEVfVElNRSAvIDEwMDApICsgXCJzIGVhc2VcIjtcbiAgICAgICAgZWxtLnN0eWxlLnRyYW5zaXRpb24gPSBcImFsbCBcIiArIChORUlHSEJPUl9TQ0FMRV9USU1FIC8gMTAwMCkgKyBcInMgZWFzZVwiO1xuICAgICAgICB2YXIgdHJhbnNPYmogPSB7XG4gICAgICAgICAgc2NhbGU6IChcInNjYWxlKFwiICsgKGkgPT09IDAgPyB0aGlzJDEuY3VycmVudEl0ZW1TY2FsZSA6IHRoaXMkMS5uZWlnaGJvclNjYWxlKSArIFwiKVwiKVxuICAgICAgICB9O1xuICAgICAgICB2YXIgdHJhbnNsYXRlWCA9ICh2b2lkIDApO1xuICAgICAgICBpZiAoIXRoaXMkMS5fbmVpZ2hib3JXaWR0aCkge1xuICAgICAgICAgIHRoaXMkMS5fbmVpZ2hib3JXaWR0aCA9IHBhcnNlRmxvYXQoZWxtLnN0eWxlLndpZHRoKSB8fCBlbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY2FsY3VsYXRlIHBvc2l0aW9uIG9mZnNldHMgYWNjb3JkaW5nIHRvIG5laWdoYm9yIHNjYWxlcy5cbiAgICAgICAgaWYgKE1hdGguYWJzKGkpID09PSAxKSB7XG4gICAgICAgICAgdmFyIGRpc3QgPSAoKHRoaXMkMS5fd3JhcHBlcldpZHRoIC0gdGhpcyQxLl9uZWlnaGJvcldpZHRoICogdGhpcyQxLm5laWdoYm9yU2NhbGUpIC8gMlxuICAgICAgICAgICAgKyB0aGlzJDEubmVpZ2hib3JTcGFjZSAqIHdlZXguY29uZmlnLmVudi5zY2FsZSkgLyB0aGlzJDEubmVpZ2hib3JTY2FsZTtcbiAgICAgICAgICB0cmFuc2xhdGVYID0gLWkgKiBkaXN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vIGNsZWFyIHBvc2l0aW9uIG9mZnNldHMuXG4gICAgICAgICAgdHJhbnNsYXRlWCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdHJhbnNPYmoudHJhbnNsYXRlID0gXCJ0cmFuc2xhdGUzZChcIiArIHRyYW5zbGF0ZVggKyBcInB4LCAwcHgsIDBweClcIjtcbiAgICAgICAgd2VleC51dGlscy5hZGRUcmFuc2Zvcm0oZWxtLCB0cmFuc09iaik7XG4gICAgICAgIGVsbS5zdHlsZS5vcGFjaXR5ID0gaSA9PT0gMCA/IE1BSU5fU0xJREVfT1BBQ0lUWSA6IHRoaXMkMS5uZWlnaGJvckFscGhhO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfbmV4dDogZnVuY3Rpb24gX25leHQgKCkge1xuICAgICAgdmFyIG5leHQgPSB0aGlzLmN1cnJlbnRJbmRleCArIDE7XG4gICAgICBpZiAodGhpcy5mcmFtZUNvdW50IDw9IDEpIHtcbiAgICAgICAgbmV4dC0tO1xuICAgICAgfVxuICAgICAgdGhpcy5fc2xpZGVUbyhuZXh0KTtcbiAgICB9LFxuXG4gICAgX3ByZXY6IGZ1bmN0aW9uIF9wcmV2ICgpIHtcbiAgICAgIHZhciBwcmV2ID0gdGhpcy5jdXJyZW50SW5kZXggLSAxO1xuICAgICAgaWYgKHRoaXMuZnJhbWVDb3VudCA8PSAxKSB7XG4gICAgICAgIHByZXYrKztcbiAgICAgIH1cbiAgICAgIHRoaXMuX3NsaWRlVG8ocHJldik7XG4gICAgfSxcblxuICAgIF9oYW5kbGVUb3VjaFN0YXJ0OiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hTdGFydCAoZXZlbnQpIHtcbiAgICAgIHZhciB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xuICAgICAgdGhpcy5fc3RvcEF1dG9QbGF5KCk7XG4gICAgICB2YXIgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyO1xuICAgICAgdGhpcy5fdG91Y2hQYXJhbXMgPSB7XG4gICAgICAgIG9yaWdpbmFsVHJhbnNmb3JtOiBpbm5lci5zdHlsZS53ZWJraXRUcmFuc2Zvcm1cbiAgICAgICAgICB8fCBpbm5lci5zdHlsZS5tb3pUcmFuc2Zvcm1cbiAgICAgICAgICB8fCBpbm5lci5zdHlsZS50cmFuc2Zvcm0sXG4gICAgICAgIHN0YXJ0VG91Y2hFdmVudDogdG91Y2gsXG4gICAgICAgIHN0YXJ0WDogdG91Y2gucGFnZVgsXG4gICAgICAgIHN0YXJ0WTogdG91Y2gucGFnZVksXG4gICAgICAgIHRpbWVTdGFtcDogZXZlbnQudGltZVN0YW1wXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBfaGFuZGxlVG91Y2hNb3ZlOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hNb3ZlIChldmVudCkge1xuICAgICAgdmFyIHRwID0gdGhpcy5fdG91Y2hQYXJhbXM7XG4gICAgICBpZiAoIXRwKSB7IHJldHVybiB9XG4gICAgICBpZiAodGhpcy5fc2xpZGluZykge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHZhciByZWYgPSB0aGlzLl90b3VjaFBhcmFtcztcbiAgICAgIHZhciBzdGFydFggPSByZWYuc3RhcnRYO1xuICAgICAgdmFyIHN0YXJ0WSA9IHJlZi5zdGFydFk7XG4gICAgICB2YXIgdG91Y2ggPSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXTtcbiAgICAgIHZhciBvZmZzZXRYID0gdG91Y2gucGFnZVggLSBzdGFydFg7XG4gICAgICB2YXIgb2Zmc2V0WSA9IHRvdWNoLnBhZ2VZIC0gc3RhcnRZO1xuICAgICAgdHAub2Zmc2V0WCA9IG9mZnNldFg7XG4gICAgICB0cC5vZmZzZXRZID0gb2Zmc2V0WTtcbiAgICAgIHZhciBpc1YgPSB0cC5pc1ZlcnRpY2FsO1xuICAgICAgaWYgKHR5cGVvZiBpc1YgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlzViA9IHRwLmlzVmVydGljYWwgPSBNYXRoLmFicyhvZmZzZXRYKSA8IE1hdGguYWJzKG9mZnNldFkpO1xuICAgICAgICBpZiAoIWlzVikge1xuICAgICAgICAgIHRoaXMuX2VtaXRTY3JvbGxFdmVudCgnc2Nyb2xsc3RhcnQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gdmVydGljYWwgc2Nyb2xsLiBqdXN0IGlnbm9yZSBpdC5cbiAgICAgIGlmIChpc1YpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvLyBob3Jpem9udGFsIHNjcm9sbC4gdHJpZ2dlciBzY3JvbGwgZXZlbnQuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIGlubmVyID0gdGhpcy4kcmVmcy5pbm5lcjtcbiAgICAgIGlmIChpbm5lciAmJiBvZmZzZXRYKSB7XG4gICAgICAgIGlmICghdGhpcy5fbm9kZXNPZmZzZXRDbGVhcmVkKSB7XG4gICAgICAgICAgdGhpcy5fbm9kZXNPZmZzZXRDbGVhcmVkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLl9jbGVhck5vZGVzT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZW1pdFNjcm9sbEV2ZW50KCdzY3JvbGwnLCB7XG4gICAgICAgICAgb2Zmc2V0WFJhdGlvOiBvZmZzZXRYIC8gdGhpcy5fd3JhcHBlcldpZHRoXG4gICAgICAgIH0pO1xuICAgICAgICBpbm5lci5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiICsgKHRoaXMuaW5uZXJPZmZzZXQgKyBvZmZzZXRYKSArIFwicHgsIDAsIDApXCI7XG4gICAgICAgIGlubmVyLnN0eWxlLm1velRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIgKyAodGhpcy5pbm5lck9mZnNldCArIG9mZnNldFgpICsgXCJweCwgMCwgMClcIjtcbiAgICAgICAgaW5uZXIuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZChcIiArICh0aGlzLmlubmVyT2Zmc2V0ICsgb2Zmc2V0WCkgKyBcInB4LCAwLCAwKVwiO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBfaGFuZGxlVG91Y2hFbmQ6IGZ1bmN0aW9uIF9oYW5kbGVUb3VjaEVuZCAoZXZlbnQpIHtcbiAgICAgIHRoaXMuX3N0YXJ0QXV0b1BsYXkoKTtcbiAgICAgIHZhciB0cCA9IHRoaXMuX3RvdWNoUGFyYW1zO1xuICAgICAgaWYgKCF0cCkgeyByZXR1cm4gfVxuICAgICAgdmFyIGlzViA9IHRwLmlzVmVydGljYWw7XG4gICAgICBpZiAodHlwZW9mIGlzViA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB2YXIgaW5uZXIgPSB0aGlzLiRyZWZzLmlubmVyO1xuICAgICAgdmFyIG9mZnNldFggPSB0cC5vZmZzZXRYO1xuICAgICAgaWYgKGlubmVyKSB7XG4gICAgICAgIHRoaXMuX25vZGVzT2Zmc2V0Q2xlYXJlZCA9IGZhbHNlO1xuICAgICAgICAvLyBUT0RPOiB0ZXN0IHRoZSB2ZWxvY2l0eSBpZiBpdCdzIGxlc3MgdGhhbiAwLjIuXG4gICAgICAgIHZhciByZXNldCA9IE1hdGguYWJzKG9mZnNldFggLyB0aGlzLl93cmFwcGVyV2lkdGgpIDwgMC4yO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gb2Zmc2V0WCA+IDAgPyAxIDogLTE7XG4gICAgICAgIHZhciBuZXdJbmRleCA9IHJlc2V0ID8gdGhpcy5jdXJyZW50SW5kZXggOiAodGhpcy5jdXJyZW50SW5kZXggLSBkaXJlY3Rpb24pO1xuICAgICAgICB0aGlzLl9zbGlkZVRvKG5ld0luZGV4LCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGRlbGV0ZSB0aGlzLl90b3VjaFBhcmFtcztcbiAgICB9LFxuXG4gICAgX2hhbmRsZVRvdWNoQ2FuY2VsOiBmdW5jdGlvbiBfaGFuZGxlVG91Y2hDYW5jZWwgKGV2ZW50KSB7XG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlVG91Y2hFbmQoZXZlbnQpXG4gICAgfSxcblxuICAgIF9lbWl0U2Nyb2xsRXZlbnQ6IGZ1bmN0aW9uIF9lbWl0U2Nyb2xsRXZlbnQgKHR5cGUsIGRhdGEpIHtcbiAgICAgIGlmICggZGF0YSA9PT0gdm9pZCAwICkgZGF0YSA9IHt9O1xuXG4gICAgICB0aGlzLiRlbWl0KHR5cGUsIHdlZXgudXRpbHMuY3JlYXRlRXZlbnQodGhpcy4kZWwsIHR5cGUsIGRhdGEpKTtcbiAgICB9LFxuXG4gICAgX3Rocm90dGxlRW1pdFNjcm9sbDogZnVuY3Rpb24gX3Rocm90dGxlRW1pdFNjcm9sbCAob2Zmc2V0LCBjYWxsYmFjaykge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciB0aHJvdHRsZVRpbWUgPSBUSFJPVFRMRV9TQ1JPTExfVElNRTtcbiAgICAgIHZhciBjbnQgPSBwYXJzZUludChUUkFOU0lUSU9OX1RJTUUgLyB0aHJvdHRsZVRpbWUpIC0gMTtcbiAgICAgIHZhciBzaWduID0gb2Zmc2V0ID4gMCA/IDEgOiAtMTtcbiAgICAgIHZhciByID0gTWF0aC5hYnMob2Zmc2V0IC8gdGhpcy5fd3JhcHBlcldpZHRoKTtcbiAgICAgIHZhciB0aHJvdHRsZWRTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgrK2kgPiBjbnQpIHtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sgJiYgY2FsbGJhY2suY2FsbCh0aGlzJDEpXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJhdGlvID0gdGhpcyQxLl9zdGVwID09PSAwXG4gICAgICAgICAgPyBzaWduICogciAqICgxIC0gaSAvIGNudClcbiAgICAgICAgICA6IHNpZ24gKiAociArICgxIC0gcikgKiBpIC8gY250KTtcbiAgICAgICAgdGhpcyQxLl9lbWl0U2Nyb2xsRXZlbnQoJ3Njcm9sbCcsIHtcbiAgICAgICAgICBvZmZzZXRYUmF0aW86IHJhdGlvXG4gICAgICAgIH0pO1xuICAgICAgICBzZXRUaW1lb3V0KHRocm90dGxlZFNjcm9sbCwgVEhST1RUTEVfU0NST0xMX1RJTUUpO1xuICAgICAgfTtcbiAgICAgIHRocm90dGxlZFNjcm9sbCgpO1xuICAgIH1cbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBpbXBvcnQgeyB2YWxpZGF0ZVN0eWxlcyB9IGZyb20gJy4uLy4uL3ZhbGlkYXRvcidcbi8vIGltcG9ydCBpbmRpY2F0b3IgZnJvbSAnLi9pbmRpY2F0b3InXG52YXIgc2xpZGVyJDEgPSB7XG4gIG1peGluczogW3NsaWRlTWl4aW5dLFxuICBwcm9wczoge1xuICAgIGluZGV4OiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH0sXG4gICAgJ2F1dG8tcGxheSc6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGludGVydmFsOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMzAwMFxuICAgIH0sXG4gICAgaW5maW5pdGU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH1cbiAgfSxcblxuICB3YXRjaDoge1xuICAgIGluZGV4OiBmdW5jdGlvbiBpbmRleCAoKSB7XG4gICAgICB0aGlzLmN1cnJlbnRJbmRleCA9IHRoaXMuX25vcm1hbGl6ZUluZGV4KHRoaXMuaW5kZXgpO1xuICAgIH1cbiAgfSxcblxuICBkYXRhOiBmdW5jdGlvbiBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZnJhbWVDb3VudDogMCxcbiAgICAgIGN1cnJlbnRJbmRleDogdGhpcy5pbmRleFxuICAgIH1cbiAgfSxcblxuICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSAoKSB7XG4gICAgdGhpcy53ZWV4VHlwZSA9ICdzbGlkZXInO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAvLyBpZiAoXCJwcm9kdWN0aW9uXCIgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAvLyAgIHZhbGlkYXRlU3R5bGVzKCdzbGlkZXInLCB0aGlzLiR2bm9kZS5kYXRhICYmIHRoaXMuJHZub2RlLmRhdGEuc3RhdGljU3R5bGUpXG4gICAgLy8gfVxuICAgIHJldHVybiB0aGlzLl9yZW5kZXJTbGlkZXMoY3JlYXRlRWxlbWVudClcbiAgfVxufTtcblxudmFyIHNsaWRlciQyID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnc2xpZGVyJywgc2xpZGVyJDEpO1xuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ2N5Y2xlc2xpZGVyJywgc2xpZGVyJDEpO1xuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBERUZBVUxUX05FSUdIQk9SX1NQQUNFID0gMjA7XG52YXIgREVGQVVMVF9ORUlHSEJPUl9BTFBIQSA9IDAuNjtcbnZhciBERUZBVUxUX05FSUdIQk9SX1NDQUxFID0gMC44O1xudmFyIERFRkFVTFRfQ1VSUkVOVF9JVEVNX1NDQUxFID0gMC45O1xuXG52YXIgc2xpZGVyTmVpZ2hib3IgPSB7XG4gIG1peGluczogW3NsaWRlTWl4aW5dLFxuICBwcm9wczoge1xuICAgIGluZGV4OiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMFxuICAgIH0sXG4gICAgYXV0b1BsYXk6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxuICAgIGludGVydmFsOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgZGVmYXVsdDogMzAwMFxuICAgIH0sXG4gICAgaW5maW5pdGU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgbmVpZ2hib3JTcGFjZToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICB2YWwgPSBwYXJzZUZsb2F0KHZhbCk7XG4gICAgICAgIHJldHVybiAhaXNOYU4odmFsKSAmJiB2YWwgPiAwXG4gICAgICB9LFxuICAgICAgZGVmYXVsdDogREVGQVVMVF9ORUlHSEJPUl9TUEFDRVxuICAgIH0sXG4gICAgbmVpZ2hib3JBbHBoYToge1xuICAgICAgdHlwZTogW1N0cmluZywgTnVtYmVyXSxcbiAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICB2YWwgPSBwYXJzZUZsb2F0KHZhbCk7XG4gICAgICAgIHJldHVybiAhaXNOYU4odmFsKSAmJiB2YWwgPj0gMCAmJiB2YWwgPD0gMVxuICAgICAgfSxcbiAgICAgIGRlZmF1bHQ6IERFRkFVTFRfTkVJR0hCT1JfQUxQSEFcbiAgICB9LFxuICAgIG5laWdoYm9yU2NhbGU6IHtcbiAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFsID0gcGFyc2VGbG9hdCh2YWwpO1xuICAgICAgICByZXR1cm4gIWlzTmFOKHZhbCkgJiYgdmFsID49IDAgJiYgdmFsIDw9IDFcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0OiBERUZBVUxUX05FSUdIQk9SX1NDQUxFXG4gICAgfSxcbiAgICBjdXJyZW50SXRlbVNjYWxlOiB7XG4gICAgICB0eXBlOiBbU3RyaW5nLCBOdW1iZXJdLFxuICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICAgICAgcmV0dXJuICFpc05hTih2YWwpICYmIHZhbCA+PSAwICYmIHZhbCA8PSAxXG4gICAgICB9LFxuICAgICAgZGVmYXVsdDogREVGQVVMVF9DVVJSRU5UX0lURU1fU0NBTEVcbiAgICB9XG4gIH0sXG5cbiAgd2F0Y2g6IHtcbiAgICBpbmRleDogZnVuY3Rpb24gaW5kZXggKCkge1xuICAgICAgdGhpcy5jdXJyZW50SW5kZXggPSB0aGlzLl9ub3JtYWxpemVJbmRleCh0aGlzLmluZGV4KTtcbiAgICB9XG4gIH0sXG5cbiAgZGF0YTogZnVuY3Rpb24gZGF0YSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnRJbmRleDogdGhpcy5pbmRleCxcbiAgICAgIGZyYW1lQ291bnQ6IDBcbiAgICB9XG4gIH0sXG5cbiAgYmVmb3JlQ3JlYXRlOiBmdW5jdGlvbiBiZWZvcmVDcmVhdGUgKCkge1xuICAgIHRoaXMuaXNOZWlnaGJvciA9IHRydWU7XG4gICAgdGhpcy53ZWV4VHlwZSA9ICdzbGlkZXItbmVpZ2hib3InO1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbmRlclNsaWRlcyhjcmVhdGVFbGVtZW50KVxuICB9XG59O1xuXG52YXIgbmVpZ2hib3IgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCdzbGlkZXItbmVpZ2hib3InLCBzbGlkZXJOZWlnaGJvcik7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgX2NzcyQ2ID0gXCJcXG4ud2VleC1pbmRpY2F0b3Ige1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgei1pbmRleDogMTA7XFxuICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAtbXMtZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIC1tb3otYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gIC1tb3otYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxufVxcblxcbi53ZWV4LWluZGljYXRvci1pdGVtIHtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIHdpZHRoOiAwLjI2NjY2N3JlbTtcXG4gIGhlaWdodDogMC4yNjY2NjdyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkJCQkJCO1xcbn1cXG4ud2VleC1pbmRpY2F0b3ItaXRlbSArIC53ZWV4LWluZGljYXRvci1pdGVtIHtcXG4gIG1hcmdpbi1sZWZ0OiAwLjEzMzMzM3JlbTtcXG59XFxuXFxuLndlZXgtaW5kaWNhdG9yLWl0ZW0tYWN0aXZlIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XFxufVxcblwiO1xuXG52YXIgZXh0cmFjdENvbXBvbmVudFN0eWxlJDQ7XG52YXIgZXh0ZW5kJDM7XG52YXIgZXh0ZW5kS2V5cyQxO1xuXG5mdW5jdGlvbiBnZXRJbmRpY2F0b3JJdGVtU3R5bGUgKHNwZWMsIGlzQWN0aXZlKSB7XG4gIHZhciBzdHlsZSA9IHt9O1xuICBzdHlsZVsnYmFja2dyb3VuZC1jb2xvciddID0gc3BlY1tpc0FjdGl2ZSA/ICdpdGVtU2VsZWN0ZWRDb2xvcicgOiAnaXRlbUNvbG9yJ107XG4gIHN0eWxlWyd3aWR0aCddID0gc3R5bGVbJ2hlaWdodCddID0gc3BlY1snaXRlbVNpemUnXTtcbiAgcmV0dXJuIHN0eWxlXG59XG5cbmZ1bmN0aW9uIF9yZW5kZXIgKGNvbnRleHQsIGgpIHtcbiAgdmFyIGNoaWxkcmVuID0gW107XG4gIHZhciBtZXJnZWRTdHlsZSA9IGV4dHJhY3RDb21wb25lbnRTdHlsZSQ0KGNvbnRleHQpO1xuICB2YXIgaW5kaWNhdG9yU3BlY1N0eWxlID0gZXh0ZW5kS2V5cyQxKFxuICAgICAge30sXG4gICAgICBtZXJnZWRTdHlsZSxcbiAgICAgIFsnaXRlbUNvbG9yJywgJ2l0ZW1TZWxlY3RlZENvbG9yJywgJ2l0ZW1TaXplJ11cbiAgICApO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IE51bWJlcihjb250ZXh0LmNvdW50KTsgKytpKSB7XG4gICAgdmFyIGNsYXNzTmFtZXMgPSBbJ3dlZXgtaW5kaWNhdG9yLWl0ZW0gd2VleC1lbCddO1xuICAgIHZhciBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpID09PSBOdW1iZXIoY29udGV4dC5hY3RpdmUpKSB7XG4gICAgICBjbGFzc05hbWVzLnB1c2goJ3dlZXgtaW5kaWNhdG9yLWl0ZW0tYWN0aXZlJyk7XG4gICAgICBpc0FjdGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIGNoaWxkcmVuLnB1c2goaCgnbWFyaycsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiBjbGFzc05hbWVzLmpvaW4oJyAnKSxcbiAgICAgIHN0YXRpY1N0eWxlOiBnZXRJbmRpY2F0b3JJdGVtU3R5bGUoaW5kaWNhdG9yU3BlY1N0eWxlLCBpc0FjdGl2ZSlcbiAgICB9KSk7XG4gIH1cbiAgY29udGV4dC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIF9yZUxheW91dCh0aGlzLCBfZ2V0VmlydHVhbFJlY3QodGhpcywgbWVyZ2VkU3R5bGUpLCBfZ2V0THRicih0aGlzLCBtZXJnZWRTdHlsZSkpO1xuICB9KTtcbiAgcmV0dXJuIGgoJ25hdicsIHtcbiAgICBhdHRyczogeyAnd2VleC10eXBlJzogJ2luZGljYXRvcicgfSxcbiAgICBzdGF0aWNDbGFzczogJ3dlZXgtaW5kaWNhdG9yIHdlZXgtY3QnLFxuICAgIHN0YXRpY1N0eWxlOiBtZXJnZWRTdHlsZVxuICB9LCBjaGlsZHJlbilcbn1cblxuLyoqXG4gKiBnZXQgaW5kaWNhdG9yJ3MgdmlydHVhbCByZWN0ICh3aWR0aCwgaGVpZ2h0KSwgd2hpY2ggaXMgdGhlIC5cbiAqL1xuZnVuY3Rpb24gX2dldFZpcnR1YWxSZWN0IChjb250ZXh0LCBtZXJnZWRTdHlsZSkge1xuICB2YXIgY3QgPSBjb250ZXh0Ll9nZXRQYXJlbnRSZWN0KCk7XG4gIHZhciByZWN0ID0gWyd3aWR0aCcsICdoZWlnaHQnXS5yZWR1Y2UoZnVuY3Rpb24gKHByZSwga2V5KSB7XG4gICAgdmFyIG1zdiA9IG1lcmdlZFN0eWxlICYmIG1lcmdlZFN0eWxlW2tleV07XG4gICAgcHJlW2tleV0gPSBtc3YgPyBwYXJzZUZsb2F0KG1zdikgOiBjdFtrZXldO1xuICAgIHJldHVybiBwcmVcbiAgfSwge30pO1xuICByZXR1cm4gcmVjdFxufVxuXG4vKipcbiAqIGdldCBpbmRpY2F0b3IncyBsdGJyIHZhbHVlcyAod2l0aG91dCB1bml0cykuXG4gKi9cbmZ1bmN0aW9uIF9nZXRMdGJyIChjb250ZXh0LCBtZXJnZWRTdHlsZSkge1xuICByZXR1cm4gWydsZWZ0JywgJ3RvcCcsICdib3R0b20nLCAncmlnaHQnXS5yZWR1Y2UoZnVuY3Rpb24gKHByZSwga2V5KSB7XG4gICAgdmFyIG1zdiA9IG1lcmdlZFN0eWxlICYmIG1lcmdlZFN0eWxlW2tleV07XG4gICAgaWYgKCFtc3YgJiYgbXN2ICE9PSAwKSB7IHJldHVybiBwcmUgfVxuICAgIHByZVtrZXldID0gcGFyc2VGbG9hdChtc3YpO1xuICAgIHJldHVybiBwcmVcbiAgfSwge30pXG59XG5cbi8qKlxuICogZ2V0IGluZGljYXRvcidzIHJlY3QgKHdpZHRoLCBoZWlnaHQpLlxuICovXG5mdW5jdGlvbiBfZ2V0SW5kaWNhdG9yUmVjdCAoZWwpIHtcbiAgdmFyIHdpZHRoLCBoZWlnaHQ7XG4gIGlmIChlbC5jaGlsZHJlbi5sZW5ndGggPT09IDEpIHtcbiAgICB2YXIgaXRlbUNvbXB1dGVkU3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbC5jaGlsZHJlblswXSk7XG4gICAgd2lkdGggPSBwYXJzZUZsb2F0KGl0ZW1Db21wdXRlZFN0eWxlLndpZHRoKTtcbiAgICBoZWlnaHQgPSBwYXJzZUZsb2F0KGl0ZW1Db21wdXRlZFN0eWxlLmhlaWdodCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdmFyIGl0ZW1Db21wdXRlZFN0eWxlJDEgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbC5jaGlsZHJlblsxXSk7XG4gICAgdmFyIHBhZGRpbmcgPSBwYXJzZUZsb2F0KGl0ZW1Db21wdXRlZFN0eWxlJDEubWFyZ2luTGVmdCk7XG4gICAgaGVpZ2h0ID0gcGFyc2VGbG9hdChpdGVtQ29tcHV0ZWRTdHlsZSQxLmhlaWdodCk7XG4gICAgd2lkdGggPSBlbC5jaGlsZHJlbi5sZW5ndGggKiAoaGVpZ2h0ICsgcGFkZGluZykgLSBwYWRkaW5nO1xuICB9XG4gIHJldHVybiB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfVxufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSBhbmQgcmVzZXQgaW5kaWNhdG9yJ3Mgd2lkdGgsIGhlaWdodCwgYW5kIGx0YnIuXG4gKiBAcGFyYW0ge29iamVjdH0gdmlydHVhbFJlY3QuIHdpZHRoIGFuZCBoZWlnaHQgb2YgaW5kaWNhdG9yJ3MgdmlydHVhbCByZWN0IGJveC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBsdGJyLiB0aGUgdXNlciBzcGVjaWZpZWQgbGVmdCwgdG9wLCBib3R0b20sIHJpZ2h0IHBpeGVscyAod2l0aG91dCB1bml0cykuXG4gKi9cbmZ1bmN0aW9uIF9yZUxheW91dCAoY29udGV4dCwgdmlydHVhbFJlY3QsIGx0YnIpIHtcbiAgdmFyIGVsID0gY29udGV4dC4kZWw7XG4gIHZhciByZWN0ID0gX2dldEluZGljYXRvclJlY3QoZWwpO1xuICB2YXIgcmVjdFdpdGhQeCA9IE9iamVjdC5rZXlzKHJlY3QpLnJlZHVjZShmdW5jdGlvbiAocHJlLCBrZXkpIHtcbiAgICBwcmVba2V5XSA9IHJlY3Rba2V5XSArICdweCc7XG4gICAgcmV0dXJuIHByZVxuICB9LCB7fSk7XG4gIGV4dGVuZCQzKGVsLnN0eWxlLCByZWN0V2l0aFB4KTtcbiAgdmFyIGF4aXNNYXAgPSBbe1xuICAgIGRpcjogbHRici5sZWZ0IHx8IGx0YnIubGVmdCA9PT0gMFxuICAgICAgPyAnbGVmdCcgOiBsdGJyLnJpZ2h0IHx8IGx0YnIucmlnaHQgPT09IDBcbiAgICAgID8gJ3JpZ2h0JyA6ICdsZWZ0JyxcbiAgICBzY2FsZTogJ3dpZHRoJ1xuICB9LCB7XG4gICAgZGlyOiBsdGJyLnRvcCB8fCBsdGJyLnRvcCA9PT0gMFxuICAgICAgPyAndG9wJyA6IGx0YnIuYm90dG9tIHx8IGx0YnIuYm90dG9tID09PSAwXG4gICAgICA/ICdib3R0b20nIDogJ3RvcCcsXG4gICAgc2NhbGU6ICdoZWlnaHQnXG4gIH1dO1xuICBPYmplY3Qua2V5cyhheGlzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgcmVmID0gYXhpc01hcFtrZXldO1xuICAgIHZhciBkaXIgPSByZWYuZGlyO1xuICAgIHZhciBzY2FsZSA9IHJlZi5zY2FsZTtcbiAgICBlbC5zdHlsZVtkaXJdID0gKGx0YnJbZGlyXSB8fCAwKSArIHZpcnR1YWxSZWN0W3NjYWxlXSAvIDIgLSByZWN0W3NjYWxlXSAvIDIgKyAncHgnO1xuICB9KTtcbn1cblxudmFyIGluZGljYXRvciA9IHtcbiAgbmFtZTogJ3dlZXgtaW5kaWNhdG9yJyxcbiAgbWV0aG9kczoge1xuICAgIHNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuJGVsLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgfVxuICB9LFxuICBkYXRhOiBmdW5jdGlvbiBkYXRhICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY291bnQ6IDAsXG4gICAgICBhY3RpdmU6IDBcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChjcmVhdGVFbGVtZW50KSB7XG4gICAgdmFyIHJlZiA9IHRoaXMuJHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gICAgdmFyIGNvdW50ID0gcmVmLmNvdW50O1xuICAgIHZhciBhY3RpdmUgPSByZWYuYWN0aXZlO1xuICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICB0aGlzLmFjdGl2ZSA9IGFjdGl2ZTtcbiAgICBpZiAoIXRoaXMuY291bnQpIHsgcmV0dXJuIH1cbiAgICByZXR1cm4gX3JlbmRlcih0aGlzLCBjcmVhdGVFbGVtZW50KVxuICB9LFxuICBfY3NzOiBfY3NzJDZcbn07XG5cbnZhciBpbmRpY2F0b3IkMSA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAod2VleCkge1xuICAgIGV4dHJhY3RDb21wb25lbnRTdHlsZSQ0ID0gd2VleC5leHRyYWN0Q29tcG9uZW50U3R5bGU7XG4gICAgZXh0ZW5kJDMgPSB3ZWV4LnV0aWxzLmV4dGVuZDtcbiAgICBleHRlbmRLZXlzJDEgPSB3ZWV4LnV0aWxzLmV4dGVuZEtleXM7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnaW5kaWNhdG9yJywgaW5kaWNhdG9yKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBzbGlkZXIgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4Lmluc3RhbGwoc2xpZGVyJDIpO1xuICAgIHdlZXguaW5zdGFsbChuZWlnaGJvcik7XG4gICAgd2VleC5pbnN0YWxsKGluZGljYXRvciQxKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogQGZpbGVPdmVydmlldyBJbXBsIG9mIHRleHQgY29tcG9uZW50LlxuICpcbiAqIE5vdGVzIGFib3V0IHRoZSBzdHlsZSAnaGVpZ2h0JyBhbmQgJ2xpbmVzJzpcbiAqIGlmIHRoZSBjb21wdXRlZCB2YWx1ZSBvZiAnaGVpZ2h0JyBpcyBiaWdnZXIgdGhhbiAnbGluZXMnLCB0aGFuIHRoZSB0ZXh0IHdpbGxcbiAqIGJlIGNsaXBwZWQgYWNjb3JkaW5nIHRvIHRoZSAnbGluZXMnLiBPdGhlcndpc2UsIGl0J2xsIGJlIHRoZSAnaGVpZ2h0Jy5cbiAqL1xuXG52YXIgX2NzcyQ3ID0gXCJcXG4ud2VleC10ZXh0IHtcXG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xcbiAgZGlzcGxheTogLW1vei1ib3g7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgLW1vei1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcXG4gIC1tb3otYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwOyAgLyogbm90IHVzaW5nICdwcmUnOiBzdXBwb3J0IGF1dG8gbGluZSBmZWVkLiAqL1xcbiAgZm9udC1zaXplOiAwLjQyNjY2N3JlbTtcXG4gIHdvcmQtd3JhcDogYnJlYWstd29yZDtcXG4gIG92ZXJmbG93OiBoaWRkZW47IC8qIGl0J2xsIGJlIGNsaXBwZWQgaWYgdGhlIGhlaWdodCBpcyBub3QgaGlnaCBlbm91Z2guICovXFxufVxcblwiO1xuXG4vKipcbiAqIEdldCB0ZXh0IHNwZWNpYWwgc3R5bGVzIChsaW5lcyBhbmQgdGV4dC1vdmVyZmxvdykuXG4gKi9cbmZ1bmN0aW9uIGdldFRleHRTcGVjU3R5bGUgKG1zKSB7XG4gIGlmICggbXMgPT09IHZvaWQgMCApIG1zID0ge307XG5cbiAgdmFyIGxpbmVzID0gcGFyc2VJbnQobXMubGluZXMpIHx8IDA7XG4gIHZhciBvdmVyZmxvdyA9IG1zWyd0ZXh0LW92ZXJmbG93J10gfHwgJ2VsbGlwc2lzJztcbiAgaWYgKGxpbmVzID4gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICAndGV4dC1vdmVyZmxvdyc6IG92ZXJmbG93LFxuICAgICAgJy13ZWJraXQtbGluZS1jbGFtcCc6IGxpbmVzXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRleHQgKHdlZXgpIHtcbiAgdmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICB2YXIgY3JlYXRlRXZlbnRNYXAgPSB3ZWV4LmNyZWF0ZUV2ZW50TWFwO1xuICB2YXIgcmVmID0gd2VleC51dGlscztcbiAgdmFyIGV4dGVuZCA9IHJlZi5leHRlbmQ7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnd2VleC10ZXh0JyxcbiAgICBwcm9wczoge1xuICAgICAgbGluZXM6IFtOdW1iZXIsIFN0cmluZ10sXG4gICAgICB2YWx1ZTogW1N0cmluZ11cbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIHZhciBzdHlsZSA9IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKTtcbiAgICAgIHZhciB0ZXh0U3BlY1N0eWxlID0gZ2V0VGV4dFNwZWNTdHlsZShzdHlsZSk7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgncCcsIHtcbiAgICAgICAgYXR0cnM6IHsgJ3dlZXgtdHlwZSc6ICd0ZXh0JyB9LFxuICAgICAgICBvbjogY3JlYXRlRXZlbnRNYXAodGhpcyksXG4gICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC10ZXh0IHdlZXgtZWwnLFxuICAgICAgICBzdGF0aWNTdHlsZTogZXh0ZW5kKHN0eWxlLCB0ZXh0U3BlY1N0eWxlKVxuICAgICAgfSwgdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbdGhpcy52YWx1ZV0pXG4gICAgfSxcbiAgICBfY3NzOiBfY3NzJDdcbiAgfVxufVxuXG52YXIgdGV4dCA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAod2VleCkge1xuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ3RleHQnLCBnZXRUZXh0KHdlZXgpKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX2NzcyQ4ID0gXCJcXG4ud2VleC10ZXh0YXJlYSB7XFxuICBmb250LXNpemU6IDAuNDI2NjY3cmVtXFxufVxcbi53ZWV4LXRleHRhcmVhOmZvY3VzIHtcXG4gIG91dGxpbmU6IG5vbmU7XFxufVxcblwiO1xuXG5mdW5jdGlvbiBnZXRUZXh0YXJlYSAod2VleCkge1xuICB2YXIgZXh0cmFjdENvbXBvbmVudFN0eWxlID0gd2VleC5leHRyYWN0Q29tcG9uZW50U3R5bGU7XG4gIHZhciBjcmVhdGVFdmVudE1hcCA9IHdlZXguY3JlYXRlRXZlbnRNYXA7XG4gIHZhciByZWYgPSB3ZWV4Lm1peGlucztcbiAgdmFyIGlucHV0Q29tbW9uID0gcmVmLmlucHV0Q29tbW9uO1xuICB2YXIgcmVmJDEgPSB3ZWV4LnV0aWxzO1xuICB2YXIgZXh0ZW5kID0gcmVmJDEuZXh0ZW5kO1xuICB2YXIgbWFwRm9ybUV2ZW50cyA9IHJlZiQxLm1hcEZvcm1FdmVudHM7XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiAnd2VleC10ZXh0YXJlYScsXG4gICAgbWl4aW5zOiBbaW5wdXRDb21tb25dLFxuICAgIHByb3BzOiB7XG4gICAgICB2YWx1ZTogU3RyaW5nLFxuICAgICAgcGxhY2Vob2xkZXI6IFN0cmluZyxcbiAgICAgIGRpc2FibGVkOiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfSxcbiAgICAgIGF1dG9mb2N1czoge1xuICAgICAgICB0eXBlOiBbU3RyaW5nLCBCb29sZWFuXSxcbiAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgIH0sXG4gICAgICByb3dzOiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIE51bWJlcl0sXG4gICAgICAgIGRlZmF1bHQ6IDJcbiAgICAgIH0sXG4gICAgICByZXR1cm5LZXlUeXBlOiBTdHJpbmdcbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAvLyBpZiAoXCJwcm9kdWN0aW9uXCIgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIC8vICAgdmFsaWRhdGVTdHlsZXMoJ3RleHRhcmVhJywgdGhpcy4kdm5vZGUuZGF0YSAmJiB0aGlzLiR2bm9kZS5kYXRhLnN0YXRpY1N0eWxlKVxuICAgICAgLy8gfVxuICAgICAgdmFyIGV2ZW50cyA9IGV4dGVuZChjcmVhdGVFdmVudE1hcCh0aGlzKSwgbWFwRm9ybUV2ZW50cyh0aGlzKSk7XG4gICAgICByZXR1cm4gY3JlYXRlRWxlbWVudCgnaHRtbDp0ZXh0YXJlYScsIHtcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAnd2VleC10eXBlJzogJ3RleHRhcmVhJyxcbiAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgICBkaXNhYmxlZDogKHRoaXMuZGlzYWJsZWQgIT09ICdmYWxzZScgJiYgdGhpcy5kaXNhYmxlZCAhPT0gZmFsc2UpLFxuICAgICAgICAgIGF1dG9mb2N1czogKHRoaXMuYXV0b2ZvY3VzICE9PSAnZmFsc2UnICYmIHRoaXMuYXV0b2ZvY3VzICE9PSBmYWxzZSksXG4gICAgICAgICAgcGxhY2Vob2xkZXI6IHRoaXMucGxhY2Vob2xkZXIsXG4gICAgICAgICAgcm93czogdGhpcy5yb3dzLFxuICAgICAgICAgICdyZXR1cm4ta2V5LXR5cGUnOiB0aGlzLnJldHVybktleVR5cGVcbiAgICAgICAgfSxcbiAgICAgICAgZG9tUHJvcHM6IHtcbiAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZVxuICAgICAgICB9LFxuICAgICAgICBvbjogdGhpcy5jcmVhdGVLZXlib2FyZEV2ZW50KGV2ZW50cyksXG4gICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC10ZXh0YXJlYSB3ZWV4LWVsJyxcbiAgICAgICAgc3RhdGljU3R5bGU6IGV4dHJhY3RDb21wb25lbnRTdHlsZSh0aGlzKVxuICAgICAgfSlcbiAgICB9LFxuICAgIF9jc3M6IF9jc3MkOFxuICB9XG59XG5cbnZhciB0ZXh0YXJlYSA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAod2VleCkge1xuICAgIHdlZXgucmVnaXN0ZXJDb21wb25lbnQoJ3RleHRhcmVhJywgZ2V0VGV4dGFyZWEod2VleCkpO1xuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuZnVuY3Rpb24gZ2V0VmlkZW8gKHdlZXgpIHtcbiAgdmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICB2YXIgY3JlYXRlRXZlbnRNYXAgPSB3ZWV4LmNyZWF0ZUV2ZW50TWFwO1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3dlZXgtdmlkZW8nLFxuICAgIHByb3BzOiB7XG4gICAgICBzcmM6IFN0cmluZyxcbiAgICAgIHBsYXlTdGF0dXM6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICBkZWZhdWx0OiAncGF1c2UnLFxuICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIHZhbGlkYXRvciAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gWydwbGF5JywgJ3BhdXNlJ10uaW5kZXhPZih2YWx1ZSkgIT09IC0xXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhdXRvcGxheToge1xuICAgICAgICB0eXBlOiBbU3RyaW5nLCBCb29sZWFuXSxcbiAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBhdXRvUGxheToge1xuICAgICAgICB0eXBlOiBbU3RyaW5nLCBCb29sZWFuXSxcbiAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICAgIH0sXG4gICAgICBwbGF5c2lubGluZToge1xuICAgICAgICB0eXBlOiBbU3RyaW5nLCBCb29sZWFuXSxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGNvbnRyb2xzOiB7XG4gICAgICAgIHR5cGU6IFtTdHJpbmcsIEJvb2xlYW5dLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgICAgfVxuICAgIH0sXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoY3JlYXRlRWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMucGxheVN0YXR1cyA9PT0gJ3BsYXknKSB7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLiRlbCAmJiB0aGlzLiRlbC5wbGF5KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5wbGF5U3RhdHVzID09PSAncGF1c2UnKSB7XG4gICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLiRlbCAmJiB0aGlzLiRlbC5wYXVzZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2h0bWw6dmlkZW8nLCB7XG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgJ3dlZXgtdHlwZSc6ICd2aWRlbycsXG4gICAgICAgICAgYXV0b3BsYXk6ICgodGhpcy5hdXRvcGxheSAhPT0gJ2ZhbHNlJyAmJiB0aGlzLmF1dG9wbGF5ICE9PSBmYWxzZSlcbiAgICAgICAgICAgIHx8ICh0aGlzLmF1dG9QbGF5ICE9PSAnZmFsc2UnICYmIHRoaXMuYXV0b1BsYXkgIT09IGZhbHNlKSksXG4gICAgICAgICAgJ3dlYmtpdC1wbGF5c2lubGluZSc6IHRoaXMucGxheXNpbmxpbmUsXG4gICAgICAgICAgY29udHJvbHM6IHRoaXMuY29udHJvbHMsXG4gICAgICAgICAgc3JjOiB0aGlzLnNyY1xuICAgICAgICB9LFxuICAgICAgICBvbjogY3JlYXRlRXZlbnRNYXAodGhpcywgWydzdGFydCcsICdwYXVzZScsICdmaW5pc2gnLCAnZmFpbCddKSxcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd3ZWV4LXZpZGVvIHdlZXgtZWwnLFxuICAgICAgICBzdGF0aWNTdHlsZTogZXh0cmFjdENvbXBvbmVudFN0eWxlKHRoaXMpXG4gICAgICB9KVxuICAgIH1cbiAgfVxufVxuXG52YXIgdmlkZW8gPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICB3ZWV4LnJlZ2lzdGVyQ29tcG9uZW50KCd2aWRlbycsIGdldFZpZGVvKHdlZXgpKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbnZhciBfY3NzJDkgPSBcIlxcbi53ZWV4LXdlYiB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlcjogbm9uZTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblwiO1xuXG5mdW5jdGlvbiBnZXRXZWIgKHdlZXgpIHtcbiAgdmFyIGV4dHJhY3RDb21wb25lbnRTdHlsZSA9IHdlZXguZXh0cmFjdENvbXBvbmVudFN0eWxlO1xuICB2YXIgY3JlYXRlRXZlbnRNYXAgPSB3ZWV4LmNyZWF0ZUV2ZW50TWFwO1xuICB2YXIgcmVmID0gd2VleC51dGlscztcbiAgdmFyIGNyZWF0ZUV2ZW50ID0gcmVmLmNyZWF0ZUV2ZW50O1xuXG4gIHJldHVybiB7XG4gICAgbmFtZTogJ3dlZXgtd2ViJyxcbiAgICBwcm9wczoge1xuICAgICAgc3JjOiBTdHJpbmdcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIC8vIFRPRE86IGNoZWNrIGNyb3NzLW9yaWdpblxuICAgICAgZ29CYWNrOiBmdW5jdGlvbiBnb0JhY2sgKCkge1xuICAgICAgICBpZiAodGhpcy4kZWwpIHtcbiAgICAgICAgICB0aGlzLiRlbC5jb250ZW50V2luZG93Lmhpc3RvcnkuYmFjaygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZ29Gb3J3YXJkOiBmdW5jdGlvbiBnb0ZvcndhcmQgKCkge1xuICAgICAgICBpZiAodGhpcy4kZWwpIHtcbiAgICAgICAgICB0aGlzLiRlbC5jb250ZW50V2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVsb2FkOiBmdW5jdGlvbiByZWxvYWQgKCkge1xuICAgICAgICBpZiAodGhpcy4kZWwpIHtcbiAgICAgICAgICB0aGlzLiRlbC5jb250ZW50V2luZG93Lmhpc3RvcnkucmVsb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuJGVsKSB7XG4gICAgICAgIHRoaXMuJGVtaXQoJ3BhZ2VzdGFydCcsIGNyZWF0ZUV2ZW50KHRoaXMuJGVsLCAncGFnZXN0YXJ0JywgeyB1cmw6IHRoaXMuc3JjIH0pKTtcbiAgICAgICAgdGhpcy4kZWwuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHRoaXMkMS4kZW1pdCgncGFnZWZpbmlzaCcsIGNyZWF0ZUV2ZW50KHRoaXMkMS4kZWwsICdwYWdlZmluaXNoJywgeyB1cmw6IHRoaXMkMS5zcmMgfSkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGNyZWF0ZUVsZW1lbnQpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAvLyBpZiAoXCJwcm9kdWN0aW9uXCIgPT09ICdkZXZlbG9wbWVudCcpIHtcbiAgICAgIC8vICAgdmFsaWRhdGVTdHlsZXMoJ3dlYicsIHRoaXMuJHZub2RlLmRhdGEgJiYgdGhpcy4kdm5vZGUuZGF0YS5zdGF0aWNTdHlsZSlcbiAgICAgIC8vIH1cbiAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KCdpZnJhbWUnLCB7XG4gICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgJ3dlZXgtdHlwZSc6ICd3ZWInLFxuICAgICAgICAgIHNyYzogdGhpcy5zcmNcbiAgICAgICAgfSxcbiAgICAgICAgb246IGNyZWF0ZUV2ZW50TWFwKHRoaXMsIFsnZXJyb3InXSksXG4gICAgICAgIHN0YXRpY0NsYXNzOiAnd2VleC13ZWIgd2VleC1lbCcsXG4gICAgICAgIHN0YXRpY1N0eWxlOiBleHRyYWN0Q29tcG9uZW50U3R5bGUodGhpcylcbiAgICAgIH0pXG4gICAgfSxcbiAgICBfY3NzOiBfY3NzJDlcbiAgfVxufVxuXG52YXIgd2ViID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3RlckNvbXBvbmVudCgnd2ViJywgZ2V0V2ViKHdlZXgpKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgY29tcG9uZW50cyA9IFtcbiAgYSxcbiAgZGl2LFxuICBpbWFnZSQxLFxuICBpbnB1dCxcbiAgX3N3aXRjaCxcbiAgc2Nyb2xsYWJsZSxcbiAgc2xpZGVyLFxuICB0ZXh0LFxuICB0ZXh0YXJlYSxcbiAgdmlkZW8sXG4gIHdlYlxuXTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgc3VwcG9ydEdlb2xvY2F0aW9uID0gJ2dlb2xvY2F0aW9uJyBpbiBuYXZpZ2F0b3I7XG52YXIgZXJyb3JNc2cgPSBcIltoNS1yZW5kZXJdOiBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBnZW9sb2NhdGlvbi5cIjtcblxudmFyIGdlb2xvY2F0aW9uID0ge1xuICAvLyBvcHRpb25zOlxuICAvLyAgIC0gZW5hYmxlSGlnaEFjY3VyYWN5IG9wdGlvbmFsLCB2YWx1ZSBpcyB0cnVlIG9yIGZhbHNlLCBmYWxzZSBieSBkZWZhdWx0LlxuICAvLyAgIC0gdGltZW91dCBbbm9uZS1uYXRpdmVdIG9wdGlvbmFsLCB2YWx1ZSBpcyBhIG51bWJlciAobWlsbGlzZWNvbmRzKSwgZGVmYXVsdCB2YXVsZSBpcyBGSU5GSU5JVFkuXG4gIC8vICAgLSBtYXhpbXVtQWdlIFtub25lLW5hdGl2ZV0gb3B0aW9uYWwsIHZhbHVlIGlzIGEgbnVtYmVyIChtaWxsaXNlY29uZHMpLCBkZWZhdWx0IHZhbHVlIGlzIDAuXG4gIGdldEN1cnJlbnRQb3NpdGlvbjogZnVuY3Rpb24gZ2V0Q3VycmVudFBvc2l0aW9uIChzdWNjZXNzQ2JJZCwgZXJyb3JDYklkLCBvcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgc3VjY2Vzc0NiID0gZnVuY3Rpb24gKHBvcykgeyByZXR1cm4gdGhpcyQxLnNlbmRlci5wZXJmb3JtQ2FsbGJhY2soc3VjY2Vzc0NiSWQsIHBvcyk7IH07XG4gICAgdmFyIGVycm9yQ2IgPSBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiB0aGlzJDEuc2VuZGVyLnBlcmZvcm1DYWxsYmFjayhlcnJvckNiSWQsIGVycik7IH07XG4gICAgaWYgKHN1cHBvcnRHZW9sb2NhdGlvbikge1xuICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbihzdWNjZXNzQ2IsIGVycm9yQ2IsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihlcnJvck1zZyk7XG4gICAgICBlcnJvckNiKG5ldyBFcnJvcihlcnJvck1zZykpO1xuICAgIH1cbiAgfSxcblxuICAvLyBvcHRpb25zOiB0aGUgc2FtZSB3aXRoIGBnZXRDdXJyZW50UG9zaXRpb25gLlxuICB3YXRjaFBvc2l0aW9uOiBmdW5jdGlvbiB3YXRjaFBvc2l0aW9uIChzdWNjZXNzQ2JJZCwgZXJyb3JDYklkLCBvcHRpb25zKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgc3VjY2Vzc0NiID0gZnVuY3Rpb24gKHBvcykgeyByZXR1cm4gdGhpcyQxLnNlbmRlci5wZXJmb3JtQ2FsbGJhY2soc3VjY2Vzc0NiSWQsIHBvcywgdHJ1ZSk7IH07XG4gICAgdmFyIGVycm9yQ2IgPSBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiB0aGlzJDEuc2VuZGVyLnBlcmZvcm1DYWxsYmFjayhlcnJvckNiSWQsIGVycik7IH07XG4gICAgaWYgKHN1cHBvcnRHZW9sb2NhdGlvbikge1xuICAgICAgdmFyIGlkID0gbmF2aWdhdG9yLmdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24oZnVuY3Rpb24gKHBvcykge1xuICAgICAgICBwb3Mud2F0Y2hJZCA9IGlkO1xuICAgICAgICBzdWNjZXNzQ2IocG9zKTtcbiAgICAgIH0sIGVycm9yQ2IsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihlcnJvck1zZyk7XG4gICAgICBlcnJvckNiKG5ldyBFcnJvcihlcnJvck1zZykpO1xuICAgIH1cbiAgfSxcblxuICBjbGVhcldhdGNoOiBmdW5jdGlvbiBjbGVhcldhdGNoICh3YXRjaElkKSB7XG4gICAgaWYgKHN1cHBvcnRHZW9sb2NhdGlvbikge1xuICAgICAgbmF2aWdhdG9yLmdlb2xvY2F0aW9uLmNsZWFyV2F0Y2god2F0Y2hJZCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKGVycm9yTXNnKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBtZXRhID0ge1xuICBnZW9sb2NhdGlvbjogW3tcbiAgICBuYW1lOiAnZ2V0Q3VycmVudFBvc2l0aW9uJyxcbiAgICBhcmdzOiBbJ2Z1bmN0aW9uJywgJ2Z1bmN0aW9uJywgJ29iamVjdCddXG4gIH0sIHtcbiAgICBuYW1lOiAnd2F0Y2hQb3NpdGlvbicsXG4gICAgYXJnczogWydmdW5jdGlvbicsICdmdW5jdGlvbicsICdvYmplY3QnXVxuICB9LCB7XG4gICAgbmFtZTogJ2NsZWFyV2F0Y2gnLFxuICAgIGFyZ3M6IFsnc3RyaW5nJ11cbiAgfV1cbn07XG5cbnZhciBnZW9sb2NhdGlvbiQxID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0IChXZWV4KSB7XG4gICAgV2VleC5yZWdpc3RlckFwaU1vZHVsZSgnZ2VvbG9jYXRpb24nLCBnZW9sb2NhdGlvbiwgbWV0YSk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLyogZ2xvYmFsIGxvY2FsU3RvcmFnZSAqL1xuXG52YXIgc3VwcG9ydExvY2FsU3RvcmFnZSA9IGZhbHNlO1xudHJ5IHtcbiAgc3VwcG9ydExvY2FsU3RvcmFnZSA9IHR5cGVvZiBsb2NhbFN0b3JhZ2UgIT09ICd1bmRlZmluZWQnO1xufVxuY2F0Y2ggKGVycikge1xuICAvLyBub3Qgc3VwcG9ydC5cbn1cblxudmFyIFNVQ0NFU1MgPSAnc3VjY2Vzcyc7XG52YXIgRkFJTEVEID0gJ2ZhaWxlZCc7XG52YXIgSU5WQUxJRF9QQVJBTSA9ICdpbnZhbGlkX3BhcmFtJztcbnZhciBVTkRFRklORUQgPSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gY2FsbEZhaWwgKHNlbmRlciwgY2FsbGJhY2tJZCwgZXJyb3JNc2cpIHtcbiAgc2VuZGVyLnBlcmZvcm1DYWxsYmFjayhjYWxsYmFja0lkLCB7XG4gICAgcmVzdWx0OiBGQUlMRUQsXG4gICAgZGF0YTogZXJyb3JNc2cgfHwgVU5ERUZJTkVEXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjYWxsTm90U3VwcG9ydEZhaWwgKHNlbmRlciwgY2FsbGJhY2tJZCkge1xuICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICByZXN1bHQ6IEZBSUxFRCxcbiAgICBkYXRhOiAnbG9jYWxTdG9yYWdlIGlzIGRpc2FibGVkIG9yIG5vdCBzdXBwb3J0ZWQuJ1xuICB9KTtcbn1cblxudmFyIHN0b3JhZ2UgPSB7XG5cbiAgLyoqXG4gICAqIFdoZW4gcGFzc2VkIGEga2V5IG5hbWUgYW5kIHZhbHVlLCB3aWxsIGFkZCB0aGF0IGtleSB0byB0aGUgc3RvcmFnZSxcbiAgICogb3IgdXBkYXRlIHRoYXQga2V5J3MgdmFsdWUgaWYgaXQgYWxyZWFkeSBleGlzdHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIG5vdCBudWxsIG5vciB1bmRpZmluZWTvvIxidXQgMCB3b3Jrcy5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tJZFxuICAgKi9cbiAgc2V0SXRlbTogZnVuY3Rpb24gKGtleSwgdmFsdWUsIGNhbGxiYWNrSWQpIHtcbiAgICB2YXIgc2VuZGVyID0gdGhpcy5zZW5kZXI7XG4gICAgaWYgKCFzdXBwb3J0TG9jYWxTdG9yYWdlKSB7XG4gICAgICByZXR1cm4gY2FsbE5vdFN1cHBvcnRGYWlsKHNlbmRlciwgY2FsbGJhY2tJZClcbiAgICB9XG4gICAgaWYgKCFrZXkgfHwgKCF2YWx1ZSAmJiB2YWx1ZSAhPT0gMCkpIHtcbiAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soY2FsbGJhY2tJZCwge1xuICAgICAgICByZXN1bHQ6ICdmYWlsZWQnLFxuICAgICAgICBkYXRhOiBJTlZBTElEX1BBUkFNXG4gICAgICB9KTtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB0cnkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG4gICAgICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICAgICAgcmVzdWx0OiBTVUNDRVNTLFxuICAgICAgICBkYXRhOiBVTkRFRklORURcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgLy8gYWNjZXB0IGFueSBleGNlcHRpb24gdGhyb3duIGR1cmluZyBhIHN0b3JhZ2UgYXR0ZW1wdCBhcyBhIHF1b3RhIGVycm9yXG4gICAgICBjYWxsRmFpbChzZW5kZXIsIGNhbGxiYWNrSWQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogV2hlbiBwYXNzZWQgYSBrZXkgbmFtZSwgd2lsbCByZXR1cm4gdGhhdCBrZXkncyB2YWx1ZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja0lkXG4gICAqL1xuICBnZXRJdGVtOiBmdW5jdGlvbiAoa2V5LCBjYWxsYmFja0lkKSB7XG4gICAgdmFyIHNlbmRlciA9IHRoaXMuc2VuZGVyO1xuICAgIGlmICghc3VwcG9ydExvY2FsU3RvcmFnZSkge1xuICAgICAgcmV0dXJuIGNhbGxOb3RTdXBwb3J0RmFpbChzZW5kZXIsIGNhbGxiYWNrSWQpXG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICAgICAgcmVzdWx0OiBGQUlMRUQsXG4gICAgICAgIGRhdGE6IElOVkFMSURfUEFSQU1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICB2YXIgdmFsID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcbiAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soY2FsbGJhY2tJZCwge1xuICAgICAgICByZXN1bHQ6IHZhbCA/IFNVQ0NFU1MgOiBGQUlMRUQsXG4gICAgICAgIGRhdGE6IHZhbCB8fCBVTkRFRklORURcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgLy8gYWNjZXB0IGFueSBleGNlcHRpb24gdGhyb3duIGR1cmluZyBhIHN0b3JhZ2UgYXR0ZW1wdCBhcyBhIHF1b3RhIGVycm9yXG4gICAgICBjYWxsRmFpbChzZW5kZXIsIGNhbGxiYWNrSWQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICpXaGVuIHBhc3NlZCBhIGtleSBuYW1lLCB3aWxsIHJlbW92ZSB0aGF0IGtleSBmcm9tIHRoZSBzdG9yYWdlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrSWRcbiAgICovXG4gIHJlbW92ZUl0ZW06IGZ1bmN0aW9uIChrZXksIGNhbGxiYWNrSWQpIHtcbiAgICB2YXIgc2VuZGVyID0gdGhpcy5zZW5kZXI7XG4gICAgaWYgKCFzdXBwb3J0TG9jYWxTdG9yYWdlKSB7XG4gICAgICByZXR1cm4gY2FsbE5vdFN1cHBvcnRGYWlsKHNlbmRlciwgY2FsbGJhY2tJZClcbiAgICB9XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soY2FsbGJhY2tJZCwge1xuICAgICAgICByZXN1bHQ6IEZBSUxFRCxcbiAgICAgICAgZGF0YTogSU5WQUxJRF9QQVJBTVxuICAgICAgfSk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XG4gICAgICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICAgICAgcmVzdWx0OiBTVUNDRVNTLFxuICAgICAgICBkYXRhOiBVTkRFRklORURcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgLy8gYWNjZXB0IGFueSBleGNlcHRpb24gdGhyb3duIGR1cmluZyBhIHN0b3JhZ2UgYXR0ZW1wdCBhcyBhIHF1b3RhIGVycm9yXG4gICAgICBjYWxsRmFpbChzZW5kZXIsIGNhbGxiYWNrSWQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIG9mIGRhdGEgaXRlbXMgc3RvcmVkIGluIHRoZSBTdG9yYWdlIG9iamVjdC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tJZFxuICAgKi9cbiAgbGVuZ3RoOiBmdW5jdGlvbiAoY2FsbGJhY2tJZCkge1xuICAgIHZhciBzZW5kZXIgPSB0aGlzLnNlbmRlcjtcbiAgICBpZiAoIXN1cHBvcnRMb2NhbFN0b3JhZ2UpIHtcbiAgICAgIHJldHVybiBjYWxsTm90U3VwcG9ydEZhaWwoc2VuZGVyLCBjYWxsYmFja0lkKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgdmFyIGxlbiA9IGxvY2FsU3RvcmFnZS5sZW5ndGg7XG4gICAgICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICAgICAgcmVzdWx0OiBTVUNDRVNTLFxuICAgICAgICBkYXRhOiBsZW5cbiAgICAgIH0pO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgLy8gYWNjZXB0IGFueSBleGNlcHRpb24gdGhyb3duIGR1cmluZyBhIHN0b3JhZ2UgYXR0ZW1wdCBhcyBhIHF1b3RhIGVycm9yXG4gICAgICBjYWxsRmFpbChzZW5kZXIsIGNhbGxiYWNrSWQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGFsbCBrZXlzIHN0b3JlZCBpbiBTdG9yYWdlIG9iamVjdC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tJZFxuICAgKi9cbiAgZ2V0QWxsS2V5czogZnVuY3Rpb24gKGNhbGxiYWNrSWQpIHtcbiAgICB2YXIgc2VuZGVyID0gdGhpcy5zZW5kZXI7XG4gICAgaWYgKCFzdXBwb3J0TG9jYWxTdG9yYWdlKSB7XG4gICAgICByZXR1cm4gY2FsbE5vdFN1cHBvcnRGYWlsKHNlbmRlciwgY2FsbGJhY2tJZClcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIHZhciBfYXJyID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2FsU3RvcmFnZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBfYXJyLnB1c2gobG9jYWxTdG9yYWdlLmtleShpKSk7XG4gICAgICB9XG4gICAgICBzZW5kZXIucGVyZm9ybUNhbGxiYWNrKGNhbGxiYWNrSWQsIHtcbiAgICAgICAgcmVzdWx0OiBTVUNDRVNTLFxuICAgICAgICBkYXRhOiBfYXJyXG4gICAgICB9KTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGFjY2VwdCBhbnkgZXhjZXB0aW9uIHRocm93biBkdXJpbmcgYSBzdG9yYWdlIGF0dGVtcHQgYXMgYSBxdW90YSBlcnJvclxuICAgICAgY2FsbEZhaWwoc2VuZGVyLCBjYWxsYmFja0lkKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBtZXRhJDEgPSB7XG4gIHN0b3JhZ2U6IFt7XG4gICAgbmFtZTogJ3NldEl0ZW0nLFxuICAgIGFyZ3M6IFsnc3RyaW5nJywgJ3N0cmluZycsICdmdW5jdGlvbiddXG4gIH0sIHtcbiAgICBuYW1lOiAnZ2V0SXRlbScsXG4gICAgYXJnczogWydzdHJpbmcnLCAnZnVuY3Rpb24nXVxuICB9LCB7XG4gICAgbmFtZTogJ3JlbW92ZUl0ZW0nLFxuICAgIGFyZ3M6IFsnc3RyaW5nJywgJ2Z1bmN0aW9uJ11cbiAgfSwge1xuICAgIG5hbWU6ICdsZW5ndGgnLFxuICAgIGFyZ3M6IFsnZnVuY3Rpb24nXVxuICB9LCB7XG4gICAgbmFtZTogJ2dldEFsbEtleXMnLFxuICAgIGFyZ3M6IFsnZnVuY3Rpb24nXVxuICB9XVxufTtcblxudmFyIHN0b3JhZ2UkMSA9IHtcbiAgaW5pdDogZnVuY3Rpb24gKFdlZXgpIHtcbiAgICBXZWV4LnJlZ2lzdGVyQXBpTW9kdWxlKCdzdG9yYWdlJywgc3RvcmFnZSwgbWV0YSQxKTtcbiAgfVxufTtcblxuKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSAmJiAod2luZG93ID0ge2N0cmw6IHt9LCBsaWI6IHt9fSk7IXdpbmRvdy5jdHJsICYmICh3aW5kb3cuY3RybCA9IHt9KTshd2luZG93LmxpYiAmJiAod2luZG93LmxpYiA9IHt9KTshZnVuY3Rpb24oYSxiKXtmdW5jdGlvbiBjKGEpe3ZhciBiPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwicGFyYW1zXCIse3NldDpmdW5jdGlvbihhKXtpZihcIm9iamVjdFwiPT10eXBlb2YgYSl7Zm9yKHZhciBjIGluIGIpeyBkZWxldGUgYltjXTsgfWZvcih2YXIgYyBpbiBhKXsgYltjXT1hW2NdOyB9fX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGJ9LGVudW1lcmFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInNlYXJjaFwiLHtzZXQ6ZnVuY3Rpb24oYSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGEpezA9PT1hLmluZGV4T2YoXCI/XCIpJiYoYT1hLnN1YnN0cigxKSk7dmFyIGM9YS5zcGxpdChcIiZcIik7Zm9yKHZhciBkIGluIGIpeyBkZWxldGUgYltkXTsgfWZvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXt2YXIgZj1jW2VdLnNwbGl0KFwiPVwiKTtpZih2b2lkIDAhPT1mWzFdJiYoZlsxXT1mWzFdLnRvU3RyaW5nKCkpLGZbMF0peyB0cnl7YltkZWNvZGVVUklDb21wb25lbnQoZlswXSldPWRlY29kZVVSSUNvbXBvbmVudChmWzFdKTt9Y2F0Y2goZyl7YltmWzBdXT1mWzFdO30gfX19fSxnZXQ6ZnVuY3Rpb24oKXt2YXIgYT1bXTtmb3IodmFyIGMgaW4gYil7IGlmKHZvaWQgMCE9PWJbY10peyBpZihcIlwiIT09YltjXSl7IHRyeXthLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGMpK1wiPVwiK2VuY29kZVVSSUNvbXBvbmVudChiW2NdKSk7fWNhdGNoKGQpe2EucHVzaChjK1wiPVwiK2JbY10pO30gfWVsc2UgeyB0cnl7YS5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChjKSk7fWNhdGNoKGQpe2EucHVzaChjKTt9IH0gfSB9cmV0dXJuIGEubGVuZ3RoP1wiP1wiK2Euam9pbihcIiZcIik6XCJcIn0sZW51bWVyYWJsZTohMH0pO3ZhciBjO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLFwiaGFzaFwiLHtzZXQ6ZnVuY3Rpb24oYSl7XCJzdHJpbmdcIj09dHlwZW9mIGEmJihhJiZhLmluZGV4T2YoXCIjXCIpPDAmJihhPVwiI1wiK2EpLGM9YXx8XCJcIik7fSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY30sZW51bWVyYWJsZTohMH0pLHRoaXMuc2V0PWZ1bmN0aW9uKGEpe2E9YXx8XCJcIjt2YXIgYjtpZighKGI9YS5tYXRjaChuZXcgUmVnRXhwKFwiXihbYS16MC05LV0rOik/Wy9dezJ9KD86KFteQC86P10rKSg/OjooW15ALzpdKykpP0ApPyhbXjovPyNdKykoPzpbOl0oWzAtOV0rKSk/KFsvXVtePyM7XSopPyg/Ols/XShbXiNdKikpPyhbI11bXj9dKik/JFwiLFwiaVwiKSkpKXsgdGhyb3cgbmV3IEVycm9yKFwiV3JvbmcgdXJpIHNjaGVtZS5cIik7IH10aGlzLnByb3RvY29sPWJbMV18fChcIm9iamVjdFwiPT10eXBlb2YgbG9jYXRpb24/bG9jYXRpb24ucHJvdG9jb2w6XCJcIiksdGhpcy51c2VybmFtZT1iWzJdfHxcIlwiLHRoaXMucGFzc3dvcmQ9YlszXXx8XCJcIix0aGlzLmhvc3RuYW1lPXRoaXMuaG9zdD1iWzRdLHRoaXMucG9ydD1iWzVdfHxcIlwiLHRoaXMucGF0aG5hbWU9Yls2XXx8XCIvXCIsdGhpcy5zZWFyY2g9Yls3XXx8XCJcIix0aGlzLmhhc2g9Yls4XXx8XCJcIix0aGlzLm9yaWdpbj10aGlzLnByb3RvY29sK1wiLy9cIit0aGlzLmhvc3RuYW1lO30sdGhpcy50b1N0cmluZz1mdW5jdGlvbigpe3ZhciBhPXRoaXMucHJvdG9jb2wrXCIvL1wiO3JldHVybiB0aGlzLnVzZXJuYW1lJiYoYSs9dGhpcy51c2VybmFtZSx0aGlzLnBhc3N3b3JkJiYoYSs9XCI6XCIrdGhpcy5wYXNzd29yZCksYSs9XCJAXCIpLGErPXRoaXMuaG9zdCx0aGlzLnBvcnQmJlwiODBcIiE9PXRoaXMucG9ydCYmKGErPVwiOlwiK3RoaXMucG9ydCksdGhpcy5wYXRobmFtZSYmKGErPXRoaXMucGF0aG5hbWUpLHRoaXMuc2VhcmNoJiYoYSs9dGhpcy5zZWFyY2gpLHRoaXMuaGFzaCYmKGErPXRoaXMuaGFzaCksYX0sYSYmdGhpcy5zZXQoYS50b1N0cmluZygpKTt9Yi5odHRwdXJsPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgYyhhKX07fSh3aW5kb3csd2luZG93LmxpYnx8KHdpbmRvdy5saWI9e30pKTtcblxudmFyIGluZGV4JDUgPSBmdW5jdGlvbiAoc3RyKSB7XG5cdHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKSpdL2csIGZ1bmN0aW9uIChjKSB7XG5cdFx0cmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcblx0fSk7XG59O1xuXG4vKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5JDEgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCQyKHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbnZhciBpbmRleCQ3ID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBhcmd1bWVudHMkMSA9IGFyZ3VtZW50cztcblxuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QkMih0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzJDFbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eSQxLmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG5cbnZhciBzdHJpY3RVcmlFbmNvZGUgPSBpbmRleCQ1O1xudmFyIG9iamVjdEFzc2lnbiA9IGluZGV4JDc7XG5cbmZ1bmN0aW9uIGVuY29kZXJGb3JBcnJheUZvcm1hdChvcHRzKSB7XG5cdHN3aXRjaCAob3B0cy5hcnJheUZvcm1hdCkge1xuXHRcdGNhc2UgJ2luZGV4Jzpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSwgaW5kZXgpIHtcblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSBudWxsID8gW1xuXHRcdFx0XHRcdGVuY29kZShrZXksIG9wdHMpLFxuXHRcdFx0XHRcdCdbJyxcblx0XHRcdFx0XHRpbmRleCxcblx0XHRcdFx0XHQnXSdcblx0XHRcdFx0XS5qb2luKCcnKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnWycsXG5cdFx0XHRcdFx0ZW5jb2RlKGluZGV4LCBvcHRzKSxcblx0XHRcdFx0XHQnXT0nLFxuXHRcdFx0XHRcdGVuY29kZSh2YWx1ZSwgb3B0cylcblx0XHRcdFx0XS5qb2luKCcnKTtcblx0XHRcdH07XG5cblx0XHRjYXNlICdicmFja2V0Jzpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgPyBlbmNvZGUoa2V5LCBvcHRzKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnW109Jyxcblx0XHRcdFx0XHRlbmNvZGUodmFsdWUsIG9wdHMpXG5cdFx0XHRcdF0uam9pbignJyk7XG5cdFx0XHR9O1xuXG5cdFx0ZGVmYXVsdDpcblx0XHRcdHJldHVybiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgPyBlbmNvZGUoa2V5LCBvcHRzKSA6IFtcblx0XHRcdFx0XHRlbmNvZGUoa2V5LCBvcHRzKSxcblx0XHRcdFx0XHQnPScsXG5cdFx0XHRcdFx0ZW5jb2RlKHZhbHVlLCBvcHRzKVxuXHRcdFx0XHRdLmpvaW4oJycpO1xuXHRcdFx0fTtcblx0fVxufVxuXG5mdW5jdGlvbiBwYXJzZXJGb3JBcnJheUZvcm1hdChvcHRzKSB7XG5cdHZhciByZXN1bHQ7XG5cblx0c3dpdGNoIChvcHRzLmFycmF5Rm9ybWF0KSB7XG5cdFx0Y2FzZSAnaW5kZXgnOlxuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uIChrZXksIHZhbHVlLCBhY2N1bXVsYXRvcikge1xuXHRcdFx0XHRyZXN1bHQgPSAvXFxbKFxcZCopXFxdJC8uZXhlYyhrZXkpO1xuXG5cdFx0XHRcdGtleSA9IGtleS5yZXBsYWNlKC9cXFtcXGQqXFxdJC8sICcnKTtcblxuXHRcdFx0XHRpZiAoIXJlc3VsdCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoYWNjdW11bGF0b3Jba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IHt9O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XVtyZXN1bHRbMV1dID0gdmFsdWU7XG5cdFx0XHR9O1xuXG5cdFx0Y2FzZSAnYnJhY2tldCc6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSB7XG5cdFx0XHRcdHJlc3VsdCA9IC8oXFxbXFxdKSQvLmV4ZWMoa2V5KTtcblx0XHRcdFx0a2V5ID0ga2V5LnJlcGxhY2UoL1xcW1xcXSQvLCAnJyk7XG5cblx0XHRcdFx0aWYgKCFyZXN1bHQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9IGVsc2UgaWYgKGFjY3VtdWxhdG9yW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSBbdmFsdWVdO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGFjY3VtdWxhdG9yW2tleV0gPSBbXS5jb25jYXQoYWNjdW11bGF0b3Jba2V5XSwgdmFsdWUpO1xuXHRcdFx0fTtcblxuXHRcdGRlZmF1bHQ6XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24gKGtleSwgdmFsdWUsIGFjY3VtdWxhdG9yKSB7XG5cdFx0XHRcdGlmIChhY2N1bXVsYXRvcltrZXldID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRhY2N1bXVsYXRvcltrZXldID0gdmFsdWU7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0YWNjdW11bGF0b3Jba2V5XSA9IFtdLmNvbmNhdChhY2N1bXVsYXRvcltrZXldLCB2YWx1ZSk7XG5cdFx0XHR9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWx1ZSwgb3B0cykge1xuXHRpZiAob3B0cy5lbmNvZGUpIHtcblx0XHRyZXR1cm4gb3B0cy5zdHJpY3QgPyBzdHJpY3RVcmlFbmNvZGUodmFsdWUpIDogZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24ga2V5c1NvcnRlcihpbnB1dCkge1xuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRyZXR1cm4gaW5wdXQuc29ydCgpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcpIHtcblx0XHRyZXR1cm4ga2V5c1NvcnRlcihPYmplY3Qua2V5cyhpbnB1dCkpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcblx0XHRcdHJldHVybiBOdW1iZXIoYSkgLSBOdW1iZXIoYik7XG5cdFx0fSkubWFwKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdHJldHVybiBpbnB1dFtrZXldO1xuXHRcdH0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG52YXIgZXh0cmFjdCA9IGZ1bmN0aW9uIChzdHIpIHtcblx0cmV0dXJuIHN0ci5zcGxpdCgnPycpWzFdIHx8ICcnO1xufTtcblxudmFyIHBhcnNlID0gZnVuY3Rpb24gKHN0ciwgb3B0cykge1xuXHRvcHRzID0gb2JqZWN0QXNzaWduKHthcnJheUZvcm1hdDogJ25vbmUnfSwgb3B0cyk7XG5cblx0dmFyIGZvcm1hdHRlciA9IHBhcnNlckZvckFycmF5Rm9ybWF0KG9wdHMpO1xuXG5cdC8vIENyZWF0ZSBhbiBvYmplY3Qgd2l0aCBubyBwcm90b3R5cGVcblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9xdWVyeS1zdHJpbmcvaXNzdWVzLzQ3XG5cdHZhciByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHRcdHJldHVybiByZXQ7XG5cdH1cblxuXHRzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoL14oXFw/fCN8JikvLCAnJyk7XG5cblx0aWYgKCFzdHIpIHtcblx0XHRyZXR1cm4gcmV0O1xuXHR9XG5cblx0c3RyLnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcblx0XHR2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKS5zcGxpdCgnPScpO1xuXHRcdC8vIEZpcmVmb3ggKHByZSA0MCkgZGVjb2RlcyBgJTNEYCB0byBgPWBcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vc2luZHJlc29yaHVzL3F1ZXJ5LXN0cmluZy9wdWxsLzM3XG5cdFx0dmFyIGtleSA9IHBhcnRzLnNoaWZ0KCk7XG5cdFx0dmFyIHZhbCA9IHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0cy5qb2luKCc9JykgOiB1bmRlZmluZWQ7XG5cblx0XHQvLyBtaXNzaW5nIGA9YCBzaG91bGQgYmUgYG51bGxgOlxuXHRcdC8vIGh0dHA6Ly93My5vcmcvVFIvMjAxMi9XRC11cmwtMjAxMjA1MjQvI2NvbGxlY3QtdXJsLXBhcmFtZXRlcnNcblx0XHR2YWwgPSB2YWwgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZWNvZGVVUklDb21wb25lbnQodmFsKTtcblxuXHRcdGZvcm1hdHRlcihkZWNvZGVVUklDb21wb25lbnQoa2V5KSwgdmFsLCByZXQpO1xuXHR9KTtcblxuXHRyZXR1cm4gT2JqZWN0LmtleXMocmV0KS5zb3J0KCkucmVkdWNlKGZ1bmN0aW9uIChyZXN1bHQsIGtleSkge1xuXHRcdHZhciB2YWwgPSByZXRba2V5XTtcblx0XHRpZiAoQm9vbGVhbih2YWwpICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHZhbCkpIHtcblx0XHRcdC8vIFNvcnQgb2JqZWN0IGtleXMsIG5vdCB2YWx1ZXNcblx0XHRcdHJlc3VsdFtrZXldID0ga2V5c1NvcnRlcih2YWwpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHRba2V5XSA9IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gcmVzdWx0O1xuXHR9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbn07XG5cbnZhciBzdHJpbmdpZnkgPSBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG5cdHZhciBkZWZhdWx0cyA9IHtcblx0XHRlbmNvZGU6IHRydWUsXG5cdFx0c3RyaWN0OiB0cnVlLFxuXHRcdGFycmF5Rm9ybWF0OiAnbm9uZSdcblx0fTtcblxuXHRvcHRzID0gb2JqZWN0QXNzaWduKGRlZmF1bHRzLCBvcHRzKTtcblxuXHR2YXIgZm9ybWF0dGVyID0gZW5jb2RlckZvckFycmF5Rm9ybWF0KG9wdHMpO1xuXG5cdHJldHVybiBvYmogPyBPYmplY3Qua2V5cyhvYmopLnNvcnQoKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuXHRcdHZhciB2YWwgPSBvYmpba2V5XTtcblxuXHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblxuXHRcdGlmICh2YWwgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBlbmNvZGUoa2V5LCBvcHRzKTtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gW107XG5cblx0XHRcdHZhbC5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKHZhbDIpIHtcblx0XHRcdFx0aWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGZvcm1hdHRlcihrZXksIHZhbDIsIHJlc3VsdC5sZW5ndGgpKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oJyYnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZW5jb2RlKGtleSwgb3B0cykgKyAnPScgKyBlbmNvZGUodmFsLCBvcHRzKTtcblx0fSkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG5cdFx0cmV0dXJuIHgubGVuZ3RoID4gMDtcblx0fSkuam9pbignJicpIDogJyc7XG59O1xuXG52YXIgaW5kZXgkNCA9IHtcblx0ZXh0cmFjdDogZXh0cmFjdCxcblx0cGFyc2U6IHBhcnNlLFxuXHRzdHJpbmdpZnk6IHN0cmluZ2lmeVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKiBnbG9iYWwgbGliLCBYTUxIdHRwUmVxdWVzdCAqL1xuLyogZGVwczogaHR0cHVybCAqL1xuXG52YXIgdXRpbHMkMTtcblxudmFyIGpzb25wQ250ID0gMDtcbnZhciBFUlJPUl9TVEFURSA9IC0xO1xuXG5mdW5jdGlvbiBfanNvbnAgKGNvbmZpZywgY2FsbGJhY2ssIHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgdmFyIGNiTmFtZSA9ICdqc29ucF8nICsgKCsranNvbnBDbnQpO1xuICB2YXIgdXJsO1xuXG4gIGlmICghY29uZmlnLnVybCkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1toNS1yZW5kZXJdIGNvbmZpZy51cmwgc2hvdWxkIGJlIHNldCBpbiBfanNvbnAgZm9yIFxcJ2ZldGNoXFwnIEFQSS4nKTtcbiAgfVxuXG4gIGdsb2JhbFtjYk5hbWVdID0gKGZ1bmN0aW9uIChjYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIGNhbGxiYWNrKHtcbiAgICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICAgIG9rOiB0cnVlLFxuICAgICAgICBzdGF0dXNUZXh0OiAnT0snLFxuICAgICAgICBkYXRhOiByZXNwb25zZVxuICAgICAgfSk7XG4gICAgICBkZWxldGUgZ2xvYmFsW2NiXTtcbiAgICB9XG4gIH0pKGNiTmFtZSk7XG5cbiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICB0cnkge1xuICAgIHVybCA9IGxpYi5odHRwdXJsKGNvbmZpZy51cmwpO1xuICB9XG4gIGNhdGNoIChlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbaDUtcmVuZGVyXSBpbnZhbGlkIGNvbmZpZy51cmwgaW4gX2pzb25wIGZvciBcXCdmZXRjaFxcJyBBUEk6ICdcbiAgICAgICsgY29uZmlnLnVybCk7XG4gIH1cbiAgdXJsLnBhcmFtcy5jYWxsYmFjayA9IGNiTmFtZTtcbiAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgc2NyaXB0LnNyYyA9IHVybC50b1N0cmluZygpO1xuICAvLyBzY3JpcHQub25lcnJvciBpcyBub3Qgd29ya2luZyBvbiBJRSBvciBzYWZhcmkuXG4gIC8vIGJ1dCB0aGV5IGFyZSBub3QgY29uc2lkZXJlZCBoZXJlLlxuICBzY3JpcHQub25lcnJvciA9IChmdW5jdGlvbiAoY2IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGVycikge1xuICAgICAgY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gdW5leHBlY3RlZCBlcnJvciBpbiBfanNvbnAgZm9yIFxcJ2ZldGNoXFwnIEFQSScsIGVycik7XG4gICAgICBjYWxsYmFjayh7XG4gICAgICAgIHN0YXR1czogRVJST1JfU1RBVEUsXG4gICAgICAgIG9rOiBmYWxzZSxcbiAgICAgICAgc3RhdHVzVGV4dDogJycsXG4gICAgICAgIGRhdGE6ICcnXG4gICAgICB9KTtcbiAgICAgIGRlbGV0ZSBnbG9iYWxbY2JdO1xuICAgIH1cbiAgfSkoY2JOYW1lKTtcbiAgdmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICBoZWFkLmluc2VydEJlZm9yZShzY3JpcHQsIG51bGwpO1xufVxuXG5mdW5jdGlvbiBfeGhyIChjb25maWcsIGNhbGxiYWNrLCBwcm9ncmVzc0NhbGxiYWNrKSB7XG4gIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgeGhyLnJlc3BvbnNlVHlwZSA9IGNvbmZpZy50eXBlO1xuICB4aHIub3Blbihjb25maWcubWV0aG9kLCBjb25maWcudXJsLCB0cnVlKTtcblxuICAvLyBjb3JzIGNvb2tpZSBzdXBwb3J0XG4gIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzID09PSB0cnVlKSB7XG4gICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gIH1cblxuICB2YXIgaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuICBmb3IgKHZhciBrIGluIGhlYWRlcnMpIHtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrLCBoZWFkZXJzW2tdKTtcbiAgfVxuXG4gIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAocmVzKSB7XG4gICAgY2FsbGJhY2soe1xuICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgb2s6IHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDAsXG4gICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcbiAgICAgIGRhdGE6IHhoci5yZXNwb25zZSxcbiAgICAgIGhlYWRlcnM6IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdCgnXFxuJylcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAob2JqLCBoZWFkZXJTdHIpIHtcbiAgICAgICAgICB2YXIgaGVhZGVyQXJyID0gaGVhZGVyU3RyLm1hdGNoKC8oLispOiAoLispLyk7XG4gICAgICAgICAgaWYgKGhlYWRlckFycikge1xuICAgICAgICAgICAgb2JqW2hlYWRlckFyclsxXV0gPSBoZWFkZXJBcnJbMl07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBvYmpcbiAgICAgICAgfSwge30pXG4gICAgfSk7XG4gIH07XG5cbiAgaWYgKHByb2dyZXNzQ2FsbGJhY2spIHtcbiAgICB4aHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBwcm9ncmVzc0NhbGxiYWNrKHtcbiAgICAgICAgcmVhZHlTdGF0ZTogeGhyLnJlYWR5U3RhdGUsXG4gICAgICAgIHN0YXR1czogeGhyLnN0YXR1cyxcbiAgICAgICAgbGVuZ3RoOiBlLmxvYWRlZCxcbiAgICAgICAgdG90YWw6IGUudG90YWwsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAob2JqLCBoZWFkZXJTdHIpIHtcbiAgICAgICAgICAgIHZhciBoZWFkZXJBcnIgPSBoZWFkZXJTdHIubWF0Y2goLyguKyk6ICguKykvKTtcbiAgICAgICAgICAgIGlmIChoZWFkZXJBcnIpIHtcbiAgICAgICAgICAgICAgb2JqW2hlYWRlckFyclsxXV0gPSBoZWFkZXJBcnJbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JqXG4gICAgICAgICAgfSwge30pXG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gdW5leHBlY3RlZCBlcnJvciBpbiBfeGhyIGZvciBcXCdmZXRjaFxcJyBBUEknLCBlcnIpO1xuICAgIGNhbGxiYWNrKHtcbiAgICAgIHN0YXR1czogRVJST1JfU1RBVEUsXG4gICAgICBvazogZmFsc2UsXG4gICAgICBzdGF0dXNUZXh0OiAnJyxcbiAgICAgIGRhdGE6ICcnXG4gICAgfSk7XG4gIH07XG5cbiAgeGhyLnNlbmQoY29uZmlnLmJvZHkgfHwgbnVsbCk7XG59XG5cbnZhciBzdHJlYW0gPSB7XG5cbiAgLyoqXG4gICAqIHNlbmRIdHRwXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIE5vdGU6IFRoaXMgQVBJIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2Ugc3RyZWFtLmZldGNoIGluc3RlYWQuXG4gICAqIHNlbmQgYSBodHRwIHJlcXVlc3QgdGhyb3VnaCBYSFIuXG4gICAqIEBwYXJhbSAge29ian0gcGFyYW1zXG4gICAqICAtIG1ldGhvZDogJ0dFVCcgfCAnUE9TVCcgfCAnUFVUJyB8ICdERUxFVEUnIHwgJ0hFQUQnIHwgJ1BBVENIJyxcbiAgICogIC0gdXJsOiB1cmwgcmVxdWVzdGVkXG4gICAqIEBwYXJhbSAge3N0cmluZ30gY2FsbGJhY2tJZFxuICAgKi9cbiAgc2VuZEh0dHA6IGZ1bmN0aW9uIChwYXJhbSwgY2FsbGJhY2tJZCkge1xuICAgIGlmICh0eXBlb2YgcGFyYW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBwYXJhbSA9IEpTT04ucGFyc2UocGFyYW0pO1xuICAgICAgfVxuICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFyYW0gIT09ICdvYmplY3QnIHx8ICFwYXJhbS51cmwpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKFxuICAgICAgICAnW2g1LXJlbmRlcl0gaW52YWxpZCBjb25maWcgb3IgaW52YWxpZCBjb25maWcudXJsIGZvciBzZW5kSHR0cCBBUEknKVxuICAgIH1cblxuICAgIHZhciBzZW5kZXIgPSB0aGlzLnNlbmRlcjtcbiAgICB2YXIgbWV0aG9kID0gcGFyYW0ubWV0aG9kIHx8ICdHRVQnO1xuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4aHIub3BlbihtZXRob2QsIHBhcmFtLnVybCwgdHJ1ZSk7XG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soY2FsbGJhY2tJZCwgdGhpcy5yZXNwb25zZVRleHQpO1xuICAgIH07XG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKCdbaDUtcmVuZGVyXSB1bmV4cGVjdGVkIGVycm9yIGluIHNlbmRIdHRwIEFQSScsIGVycm9yKVxuICAgICAgLy8gc2VuZGVyLnBlcmZvcm1DYWxsYmFjayhcbiAgICAgIC8vICAgY2FsbGJhY2tJZCxcbiAgICAgIC8vICAgbmV3IEVycm9yKCd1bmV4cGVjdGVkIGVycm9yIGluIHNlbmRIdHRwIEFQSScpXG4gICAgICAvLyApXG4gICAgfTtcbiAgICB4aHIuc2VuZCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBmZXRjaFxuICAgKiB1c2Ugc3RyZWFtLmZldGNoIHRvIHJlcXVlc3QgZm9yIGEganNvbiBmaWxlLCBhIHBsYWluIHRleHQgZmlsZSBvclxuICAgKiBhIGFycmF5YnVmZmVyIGZvciBhIGZpbGUgc3RyZWFtLiAoWW91IGNhbiB1c2UgQmxvYiBhbmQgRmlsZVJlYWRlclxuICAgKiBBUEkgaW1wbGVtZW50ZWQgYnkgbW9zdCBtb2Rlcm4gYnJvd3NlcnMgdG8gcmVhZCBhIGFycmF5YnVmZmVyLilcbiAgICogQHBhcmFtICB7b2JqZWN0fSBvcHRpb25zIGNvbmZpZyBvcHRpb25zXG4gICAqICAgLSBtZXRob2Q6ICdHRVQnIHwgJ1BPU1QnIHwgJ1BVVCcgfCAnREVMRVRFJyB8ICdIRUFEJyB8ICdQQVRDSCdcbiAgICogICAtIGhlYWRlcnMge29ian1cbiAgICogICAtIHVybCB7c3RyaW5nfVxuICAgKiAgIC0gbW9kZSB7c3RyaW5nfSAnY29ycycgfCAnbm8tY29ycycgfCAnc2FtZS1vcmlnaW4nIHwgJ25hdmlnYXRlJ1xuICAgKiAgIC0gd2l0aENyZWRlbnRpYWxzIHtib29sZWFufVxuICAgKiAgIC0gYm9keVxuICAgKiAgIC0gdHlwZSB7c3RyaW5nfSAnanNvbicgfCAnanNvbnAnIHwgJ3RleHQnXG4gICAqIEBwYXJhbSAge3N0cmluZ30gY2FsbGJhY2tJZFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHByb2dyZXNzQ2FsbGJhY2tJZFxuICAgKi9cbiAgZmV0Y2g6IGZ1bmN0aW9uIChvcHRpb25zLCBjYWxsYmFja0lkLCBwcm9ncmVzc0NhbGxiYWNrSWQpIHtcbiAgICB2YXIgREVGQVVMVF9NRVRIT0QgPSAnR0VUJztcbiAgICB2YXIgREVGQVVMVF9NT0RFID0gJ2NvcnMnO1xuICAgIHZhciBERUZBVUxUX1RZUEUgPSAndGV4dCc7XG5cbiAgICB2YXIgbWV0aG9kT3B0aW9ucyA9IFsnR0VUJywgJ1BPU1QnLCAnUFVUJywgJ0RFTEVURScsICdIRUFEJywgJ1BBVENIJ107XG4gICAgdmFyIG1vZGVPcHRpb25zID0gWydjb3JzJywgJ25vLWNvcnMnLCAnc2FtZS1vcmlnaW4nLCAnbmF2aWdhdGUnXTtcbiAgICB2YXIgdHlwZU9wdGlvbnMgPSBbJ3RleHQnLCAnanNvbicsICdqc29ucCcsICdhcnJheWJ1ZmZlciddO1xuXG4gICAgLy8gY29uc3QgZmFsbGJhY2sgPSBmYWxzZSAgLy8gZmFsbGJhY2sgZnJvbSAnZmV0Y2gnIEFQSSB0byBYSFIuXG4gICAgdmFyIHNlbmRlciA9IHRoaXMuc2VuZGVyO1xuXG4gICAgdmFyIGNvbmZpZyA9IHV0aWxzJDEuZXh0ZW5kKHt9LCBvcHRpb25zKTtcblxuICAgIC8vIHZhbGlkYXRlIG9wdGlvbnMubWV0aG9kXG4gICAgaWYgKHR5cGVvZiBjb25maWcubWV0aG9kID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLm1ldGhvZCA9IERFRkFVTFRfTUVUSE9EO1xuICAgICAgY29uc29sZS53YXJuKCdbaDUtcmVuZGVyXSBvcHRpb25zLm1ldGhvZCBmb3IgXFwnZmV0Y2hcXCcgQVBJIGhhcyBiZWVuIHNldCB0byAnXG4gICAgICAgICsgJ2RlZmF1bHQgdmFsdWUgXFwnJyArIGNvbmZpZy5tZXRob2QgKyAnXFwnJyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG1ldGhvZE9wdGlvbnMuaW5kZXhPZigoY29uZmlnLm1ldGhvZCArICcnKVxuICAgICAgICAudG9VcHBlckNhc2UoKSkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gb3B0aW9ucy5tZXRob2QgXFwnJ1xuICAgICAgICArIGNvbmZpZy5tZXRob2RcbiAgICAgICAgKyAnXFwnIGZvciBcXCdmZXRjaFxcJyBBUEkgc2hvdWxkIGJlIG9uZSBvZiAnXG4gICAgICAgICsgbWV0aG9kT3B0aW9ucyArICcuJylcbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZSBvcHRpb25zLnVybFxuICAgIGlmICghY29uZmlnLnVybCkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ1toNS1yZW5kZXJdIG9wdGlvbnMudXJsIHNob3VsZCBiZSBzZXQgZm9yIFxcJ2ZldGNoXFwnIEFQSS4nKVxuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIGJvZHkgY29udGVudCBmb3IgbWV0aG9kICdHRVQnLlxuICAgIGlmIChjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCkgPT09ICdHRVQnKSB7XG4gICAgICB2YXIgYm9keSA9IGNvbmZpZy5ib2R5O1xuICAgICAgaWYgKHV0aWxzJDEuaXNQbGFpbk9iamVjdChib2R5KSkge1xuICAgICAgICBib2R5ID0gaW5kZXgkNC5zdHJpbmdpZnkoYm9keSk7XG4gICAgICB9XG4gICAgICB2YXIgdXJsID0gY29uZmlnLnVybDtcbiAgICAgIHZhciBoYXNoSWR4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICAgIGhhc2hJZHggPD0gLTEgJiYgKGhhc2hJZHggPSB1cmwubGVuZ3RoKTtcbiAgICAgIHZhciBoYXNoID0gdXJsLnN1YnN0cihoYXNoSWR4KTtcbiAgICAgIGlmIChoYXNoICYmIGhhc2hbMF0gPT09ICcjJykge1xuICAgICAgICBoYXNoID0gaGFzaC5zdWJzdHIoMSk7XG4gICAgICB9XG4gICAgICB1cmwgPSB1cmwuc3Vic3RyaW5nKDAsIGhhc2hJZHgpO1xuICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgdXJsICs9IChjb25maWcudXJsLmluZGV4T2YoJz8nKSA8PSAtMSA/ICc/JyA6ICcmJykgKyBib2R5O1xuICAgICAgfVxuICAgICAgdXJsICs9ICcjJyArIGhhc2g7XG4gICAgICBjb25maWcudXJsID0gdXJsO1xuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIG9wdGlvbnMubW9kZVxuICAgIGlmICh0eXBlb2YgY29uZmlnLm1vZGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWcubW9kZSA9IERFRkFVTFRfTU9ERTtcbiAgICB9XG4gICAgZWxzZSBpZiAobW9kZU9wdGlvbnMuaW5kZXhPZigoY29uZmlnLm1vZGUgKyAnJykudG9Mb3dlckNhc2UoKSkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gb3B0aW9ucy5tb2RlIFxcJydcbiAgICAgICAgKyBjb25maWcubW9kZVxuICAgICAgICArICdcXCcgZm9yIFxcJ2ZldGNoXFwnIEFQSSBzaG91bGQgYmUgb25lIG9mICdcbiAgICAgICAgKyBtb2RlT3B0aW9ucyArICcuJylcbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZSBvcHRpb25zLnR5cGVcbiAgICBpZiAodHlwZW9mIGNvbmZpZy50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLnR5cGUgPSBERUZBVUxUX1RZUEU7XG4gICAgICBjb25zb2xlLndhcm4oJ1toNS1yZW5kZXJdIG9wdGlvbnMudHlwZSBmb3IgXFwnZmV0Y2hcXCcgQVBJIGhhcyBiZWVuIHNldCB0byAnXG4gICAgICAgICsgJ2RlZmF1bHQgdmFsdWUgXFwnJyArIGNvbmZpZy50eXBlICsgJ1xcJy4nKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZU9wdGlvbnMuaW5kZXhPZigoY29uZmlnLnR5cGUgKyAnJykudG9Mb3dlckNhc2UoKSkgPT09IC0xKSB7XG4gICAgICByZXR1cm4gY29uc29sZS5lcnJvcignW2g1LXJlbmRlcl0gb3B0aW9ucy50eXBlIFxcJydcbiAgICAgICAgICArIGNvbmZpZy50eXBlXG4gICAgICAgICAgKyAnXFwnIGZvciBcXCdmZXRjaFxcJyBBUEkgc2hvdWxkIGJlIG9uZSBvZiAnXG4gICAgICAgICAgKyB0eXBlT3B0aW9ucyArICcuJylcbiAgICB9XG5cbiAgICAvLyB2YWxpZGF0ZSBvcHRpb25zLmhlYWRlcnNcbiAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuICAgIGlmICghdXRpbHMkMS5pc1BsYWluT2JqZWN0KGNvbmZpZy5oZWFkZXJzKSkge1xuICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoJ1toNS1yZW5kZXJdIG9wdGlvbnMuaGVhZGVycyBzaG91bGQgYmUgYSBwbGFpbiBvYmplY3QnKVxuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIG9wdGlvbnMudGltZW91dFxuICAgIGNvbmZpZy50aW1lb3V0ID0gcGFyc2VJbnQoY29uZmlnLnRpbWVvdXQsIDEwKSB8fCAyNTAwO1xuXG4gICAgdmFyIF9jYWxsQXJncyA9IFtjb25maWcsIGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2soY2FsbGJhY2tJZCwgcmVzKTtcbiAgICB9XTtcbiAgICBpZiAocHJvZ3Jlc3NDYWxsYmFja0lkKSB7XG4gICAgICBfY2FsbEFyZ3MucHVzaChmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIC8vIFNldCAna2VlcEFsaXZlJyB0byB0cnVlIGZvciBzZW5kaW5nIGNvbnRpbnVvdXMgY2FsbGJhY2tzXG4gICAgICAgIHNlbmRlci5wZXJmb3JtQ2FsbGJhY2socHJvZ3Jlc3NDYWxsYmFja0lkLCByZXMsIHRydWUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy50eXBlID09PSAnanNvbnAnKSB7XG4gICAgICBfanNvbnAuYXBwbHkodGhpcywgX2NhbGxBcmdzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBfeGhyLmFwcGx5KHRoaXMsIF9jYWxsQXJncyk7XG4gICAgfVxuICB9XG5cbn07XG5cbnZhciBtZXRhJDIgPSB7XG4gIHN0cmVhbTogW3tcbiAgICBuYW1lOiAnc2VuZEh0dHAnLFxuICAgIGFyZ3M6IFsnb2JqZWN0JywgJ2Z1bmN0aW9uJ11cbiAgfSwge1xuICAgIG5hbWU6ICdmZXRjaCcsXG4gICAgYXJnczogWydvYmplY3QnLCAnZnVuY3Rpb24nLCAnZnVuY3Rpb24nXVxuICB9XVxufTtcblxudmFyIHN0cmVhbSQxID0ge1xuICBpbml0OiBmdW5jdGlvbiAoV2VleCkge1xuICAgIHV0aWxzJDEgPSBXZWV4LnV0aWxzO1xuICAgIFdlZXgucmVnaXN0ZXJBcGlNb2R1bGUoJ3N0cmVhbScsIHN0cmVhbSwgbWV0YSQyKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcblxuQVVDVElPTjpcbnRhc2tRdWV1ZVxuQ2xpcGJvYXJkLnNldFN0cmluZygpICBOT1cgbm90IHdvcmtzLCBmYWNpbmcgdG8gdXNlci1hY3QgbG9zZSBvZiB0YXNrUXVldWUuXG5cbndvcmtzIGluIENocm9tZSBGaXJlZm94IE9wZXJhLiBidXQgbm90IGluIFNhZmFyaS5cbkBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0RvY3VtZW50L2V4ZWNDb21tYW5kI0Jyb3dzZXJfY29tcGF0aWJpbGl0eVxuXG5DbGlwYm9hcmQuZ2V0U3RyaW5nKCkgdW5pbXBsZW1lbnRlZC4gVGhlcmUgaXMgbm8gZWFzeSB3YXkgdG8gZG8gcGFzdGUgZnJvbSBjbGlwYm9hcmQgdG8ganMgdmFyaWFibGUuXG5cblNvIGxvb2sgb3V0IHlvdXIgYXBwIGJlaGF2aW9yLCB3aGVuIGRvd25ncmFkZSB0byBodG1sNSByZW5kZXIuXG5BbnkgaWRlYSBpcyB3ZWxjb21lLlxuKiovXG5cbnZhciBXRUVYX0NMSVBCT0FSRF9JRCA9ICdfX3dlZXhfY2xpcGJvYXJkX2lkX18nO1xuXG52YXIgY2xpcGJvYXJkID0ge1xuXG4gIGdldFN0cmluZzogZnVuY3Rpb24gKGNhbGxiYWNrSWQpIHtcbiAgICAvLyBub3Qgc3VwcG9ydGVkIGluIGh0bWw1XG4gICAgY29uc29sZS5sb2coJ2NsaXBib2FyZC5nZXRTdHJpbmcoKSBpcyBub3Qgc3VwcG9ydGVkIG5vdy4nKTtcbiAgfSxcblxuICBzZXRTdHJpbmc6IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgLy8gbm90IHN1cHBvcnQgc2FmYXJpXG4gICAgaWYgKHR5cGVvZiB0ZXh0ID09PSAnc3RyaW5nJyAmJiB0ZXh0ICE9PSAnJyAmJiBkb2N1bWVudC5leGVjQ29tbWFuZCkge1xuICAgICAgdmFyIHRlbXBJbnB1dCA9IGVsZW1lbnQoKTtcbiAgICAgIHRlbXBJbnB1dC52YWx1ZSA9IHRleHQ7XG5cbiAgICAgIHRlbXBJbnB1dC5zZWxlY3QoKTtcbiAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKCdjb3B5Jyk7XG4gICAgICAvLyB2YXIgb3V0ID0gZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2NvcHknKTtcbiAgICAgIC8vIGNvbnNvbGUubG9nKFwiZXhlY0NvbW1hbmQgb3V0IGlzIFwiICsgb3V0KTtcbiAgICAgIHRlbXBJbnB1dC52YWx1ZSA9ICcnO1xuICAgICAgdGVtcElucHV0LmJsdXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZygnb25seSBzdXBwb3J0IHN0cmluZyBpbnB1dCBub3cnKTtcbiAgICB9XG4gIH1cblxufTtcblxuZnVuY3Rpb24gZWxlbWVudCAoKSB7XG4gIHZhciB0ZW1wSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChXRUVYX0NMSVBCT0FSRF9JRCk7XG4gIGlmICghdGVtcElucHV0KSB7XG4gICAgdGVtcElucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcbiAgICB0ZW1wSW5wdXQuc2V0QXR0cmlidXRlKCdpZCcsIFdFRVhfQ0xJUEJPQVJEX0lEKTtcbiAgICB0ZW1wSW5wdXQuc3R5bGUuY3NzVGV4dCA9ICdoZWlnaHQ6MXB4O3dpZHRoOjFweDtib3JkZXI6bm9uZTsnO1xuICAgIC8vIHRlbXBJbnB1dC5zdHlsZS5jc3NUZXh0ID0gXCJoZWlnaHQ6NDBweDt3aWR0aDozMDBweDtib3JkZXI6c29saWQ7XCJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRlbXBJbnB1dCk7XG4gIH1cbiAgcmV0dXJuIHRlbXBJbnB1dFxufVxuXG52YXIgbWV0YSQzID0ge1xuICBjbGlwYm9hcmQ6IFt7XG4gICAgbmFtZTogJ2dldFN0cmluZycsXG4gICAgYXJnczogWydmdW5jdGlvbiddXG4gIH0sIHtcbiAgICBuYW1lOiAnc2V0U3RyaW5nJyxcbiAgICBhcmdzOiBbJ3N0cmluZyddXG4gIH1dXG59O1xuXG52YXIgY2xpcGJvYXJkJDEgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIChXZWV4KSB7XG4gICAgV2VleC5yZWdpc3RlckFwaU1vZHVsZSgnY2xpcGJvYXJkJywgY2xpcGJvYXJkLCBtZXRhJDMpO1xuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBldmVudCQxID0ge1xuICAvKipcbiAgICogb3BlblVybFxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgb3BlblVSTDogZnVuY3Rpb24gKHVybCkge1xuICAgIGxvY2F0aW9uLmhyZWYgPSB1cmw7XG4gIH1cblxufTtcblxudmFyIG1ldGEkNCA9IHtcbiAgZXZlbnQ6IFt7XG4gICAgbmFtZTogJ29wZW5VUkwnLFxuICAgIGFyZ3M6IFsnc3RyaW5nJ11cbiAgfV1cbn07XG5cbnZhciBldmVudE1vZHVsZSA9IHtcbiAgaW5pdDogZnVuY3Rpb24gKFdlZXgpIHtcbiAgICBXZWV4LnJlZ2lzdGVyQXBpTW9kdWxlKCdldmVudCcsIGV2ZW50JDEsIG1ldGEkNCk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIHV0aWxzJDIgPSB7fTtcbnZhciBlbmRFdmVudDtcbnZhciBzdHlsZU5hbWU7XG5cbnZhciBFVkVOVF9OQU1FX01BUCA9IHtcbiAgdHJhbnNpdGlvbjogJ3RyYW5zaXRpb25lbmQnLFxuICBXZWJraXRUcmFuc2l0aW9uOiAnd2Via2l0VHJhbnNpdGlvbkVuZCcsXG4gIE1velRyYW5zaXRpb246ICdtb3pUcmFuc2l0aW9uRW5kJyxcbiAgT1RyYW5zaXRpb246ICdvVHJhbnNpdGlvbkVuZCcsXG4gIG1zVHJhbnNpdGlvbjogJ01TVHJhbnNpdGlvbkVuZCdcbn07XG5cbmZ1bmN0aW9uIGRldGVjdEV2ZW50cyAoKSB7XG4gIHZhciB0ZXN0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgdmFyIHN0eWxlID0gdGVzdEVsLnN0eWxlO1xuICBmb3IgKHZhciBuYW1lIGluIEVWRU5UX05BTUVfTUFQKSB7XG4gICAgaWYgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgIGVuZEV2ZW50ID0gRVZFTlRfTkFNRV9NQVBbbmFtZV07XG4gICAgICBzdHlsZU5hbWUgPSBuYW1lO1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbn1cblxuZGV0ZWN0RXZlbnRzKCk7XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25PbmNlICh2bm9kZSwgY29uZmlnLCBjYWxsYmFjaykge1xuICB2YXIgbmV4dEZyYW1lID0gdXRpbHMkMi5uZXh0RnJhbWU7XG4gIHZhciB0b0NTU1RleHQgPSB1dGlscyQyLnRvQ1NTVGV4dDtcbiAgdmFyIGF1dG9QcmVmaXggPSB1dGlscyQyLmF1dG9QcmVmaXg7XG4gIHZhciBjYW1lbGl6ZUtleXMgPSB1dGlscyQyLmNhbWVsaXplS2V5cztcbiAgdmFyIG5vcm1hbGl6ZVN0eWxlID0gdXRpbHMkMi5ub3JtYWxpemVTdHlsZTtcbiAgdmFyIGlzQXJyYXkgPSB1dGlscyQyLmlzQXJyYXk7XG5cbiAgaWYgKGlzQXJyYXkodm5vZGUpKSB7XG4gICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgfVxuXG4gIHZhciBkdXJhdGlvbiA9IGNvbmZpZy5kdXJhdGlvbiB8fCAwOyAvLyBtc1xuICB2YXIgdGltaW5nID0gY29uZmlnLnRpbWluZ0Z1bmN0aW9uIHx8ICdsaW5lYXInO1xuICB2YXIgZGVsYXkgPSBjb25maWcuZGVsYXkgfHwgMDsgIC8vIG1zXG5cbiAgLy8gVE9ETzogcGFyc2UgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uVmFsdWUgPSBcImFsbCBcIiArIGR1cmF0aW9uICsgXCJtcyBcIiArIHRpbWluZyArIFwiIFwiICsgZGVsYXkgKyBcIm1zXCI7XG5cbiAgdmFyIGRvbSA9IHZub2RlLiRlbDtcbiAgLy8gdHJpZ2dlciBpbWFnZSBsYXp5bG9hZGluZyBieSBmb3JjZS5cbiAgZG9tICYmIHdlZXgudXRpbHMuZmlyZUxhenlsb2FkKGRvbSwgdHJ1ZSk7XG5cbiAgdmFyIHRyYW5zaXRpb25FbmRIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQgJiYgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaWYgKGVuZEV2ZW50KSB7XG4gICAgICBkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihlbmRFdmVudCwgdHJhbnNpdGlvbkVuZEhhbmRsZXIpO1xuICAgICAgZG9tLnN0eWxlW3N0eWxlTmFtZV0gPSAnJztcbiAgICB9XG4gICAgY2FsbGJhY2soKTtcbiAgfTtcbiAgaWYgKGVuZEV2ZW50KSB7XG4gICAgZG9tLnN0eWxlW3N0eWxlTmFtZV0gPSB0cmFuc2l0aW9uVmFsdWU7XG4gICAgZG9tLmFkZEV2ZW50TGlzdGVuZXIoZW5kRXZlbnQsIHRyYW5zaXRpb25FbmRIYW5kbGVyKTtcbiAgfVxuICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIGRvbS5zdHlsZS5jc3NUZXh0XG4gICAgICArPSB0b0NTU1RleHQoYXV0b1ByZWZpeChub3JtYWxpemVTdHlsZShjYW1lbGl6ZUtleXMoY29uZmlnLnN0eWxlcykpKSB8fCB7fSk7XG4gIH0pO1xufVxuXG52YXIgYW5pbWF0aW9uID0ge1xuICAvKipcbiAgICogdHJhbnNpdGlvblxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHZub2RlXG4gICAqIEBwYXJhbSAge09iamVjdH0gY29uZmlnXG4gICAqIEBwYXJhbSAge1N0cmluZ30gY2FsbGJhY2tcbiAgICovXG4gIHRyYW5zaXRpb246IGZ1bmN0aW9uIHRyYW5zaXRpb24gKHZub2RlLCBjb25maWcsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjb25maWcuc3R5bGVzKSB7IHJldHVybiB9XG4gICAgcmV0dXJuIHRyYW5zaXRpb25PbmNlKHZub2RlLCBjb25maWcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgfSlcbiAgfVxufTtcblxudmFyIGFuaW1hdGlvbiQxID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgdmFyIGV4dGVuZEtleXMgPSB3ZWV4LnV0aWxzLmV4dGVuZEtleXM7XG4gICAgZXh0ZW5kS2V5cyh1dGlscyQyLCB3ZWV4LnV0aWxzLCBbXG4gICAgICAnbmV4dEZyYW1lJyxcbiAgICAgICd0b0NTU1RleHQnLFxuICAgICAgJ2F1dG9QcmVmaXgnLFxuICAgICAgJ2NhbWVsaXplS2V5cycsXG4gICAgICAnbm9ybWFsaXplU3R5bGUnLFxuICAgICAgJ2lzQXJyYXknXG4gICAgXSk7XG5cbiAgICB3ZWV4LnJlZ2lzdGVyTW9kdWxlKCdhbmltYXRpb24nLCBhbmltYXRpb24pO1xuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciB1dGlscyQzID0ge307XG5cbmZ1bmN0aW9uIGdldFBhcmVudFNjcm9sbGVyJDEgKHZub2RlKSB7XG4gIGlmICghdm5vZGUpIHsgcmV0dXJuIG51bGwgfVxuICB2YXIgdm0gPSB2bm9kZS4kZWxcbiAgPyB2bm9kZSA6IHZub2RlLmVsbVxuICA/IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmNvbnRleHQgOiBudWxsO1xuICBpZiAoIXZtKSB7IHJldHVybiBudWxsIH1cbiAgdmFyIHR5cGUgPSB2bS4kZWwgJiYgdm0uJGVsLmdldEF0dHJpYnV0ZSgnd2VleC10eXBlJyk7XG4gIGlmIChjb25maWcuc2Nyb2xsYWJsZVR5cGVzLmluZGV4T2YodHlwZSkgPiAtMSkge1xuICAgIHJldHVybiB2bVxuICB9XG4gIHJldHVybiBnZXRQYXJlbnRTY3JvbGxlciQxKHZtLiRwYXJlbnQpXG59XG5cbmZ1bmN0aW9uIG5vdyAoKSB7XG4gIHZhciBub3cgPSB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vd1xuICA/IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3cuYmluZCh3aW5kb3cucGVyZm9ybWFuY2UpIDogRGF0ZS5ub3c7XG4gIHJldHVybiBub3coKVxufVxuXG5mdW5jdGlvbiBzY3JvbGxFbGVtZW50IChkU3VmZml4LCBwb3NpdGlvbikge1xuICBpZiAoKHRoaXMgPT09IGRvY3VtZW50LmJvZHkpIHx8ICh0aGlzID09PSB3aW5kb3cpXG4gICAgJiYgd2luZG93LnNjcm9sbFRvKSB7XG4gICAgcmV0dXJuIHdpbmRvdy5zY3JvbGxUbygwLCBwb3NpdGlvbilcbiAgfVxuICB0aGlzWyhcInNjcm9sbFwiICsgZFN1ZmZpeCldID0gcG9zaXRpb247XG59XG4vKipcbiAqIHNlbGYgaW52b2tlZCBmdW5jdGlvbiB0aGF0LCBnaXZlbiBhIGNvbnRleHQsIHN0ZXBzIHRocm91Z2ggc2Nyb2xsaW5nXG4gKiBAbWV0aG9kIHN0ZXBcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIHN0ZXAkMSAoY29udGV4dCkge1xuICAvLyBjYWxsIG1ldGhvZCBhZ2FpbiBvbiBuZXh0IGF2YWlsYWJsZSBmcmFtZVxuICBjb250ZXh0LmZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwJDEuYmluZCh3aW5kb3csIGNvbnRleHQpKTtcbiAgdmFyIHRpbWUgPSBub3coKTtcbiAgdmFyIGVsYXBzZWQgPSAodGltZSAtIGNvbnRleHQuc3RhcnRUaW1lKSAvIDQ2ODtcbiAgLy8gYXZvaWQgZWxhcHNlZCB0aW1lcyBoaWdoZXIgdGhhbiBvbmVcbiAgZWxhcHNlZCA9IGVsYXBzZWQgPiAxID8gMSA6IGVsYXBzZWQ7XG4gIC8vIGFwcGx5IGVhc2luZyB0byBlbGFwc2VkIHRpbWVcbiAgdmFyIHZhbHVlID0gZWFzZShlbGFwc2VkKTtcbiAgdmFyIGN1cnJlbnRQb3NpdGlvbiA9IGNvbnRleHQuc3RhcnRQb3NpdGlvbiArIChjb250ZXh0LnBvc2l0aW9uIC0gY29udGV4dC5zdGFydFBvc2l0aW9uKSAqIHZhbHVlO1xuICBjb250ZXh0Lm1ldGhvZC5jYWxsKGNvbnRleHQuc2Nyb2xsYWJsZSwgY29udGV4dC5kU3VmZml4LCBjdXJyZW50UG9zaXRpb24pO1xuICAvLyByZXR1cm4gd2hlbiBlbmQgcG9pbnRzIGhhdmUgYmVlbiByZWFjaGVkXG4gIC8qKlxuICAgICogTk9URTogc2hvdWxkIHVzZSB+fiB0byBwYXJzZSBwb3NpdGlvbiBudW1iZXIgaW50byBpbnRlZ2VyLiBPdGhlcndpc2VcbiAgICAqIHRoaXMgdHdvIGZsb2F0IG51bWJlcnMgbWF5YmUgaGF2ZSBhIHNsaWNlbHkgbGl0dGxlIGRpZmZlcmVuY2UsIHdoaWNoXG4gICAgKiB3aWxsIGNhdXNlIHRoaXMgZnVuY3Rpb24gbmV2ZXIgdG8gc3RvcC5cbiAgKi9cbiAgaWYgKH5+Y3VycmVudFBvc2l0aW9uID09PSB+fmNvbnRleHQucG9zaXRpb24pIHtcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoY29udGV4dC5mcmFtZSk7XG4gICAgcmV0dXJuXG4gIH1cbn1cbi8qKlxuICogcmV0dXJucyByZXN1bHQgb2YgYXBwbHlpbmcgZWFzZSBtYXRoIGZ1bmN0aW9uIHRvIGEgbnVtYmVyXG4gKiBAbWV0aG9kIGVhc2VcbiAqIEBwYXJhbSB7TnVtYmVyfSBrXG4gKiBAcmV0dXJucyB7TnVtYmVyfVxuICovXG5mdW5jdGlvbiBlYXNlIChrKSB7XG4gIHJldHVybiAwLjUgKiAoMSAtIE1hdGguY29zKE1hdGguUEkgKiBrKSlcbn1cbnZhciBkb20gPSB7XG4gIC8qKlxuICAgKiBzY3JvbGxUb0VsZW1lbnRcbiAgICogQHBhcmFtICB7Vm5vZGUgfCBWQ29tcG9uZW50fSB2bm9kZVxuICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMge29mZnNldDpOdW1iZXJ9XG4gICAqICAgcHM6IHNjcm9sbC10byBoYXMgJ2Vhc2UnIGFuZCAnZHVyYXRpb24nKG1zKSBhcyBvcHRpb25zLlxuICAgKi9cbiAgc2Nyb2xsVG9FbGVtZW50OiBmdW5jdGlvbiAodm5vZGUsIG9wdGlvbnMpIHtcbiAgICB2YXIgaXNBcnJheSA9IHV0aWxzJDMuaXNBcnJheTtcbiAgICBpZiAoaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIHZhciBzY3JvbGxlciA9IGdldFBhcmVudFNjcm9sbGVyJDEodm5vZGUpO1xuICAgIHZhciBzY3JvbGxEaXJlY3Rpb24gPSBzY3JvbGxlciAmJiBzY3JvbGxlci5zY3JvbGxEaXJlY3Rpb24gfHwgJ3ZlcnRpY2FsJztcbiAgICB2YXIgaXNXaW5kb3cgPSAhc2Nyb2xsZXI7XG4gICAgdmFyIGN0ID0gaXNXaW5kb3cgPyBkb2N1bWVudC5ib2R5IDogc2Nyb2xsZXIuJGVsO1xuICAgIHZhciBlbCA9IHZub2RlLiRlbCB8fCB2bm9kZS5lbG07XG4gICAgaWYgKGN0ICYmIGVsKSB7XG4gICAgICAvLyBpZiBpdCdzIGEgbGlzdCwgdGhlbiB0aGUgbGlzdFZub2RlLnNjcm9sbERpcmVjdGlvbiBpcyB1bmRlZmluZWQuIGp1c3RcbiAgICAgIC8vIGFzc3VtIGl0IGlzIHRoZSBkZWZhdWx0IHZhbHVlICd2ZXJ0aWNhbCcuXG4gICAgICB2YXIgZFN1ZmZpeCA9ICh7XG4gICAgICAgIGhvcml6b250YWw6ICdMZWZ0JyxcbiAgICAgICAgdmVydGljYWw6ICdUb3AnXG4gICAgICB9KVtzY3JvbGxEaXJlY3Rpb25dO1xuICAgICAgdmFyIGN0UmVjdCA9IGN0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgLyoqXG4gICAgICAgICogaWYgaXQncyBhIHdhdGVyZmFsbCwgYW5kIHlvdSB3YW50IHRvIHNjcm9sbCB0byBhIGhlYWRlciwgdGhlbiBqdXN0XG4gICAgICAgICogc2Nyb2xsIHRvIHRoZSB0b3AuXG4gICAgICAqL1xuICAgICAgaWYgKHNjcm9sbGVyICYmIHNjcm9sbGVyLndlZXhUeXBlID09PSAnd2F0ZXJmYWxsJyAmJiBzY3JvbGxlci5faGVhZGVycyAmJiBzY3JvbGxlci5faGVhZGVycy5pbmRleE9mKHZub2RlLiR2bm9kZSB8fCB2bm9kZSkgPiAtMSkge1xuICAgICAgICAvLyBpdCdzIGluIHdhdGVyZmFsbC4ganVzdCBzY3JvbGwgdG8gdGhlIHRvcC5cbiAgICAgICAgZWxSZWN0ID0gY3QuZmlyc3RFbGVtZW50Q2hpbGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB9XG4gICAgICB2YXIgZGlyID0gZFN1ZmZpeC50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIG9mZnNldCA9IChpc1dpbmRvdyA/IDAgOiBjdFsoXCJzY3JvbGxcIiArIGRTdWZmaXgpXSkgKyBlbFJlY3RbZGlyXSAtIGN0UmVjdFtkaXJdO1xuICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgb2Zmc2V0ICs9IG9wdGlvbnMub2Zmc2V0ICYmIG9wdGlvbnMub2Zmc2V0ICogd2VleC5jb25maWcuZW52LnNjYWxlIHx8IDA7XG4gICAgICAgIC8vIG9mZnNldCAqPSB3ZWV4LmNvbmZpZy5lbnYuc2NhbGUgLyogYWRhcHQgb2Zmc2V0IHRvIGRpZmZlcmVudCBzY3JlZW4gc2NhbGVzLiAqL1xuICAgICAgfVxuICAgICAgZWxzZSB7fVxuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbmltYXRlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHNjcm9sbEVsZW1lbnQuY2FsbChjdCwgZFN1ZmZpeCwgb2Zmc2V0KVxuICAgICAgfVxuICAgICAgc3RlcCQxKHtcbiAgICAgICAgc2Nyb2xsYWJsZTogY3QsXG4gICAgICAgIHN0YXJ0VGltZTogbm93KCksXG4gICAgICAgIGZyYW1lOiBudWxsLFxuICAgICAgICBzdGFydFBvc2l0aW9uOiBpc1dpbmRvdyA/IHdpbmRvdy5wYWdlWU9mZnNldCA6IGN0WyhcInNjcm9sbFwiICsgZFN1ZmZpeCldLFxuICAgICAgICBwb3NpdGlvbjogb2Zmc2V0LFxuICAgICAgICBtZXRob2Q6IHNjcm9sbEVsZW1lbnQsXG4gICAgICAgIGRTdWZmaXg6IGRTdWZmaXhcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLyoqXG4gICAqIGdldENvbXBvbmVudFJlY3RcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZub2RlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gICAqL1xuICBnZXRDb21wb25lbnRSZWN0OiBmdW5jdGlvbiAodm5vZGUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGlzQXJyYXkgPSB1dGlscyQzLmlzQXJyYXk7XG4gICAgaWYgKGlzQXJyYXkodm5vZGUpKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICB2YXIgc2NhbGUgPSB3aW5kb3cud2VleC5jb25maWcuZW52LnNjYWxlO1xuICAgIHZhciBpbmZvID0ge1xuICAgICAgcmVzdWx0OiBmYWxzZVxuICAgIH07XG4gICAgdmFyIHJlY3RLZXlzID0gWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ2JvdHRvbScsICdsZWZ0JywgJ3JpZ2h0J107XG5cbiAgICBmdW5jdGlvbiByZWNhbGMgKHJlY3QpIHtcbiAgICAgIHZhciByZXMgPSB7fTtcbiAgICAgIHJlY3RLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAocmVjdFtrZXldKSB7XG4gICAgICAgICAgcmVzW2tleV0gPSByZWN0W2tleV0gLyBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICAgIGlmICh2bm9kZSAmJiB2bm9kZSA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgICAgaW5mby5yZXN1bHQgPSB0cnVlO1xuICAgICAgaW5mby5zaXplID0gcmVjYWxjKHtcbiAgICAgICAgd2lkdGg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHJpZ2h0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgIGJvdHRvbTogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgICAgfSk7XG4gICAgICBpbmZvLmNvbnRlbnRTaXplID0gcmVjYWxjKHtcbiAgICAgICAgd2lkdGg6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRXaWR0aCxcbiAgICAgICAgaGVpZ2h0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodm5vZGUgJiYgdm5vZGUuJGVsKSB7XG4gICAgICBpbmZvLnJlc3VsdCA9IHRydWU7XG4gICAgICBpbmZvLnNpemUgPSByZWNhbGModm5vZGUuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKTtcbiAgICAgIGlmICh2bm9kZS4kcmVmcy5pbm5lcikge1xuICAgICAgICBpbmZvLmNvbnRlbnRTaXplID0gcmVjYWxjKHtcbiAgICAgICAgICB3aWR0aDogdm5vZGUuJHJlZnMuaW5uZXIub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiB2bm9kZS4kcmVmcy5pbm5lci5vZmZzZXRIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgaW5mby5jb250ZW50U2l6ZSA9IHJlY2FsYyh7XG4gICAgICAgICAgd2lkdGg6IHZub2RlLiRlbC5vZmZzZXRXaWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHZub2RlLiRlbC5vZmZzZXRIZWlnaHRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBtZXNzYWdlID0gaW5mby5yZXN1bHQgPyBpbmZvIDoge1xuICAgICAgcmVzdWx0OiBmYWxzZSxcbiAgICAgIGVyck1zZzogJ0lsbGVnYWwgcGFyYW1ldGVyJ1xuICAgIH07XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2sobWVzc2FnZSk7XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfSxcbiAgLyoqXG4gICAqIGZvciBhZGRpbmcgZm9udEZhY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBmb250RmFjZVxuICAgKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzIHJ1bGVzXG4gICAqL1xuICBhZGRSdWxlOiBmdW5jdGlvbiAoa2V5LCBzdHlsZXMpIHtcbiAgICB2YXIgY2FtZWxUb0tlYmFiID0gdXRpbHMkMy5jYW1lbFRvS2ViYWI7XG4gICAgdmFyIGFwcGVuZENzcyA9IHV0aWxzJDMuYXBwZW5kQ3NzO1xuICAgIGtleSA9IGNhbWVsVG9LZWJhYihrZXkpO1xuICAgIHZhciBzdHlsZXNUZXh0ID0gJyc7XG4gICAgZm9yICh2YXIgayBpbiBzdHlsZXMpIHtcbiAgICAgIGlmIChzdHlsZXMuaGFzT3duUHJvcGVydHkoaykpIHtcbiAgICAgICAgc3R5bGVzVGV4dCArPSBjYW1lbFRvS2ViYWIoaykgKyAnOicgKyBzdHlsZXNba10gKyAnOyc7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBzdHlsZVRleHQgPSBcIkBcIiArIGtleSArIFwie1wiICsgc3R5bGVzVGV4dCArIFwifVwiO1xuICAgIGFwcGVuZENzcyhzdHlsZVRleHQsICdkb20tYWRkZWQtcnVsZXMnKTtcbiAgfVxufTtcbnZhciBkb20kMSA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAod2VleCkge1xuICAgIHZhciBleHRlbmRLZXlzID0gd2VleC51dGlscy5leHRlbmRLZXlzO1xuICAgIGV4dGVuZEtleXModXRpbHMkMywgd2VleC51dGlscywgWydjYW1lbFRvS2ViYWInLCAnYXBwZW5kQ3NzJywgJ2lzQXJyYXknXSk7XG4gICAgd2VleC5yZWdpc3Rlck1vZHVsZSgnZG9tJywgZG9tKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vKipcbiAqIGdsb2JhbEV2ZW50IEFQSTpcbiAqIEBkb2MgaHR0cDovL3dlZXguYXBhY2hlLm9yZy9jbi9yZWZlcmVuY2VzL21vZHVsZXMvZ2xvYmFsZXZlbnQuaHRtbFxuICovXG4vLyB0cmFjayB2YXJpZXMga2luZHMgb2YgZXZlbnRzIGFuZCBsaXN0ZW5lcnMuXG52YXIgaGFuZGxlclRyYWtlciA9IHt9O1xuXG52YXIgZ2xvYmFsRXZlbnQgPSB7XG4gIC8qKlxuICAgKiBhZGRFdmVudExpc3RlbmVyXG4gICAqIE5PVEU6IG9uZSBjYWxsYmFjayBjYW4gb25seSBiZSBib3VuZCB0byB0aGUgc2FtZSBldmVudCBvbmNlLiBCaW5kIGEgY2FsbGJhY2sgdHdpY2UgZG9lc24ndFxuICAgKiAgbWVhbiBpdCB3aWxsIGJlIGNhbGxlZCB0d2ljZSB3aGVuIHRoZSBldmVudCBmaXJlZCBvbmNlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZ0IC0gdGhlIGV2ZW50IG5hbWUgdG8gYWRkIGEgbGlzdGVuZXIgb24uXG4gICAqL1xuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyIChldnQsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBoYW5kbGVycyA9IGhhbmRsZXJUcmFrZXJbZXZ0XTtcbiAgICBpZiAoIWhhbmRsZXJzKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJUcmFrZXJbZXZ0XSA9IFtdO1xuICAgIH1cbiAgICB2YXIgbGVuID0gaGFuZGxlcnMubGVuZ3RoO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChoYW5kbGVyc1tpXSA9PT0gY2FsbGJhY2spIHtcbiAgICAgICAgLy8gdGhpcyBjYWxsYmFjayBpcyBhbHJlYWR5IGJvdW5kLiBubyBuZWVkIHRvIGJpbmQgaXQgYWdhaW4uXG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBoYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKGV2dCwgY2FsbGJhY2spO1xuICB9LFxuXG4gIC8qKlxuICAgKiByZW1vdmVFdmVudExpc3RlbmVyXG4gICAqIE5PVEU6IHJlbW92ZSBhbGwgdGhlIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgc3BlY2lmaWVkIGV2ZW50IHR5cGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldnQgLSB0aGUgZXZlbnQgbmFtZSB0byByZW1vdmUgYSBsaXN0ZW5lciBmcm9tLlxuICAgKi9cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lciAoZXZ0KSB7XG4gICAgdmFyIGhhbmRsZXJzID0gaGFuZGxlclRyYWtlcltldnRdO1xuICAgIGlmICghaGFuZGxlcnMpIHtcbiAgICAgIC8vIGV2dCBoYW5kbGVycyBoYXMgYmVlbiBhbHJlYWR5IHJlbW92ZWQuXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgcmV0dXJuIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBjYik7IH0pO1xuICAgIGRlbGV0ZSBoYW5kbGVyVHJha2VyW2V2dF07XG4gIH1cbn07XG5cbnZhciBnbG9iYWxFdmVudCQxID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3Rlck1vZHVsZSgnZ2xvYmFsRXZlbnQnLCBnbG9iYWxFdmVudCk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIHF1ZXVlJDEgPSBbXTtcbnZhciBpc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbnZhciB0b2FzdFdpbjtcbnZhciBUT0FTVF9XSU5fQ0xBU1NfTkFNRSA9ICd3ZWV4LXRvYXN0JztcbnZhciBUT0FTVF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMC40O1xuXG52YXIgREVGQVVMVF9EVVJBVElPTiA9IDAuODtcblxuZnVuY3Rpb24gc2hvd1RvYXN0V2luZG93IChtc2csIGNhbGxiYWNrKSB7XG4gIGlmICghdG9hc3RXaW4pIHtcbiAgICB0b2FzdFdpbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRvYXN0V2luLmNsYXNzTGlzdC5hZGQoVE9BU1RfV0lOX0NMQVNTX05BTUUpO1xuICAgIHRvYXN0V2luLmNsYXNzTGlzdC5hZGQoJ2hpZGUnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRvYXN0V2luKTtcbiAgfVxuICB0b2FzdFdpbi50ZXh0Q29udGVudCA9IG1zZztcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgdG9hc3RXaW4uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZScpO1xuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gIH0sIDE2KTtcbn1cblxuZnVuY3Rpb24gaGlkZVRvYXN0V2luZG93IChjYWxsYmFjaykge1xuICBpZiAoIXRvYXN0V2luKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdG9hc3RXaW4uY2xhc3NMaXN0LmFkZCgnaGlkZScpO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICB9LCBUT0FTVF9UUkFOU0lUSU9OX0RVUkFUSU9OICogMTAwMCk7XG59XG5cbnZhciB0b2FzdCA9IHtcbiAgcHVzaDogZnVuY3Rpb24gKG1zZywgZHVyYXRpb24pIHtcbiAgICBxdWV1ZSQxLnB1c2goe1xuICAgICAgbXNnOiBtc2csXG4gICAgICBkdXJhdGlvbjogZHVyYXRpb24gfHwgREVGQVVMVF9EVVJBVElPTlxuICAgIH0pO1xuICAgIHRoaXMuc2hvdygpO1xuICB9LFxuXG4gIHNob3c6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAvLyBBbGwgbWVzc2FnZXMgaGFkIGJlZW4gdG9hc3RlZCBhbHJlYWR5LCBzbyByZW1vdmUgdGhlIHRvYXN0IHdpbmRvdyxcbiAgICBpZiAoIXF1ZXVlJDEubGVuZ3RoKSB7XG4gICAgICB0b2FzdFdpbiAmJiB0b2FzdFdpbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRvYXN0V2luKTtcbiAgICAgIHRvYXN0V2luID0gbnVsbDtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHRoZSBwcmV2aW91cyB0b2FzdCBpcyBub3QgZW5kZWQgeWV0LlxuICAgIGlmIChpc1Byb2Nlc3NpbmcpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpc1Byb2Nlc3NpbmcgPSB0cnVlO1xuXG4gICAgdmFyIHRvYXN0SW5mbyA9IHF1ZXVlJDEuc2hpZnQoKTtcbiAgICBzaG93VG9hc3RXaW5kb3codG9hc3RJbmZvLm1zZywgZnVuY3Rpb24gKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGhpZGVUb2FzdFdpbmRvdyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgICAgdGhhdC5zaG93KCk7XG4gICAgICAgIH0pO1xuICAgICAgfSwgdG9hc3RJbmZvLmR1cmF0aW9uICogMTAwMCk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG4vLyB0aGVyZSB3aWxsIGJlIG9ubHkgb25lIGluc3RhbmNlIG9mIG1vZGFsLlxudmFyIE1PREFMX1dSQVBfQ0xBU1MgPSAnd2VleC1tb2RhbC13cmFwJztcbnZhciBNT0RBTF9OT0RFX0NMQVNTID0gJ3dlZXgtbW9kYWwtbm9kZSc7XG5cbmZ1bmN0aW9uIE1vZGFsICgpIHtcbiAgdGhpcy53cmFwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihNT0RBTF9XUkFQX0NMQVNTKTtcbiAgdGhpcy5ub2RlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihNT0RBTF9OT0RFX0NMQVNTKTtcbiAgaWYgKCF0aGlzLndyYXApIHtcbiAgICB0aGlzLmNyZWF0ZVdyYXAoKTtcbiAgfVxuICBpZiAoIXRoaXMubm9kZSkge1xuICAgIHRoaXMuY3JlYXRlTm9kZSgpO1xuICB9XG4gIHRoaXMuY2xlYXJOb2RlKCk7XG4gIHRoaXMuY3JlYXRlTm9kZUNvbnRlbnQoKTtcbiAgdGhpcy5iaW5kRXZlbnRzKCk7XG59XG5cbk1vZGFsLnByb3RvdHlwZSA9IHtcblxuICBzaG93OiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53cmFwLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgIHRoaXMubm9kZS5jbGFzc0xpc3QucmVtb3ZlKCdoaWRlJyk7XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy53cmFwKTtcbiAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gICAgdGhpcy53cmFwID0gbnVsbDtcbiAgICB0aGlzLm5vZGUgPSBudWxsO1xuICB9LFxuXG4gIGNyZWF0ZVdyYXA6IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLndyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICB0aGlzLndyYXAuY2xhc3NOYW1lID0gTU9EQUxfV1JBUF9DTEFTUztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMud3JhcCk7XG4gIH0sXG5cbiAgY3JlYXRlTm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHRoaXMubm9kZS5jbGFzc0xpc3QuYWRkKE1PREFMX05PREVfQ0xBU1MsICdoaWRlJyk7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpO1xuICB9LFxuXG4gIGNsZWFyTm9kZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubm9kZS5pbm5lckhUTUwgPSAnJztcbiAgfSxcblxuICBjcmVhdGVOb2RlQ29udGVudDogZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gZG8gbm90aGluZy5cbiAgICAvLyBjaGlsZCBjbGFzc2VzIGNhbiBvdmVycmlkZSB0aGlzIG1ldGhvZC5cbiAgfSxcblxuICBiaW5kRXZlbnRzOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy53cmFwLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfSk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIENPTlRFTlRfQ0xBU1MgPSAnY29udGVudCc7XG52YXIgTVNHX0NMQVNTID0gJ2NvbnRlbnQtbXNnJztcbnZhciBCVVRUT05fR1JPVVBfQ0xBU1MgPSAnYnRuLWdyb3VwJztcbnZhciBCVVRUT05fQ0xBU1MgPSAnYnRuJztcblxuZnVuY3Rpb24gQWxlcnQgKGNvbmZpZykge1xuICB0aGlzLm1zZyA9IGNvbmZpZy5tZXNzYWdlIHx8ICcnO1xuICB0aGlzLmNhbGxiYWNrID0gY29uZmlnLmNhbGxiYWNrO1xuICB0aGlzLm9rVGl0bGUgPSBjb25maWcub2tUaXRsZSB8fCAnT0snO1xuICBNb2RhbC5jYWxsKHRoaXMpO1xuICB0aGlzLm5vZGUuY2xhc3NMaXN0LmFkZCgnd2VleC1hbGVydCcpO1xufVxuXG5BbGVydC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vZGFsLnByb3RvdHlwZSk7XG5cbkFsZXJ0LnByb3RvdHlwZS5jcmVhdGVOb2RlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGVudC5jbGFzc0xpc3QuYWRkKENPTlRFTlRfQ0xBU1MpO1xuICB0aGlzLm5vZGUuYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cbiAgdmFyIG1zZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBtc2cuY2xhc3NMaXN0LmFkZChNU0dfQ0xBU1MpO1xuICBtc2cuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5tc2cpKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChtc2cpO1xuXG4gIHZhciBidXR0b25Hcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBidXR0b25Hcm91cC5jbGFzc0xpc3QuYWRkKEJVVFRPTl9HUk9VUF9DTEFTUyk7XG4gIHRoaXMubm9kZS5hcHBlbmRDaGlsZChidXR0b25Hcm91cCk7XG4gIHZhciBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoQlVUVE9OX0NMQVNTLCAnYWxlcnQtb2snKTtcbiAgYnV0dG9uLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMub2tUaXRsZSkpO1xuICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidXR0b24pO1xufTtcblxuQWxlcnQucHJvdG90eXBlLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIE1vZGFsLnByb3RvdHlwZS5iaW5kRXZlbnRzLmNhbGwodGhpcyk7XG4gIHZhciBidXR0b24gPSB0aGlzLm5vZGUucXVlcnlTZWxlY3RvcignLicgKyBCVVRUT05fQ0xBU1MpO1xuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gICAgdGhpcy5jYWxsYmFjayAmJiB0aGlzLmNhbGxiYWNrKCk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBDT05URU5UX0NMQVNTJDEgPSAnY29udGVudCc7XG52YXIgTVNHX0NMQVNTJDEgPSAnY29udGVudC1tc2cnO1xudmFyIEJVVFRPTl9HUk9VUF9DTEFTUyQxID0gJ2J0bi1ncm91cCc7XG52YXIgQlVUVE9OX0NMQVNTJDEgPSAnYnRuJztcblxuZnVuY3Rpb24gQ29uZmlybSAoY29uZmlnKSB7XG4gIHRoaXMubXNnID0gY29uZmlnLm1lc3NhZ2UgfHwgJyc7XG4gIHRoaXMuY2FsbGJhY2sgPSBjb25maWcuY2FsbGJhY2s7XG4gIHRoaXMub2tUaXRsZSA9IGNvbmZpZy5va1RpdGxlIHx8ICdPSyc7XG4gIHRoaXMuY2FuY2VsVGl0bGUgPSBjb25maWcuY2FuY2VsVGl0bGUgfHwgJ0NhbmNlbCc7XG4gIE1vZGFsLmNhbGwodGhpcyk7XG4gIHRoaXMubm9kZS5jbGFzc0xpc3QuYWRkKCd3ZWV4LWNvbmZpcm0nKTtcbn1cblxuQ29uZmlybS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKE1vZGFsLnByb3RvdHlwZSk7XG5cbkNvbmZpcm0ucHJvdG90eXBlLmNyZWF0ZU5vZGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgY29udGVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb250ZW50LmNsYXNzTGlzdC5hZGQoQ09OVEVOVF9DTEFTUyQxKTtcbiAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGNvbnRlbnQpO1xuXG4gIHZhciBtc2cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgbXNnLmNsYXNzTGlzdC5hZGQoTVNHX0NMQVNTJDEpO1xuICBtc2cuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGhpcy5tc2cpKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChtc2cpO1xuXG4gIHZhciBidXR0b25Hcm91cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBidXR0b25Hcm91cC5jbGFzc0xpc3QuYWRkKEJVVFRPTl9HUk9VUF9DTEFTUyQxKTtcbiAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGJ1dHRvbkdyb3VwKTtcbiAgdmFyIGJ0bk9rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGJ0bk9rLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMub2tUaXRsZSkpO1xuICBidG5Pay5jbGFzc0xpc3QuYWRkKCdidG4tb2snLCBCVVRUT05fQ0xBU1MkMSk7XG4gIHZhciBidG5DYW5jZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYnRuQ2FuY2VsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMuY2FuY2VsVGl0bGUpKTtcbiAgYnRuQ2FuY2VsLmNsYXNzTGlzdC5hZGQoJ2J0bi1jYW5jZWwnLCBCVVRUT05fQ0xBU1MkMSk7XG4gIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKGJ0bk9rKTtcbiAgYnV0dG9uR3JvdXAuYXBwZW5kQ2hpbGQoYnRuQ2FuY2VsKTtcbiAgdGhpcy5ub2RlLmFwcGVuZENoaWxkKGJ1dHRvbkdyb3VwKTtcbn07XG5cbkNvbmZpcm0ucHJvdG90eXBlLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIE1vZGFsLnByb3RvdHlwZS5iaW5kRXZlbnRzLmNhbGwodGhpcyk7XG4gIHZhciBidG5PayA9IHRoaXMubm9kZS5xdWVyeVNlbGVjdG9yKCcuJyArIEJVVFRPTl9DTEFTUyQxICsgJy5idG4tb2snKTtcbiAgdmFyIGJ0bkNhbmNlbCA9IHRoaXMubm9kZS5xdWVyeVNlbGVjdG9yKCcuJyArIEJVVFRPTl9DTEFTUyQxICsgJy5idG4tY2FuY2VsJyk7XG4gIGJ0bk9rLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGVzdHJveSgpO1xuICAgIHRoaXMuY2FsbGJhY2sgJiYgdGhpcy5jYWxsYmFjayh0aGlzLm9rVGl0bGUpO1xuICB9LmJpbmQodGhpcykpO1xuICBidG5DYW5jZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gICAgdGhpcy5jYWxsYmFjayAmJiB0aGlzLmNhbGxiYWNrKHRoaXMuY2FuY2VsVGl0bGUpO1xuICB9LmJpbmQodGhpcykpO1xufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgQ09OVEVOVF9DTEFTUyQyID0gJ2NvbnRlbnQnO1xudmFyIE1TR19DTEFTUyQyID0gJ2NvbnRlbnQtbXNnJztcbnZhciBCVVRUT05fR1JPVVBfQ0xBU1MkMiA9ICdidG4tZ3JvdXAnO1xudmFyIEJVVFRPTl9DTEFTUyQyID0gJ2J0bic7XG52YXIgSU5QVVRfV1JBUF9DTEFTUyA9ICdpbnB1dC13cmFwJztcbnZhciBJTlBVVF9DTEFTUyA9ICdpbnB1dCc7XG5cbmZ1bmN0aW9uIFByb21wdCAoY29uZmlnKSB7XG4gIHRoaXMubXNnID0gY29uZmlnLm1lc3NhZ2UgfHwgJyc7XG4gIHRoaXMuZGVmYXVsdE1zZyA9IGNvbmZpZy5kZWZhdWx0IHx8ICcnO1xuICB0aGlzLmNhbGxiYWNrID0gY29uZmlnLmNhbGxiYWNrO1xuICB0aGlzLm9rVGl0bGUgPSBjb25maWcub2tUaXRsZSB8fCAnT0snO1xuICB0aGlzLmNhbmNlbFRpdGxlID0gY29uZmlnLmNhbmNlbFRpdGxlIHx8ICdDYW5jZWwnO1xuICBNb2RhbC5jYWxsKHRoaXMpO1xuICB0aGlzLm5vZGUuY2xhc3NMaXN0LmFkZCgnd2VleC1wcm9tcHQnKTtcbn1cblxuUHJvbXB0LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoTW9kYWwucHJvdG90eXBlKTtcblxuUHJvbXB0LnByb3RvdHlwZS5jcmVhdGVOb2RlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29udGVudC5jbGFzc0xpc3QuYWRkKENPTlRFTlRfQ0xBU1MkMik7XG4gIHRoaXMubm9kZS5hcHBlbmRDaGlsZChjb250ZW50KTtcblxuICB2YXIgbXNnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG1zZy5jbGFzc0xpc3QuYWRkKE1TR19DTEFTUyQyKTtcbiAgbXNnLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRoaXMubXNnKSk7XG4gIGNvbnRlbnQuYXBwZW5kQ2hpbGQobXNnKTtcblxuICB2YXIgaW5wdXRXcmFwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGlucHV0V3JhcC5jbGFzc0xpc3QuYWRkKElOUFVUX1dSQVBfQ0xBU1MpO1xuICBjb250ZW50LmFwcGVuZENoaWxkKGlucHV0V3JhcCk7XG4gIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gIGlucHV0LmNsYXNzTGlzdC5hZGQoSU5QVVRfQ0xBU1MpO1xuICBpbnB1dC50eXBlID0gJ3RleHQnO1xuICBpbnB1dC5hdXRvZm9jdXMgPSB0cnVlO1xuICBpbnB1dC5wbGFjZWhvbGRlciA9IHRoaXMuZGVmYXVsdE1zZztcbiAgaW5wdXRXcmFwLmFwcGVuZENoaWxkKGlucHV0KTtcblxuICB2YXIgYnV0dG9uR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgYnV0dG9uR3JvdXAuY2xhc3NMaXN0LmFkZChCVVRUT05fR1JPVVBfQ0xBU1MkMik7XG4gIHZhciBidG5PayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBidG5Pay5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLm9rVGl0bGUpKTtcbiAgYnRuT2suY2xhc3NMaXN0LmFkZCgnYnRuLW9rJywgQlVUVE9OX0NMQVNTJDIpO1xuICB2YXIgYnRuQ2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGJ0bkNhbmNlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLmNhbmNlbFRpdGxlKSk7XG4gIGJ0bkNhbmNlbC5jbGFzc0xpc3QuYWRkKCdidG4tY2FuY2VsJywgQlVUVE9OX0NMQVNTJDIpO1xuICBidXR0b25Hcm91cC5hcHBlbmRDaGlsZChidG5Payk7XG4gIGJ1dHRvbkdyb3VwLmFwcGVuZENoaWxkKGJ0bkNhbmNlbCk7XG4gIHRoaXMubm9kZS5hcHBlbmRDaGlsZChidXR0b25Hcm91cCk7XG59O1xuXG5Qcm9tcHQucHJvdG90eXBlLmJpbmRFdmVudHMgPSBmdW5jdGlvbiAoKSB7XG4gIE1vZGFsLnByb3RvdHlwZS5iaW5kRXZlbnRzLmNhbGwodGhpcyk7XG4gIHZhciBidG5PayA9IHRoaXMubm9kZS5xdWVyeVNlbGVjdG9yKCcuJyArIEJVVFRPTl9DTEFTUyQyICsgJy5idG4tb2snKTtcbiAgdmFyIGJ0bkNhbmNlbCA9IHRoaXMubm9kZS5xdWVyeVNlbGVjdG9yKCcuJyArIEJVVFRPTl9DTEFTUyQyICsgJy5idG4tY2FuY2VsJyk7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgYnRuT2suYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0JykudmFsdWU7XG4gICAgdGhpcy5kZXN0cm95KCk7XG4gICAgdGhpcy5jYWxsYmFjayAmJiB0aGlzLmNhbGxiYWNrKHtcbiAgICAgIHJlc3VsdDogdGhhdC5va1RpdGxlLFxuICAgICAgZGF0YTogdmFsXG4gICAgfSk7XG4gIH0uYmluZCh0aGlzKSk7XG4gIGJ0bkNhbmNlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaW5wdXQnKS52YWx1ZTtcbiAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB0aGlzLmNhbGxiYWNrICYmIHRoaXMuY2FsbGJhY2soe1xuICAgICAgcmVzdWx0OiB0aGF0LmNhbmNlbFRpdGxlLFxuICAgICAgZGF0YTogdmFsXG4gICAgfSk7XG4gIH0uYmluZCh0aGlzKSk7XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfY3NzJDEwID0gXCJcXG4ud2VleC10b2FzdCB7XFxuICBmb250LXNpemU6IDAuNDI2NjY3cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDAuNDI2NjY3cmVtO1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgei1pbmRleDogMTk5OTk5OTk5OTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBtYXgtd2lkdGg6IDgwJTtcXG4gIGJvdHRvbTogNTAlO1xcbiAgbGVmdDogNTAlO1xcbiAgcGFkZGluZzogMC4yMTMzMzNyZW07XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbiAgY29sb3I6ICNmZmY7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBvcGFjaXR5OiAwLjc7XFxuICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2UtaW4tb3V0O1xcbiAgLW1vei10cmFuc2l0aW9uOiBhbGwgMC40cyBlYXNlLWluLW91dDtcXG4gIC1tcy10cmFuc2l0aW9uOiBhbGwgMC40cyBlYXNlLWluLW91dDtcXG4gIHRyYW5zaXRpb246IGFsbCAwLjRzIGVhc2UtaW4tb3V0O1xcbiAgYm9yZGVyLXJhZGl1czogMC4wNjY2NjdyZW07XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG4gIC1tb3otdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcbiAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKTtcXG59XFxuXFxuLndlZXgtdG9hc3QuaGlkZSB7XFxuICBvcGFjaXR5OiAwO1xcbn1cXG5cXG4ud2VleC1hbGVydCAud2VleC1hbGVydC1vayB7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLndlZXgtY29uZmlybSAuYnRuLWdyb3VwIC5idG4ge1xcbiAgZmxvYXQ6IGxlZnQ7XFxuICB3aWR0aDogNTAlO1xcbn1cXG5cXG4ud2VleC1jb25maXJtIC5idG4tZ3JvdXAgLmJ0bi5idG4tb2sge1xcbiAgYm9yZGVyLXJpZ2h0OiAwLjAxMzMzM3JlbSBzb2xpZCAjZGRkO1xcbn1cXG5cXG4ud2VleC1tb2RhbC13cmFwIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBwb3NpdGlvbjogZml4ZWQ7XFxuICB6LWluZGV4OiA5OTk5OTk5OTk7XFxuICB0b3A6IDA7XFxuICBsZWZ0OiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbiAgb3BhY2l0eTogMC41O1xcbn1cXG5cXG4ud2VleC1tb2RhbC1ub2RlIHtcXG4gIHBvc2l0aW9uOiBmaXhlZDtcXG4gIHotaW5kZXg6IDk5OTk5OTk5OTk7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHdpZHRoOiA2LjY2NjY2N3JlbTtcXG4gIG1pbi1oZWlnaHQ6IDIuNjY2NjY3cmVtO1xcbiAgYm9yZGVyLXJhZGl1czogMC4wNjY2NjdyZW07XFxuICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgLW1vei10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIC1tcy10cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjtcXG59XFxuXFxuLndlZXgtbW9kYWwtbm9kZS5oaWRlIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbi53ZWV4LW1vZGFsLW5vZGUgLmNvbnRlbnQge1xcbiAgZGlzcGxheTogLXdlYmtpdC1ib3g7XFxuICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XFxuICBkaXNwbGF5OiAtbW96LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XFxuICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAtbW96LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgLW1vei1ib3gtZGlyZWN0aW9uOiBub3JtYWw7XFxuICAtbXMtZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGNlbnRlcjtcXG4gIC13ZWJraXQtYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAtbW96LWJveC1hbGlnbjogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAtd2Via2l0LWJveC1wYWNrOiBjZW50ZXI7XFxuICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgLW1vei1ib3gtcGFjazogY2VudGVyO1xcbiAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB3aWR0aDogMTAwJTtcXG4gIG1pbi1oZWlnaHQ6IDEuODY2NjY3cmVtO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGZvbnQtc2l6ZTogMC40MjY2NjdyZW07XFxuICBsaW5lLWhlaWdodDogMC40MjY2NjdyZW07XFxuICBwYWRkaW5nOiAwLjIxMzMzM3JlbTtcXG4gIGJvcmRlci1ib3R0b206IDAuMDEzMzMzcmVtIHNvbGlkICNkZGQ7XFxufVxcblxcbi53ZWV4LW1vZGFsLW5vZGUgLmJ0bi1ncm91cCB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMC44cmVtO1xcbiAgZm9udC1zaXplOiAwLjM3MzMzM3JlbTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IG5vbmU7XFxufVxcblxcbi53ZWV4LW1vZGFsLW5vZGUgLmJ0bi1ncm91cCAuYnRuIHtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLndlZXgtbW9kYWwtbm9kZSAuYnRuLWdyb3VwIC5idG4ge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIGhlaWdodDogMC44cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDAuOHJlbTtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBib3JkZXI6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiBub25lO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4ud2VleC1wcm9tcHQgLmlucHV0LXdyYXAge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgbWFyZ2luLXRvcDogMC4xMzMzMzNyZW07XFxuICBoZWlnaHQ6IDAuOTZyZW07XFxufVxcblxcbi53ZWV4LXByb21wdCAuaW5wdXQtd3JhcCAuaW5wdXQge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAwLjU2cmVtO1xcbiAgbGluZS1oZWlnaHQ6IDAuNTZyZW07XFxuICBmb250LXNpemU6IDAuNDI2NjY3cmVtO1xcbiAgYm9yZGVyOiAwLjAxMzMzM3JlbSBzb2xpZCAjOTk5O1xcbn1cXG5cXG4ud2VleC1wcm9tcHQgLmJ0bi1ncm91cCAuYnRuIHtcXG4gIGZsb2F0OiBsZWZ0O1xcbiAgd2lkdGg6IDUwJTtcXG59XFxuXFxuLndlZXgtcHJvbXB0IC5idG4tZ3JvdXAgLmJ0bi5idG4tb2sge1xcbiAgYm9yZGVyLXJpZ2h0OiAwLjAxMzMzM3JlbSBzb2xpZCAjZGRkO1xcbn1cXG5cIjtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG4vLyBUT0RPOiByZXdyaXRlIHRoZSBtb2RhbCBzdHlsZXNcbnZhciBtb2RhbCA9IHtcblxuICAvLyBkdXJhdGlvbjogZGVmYXVsdCBpcyAwLjggc2Vjb25kcy5cbiAgdG9hc3Q6IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICB0b2FzdC5wdXNoKGNvbmZpZy5tZXNzYWdlLCBjb25maWcuZHVyYXRpb24pO1xuICB9LFxuXG4gIC8vIGNvbmZpZzpcbiAgLy8gIC0gbWVzc2FnZTogc3RyaW5nXG4gIC8vICAtIG9rVGl0bGU6IHRpdGxlIG9mIG9rIGJ1dHRvblxuICAvLyAgLSBjYWxsYmFja1xuICBhbGVydDogZnVuY3Rpb24gKGNvbmZpZywgY2FsbGJhY2spIHtcbiAgICBjb25maWcuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH07XG4gICAgbmV3IEFsZXJ0KGNvbmZpZykuc2hvdygpO1xuICB9LFxuXG4gIC8vIGNvbmZpZzpcbiAgLy8gIC0gbWVzc2FnZTogc3RyaW5nXG4gIC8vICAtIG9rVGl0bGU6IHRpdGxlIG9mIG9rIGJ1dHRvblxuICAvLyAgLSBjYW5jZWxUaXRsZTogdGl0bGUgb2YgY2FuY2VsIGJ1dHRvblxuICAvLyAgLSBjYWxsYmFja1xuICBjb25maXJtOiBmdW5jdGlvbiAoY29uZmlnLCBjYWxsYmFjaykge1xuICAgIGNvbmZpZy5jYWxsYmFjayA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHZhbCk7XG4gICAgfTtcbiAgICBuZXcgQ29uZmlybShjb25maWcpLnNob3coKTtcbiAgfSxcblxuICAvLyBjb25maWc6XG4gIC8vICAtIG1lc3NhZ2U6IHN0cmluZ1xuICAvLyAgLSBva1RpdGxlOiB0aXRsZSBvZiBvayBidXR0b25cbiAgLy8gIC0gY2FuY2VsVGl0bGU6IHRpdGxlIG9mIGNhbmNlbCBidXR0b25cbiAgLy8gIC0gY2FsbGJhY2tcbiAgcHJvbXB0OiBmdW5jdGlvbiAoY29uZmlnLCBjYWxsYmFjaykge1xuICAgIGNvbmZpZy5jYWxsYmFjayA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHZhbCk7XG4gICAgfTtcbiAgICBuZXcgUHJvbXB0KGNvbmZpZykuc2hvdygpO1xuICB9XG59O1xuXG52YXIgbW9kYWwkMSA9IHtcbiAgaW5pdDogZnVuY3Rpb24gKFdlZXgpIHtcbiAgICBXZWV4LnV0aWxzLmFwcGVuZENzcyhfY3NzJDEwLCAnd2VleC1tdWQtbW9kYWwnKTtcbiAgICBXZWV4LnJlZ2lzdGVyTW9kdWxlKCdtb2RhbCcsIG1vZGFsKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogTmF2aWdhdG9yIG1vZHVsZVxuICovXG52YXIgbmF2aWdhdG9yTW9kdWxlID0ge1xuICBwdXNoOiBmdW5jdGlvbiAoY29uZmlnLCBjYWxsYmFjaykge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gY29uZmlnLnVybDtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICB9LFxuXG4gIHBvcDogZnVuY3Rpb24gKGNvbmZpZywgY2FsbGJhY2spIHtcbiAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XG4gICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTtcbiAgfVxufTtcblxudmFyIG5hdmlnYXRvck1vZHVsZSQxID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh3ZWV4KSB7XG4gICAgd2VleC5yZWdpc3Rlck1vZHVsZSgnbmF2aWdhdG9yJywgbmF2aWdhdG9yTW9kdWxlKTtcbiAgfVxufTtcblxuLypcbiAqIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbiAqIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuICogZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbiAqIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbiAqIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbiAqIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuICogd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuICogc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbiAqIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4gKiBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbiAqIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbiAqIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5cbi8qKlxuICogV2VidmlldyBtb2R1bGVcbiAqL1xudmFyIGlzQXJyYXkkMjtcblxudmFyIHdlYnZpZXcgPSB7XG4gIGdvQmFjazogZnVuY3Rpb24gZ29CYWNrICh2bm9kZSkge1xuICAgIGlmIChpc0FycmF5JDIodm5vZGUpKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICBpZiAodm5vZGUgJiYgdHlwZW9mIHZub2RlLmdvQmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdm5vZGUuZ29CYWNrKCk7XG4gICAgfVxuICB9LFxuICBnb0ZvcndhcmQ6IGZ1bmN0aW9uIGdvRm9yd2FyZCAodm5vZGUpIHtcbiAgICBpZiAoaXNBcnJheSQyKHZub2RlKSkge1xuICAgICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgICB9XG4gICAgaWYgKHZub2RlICYmIHR5cGVvZiB2bm9kZS5nb0ZvcndhcmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZub2RlLmdvRm9yd2FyZCgpO1xuICAgIH1cbiAgfSxcbiAgcmVsb2FkOiBmdW5jdGlvbiByZWxvYWQgKHZub2RlKSB7XG4gICAgaWYgKGlzQXJyYXkkMih2bm9kZSkpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIGlmICh2bm9kZSAmJiB0eXBlb2Ygdm5vZGUucmVsb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2bm9kZS5yZWxvYWQoKTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB3ZWJ2aWV3JDEgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHdlZXgpIHtcbiAgICBpc0FycmF5JDIgPSB3ZWV4LnV0aWxzLmlzQXJyYXk7XG4gICAgd2VleC5yZWdpc3Rlck1vZHVsZSgnd2VidmlldycsIHdlYnZpZXcpO1xuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qKlxuICogd2Vic29ja2V0IG1vZHVsZVxuICovXG4vKmdsb2JhbCBXZWJTb2NrZXQqL1xudmFyIHdlYnNvY2tldCQxID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlZ2lzdGVyTGlzdGVuZXJzID0gWydvbm9wZW4nLCAnb25tZXNzYWdlJywgJ29uZXJyb3InLCAnb25jbG9zZSddO1xuICB2YXIgd3MgPSB7XG4gICAgSU5TVEFOQ0U6IG51bGwsXG4gICAgV2ViU29ja2V0OiBmdW5jdGlvbiAodXJsLCBwcm90b2NvbCkge1xuICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgd3MuSU5TVEFOQ0UgPSBudWxsO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIGlmICghcHJvdG9jb2wpIHtcbiAgICAgICAgd3MuSU5TVEFOQ0UgPSBuZXcgV2ViU29ja2V0KHVybCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgd3MuSU5TVEFOQ0UgPSBuZXcgV2ViU29ja2V0KHVybCwgcHJvdG9jb2wpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdzLklOU1RBTkNFXG4gICAgfSxcbiAgICBzZW5kOiBmdW5jdGlvbiAobWVzc2FnZXMpIHtcbiAgICAgIHdzLklOU1RBTkNFICYmIHdzLklOU1RBTkNFLnNlbmQobWVzc2FnZXMpO1xuICAgIH0sXG4gICAgY2xvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdzLklOU1RBTkNFICYmIHdzLklOU1RBTkNFLmNsb3NlKCk7XG4gICAgfVxuICB9O1xuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICggaSApIHtcbiAgICBpZiAocmVnaXN0ZXJMaXN0ZW5lcnMuaGFzT3duUHJvcGVydHkoaSkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3cywgcmVnaXN0ZXJMaXN0ZW5lcnNbaV0sIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHdzLklOU1RBTkNFICYmIHdzLklOU1RBTkNFW3JlZ2lzdGVyTGlzdGVuZXJzW2ldXVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgIGlmICh3cy5JTlNUQU5DRSkge1xuICAgICAgICAgICAgd3MuSU5TVEFOQ0VbcmVnaXN0ZXJMaXN0ZW5lcnNbaV1dID0gZm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgZm9yICh2YXIgaSBpbiByZWdpc3Rlckxpc3RlbmVycykgbG9vcCggaSApO1xuICByZXR1cm4gd3Ncbn0pKCk7XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuLy8gVE9ETzogcmV3cml0ZSB0aGUgbW9kdWxlIG1ldGFcbnZhciB3ZWJzb2NrZXQgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIChXZWV4KSB7XG4gICAgV2VleC5yZWdpc3Rlck1vZHVsZSgnd2ViU29ja2V0Jywgd2Vic29ja2V0JDEsIHsgbW91bnRUeXBlOiAnZnVsbCcgfSk7XG4gIH1cbn07XG5cbi8qXG4gKiBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4gKiBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbiAqIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4gKiByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4gKiB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4gKiBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2VcbiAqIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbiAqIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4gKiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuICogS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4gKiBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4gKiB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG52YXIgbWV0YSQ1ID0ge1xuICAvKipcbiAgICogc2V0Vmlld3BvcnRcbiAgICogQ2hhbmdpbmcgdmlld3BvcnQgd2lkdGggYXQgcnVudGltZSBpcyBub3Qgc3VwcG9ydGVkLiBQbGVhc2UgdXNlIHdlZXgtdmlld3BvcnQgbWV0YVxuICAgKiB0YWcgdG8gc3BlY2lmeSB5b3VyIHZpZXdwb3J0IGluIHlvdXIgaHRtbCBmaWxlLlxuICAgKi9cbiAgc2V0Vmlld3BvcnQ6IGZ1bmN0aW9uIHNldFZpZXdwb3J0IChvcHRpb25zKSB7XG4gICAgY29uc29sZS53YXJuKFwiW3Z1ZS1yZW5kZXJdIG1ldGEuc2V0Vmlld3BvcnQgZG9lc24ndCB3b3JrcyBhcyBleHBlY3RlZCBpbiB3ZWIgcGxhdGZvcm0uXCJcbiAgICArIFwiIFBsZWFzZSB1c2UgPG1ldGEgbmFtZT1cXFwid2VleC12aWV3cG9ydFxcXCIgY29udGVudD1cXFwieHh4XFxcIj4gdG8gc3BlY2lmeSB5b3VyIHZpZXdwb3J0IHdpZHRoLlwiKTtcbiAgfVxufTtcblxudmFyIG1ldGEkNiA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAod2VleCkge1xuICAgIHdlZXgucmVnaXN0ZXJNb2R1bGUoJ21ldGEnLCBtZXRhJDUpO1xuICB9XG59O1xuXG4vKlxuICogTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuICogb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4gKiBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICogcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuICogdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuICogXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4gKiB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4gKiBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuICogXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbiAqIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuICogc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuICogdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuLy8gbW9kdWxlcyBmcm9tIHJlbmRlci9icm93ZXNyIChsZWdhY3kgbW9kdWxlcylcblxuLy8gY3VzdG9tIG1vZHVsZXNcbnZhciBtb2R1bGVzJDEgPSBbXG4gIGdlb2xvY2F0aW9uJDEsXG4gIHN0b3JhZ2UkMSxcbiAgc3RyZWFtJDEsXG4gIGNsaXBib2FyZCQxLFxuICBldmVudE1vZHVsZSxcbiAgbW9kYWwkMSxcbiAgd2Vic29ja2V0LFxuICBhbmltYXRpb24kMSxcbiAgZG9tJDEsXG4gIGdsb2JhbEV2ZW50JDEsXG4gIG5hdmlnYXRvck1vZHVsZSQxLFxuICB3ZWJ2aWV3JDEsXG4gIG1ldGEkNlxuXTtcblxudmFyIHByZUluaXQgPSB3ZWV4LmluaXQ7XG5cbndlZXguaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgcHJlSW5pdC5hcHBseSh3ZWV4LCBhcmd1bWVudHMpO1xuICB2YXIgcGx1Z2lucyA9IGNvbXBvbmVudHMuY29uY2F0KG1vZHVsZXMkMSk7XG5cbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB3ZWV4Lmluc3RhbGwocGx1Z2luKTtcbiAgfSk7XG59O1xuXG5pZiAoZ2xvYmFsLlZ1ZSkge1xuICB3ZWV4LmluaXQoZ2xvYmFsLlZ1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2VleDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJanB1ZFd4c0xDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMMmgwYld3MUwzSmxibVJsY2k5MmRXVXZiR2xpTDJkbGMzUjFjbVV1YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5emFHRnlaV1F2WVhKeVlYbEdjbTl0TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWjJ4dlltRnNMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZZMjl5WlM1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJsekxXOWlhbVZqZEM1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJGdUxXOWlhbVZqZEM1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJaaGFXeHpMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZaR1Z6WTNKcGNIUnZjbk11YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlrYjIwdFkzSmxZWFJsTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYVdVNExXUnZiUzFrWldacGJtVXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOTBieTF3Y21sdGFYUnBkbVV1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl2WW1wbFkzUXRaSEF1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl3Y205d1pYSjBlUzFrWlhOakxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmFHbGtaUzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMmhoY3k1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDNWcFpDNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzSmxaR1ZtYVc1bExtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZllTMW1kVzVqZEdsdmJpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyTjBlQzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMlY0Y0c5eWRDNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyTnZaaTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMmx2WW1wbFkzUXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOWtaV1pwYm1Wa0xtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmRHOHRhVzlpYW1WamRDNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgzUnZMV2x1ZEdWblpYSXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOTBieTFzWlc1bmRHZ3Vhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOTBieTFoWW5OdmJIVjBaUzFwYm1SbGVDNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyRnljbUY1TFdsdVkyeDFaR1Z6TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYzJoaGNtVmtMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZjMmhoY21Wa0xXdGxlUzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZYMjlpYW1WamRDMXJaWGx6TFdsdWRHVnlibUZzTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWlc1MWJTMWlkV2N0YTJWNWN5NXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyOWlhbVZqZEMxclpYbHpMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZiMkpxWldOMExXZHZjSE11YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl2WW1wbFkzUXRjR2xsTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmZEc4dGIySnFaV04wTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV0Z6YzJsbmJpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNWhjM05wWjI0dWFuTWlMQ0l1TGk4dUxpOHVMaTlvZEcxc05TOXphR0Z5WldRdmIySnFaV04wUVhOemFXZHVMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2YzJoaGNtVmtMMjlpYW1WamRGTmxkRkJ5YjNSdmRIbHdaVTltTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmZDJ0ekxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZlkyeGhjM052Wmk1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WlhNMkxtOWlhbVZqZEM1MGJ5MXpkSEpwYm1jdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5emRISnBibWN0WVhRdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5c2FXSnlZWEo1TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYVhSbGNtRjBiM0p6TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYjJKcVpXTjBMV1J3Y3k1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDJoMGJXd3Vhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXZZbXBsWTNRdFkzSmxZWFJsTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYzJWMExYUnZMWE4wY21sdVp5MTBZV2N1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTlwZEdWeUxXTnlaV0YwWlM1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI5aWFtVmpkQzFuY0c4dWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5cGRHVnlMV1JsWm1sdVpTNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbk4wY21sdVp5NXBkR1Z5WVhSdmNpNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgyRmtaQzEwYnkxMWJuTmpiM0JoWW14bGN5NXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlgybDBaWEl0YzNSbGNDNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OWpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbUZ5Y21GNUxtbDBaWEpoZEc5eUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5M1pXSXVaRzl0TG1sMFpYSmhZbXhsTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmWVc0dGFXNXpkR0Z1WTJVdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5cGRHVnlMV05oYkd3dWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5cGN5MWhjbkpoZVMxcGRHVnlMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWpiM0psTG1kbGRDMXBkR1Z5WVhSdmNpMXRaWFJvYjJRdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdlkyOXlaUzFxY3k5dGIyUjFiR1Z6TDE5bWIzSXRiMll1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12WTI5eVpTMXFjeTl0YjJSMWJHVnpMMTl6Y0dWamFXVnpMV052Ym5OMGNuVmpkRzl5TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmYVc1MmIydGxMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMk52Y21VdGFuTXZiVzlrZFd4bGN5OWZkR0Z6YXk1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDIxcFkzSnZkR0Z6YXk1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5amIzSmxMV3B6TDIxdlpIVnNaWE12WDI1bGR5MXdjbTl0YVhObExXTmhjR0ZpYVd4cGRIa3Vhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXdaWEptYjNKdExtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmNISnZiV2x6WlMxeVpYTnZiSFpsTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOdmNtVXRhbk12Ylc5a2RXeGxjeTlmY21Wa1pXWnBibVV0WVd4c0xtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwyTnZjbVV0YW5NdmJXOWtkV3hsY3k5ZmMyVjBMWE53WldOcFpYTXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZZMjl5WlMxcWN5OXRiMlIxYkdWekwxOXBkR1Z5TFdSbGRHVmpkQzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlqYjNKbExXcHpMMjF2WkhWc1pYTXZaWE0yTG5CeWIyMXBjMlV1YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5eVpXNWtaWEl2ZG5WbEwyeHBZaTlsYm5aa0wzWmxjbk5wYjI0dWFuTWlMQ0l1TGk4dUxpOHVMaTlvZEcxc05TOXlaVzVrWlhJdmRuVmxMMnhwWWk5bGJuWmtMM0JoY21GdGN5NXFjeUlzSWk0dUx5NHVMeTR1TDJoMGJXdzFMM0psYm1SbGNpOTJkV1V2YkdsaUwyVnVkbVF2YVc1a1pYZ3Vhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDNWMGFXeHpMM1I1Y0dVdWFuTWlMQ0l1TGk4dUxpOHVMaTlvZEcxc05TOXlaVzVrWlhJdmRuVmxMM1YwYVd4ekwyWjFibU11YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5eVpXNWtaWEl2ZG5WbEwyVnVkaTkyYVdWM2NHOXlkQzVxY3lJc0lpNHVMeTR1THk0dUwyaDBiV3cxTDNKbGJtUmxjaTkyZFdVdmRYUnBiSE12WlhabGJuUXVhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDJOdmJtWnBaeTVxY3lJc0lpNHVMeTR1THk0dUwyaDBiV3cxTDNKbGJtUmxjaTkyZFdVdmRYUnBiSE12WTI5dGNHOXVaVzUwTG1weklpd2lMaTR2TGk0dkxpNHZhSFJ0YkRVdmNtVnVaR1Z5TDNaMVpTOTFkR2xzY3k5c1lYcDViRzloWkM1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5cGJteHBibVV0YzNSNWJHVXRjSEpsWm1sNFpYSXZkWFJwYkhNdlkyRndhWFJoYkdsNlpWTjBjbWx1Wnk1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5cGJteHBibVV0YzNSNWJHVXRjSEpsWm1sNFpYSXZkWFJwYkhNdmNISmxabWw0VUhKdmNHVnlkSGt1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12YVc1c2FXNWxMWE4wZVd4bExYQnlaV1pwZUdWeUwzVjBhV3h6TDNCeVpXWnBlRlpoYkhWbExtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwybHViR2x1WlMxemRIbHNaUzF3Y21WbWFYaGxjaTkxZEdsc2N5OWhaR1JPWlhkV1lXeDFaWE5QYm14NUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwybHViR2x1WlMxemRIbHNaUzF3Y21WbWFYaGxjaTkxZEdsc2N5OXBjMDlpYW1WamRDNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OXBibXhwYm1VdGMzUjViR1V0Y0hKbFptbDRaWEl2YzNSaGRHbGpMMk55WldGMFpWQnlaV1pwZUdWeUxtcHpJaXdpTGk0dkxpNHZMaTR2Ym05a1pWOXRiMlIxYkdWekwybHViR2x1WlMxemRIbHNaUzF3Y21WbWFYaGxjaTl6ZEdGMGFXTXZjM1JoZEdsalJHRjBZUzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlwYm14cGJtVXRjM1I1YkdVdGNISmxabWw0WlhJdmMzUmhkR2xqTDNCc2RXZHBibk12WTNWeWMyOXlMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMk56Y3kxcGJpMXFjeTExZEdsc2N5OXNhV0l2YVhOUWNtVm1hWGhsWkZaaGJIVmxMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMMmx1YkdsdVpTMXpkSGxzWlMxd2NtVm1hWGhsY2k5emRHRjBhV012Y0d4MVoybHVjeTlqY205emMwWmhaR1V1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12YVc1c2FXNWxMWE4wZVd4bExYQnlaV1pwZUdWeUwzTjBZWFJwWXk5d2JIVm5hVzV6TDJacGJIUmxjaTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlwYm14cGJtVXRjM1I1YkdVdGNISmxabWw0WlhJdmMzUmhkR2xqTDNCc2RXZHBibk12Wm14bGVDNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OXBibXhwYm1VdGMzUjViR1V0Y0hKbFptbDRaWEl2YzNSaGRHbGpMM0JzZFdkcGJuTXZabXhsZUdKdmVFOXNaQzVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTlwYm14cGJtVXRjM1I1YkdVdGNISmxabWw0WlhJdmMzUmhkR2xqTDNCc2RXZHBibk12WjNKaFpHbGxiblF1YW5NaUxDSXVMaTh1TGk4dUxpOXViMlJsWDIxdlpIVnNaWE12YVc1c2FXNWxMWE4wZVd4bExYQnlaV1pwZUdWeUwzTjBZWFJwWXk5d2JIVm5hVzV6TDJsdFlXZGxVMlYwTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJsdWJHbHVaUzF6ZEhsc1pTMXdjbVZtYVhobGNpOXpkR0YwYVdNdmNHeDFaMmx1Y3k5d2IzTnBkR2x2Ymk1cWN5SXNJaTR1THk0dUx5NHVMMjV2WkdWZmJXOWtkV3hsY3k5cGJteHBibVV0YzNSNWJHVXRjSEpsWm1sNFpYSXZjM1JoZEdsakwzQnNkV2RwYm5NdmMybDZhVzVuTG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJoNWNHaGxibUYwWlMxemRIbHNaUzF1WVcxbEwybHVaR1Y0TG1weklpd2lMaTR2TGk0dkxpNHZibTlrWlY5dGIyUjFiR1Z6TDJOemN5MXBiaTFxY3kxMWRHbHNjeTlzYVdJdmFIbHdhR1Z1WVhSbFVISnZjR1Z5ZEhrdWFuTWlMQ0l1TGk4dUxpOHVMaTl1YjJSbFgyMXZaSFZzWlhNdmFXNXNhVzVsTFhOMGVXeGxMWEJ5WldacGVHVnlMM04wWVhScFl5OXdiSFZuYVc1ekwzUnlZVzV6YVhScGIyNHVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZhVzVzYVc1bExYTjBlV3hsTFhCeVpXWnBlR1Z5TDNOMFlYUnBZeTlwYm1SbGVDNXFjeUlzSWk0dUx5NHVMeTR1TDJoMGJXdzFMM0psYm1SbGNpOTJkV1V2ZFhScGJITXZjM1I1YkdVdWFuTWlMQ0l1TGk4dUxpOHVMaTlvZEcxc05TOXlaVzVrWlhJdmRuVmxMM1YwYVd4ekwybHVaR1Y0TG1weklpd2lMaTR2TGk0dkxpNHZhSFJ0YkRVdmNtVnVaR1Z5TDNaMVpTOWxibll2ZDNndFpXNTJMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5bGJuWXZkMlZsZUM1cWN5SXNJaTR1THk0dUx5NHVMMmgwYld3MUwzSmxibVJsY2k5MmRXVXZkWFJwYkhNdmNHVnlaaTVxY3lJc0lpNHVMeTR1THk0dUwyaDBiV3cxTDNKbGJtUmxjaTkyZFdVdlkyOXlaUzl6ZEhsc1pTNXFjeUlzSWk0dUx5NHVMeTR1TDJoMGJXdzFMM0psYm1SbGNpOTJkV1V2WTI5eVpTOXViMlJsTG1weklpd2lMaTR2TGk0dkxpNHZhSFJ0YkRVdmNtVnVaR1Z5TDNaMVpTOWpiM0psTDJsdVpHVjRMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5dGFYaHBibk12WW1GelpTNXFjeUlzSWk0dUx5NHVMeTR1TDJoMGJXdzFMM0psYm1SbGNpOTJkV1V2YldsNGFXNXpMM04wZVd4bExtcHpJaXdpTGk0dkxpNHZMaTR2YUhSdGJEVXZjbVZ1WkdWeUwzWjFaUzl0YVhocGJuTXZhVzV3ZFhRdFkyOXRiVzl1TG1weklpd2lMaTR2TGk0dkxpNHZhSFJ0YkRVdmNtVnVaR1Z5TDNaMVpTOXRhWGhwYm5NdmMzUnBZMnQ1TG1weklpd2lMaTR2TGk0dkxpNHZhSFJ0YkRVdmNtVnVaR1Z5TDNaMVpTOXRhWGhwYm5NdmFXNWtaWGd1YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5eVpXNWtaWEl2ZG5WbEwyVnVkaTluYkc5aVlXd3Vhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDJWdWRpOXBibVJsZUM1cWN5SXNJaTR1THk0dUx5NHVMMmgwYld3MUwzSmxibVJsY2k5MmRXVXZaVzUyTDJWMlpXNTBMVzFoYm1GblpYSXVhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDJsdVpHVjRMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5amIyMXdiMjVsYm5SekwyRXVhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDJOdmJYQnZibVZ1ZEhNdlpHbDJMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5amIyMXdiMjVsYm5SekwybHRZV2RsTG1weklpd2lMaTR2TGk0dkxpNHZhSFJ0YkRVdmNtVnVaR1Z5TDNaMVpTOWpiMjF3YjI1bGJuUnpMMmx1Y0hWMExtcHpJaXdpTGk0dkxpNHZMaTR2YUhSdGJEVXZjbVZ1WkdWeUwzWjFaUzlqYjIxd2IyNWxiblJ6TDNOM2FYUmphQzVxY3lJc0lpNHVMeTR1THk0dUwyaDBiV3cxTDNKbGJtUmxjaTkyZFdVdlkyOXRjRzl1Wlc1MGN5OXpZM0p2Ykd4aFlteGxMMjFwZUdsdWN5OXpZM0p2Ykd4aFlteGxMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5amIyMXdiMjVsYm5SekwzTmpjbTlzYkdGaWJHVXZiV2w0YVc1ekwyeHBjM1F1YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5eVpXNWtaWEl2ZG5WbEwyTnZiWEJ2Ym1WdWRITXZjMk55YjJ4c1lXSnNaUzl0YVhocGJuTXZhVzVrWlhndWFuTWlMQ0l1TGk4dUxpOHVMaTlvZEcxc05TOXlaVzVrWlhJdmRuVmxMMk52YlhCdmJtVnVkSE12YzJOeWIyeHNZV0pzWlM5c2FYTjBMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5amIyMXdiMjVsYm5SekwzTmpjbTlzYkdGaWJHVXZjMk55YjJ4c1pYSXVhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDJOdmJYQnZibVZ1ZEhNdmMyTnliMnhzWVdKc1pTOTNZWFJsY21aaGJHd3Vhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDJOdmJYQnZibVZ1ZEhNdmMyTnliMnhzWVdKc1pTOWpaV3hzTG1weklpd2lMaTR2TGk0dkxpNHZhSFJ0YkRVdmNtVnVaR1Z5TDNaMVpTOWpiMjF3YjI1bGJuUnpMM05qY205c2JHRmliR1V2YUdWaFpHVnlMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5amIyMXdiMjVsYm5SekwzTmpjbTlzYkdGaWJHVXZiRzloWkdsdVp5NXFjeUlzSWk0dUx5NHVMeTR1TDJoMGJXdzFMM0psYm1SbGNpOTJkV1V2WTI5dGNHOXVaVzUwY3k5elkzSnZiR3hoWW14bEwzSmxabkpsYzJndWFuTWlMQ0l1TGk4dUxpOHVMaTlvZEcxc05TOXlaVzVrWlhJdmRuVmxMMk52YlhCdmJtVnVkSE12YzJOeWIyeHNZV0pzWlM5c2IyRmthVzVuTFdsdVpHbGpZWFJ2Y2k1cWN5SXNJaTR1THk0dUx5NHVMMmgwYld3MUwzSmxibVJsY2k5MmRXVXZZMjl0Y0c5dVpXNTBjeTl6WTNKdmJHeGhZbXhsTDJsdVpHVjRMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5amIyMXdiMjVsYm5SekwzTnNhV1JsY2k5emJHbGtaVTFwZUdsdUxtcHpJaXdpTGk0dkxpNHZMaTR2YUhSdGJEVXZjbVZ1WkdWeUwzWjFaUzlqYjIxd2IyNWxiblJ6TDNOc2FXUmxjaTl6Ykdsa1pYSXVhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDJOdmJYQnZibVZ1ZEhNdmMyeHBaR1Z5TDNOc2FXUmxjaTF1WldsbmFHSnZjaTVxY3lJc0lpNHVMeTR1THk0dUwyaDBiV3cxTDNKbGJtUmxjaTkyZFdVdlkyOXRjRzl1Wlc1MGN5OXpiR2xrWlhJdmFXNWthV05oZEc5eUxtcHpJaXdpTGk0dkxpNHZMaTR2YUhSdGJEVXZjbVZ1WkdWeUwzWjFaUzlqYjIxd2IyNWxiblJ6TDNOc2FXUmxjaTlwYm1SbGVDNXFjeUlzSWk0dUx5NHVMeTR1TDJoMGJXdzFMM0psYm1SbGNpOTJkV1V2WTI5dGNHOXVaVzUwY3k5MFpYaDBMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5amIyMXdiMjVsYm5SekwzUmxlSFJoY21WaExtcHpJaXdpTGk0dkxpNHZMaTR2YUhSdGJEVXZjbVZ1WkdWeUwzWjFaUzlqYjIxd2IyNWxiblJ6TDNacFpHVnZMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5amIyMXdiMjVsYm5SekwzZGxZaTVxY3lJc0lpNHVMeTR1THk0dUwyaDBiV3cxTDNKbGJtUmxjaTkyZFdVdlkyOXRjRzl1Wlc1MGN5OXBibVJsZUM1cWN5SXNJaTR1THk0dUx5NHVMMmgwYld3MUwzSmxibVJsY2k5aWNtOTNjMlZ5TDJWNGRHVnVaQzloY0drdloyVnZiRzlqWVhScGIyNHVhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZZbkp2ZDNObGNpOWxlSFJsYm1RdllYQnBMM04wYjNKaFoyVXVhbk1pTENJdUxpOHVMaTh1TGk5dWIyUmxYMjF2WkhWc1pYTXZhSFIwY0hWeWJDOWlkV2xzWkM5b2RIUndkWEpzTG1OdmJXMXZiaTVxY3lJc0lpNHVMeTR1THk0dUwyNXZaR1ZmYlc5a2RXeGxjeTl6ZEhKcFkzUXRkWEpwTFdWdVkyOWtaUzlwYm1SbGVDNXFjeUlzSWk0dUx5NHVMeTR1TDI1dlpHVmZiVzlrZFd4bGN5OXZZbXBsWTNRdFlYTnphV2R1TDJsdVpHVjRMbXB6SWl3aUxpNHZMaTR2TGk0dmJtOWtaVjl0YjJSMWJHVnpMM0YxWlhKNUxYTjBjbWx1Wnk5cGJtUmxlQzVxY3lJc0lpNHVMeTR1THk0dUwyaDBiV3cxTDNKbGJtUmxjaTlpY205M2MyVnlMMlY0ZEdWdVpDOWhjR2t2YzNSeVpXRnRMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMMkp5YjNkelpYSXZaWGgwWlc1a0wyRndhUzlqYkdsd1ltOWhjbVF1YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5eVpXNWtaWEl2WW5KdmQzTmxjaTlsZUhSbGJtUXZZWEJwTDJWMlpXNTBMbXB6SWl3aUxpNHZMaTR2TGk0dmFIUnRiRFV2Y21WdVpHVnlMM1oxWlM5dGIyUjFiR1Z6TDJGdWFXMWhkR2x2Ymk1cWN5SXNJaTR1THk0dUx5NHVMMmgwYld3MUwzSmxibVJsY2k5MmRXVXZiVzlrZFd4bGN5OWtiMjB1YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5eVpXNWtaWEl2ZG5WbEwyMXZaSFZzWlhNdloyeHZZbUZzUlhabGJuUXVhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDIxdlpIVnNaWE12Ylc5a1lXd3ZkRzloYzNRdWFuTWlMQ0l1TGk4dUxpOHVMaTlvZEcxc05TOXlaVzVrWlhJdmRuVmxMMjF2WkhWc1pYTXZiVzlrWVd3dmJXOWtZV3d1YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5eVpXNWtaWEl2ZG5WbEwyMXZaSFZzWlhNdmJXOWtZV3d2WVd4bGNuUXVhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDIxdlpIVnNaWE12Ylc5a1lXd3ZZMjl1Wm1seWJTNXFjeUlzSWk0dUx5NHVMeTR1TDJoMGJXdzFMM0psYm1SbGNpOTJkV1V2Ylc5a2RXeGxjeTl0YjJSaGJDOXdjbTl0Y0hRdWFuTWlMQ0l1TGk4dUxpOHVMaTlvZEcxc05TOXlaVzVrWlhJdmRuVmxMMjF2WkhWc1pYTXZiVzlrWVd3dmMzUjViR1V1YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5eVpXNWtaWEl2ZG5WbEwyMXZaSFZzWlhNdmJXOWtZV3d2YVc1a1pYZ3Vhbk1pTENJdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDIxdlpIVnNaWE12Ym1GMmFXZGhkRzl5TG1weklpd2lMaTR2TGk0dkxpNHZhSFJ0YkRVdmNtVnVaR1Z5TDNaMVpTOXRiMlIxYkdWekwzZGxZblpwWlhjdWFuTWlMQ0l1TGk4dUxpOHVMaTlvZEcxc05TOXlaVzVrWlhJdmRuVmxMMjF2WkhWc1pYTXZkMlZpYzI5amEyVjBMM2RsWW5OdlkydGxkQzVxY3lJc0lpNHVMeTR1THk0dUwyaDBiV3cxTDNKbGJtUmxjaTkyZFdVdmJXOWtkV3hsY3k5M1pXSnpiMk5yWlhRdmFXNWtaWGd1YW5NaUxDSXVMaTh1TGk4dUxpOW9kRzFzTlM5eVpXNWtaWEl2ZG5WbEwyMXZaSFZzWlhNdmJXVjBZUzVxY3lJc0lpNHVMeTR1THk0dUwyaDBiV3cxTDNKbGJtUmxjaTkyZFdVdmJXOWtkV3hsY3k5cGJtUmxlQzVxY3lJc0lpNHVMM055WXk5cGJtUmxlQzVxY3lKZExDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNiaThxSUdWemJHbHVkQzFrYVhOaFlteGxJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKMXh1WEc1MllYSWdhWE5KYm1sMGFXRnNhWHBsWkNBOUlHWmhiSE5sWEc1Y2JpOHZJRzFoYW05eUlHVjJaVzUwY3lCemRYQndiM0owWldRNlhHNHZMeUFnSUhCaGJuTjBZWEowWEc0dkx5QWdJSEJoYm0xdmRtVmNiaTh2SUNBZ2NHRnVaVzVrWEc0dkx5QWdJSE4zYVhCbFhHNHZMeUFnSUd4dmJtZHdjbVZ6YzF4dUx5OGdaWGgwY21FZ1pYWmxiblJ6SUhOMWNIQnZjblJsWkRwY2JpOHZJQ0FnWkhWaGJIUnZkV05vYzNSaGNuUmNiaTh2SUNBZ1pIVmhiSFJ2ZFdOb1hHNHZMeUFnSUdSMVlXeDBiM1ZqYUdWdVpGeHVMeThnSUNCMFlYQmNiaTh2SUNBZ1pHOTFZbXhsZEdGd1hHNHZMeUFnSUhCeVpYTnpaVzVrWEc1Y2JuWmhjaUJrYjJNZ1BTQjNhVzVrYjNjdVpHOWpkVzFsYm5SY2JuWmhjaUJrYjJORmJDQTlJR1J2WXk1a2IyTjFiV1Z1ZEVWc1pXMWxiblJjYm5aaGNpQnpiR2xqWlNBOUlFRnljbUY1TG5CeWIzUnZkSGx3WlM1emJHbGpaVnh1ZG1GeUlHZGxjM1IxY21WeklEMGdlMzFjYm5aaGNpQnNZWE4wVkdGd0lEMGdiblZzYkZ4dVhHNHZLaXBjYmlBcUlHWnBibVFnZEdobElHTnNiM05sYzNRZ1kyOXRiVzl1SUdGdVkyVnpkRzl5WEc0Z0tpQnBaaUIwYUdWeVpTZHpJRzV2SUc5dVpTd2djbVYwZFhKdUlHNTFiR3hjYmlBcVhHNGdLaUJBY0dGeVlXMGdJSHRGYkdWdFpXNTBmU0JsYkRFZ1ptbHljM1FnWld4bGJXVnVkRnh1SUNvZ1FIQmhjbUZ0SUNCN1JXeGxiV1Z1ZEgwZ1pXd3lJSE5sWTI5dVpDQmxiR1Z0Wlc1MFhHNGdLaUJBY21WMGRYSnVJSHRGYkdWdFpXNTBmU0FnSUNBZ1kyOXRiVzl1SUdGdVkyVnpkRzl5WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2RsZEVOdmJXMXZia0Z1WTJWemRHOXlLR1ZzTVN3Z1pXd3lLU0I3WEc0Z0lIWmhjaUJsYkNBOUlHVnNNVnh1SUNCM2FHbHNaU0FvWld3cElIdGNiaUFnSUNCcFppQW9aV3d1WTI5dWRHRnBibk1vWld3eUtTQjhmQ0JsYkNBOVBTQmxiRElwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJsYkZ4dUlDQWdJSDFjYmlBZ0lDQmxiQ0E5SUdWc0xuQmhjbVZ1ZEU1dlpHVmNiaUFnZlZ4dUlDQnlaWFIxY200Z2JuVnNiRnh1ZlZ4dVhHNHZLaXBjYmlBcUlHWnBjbVVnWVNCSVZFMU1SWFpsYm5SY2JpQXFYRzRnS2lCQWNHRnlZVzBnSUh0RmJHVnRaVzUwZlNCbGJHVnRaVzUwSUhkb2FXTm9JR1ZzWlcxbGJuUWdkRzhnWm1seVpTQmhJR1YyWlc1MElHOXVYRzRnS2lCQWNHRnlZVzBnSUh0emRISnBibWQ5SUNCMGVYQmxJQ0FnSUhSNWNHVWdiMllnWlhabGJuUmNiaUFxSUVCd1lYSmhiU0FnZTI5aWFtVmpkSDBnSUdWNGRISmhJQ0FnWlhoMGNtRWdaR0YwWVNCbWIzSWdkR2hsSUdWMlpXNTBJRzlpYW1WamRGeHVJQ292WEc1bWRXNWpkR2x2YmlCbWFYSmxSWFpsYm5Rb1pXeGxiV1Z1ZEN3Z2RIbHdaU3dnWlhoMGNtRXBJSHRjYmlBZ2RtRnlJR1YyWlc1MElEMGdaRzlqTG1OeVpXRjBaVVYyWlc1MEtDZElWRTFNUlhabGJuUnpKeWxjYmlBZ1pYWmxiblF1YVc1cGRFVjJaVzUwS0hSNWNHVXNJSFJ5ZFdVc0lIUnlkV1VwWEc1Y2JpQWdhV1lnS0hSNWNHVnZaaUJsZUhSeVlTQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ3SUdsdUlHVjRkSEpoS1NCN1hHNGdJQ0FnSUNCbGRtVnVkRnR3WFNBOUlHVjRkSEpoVzNCZFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRWdabXhoWnlCMGJ5QmthWE4wYVc1bmRXbHphQ0IzYVhSb0lHOTBhR1Z5SUdWMlpXNTBjeUIzYVhSb0lIUm9aU0J6WVcxbElHNWhiV1VnWjJWdVpYSmhkR1ZrWEc0Z0lDQXFJR0o1SUdGdWIzUm9aWElnYkdsaWNtRnllU0JwYmlCMGFHVWdjMkZ0WlNCd1lXZGxMbHh1SUNBZ0tpOGdYRzRnSUdWMlpXNTBMbDltYjNJZ1BTQW5kMlZsZUNkY2JseHVJQ0JsYkdWdFpXNTBMbVJwYzNCaGRHTm9SWFpsYm5Rb1pYWmxiblFwWEc1OVhHNWNiaThxS2x4dUlDb2dZMkZzWXlCMGFHVWdkSEpoYm5ObWIzSnRYRzRnS2lCaGMzTjFiV1VnTkNCd2IybHVkSE1nUVVKRFJDQnZiaUIwYUdVZ1kyOXZjbVJwYm1GMFpTQnplWE4wWlcxY2JpQXFJRDRnY205MFlYUmw3N3lhWVc1bmJHVWdjbTkwWVhScGJtY2dabkp2YlNCQlFpQjBieUJEUkZ4dUlDb2dQaUJ6WTJGc1plKzhtbk5qWVd4bElISmhkR2x2SUdaeWIyMGdRVUlnZEc4Z1EwUmNiaUFxSUQ0Z2RISmhibk5zWVhSbDc3eWFkSEpoYm5Oc1lYUmxJSE5vYVdaMElHWnliMjBnUVNCMGJ5QkRYRzRnS2x4dUlDb2dRSEJoY21GdElDQjdiblZ0WW1WeWZTQjRNU0JoWW5OamFYTnpZU0J2WmlCQlhHNGdLaUJBY0dGeVlXMGdJSHR1ZFcxaVpYSjlJSGt4SUc5eVpHbHVZWFJsSUc5bUlFRmNiaUFxSUVCd1lYSmhiU0FnZTI1MWJXSmxjbjBnZURJZ1lXSnpZMmx6YzJFZ2IyWWdRbHh1SUNvZ1FIQmhjbUZ0SUNCN2JuVnRZbVZ5ZlNCNU1pQnZjbVJwYm1GMFpTQnZaaUJDWEc0Z0tpQkFjR0Z5WVcwZ0lIdHVkVzFpWlhKOUlIZ3pJR0ZpYzJOcGMzTmhJRzltSUVOY2JpQXFJRUJ3WVhKaGJTQWdlMjUxYldKbGNuMGdlVE1nYjNKa2FXNWhkR1VnYjJZZ1ExeHVJQ29nUUhCaGNtRnRJQ0I3Ym5WdFltVnlmU0I0TkNCaFluTmphWE56WVNCdlppQkVYRzRnS2lCQWNHRnlZVzBnSUh0dWRXMWlaWEo5SUhrMElHOXlaR2x1WVhSbElHOW1JRVJjYmlBcUlFQnlaWFIxY200Z2UyOWlhbVZqZEgwZ0lDQWdkSEpoYm5ObWIzSnRJRzlpYW1WamRDQnNhV3RsWEc0Z0tpQWdJSHR5YjNSaGRHVXNJSE5qWVd4bExDQjBjbUZ1YzJ4aGRHVmJNbDBzSUcxaGRISnBlRnN6WFZzelhYMWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1kyRnNZeWg0TVN3Z2VURXNJSGd5TENCNU1pd2dlRE1zSUhrekxDQjROQ3dnZVRRcElIdGNiaUFnZG1GeUlISnZkR0YwWlNBOUlFMWhkR2d1WVhSaGJqSW9lVFFnTFNCNU15d2dlRFFnTFNCNE15a2dMU0JOWVhSb0xtRjBZVzR5S0hreUlDMGdlVEVzSUhneUlDMGdlREVwWEc0Z0lIWmhjaUJ6WTJGc1pTQTlJRTFoZEdndWMzRnlkQ2dvVFdGMGFDNXdiM2NvZVRRZ0xTQjVNeXdnTWlsY2JpQWdJQ0FySUUxaGRHZ3VjRzkzS0hnMElDMGdlRE1zSURJcEtTQXZJQ2hOWVhSb0xuQnZkeWg1TWlBdElIa3hMQ0F5S1Z4dUlDQWdJQ3NnVFdGMGFDNXdiM2NvZURJZ0xTQjRNU3dnTWlrcEtWeHVJQ0IyWVhJZ2RISmhibk5zWVhSbElEMGdXMXh1SUNBZ0lIZ3pYRzRnSUNBZ0xTQnpZMkZzWlNBcUlIZ3hJQ29nVFdGMGFDNWpiM01vY205MFlYUmxLVnh1SUNBZ0lDc2djMk5oYkdVZ0tpQjVNU0FxSUUxaGRHZ3VjMmx1S0hKdmRHRjBaU2tzWEc0Z0lDQWdlVE5jYmlBZ0lDQXRJSE5qWVd4bElDb2dlVEVnS2lCTllYUm9MbU52Y3loeWIzUmhkR1VwWEc0Z0lDQWdMU0J6WTJGc1pTQXFJSGd4SUNvZ1RXRjBhQzV6YVc0b2NtOTBZWFJsS1YxY2JseHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lISnZkR0YwWlRvZ2NtOTBZWFJsTEZ4dUlDQWdJSE5qWVd4bE9pQnpZMkZzWlN4Y2JpQWdJQ0IwY21GdWMyeGhkR1U2SUhSeVlXNXpiR0YwWlN4Y2JpQWdJQ0J0WVhSeWFYZzZJRnRjYmlBZ0lDQWdJRnR6WTJGc1pTQXFJRTFoZEdndVkyOXpLSEp2ZEdGMFpTa3NJQzF6WTJGc1pTQXFJRTFoZEdndWMybHVLSEp2ZEdGMFpTa3NJSFJ5WVc1emJHRjBaVnN3WFYwc1hHNGdJQ0FnSUNCYmMyTmhiR1VnS2lCTllYUm9Mbk5wYmloeWIzUmhkR1VwTENCelkyRnNaU0FxSUUxaGRHZ3VZMjl6S0hKdmRHRjBaU2tzSUhSeVlXNXpiR0YwWlZzeFhWMHNYRzRnSUNBZ0lDQmJNQ3dnTUN3Z01WMWNiaUFnSUNCZFhHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQjBZV3RsSUc5MlpYSWdkR2hsSUhSdmRXTm9jM1JoY25RZ1pYWmxiblJ6TGlCQlpHUWdibVYzSUhSdmRXTm9aWE1nZEc4Z2RHaGxJR2RsYzNSMWNtVnpMbHh1SUNvZ1NXWWdkR2hsY21VZ2FYTWdibThnY0hKbGRtbHZkWE1nY21WamIzSmtjeXdnZEdobGJpQmlhVzVrSUhSdmRXTm9iVzkyWlN3Z2RHOWphR1Z1WkZ4dUlDb2dZVzVrSUhSdmRXTm9ZMkZ1WTJWc0lHVjJaVzUwY3k1Y2JpQXFJRzVsZHlCMGIzVmphR1Z6SUdsdWFYUnBZV3hwZW1Wa0lIZHBkR2dnYzNSaGRHVWdKM1JoY0hCcGJtY25MQ0JoYm1RZ2QybDBhR2x1SURVd01DQnRhV3hzYVhObFkyOXVaSE5jYmlBcUlHbG1JSFJvWlNCemRHRjBaU0JwY3lCemRHbHNiQ0IwWVhCd2FXNW5MQ0IwYUdWdUlIUnlhV2RuWlhJZ1oyVnpkSFZ5WlNBbmNISmxjM01uTGx4dUlDb2dTV1lnZEdobGNtVWdZWEpsSUhSM2J5QjBiM1ZqYUdVZ2NHOXBiblJ6TENCMGFHVnVJSFJvWlNBblpIVmhiSFJ2ZFdOb2MzUmhjblFuSUdseklIUnlhV2RuWlhKa0xpQlVhR1ZjYmlBcUlHNXZaR1VnYjJZZ2RHaGxJSFJ2ZFdOb0lHZGxjM1IxY21VZ2FYTWdkR2hsYVhJZ1kyeHZaWE4wSUdOdmJXMXZiaUJoYm1ObGMzUnZjaTVjYmlBcVhHNGdLaUJBWlhabGJuUmNiaUFxSUVCd1lYSmhiU0FnZTJWMlpXNTBmU0JsZG1WdWRGeHVJQ292WEc1bWRXNWpkR2x2YmlCMGIzVmphSE4wWVhKMFNHRnVaR3hsY2lobGRtVnVkQ2tnZTF4dVhHNGdJR2xtSUNoUFltcGxZM1F1YTJWNWN5aG5aWE4wZFhKbGN5a3ViR1Z1WjNSb0lEMDlQU0F3S1NCN1hHNGdJQ0FnWkc5alJXd3VZV1JrUlhabGJuUk1hWE4wWlc1bGNpZ25kRzkxWTJodGIzWmxKeXdnZEc5MVkyaHRiM1psU0dGdVpHeGxjaXdnWm1Gc2MyVXBYRzRnSUNBZ1pHOWpSV3d1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduZEc5MVkyaGxibVFuTENCMGIzVmphR1Z1WkVoaGJtUnNaWElzSUdaaGJITmxLVnh1SUNBZ0lHUnZZMFZzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9ZMkZ1WTJWc0p5d2dkRzkxWTJoallXNWpaV3hJWVc1a2JHVnlMQ0JtWVd4elpTbGNiaUFnZlZ4dVhHNGdJQzh2SUhKbFkyOXlaQ0JsZG1WeWVTQjBiM1ZqYUZ4dUlDQm1iM0lnS0haaGNpQnBJRDBnTURzZ2FTQThJR1YyWlc1MExtTm9ZVzVuWldSVWIzVmphR1Z6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ2RtRnlJSFJ2ZFdOb0lEMGdaWFpsYm5RdVkyaGhibWRsWkZSdmRXTm9aWE5iYVYxY2JpQWdJQ0IyWVhJZ2RHOTFZMmhTWldOdmNtUWdQU0I3ZlZ4dVhHNGdJQ0FnWm05eUlDaDJZWElnY0NCcGJpQjBiM1ZqYUNrZ2UxeHVJQ0FnSUNBZ2RHOTFZMmhTWldOdmNtUmJjRjBnUFNCMGIzVmphRnR3WFZ4dUlDQWdJSDFjYmx4dUlDQWdJSFpoY2lCblpYTjBkWEpsSUQwZ2UxeHVJQ0FnSUNBZ2MzUmhjblJVYjNWamFEb2dkRzkxWTJoU1pXTnZjbVFzWEc0Z0lDQWdJQ0J6ZEdGeWRGUnBiV1U2SUVSaGRHVXVibTkzS0Nrc1hHNGdJQ0FnSUNCemRHRjBkWE02SUNkMFlYQndhVzVuSnl4Y2JpQWdJQ0FnSUdWc1pXMWxiblE2SUdWMlpXNTBMbk55WTBWc1pXMWxiblFnZkh3Z1pYWmxiblF1ZEdGeVoyVjBMRnh1SUNBZ0lDQWdjSEpsYzNOcGJtZElZVzVrYkdWeU9pQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJQ2hsYkdWdFpXNTBMQ0IwYjNWamFDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2huWlhOMGRYSmxMbk4wWVhSMWN5QTlQVDBnSjNSaGNIQnBibWNuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JuWlhOMGRYSmxMbk4wWVhSMWN5QTlJQ2R3Y21WemMybHVaeWRjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdabWx5WlVWMlpXNTBLR1ZzWlcxbGJuUXNJQ2RzYjI1bmNISmxjM01uTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHRmtaQ0IwYjNWamFDQmtZWFJoSUdadmNpQjNaV1Y0WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJSFJ2ZFdOb09pQjBiM1ZqYUN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5MVkyaGxjem9nWlhabGJuUXVkRzkxWTJobGN5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyaGhibWRsWkZSdmRXTm9aWE02SUdWMlpXNTBMbU5vWVc1blpXUlViM1ZqYUdWekxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGIzVmphRVYyWlc1ME9pQmxkbVZ1ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdJQ0JqYkdWaGNsUnBiV1Z2ZFhRb1oyVnpkSFZ5WlM1d2NtVnpjMmx1WjBoaGJtUnNaWElwWEc0Z0lDQWdJQ0FnSUNBZ1oyVnpkSFZ5WlM1d2NtVnpjMmx1WjBoaGJtUnNaWElnUFNCdWRXeHNYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBvWlhabGJuUXVjM0pqUld4bGJXVnVkQ0I4ZkNCbGRtVnVkQzUwWVhKblpYUXNJR1YyWlc1MExtTm9ZVzVuWldSVWIzVmphR1Z6VzJsZEtTd2dOVEF3S1Z4dUlDQWdJSDFjYmlBZ0lDQm5aWE4wZFhKbGMxdDBiM1ZqYUM1cFpHVnVkR2xtYVdWeVhTQTlJR2RsYzNSMWNtVmNiaUFnZlZ4dVhHNGdJR2xtSUNoUFltcGxZM1F1YTJWNWN5aG5aWE4wZFhKbGN5a3ViR1Z1WjNSb0lEMDlJRElwSUh0Y2JpQWdJQ0IyWVhJZ1pXeGxiV1Z1ZEhNZ1BTQmJYVnh1WEc0Z0lDQWdabTl5SUNoMllYSWdjQ0JwYmlCblpYTjBkWEpsY3lrZ2UxeHVJQ0FnSUNBZ1pXeGxiV1Z1ZEhNdWNIVnphQ2huWlhOMGRYSmxjMXR3WFM1bGJHVnRaVzUwS1Z4dUlDQWdJSDFjYmx4dUlDQWdJR1pwY21WRmRtVnVkQ2huWlhSRGIyMXRiMjVCYm1ObGMzUnZjaWhsYkdWdFpXNTBjMXN3WFN3Z1pXeGxiV1Z1ZEhOYk1WMHBMQ0FuWkhWaGJIUnZkV05vYzNSaGNuUW5MQ0I3WEc0Z0lDQWdJQ0IwYjNWamFHVnpPaUJ6YkdsalpTNWpZV3hzS0dWMlpXNTBMblJ2ZFdOb1pYTXBMRnh1SUNBZ0lDQWdkRzkxWTJoRmRtVnVkRG9nWlhabGJuUmNiaUFnSUNCOUtWeHVJQ0I5WEc1OVhHNWNiaThxS2x4dUlDb2dkR0ZyWlNCdmRtVnlJSFJ2ZFdOb2JXOTJaU0JsZG1WdWRITXNJR0Z1WkNCb1lXNWtiR1VnY0dGdUlHRnVaQ0JrZFdGc0lISmxiR0YwWldRZ1oyVnpkSFZ5WlhNdVhHNGdLbHh1SUNvZ01TNGdkSEpoZG1WeWMyVWdaWFpsY25rZ2RHOTFZMmdnY0c5cGJuVHZ2SnBjYmlBcUlENGdhV1lnSjNSaGNIQnBibWNuSUdGdVpDQjBhR1VnYzJocFpuUWdhWE1nYjNabGNpQXhNQ0J3YVhoc1pYTXNJSFJvWlc0Z2FYUW5jeUJoSUNkd1lXNXVhVzVuSnk1Y2JpQXFJREl1SUdsbUlIUm9aWEpsSUdGeVpTQjBkMjhnZEc5MVkyZ2djRzlwYm5SekxDQjBhR1Z1SUdOaGJHTWdkR2hsSUhSeVlXNW1iM0p0SUdGdVpDQjBjbWxuWjJWeVhHNGdLaUFnSUNka2RXRnNkRzkxWTJnbkxseHVJQ3BjYmlBcUlFQmxkbVZ1ZEZ4dUlDb2dRSEJoY21GdElDQjdaWFpsYm5SOUlHVjJaVzUwWEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJ2ZFdOb2JXOTJaVWhoYm1Sc1pYSW9aWFpsYm5RcElIdGNiaUFnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCbGRtVnVkQzVqYUdGdVoyVmtWRzkxWTJobGN5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJSFpoY2lCMGIzVmphQ0E5SUdWMlpXNTBMbU5vWVc1blpXUlViM1ZqYUdWelcybGRYRzRnSUNBZ2RtRnlJR2RsYzNSMWNtVWdQU0JuWlhOMGRYSmxjMXQwYjNWamFDNXBaR1Z1ZEdsbWFXVnlYVnh1WEc0Z0lDQWdhV1lnS0NGblpYTjBkWEpsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvSVdkbGMzUjFjbVV1YkdGemRGUnZkV05vS1NCN1hHNGdJQ0FnSUNCblpYTjBkWEpsTG14aGMzUlViM1ZqYUNBOUlHZGxjM1IxY21VdWMzUmhjblJVYjNWamFGeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb0lXZGxjM1IxY21VdWJHRnpkRlJwYldVcElIdGNiaUFnSUNBZ0lHZGxjM1IxY21VdWJHRnpkRlJwYldVZ1BTQm5aWE4wZFhKbExuTjBZWEowVkdsdFpWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb0lXZGxjM1IxY21VdWRtVnNiMk5wZEhsWUtTQjdYRzRnSUNBZ0lDQm5aWE4wZFhKbExuWmxiRzlqYVhSNVdDQTlJREJjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQ0ZuWlhOMGRYSmxMblpsYkc5amFYUjVXU2tnZTF4dUlDQWdJQ0FnWjJWemRIVnlaUzUyWld4dlkybDBlVmtnUFNBd1hHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnaFoyVnpkSFZ5WlM1a2RYSmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ1oyVnpkSFZ5WlM1a2RYSmhkR2x2YmlBOUlEQmNiaUFnSUNCOVhHNWNiaUFnSUNCMllYSWdkR2x0WlNBOUlDQkVZWFJsTG01dmR5Z3BJQzBnWjJWemRIVnlaUzVzWVhOMFZHbHRaVnh1SUNBZ0lIWmhjaUIyZUNBOUlDaDBiM1ZqYUM1amJHbGxiblJZSUMwZ1oyVnpkSFZ5WlM1c1lYTjBWRzkxWTJndVkyeHBaVzUwV0NrZ0x5QjBhVzFsWEc0Z0lDQWdkbUZ5SUhaNUlEMGdLSFJ2ZFdOb0xtTnNhV1Z1ZEZrZ0xTQm5aWE4wZFhKbExteGhjM1JVYjNWamFDNWpiR2xsYm5SWktTQXZJSFJwYldWY2JseHVJQ0FnSUhaaGNpQlNSVU5QVWtSZlJGVlNRVlJKVDA0Z1BTQTNNRnh1SUNBZ0lHbG1JQ2gwYVcxbElENGdVa1ZEVDFKRVgwUlZVa0ZVU1U5T0tTQjdYRzRnSUNBZ0lDQjBhVzFsSUQwZ1VrVkRUMUpFWDBSVlVrRlVTVTlPWEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2huWlhOMGRYSmxMbVIxY21GMGFXOXVJQ3NnZEdsdFpTQStJRkpGUTA5U1JGOUVWVkpCVkVsUFRpa2dlMXh1SUNBZ0lDQWdaMlZ6ZEhWeVpTNWtkWEpoZEdsdmJpQTlJRkpGUTA5U1JGOUVWVkpCVkVsUFRpQXRJSFJwYldWY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JuWlhOMGRYSmxMblpsYkc5amFYUjVXQ0E5SUNoblpYTjBkWEpsTG5abGJHOWphWFI1V0NBcUlHZGxjM1IxY21VdVpIVnlZWFJwYjI0Z0t5QjJlQ0FxSUhScGJXVXBYRzRnSUNBZ0lDQXZJQ2huWlhOMGRYSmxMbVIxY21GMGFXOXVJQ3NnZEdsdFpTbGNiaUFnSUNCblpYTjBkWEpsTG5abGJHOWphWFI1V1NBOUlDaG5aWE4wZFhKbExuWmxiRzlqYVhSNVdTQXFJR2RsYzNSMWNtVXVaSFZ5WVhScGIyNGdLeUIyZVNBcUlIUnBiV1VwWEc0Z0lDQWdJQ0F2SUNoblpYTjBkWEpsTG1SMWNtRjBhVzl1SUNzZ2RHbHRaU2xjYmlBZ0lDQm5aWE4wZFhKbExtUjFjbUYwYVc5dUlDczlJSFJwYldWY2JseHVJQ0FnSUdkbGMzUjFjbVV1YkdGemRGUnZkV05vSUQwZ2UzMWNibHh1SUNBZ0lHWnZjaUFvZG1GeUlIQWdhVzRnZEc5MVkyZ3BJSHRjYmlBZ0lDQWdJR2RsYzNSMWNtVXViR0Z6ZEZSdmRXTm9XM0JkSUQwZ2RHOTFZMmhiY0YxY2JpQWdJQ0I5WEc0Z0lDQWdaMlZ6ZEhWeVpTNXNZWE4wVkdsdFpTQTlJRVJoZEdVdWJtOTNLQ2xjYmx4dUlDQWdJSFpoY2lCa2FYTndiR0ZqWlcxbGJuUllJRDBnZEc5MVkyZ3VZMnhwWlc1MFdDQXRJR2RsYzNSMWNtVXVjM1JoY25SVWIzVmphQzVqYkdsbGJuUllYRzRnSUNBZ2RtRnlJR1JwYzNCc1lXTmxiV1Z1ZEZrZ1BTQjBiM1ZqYUM1amJHbGxiblJaSUMwZ1oyVnpkSFZ5WlM1emRHRnlkRlJ2ZFdOb0xtTnNhV1Z1ZEZsY2JpQWdJQ0IyWVhJZ1pHbHpkR0Z1WTJVZ1BTQk5ZWFJvTG5OeGNuUW9UV0YwYUM1d2IzY29aR2x6Y0d4aFkyVnRaVzUwV0N3Z01pbGNiaUFnSUNBZ0lDc2dUV0YwYUM1d2IzY29aR2x6Y0d4aFkyVnRaVzUwV1N3Z01pa3BYRzRnSUNBZ2RtRnlJR2x6Vm1WeWRHbGpZV3dnUFNBaEtFMWhkR2d1WVdKektHUnBjM0JzWVdObGJXVnVkRmdwSUQ0Z1RXRjBhQzVoWW5Nb1pHbHpjR3hoWTJWdFpXNTBXU2twWEc0Z0lDQWdkbUZ5SUdScGNtVmpkR2x2YmlBOUlHbHpWbVZ5ZEdsallXeGNiaUFnSUNBZ0lEOGdaR2x6Y0d4aFkyVnRaVzUwV1NBK1BTQXdJRDhnSjJSdmQyNG5JRG9nSjNWd0oxeHVJQ0FnSUNBZ09pQmthWE53YkdGalpXMWxiblJZSUQ0OUlEQWdQeUFuY21sbmFIUW5JRG9nSjJ4bFpuUW5YRzVjYmlBZ0lDQXZMeUJ0WVdkcFl5QnVkVzFpWlhJZ01UQTZJRzF2ZG1sdVp5QXhNSEI0SUcxbFlXNXpJSEJoYml3Z2JtOTBJSFJoY0Z4dUlDQWdJR2xtSUNnb1oyVnpkSFZ5WlM1emRHRjBkWE1nUFQwOUlDZDBZWEJ3YVc1bkp5QjhmQ0JuWlhOMGRYSmxMbk4wWVhSMWN5QTlQVDBnSjNCeVpYTnphVzVuSnlsY2JpQWdJQ0FnSUNBZ0ppWWdaR2x6ZEdGdVkyVWdQaUF4TUNrZ2UxeHVJQ0FnSUNBZ1oyVnpkSFZ5WlM1emRHRjBkWE1nUFNBbmNHRnVibWx1WnlkY2JpQWdJQ0FnSUdkbGMzUjFjbVV1YVhOV1pYSjBhV05oYkNBOUlHbHpWbVZ5ZEdsallXeGNiaUFnSUNBZ0lHZGxjM1IxY21VdVpHbHlaV04wYVc5dUlEMGdaR2x5WldOMGFXOXVYRzVjYmlBZ0lDQWdJR1pwY21WRmRtVnVkQ2huWlhOMGRYSmxMbVZzWlcxbGJuUXNJQ2R3WVc1emRHRnlkQ2NzSUh0Y2JpQWdJQ0FnSUNBZ2RHOTFZMmc2SUhSdmRXTm9MRnh1SUNBZ0lDQWdJQ0IwYjNWamFHVnpPaUJsZG1WdWRDNTBiM1ZqYUdWekxGeHVJQ0FnSUNBZ0lDQmphR0Z1WjJWa1ZHOTFZMmhsY3pvZ1pYWmxiblF1WTJoaGJtZGxaRlJ2ZFdOb1pYTXNYRzRnSUNBZ0lDQWdJSFJ2ZFdOb1JYWmxiblE2SUdWMlpXNTBMRnh1SUNBZ0lDQWdJQ0JwYzFabGNuUnBZMkZzT2lCblpYTjBkWEpsTG1selZtVnlkR2xqWVd3c1hHNGdJQ0FnSUNBZ0lHUnBjbVZqZEdsdmJqb2daR2x5WldOMGFXOXVYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2huWlhOMGRYSmxMbk4wWVhSMWN5QTlQVDBnSjNCaGJtNXBibWNuS1NCN1hHNGdJQ0FnSUNCblpYTjBkWEpsTG5CaGJsUnBiV1VnUFNCRVlYUmxMbTV2ZHlncFhHNWNiaUFnSUNBZ0lHWnBjbVZGZG1WdWRDaG5aWE4wZFhKbExtVnNaVzFsYm5Rc0lDZHdZVzV0YjNabEp5d2dlMXh1SUNBZ0lDQWdJQ0JrYVhOd2JHRmpaVzFsYm5SWU9pQmthWE53YkdGalpXMWxiblJZTEZ4dUlDQWdJQ0FnSUNCa2FYTndiR0ZqWlcxbGJuUlpPaUJrYVhOd2JHRmpaVzFsYm5SWkxGeHVJQ0FnSUNBZ0lDQjBiM1ZqYURvZ2RHOTFZMmdzWEc0Z0lDQWdJQ0FnSUhSdmRXTm9aWE02SUdWMlpXNTBMblJ2ZFdOb1pYTXNYRzRnSUNBZ0lDQWdJR05vWVc1blpXUlViM1ZqYUdWek9pQmxkbVZ1ZEM1amFHRnVaMlZrVkc5MVkyaGxjeXhjYmlBZ0lDQWdJQ0FnZEc5MVkyaEZkbVZ1ZERvZ1pYWmxiblFzWEc0Z0lDQWdJQ0FnSUdselZtVnlkR2xqWVd3NklHZGxjM1IxY21VdWFYTldaWEowYVdOaGJDeGNiaUFnSUNBZ0lDQWdaR2x5WldOMGFXOXVPaUJrYVhKbFkzUnBiMjVjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnYVdZZ0tFOWlhbVZqZEM1clpYbHpLR2RsYzNSMWNtVnpLUzVzWlc1bmRHZ2dQVDBnTWlrZ2UxeHVJQ0FnSUhaaGNpQndiM05wZEdsdmJpQTlJRnRkWEc0Z0lDQWdkbUZ5SUdOMWNuSmxiblFnUFNCYlhWeHVJQ0FnSUhaaGNpQmxiR1Z0Wlc1MGN5QTlJRnRkWEc0Z0lDQWdkbUZ5SUhSeVlXNXpabTl5YlZ4dVhHNGdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCbGRtVnVkQzUwYjNWamFHVnpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCMllYSWdkRzkxWTJnZ1BTQmxkbVZ1ZEM1MGIzVmphR1Z6VzJsZFhHNGdJQ0FnSUNCMllYSWdaMlZ6ZEhWeVpTQTlJR2RsYzNSMWNtVnpXM1J2ZFdOb0xtbGtaVzUwYVdacFpYSmRYRzRnSUNBZ0lDQndiM05wZEdsdmJpNXdkWE5vS0Z0blpYTjBkWEpsTG5OMFlYSjBWRzkxWTJndVkyeHBaVzUwV0N3Z1oyVnpkSFZ5WlM1emRHRnlkRlJ2ZFdOb0xtTnNhV1Z1ZEZsZEtWeHVJQ0FnSUNBZ1kzVnljbVZ1ZEM1d2RYTm9LRnQwYjNWamFDNWpiR2xsYm5SWUxDQjBiM1ZqYUM1amJHbGxiblJaWFNsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJ3SUdsdUlHZGxjM1IxY21WektTQjdYRzRnSUNBZ0lDQmxiR1Z0Wlc1MGN5NXdkWE5vS0dkbGMzUjFjbVZ6VzNCZExtVnNaVzFsYm5RcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEhKaGJuTm1iM0p0SUQwZ1kyRnNZeWhjYmlBZ0lDQWdJSEJ2YzJsMGFXOXVXekJkV3pCZExGeHVJQ0FnSUNBZ2NHOXphWFJwYjI1Yk1GMWJNVjBzWEc0Z0lDQWdJQ0J3YjNOcGRHbHZibHN4WFZzd1hTeGNiaUFnSUNBZ0lIQnZjMmwwYVc5dVd6RmRXekZkTEZ4dUlDQWdJQ0FnWTNWeWNtVnVkRnN3WFZzd1hTeGNiaUFnSUNBZ0lHTjFjbkpsYm5SYk1GMWJNVjBzWEc0Z0lDQWdJQ0JqZFhKeVpXNTBXekZkV3pCZExGeHVJQ0FnSUNBZ1kzVnljbVZ1ZEZzeFhWc3hYVnh1SUNBZ0lDbGNiaUFnSUNCbWFYSmxSWFpsYm5Rb1oyVjBRMjl0Ylc5dVFXNWpaWE4wYjNJb1pXeGxiV1Z1ZEhOYk1GMHNJR1ZzWlcxbGJuUnpXekZkS1N3Z0oyUjFZV3gwYjNWamFDY3NJSHRjYmlBZ0lDQWdJSFJ5WVc1elptOXliVG9nZEhKaGJuTm1iM0p0TEZ4dUlDQWdJQ0FnZEc5MVkyaGxjem9nWlhabGJuUXVkRzkxWTJobGN5eGNiaUFnSUNBZ0lIUnZkV05vUlhabGJuUTZJR1YyWlc1MFhHNGdJQ0FnZlNsY2JpQWdmVnh1ZlZ4dVhHNHZLaXBjYmlBcUlHaGhibVJzWlNCMGIzVmphR1Z1WkNCbGRtVnVkRnh1SUNwY2JpQXFJREV1SUdsbUlIUm9aWEpsSUdGeVpTQjBiM2NnZEc5MVkyZ2djRzlwYm5SekxDQjBhR1Z1SUhSeWFXZG5aWElnSjJSMVlXeDBiM1ZqYUdWdVpDZmxwb0pjYmlBcVhHNGdLaUF5TGlCMGNtRjJaWEp6WlNCbGRtVnllU0IwYjNWamFDQndhVzl1ZE8rOG1seHVJQ29nUGlCcFppQjBZWEJ3YVc1bkxDQjBhR1Z1SUhSeWFXZG5aWElnSjNSaGNDY3VYRzRnS2lCSlppQjBhR1Z5WlNCcGN5QmhJSFJoY0NBek1EQWdiV2xzYkdselpXTnZibVJ6SUdKbFptOXlaU3dnZEdobGJpQnBkQ2R6SUdFZ0oyUnZkV0pzWlhSaGNDY3VYRzRnS2lBK0lHbG1JSEJoWkdScGJtY3NJSFJvWlc0Z1pHVmphV1JsSUhSdklIUnlhV2RuWlhJZ0ozQmhibVZ1WkNjZ2IzSWdKM04zYVhCbEoxeHVJQ29nUGlCcFppQndjbVZ6YzJsdVp5d2dkR2hsYmlCMGNtbG5aMlZ5SUNkd2NtVnpjMlZ1WkNjdVhHNGdLbHh1SUNvZ015NGdjbVZ0YjNabElHeHBjM1JsYm1WeWN5NWNiaUFxWEc0Z0tpQkFaWFpsYm5SY2JpQXFJRUJ3WVhKaGJTQWdlMlYyWlc1MGZTQmxkbVZ1ZEZ4dUlDb3ZYRzVtZFc1amRHbHZiaUIwYjNWamFHVnVaRWhoYm1Sc1pYSW9aWFpsYm5RcElIdGNibHh1SUNCcFppQW9UMkpxWldOMExtdGxlWE1vWjJWemRIVnlaWE1wTG14bGJtZDBhQ0E5UFNBeUtTQjdYRzRnSUNBZ2RtRnlJR1ZzWlcxbGJuUnpJRDBnVzExY2JpQWdJQ0JtYjNJZ0tIWmhjaUJ3SUdsdUlHZGxjM1IxY21WektTQjdYRzRnSUNBZ0lDQmxiR1Z0Wlc1MGN5NXdkWE5vS0dkbGMzUjFjbVZ6VzNCZExtVnNaVzFsYm5RcFhHNGdJQ0FnZlZ4dUlDQWdJR1pwY21WRmRtVnVkQ2huWlhSRGIyMXRiMjVCYm1ObGMzUnZjaWhsYkdWdFpXNTBjMXN3WFN3Z1pXeGxiV1Z1ZEhOYk1WMHBMQ0FuWkhWaGJIUnZkV05vWlc1a0p5d2dlMXh1SUNBZ0lDQWdkRzkxWTJobGN6b2djMnhwWTJVdVkyRnNiQ2hsZG1WdWRDNTBiM1ZqYUdWektTeGNiaUFnSUNBZ0lIUnZkV05vUlhabGJuUTZJR1YyWlc1MFhHNGdJQ0FnZlNsY2JpQWdmVnh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3T3lCcElEd2daWFpsYm5RdVkyaGhibWRsWkZSdmRXTm9aWE11YkdWdVozUm9PeUJwS3lzcElIdGNiaUFnSUNCMllYSWdkRzkxWTJnZ1BTQmxkbVZ1ZEM1amFHRnVaMlZrVkc5MVkyaGxjMXRwWFZ4dUlDQWdJSFpoY2lCcFpDQTlJSFJ2ZFdOb0xtbGtaVzUwYVdacFpYSmNiaUFnSUNCMllYSWdaMlZ6ZEhWeVpTQTlJR2RsYzNSMWNtVnpXMmxrWFZ4dVhHNGdJQ0FnYVdZZ0tDRm5aWE4wZFhKbEtTQjdYRzRnSUNBZ0lDQmpiMjUwYVc1MVpWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaG5aWE4wZFhKbExuQnlaWE56YVc1blNHRnVaR3hsY2lrZ2UxeHVJQ0FnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLR2RsYzNSMWNtVXVjSEpsYzNOcGJtZElZVzVrYkdWeUtWeHVJQ0FnSUNBZ1oyVnpkSFZ5WlM1d2NtVnpjMmx1WjBoaGJtUnNaWElnUFNCdWRXeHNYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR2RsYzNSMWNtVXVjM1JoZEhWeklEMDlQU0FuZEdGd2NHbHVaeWNwSUh0Y2JpQWdJQ0FnSUdkbGMzUjFjbVV1ZEdsdFpYTjBZVzF3SUQwZ1JHRjBaUzV1YjNjb0tWeHVJQ0FnSUNBZ0x5OGdabWx5WlNCamJHbGpheXdnYm05MElIUmhjQzVjYmlBZ0lDQWdJR1pwY21WRmRtVnVkQ2huWlhOMGRYSmxMbVZzWlcxbGJuUXNJQ2QwWVhBbkxDQjdYRzRnSUNBZ0lDQWdJSFJ2ZFdOb09pQjBiM1ZqYUN4Y2JpQWdJQ0FnSUNBZ2RHOTFZMmhGZG1WdWREb2daWFpsYm5SY2JpQWdJQ0FnSUgwcFhHNWNiaUFnSUNBZ0lHbG1JQ2hzWVhOMFZHRndJQ1ltSUdkbGMzUjFjbVV1ZEdsdFpYTjBZVzF3SUMwZ2JHRnpkRlJoY0M1MGFXMWxjM1JoYlhBZ1BDQXpNREFwSUh0Y2JpQWdJQ0FnSUNBZ1ptbHlaVVYyWlc1MEtHZGxjM1IxY21VdVpXeGxiV1Z1ZEN3Z0oyUnZkV0pzWlhSaGNDY3NJSHRjYmlBZ0lDQWdJQ0FnSUNCMGIzVmphRG9nZEc5MVkyZ3NYRzRnSUNBZ0lDQWdJQ0FnZEc5MVkyaEZkbVZ1ZERvZ1pYWmxiblJjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2JHRnpkRlJoY0NBOUlHZGxjM1IxY21WY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1oyVnpkSFZ5WlM1emRHRjBkWE1nUFQwOUlDZHdZVzV1YVc1bkp5a2dlMXh1SUNBZ0lDQWdkbUZ5SUc1dmR5QTlJRVJoZEdVdWJtOTNLQ2xjYmlBZ0lDQWdJSFpoY2lCa2RYSmhkR2x2YmlBOUlHNXZkeUF0SUdkbGMzUjFjbVV1YzNSaGNuUlVhVzFsWEc0Z0lDQWdJQ0IyWVhJZ1pHbHpjR3hoWTJWdFpXNTBXQ0E5SUhSdmRXTm9MbU5zYVdWdWRGZ2dMU0JuWlhOMGRYSmxMbk4wWVhKMFZHOTFZMmd1WTJ4cFpXNTBXRnh1SUNBZ0lDQWdkbUZ5SUdScGMzQnNZV05sYldWdWRGa2dQU0IwYjNWamFDNWpiR2xsYm5SWklDMGdaMlZ6ZEhWeVpTNXpkR0Z5ZEZSdmRXTm9MbU5zYVdWdWRGbGNibHh1SUNBZ0lDQWdkbUZ5SUhabGJHOWphWFI1SUQwZ1RXRjBhQzV6Y1hKMEtHZGxjM1IxY21VdWRtVnNiMk5wZEhsWklDb2daMlZ6ZEhWeVpTNTJaV3h2WTJsMGVWbGNiaUFnSUNBZ0lDQWdLeUJuWlhOMGRYSmxMblpsYkc5amFYUjVXQ0FxSUdkbGMzUjFjbVV1ZG1Wc2IyTnBkSGxZS1Z4dUlDQWdJQ0FnZG1GeUlHbHpVM2RwY0dVZ1BTQjJaV3h2WTJsMGVTQStJREF1TlNBbUppQW9ibTkzSUMwZ1oyVnpkSFZ5WlM1c1lYTjBWR2x0WlNrZ1BDQXhNREJjYmlBZ0lDQWdJSFpoY2lCbGVIUnlZU0E5SUh0Y2JpQWdJQ0FnSUNBZ1pIVnlZWFJwYjI0NklHUjFjbUYwYVc5dUxGeHVJQ0FnSUNBZ0lDQnBjMU4zYVhCbE9pQnBjMU4zYVhCbExGeHVJQ0FnSUNBZ0lDQjJaV3h2WTJsMGVWZzZJR2RsYzNSMWNtVXVkbVZzYjJOcGRIbFlMRnh1SUNBZ0lDQWdJQ0IyWld4dlkybDBlVms2SUdkbGMzUjFjbVV1ZG1Wc2IyTnBkSGxaTEZ4dUlDQWdJQ0FnSUNCa2FYTndiR0ZqWlcxbGJuUllPaUJrYVhOd2JHRmpaVzFsYm5SWUxGeHVJQ0FnSUNBZ0lDQmthWE53YkdGalpXMWxiblJaT2lCa2FYTndiR0ZqWlcxbGJuUlpMRnh1SUNBZ0lDQWdJQ0IwYjNWamFEb2dkRzkxWTJnc1hHNGdJQ0FnSUNBZ0lIUnZkV05vWlhNNklHVjJaVzUwTG5SdmRXTm9aWE1zWEc0Z0lDQWdJQ0FnSUdOb1lXNW5aV1JVYjNWamFHVnpPaUJsZG1WdWRDNWphR0Z1WjJWa1ZHOTFZMmhsY3l4Y2JpQWdJQ0FnSUNBZ2RHOTFZMmhGZG1WdWREb2daWFpsYm5Rc1hHNGdJQ0FnSUNBZ0lHbHpWbVZ5ZEdsallXdzZJR2RsYzNSMWNtVXVhWE5XWlhKMGFXTmhiQ3hjYmlBZ0lDQWdJQ0FnWkdseVpXTjBhVzl1T2lCblpYTjBkWEpsTG1ScGNtVmpkR2x2Ymx4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCbWFYSmxSWFpsYm5Rb1oyVnpkSFZ5WlM1bGJHVnRaVzUwTENBbmNHRnVaVzVrSnl3Z1pYaDBjbUVwWEc0Z0lDQWdJQ0JwWmlBb2FYTlRkMmx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQm1hWEpsUlhabGJuUW9aMlZ6ZEhWeVpTNWxiR1Z0Wlc1MExDQW5jM2RwY0dVbkxDQmxlSFJ5WVNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb1oyVnpkSFZ5WlM1emRHRjBkWE1nUFQwOUlDZHdjbVZ6YzJsdVp5Y3BJSHRjYmlBZ0lDQWdJR1pwY21WRmRtVnVkQ2huWlhOMGRYSmxMbVZzWlcxbGJuUXNJQ2R3Y21WemMyVnVaQ2NzSUh0Y2JpQWdJQ0FnSUNBZ2RHOTFZMmc2SUhSdmRXTm9MRnh1SUNBZ0lDQWdJQ0IwYjNWamFFVjJaVzUwT2lCbGRtVnVkRnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQjlYRzVjYmlBZ0lDQmtaV3hsZEdVZ1oyVnpkSFZ5WlhOYmFXUmRYRzRnSUgxY2JseHVJQ0JwWmlBb1QySnFaV04wTG10bGVYTW9aMlZ6ZEhWeVpYTXBMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUdSdlkwVnNMbkpsYlc5MlpVVjJaVzUwVEdsemRHVnVaWElvSjNSdmRXTm9iVzkyWlNjc0lIUnZkV05vYlc5MlpVaGhibVJzWlhJc0lHWmhiSE5sS1Z4dUlDQWdJR1J2WTBWc0xuSmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSW9KM1J2ZFdOb1pXNWtKeXdnZEc5MVkyaGxibVJJWVc1a2JHVnlMQ0JtWVd4elpTbGNiaUFnSUNCa2IyTkZiQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMGIzVmphR05oYm1ObGJDY3NJSFJ2ZFdOb1kyRnVZMlZzU0dGdVpHeGxjaXdnWm1Gc2MyVXBYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJvWVc1a2JHVWdkRzkxWTJoallXNWpaV3hjYmlBcVhHNGdLaUF4TGlCcFppQjBhR1Z5WlNCaGNtVWdkSGR2SUhSdmRXTm9JSEJ2YVc1MGN5d2dkR2hsYmlCMGNtbG5aMlZ5SUNka2RXRnNkRzkxWTJobGJtUW5YRzRnS2x4dUlDb2dNaTRnZEhKaGRtVnljMlVnWlhabGNuUjVJSFJ2ZFdOb0lIQnZhVzUwT2x4dUlDb2dQaUJwWmlCd1lXNXVibWxuTENCMGFHVnVJSFJ5YVdkblpYSWdKM0JoYm1WdVpDZGNiaUFxSUQ0Z2FXWWdjSEpsYzNOcGJtY3NJSFJvWlc0Z2RISnBaMmRsY2lBbmNISmxjM05sYm1RblhHNGdLbHh1SUNvZ015NGdjbVZ0YjNabElHeHBjM1JsYm1WeWMxeHVJQ3BjYmlBcUlFQmxkbVZ1ZEZ4dUlDb2dRSEJoY21GdElDQjdaWFpsYm5SOUlHVjJaVzUwWEc0Z0tpOWNibVoxYm1OMGFXOXVJSFJ2ZFdOb1kyRnVZMlZzU0dGdVpHeGxjaWhsZG1WdWRDa2dlMXh1WEc0Z0lHbG1JQ2hQWW1wbFkzUXVhMlY1Y3loblpYTjBkWEpsY3lrdWJHVnVaM1JvSUQwOUlESXBJSHRjYmlBZ0lDQjJZWElnWld4bGJXVnVkSE1nUFNCYlhWeHVJQ0FnSUdadmNpQW9kbUZ5SUhBZ2FXNGdaMlZ6ZEhWeVpYTXBJSHRjYmlBZ0lDQWdJR1ZzWlcxbGJuUnpMbkIxYzJnb1oyVnpkSFZ5WlhOYmNGMHVaV3hsYldWdWRDbGNiaUFnSUNCOVhHNGdJQ0FnWm1seVpVVjJaVzUwS0dkbGRFTnZiVzF2YmtGdVkyVnpkRzl5S0dWc1pXMWxiblJ6V3pCZExDQmxiR1Z0Wlc1MGMxc3hYU2tzSUNka2RXRnNkRzkxWTJobGJtUW5MQ0I3WEc0Z0lDQWdJQ0IwYjNWamFHVnpPaUJ6YkdsalpTNWpZV3hzS0dWMlpXNTBMblJ2ZFdOb1pYTXBMRnh1SUNBZ0lDQWdkRzkxWTJoRmRtVnVkRG9nWlhabGJuUmNiaUFnSUNCOUtWeHVJQ0I5WEc1Y2JpQWdabTl5SUNoMllYSWdhU0E5SURBN0lHa2dQQ0JsZG1WdWRDNWphR0Z1WjJWa1ZHOTFZMmhsY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lIWmhjaUIwYjNWamFDQTlJR1YyWlc1MExtTm9ZVzVuWldSVWIzVmphR1Z6VzJsZFhHNGdJQ0FnZG1GeUlHbGtJRDBnZEc5MVkyZ3VhV1JsYm5ScFptbGxjbHh1SUNBZ0lIWmhjaUJuWlhOMGRYSmxJRDBnWjJWemRIVnlaWE5iYVdSZFhHNWNiaUFnSUNCcFppQW9JV2RsYzNSMWNtVXBJSHRjYmlBZ0lDQWdJR052Ym5ScGJuVmxYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR2RsYzNSMWNtVXVjSEpsYzNOcGJtZElZVzVrYkdWeUtTQjdYRzRnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvWjJWemRIVnlaUzV3Y21WemMybHVaMGhoYm1Sc1pYSXBYRzRnSUNBZ0lDQm5aWE4wZFhKbExuQnlaWE56YVc1blNHRnVaR3hsY2lBOUlHNTFiR3hjYmlBZ0lDQjlYRzVjYmlBZ0lDQnBaaUFvWjJWemRIVnlaUzV6ZEdGMGRYTWdQVDA5SUNkd1lXNXVhVzVuSnlrZ2UxeHVJQ0FnSUNBZ1ptbHlaVVYyWlc1MEtHZGxjM1IxY21VdVpXeGxiV1Z1ZEN3Z0ozQmhibVZ1WkNjc0lIdGNiaUFnSUNBZ0lDQWdkRzkxWTJnNklIUnZkV05vTEZ4dUlDQWdJQ0FnSUNCMGIzVmphR1Z6T2lCbGRtVnVkQzUwYjNWamFHVnpMRnh1SUNBZ0lDQWdJQ0JqYUdGdVoyVmtWRzkxWTJobGN6b2daWFpsYm5RdVkyaGhibWRsWkZSdmRXTm9aWE1zWEc0Z0lDQWdJQ0FnSUhSdmRXTm9SWFpsYm5RNklHVjJaVzUwWEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvWjJWemRIVnlaUzV6ZEdGMGRYTWdQVDA5SUNkd2NtVnpjMmx1WnljcElIdGNiaUFnSUNBZ0lHWnBjbVZGZG1WdWRDaG5aWE4wZFhKbExtVnNaVzFsYm5Rc0lDZHdjbVZ6YzJWdVpDY3NJSHRjYmlBZ0lDQWdJQ0FnZEc5MVkyZzZJSFJ2ZFdOb0xGeHVJQ0FnSUNBZ0lDQjBiM1ZqYUVWMlpXNTBPaUJsZG1WdWRGeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNCOVhHNGdJQ0FnWkdWc1pYUmxJR2RsYzNSMWNtVnpXMmxrWFZ4dUlDQjlYRzVjYmlBZ2FXWWdLRTlpYW1WamRDNXJaWGx6S0dkbGMzUjFjbVZ6S1M1c1pXNW5kR2dnUFQwOUlEQXBJSHRjYmlBZ0lDQmtiMk5GYkM1eVpXMXZkbVZGZG1WdWRFeHBjM1JsYm1WeUtDZDBiM1ZqYUcxdmRtVW5MQ0IwYjNWamFHMXZkbVZJWVc1a2JHVnlMQ0JtWVd4elpTbGNiaUFnSUNCa2IyTkZiQzV5WlcxdmRtVkZkbVZ1ZEV4cGMzUmxibVZ5S0NkMGIzVmphR1Z1WkNjc0lIUnZkV05vWlc1a1NHRnVaR3hsY2l3Z1ptRnNjMlVwWEc0Z0lDQWdaRzlqUld3dWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpZ25kRzkxWTJoallXNWpaV3duTENCMGIzVmphR05oYm1ObGJFaGhibVJzWlhJc0lHWmhiSE5sS1Z4dUlDQjlYRzU5WEc1Y2JtbG1JQ2doYVhOSmJtbDBhV0ZzYVhwbFpDa2dlMXh1SUNCa2IyTkZiQzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2QwYjNWamFITjBZWEowSnl3Z2RHOTFZMmh6ZEdGeWRFaGhibVJzWlhJc0lHWmhiSE5sS1Z4dUlDQnBjMGx1YVhScFlXeHBlbVZrSUQwZ2RISjFaVnh1ZlZ4dVhHNGlMQ0l2S2x4dUlDb2dUR2xqWlc1elpXUWdkRzhnZEdobElFRndZV05vWlNCVGIyWjBkMkZ5WlNCR2IzVnVaR0YwYVc5dUlDaEJVMFlwSUhWdVpHVnlJRzl1WlZ4dUlDb2diM0lnYlc5eVpTQmpiMjUwY21saWRYUnZjaUJzYVdObGJuTmxJR0ZuY21WbGJXVnVkSE11SUNCVFpXVWdkR2hsSUU1UFZFbERSU0JtYVd4bFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCM2FYUm9JSFJvYVhNZ2QyOXlheUJtYjNJZ1lXUmthWFJwYjI1aGJDQnBibVp2Y20xaGRHbHZibHh1SUNvZ2NtVm5ZWEprYVc1bklHTnZjSGx5YVdkb2RDQnZkMjVsY25Ob2FYQXVJQ0JVYUdVZ1FWTkdJR3hwWTJWdWMyVnpJSFJvYVhNZ1ptbHNaVnh1SUNvZ2RHOGdlVzkxSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aVnh1SUNvZ1hDSk1hV05sYm5ObFhDSXBPeUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sWEc0Z0tpQjNhWFJvSUhSb1pTQk1hV05sYm5ObExpQWdXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc1hHNGdLaUJ6YjJaMGQyRnlaU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJseHVJQ29nWENKQlV5QkpVMXdpSUVKQlUwbFRMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxsY2JpQXFJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdUlDQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlZ4dUlDb2djM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpDQnNhVzFwZEdGMGFXOXVjMXh1SUNvZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYmx4dUx5b2daWE5zYVc1MExXUnBjMkZpYkdVZ0tpOWNibHh1THk4Z1VISnZaSFZqZEdsdmJpQnpkR1Z3Y3lCdlppQkZRMDFCTFRJMk1pd2dSV1JwZEdsdmJpQTJMQ0F5TWk0eExqSXVNVnh1THk4Z1VtVm1aWEpsYm1ObE9pQm9kSFJ3Y3pvdkwzQmxiM0JzWlM1dGIzcHBiR3hoTG05eVp5OSthbTl5Wlc1a2IzSm1aaTlsY3pZdFpISmhablF1YUhSdGJDTnpaV010WVhKeVlYa3Vabkp2YlZ4dVhHNHZLaUJwYzNSaGJtSjFiQ0JwWjI1dmNtVWdhV1lnS2k5Y2JtbG1JQ2doUVhKeVlYa3Vabkp2YlNrZ2UxeHVJQ0JCY25KaGVTNW1jbTl0SUQwZ0tHWjFibU4wYVc5dUtDa2dlMXh1SUNBZ0lIWmhjaUIwYjFOMGNpQTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVkRzlUZEhKcGJtYzdYRzRnSUNBZ2RtRnlJR2x6UTJGc2JHRmliR1VnUFNCbWRXNWpkR2x2YmlobWJpa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUjVjR1Z2WmlCbWJpQTlQVDBnSjJaMWJtTjBhVzl1SnlCOGZDQjBiMU4wY2k1allXeHNLR1p1S1NBOVBUMGdKMXR2WW1wbFkzUWdSblZ1WTNScGIyNWRKenRjYmlBZ0lDQjlPMXh1SUNBZ0lIWmhjaUIwYjBsdWRHVm5aWElnUFNCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dUlDQWdJQ0FnZG1GeUlHNTFiV0psY2lBOUlFNTFiV0psY2loMllXeDFaU2s3WEc0Z0lDQWdJQ0JwWmlBb2FYTk9ZVTRvYm5WdFltVnlLU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnTUR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdsbUlDaHVkVzFpWlhJZ1BUMDlJREFnZkh3Z0lXbHpSbWx1YVhSbEtHNTFiV0psY2lrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiV0psY2p0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUFvYm5WdFltVnlJRDRnTUNBL0lERWdPaUF0TVNrZ0tpQk5ZWFJvTG1ac2IyOXlLRTFoZEdndVlXSnpLRzUxYldKbGNpa3BPMXh1SUNBZ0lIMDdYRzRnSUNBZ2RtRnlJRzFoZUZOaFptVkpiblJsWjJWeUlEMGdUV0YwYUM1d2IzY29NaXdnTlRNcElDMGdNVHRjYmlBZ0lDQjJZWElnZEc5TVpXNW5kR2dnUFNCbWRXNWpkR2x2YmloMllXeDFaU2tnZTF4dUlDQWdJQ0FnZG1GeUlHeGxiaUE5SUhSdlNXNTBaV2RsY2loMllXeDFaU2s3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1dGFXNG9UV0YwYUM1dFlYZ29iR1Z1TENBd0tTd2diV0Y0VTJGbVpVbHVkR1ZuWlhJcE8xeHVJQ0FnSUgwN1hHNWNiaUFnSUNBdkx5QlVhR1VnYkdWdVozUm9JSEJ5YjNCbGNuUjVJRzltSUhSb1pTQm1jbTl0SUcxbGRHaHZaQ0JwY3lBeExseHVJQ0FnSUhKbGRIVnliaUJtZFc1amRHbHZiaUJtY205dEtHRnljbUY1VEdsclpTOHFMQ0J0WVhCR2Jpd2dkR2hwYzBGeVp5QXFMeWtnZTF4dUlDQWdJQ0FnTHk4Z01TNGdUR1YwSUVNZ1ltVWdkR2hsSUhSb2FYTWdkbUZzZFdVdVhHNGdJQ0FnSUNCMllYSWdReUE5SUhSb2FYTTdYRzVjYmlBZ0lDQWdJQzh2SURJdUlFeGxkQ0JwZEdWdGN5QmlaU0JVYjA5aWFtVmpkQ2hoY25KaGVVeHBhMlVwTGx4dUlDQWdJQ0FnZG1GeUlHbDBaVzF6SUQwZ1QySnFaV04wS0dGeWNtRjVUR2xyWlNrN1hHNWNiaUFnSUNBZ0lDOHZJRE11SUZKbGRIVnlia2xtUVdKeWRYQjBLR2wwWlcxektTNWNiaUFnSUNBZ0lHbG1JQ2hoY25KaGVVeHBhMlVnUFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1ZIbHdaVVZ5Y205eUtDZEJjbkpoZVM1bWNtOXRJSEpsY1hWcGNtVnpJR0Z1SUdGeWNtRjVMV3hwYTJVZ2IySnFaV04wSUMwZ2JtOTBJRzUxYkd3Z2IzSWdkVzVrWldacGJtVmtKeWs3WEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUM4dklEUXVJRWxtSUcxaGNHWnVJR2x6SUhWdVpHVm1hVzVsWkN3Z2RHaGxiaUJzWlhRZ2JXRndjR2x1WnlCaVpTQm1ZV3h6WlM1Y2JpQWdJQ0FnSUhaaGNpQnRZWEJHYmlBOUlHRnlaM1Z0Wlc1MGN5NXNaVzVuZEdnZ1BpQXhJRDhnWVhKbmRXMWxiblJ6V3pGZElEb2dkbTlwWkNCMWJtUmxabWx1WldRN1hHNGdJQ0FnSUNCMllYSWdWRHRjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYldGd1JtNGdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQzh2SURVdUlHVnNjMlZjYmlBZ0lDQWdJQ0FnTHk4Z05TNGdZU0JKWmlCSmMwTmhiR3hoWW14bEtHMWhjR1p1S1NCcGN5Qm1ZV3h6WlN3Z2RHaHliM2NnWVNCVWVYQmxSWEp5YjNJZ1pYaGpaWEIwYVc5dUxseHVJQ0FnSUNBZ0lDQnBaaUFvSVdselEyRnNiR0ZpYkdVb2JXRndSbTRwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduUVhKeVlYa3Vabkp2YlRvZ2QyaGxiaUJ3Y205MmFXUmxaQ3dnZEdobElITmxZMjl1WkNCaGNtZDFiV1Z1ZENCdGRYTjBJR0psSUdFZ1puVnVZM1JwYjI0bktUdGNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4dklEVXVJR0l1SUVsbUlIUm9hWE5CY21jZ2QyRnpJSE4xY0hCc2FXVmtMQ0JzWlhRZ1ZDQmlaU0IwYUdselFYSm5PeUJsYkhObElHeGxkQ0JVSUdKbElIVnVaR1ZtYVc1bFpDNWNiaUFnSUNBZ0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUGlBeUtTQjdYRzRnSUNBZ0lDQWdJQ0FnVkNBOUlHRnlaM1Z0Wlc1MGMxc3lYVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBdkx5QXhNQzRnVEdWMElHeGxibFpoYkhWbElHSmxJRWRsZENocGRHVnRjeXdnWENKc1pXNW5kR2hjSWlrdVhHNGdJQ0FnSUNBdkx5QXhNUzRnVEdWMElHeGxiaUJpWlNCVWIweGxibWQwYUNoc1pXNVdZV3gxWlNrdVhHNGdJQ0FnSUNCMllYSWdiR1Z1SUQwZ2RHOU1aVzVuZEdnb2FYUmxiWE11YkdWdVozUm9LVHRjYmx4dUlDQWdJQ0FnTHk4Z01UTXVJRWxtSUVselEyOXVjM1J5ZFdOMGIzSW9ReWtnYVhNZ2RISjFaU3dnZEdobGJseHVJQ0FnSUNBZ0x5OGdNVE11SUdFdUlFeGxkQ0JCSUdKbElIUm9aU0J5WlhOMWJIUWdiMllnWTJGc2JHbHVaeUIwYUdVZ1cxdERiMjV6ZEhKMVkzUmRYU0JwYm5SbGNtNWhiQ0J0WlhSb2IyUWdiMllnUXlCM2FYUm9JR0Z1SUdGeVozVnRaVzUwSUd4cGMzUWdZMjl1ZEdGcGJtbHVaeUIwYUdVZ2MybHVaMnhsSUdsMFpXMGdiR1Z1TGx4dUlDQWdJQ0FnTHk4Z01UUXVJR0V1SUVWc2MyVXNJRXhsZENCQklHSmxJRUZ5Y21GNVEzSmxZWFJsS0d4bGJpa3VYRzRnSUNBZ0lDQjJZWElnUVNBOUlHbHpRMkZzYkdGaWJHVW9ReWtnUHlCUFltcGxZM1FvYm1WM0lFTW9iR1Z1S1NrZ09pQnVaWGNnUVhKeVlYa29iR1Z1S1R0Y2JseHVJQ0FnSUNBZ0x5OGdNVFl1SUV4bGRDQnJJR0psSURBdVhHNGdJQ0FnSUNCMllYSWdheUE5SURBN1hHNGdJQ0FnSUNBdkx5QXhOeTRnVW1Wd1pXRjBMQ0IzYUdsc1pTQnJJRHdnYkdWdTRvQ21JQ2hoYkhOdklITjBaWEJ6SUdFZ0xTQm9LVnh1SUNBZ0lDQWdkbUZ5SUd0V1lXeDFaVHRjYmlBZ0lDQWdJSGRvYVd4bElDaHJJRHdnYkdWdUtTQjdYRzRnSUNBZ0lDQWdJR3RXWVd4MVpTQTlJR2wwWlcxelcydGRPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JXRndSbTRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQkJXMnRkSUQwZ2RIbHdaVzltSUZRZ1BUMDlJQ2QxYm1SbFptbHVaV1FuSUQ4Z2JXRndSbTRvYTFaaGJIVmxMQ0JyS1NBNklHMWhjRVp1TG1OaGJHd29WQ3dnYTFaaGJIVmxMQ0JyS1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQkJXMnRkSUQwZ2ExWmhiSFZsTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHc2dLejBnTVR0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklERTRMaUJNWlhRZ2NIVjBVM1JoZEhWeklHSmxJRkIxZENoQkxDQmNJbXhsYm1kMGFGd2lMQ0JzWlc0c0lIUnlkV1VwTGx4dUlDQWdJQ0FnUVM1c1pXNW5kR2dnUFNCc1pXNDdYRzRnSUNBZ0lDQXZMeUF5TUM0Z1VtVjBkWEp1SUVFdVhHNGdJQ0FnSUNCeVpYUjFjbTRnUVR0Y2JpQWdJQ0I5TzF4dUlDQjlLQ2twTzF4dWZWeHVJaXdpTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzcHNiMmx5YjJOckwyTnZjbVV0YW5NdmFYTnpkV1Z6THpnMkkybHpjM1ZsWTI5dGJXVnVkQzB4TVRVM05Ua3dNamhjYm5aaGNpQm5iRzlpWVd3Z1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIUjVjR1Z2WmlCM2FXNWtiM2NnSVQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnZDJsdVpHOTNMazFoZEdnZ1BUMGdUV0YwYUZ4dUlDQS9JSGRwYm1SdmR5QTZJSFI1Y0dWdlppQnpaV3htSUNFOUlDZDFibVJsWm1sdVpXUW5JQ1ltSUhObGJHWXVUV0YwYUNBOVBTQk5ZWFJvSUQ4Z2MyVnNabHh1SUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRibVYzTFdaMWJtTmNiaUFnT2lCR2RXNWpkR2x2YmlnbmNtVjBkWEp1SUhSb2FYTW5LU2dwTzF4dWFXWWdLSFI1Y0dWdlppQmZYMmNnUFQwZ0oyNTFiV0psY2ljcElGOWZaeUE5SUdkc2IySmhiRHNnTHk4Z1pYTnNhVzUwTFdScGMyRmliR1V0YkdsdVpTQnVieTExYm1SbFpseHVJaXdpZG1GeUlHTnZjbVVnUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUhzZ2RtVnljMmx2YmpvZ0p6SXVOUzR4SnlCOU8xeHVhV1lnS0hSNWNHVnZaaUJmWDJVZ1BUMGdKMjUxYldKbGNpY3BJRjlmWlNBOUlHTnZjbVU3SUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFd4cGJtVWdibTh0ZFc1a1pXWmNiaUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0dsMEtTQjdYRzRnSUhKbGRIVnliaUIwZVhCbGIyWWdhWFFnUFQwOUlDZHZZbXBsWTNRbklEOGdhWFFnSVQwOUlHNTFiR3dnT2lCMGVYQmxiMllnYVhRZ1BUMDlJQ2RtZFc1amRHbHZiaWM3WEc1OU8xeHVJaXdpZG1GeUlHbHpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmYVhNdGIySnFaV04wSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlDaHBkQ2tnZTF4dUlDQnBaaUFvSVdselQySnFaV04wS0dsMEtTa2dkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHbDBJQ3NnSnlCcGN5QnViM1FnWVc0Z2IySnFaV04wSVNjcE8xeHVJQ0J5WlhSMWNtNGdhWFE3WEc1OU8xeHVJaXdpYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUFvWlhobFl5a2dlMXh1SUNCMGNua2dlMXh1SUNBZ0lISmxkSFZ5YmlBaElXVjRaV01vS1R0Y2JpQWdmU0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4dUlDQjlYRzU5TzF4dUlpd2lMeThnVkdoaGJtc25jeUJKUlRnZ1ptOXlJR2hwY3lCbWRXNXVlU0JrWldacGJtVlFjbTl3WlhKMGVWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQWhjbVZ4ZFdseVpTZ25MaTlmWm1GcGJITW5LU2htZFc1amRHbHZiaUFvS1NCN1hHNGdJSEpsZEhWeWJpQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvZTMwc0lDZGhKeXdnZXlCblpYUTZJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SURjN0lIMGdmU2t1WVNBaFBTQTNPMXh1ZlNrN1hHNGlMQ0oyWVhJZ2FYTlBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTlwY3kxdlltcGxZM1FuS1R0Y2JuWmhjaUJrYjJOMWJXVnVkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcExtUnZZM1Z0Wlc1ME8xeHVMeThnZEhsd1pXOW1JR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5RZ2FYTWdKMjlpYW1WamRDY2dhVzRnYjJ4a0lFbEZYRzUyWVhJZ2FYTWdQU0JwYzA5aWFtVmpkQ2hrYjJOMWJXVnVkQ2tnSmlZZ2FYTlBZbXBsWTNRb1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2s3WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNocGRDa2dlMXh1SUNCeVpYUjFjbTRnYVhNZ1B5QmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0dsMEtTQTZJSHQ5TzF4dWZUdGNiaUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnSVhKbGNYVnBjbVVvSnk0dlgyUmxjMk55YVhCMGIzSnpKeWtnSmlZZ0lYSmxjWFZwY21Vb0p5NHZYMlpoYVd4ekp5a29ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQnlaWFIxY200Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLSEpsY1hWcGNtVW9KeTR2WDJSdmJTMWpjbVZoZEdVbktTZ25aR2wySnlrc0lDZGhKeXdnZXlCblpYUTZJR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SURjN0lIMGdmU2t1WVNBaFBTQTNPMXh1ZlNrN1hHNGlMQ0l2THlBM0xqRXVNU0JVYjFCeWFXMXBkR2wyWlNocGJuQjFkQ0JiTENCUWNtVm1aWEp5WldSVWVYQmxYU2xjYm5aaGNpQnBjMDlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsekxXOWlhbVZqZENjcE8xeHVMeThnYVc1emRHVmhaQ0J2WmlCMGFHVWdSVk0ySUhOd1pXTWdkbVZ5YzJsdmJpd2dkMlVnWkdsa2JpZDBJR2x0Y0d4bGJXVnVkQ0JBUUhSdlVISnBiV2wwYVhabElHTmhjMlZjYmk4dklHRnVaQ0IwYUdVZ2MyVmpiMjVrSUdGeVozVnRaVzUwSUMwZ1pteGhaeUF0SUhCeVpXWmxjbkpsWkNCMGVYQmxJR2x6SUdFZ2MzUnlhVzVuWEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNocGRDd2dVeWtnZTF4dUlDQnBaaUFvSVdselQySnFaV04wS0dsMEtTa2djbVYwZFhKdUlHbDBPMXh1SUNCMllYSWdabTRzSUhaaGJEdGNiaUFnYVdZZ0tGTWdKaVlnZEhsd1pXOW1JQ2htYmlBOUlHbDBMblJ2VTNSeWFXNW5LU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZwYzA5aWFtVmpkQ2gyWVd3Z1BTQm1iaTVqWVd4c0tHbDBLU2twSUhKbGRIVnliaUIyWVd3N1hHNGdJR2xtSUNoMGVYQmxiMllnS0dadUlEMGdhWFF1ZG1Gc2RXVlBaaWtnUFQwZ0oyWjFibU4wYVc5dUp5QW1KaUFoYVhOUFltcGxZM1FvZG1Gc0lEMGdabTR1WTJGc2JDaHBkQ2twS1NCeVpYUjFjbTRnZG1Gc08xeHVJQ0JwWmlBb0lWTWdKaVlnZEhsd1pXOW1JQ2htYmlBOUlHbDBMblJ2VTNSeWFXNW5LU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZwYzA5aWFtVmpkQ2gyWVd3Z1BTQm1iaTVqWVd4c0tHbDBLU2twSUhKbGRIVnliaUIyWVd3N1hHNGdJSFJvY205M0lGUjVjR1ZGY25KdmNpaGNJa05oYmlkMElHTnZiblpsY25RZ2IySnFaV04wSUhSdklIQnlhVzFwZEdsMlpTQjJZV3gxWlZ3aUtUdGNibjA3WEc0aUxDSjJZWElnWVc1UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOWhiaTF2WW1wbFkzUW5LVHRjYm5aaGNpQkpSVGhmUkU5TlgwUkZSa2xPUlNBOUlISmxjWFZwY21Vb0p5NHZYMmxsT0Mxa2IyMHRaR1ZtYVc1bEp5azdYRzUyWVhJZ2RHOVFjbWx0YVhScGRtVWdQU0J5WlhGMWFYSmxLQ2N1TDE5MGJ5MXdjbWx0YVhScGRtVW5LVHRjYm5aaGNpQmtVQ0E5SUU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVUdGNibHh1Wlhod2IzSjBjeTVtSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1Z6WTNKcGNIUnZjbk1uS1NBL0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU0E2SUdaMWJtTjBhVzl1SUdSbFptbHVaVkJ5YjNCbGNuUjVLRThzSUZBc0lFRjBkSEpwWW5WMFpYTXBJSHRjYmlBZ1lXNVBZbXBsWTNRb1R5azdYRzRnSUZBZ1BTQjBiMUJ5YVcxcGRHbDJaU2hRTENCMGNuVmxLVHRjYmlBZ1lXNVBZbXBsWTNRb1FYUjBjbWxpZFhSbGN5azdYRzRnSUdsbUlDaEpSVGhmUkU5TlgwUkZSa2xPUlNrZ2RISjVJSHRjYmlBZ0lDQnlaWFIxY200Z1pGQW9UeXdnVUN3Z1FYUjBjbWxpZFhSbGN5azdYRzRnSUgwZ1kyRjBZMmdnS0dVcElIc2dMeW9nWlcxd2RIa2dLaThnZlZ4dUlDQnBaaUFvSjJkbGRDY2dhVzRnUVhSMGNtbGlkWFJsY3lCOGZDQW5jMlYwSnlCcGJpQkJkSFJ5YVdKMWRHVnpLU0IwYUhKdmR5QlVlWEJsUlhKeWIzSW9KMEZqWTJWemMyOXljeUJ1YjNRZ2MzVndjRzl5ZEdWa0lTY3BPMXh1SUNCcFppQW9KM1poYkhWbEp5QnBiaUJCZEhSeWFXSjFkR1Z6S1NCUFcxQmRJRDBnUVhSMGNtbGlkWFJsY3k1MllXeDFaVHRjYmlBZ2NtVjBkWEp1SUU4N1hHNTlPMXh1SWl3aWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb1ltbDBiV0Z3TENCMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z2UxeHVJQ0FnSUdWdWRXMWxjbUZpYkdVNklDRW9ZbWwwYldGd0lDWWdNU2tzWEc0Z0lDQWdZMjl1Wm1sbmRYSmhZbXhsT2lBaEtHSnBkRzFoY0NBbUlESXBMRnh1SUNBZ0lIZHlhWFJoWW14bE9pQWhLR0pwZEcxaGNDQW1JRFFwTEZ4dUlDQWdJSFpoYkhWbE9pQjJZV3gxWlZ4dUlDQjlPMXh1ZlR0Y2JpSXNJblpoY2lCa1VDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcE8xeHVkbUZ5SUdOeVpXRjBaVVJsYzJNZ1BTQnlaWEYxYVhKbEtDY3VMMTl3Y205d1pYSjBlUzFrWlhOakp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJSbGMyTnlhWEIwYjNKekp5a2dQeUJtZFc1amRHbHZiaUFvYjJKcVpXTjBMQ0JyWlhrc0lIWmhiSFZsS1NCN1hHNGdJSEpsZEhWeWJpQmtVQzVtS0c5aWFtVmpkQ3dnYTJWNUxDQmpjbVZoZEdWRVpYTmpLREVzSUhaaGJIVmxLU2s3WEc1OUlEb2dablZ1WTNScGIyNGdLRzlpYW1WamRDd2dhMlY1TENCMllXeDFaU2tnZTF4dUlDQnZZbXBsWTNSYmEyVjVYU0E5SUhaaGJIVmxPMXh1SUNCeVpYUjFjbTRnYjJKcVpXTjBPMXh1ZlR0Y2JpSXNJblpoY2lCb1lYTlBkMjVRY205d1pYSjBlU0E5SUh0OUxtaGhjMDkzYmxCeWIzQmxjblI1TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb2FYUXNJR3RsZVNrZ2UxeHVJQ0J5WlhSMWNtNGdhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hwZEN3Z2EyVjVLVHRjYm4wN1hHNGlMQ0oyWVhJZ2FXUWdQU0F3TzF4dWRtRnlJSEI0SUQwZ1RXRjBhQzV5WVc1a2IyMG9LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1SUNCeVpYUjFjbTRnSjFONWJXSnZiQ2duTG1OdmJtTmhkQ2hyWlhrZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUNjbklEb2dhMlY1TENBbktWOG5MQ0FvS3l0cFpDQXJJSEI0S1M1MGIxTjBjbWx1Wnlnek5pa3BPMXh1ZlR0Y2JpSXNJblpoY2lCbmJHOWlZV3dnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktUdGNiblpoY2lCb2FXUmxJRDBnY21WeGRXbHlaU2duTGk5ZmFHbGtaU2NwTzF4dWRtRnlJR2hoY3lBOUlISmxjWFZwY21Vb0p5NHZYMmhoY3ljcE8xeHVkbUZ5SUZOU1F5QTlJSEpsY1hWcGNtVW9KeTR2WDNWcFpDY3BLQ2R6Y21NbktUdGNiblpoY2lCVVQxOVRWRkpKVGtjZ1BTQW5kRzlUZEhKcGJtY25PMXh1ZG1GeUlDUjBiMU4wY21sdVp5QTlJRVoxYm1OMGFXOXVXMVJQWDFOVVVrbE9SMTA3WEc1MllYSWdWRkJNSUQwZ0tDY25JQ3NnSkhSdlUzUnlhVzVuS1M1emNHeHBkQ2hVVDE5VFZGSkpUa2NwTzF4dVhHNXlaWEYxYVhKbEtDY3VMMTlqYjNKbEp5a3VhVzV6Y0dWamRGTnZkWEpqWlNBOUlHWjFibU4wYVc5dUlDaHBkQ2tnZTF4dUlDQnlaWFIxY200Z0pIUnZVM1J5YVc1bkxtTmhiR3dvYVhRcE8xeHVmVHRjYmx4dUtHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z0tFOHNJR3RsZVN3Z2RtRnNMQ0J6WVdabEtTQjdYRzRnSUhaaGNpQnBjMFoxYm1OMGFXOXVJRDBnZEhsd1pXOW1JSFpoYkNBOVBTQW5ablZ1WTNScGIyNG5PMXh1SUNCcFppQW9hWE5HZFc1amRHbHZiaWtnYUdGektIWmhiQ3dnSjI1aGJXVW5LU0I4ZkNCb2FXUmxLSFpoYkN3Z0oyNWhiV1VuTENCclpYa3BPMXh1SUNCcFppQW9UMXRyWlhsZElEMDlQU0IyWVd3cElISmxkSFZ5Ymp0Y2JpQWdhV1lnS0dselJuVnVZM1JwYjI0cElHaGhjeWgyWVd3c0lGTlNReWtnZkh3Z2FHbGtaU2gyWVd3c0lGTlNReXdnVDF0clpYbGRJRDhnSnljZ0t5QlBXMnRsZVYwZ09pQlVVRXd1YW05cGJpaFRkSEpwYm1jb2EyVjVLU2twTzF4dUlDQnBaaUFvVHlBOVBUMGdaMnh2WW1Gc0tTQjdYRzRnSUNBZ1QxdHJaWGxkSUQwZ2RtRnNPMXh1SUNCOUlHVnNjMlVnYVdZZ0tDRnpZV1psS1NCN1hHNGdJQ0FnWkdWc1pYUmxJRTliYTJWNVhUdGNiaUFnSUNCb2FXUmxLRThzSUd0bGVTd2dkbUZzS1R0Y2JpQWdmU0JsYkhObElHbG1JQ2hQVzJ0bGVWMHBJSHRjYmlBZ0lDQlBXMnRsZVYwZ1BTQjJZV3c3WEc0Z0lIMGdaV3h6WlNCN1hHNGdJQ0FnYUdsa1pTaFBMQ0JyWlhrc0lIWmhiQ2s3WEc0Z0lIMWNiaTh2SUdGa1pDQm1ZV3RsSUVaMWJtTjBhVzl1STNSdlUzUnlhVzVuSUdadmNpQmpiM0p5WldOMElIZHZjbXNnZDNKaGNIQmxaQ0J0WlhSb2IyUnpJQzhnWTI5dWMzUnlkV04wYjNKeklIZHBkR2dnYldWMGFHOWtjeUJzYVd0bElFeHZSR0Z6YUNCcGMwNWhkR2wyWlZ4dWZTa29SblZ1WTNScGIyNHVjSEp2ZEc5MGVYQmxMQ0JVVDE5VFZGSkpUa2NzSUdaMWJtTjBhVzl1SUhSdlUzUnlhVzVuS0NrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlIUm9hWE1nUFQwZ0oyWjFibU4wYVc5dUp5QW1KaUIwYUdselcxTlNRMTBnZkh3Z0pIUnZVM1J5YVc1bkxtTmhiR3dvZEdocGN5azdYRzU5S1R0Y2JpSXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdLR2wwS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnYVhRZ0lUMGdKMloxYm1OMGFXOXVKeWtnZEdoeWIzY2dWSGx3WlVWeWNtOXlLR2wwSUNzZ0p5QnBjeUJ1YjNRZ1lTQm1kVzVqZEdsdmJpRW5LVHRjYmlBZ2NtVjBkWEp1SUdsME8xeHVmVHRjYmlJc0lpOHZJRzl3ZEdsdmJtRnNJQzhnYzJsdGNHeGxJR052Ym5SbGVIUWdZbWx1WkdsdVoxeHVkbUZ5SUdGR2RXNWpkR2x2YmlBOUlISmxjWFZwY21Vb0p5NHZYMkV0Wm5WdVkzUnBiMjRuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z0tHWnVMQ0IwYUdGMExDQnNaVzVuZEdncElIdGNiaUFnWVVaMWJtTjBhVzl1S0dadUtUdGNiaUFnYVdZZ0tIUm9ZWFFnUFQwOUlIVnVaR1ZtYVc1bFpDa2djbVYwZFhKdUlHWnVPMXh1SUNCemQybDBZMmdnS0d4bGJtZDBhQ2tnZTF4dUlDQWdJR05oYzJVZ01Ub2djbVYwZFhKdUlHWjFibU4wYVc5dUlDaGhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTR1WTJGc2JDaDBhR0YwTENCaEtUdGNiaUFnSUNCOU8xeHVJQ0FnSUdOaGMyVWdNam9nY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2hoTENCaUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptNHVZMkZzYkNoMGFHRjBMQ0JoTENCaUtUdGNiaUFnSUNCOU8xeHVJQ0FnSUdOaGMyVWdNem9nY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2hoTENCaUxDQmpLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabTR1WTJGc2JDaDBhR0YwTENCaExDQmlMQ0JqS1R0Y2JpQWdJQ0I5TzF4dUlDQjlYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvTHlvZ0xpNHVZWEpuY3lBcUx5a2dlMXh1SUNBZ0lISmxkSFZ5YmlCbWJpNWhjSEJzZVNoMGFHRjBMQ0JoY21kMWJXVnVkSE1wTzF4dUlDQjlPMXh1ZlR0Y2JpSXNJblpoY2lCbmJHOWlZV3dnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktUdGNiblpoY2lCamIzSmxJRDBnY21WeGRXbHlaU2duTGk5ZlkyOXlaU2NwTzF4dWRtRnlJR2hwWkdVZ1BTQnlaWEYxYVhKbEtDY3VMMTlvYVdSbEp5azdYRzUyWVhJZ2NtVmtaV1pwYm1VZ1BTQnlaWEYxYVhKbEtDY3VMMTl5WldSbFptbHVaU2NwTzF4dWRtRnlJR04wZUNBOUlISmxjWFZwY21Vb0p5NHZYMk4wZUNjcE8xeHVkbUZ5SUZCU1QxUlBWRmxRUlNBOUlDZHdjbTkwYjNSNWNHVW5PMXh1WEc1MllYSWdKR1Y0Y0c5eWRDQTlJR1oxYm1OMGFXOXVJQ2gwZVhCbExDQnVZVzFsTENCemIzVnlZMlVwSUh0Y2JpQWdkbUZ5SUVsVFgwWlBVa05GUkNBOUlIUjVjR1VnSmlBa1pYaHdiM0owTGtZN1hHNGdJSFpoY2lCSlUxOUhURTlDUVV3Z1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1SE8xeHVJQ0IyWVhJZ1NWTmZVMVJCVkVsRElEMGdkSGx3WlNBbUlDUmxlSEJ2Y25RdVV6dGNiaUFnZG1GeUlFbFRYMUJTVDFSUElEMGdkSGx3WlNBbUlDUmxlSEJ2Y25RdVVEdGNiaUFnZG1GeUlFbFRYMEpKVGtRZ1BTQjBlWEJsSUNZZ0pHVjRjRzl5ZEM1Q08xeHVJQ0IyWVhJZ2RHRnlaMlYwSUQwZ1NWTmZSMHhQUWtGTUlEOGdaMnh2WW1Gc0lEb2dTVk5mVTFSQlZFbERJRDhnWjJ4dlltRnNXMjVoYldWZElIeDhJQ2huYkc5aVlXeGJibUZ0WlYwZ1BTQjdmU2tnT2lBb1oyeHZZbUZzVzI1aGJXVmRJSHg4SUh0OUtWdFFVazlVVDFSWlVFVmRPMXh1SUNCMllYSWdaWGh3YjNKMGN5QTlJRWxUWDBkTVQwSkJUQ0EvSUdOdmNtVWdPaUJqYjNKbFcyNWhiV1ZkSUh4OElDaGpiM0psVzI1aGJXVmRJRDBnZTMwcE8xeHVJQ0IyWVhJZ1pYaHdVSEp2ZEc4Z1BTQmxlSEJ2Y25SelcxQlNUMVJQVkZsUVJWMGdmSHdnS0dWNGNHOXlkSE5iVUZKUFZFOVVXVkJGWFNBOUlIdDlLVHRjYmlBZ2RtRnlJR3RsZVN3Z2IzZHVMQ0J2ZFhRc0lHVjRjRHRjYmlBZ2FXWWdLRWxUWDBkTVQwSkJUQ2tnYzI5MWNtTmxJRDBnYm1GdFpUdGNiaUFnWm05eUlDaHJaWGtnYVc0Z2MyOTFjbU5sS1NCN1hHNGdJQ0FnTHk4Z1kyOXVkR0ZwYm5NZ2FXNGdibUYwYVhabFhHNGdJQ0FnYjNkdUlEMGdJVWxUWDBaUFVrTkZSQ0FtSmlCMFlYSm5aWFFnSmlZZ2RHRnlaMlYwVzJ0bGVWMGdJVDA5SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0F2THlCbGVIQnZjblFnYm1GMGFYWmxJRzl5SUhCaGMzTmxaRnh1SUNBZ0lHOTFkQ0E5SUNodmQyNGdQeUIwWVhKblpYUWdPaUJ6YjNWeVkyVXBXMnRsZVYwN1hHNGdJQ0FnTHk4Z1ltbHVaQ0IwYVcxbGNuTWdkRzhnWjJ4dlltRnNJR1p2Y2lCallXeHNJR1p5YjIwZ1pYaHdiM0owSUdOdmJuUmxlSFJjYmlBZ0lDQmxlSEFnUFNCSlUxOUNTVTVFSUNZbUlHOTNiaUEvSUdOMGVDaHZkWFFzSUdkc2IySmhiQ2tnT2lCSlUxOVFVazlVVHlBbUppQjBlWEJsYjJZZ2IzVjBJRDA5SUNkbWRXNWpkR2x2YmljZ1B5QmpkSGdvUm5WdVkzUnBiMjR1WTJGc2JDd2diM1YwS1NBNklHOTFkRHRjYmlBZ0lDQXZMeUJsZUhSbGJtUWdaMnh2WW1Gc1hHNGdJQ0FnYVdZZ0tIUmhjbWRsZENrZ2NtVmtaV1pwYm1Vb2RHRnlaMlYwTENCclpYa3NJRzkxZEN3Z2RIbHdaU0FtSUNSbGVIQnZjblF1VlNrN1hHNGdJQ0FnTHk4Z1pYaHdiM0owWEc0Z0lDQWdhV1lnS0dWNGNHOXlkSE5iYTJWNVhTQWhQU0J2ZFhRcElHaHBaR1VvWlhod2IzSjBjeXdnYTJWNUxDQmxlSEFwTzF4dUlDQWdJR2xtSUNoSlUxOVFVazlVVHlBbUppQmxlSEJRY205MGIxdHJaWGxkSUNFOUlHOTFkQ2tnWlhod1VISnZkRzliYTJWNVhTQTlJRzkxZER0Y2JpQWdmVnh1ZlR0Y2JtZHNiMkpoYkM1amIzSmxJRDBnWTI5eVpUdGNiaTh2SUhSNWNHVWdZbWwwYldGd1hHNGtaWGh3YjNKMExrWWdQU0F4T3lBZ0lDOHZJR1p2Y21ObFpGeHVKR1Y0Y0c5eWRDNUhJRDBnTWpzZ0lDQXZMeUJuYkc5aVlXeGNiaVJsZUhCdmNuUXVVeUE5SURRN0lDQWdMeThnYzNSaGRHbGpYRzRrWlhod2IzSjBMbEFnUFNBNE95QWdJQzh2SUhCeWIzUnZYRzRrWlhod2IzSjBMa0lnUFNBeE5qc2dJQzh2SUdKcGJtUmNiaVJsZUhCdmNuUXVWeUE5SURNeU95QWdMeThnZDNKaGNGeHVKR1Y0Y0c5eWRDNVZJRDBnTmpRN0lDQXZMeUJ6WVdabFhHNGtaWGh3YjNKMExsSWdQU0F4TWpnN0lDOHZJSEpsWVd3Z2NISnZkRzhnYldWMGFHOWtJR1p2Y2lCZ2JHbGljbUZ5ZVdCY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ0pHVjRjRzl5ZER0Y2JpSXNJblpoY2lCMGIxTjBjbWx1WnlBOUlIdDlMblJ2VTNSeWFXNW5PMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNocGRDa2dlMXh1SUNCeVpYUjFjbTRnZEc5VGRISnBibWN1WTJGc2JDaHBkQ2t1YzJ4cFkyVW9PQ3dnTFRFcE8xeHVmVHRjYmlJc0lpOHZJR1poYkd4aVlXTnJJR1p2Y2lCdWIyNHRZWEp5WVhrdGJHbHJaU0JGVXpNZ1lXNWtJRzV2YmkxbGJuVnRaWEpoWW14bElHOXNaQ0JXT0NCemRISnBibWR6WEc1MllYSWdZMjltSUQwZ2NtVnhkV2x5WlNnbkxpOWZZMjltSnlrN1hHNHZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0Y0hKdmRHOTBlWEJsTFdKMWFXeDBhVzV6WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUU5aWFtVmpkQ2duZWljcExuQnliM0JsY25SNVNYTkZiblZ0WlhKaFlteGxLREFwSUQ4Z1QySnFaV04wSURvZ1puVnVZM1JwYjI0Z0tHbDBLU0I3WEc0Z0lISmxkSFZ5YmlCamIyWW9hWFFwSUQwOUlDZFRkSEpwYm1jbklEOGdhWFF1YzNCc2FYUW9KeWNwSURvZ1QySnFaV04wS0dsMEtUdGNibjA3WEc0aUxDSXZMeUEzTGpJdU1TQlNaWEYxYVhKbFQySnFaV04wUTI5bGNtTnBZbXhsS0dGeVozVnRaVzUwS1Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb2FYUXBJSHRjYmlBZ2FXWWdLR2wwSUQwOUlIVnVaR1ZtYVc1bFpDa2dkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtGd2lRMkZ1SjNRZ1kyRnNiQ0J0WlhSb2IyUWdiMjRnSUZ3aUlDc2dhWFFwTzF4dUlDQnlaWFIxY200Z2FYUTdYRzU5TzF4dUlpd2lMeThnZEc4Z2FXNWtaWGhsWkNCdlltcGxZM1FzSUhSdlQySnFaV04wSUhkcGRHZ2dabUZzYkdKaFkyc2dabTl5SUc1dmJpMWhjbkpoZVMxc2FXdGxJRVZUTXlCemRISnBibWR6WEc1MllYSWdTVTlpYW1WamRDQTlJSEpsY1hWcGNtVW9KeTR2WDJsdlltcGxZM1FuS1R0Y2JuWmhjaUJrWldacGJtVmtJRDBnY21WeGRXbHlaU2duTGk5ZlpHVm1hVzVsWkNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQW9hWFFwSUh0Y2JpQWdjbVYwZFhKdUlFbFBZbXBsWTNRb1pHVm1hVzVsWkNocGRDa3BPMXh1ZlR0Y2JpSXNJaTh2SURjdU1TNDBJRlJ2U1c1MFpXZGxjbHh1ZG1GeUlHTmxhV3dnUFNCTllYUm9MbU5sYVd3N1hHNTJZWElnWm14dmIzSWdQU0JOWVhSb0xtWnNiMjl5TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb2FYUXBJSHRjYmlBZ2NtVjBkWEp1SUdselRtRk9LR2wwSUQwZ0sybDBLU0EvSURBZ09pQW9hWFFnUGlBd0lEOGdabXh2YjNJZ09pQmpaV2xzS1NocGRDazdYRzU5TzF4dUlpd2lMeThnTnk0eExqRTFJRlJ2VEdWdVozUm9YRzUyWVhJZ2RHOUpiblJsWjJWeUlEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGFXNTBaV2RsY2ljcE8xeHVkbUZ5SUcxcGJpQTlJRTFoZEdndWJXbHVPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUFvYVhRcElIdGNiaUFnY21WMGRYSnVJR2wwSUQ0Z01DQS9JRzFwYmloMGIwbHVkR1ZuWlhJb2FYUXBMQ0F3ZURGbVptWm1abVptWm1abVptWm1LU0E2SURBN0lDOHZJSEJ2ZHlneUxDQTFNeWtnTFNBeElEMDlJRGt3TURjeE9Ua3lOVFEzTkRBNU9URmNibjA3WEc0aUxDSjJZWElnZEc5SmJuUmxaMlZ5SUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc1MFpXZGxjaWNwTzF4dWRtRnlJRzFoZUNBOUlFMWhkR2d1YldGNE8xeHVkbUZ5SUcxcGJpQTlJRTFoZEdndWJXbHVPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUFvYVc1a1pYZ3NJR3hsYm1kMGFDa2dlMXh1SUNCcGJtUmxlQ0E5SUhSdlNXNTBaV2RsY2locGJtUmxlQ2s3WEc0Z0lISmxkSFZ5YmlCcGJtUmxlQ0E4SURBZ1B5QnRZWGdvYVc1a1pYZ2dLeUJzWlc1bmRHZ3NJREFwSURvZ2JXbHVLR2x1WkdWNExDQnNaVzVuZEdncE8xeHVmVHRjYmlJc0lpOHZJR1poYkhObElDMCtJRUZ5Y21GNUkybHVaR1Y0VDJaY2JpOHZJSFJ5ZFdVZ0lDMCtJRUZ5Y21GNUkybHVZMngxWkdWelhHNTJZWElnZEc5SlQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0YVc5aWFtVmpkQ2NwTzF4dWRtRnlJSFJ2VEdWdVozUm9JRDBnY21WeGRXbHlaU2duTGk5ZmRHOHRiR1Z1WjNSb0p5azdYRzUyWVhJZ2RHOUJZbk52YkhWMFpVbHVaR1Y0SUQwZ2NtVnhkV2x5WlNnbkxpOWZkRzh0WVdKemIyeDFkR1V0YVc1a1pYZ25LVHRjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0VsVFgwbE9RMHhWUkVWVEtTQjdYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvSkhSb2FYTXNJR1ZzTENCbWNtOXRTVzVrWlhncElIdGNiaUFnSUNCMllYSWdUeUE5SUhSdlNVOWlhbVZqZENna2RHaHBjeWs3WEc0Z0lDQWdkbUZ5SUd4bGJtZDBhQ0E5SUhSdlRHVnVaM1JvS0U4dWJHVnVaM1JvS1R0Y2JpQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCMGIwRmljMjlzZFhSbFNXNWtaWGdvWm5KdmJVbHVaR1Y0TENCc1pXNW5kR2dwTzF4dUlDQWdJSFpoY2lCMllXeDFaVHRjYmlBZ0lDQXZMeUJCY25KaGVTTnBibU5zZFdSbGN5QjFjMlZ6SUZOaGJXVldZV3gxWlZwbGNtOGdaWEYxWVd4cGRIa2dZV3huYjNKcGRHaHRYRzRnSUNBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMWE5sYkdZdFkyOXRjR0Z5WlZ4dUlDQWdJR2xtSUNoSlUxOUpUa05NVlVSRlV5QW1KaUJsYkNBaFBTQmxiQ2tnZDJocGJHVWdLR3hsYm1kMGFDQStJR2x1WkdWNEtTQjdYRzRnSUNBZ0lDQjJZV3gxWlNBOUlFOWJhVzVrWlhncksxMDdYRzRnSUNBZ0lDQXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXVaWGgwTFd4cGJtVWdibTh0YzJWc1ppMWpiMjF3WVhKbFhHNGdJQ0FnSUNCcFppQW9kbUZzZFdVZ0lUMGdkbUZzZFdVcElISmxkSFZ5YmlCMGNuVmxPMXh1SUNBZ0lDOHZJRUZ5Y21GNUkybHVaR1Y0VDJZZ2FXZHViM0psY3lCb2IyeGxjeXdnUVhKeVlYa2phVzVqYkhWa1pYTWdMU0J1YjNSY2JpQWdJQ0I5SUdWc2MyVWdabTl5SUNnN2JHVnVaM1JvSUQ0Z2FXNWtaWGc3SUdsdVpHVjRLeXNwSUdsbUlDaEpVMTlKVGtOTVZVUkZVeUI4ZkNCcGJtUmxlQ0JwYmlCUEtTQjdYRzRnSUNBZ0lDQnBaaUFvVDF0cGJtUmxlRjBnUFQwOUlHVnNLU0J5WlhSMWNtNGdTVk5mU1U1RFRGVkVSVk1nZkh3Z2FXNWtaWGdnZkh3Z01EdGNiaUFnSUNCOUlISmxkSFZ5YmlBaFNWTmZTVTVEVEZWRVJWTWdKaVlnTFRFN1hHNGdJSDA3WEc1OU8xeHVJaXdpZG1GeUlHZHNiMkpoYkNBOUlISmxjWFZwY21Vb0p5NHZYMmRzYjJKaGJDY3BPMXh1ZG1GeUlGTklRVkpGUkNBOUlDZGZYMk52Y21VdGFuTmZjMmhoY21Wa1gxOG5PMXh1ZG1GeUlITjBiM0psSUQwZ1oyeHZZbUZzVzFOSVFWSkZSRjBnZkh3Z0tHZHNiMkpoYkZ0VFNFRlNSVVJkSUQwZ2UzMHBPMXh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUFvYTJWNUtTQjdYRzRnSUhKbGRIVnliaUJ6ZEc5eVpWdHJaWGxkSUh4OElDaHpkRzl5WlZ0clpYbGRJRDBnZTMwcE8xeHVmVHRjYmlJc0luWmhjaUJ6YUdGeVpXUWdQU0J5WlhGMWFYSmxLQ2N1TDE5emFHRnlaV1FuS1NnbmEyVjVjeWNwTzF4dWRtRnlJSFZwWkNBOUlISmxjWFZwY21Vb0p5NHZYM1ZwWkNjcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQW9hMlY1S1NCN1hHNGdJSEpsZEhWeWJpQnphR0Z5WldSYmEyVjVYU0I4ZkNBb2MyaGhjbVZrVzJ0bGVWMGdQU0IxYVdRb2EyVjVLU2s3WEc1OU8xeHVJaXdpZG1GeUlHaGhjeUE5SUhKbGNYVnBjbVVvSnk0dlgyaGhjeWNwTzF4dWRtRnlJSFJ2U1U5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgzUnZMV2x2WW1wbFkzUW5LVHRjYm5aaGNpQmhjbkpoZVVsdVpHVjRUMllnUFNCeVpYRjFhWEpsS0NjdUwxOWhjbkpoZVMxcGJtTnNkV1JsY3ljcEtHWmhiSE5sS1R0Y2JuWmhjaUJKUlY5UVVrOVVUeUE5SUhKbGNYVnBjbVVvSnk0dlgzTm9ZWEpsWkMxclpYa25LU2duU1VWZlVGSlBWRThuS1R0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQW9iMkpxWldOMExDQnVZVzFsY3lrZ2UxeHVJQ0IyWVhJZ1R5QTlJSFJ2U1U5aWFtVmpkQ2h2WW1wbFkzUXBPMXh1SUNCMllYSWdhU0E5SURBN1hHNGdJSFpoY2lCeVpYTjFiSFFnUFNCYlhUdGNiaUFnZG1GeUlHdGxlVHRjYmlBZ1ptOXlJQ2hyWlhrZ2FXNGdUeWtnYVdZZ0tHdGxlU0FoUFNCSlJWOVFVazlVVHlrZ2FHRnpLRThzSUd0bGVTa2dKaVlnY21WemRXeDBMbkIxYzJnb2EyVjVLVHRjYmlBZ0x5OGdSRzl1SjNRZ1pXNTFiU0JpZFdjZ0ppQm9hV1JrWlc0Z2EyVjVjMXh1SUNCM2FHbHNaU0FvYm1GdFpYTXViR1Z1WjNSb0lENGdhU2tnYVdZZ0tHaGhjeWhQTENCclpYa2dQU0J1WVcxbGMxdHBLeXRkS1NrZ2UxeHVJQ0FnSUg1aGNuSmhlVWx1WkdWNFQyWW9jbVZ6ZFd4MExDQnJaWGtwSUh4OElISmxjM1ZzZEM1d2RYTm9LR3RsZVNrN1hHNGdJSDFjYmlBZ2NtVjBkWEp1SUhKbGMzVnNkRHRjYm4wN1hHNGlMQ0l2THlCSlJTQTRMU0JrYjI0bmRDQmxiblZ0SUdKMVp5QnJaWGx6WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUNoY2JpQWdKMk52Ym5OMGNuVmpkRzl5TEdoaGMwOTNibEJ5YjNCbGNuUjVMR2x6VUhKdmRHOTBlWEJsVDJZc2NISnZjR1Z5ZEhsSmMwVnVkVzFsY21GaWJHVXNkRzlNYjJOaGJHVlRkSEpwYm1jc2RHOVRkSEpwYm1jc2RtRnNkV1ZQWmlkY2Jpa3VjM0JzYVhRb0p5d25LVHRjYmlJc0lpOHZJREU1TGpFdU1pNHhOQ0F2SURFMUxqSXVNeTR4TkNCUFltcGxZM1F1YTJWNWN5aFBLVnh1ZG1GeUlDUnJaWGx6SUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXdGxlWE10YVc1MFpYSnVZV3duS1R0Y2JuWmhjaUJsYm5WdFFuVm5TMlY1Y3lBOUlISmxjWFZwY21Vb0p5NHZYMlZ1ZFcwdFluVm5MV3RsZVhNbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JQWW1wbFkzUXVhMlY1Y3lCOGZDQm1kVzVqZEdsdmJpQnJaWGx6S0U4cElIdGNiaUFnY21WMGRYSnVJQ1JyWlhsektFOHNJR1Z1ZFcxQ2RXZExaWGx6S1R0Y2JuMDdYRzRpTENKbGVIQnZjblJ6TG1ZZ1BTQlBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxUZVcxaWIyeHpPMXh1SWl3aVpYaHdiM0owY3k1bUlEMGdlMzB1Y0hKdmNHVnlkSGxKYzBWdWRXMWxjbUZpYkdVN1hHNGlMQ0l2THlBM0xqRXVNVE1nVkc5UFltcGxZM1FvWVhKbmRXMWxiblFwWEc1MllYSWdaR1ZtYVc1bFpDQTlJSEpsY1hWcGNtVW9KeTR2WDJSbFptbHVaV1FuS1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z0tHbDBLU0I3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1FvWkdWbWFXNWxaQ2hwZENrcE8xeHVmVHRjYmlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmk4dklERTVMakV1TWk0eElFOWlhbVZqZEM1aGMzTnBaMjRvZEdGeVoyVjBMQ0J6YjNWeVkyVXNJQzR1TGlsY2JuWmhjaUJuWlhSTFpYbHpJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTW5LVHRjYm5aaGNpQm5UMUJUSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHZjSE1uS1R0Y2JuWmhjaUJ3U1VVZ1BTQnlaWEYxYVhKbEtDY3VMMTl2WW1wbFkzUXRjR2xsSnlrN1hHNTJZWElnZEc5UFltcGxZM1FnUFNCeVpYRjFhWEpsS0NjdUwxOTBieTF2WW1wbFkzUW5LVHRjYm5aaGNpQkpUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmYVc5aWFtVmpkQ2NwTzF4dWRtRnlJQ1JoYzNOcFoyNGdQU0JQWW1wbFkzUXVZWE56YVdkdU8xeHVYRzR2THlCemFHOTFiR1FnZDI5eWF5QjNhWFJvSUhONWJXSnZiSE1nWVc1a0lITm9iM1ZzWkNCb1lYWmxJR1JsZEdWeWJXbHVhWE4wYVdNZ2NISnZjR1Z5ZEhrZ2IzSmtaWElnS0ZZNElHSjFaeWxjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnSVNSaGMzTnBaMjRnZkh3Z2NtVnhkV2x5WlNnbkxpOWZabUZwYkhNbktTaG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJCSUQwZ2UzMDdYRzRnSUhaaGNpQkNJRDBnZTMwN1hHNGdJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMVzVsZUhRdGJHbHVaU0J1YnkxMWJtUmxabHh1SUNCMllYSWdVeUE5SUZONWJXSnZiQ2dwTzF4dUlDQjJZWElnU3lBOUlDZGhZbU5rWldabmFHbHFhMnh0Ym05d2NYSnpkQ2M3WEc0Z0lFRmJVMTBnUFNBM08xeHVJQ0JMTG5Od2JHbDBLQ2NuS1M1bWIzSkZZV05vS0daMWJtTjBhVzl1SUNocktTQjdJRUpiYTEwZ1BTQnJPeUI5S1R0Y2JpQWdjbVYwZFhKdUlDUmhjM05wWjI0b2UzMHNJRUVwVzFOZElDRTlJRGNnZkh3Z1QySnFaV04wTG10bGVYTW9KR0Z6YzJsbmJpaDdmU3dnUWlrcExtcHZhVzRvSnljcElDRTlJRXM3WEc1OUtTQS9JR1oxYm1OMGFXOXVJR0Z6YzJsbmJpaDBZWEpuWlhRc0lITnZkWEpqWlNrZ2V5QXZMeUJsYzJ4cGJuUXRaR2x6WVdKc1pTMXNhVzVsSUc1dkxYVnVkWE5sWkMxMllYSnpYRzRnSUhaaGNpQlVJRDBnZEc5UFltcGxZM1FvZEdGeVoyVjBLVHRjYmlBZ2RtRnlJR0ZNWlc0Z1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb08xeHVJQ0IyWVhJZ2FXNWtaWGdnUFNBeE8xeHVJQ0IyWVhJZ1oyVjBVM2x0WW05c2N5QTlJR2RQVUZNdVpqdGNiaUFnZG1GeUlHbHpSVzUxYlNBOUlIQkpSUzVtTzF4dUlDQjNhR2xzWlNBb1lVeGxiaUErSUdsdVpHVjRLU0I3WEc0Z0lDQWdkbUZ5SUZNZ1BTQkpUMkpxWldOMEtHRnlaM1Z0Wlc1MGMxdHBibVJsZUNzclhTazdYRzRnSUNBZ2RtRnlJR3RsZVhNZ1BTQm5aWFJUZVcxaWIyeHpJRDhnWjJWMFMyVjVjeWhUS1M1amIyNWpZWFFvWjJWMFUzbHRZbTlzY3loVEtTa2dPaUJuWlhSTFpYbHpLRk1wTzF4dUlDQWdJSFpoY2lCc1pXNW5kR2dnUFNCclpYbHpMbXhsYm1kMGFEdGNiaUFnSUNCMllYSWdhaUE5SURBN1hHNGdJQ0FnZG1GeUlHdGxlVHRjYmlBZ0lDQjNhR2xzWlNBb2JHVnVaM1JvSUQ0Z2Fpa2dhV1lnS0dselJXNTFiUzVqWVd4c0tGTXNJR3RsZVNBOUlHdGxlWE5iYWlzclhTa3BJRlJiYTJWNVhTQTlJRk5iYTJWNVhUdGNiaUFnZlNCeVpYUjFjbTRnVkR0Y2JuMGdPaUFrWVhOemFXZHVPMXh1SWl3aUx5OGdNVGt1TVM0ekxqRWdUMkpxWldOMExtRnpjMmxuYmloMFlYSm5aWFFzSUhOdmRYSmpaU2xjYm5aaGNpQWtaWGh3YjNKMElEMGdjbVZ4ZFdseVpTZ25MaTlmWlhod2IzSjBKeWs3WEc1Y2JpUmxlSEJ2Y25Rb0pHVjRjRzl5ZEM1VElDc2dKR1Y0Y0c5eWRDNUdMQ0FuVDJKcVpXTjBKeXdnZXlCaGMzTnBaMjQ2SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxaGMzTnBaMjRuS1NCOUtUdGNiaUlzSWk4cVhHNGdLaUJNYVdObGJuTmxaQ0IwYnlCMGFHVWdRWEJoWTJobElGTnZablIzWVhKbElFWnZkVzVrWVhScGIyNGdLRUZUUmlrZ2RXNWtaWElnYjI1bFhHNGdLaUJ2Y2lCdGIzSmxJR052Ym5SeWFXSjFkRzl5SUd4cFkyVnVjMlVnWVdkeVpXVnRaVzUwY3k0Z0lGTmxaU0IwYUdVZ1RrOVVTVU5GSUdacGJHVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIZHBkR2dnZEdocGN5QjNiM0pySUdadmNpQmhaR1JwZEdsdmJtRnNJR2x1Wm05eWJXRjBhVzl1WEc0Z0tpQnlaV2RoY21ScGJtY2dZMjl3ZVhKcFoyaDBJRzkzYm1WeWMyaHBjQzRnSUZSb1pTQkJVMFlnYkdsalpXNXpaWE1nZEdocGN5Qm1hV3hsWEc0Z0tpQjBieUI1YjNVZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsWEc0Z0tpQmNJa3hwWTJWdWMyVmNJaWs3SUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJWY2JpQXFJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVJQ0JaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5eGNiaUFxSUhOdlpuUjNZWEpsSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVYRzRnS2lCY0lrRlRJRWxUWENJZ1FrRlRTVk1zSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dWeHVJQ29nUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNGdJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobFhHNGdLaUJ6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtJR3hwYldsMFlYUnBiMjV6WEc0Z0tpQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dWFXMXdiM0owSUNkamIzSmxMV3B6TDJadUwyOWlhbVZqZEM5aGMzTnBaMjRuWEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibHh1THlvZ1pYTnNhVzUwTFdScGMyRmliR1VnS2k5Y2JseHVMeThnYUhSMGNITTZMeTluYVhOMExtZHBkR2gxWWk1amIyMHZWMlZpVW1WbWJHVmpkR2x2Ymk4MU5Ua3pOVFUwWEc1Y2JpOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnBaaUFxTDF4dWFXWWdLQ0ZQWW1wbFkzUXVjMlYwVUhKdmRHOTBlWEJsVDJZcElIdGNiaUFnVDJKcVpXTjBMbk5sZEZCeWIzUnZkSGx3WlU5bUlEMGdLR1oxYm1OMGFXOXVLRTlpYW1WamRDd2diV0ZuYVdNcElIdGNiaUFnSUNCMllYSWdjMlYwTzF4dUlDQWdJR1oxYm1OMGFXOXVJSE5sZEZCeWIzUnZkSGx3WlU5bUtFOHNJSEJ5YjNSdktTQjdYRzRnSUNBZ0lDQnpaWFF1WTJGc2JDaFBMQ0J3Y205MGJ5azdYRzRnSUNBZ0lDQnlaWFIxY200Z1R6dGNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDOHZJSFJvYVhNZ2QyOXlhM01nWVd4eVpXRmtlU0JwYmlCR2FYSmxabTk0SUdGdVpDQlRZV1poY21sY2JpQWdJQ0FnSUhObGRDQTlJRTlpYW1WamRDNW5aWFJQZDI1UWNtOXdaWEowZVVSbGMyTnlhWEIwYjNJb1QySnFaV04wTG5CeWIzUnZkSGx3WlN3Z2JXRm5hV01wTG5ObGREdGNiaUFnSUNBZ0lITmxkQzVqWVd4c0tIdDlMQ0J1ZFd4c0tUdGNiaUFnSUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUM4dklFbEZJRHdnTVRFZ1kyRnVibTkwSUdKbElITm9hVzF0WldSY2JpQWdJQ0FnSUNBZ1QySnFaV04wTG5CeWIzUnZkSGx3WlNBaFBUMGdlMzFiYldGbmFXTmRJSHg4WEc0Z0lDQWdJQ0FnSUM4dklHNWxhWFJvWlhJZ1kyRnVJR0Z1ZVNCaWNtOTNjMlZ5SUhSb1lYUWdZV04wZFdGc2JIbGNiaUFnSUNBZ0lDQWdMeThnYVcxd2JHVnRaVzUwWldRZ1gxOXdjbTkwYjE5ZklHTnZjbkpsWTNSc2VWeHVJQ0FnSUNBZ0lDQXZMeUFvWVd4c0lHSjFkQ0J2YkdRZ1ZqZ2dkMmxzYkNCeVpYUjFjbTRnYUdWeVpTbGNiaUFnSUNBZ0lDQWdlMTlmY0hKdmRHOWZYem9nYm5Wc2JIMHVYMTl3Y205MGIxOWZJRDA5UFNCMmIybGtJREJjYmlBZ0lDQWdJQ0FnTHk4Z2RHaHBjeUJqWVhObElHMWxZVzV6SUc1MWJHd2diMkpxWldOMGN5QmpZVzV1YjNRZ1ltVWdjR0Z6YzJWa1hHNGdJQ0FnSUNBZ0lDOHZJSFJvY205MVoyZ2djMlYwVUhKdmRHOTBlWEJsVDJZZ2FXNGdZU0J5Wld4cFlXSnNaU0IzWVhsY2JpQWdJQ0FnSUNBZ0x5OGdkMmhwWTJnZ2JXVmhibk1nYUdWeVpTQmhJQ29xVTJoaGJTb3FJR2x6SUc1bFpXUmxaQ0JwYm5OMFpXRmtYRzRnSUNBZ0lDQXBJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVPMXh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdMeThnYm05a1pXcHpJREF1T0NCaGJtUWdNQzR4TUNCaGNtVWdLR0oxWjJkNUlHRnVaQzR1S1NCbWFXNWxJR2hsY21WY2JpQWdJQ0FnSUM4dklIQnliMkpoWW14NUlFTm9jbTl0WlNCdmNpQnpiMjFsSUc5c1pDQk5iMkpwYkdVZ2MzUnZZMnNnWW5KdmQzTmxjbHh1SUNBZ0lDQWdjMlYwSUQwZ1puVnVZM1JwYjI0b2NISnZkRzhwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjMXR0WVdkcFkxMGdQU0J3Y205MGJ6dGNiaUFnSUNBZ0lIMDdYRzRnSUNBZ0lDQXZMeUJ3YkdWaGMyVWdibTkwWlNCMGFHRjBJSFJvYVhNZ2QybHNiQ0FxS201dmRDb3FJSGR2Y210Y2JpQWdJQ0FnSUM4dklHbHVJSFJvYjNObElHSnliM2R6WlhKeklIUm9ZWFFnWkc4Z2JtOTBJR2x1YUdWeWFYUmNiaUFnSUNBZ0lDOHZJRjlmY0hKdmRHOWZYeUJpZVNCdGFYTjBZV3RsSUdaeWIyMGdUMkpxWldOMExuQnliM1J2ZEhsd1pWeHVJQ0FnSUNBZ0x5OGdhVzRnZEdobGMyVWdZMkZ6WlhNZ2QyVWdjMmh2ZFd4a0lIQnliMkpoWW14NUlIUm9jbTkzSUdGdUlHVnljbTl5WEc0Z0lDQWdJQ0F2THlCdmNpQmhkQ0JzWldGemRDQmlaU0JwYm1admNtMWxaQ0JoWW05MWRDQjBhR1VnYVhOemRXVmNiaUFnSUNBZ0lITmxkRkJ5YjNSdmRIbHdaVTltTG5CdmJIbG1hV3hzSUQwZ2MyVjBVSEp2ZEc5MGVYQmxUMllvWEc0Z0lDQWdJQ0FnSUhObGRGQnliM1J2ZEhsd1pVOW1LSHQ5TENCdWRXeHNLU3hjYmlBZ0lDQWdJQ0FnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaVnh1SUNBZ0lDQWdLU0JwYm5OMFlXNWpaVzltSUU5aWFtVmpkRHRjYmlBZ0lDQWdJQzh2SUhObGRGQnliM1J2ZEhsd1pVOW1MbkJ2YkhsbWFXeHNJRDA5UFNCMGNuVmxJRzFsWVc1eklHbDBJSGR2Y210eklHRnpJRzFsWVc1MFhHNGdJQ0FnSUNBdkx5QnpaWFJRY205MGIzUjVjR1ZQWmk1d2IyeDVabWxzYkNBOVBUMGdabUZzYzJVZ2JXVmhibk1nYVhRbmN5QnViM1FnTVRBd0pTQnlaV3hwWVdKc1pWeHVJQ0FnSUNBZ0x5OGdjMlYwVUhKdmRHOTBlWEJsVDJZdWNHOXNlV1pwYkd3Z1BUMDlJSFZ1WkdWbWFXNWxaRnh1SUNBZ0lDQWdMeThnYjNKY2JpQWdJQ0FnSUM4dklITmxkRkJ5YjNSdmRIbHdaVTltTG5CdmJIbG1hV3hzSUQwOUlDQnVkV3hzSUcxbFlXNXpJR2wwSjNNZ2JtOTBJR0VnY0c5c2VXWnBiR3hjYmlBZ0lDQWdJQzh2SUhkb2FXTm9JRzFsWVc1eklHbDBJSGR2Y210eklHRnpJR1Y0Y0dWamRHVmtYRzRnSUNBZ0lDQXZMeUIzWlNCallXNGdaWFpsYmlCa1pXeGxkR1VnVDJKcVpXTjBMbkJ5YjNSdmRIbHdaUzVmWDNCeWIzUnZYMTg3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCelpYUlFjbTkwYjNSNWNHVlBaanRjYmlBZ2ZTaFBZbXBsWTNRc0lDZGZYM0J5YjNSdlgxOG5LU2s3WEc1OVhHNGlMQ0oyWVhJZ2MzUnZjbVVnUFNCeVpYRjFhWEpsS0NjdUwxOXphR0Z5WldRbktTZ25kMnR6SnlrN1hHNTJZWElnZFdsa0lEMGdjbVZ4ZFdseVpTZ25MaTlmZFdsa0p5azdYRzUyWVhJZ1UzbHRZbTlzSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5a3VVM2x0WW05c08xeHVkbUZ5SUZWVFJWOVRXVTFDVDB3Z1BTQjBlWEJsYjJZZ1UzbHRZbTlzSUQwOUlDZG1kVzVqZEdsdmJpYzdYRzVjYm5aaGNpQWtaWGh3YjNKMGN5QTlJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdLRzVoYldVcElIdGNiaUFnY21WMGRYSnVJSE4wYjNKbFcyNWhiV1ZkSUh4OElDaHpkRzl5WlZ0dVlXMWxYU0E5WEc0Z0lDQWdWVk5GWDFOWlRVSlBUQ0FtSmlCVGVXMWliMnhiYm1GdFpWMGdmSHdnS0ZWVFJWOVRXVTFDVDB3Z1B5QlRlVzFpYjJ3Z09pQjFhV1FwS0NkVGVXMWliMnd1SnlBcklHNWhiV1VwS1R0Y2JuMDdYRzVjYmlSbGVIQnZjblJ6TG5OMGIzSmxJRDBnYzNSdmNtVTdYRzRpTENJdkx5Qm5aWFIwYVc1bklIUmhaeUJtY205dElERTVMakV1TXk0MklFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWRHOVRkSEpwYm1jb0tWeHVkbUZ5SUdOdlppQTlJSEpsY1hWcGNtVW9KeTR2WDJOdlppY3BPMXh1ZG1GeUlGUkJSeUE5SUhKbGNYVnBjbVVvSnk0dlgzZHJjeWNwS0NkMGIxTjBjbWx1WjFSaFp5Y3BPMXh1THk4Z1JWTXpJSGR5YjI1bklHaGxjbVZjYm5aaGNpQkJVa2NnUFNCamIyWW9ablZ1WTNScGIyNGdLQ2tnZXlCeVpYUjFjbTRnWVhKbmRXMWxiblJ6T3lCOUtDa3BJRDA5SUNkQmNtZDFiV1Z1ZEhNbk8xeHVYRzR2THlCbVlXeHNZbUZqYXlCbWIzSWdTVVV4TVNCVFkzSnBjSFFnUVdOalpYTnpJRVJsYm1sbFpDQmxjbkp2Y2x4dWRtRnlJSFJ5ZVVkbGRDQTlJR1oxYm1OMGFXOXVJQ2hwZEN3Z2EyVjVLU0I3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlHbDBXMnRsZVYwN1hHNGdJSDBnWTJGMFkyZ2dLR1VwSUhzZ0x5b2daVzF3ZEhrZ0tpOGdmVnh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQW9hWFFwSUh0Y2JpQWdkbUZ5SUU4c0lGUXNJRUk3WEc0Z0lISmxkSFZ5YmlCcGRDQTlQVDBnZFc1a1pXWnBibVZrSUQ4Z0oxVnVaR1ZtYVc1bFpDY2dPaUJwZENBOVBUMGdiblZzYkNBL0lDZE9kV3hzSjF4dUlDQWdJQzh2SUVCQWRHOVRkSEpwYm1kVVlXY2dZMkZ6WlZ4dUlDQWdJRG9nZEhsd1pXOW1JQ2hVSUQwZ2RISjVSMlYwS0U4Z1BTQlBZbXBsWTNRb2FYUXBMQ0JVUVVjcEtTQTlQU0FuYzNSeWFXNW5KeUEvSUZSY2JpQWdJQ0F2THlCaWRXbHNkR2x1VkdGbklHTmhjMlZjYmlBZ0lDQTZJRUZTUnlBL0lHTnZaaWhQS1Z4dUlDQWdJQzh2SUVWVE15QmhjbWQxYldWdWRITWdabUZzYkdKaFkydGNiaUFnSUNBNklDaENJRDBnWTI5bUtFOHBLU0E5UFNBblQySnFaV04wSnlBbUppQjBlWEJsYjJZZ1R5NWpZV3hzWldVZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUNkQmNtZDFiV1Z1ZEhNbklEb2dRanRjYm4wN1hHNGlMQ0luZFhObElITjBjbWxqZENjN1hHNHZMeUF4T1M0eExqTXVOaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5LQ2xjYm5aaGNpQmpiR0Z6YzI5bUlEMGdjbVZ4ZFdseVpTZ25MaTlmWTJ4aGMzTnZaaWNwTzF4dWRtRnlJSFJsYzNRZ1BTQjdmVHRjYm5SbGMzUmJjbVZ4ZFdseVpTZ25MaTlmZDJ0ekp5a29KM1J2VTNSeWFXNW5WR0ZuSnlsZElEMGdKM29uTzF4dWFXWWdLSFJsYzNRZ0t5QW5KeUFoUFNBblcyOWlhbVZqZENCNlhTY3BJSHRjYmlBZ2NtVnhkV2x5WlNnbkxpOWZjbVZrWldacGJtVW5LU2hQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMQ0FuZEc5VGRISnBibWNuTENCbWRXNWpkR2x2YmlCMGIxTjBjbWx1WnlncElIdGNiaUFnSUNCeVpYUjFjbTRnSjF0dlltcGxZM1FnSnlBcklHTnNZWE56YjJZb2RHaHBjeWtnS3lBblhTYzdYRzRnSUgwc0lIUnlkV1VwTzF4dWZWeHVJaXdpZG1GeUlIUnZTVzUwWldkbGNpQTlJSEpsY1hWcGNtVW9KeTR2WDNSdkxXbHVkR1ZuWlhJbktUdGNiblpoY2lCa1pXWnBibVZrSUQwZ2NtVnhkV2x5WlNnbkxpOWZaR1ZtYVc1bFpDY3BPMXh1THk4Z2RISjFaU0FnTFQ0Z1UzUnlhVzVuSTJGMFhHNHZMeUJtWVd4elpTQXRQaUJUZEhKcGJtY2pZMjlrWlZCdmFXNTBRWFJjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0ZSUFgxTlVVa2xPUnlrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLSFJvWVhRc0lIQnZjeWtnZTF4dUlDQWdJSFpoY2lCeklEMGdVM1J5YVc1bktHUmxabWx1WldRb2RHaGhkQ2twTzF4dUlDQWdJSFpoY2lCcElEMGdkRzlKYm5SbFoyVnlLSEJ2Y3lrN1hHNGdJQ0FnZG1GeUlHd2dQU0J6TG14bGJtZDBhRHRjYmlBZ0lDQjJZWElnWVN3Z1lqdGNiaUFnSUNCcFppQW9hU0E4SURBZ2ZId2dhU0ErUFNCc0tTQnlaWFIxY200Z1ZFOWZVMVJTU1U1SElEOGdKeWNnT2lCMWJtUmxabWx1WldRN1hHNGdJQ0FnWVNBOUlITXVZMmhoY2tOdlpHVkJkQ2hwS1R0Y2JpQWdJQ0J5WlhSMWNtNGdZU0E4SURCNFpEZ3dNQ0I4ZkNCaElENGdNSGhrWW1abUlIeDhJR2tnS3lBeElEMDlQU0JzSUh4OElDaGlJRDBnY3k1amFHRnlRMjlrWlVGMEtHa2dLeUF4S1NrZ1BDQXdlR1JqTURBZ2ZId2dZaUErSURCNFpHWm1abHh1SUNBZ0lDQWdQeUJVVDE5VFZGSkpUa2NnUHlCekxtTm9ZWEpCZENocEtTQTZJR0ZjYmlBZ0lDQWdJRG9nVkU5ZlUxUlNTVTVISUQ4Z2N5NXpiR2xqWlNocExDQnBJQ3NnTWlrZ09pQW9ZU0F0SURCNFpEZ3dNQ0E4UENBeE1Da2dLeUFvWWlBdElEQjRaR013TUNrZ0t5QXdlREV3TURBd08xeHVJQ0I5TzF4dWZUdGNiaUlzSW0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm1Gc2MyVTdYRzRpTENKdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUh0OU8xeHVJaXdpZG1GeUlHUlFJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFdSd0p5azdYRzUyWVhJZ1lXNVBZbXBsWTNRZ1BTQnlaWEYxYVhKbEtDY3VMMTloYmkxdlltcGxZM1FuS1R0Y2JuWmhjaUJuWlhSTFpYbHpJRDBnY21WeGRXbHlaU2duTGk5ZmIySnFaV04wTFd0bGVYTW5LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUwxOWtaWE5qY21sd2RHOXljeWNwSUQ4Z1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUnBaWE1nT2lCbWRXNWpkR2x2YmlCa1pXWnBibVZRY205d1pYSjBhV1Z6S0U4c0lGQnliM0JsY25ScFpYTXBJSHRjYmlBZ1lXNVBZbXBsWTNRb1R5azdYRzRnSUhaaGNpQnJaWGx6SUQwZ1oyVjBTMlY1Y3loUWNtOXdaWEowYVdWektUdGNiaUFnZG1GeUlHeGxibWQwYUNBOUlHdGxlWE11YkdWdVozUm9PMXh1SUNCMllYSWdhU0E5SURBN1hHNGdJSFpoY2lCUU8xeHVJQ0IzYUdsc1pTQW9iR1Z1WjNSb0lENGdhU2tnWkZBdVppaFBMQ0JRSUQwZ2EyVjVjMXRwS3l0ZExDQlFjbTl3WlhKMGFXVnpXMUJkS1R0Y2JpQWdjbVYwZFhKdUlFODdYRzU5TzF4dUlpd2lkbUZ5SUdSdlkzVnRaVzUwSUQwZ2NtVnhkV2x5WlNnbkxpOWZaMnh2WW1Gc0p5a3VaRzlqZFcxbGJuUTdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1J2WTNWdFpXNTBJQ1ltSUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkRHRjYmlJc0lpOHZJREU1TGpFdU1pNHlJQzhnTVRVdU1pNHpMalVnVDJKcVpXTjBMbU55WldGMFpTaFBJRnNzSUZCeWIzQmxjblJwWlhOZEtWeHVkbUZ5SUdGdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWs3WEc1MllYSWdaRkJ6SUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXUndjeWNwTzF4dWRtRnlJR1Z1ZFcxQ2RXZExaWGx6SUQwZ2NtVnhkV2x5WlNnbkxpOWZaVzUxYlMxaWRXY3RhMlY1Y3ljcE8xeHVkbUZ5SUVsRlgxQlNUMVJQSUQwZ2NtVnhkV2x5WlNnbkxpOWZjMmhoY21Wa0xXdGxlU2NwS0NkSlJWOVFVazlVVHljcE8xeHVkbUZ5SUVWdGNIUjVJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QXZLaUJsYlhCMGVTQXFMeUI5TzF4dWRtRnlJRkJTVDFSUFZGbFFSU0E5SUNkd2NtOTBiM1I1Y0dVbk8xeHVYRzR2THlCRGNtVmhkR1VnYjJKcVpXTjBJSGRwZEdnZ1ptRnJaU0JnYm5Wc2JHQWdjSEp2ZEc5MGVYQmxPaUIxYzJVZ2FXWnlZVzFsSUU5aWFtVmpkQ0IzYVhSb0lHTnNaV0Z5WldRZ2NISnZkRzkwZVhCbFhHNTJZWElnWTNKbFlYUmxSR2xqZENBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0x5OGdWR2h5WVhOb0xDQjNZWE4wWlNCaGJtUWdjMjlrYjIxNU9pQkpSU0JIUXlCaWRXZGNiaUFnZG1GeUlHbG1jbUZ0WlNBOUlISmxjWFZwY21Vb0p5NHZYMlJ2YlMxamNtVmhkR1VuS1NnbmFXWnlZVzFsSnlrN1hHNGdJSFpoY2lCcElEMGdaVzUxYlVKMVowdGxlWE11YkdWdVozUm9PMXh1SUNCMllYSWdiSFFnUFNBblBDYzdYRzRnSUhaaGNpQm5kQ0E5SUNjK0p6dGNiaUFnZG1GeUlHbG1jbUZ0WlVSdlkzVnRaVzUwTzF4dUlDQnBabkpoYldVdWMzUjViR1V1WkdsemNHeGhlU0E5SUNkdWIyNWxKenRjYmlBZ2NtVnhkV2x5WlNnbkxpOWZhSFJ0YkNjcExtRndjR1Z1WkVOb2FXeGtLR2xtY21GdFpTazdYRzRnSUdsbWNtRnRaUzV6Y21NZ1BTQW5hbUYyWVhOamNtbHdkRG9uT3lBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxc2FXNWxJRzV2TFhOamNtbHdkQzExY214Y2JpQWdMeThnWTNKbFlYUmxSR2xqZENBOUlHbG1jbUZ0WlM1amIyNTBaVzUwVjJsdVpHOTNMazlpYW1WamREdGNiaUFnTHk4Z2FIUnRiQzV5WlcxdmRtVkRhR2xzWkNocFpuSmhiV1VwTzF4dUlDQnBabkpoYldWRWIyTjFiV1Z1ZENBOUlHbG1jbUZ0WlM1amIyNTBaVzUwVjJsdVpHOTNMbVJ2WTNWdFpXNTBPMXh1SUNCcFpuSmhiV1ZFYjJOMWJXVnVkQzV2Y0dWdUtDazdYRzRnSUdsbWNtRnRaVVJ2WTNWdFpXNTBMbmR5YVhSbEtHeDBJQ3NnSjNOamNtbHdkQ2NnS3lCbmRDQXJJQ2RrYjJOMWJXVnVkQzVHUFU5aWFtVmpkQ2NnS3lCc2RDQXJJQ2N2YzJOeWFYQjBKeUFySUdkMEtUdGNiaUFnYVdaeVlXMWxSRzlqZFcxbGJuUXVZMnh2YzJVb0tUdGNiaUFnWTNKbFlYUmxSR2xqZENBOUlHbG1jbUZ0WlVSdlkzVnRaVzUwTGtZN1hHNGdJSGRvYVd4bElDaHBMUzBwSUdSbGJHVjBaU0JqY21WaGRHVkVhV04wVzFCU1QxUlBWRmxRUlYxYlpXNTFiVUoxWjB0bGVYTmJhVjFkTzF4dUlDQnlaWFIxY200Z1kzSmxZWFJsUkdsamRDZ3BPMXh1ZlR0Y2JseHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQlBZbXBsWTNRdVkzSmxZWFJsSUh4OElHWjFibU4wYVc5dUlHTnlaV0YwWlNoUExDQlFjbTl3WlhKMGFXVnpLU0I3WEc0Z0lIWmhjaUJ5WlhOMWJIUTdYRzRnSUdsbUlDaFBJQ0U5UFNCdWRXeHNLU0I3WEc0Z0lDQWdSVzF3ZEhsYlVGSlBWRTlVV1ZCRlhTQTlJR0Z1VDJKcVpXTjBLRThwTzF4dUlDQWdJSEpsYzNWc2RDQTlJRzVsZHlCRmJYQjBlU2dwTzF4dUlDQWdJRVZ0Y0hSNVcxQlNUMVJQVkZsUVJWMGdQU0J1ZFd4c08xeHVJQ0FnSUM4dklHRmtaQ0JjSWw5ZmNISnZkRzlmWDF3aUlHWnZjaUJQWW1wbFkzUXVaMlYwVUhKdmRHOTBlWEJsVDJZZ2NHOXNlV1pwYkd4Y2JpQWdJQ0J5WlhOMWJIUmJTVVZmVUZKUFZFOWRJRDBnVHp0Y2JpQWdmU0JsYkhObElISmxjM1ZzZENBOUlHTnlaV0YwWlVScFkzUW9LVHRjYmlBZ2NtVjBkWEp1SUZCeWIzQmxjblJwWlhNZ1BUMDlJSFZ1WkdWbWFXNWxaQ0EvSUhKbGMzVnNkQ0E2SUdSUWN5aHlaWE4xYkhRc0lGQnliM0JsY25ScFpYTXBPMXh1ZlR0Y2JpSXNJblpoY2lCa1pXWWdQU0J5WlhGMWFYSmxLQ2N1TDE5dlltcGxZM1F0WkhBbktTNW1PMXh1ZG1GeUlHaGhjeUE5SUhKbGNYVnBjbVVvSnk0dlgyaGhjeWNwTzF4dWRtRnlJRlJCUnlBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZDBiMU4wY21sdVoxUmhaeWNwTzF4dVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlDaHBkQ3dnZEdGbkxDQnpkR0YwS1NCN1hHNGdJR2xtSUNocGRDQW1KaUFoYUdGektHbDBJRDBnYzNSaGRDQS9JR2wwSURvZ2FYUXVjSEp2ZEc5MGVYQmxMQ0JVUVVjcEtTQmtaV1lvYVhRc0lGUkJSeXdnZXlCamIyNW1hV2QxY21GaWJHVTZJSFJ5ZFdVc0lIWmhiSFZsT2lCMFlXY2dmU2s3WEc1OU8xeHVJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVkbUZ5SUdOeVpXRjBaU0E5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxamNtVmhkR1VuS1R0Y2JuWmhjaUJrWlhOamNtbHdkRzl5SUQwZ2NtVnhkV2x5WlNnbkxpOWZjSEp2Y0dWeWRIa3RaR1Z6WXljcE8xeHVkbUZ5SUhObGRGUnZVM1J5YVc1blZHRm5JRDBnY21WeGRXbHlaU2duTGk5ZmMyVjBMWFJ2TFhOMGNtbHVaeTEwWVdjbktUdGNiblpoY2lCSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNBOUlIdDlPMXh1WEc0dkx5QXlOUzR4TGpJdU1TNHhJQ1ZKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU1ZiUUVCcGRHVnlZWFJ2Y2wwb0tWeHVjbVZ4ZFdseVpTZ25MaTlmYUdsa1pTY3BLRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxMQ0J5WlhGMWFYSmxLQ2N1TDE5M2EzTW5LU2duYVhSbGNtRjBiM0luS1N3Z1puVnVZM1JwYjI0Z0tDa2dleUJ5WlhSMWNtNGdkR2hwY3pzZ2ZTazdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0VOdmJuTjBjblZqZEc5eUxDQk9RVTFGTENCdVpYaDBLU0I3WEc0Z0lFTnZibk4wY25WamRHOXlMbkJ5YjNSdmRIbHdaU0E5SUdOeVpXRjBaU2hKZEdWeVlYUnZjbEJ5YjNSdmRIbHdaU3dnZXlCdVpYaDBPaUJrWlhOamNtbHdkRzl5S0RFc0lHNWxlSFFwSUgwcE8xeHVJQ0J6WlhSVWIxTjBjbWx1WjFSaFp5aERiMjV6ZEhKMVkzUnZjaXdnVGtGTlJTQXJJQ2NnU1hSbGNtRjBiM0luS1R0Y2JuMDdYRzRpTENJdkx5QXhPUzR4TGpJdU9TQXZJREUxTGpJdU15NHlJRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmloUEtWeHVkbUZ5SUdoaGN5QTlJSEpsY1hWcGNtVW9KeTR2WDJoaGN5Y3BPMXh1ZG1GeUlIUnZUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGIySnFaV04wSnlrN1hHNTJZWElnU1VWZlVGSlBWRThnUFNCeVpYRjFhWEpsS0NjdUwxOXphR0Z5WldRdGEyVjVKeWtvSjBsRlgxQlNUMVJQSnlrN1hHNTJZWElnVDJKcVpXTjBVSEp2ZEc4Z1BTQlBZbXBsWTNRdWNISnZkRzkwZVhCbE8xeHVYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRTlpYW1WamRDNW5aWFJRY205MGIzUjVjR1ZQWmlCOGZDQm1kVzVqZEdsdmJpQW9UeWtnZTF4dUlDQlBJRDBnZEc5UFltcGxZM1FvVHlrN1hHNGdJR2xtSUNob1lYTW9UeXdnU1VWZlVGSlBWRThwS1NCeVpYUjFjbTRnVDF0SlJWOVFVazlVVDEwN1hHNGdJR2xtSUNoMGVYQmxiMllnVHk1amIyNXpkSEoxWTNSdmNpQTlQU0FuWm5WdVkzUnBiMjRuSUNZbUlFOGdhVzV6ZEdGdVkyVnZaaUJQTG1OdmJuTjBjblZqZEc5eUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUU4dVkyOXVjM1J5ZFdOMGIzSXVjSEp2ZEc5MGVYQmxPMXh1SUNCOUlISmxkSFZ5YmlCUElHbHVjM1JoYm1ObGIyWWdUMkpxWldOMElEOGdUMkpxWldOMFVISnZkRzhnT2lCdWRXeHNPMXh1ZlR0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJNU1VKU1FWSlpJRDBnY21WeGRXbHlaU2duTGk5ZmJHbGljbUZ5ZVNjcE8xeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNiblpoY2lCeVpXUmxabWx1WlNBOUlISmxjWFZwY21Vb0p5NHZYM0psWkdWbWFXNWxKeWs3WEc1MllYSWdhR2xrWlNBOUlISmxjWFZwY21Vb0p5NHZYMmhwWkdVbktUdGNiblpoY2lCb1lYTWdQU0J5WlhGMWFYSmxLQ2N1TDE5b1lYTW5LVHRjYm5aaGNpQkpkR1Z5WVhSdmNuTWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGRHVnlZWFJ2Y25NbktUdGNiblpoY2lBa2FYUmxja055WldGMFpTQTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSXRZM0psWVhSbEp5azdYRzUyWVhJZ2MyVjBWRzlUZEhKcGJtZFVZV2NnUFNCeVpYRjFhWEpsS0NjdUwxOXpaWFF0ZEc4dGMzUnlhVzVuTFhSaFp5Y3BPMXh1ZG1GeUlHZGxkRkJ5YjNSdmRIbHdaVTltSUQwZ2NtVnhkV2x5WlNnbkxpOWZiMkpxWldOMExXZHdieWNwTzF4dWRtRnlJRWxVUlZKQlZFOVNJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjJsMFpYSmhkRzl5SnlrN1hHNTJZWElnUWxWSFIxa2dQU0FoS0Z0ZExtdGxlWE1nSmlZZ0oyNWxlSFFuSUdsdUlGdGRMbXRsZVhNb0tTazdJQzh2SUZOaFptRnlhU0JvWVhNZ1luVm5aM2tnYVhSbGNtRjBiM0p6SUhjdmJ5QmdibVY0ZEdCY2JuWmhjaUJHUmw5SlZFVlNRVlJQVWlBOUlDZEFRR2wwWlhKaGRHOXlKenRjYm5aaGNpQkxSVmxUSUQwZ0oydGxlWE1uTzF4dWRtRnlJRlpCVEZWRlV5QTlJQ2QyWVd4MVpYTW5PMXh1WEc1MllYSWdjbVYwZFhKdVZHaHBjeUE5SUdaMWJtTjBhVzl1SUNncElIc2djbVYwZFhKdUlIUm9hWE03SUgwN1hHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdLRUpoYzJVc0lFNUJUVVVzSUVOdmJuTjBjblZqZEc5eUxDQnVaWGgwTENCRVJVWkJWVXhVTENCSlUxOVRSVlFzSUVaUFVrTkZSQ2tnZTF4dUlDQWthWFJsY2tOeVpXRjBaU2hEYjI1emRISjFZM1J2Y2l3Z1RrRk5SU3dnYm1WNGRDazdYRzRnSUhaaGNpQm5aWFJOWlhSb2IyUWdQU0JtZFc1amRHbHZiaUFvYTJsdVpDa2dlMXh1SUNBZ0lHbG1JQ2doUWxWSFIxa2dKaVlnYTJsdVpDQnBiaUJ3Y205MGJ5a2djbVYwZFhKdUlIQnliM1J2VzJ0cGJtUmRPMXh1SUNBZ0lITjNhWFJqYUNBb2EybHVaQ2tnZTF4dUlDQWdJQ0FnWTJGelpTQkxSVmxUT2lCeVpYUjFjbTRnWm5WdVkzUnBiMjRnYTJWNWN5Z3BJSHNnY21WMGRYSnVJRzVsZHlCRGIyNXpkSEoxWTNSdmNpaDBhR2x6TENCcmFXNWtLVHNnZlR0Y2JpQWdJQ0FnSUdOaGMyVWdWa0ZNVlVWVE9pQnlaWFIxY200Z1puVnVZM1JwYjI0Z2RtRnNkV1Z6S0NrZ2V5QnlaWFIxY200Z2JtVjNJRU52Ym5OMGNuVmpkRzl5S0hSb2FYTXNJR3RwYm1RcE95QjlPMXh1SUNBZ0lIMGdjbVYwZFhKdUlHWjFibU4wYVc5dUlHVnVkSEpwWlhNb0tTQjdJSEpsZEhWeWJpQnVaWGNnUTI5dWMzUnlkV04wYjNJb2RHaHBjeXdnYTJsdVpDazdJSDA3WEc0Z0lIMDdYRzRnSUhaaGNpQlVRVWNnUFNCT1FVMUZJQ3NnSnlCSmRHVnlZWFJ2Y2ljN1hHNGdJSFpoY2lCRVJVWmZWa0ZNVlVWVElEMGdSRVZHUVZWTVZDQTlQU0JXUVV4VlJWTTdYRzRnSUhaaGNpQldRVXhWUlZOZlFsVkhJRDBnWm1Gc2MyVTdYRzRnSUhaaGNpQndjbTkwYnlBOUlFSmhjMlV1Y0hKdmRHOTBlWEJsTzF4dUlDQjJZWElnSkc1aGRHbDJaU0E5SUhCeWIzUnZXMGxVUlZKQlZFOVNYU0I4ZkNCd2NtOTBiMXRHUmw5SlZFVlNRVlJQVWwwZ2ZId2dSRVZHUVZWTVZDQW1KaUJ3Y205MGIxdEVSVVpCVlV4VVhUdGNiaUFnZG1GeUlDUmtaV1poZFd4MElEMGdKRzVoZEdsMlpTQjhmQ0JuWlhSTlpYUm9iMlFvUkVWR1FWVk1WQ2s3WEc0Z0lIWmhjaUFrWlc1MGNtbGxjeUE5SUVSRlJrRlZURlFnUHlBaFJFVkdYMVpCVEZWRlV5QS9JQ1JrWldaaGRXeDBJRG9nWjJWMFRXVjBhRzlrS0NkbGJuUnlhV1Z6SnlrZ09pQjFibVJsWm1sdVpXUTdYRzRnSUhaaGNpQWtZVzU1VG1GMGFYWmxJRDBnVGtGTlJTQTlQU0FuUVhKeVlYa25JRDhnY0hKdmRHOHVaVzUwY21sbGN5QjhmQ0FrYm1GMGFYWmxJRG9nSkc1aGRHbDJaVHRjYmlBZ2RtRnlJRzFsZEdodlpITXNJR3RsZVN3Z1NYUmxjbUYwYjNKUWNtOTBiM1I1Y0dVN1hHNGdJQzh2SUVacGVDQnVZWFJwZG1WY2JpQWdhV1lnS0NSaGJubE9ZWFJwZG1VcElIdGNiaUFnSUNCSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNBOUlHZGxkRkJ5YjNSdmRIbHdaVTltS0NSaGJubE9ZWFJwZG1VdVkyRnNiQ2h1WlhjZ1FtRnpaU2dwS1NrN1hHNGdJQ0FnYVdZZ0tFbDBaWEpoZEc5eVVISnZkRzkwZVhCbElDRTlQU0JQWW1wbFkzUXVjSEp2ZEc5MGVYQmxJQ1ltSUVsMFpYSmhkRzl5VUhKdmRHOTBlWEJsTG01bGVIUXBJSHRjYmlBZ0lDQWdJQzh2SUZObGRDQkFRSFJ2VTNSeWFXNW5WR0ZuSUhSdklHNWhkR2wyWlNCcGRHVnlZWFJ2Y25OY2JpQWdJQ0FnSUhObGRGUnZVM1J5YVc1blZHRm5LRWwwWlhKaGRHOXlVSEp2ZEc5MGVYQmxMQ0JVUVVjc0lIUnlkV1VwTzF4dUlDQWdJQ0FnTHk4Z1ptbDRJR1p2Y2lCemIyMWxJRzlzWkNCbGJtZHBibVZ6WEc0Z0lDQWdJQ0JwWmlBb0lVeEpRbEpCVWxrZ0ppWWdJV2hoY3loSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlN3Z1NWUkZVa0ZVVDFJcEtTQm9hV1JsS0VsMFpYSmhkRzl5VUhKdmRHOTBlWEJsTENCSlZFVlNRVlJQVWl3Z2NtVjBkWEp1VkdocGN5azdYRzRnSUNBZ2ZWeHVJQ0I5WEc0Z0lDOHZJR1pwZUNCQmNuSmhlU043ZG1Gc2RXVnpMQ0JBUUdsMFpYSmhkRzl5ZlM1dVlXMWxJR2x1SUZZNElDOGdSa1pjYmlBZ2FXWWdLRVJGUmw5V1FVeFZSVk1nSmlZZ0pHNWhkR2wyWlNBbUppQWtibUYwYVhabExtNWhiV1VnSVQwOUlGWkJURlZGVXlrZ2UxeHVJQ0FnSUZaQlRGVkZVMTlDVlVjZ1BTQjBjblZsTzF4dUlDQWdJQ1JrWldaaGRXeDBJRDBnWm5WdVkzUnBiMjRnZG1Gc2RXVnpLQ2tnZXlCeVpYUjFjbTRnSkc1aGRHbDJaUzVqWVd4c0tIUm9hWE1wT3lCOU8xeHVJQ0I5WEc0Z0lDOHZJRVJsWm1sdVpTQnBkR1Z5WVhSdmNseHVJQ0JwWmlBb0tDRk1TVUpTUVZKWklIeDhJRVpQVWtORlJDa2dKaVlnS0VKVlIwZFpJSHg4SUZaQlRGVkZVMTlDVlVjZ2ZId2dJWEJ5YjNSdlcwbFVSVkpCVkU5U1hTa3BJSHRjYmlBZ0lDQm9hV1JsS0hCeWIzUnZMQ0JKVkVWU1FWUlBVaXdnSkdSbFptRjFiSFFwTzF4dUlDQjlYRzRnSUM4dklGQnNkV2NnWm05eUlHeHBZbkpoY25sY2JpQWdTWFJsY21GMGIzSnpXMDVCVFVWZElEMGdKR1JsWm1GMWJIUTdYRzRnSUVsMFpYSmhkRzl5YzF0VVFVZGRJRDBnY21WMGRYSnVWR2hwY3p0Y2JpQWdhV1lnS0VSRlJrRlZURlFwSUh0Y2JpQWdJQ0J0WlhSb2IyUnpJRDBnZTF4dUlDQWdJQ0FnZG1Gc2RXVnpPaUJFUlVaZlZrRk1WVVZUSUQ4Z0pHUmxabUYxYkhRZ09pQm5aWFJOWlhSb2IyUW9Wa0ZNVlVWVEtTeGNiaUFnSUNBZ0lHdGxlWE02SUVsVFgxTkZWQ0EvSUNSa1pXWmhkV3gwSURvZ1oyVjBUV1YwYUc5a0tFdEZXVk1wTEZ4dUlDQWdJQ0FnWlc1MGNtbGxjem9nSkdWdWRISnBaWE5jYmlBZ0lDQjlPMXh1SUNBZ0lHbG1JQ2hHVDFKRFJVUXBJR1p2Y2lBb2EyVjVJR2x1SUcxbGRHaHZaSE1wSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hLR3RsZVNCcGJpQndjbTkwYnlrcElISmxaR1ZtYVc1bEtIQnliM1J2TENCclpYa3NJRzFsZEdodlpITmJhMlY1WFNrN1hHNGdJQ0FnZlNCbGJITmxJQ1JsZUhCdmNuUW9KR1Y0Y0c5eWRDNVFJQ3NnSkdWNGNHOXlkQzVHSUNvZ0tFSlZSMGRaSUh4OElGWkJURlZGVTE5Q1ZVY3BMQ0JPUVUxRkxDQnRaWFJvYjJSektUdGNiaUFnZlZ4dUlDQnlaWFIxY200Z2JXVjBhRzlrY3p0Y2JuMDdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ0pHRjBJRDBnY21WeGRXbHlaU2duTGk5ZmMzUnlhVzVuTFdGMEp5a29kSEoxWlNrN1hHNWNiaTh2SURJeExqRXVNeTR5TnlCVGRISnBibWN1Y0hKdmRHOTBlWEJsVzBCQWFYUmxjbUYwYjNKZEtDbGNibkpsY1hWcGNtVW9KeTR2WDJsMFpYSXRaR1ZtYVc1bEp5a29VM1J5YVc1bkxDQW5VM1J5YVc1bkp5d2dablZ1WTNScGIyNGdLR2wwWlhKaGRHVmtLU0I3WEc0Z0lIUm9hWE11WDNRZ1BTQlRkSEpwYm1jb2FYUmxjbUYwWldRcE95QXZMeUIwWVhKblpYUmNiaUFnZEdocGN5NWZhU0E5SURBN0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHNWxlSFFnYVc1a1pYaGNiaTh2SURJeExqRXVOUzR5TGpFZ0pWTjBjbWx1WjBsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSlM1dVpYaDBLQ2xjYm4wc0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ2RtRnlJRThnUFNCMGFHbHpMbDkwTzF4dUlDQjJZWElnYVc1a1pYZ2dQU0IwYUdsekxsOXBPMXh1SUNCMllYSWdjRzlwYm5RN1hHNGdJR2xtSUNocGJtUmxlQ0ErUFNCUExteGxibWQwYUNrZ2NtVjBkWEp1SUhzZ2RtRnNkV1U2SUhWdVpHVm1hVzVsWkN3Z1pHOXVaVG9nZEhKMVpTQjlPMXh1SUNCd2IybHVkQ0E5SUNSaGRDaFBMQ0JwYm1SbGVDazdYRzRnSUhSb2FYTXVYMmtnS3owZ2NHOXBiblF1YkdWdVozUm9PMXh1SUNCeVpYUjFjbTRnZXlCMllXeDFaVG9nY0c5cGJuUXNJR1J2Ym1VNklHWmhiSE5sSUgwN1hHNTlLVHRjYmlJc0lpOHZJREl5TGpFdU15NHpNU0JCY25KaGVTNXdjbTkwYjNSNWNHVmJRRUIxYm5OamIzQmhZbXhsYzExY2JuWmhjaUJWVGxORFQxQkJRa3hGVXlBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZDFibk5qYjNCaFlteGxjeWNwTzF4dWRtRnlJRUZ5Y21GNVVISnZkRzhnUFNCQmNuSmhlUzV3Y205MGIzUjVjR1U3WEc1cFppQW9RWEp5WVhsUWNtOTBiMXRWVGxORFQxQkJRa3hGVTEwZ1BUMGdkVzVrWldacGJtVmtLU0J5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWtvUVhKeVlYbFFjbTkwYnl3Z1ZVNVRRMDlRUVVKTVJWTXNJSHQ5S1R0Y2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1puVnVZM1JwYjI0Z0tHdGxlU2tnZTF4dUlDQkJjbkpoZVZCeWIzUnZXMVZPVTBOUFVFRkNURVZUWFZ0clpYbGRJRDBnZEhKMVpUdGNibjA3WEc0aUxDSnRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlDaGtiMjVsTENCMllXeDFaU2tnZTF4dUlDQnlaWFIxY200Z2V5QjJZV3gxWlRvZ2RtRnNkV1VzSUdSdmJtVTZJQ0VoWkc5dVpTQjlPMXh1ZlR0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JuWmhjaUJoWkdSVWIxVnVjMk52Y0dGaWJHVnpJRDBnY21WeGRXbHlaU2duTGk5ZllXUmtMWFJ2TFhWdWMyTnZjR0ZpYkdWekp5azdYRzUyWVhJZ2MzUmxjQ0E5SUhKbGNYVnBjbVVvSnk0dlgybDBaWEl0YzNSbGNDY3BPMXh1ZG1GeUlFbDBaWEpoZEc5eWN5QTlJSEpsY1hWcGNtVW9KeTR2WDJsMFpYSmhkRzl5Y3ljcE8xeHVkbUZ5SUhSdlNVOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYM1J2TFdsdlltcGxZM1FuS1R0Y2JseHVMeThnTWpJdU1TNHpMalFnUVhKeVlYa3VjSEp2ZEc5MGVYQmxMbVZ1ZEhKcFpYTW9LVnh1THk4Z01qSXVNUzR6TGpFeklFRnljbUY1TG5CeWIzUnZkSGx3WlM1clpYbHpLQ2xjYmk4dklESXlMakV1TXk0eU9TQkJjbkpoZVM1d2NtOTBiM1I1Y0dVdWRtRnNkV1Z6S0NsY2JpOHZJREl5TGpFdU15NHpNQ0JCY25KaGVTNXdjbTkwYjNSNWNHVmJRRUJwZEdWeVlYUnZjbDBvS1Z4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdSbFptbHVaU2NwS0VGeWNtRjVMQ0FuUVhKeVlYa25MQ0JtZFc1amRHbHZiaUFvYVhSbGNtRjBaV1FzSUd0cGJtUXBJSHRjYmlBZ2RHaHBjeTVmZENBOUlIUnZTVTlpYW1WamRDaHBkR1Z5WVhSbFpDazdJQzh2SUhSaGNtZGxkRnh1SUNCMGFHbHpMbDlwSUQwZ01Ec2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnYm1WNGRDQnBibVJsZUZ4dUlDQjBhR2x6TGw5cklEMGdhMmx1WkRzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z2EybHVaRnh1THk4Z01qSXVNUzQxTGpJdU1TQWxRWEp5WVhsSmRHVnlZWFJ2Y2xCeWIzUnZkSGx3WlNVdWJtVjRkQ2dwWEc1OUxDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lIWmhjaUJQSUQwZ2RHaHBjeTVmZER0Y2JpQWdkbUZ5SUd0cGJtUWdQU0IwYUdsekxsOXJPMXh1SUNCMllYSWdhVzVrWlhnZ1BTQjBhR2x6TGw5cEt5czdYRzRnSUdsbUlDZ2hUeUI4ZkNCcGJtUmxlQ0ErUFNCUExteGxibWQwYUNrZ2UxeHVJQ0FnSUhSb2FYTXVYM1FnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnY21WMGRYSnVJSE4wWlhBb01TazdYRzRnSUgxY2JpQWdhV1lnS0d0cGJtUWdQVDBnSjJ0bGVYTW5LU0J5WlhSMWNtNGdjM1JsY0Nnd0xDQnBibVJsZUNrN1hHNGdJR2xtSUNocmFXNWtJRDA5SUNkMllXeDFaWE1uS1NCeVpYUjFjbTRnYzNSbGNDZ3dMQ0JQVzJsdVpHVjRYU2s3WEc0Z0lISmxkSFZ5YmlCemRHVndLREFzSUZ0cGJtUmxlQ3dnVDF0cGJtUmxlRjFkS1R0Y2JuMHNJQ2QyWVd4MVpYTW5LVHRjYmx4dUx5OGdZWEpuZFcxbGJuUnpUR2x6ZEZ0QVFHbDBaWEpoZEc5eVhTQnBjeUFsUVhKeVlYbFFjbTkwYjE5MllXeDFaWE1sSUNnNUxqUXVOQzQyTENBNUxqUXVOQzQzS1Z4dVNYUmxjbUYwYjNKekxrRnlaM1Z0Wlc1MGN5QTlJRWwwWlhKaGRHOXljeTVCY25KaGVUdGNibHh1WVdSa1ZHOVZibk5qYjNCaFlteGxjeWduYTJWNWN5Y3BPMXh1WVdSa1ZHOVZibk5qYjNCaFlteGxjeWduZG1Gc2RXVnpKeWs3WEc1aFpHUlViMVZ1YzJOdmNHRmliR1Z6S0NkbGJuUnlhV1Z6SnlrN1hHNGlMQ0oyWVhJZ0pHbDBaWEpoZEc5eWN5QTlJSEpsY1hWcGNtVW9KeTR2WlhNMkxtRnljbUY1TG1sMFpYSmhkRzl5SnlrN1hHNTJZWElnWjJWMFMyVjVjeUE5SUhKbGNYVnBjbVVvSnk0dlgyOWlhbVZqZEMxclpYbHpKeWs3WEc1MllYSWdjbVZrWldacGJtVWdQU0J5WlhGMWFYSmxLQ2N1TDE5eVpXUmxabWx1WlNjcE8xeHVkbUZ5SUdkc2IySmhiQ0E5SUhKbGNYVnBjbVVvSnk0dlgyZHNiMkpoYkNjcE8xeHVkbUZ5SUdocFpHVWdQU0J5WlhGMWFYSmxLQ2N1TDE5b2FXUmxKeWs3WEc1MllYSWdTWFJsY21GMGIzSnpJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjbUYwYjNKekp5azdYRzUyWVhJZ2QydHpJRDBnY21WeGRXbHlaU2duTGk5ZmQydHpKeWs3WEc1MllYSWdTVlJGVWtGVVQxSWdQU0IzYTNNb0oybDBaWEpoZEc5eUp5azdYRzUyWVhJZ1ZFOWZVMVJTU1U1SFgxUkJSeUE5SUhkcmN5Z25kRzlUZEhKcGJtZFVZV2NuS1R0Y2JuWmhjaUJCY25KaGVWWmhiSFZsY3lBOUlFbDBaWEpoZEc5eWN5NUJjbkpoZVR0Y2JseHVkbUZ5SUVSUFRVbDBaWEpoWW14bGN5QTlJSHRjYmlBZ1ExTlRVblZzWlV4cGMzUTZJSFJ5ZFdVc0lDOHZJRlJQUkU4NklFNXZkQ0J6Y0dWaklHTnZiWEJzYVdGdWRDd2djMmh2ZFd4a0lHSmxJR1poYkhObExseHVJQ0JEVTFOVGRIbHNaVVJsWTJ4aGNtRjBhVzl1T2lCbVlXeHpaU3hjYmlBZ1ExTlRWbUZzZFdWTWFYTjBPaUJtWVd4elpTeGNiaUFnUTJ4cFpXNTBVbVZqZEV4cGMzUTZJR1poYkhObExGeHVJQ0JFVDAxU1pXTjBUR2x6ZERvZ1ptRnNjMlVzWEc0Z0lFUlBUVk4wY21sdVoweHBjM1E2SUdaaGJITmxMRnh1SUNCRVQwMVViMnRsYmt4cGMzUTZJSFJ5ZFdVc1hHNGdJRVJoZEdGVWNtRnVjMlpsY2tsMFpXMU1hWE4wT2lCbVlXeHpaU3hjYmlBZ1JtbHNaVXhwYzNRNklHWmhiSE5sTEZ4dUlDQklWRTFNUVd4c1EyOXNiR1ZqZEdsdmJqb2dabUZzYzJVc1hHNGdJRWhVVFV4RGIyeHNaV04wYVc5dU9pQm1ZV3h6WlN4Y2JpQWdTRlJOVEVadmNtMUZiR1Z0Wlc1ME9pQm1ZV3h6WlN4Y2JpQWdTRlJOVEZObGJHVmpkRVZzWlcxbGJuUTZJR1poYkhObExGeHVJQ0JOWldScFlVeHBjM1E2SUhSeWRXVXNJQzh2SUZSUFJFODZJRTV2ZENCemNHVmpJR052YlhCc2FXRnVkQ3dnYzJodmRXeGtJR0psSUdaaGJITmxMbHh1SUNCTmFXMWxWSGx3WlVGeWNtRjVPaUJtWVd4elpTeGNiaUFnVG1GdFpXUk9iMlJsVFdGd09pQm1ZV3h6WlN4Y2JpQWdUbTlrWlV4cGMzUTZJSFJ5ZFdVc1hHNGdJRkJoYVc1MFVtVnhkV1Z6ZEV4cGMzUTZJR1poYkhObExGeHVJQ0JRYkhWbmFXNDZJR1poYkhObExGeHVJQ0JRYkhWbmFXNUJjbkpoZVRvZ1ptRnNjMlVzWEc0Z0lGTldSMHhsYm1kMGFFeHBjM1E2SUdaaGJITmxMRnh1SUNCVFZrZE9kVzFpWlhKTWFYTjBPaUJtWVd4elpTeGNiaUFnVTFaSFVHRjBhRk5sWjB4cGMzUTZJR1poYkhObExGeHVJQ0JUVmtkUWIybHVkRXhwYzNRNklHWmhiSE5sTEZ4dUlDQlRWa2RUZEhKcGJtZE1hWE4wT2lCbVlXeHpaU3hjYmlBZ1UxWkhWSEpoYm5ObWIzSnRUR2x6ZERvZ1ptRnNjMlVzWEc0Z0lGTnZkWEpqWlVKMVptWmxja3hwYzNRNklHWmhiSE5sTEZ4dUlDQlRkSGxzWlZOb1pXVjBUR2x6ZERvZ2RISjFaU3dnTHk4Z1ZFOUVUem9nVG05MElITndaV01nWTI5dGNHeHBZVzUwTENCemFHOTFiR1FnWW1VZ1ptRnNjMlV1WEc0Z0lGUmxlSFJVY21GamEwTjFaVXhwYzNRNklHWmhiSE5sTEZ4dUlDQlVaWGgwVkhKaFkydE1hWE4wT2lCbVlXeHpaU3hjYmlBZ1ZHOTFZMmhNYVhOME9pQm1ZV3h6WlZ4dWZUdGNibHh1Wm05eUlDaDJZWElnWTI5c2JHVmpkR2x2Ym5NZ1BTQm5aWFJMWlhsektFUlBUVWwwWlhKaFlteGxjeWtzSUdrZ1BTQXdPeUJwSUR3Z1kyOXNiR1ZqZEdsdmJuTXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdkbUZ5SUU1QlRVVWdQU0JqYjJ4c1pXTjBhVzl1YzF0cFhUdGNiaUFnZG1GeUlHVjRjR3hwWTJsMElEMGdSRTlOU1hSbGNtRmliR1Z6VzA1QlRVVmRPMXh1SUNCMllYSWdRMjlzYkdWamRHbHZiaUE5SUdkc2IySmhiRnRPUVUxRlhUdGNiaUFnZG1GeUlIQnliM1J2SUQwZ1EyOXNiR1ZqZEdsdmJpQW1KaUJEYjJ4c1pXTjBhVzl1TG5CeWIzUnZkSGx3WlR0Y2JpQWdkbUZ5SUd0bGVUdGNiaUFnYVdZZ0tIQnliM1J2S1NCN1hHNGdJQ0FnYVdZZ0tDRndjbTkwYjF0SlZFVlNRVlJQVWwwcElHaHBaR1VvY0hKdmRHOHNJRWxVUlZKQlZFOVNMQ0JCY25KaGVWWmhiSFZsY3lrN1hHNGdJQ0FnYVdZZ0tDRndjbTkwYjF0VVQxOVRWRkpKVGtkZlZFRkhYU2tnYUdsa1pTaHdjbTkwYnl3Z1ZFOWZVMVJTU1U1SFgxUkJSeXdnVGtGTlJTazdYRzRnSUNBZ1NYUmxjbUYwYjNKelcwNUJUVVZkSUQwZ1FYSnlZWGxXWVd4MVpYTTdYRzRnSUNBZ2FXWWdLR1Y0Y0d4cFkybDBLU0JtYjNJZ0tHdGxlU0JwYmlBa2FYUmxjbUYwYjNKektTQnBaaUFvSVhCeWIzUnZXMnRsZVYwcElISmxaR1ZtYVc1bEtIQnliM1J2TENCclpYa3NJQ1JwZEdWeVlYUnZjbk5iYTJWNVhTd2dkSEoxWlNrN1hHNGdJSDFjYm4xY2JpSXNJbTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdablZ1WTNScGIyNGdLR2wwTENCRGIyNXpkSEoxWTNSdmNpd2dibUZ0WlN3Z1ptOXlZbWxrWkdWdVJtbGxiR1FwSUh0Y2JpQWdhV1lnS0NFb2FYUWdhVzV6ZEdGdVkyVnZaaUJEYjI1emRISjFZM1J2Y2lrZ2ZId2dLR1p2Y21KcFpHUmxia1pwWld4a0lDRTlQU0IxYm1SbFptbHVaV1FnSmlZZ1ptOXlZbWxrWkdWdVJtbGxiR1FnYVc0Z2FYUXBLU0I3WEc0Z0lDQWdkR2h5YjNjZ1ZIbHdaVVZ5Y205eUtHNWhiV1VnS3lBbk9pQnBibU52Y25KbFkzUWdhVzUyYjJOaGRHbHZiaUVuS1R0Y2JpQWdmU0J5WlhSMWNtNGdhWFE3WEc1OU8xeHVJaXdpTHk4Z1kyRnNiQ0J6YjIxbGRHaHBibWNnYjI0Z2FYUmxjbUYwYjNJZ2MzUmxjQ0IzYVhSb0lITmhabVVnWTJ4dmMybHVaeUJ2YmlCbGNuSnZjbHh1ZG1GeUlHRnVUMkpxWldOMElEMGdjbVZ4ZFdseVpTZ25MaTlmWVc0dGIySnFaV04wSnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHWjFibU4wYVc5dUlDaHBkR1Z5WVhSdmNpd2dabTRzSUhaaGJIVmxMQ0JsYm5SeWFXVnpLU0I3WEc0Z0lIUnllU0I3WEc0Z0lDQWdjbVYwZFhKdUlHVnVkSEpwWlhNZ1B5Qm1iaWhoYms5aWFtVmpkQ2gyWVd4MVpTbGJNRjBzSUhaaGJIVmxXekZkS1NBNklHWnVLSFpoYkhWbEtUdGNiaUFnTHk4Z055NDBMallnU1hSbGNtRjBiM0pEYkc5elpTaHBkR1Z5WVhSdmNpd2dZMjl0Y0d4bGRHbHZiaWxjYmlBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lIWmhjaUJ5WlhRZ1BTQnBkR1Z5WVhSdmNsc25jbVYwZFhKdUoxMDdYRzRnSUNBZ2FXWWdLSEpsZENBaFBUMGdkVzVrWldacGJtVmtLU0JoYms5aWFtVmpkQ2h5WlhRdVkyRnNiQ2hwZEdWeVlYUnZjaWtwTzF4dUlDQWdJSFJvY205M0lHVTdYRzRnSUgxY2JuMDdYRzRpTENJdkx5QmphR1ZqYXlCdmJpQmtaV1poZFd4MElFRnljbUY1SUdsMFpYSmhkRzl5WEc1MllYSWdTWFJsY21GMGIzSnpJRDBnY21WeGRXbHlaU2duTGk5ZmFYUmxjbUYwYjNKekp5azdYRzUyWVhJZ1NWUkZVa0ZVVDFJZ1BTQnlaWEYxYVhKbEtDY3VMMTkzYTNNbktTZ25hWFJsY21GMGIzSW5LVHRjYm5aaGNpQkJjbkpoZVZCeWIzUnZJRDBnUVhKeVlYa3VjSEp2ZEc5MGVYQmxPMXh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNocGRDa2dlMXh1SUNCeVpYUjFjbTRnYVhRZ0lUMDlJSFZ1WkdWbWFXNWxaQ0FtSmlBb1NYUmxjbUYwYjNKekxrRnljbUY1SUQwOVBTQnBkQ0I4ZkNCQmNuSmhlVkJ5YjNSdlcwbFVSVkpCVkU5U1hTQTlQVDBnYVhRcE8xeHVmVHRjYmlJc0luWmhjaUJqYkdGemMyOW1JRDBnY21WeGRXbHlaU2duTGk5ZlkyeGhjM052WmljcE8xeHVkbUZ5SUVsVVJWSkJWRTlTSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0oybDBaWEpoZEc5eUp5azdYRzUyWVhJZ1NYUmxjbUYwYjNKeklEMGdjbVZ4ZFdseVpTZ25MaTlmYVhSbGNtRjBiM0p6SnlrN1hHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlISmxjWFZwY21Vb0p5NHZYMk52Y21VbktTNW5aWFJKZEdWeVlYUnZjazFsZEdodlpDQTlJR1oxYm1OMGFXOXVJQ2hwZENrZ2UxeHVJQ0JwWmlBb2FYUWdJVDBnZFc1a1pXWnBibVZrS1NCeVpYUjFjbTRnYVhSYlNWUkZVa0ZVVDFKZFhHNGdJQ0FnZkh3Z2FYUmJKMEJBYVhSbGNtRjBiM0luWFZ4dUlDQWdJSHg4SUVsMFpYSmhkRzl5YzF0amJHRnpjMjltS0dsMEtWMDdYRzU5TzF4dUlpd2lkbUZ5SUdOMGVDQTlJSEpsY1hWcGNtVW9KeTR2WDJOMGVDY3BPMXh1ZG1GeUlHTmhiR3dnUFNCeVpYRjFhWEpsS0NjdUwxOXBkR1Z5TFdOaGJHd25LVHRjYm5aaGNpQnBjMEZ5Y21GNVNYUmxjaUE5SUhKbGNYVnBjbVVvSnk0dlgybHpMV0Z5Y21GNUxXbDBaWEluS1R0Y2JuWmhjaUJoYms5aWFtVmpkQ0E5SUhKbGNYVnBjbVVvSnk0dlgyRnVMVzlpYW1WamRDY3BPMXh1ZG1GeUlIUnZUR1Z1WjNSb0lEMGdjbVZ4ZFdseVpTZ25MaTlmZEc4dGJHVnVaM1JvSnlrN1hHNTJZWElnWjJWMFNYUmxja1p1SUQwZ2NtVnhkV2x5WlNnbkxpOWpiM0psTG1kbGRDMXBkR1Z5WVhSdmNpMXRaWFJvYjJRbktUdGNiblpoY2lCQ1VrVkJTeUE5SUh0OU8xeHVkbUZ5SUZKRlZGVlNUaUE5SUh0OU8xeHVkbUZ5SUdWNGNHOXlkSE1nUFNCdGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNocGRHVnlZV0pzWlN3Z1pXNTBjbWxsY3l3Z1ptNHNJSFJvWVhRc0lFbFVSVkpCVkU5U0tTQjdYRzRnSUhaaGNpQnBkR1Z5Um00Z1BTQkpWRVZTUVZSUFVpQS9JR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUdsMFpYSmhZbXhsT3lCOUlEb2daMlYwU1hSbGNrWnVLR2wwWlhKaFlteGxLVHRjYmlBZ2RtRnlJR1lnUFNCamRIZ29abTRzSUhSb1lYUXNJR1Z1ZEhKcFpYTWdQeUF5SURvZ01TazdYRzRnSUhaaGNpQnBibVJsZUNBOUlEQTdYRzRnSUhaaGNpQnNaVzVuZEdnc0lITjBaWEFzSUdsMFpYSmhkRzl5TENCeVpYTjFiSFE3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdhWFJsY2tadUlDRTlJQ2RtZFc1amRHbHZiaWNwSUhSb2NtOTNJRlI1Y0dWRmNuSnZjaWhwZEdWeVlXSnNaU0FySUNjZ2FYTWdibTkwSUdsMFpYSmhZbXhsSVNjcE8xeHVJQ0F2THlCbVlYTjBJR05oYzJVZ1ptOXlJR0Z5Y21GNWN5QjNhWFJvSUdSbFptRjFiSFFnYVhSbGNtRjBiM0pjYmlBZ2FXWWdLR2x6UVhKeVlYbEpkR1Z5S0dsMFpYSkdiaWtwSUdadmNpQW9iR1Z1WjNSb0lEMGdkRzlNWlc1bmRHZ29hWFJsY21GaWJHVXViR1Z1WjNSb0tUc2diR1Z1WjNSb0lENGdhVzVrWlhnN0lHbHVaR1Y0S3lzcElIdGNiaUFnSUNCeVpYTjFiSFFnUFNCbGJuUnlhV1Z6SUQ4Z1ppaGhiazlpYW1WamRDaHpkR1Z3SUQwZ2FYUmxjbUZpYkdWYmFXNWtaWGhkS1Zzd1hTd2djM1JsY0ZzeFhTa2dPaUJtS0dsMFpYSmhZbXhsVzJsdVpHVjRYU2s3WEc0Z0lDQWdhV1lnS0hKbGMzVnNkQ0E5UFQwZ1FsSkZRVXNnZkh3Z2NtVnpkV3gwSUQwOVBTQlNSVlJWVWs0cElISmxkSFZ5YmlCeVpYTjFiSFE3WEc0Z0lIMGdaV3h6WlNCbWIzSWdLR2wwWlhKaGRHOXlJRDBnYVhSbGNrWnVMbU5oYkd3b2FYUmxjbUZpYkdVcE95QWhLSE4wWlhBZ1BTQnBkR1Z5WVhSdmNpNXVaWGgwS0NrcExtUnZibVU3S1NCN1hHNGdJQ0FnY21WemRXeDBJRDBnWTJGc2JDaHBkR1Z5WVhSdmNpd2daaXdnYzNSbGNDNTJZV3gxWlN3Z1pXNTBjbWxsY3lrN1hHNGdJQ0FnYVdZZ0tISmxjM1ZzZENBOVBUMGdRbEpGUVVzZ2ZId2djbVZ6ZFd4MElEMDlQU0JTUlZSVlVrNHBJSEpsZEhWeWJpQnlaWE4xYkhRN1hHNGdJSDFjYm4wN1hHNWxlSEJ2Y25SekxrSlNSVUZMSUQwZ1FsSkZRVXM3WEc1bGVIQnZjblJ6TGxKRlZGVlNUaUE5SUZKRlZGVlNUanRjYmlJc0lpOHZJRGN1TXk0eU1DQlRjR1ZqYVdWelEyOXVjM1J5ZFdOMGIzSW9UeXdnWkdWbVlYVnNkRU52Ym5OMGNuVmpkRzl5S1Z4dWRtRnlJR0Z1VDJKcVpXTjBJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRiMkpxWldOMEp5azdYRzUyWVhJZ1lVWjFibU4wYVc5dUlEMGdjbVZ4ZFdseVpTZ25MaTlmWVMxbWRXNWpkR2x2YmljcE8xeHVkbUZ5SUZOUVJVTkpSVk1nUFNCeVpYRjFhWEpsS0NjdUwxOTNhM01uS1NnbmMzQmxZMmxsY3ljcE8xeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQm1kVzVqZEdsdmJpQW9UeXdnUkNrZ2UxeHVJQ0IyWVhJZ1F5QTlJR0Z1VDJKcVpXTjBLRThwTG1OdmJuTjBjblZqZEc5eU8xeHVJQ0IyWVhJZ1V6dGNiaUFnY21WMGRYSnVJRU1nUFQwOUlIVnVaR1ZtYVc1bFpDQjhmQ0FvVXlBOUlHRnVUMkpxWldOMEtFTXBXMU5RUlVOSlJWTmRLU0E5UFNCMWJtUmxabWx1WldRZ1B5QkVJRG9nWVVaMWJtTjBhVzl1S0ZNcE8xeHVmVHRjYmlJc0lpOHZJR1poYzNRZ1lYQndiSGtzSUdoMGRIQTZMeTlxYzNCbGNtWXViRzVyYVhRdVkyOXRMMlpoYzNRdFlYQndiSGt2TlZ4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb1ptNHNJR0Z5WjNNc0lIUm9ZWFFwSUh0Y2JpQWdkbUZ5SUhWdUlEMGdkR2hoZENBOVBUMGdkVzVrWldacGJtVmtPMXh1SUNCemQybDBZMmdnS0dGeVozTXViR1Z1WjNSb0tTQjdYRzRnSUNBZ1kyRnpaU0F3T2lCeVpYUjFjbTRnZFc0Z1B5Qm1iaWdwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdPaUJtYmk1allXeHNLSFJvWVhRcE8xeHVJQ0FnSUdOaGMyVWdNVG9nY21WMGRYSnVJSFZ1SUQ4Z1ptNG9ZWEpuYzFzd1hTbGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBNklHWnVMbU5oYkd3b2RHaGhkQ3dnWVhKbmMxc3dYU2s3WEc0Z0lDQWdZMkZ6WlNBeU9pQnlaWFIxY200Z2RXNGdQeUJtYmloaGNtZHpXekJkTENCaGNtZHpXekZkS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRG9nWm00dVkyRnNiQ2gwYUdGMExDQmhjbWR6V3pCZExDQmhjbWR6V3pGZEtUdGNiaUFnSUNCallYTmxJRE02SUhKbGRIVnliaUIxYmlBL0lHWnVLR0Z5WjNOYk1GMHNJR0Z5WjNOYk1WMHNJR0Z5WjNOYk1sMHBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ09pQm1iaTVqWVd4c0tIUm9ZWFFzSUdGeVozTmJNRjBzSUdGeVozTmJNVjBzSUdGeVozTmJNbDBwTzF4dUlDQWdJR05oYzJVZ05Eb2djbVYwZFhKdUlIVnVJRDhnWm00b1lYSm5jMXN3WFN3Z1lYSm5jMXN4WFN3Z1lYSm5jMXN5WFN3Z1lYSm5jMXN6WFNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E2SUdadUxtTmhiR3dvZEdoaGRDd2dZWEpuYzFzd1hTd2dZWEpuYzFzeFhTd2dZWEpuYzFzeVhTd2dZWEpuYzFzelhTazdYRzRnSUgwZ2NtVjBkWEp1SUdadUxtRndjR3g1S0hSb1lYUXNJR0Z5WjNNcE8xeHVmVHRjYmlJc0luWmhjaUJqZEhnZ1BTQnlaWEYxYVhKbEtDY3VMMTlqZEhnbktUdGNiblpoY2lCcGJuWnZhMlVnUFNCeVpYRjFhWEpsS0NjdUwxOXBiblp2YTJVbktUdGNiblpoY2lCb2RHMXNJRDBnY21WeGRXbHlaU2duTGk5ZmFIUnRiQ2NwTzF4dWRtRnlJR05sYkNBOUlISmxjWFZwY21Vb0p5NHZYMlJ2YlMxamNtVmhkR1VuS1R0Y2JuWmhjaUJuYkc5aVlXd2dQU0J5WlhGMWFYSmxLQ2N1TDE5bmJHOWlZV3duS1R0Y2JuWmhjaUJ3Y205alpYTnpJRDBnWjJ4dlltRnNMbkJ5YjJObGMzTTdYRzUyWVhJZ2MyVjBWR0Z6YXlBOUlHZHNiMkpoYkM1elpYUkpiVzFsWkdsaGRHVTdYRzUyWVhJZ1kyeGxZWEpVWVhOcklEMGdaMnh2WW1Gc0xtTnNaV0Z5U1cxdFpXUnBZWFJsTzF4dWRtRnlJRTFsYzNOaFoyVkRhR0Z1Ym1Wc0lEMGdaMnh2WW1Gc0xrMWxjM05oWjJWRGFHRnVibVZzTzF4dWRtRnlJRVJwYzNCaGRHTm9JRDBnWjJ4dlltRnNMa1JwYzNCaGRHTm9PMXh1ZG1GeUlHTnZkVzUwWlhJZ1BTQXdPMXh1ZG1GeUlIRjFaWFZsSUQwZ2UzMDdYRzUyWVhJZ1QwNVNSVUZFV1ZOVVFWUkZRMGhCVGtkRklEMGdKMjl1Y21WaFpIbHpkR0YwWldOb1lXNW5aU2M3WEc1MllYSWdaR1ZtWlhJc0lHTm9ZVzV1Wld3c0lIQnZjblE3WEc1MllYSWdjblZ1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCMllYSWdhV1FnUFNBcmRHaHBjenRjYmlBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMWEJ5YjNSdmRIbHdaUzFpZFdsc2RHbHVjMXh1SUNCcFppQW9jWFZsZFdVdWFHRnpUM2R1VUhKdmNHVnlkSGtvYVdRcEtTQjdYRzRnSUNBZ2RtRnlJR1p1SUQwZ2NYVmxkV1ZiYVdSZE8xeHVJQ0FnSUdSbGJHVjBaU0J4ZFdWMVpWdHBaRjA3WEc0Z0lDQWdabTRvS1R0Y2JpQWdmVnh1ZlR0Y2JuWmhjaUJzYVhOMFpXNWxjaUE5SUdaMWJtTjBhVzl1SUNobGRtVnVkQ2tnZTF4dUlDQnlkVzR1WTJGc2JDaGxkbVZ1ZEM1a1lYUmhLVHRjYm4wN1hHNHZMeUJPYjJSbExtcHpJREF1T1NzZ0ppQkpSVEV3S3lCb1lYTWdjMlYwU1cxdFpXUnBZWFJsTENCdmRHaGxjbmRwYzJVNlhHNXBaaUFvSVhObGRGUmhjMnNnZkh3Z0lXTnNaV0Z5VkdGemF5a2dlMXh1SUNCelpYUlVZWE5ySUQwZ1puVnVZM1JwYjI0Z2MyVjBTVzF0WldScFlYUmxLR1p1S1NCN1hHNGdJQ0FnZG1GeUlHRnlaM01nUFNCYlhUdGNiaUFnSUNCMllYSWdhU0E5SURFN1hHNGdJQ0FnZDJocGJHVWdLR0Z5WjNWdFpXNTBjeTVzWlc1bmRHZ2dQaUJwS1NCaGNtZHpMbkIxYzJnb1lYSm5kVzFsYm5Selcya3JLMTBwTzF4dUlDQWdJSEYxWlhWbFd5c3JZMjkxYm5SbGNsMGdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBdkx5QmxjMnhwYm5RdFpHbHpZV0pzWlMxdVpYaDBMV3hwYm1VZ2JtOHRibVYzTFdaMWJtTmNiaUFnSUNBZ0lHbHVkbTlyWlNoMGVYQmxiMllnWm00Z1BUMGdKMloxYm1OMGFXOXVKeUEvSUdadUlEb2dSblZ1WTNScGIyNG9abTRwTENCaGNtZHpLVHRjYmlBZ0lDQjlPMXh1SUNBZ0lHUmxabVZ5S0dOdmRXNTBaWElwTzF4dUlDQWdJSEpsZEhWeWJpQmpiM1Z1ZEdWeU8xeHVJQ0I5TzF4dUlDQmpiR1ZoY2xSaGMyc2dQU0JtZFc1amRHbHZiaUJqYkdWaGNrbHRiV1ZrYVdGMFpTaHBaQ2tnZTF4dUlDQWdJR1JsYkdWMFpTQnhkV1YxWlZ0cFpGMDdYRzRnSUgwN1hHNGdJQzh2SUU1dlpHVXVhbk1nTUM0NExWeHVJQ0JwWmlBb2NtVnhkV2x5WlNnbkxpOWZZMjltSnlrb2NISnZZMlZ6Y3lrZ1BUMGdKM0J5YjJObGMzTW5LU0I3WEc0Z0lDQWdaR1ZtWlhJZ1BTQm1kVzVqZEdsdmJpQW9hV1FwSUh0Y2JpQWdJQ0FnSUhCeWIyTmxjM011Ym1WNGRGUnBZMnNvWTNSNEtISjFiaXdnYVdRc0lERXBLVHRjYmlBZ0lDQjlPMXh1SUNBdkx5QlRjR2hsY21VZ0tFcFRJR2RoYldVZ1pXNW5hVzVsS1NCRWFYTndZWFJqYUNCQlVFbGNiaUFnZlNCbGJITmxJR2xtSUNoRWFYTndZWFJqYUNBbUppQkVhWE53WVhSamFDNXViM2NwSUh0Y2JpQWdJQ0JrWldabGNpQTlJR1oxYm1OMGFXOXVJQ2hwWkNrZ2UxeHVJQ0FnSUNBZ1JHbHpjR0YwWTJndWJtOTNLR04wZUNoeWRXNHNJR2xrTENBeEtTazdYRzRnSUNBZ2ZUdGNiaUFnTHk4Z1FuSnZkM05sY25NZ2QybDBhQ0JOWlhOellXZGxRMmhoYm01bGJDd2dhVzVqYkhWa1pYTWdWMlZpVjI5eWEyVnljMXh1SUNCOUlHVnNjMlVnYVdZZ0tFMWxjM05oWjJWRGFHRnVibVZzS1NCN1hHNGdJQ0FnWTJoaGJtNWxiQ0E5SUc1bGR5Qk5aWE56WVdkbFEyaGhibTVsYkNncE8xeHVJQ0FnSUhCdmNuUWdQU0JqYUdGdWJtVnNMbkJ2Y25ReU8xeHVJQ0FnSUdOb1lXNXVaV3d1Y0c5eWRERXViMjV0WlhOellXZGxJRDBnYkdsemRHVnVaWEk3WEc0Z0lDQWdaR1ZtWlhJZ1BTQmpkSGdvY0c5eWRDNXdiM04wVFdWemMyRm5aU3dnY0c5eWRDd2dNU2s3WEc0Z0lDOHZJRUp5YjNkelpYSnpJSGRwZEdnZ2NHOXpkRTFsYzNOaFoyVXNJSE5yYVhBZ1YyVmlWMjl5YTJWeWMxeHVJQ0F2THlCSlJUZ2dhR0Z6SUhCdmMzUk5aWE56WVdkbExDQmlkWFFnYVhRbmN5QnplVzVqSUNZZ2RIbHdaVzltSUdsMGN5QndiM04wVFdWemMyRm5aU0JwY3lBbmIySnFaV04wSjF4dUlDQjlJR1ZzYzJVZ2FXWWdLR2RzYjJKaGJDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUlDWW1JSFI1Y0dWdlppQndiM04wVFdWemMyRm5aU0E5UFNBblpuVnVZM1JwYjI0bklDWW1JQ0ZuYkc5aVlXd3VhVzF3YjNKMFUyTnlhWEIwY3lrZ2UxeHVJQ0FnSUdSbFptVnlJRDBnWm5WdVkzUnBiMjRnS0dsa0tTQjdYRzRnSUNBZ0lDQm5iRzlpWVd3dWNHOXpkRTFsYzNOaFoyVW9hV1FnS3lBbkp5d2dKeW9uS1R0Y2JpQWdJQ0I5TzF4dUlDQWdJR2RzYjJKaGJDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHRaWE56WVdkbEp5d2diR2x6ZEdWdVpYSXNJR1poYkhObEtUdGNiaUFnTHk4Z1NVVTRMVnh1SUNCOUlHVnNjMlVnYVdZZ0tFOU9Va1ZCUkZsVFZFRlVSVU5JUVU1SFJTQnBiaUJqWld3b0ozTmpjbWx3ZENjcEtTQjdYRzRnSUNBZ1pHVm1aWElnUFNCbWRXNWpkR2x2YmlBb2FXUXBJSHRjYmlBZ0lDQWdJR2gwYld3dVlYQndaVzVrUTJocGJHUW9ZMlZzS0NkelkzSnBjSFFuS1NsYlQwNVNSVUZFV1ZOVVFWUkZRMGhCVGtkRlhTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FIUnRiQzV5WlcxdmRtVkRhR2xzWkNoMGFHbHpLVHRjYmlBZ0lDQWdJQ0FnY25WdUxtTmhiR3dvYVdRcE8xeHVJQ0FnSUNBZ2ZUdGNiaUFnSUNCOU8xeHVJQ0F2THlCU1pYTjBJRzlzWkNCaWNtOTNjMlZ5YzF4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdSbFptVnlJRDBnWm5WdVkzUnBiMjRnS0dsa0tTQjdYRzRnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLR04wZUNoeWRXNHNJR2xrTENBeEtTd2dNQ2s3WEc0Z0lDQWdmVHRjYmlBZ2ZWeHVmVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0I3WEc0Z0lITmxkRG9nYzJWMFZHRnpheXhjYmlBZ1kyeGxZWEk2SUdOc1pXRnlWR0Z6YTF4dWZUdGNiaUlzSW5aaGNpQm5iRzlpWVd3Z1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVHRjYm5aaGNpQnRZV055YjNSaGMyc2dQU0J5WlhGMWFYSmxLQ2N1TDE5MFlYTnJKeWt1YzJWME8xeHVkbUZ5SUU5aWMyVnlkbVZ5SUQwZ1oyeHZZbUZzTGsxMWRHRjBhVzl1VDJKelpYSjJaWElnZkh3Z1oyeHZZbUZzTGxkbFlrdHBkRTExZEdGMGFXOXVUMkp6WlhKMlpYSTdYRzUyWVhJZ2NISnZZMlZ6Y3lBOUlHZHNiMkpoYkM1d2NtOWpaWE56TzF4dWRtRnlJRkJ5YjIxcGMyVWdQU0JuYkc5aVlXd3VVSEp2YldselpUdGNiblpoY2lCcGMwNXZaR1VnUFNCeVpYRjFhWEpsS0NjdUwxOWpiMlluS1Nod2NtOWpaWE56S1NBOVBTQW5jSEp2WTJWemN5YzdYRzVjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0IyWVhJZ2FHVmhaQ3dnYkdGemRDd2dibTkwYVdaNU8xeHVYRzRnSUhaaGNpQm1iSFZ6YUNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnY0dGeVpXNTBMQ0JtYmp0Y2JpQWdJQ0JwWmlBb2FYTk9iMlJsSUNZbUlDaHdZWEpsYm5RZ1BTQndjbTlqWlhOekxtUnZiV0ZwYmlrcElIQmhjbVZ1ZEM1bGVHbDBLQ2s3WEc0Z0lDQWdkMmhwYkdVZ0tHaGxZV1FwSUh0Y2JpQWdJQ0FnSUdadUlEMGdhR1ZoWkM1bWJqdGNiaUFnSUNBZ0lHaGxZV1FnUFNCb1pXRmtMbTVsZUhRN1hHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0JtYmlncE8xeHVJQ0FnSUNBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2FHVmhaQ2tnYm05MGFXWjVLQ2s3WEc0Z0lDQWdJQ0FnSUdWc2MyVWdiR0Z6ZENBOUlIVnVaR1ZtYVc1bFpEdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1pUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUlHeGhjM1FnUFNCMWJtUmxabWx1WldRN1hHNGdJQ0FnYVdZZ0tIQmhjbVZ1ZENrZ2NHRnlaVzUwTG1WdWRHVnlLQ2s3WEc0Z0lIMDdYRzVjYmlBZ0x5OGdUbTlrWlM1cWMxeHVJQ0JwWmlBb2FYTk9iMlJsS1NCN1hHNGdJQ0FnYm05MGFXWjVJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ2NISnZZMlZ6Y3k1dVpYaDBWR2xqYXlobWJIVnphQ2s3WEc0Z0lDQWdmVHRjYmlBZ0x5OGdZbkp2ZDNObGNuTWdkMmwwYUNCTmRYUmhkR2x2Yms5aWMyVnlkbVZ5WEc0Z0lIMGdaV3h6WlNCcFppQW9UMkp6WlhKMlpYSXBJSHRjYmlBZ0lDQjJZWElnZEc5bloyeGxJRDBnZEhKMVpUdGNiaUFnSUNCMllYSWdibTlrWlNBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlZSbGVIUk9iMlJsS0NjbktUdGNiaUFnSUNCdVpYY2dUMkp6WlhKMlpYSW9abXgxYzJncExtOWljMlZ5ZG1Vb2JtOWtaU3dnZXlCamFHRnlZV04wWlhKRVlYUmhPaUIwY25WbElIMHBPeUF2THlCbGMyeHBiblF0WkdsellXSnNaUzFzYVc1bElHNXZMVzVsZDF4dUlDQWdJRzV2ZEdsbWVTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUc1dlpHVXVaR0YwWVNBOUlIUnZaMmRzWlNBOUlDRjBiMmRuYkdVN1hHNGdJQ0FnZlR0Y2JpQWdMeThnWlc1MmFYSnZibTFsYm5SeklIZHBkR2dnYldGNVltVWdibTl1TFdOdmJYQnNaWFJsYkhrZ1kyOXljbVZqZEN3Z1luVjBJR1Y0YVhOMFpXNTBJRkJ5YjIxcGMyVmNiaUFnZlNCbGJITmxJR2xtSUNoUWNtOXRhWE5sSUNZbUlGQnliMjFwYzJVdWNtVnpiMngyWlNrZ2UxeHVJQ0FnSUhaaGNpQndjbTl0YVhObElEMGdVSEp2YldselpTNXlaWE52YkhabEtDazdYRzRnSUNBZ2JtOTBhV1o1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdjSEp2YldselpTNTBhR1Z1S0dac2RYTm9LVHRjYmlBZ0lDQjlPMXh1SUNBdkx5Qm1iM0lnYjNSb1pYSWdaVzUyYVhKdmJtMWxiblJ6SUMwZ2JXRmpjbTkwWVhOcklHSmhjMlZrSUc5dU9seHVJQ0F2THlBdElITmxkRWx0YldWa2FXRjBaVnh1SUNBdkx5QXRJRTFsYzNOaFoyVkRhR0Z1Ym1Wc1hHNGdJQzh2SUMwZ2QybHVaRzkzTG5CdmMzUk5aWE56WVdkY2JpQWdMeThnTFNCdmJuSmxZV1I1YzNSaGRHVmphR0Z1WjJWY2JpQWdMeThnTFNCelpYUlVhVzFsYjNWMFhHNGdJSDBnWld4elpTQjdYRzRnSUNBZ2JtOTBhV1o1SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdMeThnYzNSeVlXNW5aU0JKUlNBcklIZGxZbkJoWTJzZ1pHVjJJSE5sY25abGNpQmlkV2NnTFNCMWMyVWdMbU5oYkd3b1oyeHZZbUZzS1Z4dUlDQWdJQ0FnYldGamNtOTBZWE5yTG1OaGJHd29aMnh2WW1Gc0xDQm1iSFZ6YUNrN1hHNGdJQ0FnZlR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCbWRXNWpkR2x2YmlBb1ptNHBJSHRjYmlBZ0lDQjJZWElnZEdGemF5QTlJSHNnWm00NklHWnVMQ0J1WlhoME9pQjFibVJsWm1sdVpXUWdmVHRjYmlBZ0lDQnBaaUFvYkdGemRDa2diR0Z6ZEM1dVpYaDBJRDBnZEdGemF6dGNiaUFnSUNCcFppQW9JV2hsWVdRcElIdGNiaUFnSUNBZ0lHaGxZV1FnUFNCMFlYTnJPMXh1SUNBZ0lDQWdibTkwYVdaNUtDazdYRzRnSUNBZ2ZTQnNZWE4wSUQwZ2RHRnphenRjYmlBZ2ZUdGNibjA3WEc0aUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc0dkx5QXlOUzQwTGpFdU5TQk9aWGRRY205dGFYTmxRMkZ3WVdKcGJHbDBlU2hES1Z4dWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVHRjYmx4dVpuVnVZM1JwYjI0Z1VISnZiV2x6WlVOaGNHRmlhV3hwZEhrb1F5a2dlMXh1SUNCMllYSWdjbVZ6YjJ4MlpTd2djbVZxWldOME8xeHVJQ0IwYUdsekxuQnliMjFwYzJVZ1BTQnVaWGNnUXlobWRXNWpkR2x2YmlBb0pDUnlaWE52YkhabExDQWtKSEpsYW1WamRDa2dlMXh1SUNBZ0lHbG1JQ2h5WlhOdmJIWmxJQ0U5UFNCMWJtUmxabWx1WldRZ2ZId2djbVZxWldOMElDRTlQU0IxYm1SbFptbHVaV1FwSUhSb2NtOTNJRlI1Y0dWRmNuSnZjaWduUW1Ga0lGQnliMjFwYzJVZ1kyOXVjM1J5ZFdOMGIzSW5LVHRjYmlBZ0lDQnlaWE52YkhabElEMGdKQ1J5WlhOdmJIWmxPMXh1SUNBZ0lISmxhbVZqZENBOUlDUWtjbVZxWldOME8xeHVJQ0I5S1R0Y2JpQWdkR2hwY3k1eVpYTnZiSFpsSUQwZ1lVWjFibU4wYVc5dUtISmxjMjlzZG1VcE8xeHVJQ0IwYUdsekxuSmxhbVZqZENBOUlHRkdkVzVqZEdsdmJpaHlaV3BsWTNRcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeTVtSUQwZ1puVnVZM1JwYjI0Z0tFTXBJSHRjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTl0YVhObFEyRndZV0pwYkdsMGVTaERLVHRjYm4wN1hHNGlMQ0p0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJQ2hsZUdWaktTQjdYRzRnSUhSeWVTQjdYRzRnSUNBZ2NtVjBkWEp1SUhzZ1pUb2dabUZzYzJVc0lIWTZJR1Y0WldNb0tTQjlPMXh1SUNCOUlHTmhkR05vSUNobEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhzZ1pUb2dkSEoxWlN3Z2Rqb2daU0I5TzF4dUlDQjlYRzU5TzF4dUlpd2lkbUZ5SUdGdVQySnFaV04wSUQwZ2NtVnhkV2x5WlNnbkxpOWZZVzR0YjJKcVpXTjBKeWs3WEc1MllYSWdhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TDE5cGN5MXZZbXBsWTNRbktUdGNiblpoY2lCdVpYZFFjbTl0YVhObFEyRndZV0pwYkdsMGVTQTlJSEpsY1hWcGNtVW9KeTR2WDI1bGR5MXdjbTl0YVhObExXTmhjR0ZpYVd4cGRIa25LVHRjYmx4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb1F5d2dlQ2tnZTF4dUlDQmhiazlpYW1WamRDaERLVHRjYmlBZ2FXWWdLR2x6VDJKcVpXTjBLSGdwSUNZbUlIZ3VZMjl1YzNSeWRXTjBiM0lnUFQwOUlFTXBJSEpsZEhWeWJpQjRPMXh1SUNCMllYSWdjSEp2YldselpVTmhjR0ZpYVd4cGRIa2dQU0J1WlhkUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVM1bUtFTXBPMXh1SUNCMllYSWdjbVZ6YjJ4MlpTQTlJSEJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVMbkpsYzI5c2RtVTdYRzRnSUhKbGMyOXNkbVVvZUNrN1hHNGdJSEpsZEhWeWJpQndjbTl0YVhObFEyRndZV0pwYkdsMGVTNXdjbTl0YVhObE8xeHVmVHRjYmlJc0luWmhjaUJ5WldSbFptbHVaU0E5SUhKbGNYVnBjbVVvSnk0dlgzSmxaR1ZtYVc1bEp5azdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1oxYm1OMGFXOXVJQ2gwWVhKblpYUXNJSE55WXl3Z2MyRm1aU2tnZTF4dUlDQm1iM0lnS0haaGNpQnJaWGtnYVc0Z2MzSmpLU0J5WldSbFptbHVaU2gwWVhKblpYUXNJR3RsZVN3Z2MzSmpXMnRsZVYwc0lITmhabVVwTzF4dUlDQnlaWFIxY200Z2RHRnlaMlYwTzF4dWZUdGNiaUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNiblpoY2lCbmJHOWlZV3dnUFNCeVpYRjFhWEpsS0NjdUwxOW5iRzlpWVd3bktUdGNiblpoY2lCa1VDQTlJSEpsY1hWcGNtVW9KeTR2WDI5aWFtVmpkQzFrY0NjcE8xeHVkbUZ5SUVSRlUwTlNTVkJVVDFKVElEMGdjbVZ4ZFdseVpTZ25MaTlmWkdWelkzSnBjSFJ2Y25NbktUdGNiblpoY2lCVFVFVkRTVVZUSUQwZ2NtVnhkV2x5WlNnbkxpOWZkMnR6Snlrb0ozTndaV05wWlhNbktUdGNibHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JtZFc1amRHbHZiaUFvUzBWWktTQjdYRzRnSUhaaGNpQkRJRDBnWjJ4dlltRnNXMHRGV1YwN1hHNGdJR2xtSUNoRVJWTkRVa2xRVkU5U1V5QW1KaUJESUNZbUlDRkRXMU5RUlVOSlJWTmRLU0JrVUM1bUtFTXNJRk5RUlVOSlJWTXNJSHRjYmlBZ0lDQmpiMjVtYVdkMWNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ1oyVjBPaUJtZFc1amRHbHZiaUFvS1NCN0lISmxkSFZ5YmlCMGFHbHpPeUI5WEc0Z0lIMHBPMXh1ZlR0Y2JpSXNJblpoY2lCSlZFVlNRVlJQVWlBOUlISmxjWFZwY21Vb0p5NHZYM2RyY3ljcEtDZHBkR1Z5WVhSdmNpY3BPMXh1ZG1GeUlGTkJSa1ZmUTB4UFUwbE9SeUE5SUdaaGJITmxPMXh1WEc1MGNua2dlMXh1SUNCMllYSWdjbWwwWlhJZ1BTQmJOMTFiU1ZSRlVrRlVUMUpkS0NrN1hHNGdJSEpwZEdWeVd5ZHlaWFIxY200blhTQTlJR1oxYm1OMGFXOXVJQ2dwSUhzZ1UwRkdSVjlEVEU5VFNVNUhJRDBnZEhKMVpUc2dmVHRjYmlBZ0x5OGdaWE5zYVc1MExXUnBjMkZpYkdVdGJtVjRkQzFzYVc1bElHNXZMWFJvY205M0xXeHBkR1Z5WVd4Y2JpQWdRWEp5WVhrdVpuSnZiU2h5YVhSbGNpd2dablZ1WTNScGIyNGdLQ2tnZXlCMGFISnZkeUF5T3lCOUtUdGNibjBnWTJGMFkyZ2dLR1VwSUhzZ0x5b2daVzF3ZEhrZ0tpOGdmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdaMWJtTjBhVzl1SUNobGVHVmpMQ0J6YTJsd1EyeHZjMmx1WnlrZ2UxeHVJQ0JwWmlBb0lYTnJhWEJEYkc5emFXNW5JQ1ltSUNGVFFVWkZYME5NVDFOSlRrY3BJSEpsZEhWeWJpQm1ZV3h6WlR0Y2JpQWdkbUZ5SUhOaFptVWdQU0JtWVd4elpUdGNiaUFnZEhKNUlIdGNiaUFnSUNCMllYSWdZWEp5SUQwZ1d6ZGRPMXh1SUNBZ0lIWmhjaUJwZEdWeUlEMGdZWEp5VzBsVVJWSkJWRTlTWFNncE8xeHVJQ0FnSUdsMFpYSXVibVY0ZENBOUlHWjFibU4wYVc5dUlDZ3BJSHNnY21WMGRYSnVJSHNnWkc5dVpUb2djMkZtWlNBOUlIUnlkV1VnZlRzZ2ZUdGNiaUFnSUNCaGNuSmJTVlJGVWtGVVQxSmRJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QnlaWFIxY200Z2FYUmxjanNnZlR0Y2JpQWdJQ0JsZUdWaktHRnljaWs3WEc0Z0lIMGdZMkYwWTJnZ0tHVXBJSHNnTHlvZ1pXMXdkSGtnS2k4Z2ZWeHVJQ0J5WlhSMWNtNGdjMkZtWlR0Y2JuMDdYRzRpTENJbmRYTmxJSE4wY21samRDYzdYRzUyWVhJZ1RFbENVa0ZTV1NBOUlISmxjWFZwY21Vb0p5NHZYMnhwWW5KaGNua25LVHRjYm5aaGNpQm5iRzlpWVd3Z1BTQnlaWEYxYVhKbEtDY3VMMTluYkc5aVlXd25LVHRjYm5aaGNpQmpkSGdnUFNCeVpYRjFhWEpsS0NjdUwxOWpkSGduS1R0Y2JuWmhjaUJqYkdGemMyOW1JRDBnY21WeGRXbHlaU2duTGk5ZlkyeGhjM052WmljcE8xeHVkbUZ5SUNSbGVIQnZjblFnUFNCeVpYRjFhWEpsS0NjdUwxOWxlSEJ2Y25RbktUdGNiblpoY2lCcGMwOWlhbVZqZENBOUlISmxjWFZwY21Vb0p5NHZYMmx6TFc5aWFtVmpkQ2NwTzF4dWRtRnlJR0ZHZFc1amRHbHZiaUE5SUhKbGNYVnBjbVVvSnk0dlgyRXRablZ1WTNScGIyNG5LVHRjYm5aaGNpQmhia2x1YzNSaGJtTmxJRDBnY21WeGRXbHlaU2duTGk5ZllXNHRhVzV6ZEdGdVkyVW5LVHRjYm5aaGNpQm1iM0pQWmlBOUlISmxjWFZwY21Vb0p5NHZYMlp2Y2kxdlppY3BPMXh1ZG1GeUlITndaV05wWlhORGIyNXpkSEoxWTNSdmNpQTlJSEpsY1hWcGNtVW9KeTR2WDNOd1pXTnBaWE10WTI5dWMzUnlkV04wYjNJbktUdGNiblpoY2lCMFlYTnJJRDBnY21WeGRXbHlaU2duTGk5ZmRHRnpheWNwTG5ObGREdGNiblpoY2lCdGFXTnliM1JoYzJzZ1BTQnlaWEYxYVhKbEtDY3VMMTl0YVdOeWIzUmhjMnNuS1NncE8xeHVkbUZ5SUc1bGQxQnliMjFwYzJWRFlYQmhZbWxzYVhSNVRXOWtkV3hsSUQwZ2NtVnhkV2x5WlNnbkxpOWZibVYzTFhCeWIyMXBjMlV0WTJGd1lXSnBiR2wwZVNjcE8xeHVkbUZ5SUhCbGNtWnZjbTBnUFNCeVpYRjFhWEpsS0NjdUwxOXdaWEptYjNKdEp5azdYRzUyWVhJZ2NISnZiV2x6WlZKbGMyOXNkbVVnUFNCeVpYRjFhWEpsS0NjdUwxOXdjbTl0YVhObExYSmxjMjlzZG1VbktUdGNiblpoY2lCUVVrOU5TVk5GSUQwZ0oxQnliMjFwYzJVbk8xeHVkbUZ5SUZSNWNHVkZjbkp2Y2lBOUlHZHNiMkpoYkM1VWVYQmxSWEp5YjNJN1hHNTJZWElnY0hKdlkyVnpjeUE5SUdkc2IySmhiQzV3Y205alpYTnpPMXh1ZG1GeUlDUlFjbTl0YVhObElEMGdaMnh2WW1Gc1cxQlNUMDFKVTBWZE8xeHVkbUZ5SUdselRtOWtaU0E5SUdOc1lYTnpiMllvY0hKdlkyVnpjeWtnUFQwZ0ozQnliMk5sYzNNbk8xeHVkbUZ5SUdWdGNIUjVJRDBnWm5WdVkzUnBiMjRnS0NrZ2V5QXZLaUJsYlhCMGVTQXFMeUI5TzF4dWRtRnlJRWx1ZEdWeWJtRnNMQ0J1WlhkSFpXNWxjbWxqVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtzSUU5M2JsQnliMjFwYzJWRFlYQmhZbWxzYVhSNUxDQlhjbUZ3Y0dWeU8xeHVkbUZ5SUc1bGQxQnliMjFwYzJWRFlYQmhZbWxzYVhSNUlEMGdibVYzUjJWdVpYSnBZMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVJRDBnYm1WM1VISnZiV2x6WlVOaGNHRmlhV3hwZEhsTmIyUjFiR1V1Wmp0Y2JseHVkbUZ5SUZWVFJWOU9RVlJKVmtVZ1BTQWhJV1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdkSEo1SUh0Y2JpQWdJQ0F2THlCamIzSnlaV04wSUhOMVltTnNZWE56YVc1bklIZHBkR2dnUUVCemNHVmphV1Z6SUhOMWNIQnZjblJjYmlBZ0lDQjJZWElnY0hKdmJXbHpaU0E5SUNSUWNtOXRhWE5sTG5KbGMyOXNkbVVvTVNrN1hHNGdJQ0FnZG1GeUlFWmhhMlZRY205dGFYTmxJRDBnS0hCeWIyMXBjMlV1WTI5dWMzUnlkV04wYjNJZ1BTQjdmU2xiY21WeGRXbHlaU2duTGk5ZmQydHpKeWtvSjNOd1pXTnBaWE1uS1YwZ1BTQm1kVzVqZEdsdmJpQW9aWGhsWXlrZ2UxeHVJQ0FnSUNBZ1pYaGxZeWhsYlhCMGVTd2daVzF3ZEhrcE8xeHVJQ0FnSUgwN1hHNGdJQ0FnTHk4Z2RXNW9ZVzVrYkdWa0lISmxhbVZqZEdsdmJuTWdkSEpoWTJ0cGJtY2djM1Z3Y0c5eWRDd2dUbTlrWlVwVElGQnliMjFwYzJVZ2QybDBhRzkxZENCcGRDQm1ZV2xzY3lCQVFITndaV05wWlhNZ2RHVnpkRnh1SUNBZ0lISmxkSFZ5YmlBb2FYTk9iMlJsSUh4OElIUjVjR1Z2WmlCUWNtOXRhWE5sVW1WcVpXTjBhVzl1UlhabGJuUWdQVDBnSjJaMWJtTjBhVzl1SnlrZ0ppWWdjSEp2YldselpTNTBhR1Z1S0dWdGNIUjVLU0JwYm5OMFlXNWpaVzltSUVaaGEyVlFjbTl0YVhObE8xeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN0lDOHFJR1Z0Y0hSNUlDb3ZJSDFjYm4wb0tUdGNibHh1THk4Z2FHVnNjR1Z5YzF4dWRtRnlJR2x6VkdobGJtRmliR1VnUFNCbWRXNWpkR2x2YmlBb2FYUXBJSHRjYmlBZ2RtRnlJSFJvWlc0N1hHNGdJSEpsZEhWeWJpQnBjMDlpYW1WamRDaHBkQ2tnSmlZZ2RIbHdaVzltSUNoMGFHVnVJRDBnYVhRdWRHaGxiaWtnUFQwZ0oyWjFibU4wYVc5dUp5QS9JSFJvWlc0Z09pQm1ZV3h6WlR0Y2JuMDdYRzUyWVhJZ2JtOTBhV1o1SUQwZ1puVnVZM1JwYjI0Z0tIQnliMjFwYzJVc0lHbHpVbVZxWldOMEtTQjdYRzRnSUdsbUlDaHdjbTl0YVhObExsOXVLU0J5WlhSMWNtNDdYRzRnSUhCeWIyMXBjMlV1WDI0Z1BTQjBjblZsTzF4dUlDQjJZWElnWTJoaGFXNGdQU0J3Y205dGFYTmxMbDlqTzF4dUlDQnRhV055YjNSaGMyc29ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFpoY2lCMllXeDFaU0E5SUhCeWIyMXBjMlV1WDNZN1hHNGdJQ0FnZG1GeUlHOXJJRDBnY0hKdmJXbHpaUzVmY3lBOVBTQXhPMXh1SUNBZ0lIWmhjaUJwSUQwZ01EdGNiaUFnSUNCMllYSWdjblZ1SUQwZ1puVnVZM1JwYjI0Z0tISmxZV04wYVc5dUtTQjdYRzRnSUNBZ0lDQjJZWElnYUdGdVpHeGxjaUE5SUc5cklEOGdjbVZoWTNScGIyNHViMnNnT2lCeVpXRmpkR2x2Ymk1bVlXbHNPMXh1SUNBZ0lDQWdkbUZ5SUhKbGMyOXNkbVVnUFNCeVpXRmpkR2x2Ymk1eVpYTnZiSFpsTzF4dUlDQWdJQ0FnZG1GeUlISmxhbVZqZENBOUlISmxZV04wYVc5dUxuSmxhbVZqZER0Y2JpQWdJQ0FnSUhaaGNpQmtiMjFoYVc0Z1BTQnlaV0ZqZEdsdmJpNWtiMjFoYVc0N1hHNGdJQ0FnSUNCMllYSWdjbVZ6ZFd4MExDQjBhR1Z1TzF4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdhV1lnS0doaGJtUnNaWElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVc5cktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jSEp2YldselpTNWZhQ0E5UFNBeUtTQnZia2hoYm1Sc1pWVnVhR0Z1Wkd4bFpDaHdjbTl0YVhObEtUdGNiaUFnSUNBZ0lDQWdJQ0FnSUhCeWIyMXBjMlV1WDJnZ1BTQXhPMXh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvYUdGdVpHeGxjaUE5UFQwZ2RISjFaU2tnY21WemRXeDBJRDBnZG1Gc2RXVTdYRzRnSUNBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aRzl0WVdsdUtTQmtiMjFoYVc0dVpXNTBaWElvS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJSEpsYzNWc2RDQTlJR2hoYm1Sc1pYSW9kbUZzZFdVcE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUnZiV0ZwYmlrZ1pHOXRZV2x1TG1WNGFYUW9LVHRjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMzVnNkQ0E5UFQwZ2NtVmhZM1JwYjI0dWNISnZiV2x6WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WcVpXTjBLRlI1Y0dWRmNuSnZjaWduVUhKdmJXbHpaUzFqYUdGcGJpQmplV05zWlNjcEtUdGNiaUFnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSb1pXNGdQU0JwYzFSb1pXNWhZbXhsS0hKbGMzVnNkQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvWlc0dVkyRnNiQ2h5WlhOMWJIUXNJSEpsYzI5c2RtVXNJSEpsYW1WamRDazdYRzRnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSEpsYzI5c2RtVW9jbVZ6ZFd4MEtUdGNiaUFnSUNBZ0lDQWdmU0JsYkhObElISmxhbVZqZENoMllXeDFaU2s3WEc0Z0lDQWdJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnSUNBZ0lISmxhbVZqZENobEtUdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOU8xeHVJQ0FnSUhkb2FXeGxJQ2hqYUdGcGJpNXNaVzVuZEdnZ1BpQnBLU0J5ZFc0b1kyaGhhVzViYVNzclhTazdJQzh2SUhaaGNtbGhZbXhsSUd4bGJtZDBhQ0F0SUdOaGJpZDBJSFZ6WlNCbWIzSkZZV05vWEc0Z0lDQWdjSEp2YldselpTNWZZeUE5SUZ0ZE8xeHVJQ0FnSUhCeWIyMXBjMlV1WDI0Z1BTQm1ZV3h6WlR0Y2JpQWdJQ0JwWmlBb2FYTlNaV3BsWTNRZ0ppWWdJWEJ5YjIxcGMyVXVYMmdwSUc5dVZXNW9ZVzVrYkdWa0tIQnliMjFwYzJVcE8xeHVJQ0I5S1R0Y2JuMDdYRzUyWVhJZ2IyNVZibWhoYm1Sc1pXUWdQU0JtZFc1amRHbHZiaUFvY0hKdmJXbHpaU2tnZTF4dUlDQjBZWE5yTG1OaGJHd29aMnh2WW1Gc0xDQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdkbUZ5SUhaaGJIVmxJRDBnY0hKdmJXbHpaUzVmZGp0Y2JpQWdJQ0IyWVhJZ2RXNW9ZVzVrYkdWa0lEMGdhWE5WYm1oaGJtUnNaV1FvY0hKdmJXbHpaU2s3WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkQ3dnYUdGdVpHeGxjaXdnWTI5dWMyOXNaVHRjYmlBZ0lDQnBaaUFvZFc1b1lXNWtiR1ZrS1NCN1hHNGdJQ0FnSUNCeVpYTjFiSFFnUFNCd1pYSm1iM0p0S0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dselRtOWtaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIQnliMk5sYzNNdVpXMXBkQ2duZFc1b1lXNWtiR1ZrVW1WcVpXTjBhVzl1Snl3Z2RtRnNkV1VzSUhCeWIyMXBjMlVwTzF4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tHaGhibVJzWlhJZ1BTQm5iRzlpWVd3dWIyNTFibWhoYm1Sc1pXUnlaV3BsWTNScGIyNHBJSHRjYmlBZ0lDQWdJQ0FnSUNCb1lXNWtiR1Z5S0hzZ2NISnZiV2x6WlRvZ2NISnZiV2x6WlN3Z2NtVmhjMjl1T2lCMllXeDFaU0I5S1R0Y2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDZ29ZMjl1YzI5c1pTQTlJR2RzYjJKaGJDNWpiMjV6YjJ4bEtTQW1KaUJqYjI1emIyeGxMbVZ5Y205eUtTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpZ25WVzVvWVc1a2JHVmtJSEJ5YjIxcGMyVWdjbVZxWldOMGFXOXVKeXdnZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1R0Y2JpQWdJQ0FnSUM4dklFSnliM2R6WlhKeklITm9iM1ZzWkNCdWIzUWdkSEpwWjJkbGNpQmdjbVZxWldOMGFXOXVTR0Z1Wkd4bFpHQWdaWFpsYm5RZ2FXWWdhWFFnZDJGeklHaGhibVJzWldRZ2FHVnlaU3dnVG05a1pVcFRJQzBnYzJodmRXeGtYRzRnSUNBZ0lDQndjbTl0YVhObExsOW9JRDBnYVhOT2IyUmxJSHg4SUdselZXNW9ZVzVrYkdWa0tIQnliMjFwYzJVcElEOGdNaUE2SURFN1hHNGdJQ0FnZlNCd2NtOXRhWE5sTGw5aElEMGdkVzVrWldacGJtVmtPMXh1SUNBZ0lHbG1JQ2gxYm1oaGJtUnNaV1FnSmlZZ2NtVnpkV3gwTG1VcElIUm9jbTkzSUhKbGMzVnNkQzUyTzF4dUlDQjlLVHRjYm4wN1hHNTJZWElnYVhOVmJtaGhibVJzWldRZ1BTQm1kVzVqZEdsdmJpQW9jSEp2YldselpTa2dlMXh1SUNCcFppQW9jSEp2YldselpTNWZhQ0E5UFNBeEtTQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIWmhjaUJqYUdGcGJpQTlJSEJ5YjIxcGMyVXVYMkVnZkh3Z2NISnZiV2x6WlM1Zll6dGNiaUFnZG1GeUlHa2dQU0F3TzF4dUlDQjJZWElnY21WaFkzUnBiMjQ3WEc0Z0lIZG9hV3hsSUNoamFHRnBiaTVzWlc1bmRHZ2dQaUJwS1NCN1hHNGdJQ0FnY21WaFkzUnBiMjRnUFNCamFHRnBibHRwS3l0ZE8xeHVJQ0FnSUdsbUlDaHlaV0ZqZEdsdmJpNW1ZV2xzSUh4OElDRnBjMVZ1YUdGdVpHeGxaQ2h5WldGamRHbHZiaTV3Y205dGFYTmxLU2tnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5SUhKbGRIVnliaUIwY25WbE8xeHVmVHRjYm5aaGNpQnZia2hoYm1Sc1pWVnVhR0Z1Wkd4bFpDQTlJR1oxYm1OMGFXOXVJQ2h3Y205dGFYTmxLU0I3WEc0Z0lIUmhjMnN1WTJGc2JDaG5iRzlpWVd3c0lHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQjJZWElnYUdGdVpHeGxjanRjYmlBZ0lDQnBaaUFvYVhOT2IyUmxLU0I3WEc0Z0lDQWdJQ0J3Y205alpYTnpMbVZ0YVhRb0ozSmxhbVZqZEdsdmJraGhibVJzWldRbkxDQndjbTl0YVhObEtUdGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHaGhibVJzWlhJZ1BTQm5iRzlpWVd3dWIyNXlaV3BsWTNScGIyNW9ZVzVrYkdWa0tTQjdYRzRnSUNBZ0lDQm9ZVzVrYkdWeUtIc2djSEp2YldselpUb2djSEp2YldselpTd2djbVZoYzI5dU9pQndjbTl0YVhObExsOTJJSDBwTzF4dUlDQWdJSDFjYmlBZ2ZTazdYRzU5TzF4dWRtRnlJQ1J5WldwbFkzUWdQU0JtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjYmlBZ2RtRnlJSEJ5YjIxcGMyVWdQU0IwYUdsek8xeHVJQ0JwWmlBb2NISnZiV2x6WlM1ZlpDa2djbVYwZFhKdU8xeHVJQ0J3Y205dGFYTmxMbDlrSUQwZ2RISjFaVHRjYmlBZ2NISnZiV2x6WlNBOUlIQnliMjFwYzJVdVgzY2dmSHdnY0hKdmJXbHpaVHNnTHk4Z2RXNTNjbUZ3WEc0Z0lIQnliMjFwYzJVdVgzWWdQU0IyWVd4MVpUdGNiaUFnY0hKdmJXbHpaUzVmY3lBOUlESTdYRzRnSUdsbUlDZ2hjSEp2YldselpTNWZZU2tnY0hKdmJXbHpaUzVmWVNBOUlIQnliMjFwYzJVdVgyTXVjMnhwWTJVb0tUdGNiaUFnYm05MGFXWjVLSEJ5YjIxcGMyVXNJSFJ5ZFdVcE8xeHVmVHRjYm5aaGNpQWtjbVZ6YjJ4MlpTQTlJR1oxYm1OMGFXOXVJQ2gyWVd4MVpTa2dlMXh1SUNCMllYSWdjSEp2YldselpTQTlJSFJvYVhNN1hHNGdJSFpoY2lCMGFHVnVPMXh1SUNCcFppQW9jSEp2YldselpTNWZaQ2tnY21WMGRYSnVPMXh1SUNCd2NtOXRhWE5sTGw5a0lEMGdkSEoxWlR0Y2JpQWdjSEp2YldselpTQTlJSEJ5YjIxcGMyVXVYM2NnZkh3Z2NISnZiV2x6WlRzZ0x5OGdkVzUzY21Gd1hHNGdJSFJ5ZVNCN1hHNGdJQ0FnYVdZZ0tIQnliMjFwYzJVZ1BUMDlJSFpoYkhWbEtTQjBhSEp2ZHlCVWVYQmxSWEp5YjNJb1hDSlFjbTl0YVhObElHTmhiaWQwSUdKbElISmxjMjlzZG1Wa0lHbDBjMlZzWmx3aUtUdGNiaUFnSUNCcFppQW9kR2hsYmlBOUlHbHpWR2hsYm1GaWJHVW9kbUZzZFdVcEtTQjdYRzRnSUNBZ0lDQnRhV055YjNSaGMyc29ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCMllYSWdkM0poY0hCbGNpQTlJSHNnWDNjNklIQnliMjFwYzJVc0lGOWtPaUJtWVd4elpTQjlPeUF2THlCM2NtRndYRzRnSUNBZ0lDQWdJSFJ5ZVNCN1hHNGdJQ0FnSUNBZ0lDQWdkR2hsYmk1allXeHNLSFpoYkhWbExDQmpkSGdvSkhKbGMyOXNkbVVzSUhkeVlYQndaWElzSURFcExDQmpkSGdvSkhKbGFtVmpkQ3dnZDNKaGNIQmxjaXdnTVNrcE8xeHVJQ0FnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0pISmxhbVZqZEM1allXeHNLSGR5WVhCd1pYSXNJR1VwTzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtUdGNiaUFnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnY0hKdmJXbHpaUzVmZGlBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnY0hKdmJXbHpaUzVmY3lBOUlERTdYRzRnSUNBZ0lDQnViM1JwWm5rb2NISnZiV2x6WlN3Z1ptRnNjMlVwTzF4dUlDQWdJSDFjYmlBZ2ZTQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDUnlaV3BsWTNRdVkyRnNiQ2g3SUY5M09pQndjbTl0YVhObExDQmZaRG9nWm1Gc2MyVWdmU3dnWlNrN0lDOHZJSGR5WVhCY2JpQWdmVnh1ZlR0Y2JseHVMeThnWTI5dWMzUnlkV04wYjNJZ2NHOXNlV1pwYkd4Y2JtbG1JQ2doVlZORlgwNUJWRWxXUlNrZ2UxeHVJQ0F2THlBeU5TNDBMak11TVNCUWNtOXRhWE5sS0dWNFpXTjFkRzl5S1Z4dUlDQWtVSEp2YldselpTQTlJR1oxYm1OMGFXOXVJRkJ5YjIxcGMyVW9aWGhsWTNWMGIzSXBJSHRjYmlBZ0lDQmhia2x1YzNSaGJtTmxLSFJvYVhNc0lDUlFjbTl0YVhObExDQlFVazlOU1ZORkxDQW5YMmduS1R0Y2JpQWdJQ0JoUm5WdVkzUnBiMjRvWlhobFkzVjBiM0lwTzF4dUlDQWdJRWx1ZEdWeWJtRnNMbU5oYkd3b2RHaHBjeWs3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdWNFpXTjFkRzl5S0dOMGVDZ2tjbVZ6YjJ4MlpTd2dkR2hwY3l3Z01Ta3NJR04wZUNna2NtVnFaV04wTENCMGFHbHpMQ0F4S1NrN1hHNGdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ0lDQWtjbVZxWldOMExtTmhiR3dvZEdocGN5d2daWEp5S1R0Y2JpQWdJQ0I5WEc0Z0lIMDdYRzRnSUM4dklHVnpiR2x1ZEMxa2FYTmhZbXhsTFc1bGVIUXRiR2x1WlNCdWJ5MTFiblZ6WldRdGRtRnljMXh1SUNCSmJuUmxjbTVoYkNBOUlHWjFibU4wYVc5dUlGQnliMjFwYzJVb1pYaGxZM1YwYjNJcElIdGNiaUFnSUNCMGFHbHpMbDlqSUQwZ1cxMDdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklEd3RJR0YzWVdsMGFXNW5JSEpsWVdOMGFXOXVjMXh1SUNBZ0lIUm9hWE11WDJFZ1BTQjFibVJsWm1sdVpXUTdJQ0FnSUNBZ0x5OGdQQzBnWTJobFkydGxaQ0JwYmlCcGMxVnVhR0Z1Wkd4bFpDQnlaV0ZqZEdsdmJuTmNiaUFnSUNCMGFHbHpMbDl6SUQwZ01Ec2dJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklEd3RJSE4wWVhSbFhHNGdJQ0FnZEdocGN5NWZaQ0E5SUdaaGJITmxPeUFnSUNBZ0lDQWdJQ0F2THlBOExTQmtiMjVsWEc0Z0lDQWdkR2hwY3k1ZmRpQTlJSFZ1WkdWbWFXNWxaRHNnSUNBZ0lDQXZMeUE4TFNCMllXeDFaVnh1SUNBZ0lIUm9hWE11WDJnZ1BTQXdPeUFnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdQQzBnY21WcVpXTjBhVzl1SUhOMFlYUmxMQ0F3SUMwZ1pHVm1ZWFZzZEN3Z01TQXRJR2hoYm1Sc1pXUXNJRElnTFNCMWJtaGhibVJzWldSY2JpQWdJQ0IwYUdsekxsOXVJRDBnWm1Gc2MyVTdJQ0FnSUNBZ0lDQWdJQzh2SUR3dElHNXZkR2xtZVZ4dUlDQjlPMXh1SUNCSmJuUmxjbTVoYkM1d2NtOTBiM1I1Y0dVZ1BTQnlaWEYxYVhKbEtDY3VMMTl5WldSbFptbHVaUzFoYkd3bktTZ2tVSEp2YldselpTNXdjbTkwYjNSNWNHVXNJSHRjYmlBZ0lDQXZMeUF5TlM0MExqVXVNeUJRY205dGFYTmxMbkJ5YjNSdmRIbHdaUzUwYUdWdUtHOXVSblZzWm1sc2JHVmtMQ0J2YmxKbGFtVmpkR1ZrS1Z4dUlDQWdJSFJvWlc0NklHWjFibU4wYVc5dUlIUm9aVzRvYjI1R2RXeG1hV3hzWldRc0lHOXVVbVZxWldOMFpXUXBJSHRjYmlBZ0lDQWdJSFpoY2lCeVpXRmpkR2x2YmlBOUlHNWxkMUJ5YjIxcGMyVkRZWEJoWW1sc2FYUjVLSE53WldOcFpYTkRiMjV6ZEhKMVkzUnZjaWgwYUdsekxDQWtVSEp2YldselpTa3BPMXh1SUNBZ0lDQWdjbVZoWTNScGIyNHViMnNnUFNCMGVYQmxiMllnYjI1R2RXeG1hV3hzWldRZ1BUMGdKMloxYm1OMGFXOXVKeUEvSUc5dVJuVnNabWxzYkdWa0lEb2dkSEoxWlR0Y2JpQWdJQ0FnSUhKbFlXTjBhVzl1TG1aaGFXd2dQU0IwZVhCbGIyWWdiMjVTWldwbFkzUmxaQ0E5UFNBblpuVnVZM1JwYjI0bklDWW1JRzl1VW1WcVpXTjBaV1E3WEc0Z0lDQWdJQ0J5WldGamRHbHZiaTVrYjIxaGFXNGdQU0JwYzA1dlpHVWdQeUJ3Y205alpYTnpMbVJ2YldGcGJpQTZJSFZ1WkdWbWFXNWxaRHRjYmlBZ0lDQWdJSFJvYVhNdVgyTXVjSFZ6YUNoeVpXRmpkR2x2YmlrN1hHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZllTa2dkR2hwY3k1ZllTNXdkWE5vS0hKbFlXTjBhVzl1S1R0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TGw5ektTQnViM1JwWm5rb2RHaHBjeXdnWm1Gc2MyVXBPMXh1SUNBZ0lDQWdjbVYwZFhKdUlISmxZV04wYVc5dUxuQnliMjFwYzJVN1hHNGdJQ0FnZlN4Y2JpQWdJQ0F2THlBeU5TNDBMalV1TVNCUWNtOXRhWE5sTG5CeWIzUnZkSGx3WlM1allYUmphQ2h2YmxKbGFtVmpkR1ZrS1Z4dUlDQWdJQ2RqWVhSamFDYzZJR1oxYm1OMGFXOXVJQ2h2YmxKbGFtVmpkR1ZrS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTBhR1Z1S0hWdVpHVm1hVzVsWkN3Z2IyNVNaV3BsWTNSbFpDazdYRzRnSUNBZ2ZWeHVJQ0I5S1R0Y2JpQWdUM2R1VUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ2RtRnlJSEJ5YjIxcGMyVWdQU0J1WlhjZ1NXNTBaWEp1WVd3b0tUdGNiaUFnSUNCMGFHbHpMbkJ5YjIxcGMyVWdQU0J3Y205dGFYTmxPMXh1SUNBZ0lIUm9hWE11Y21WemIyeDJaU0E5SUdOMGVDZ2tjbVZ6YjJ4MlpTd2djSEp2YldselpTd2dNU2s3WEc0Z0lDQWdkR2hwY3k1eVpXcGxZM1FnUFNCamRIZ29KSEpsYW1WamRDd2djSEp2YldselpTd2dNU2s3WEc0Z0lIMDdYRzRnSUc1bGQxQnliMjFwYzJWRFlYQmhZbWxzYVhSNVRXOWtkV3hsTG1ZZ1BTQnVaWGRRY205dGFYTmxRMkZ3WVdKcGJHbDBlU0E5SUdaMWJtTjBhVzl1SUNoREtTQjdYRzRnSUNBZ2NtVjBkWEp1SUVNZ1BUMDlJQ1JRY205dGFYTmxJSHg4SUVNZ1BUMDlJRmR5WVhCd1pYSmNiaUFnSUNBZ0lEOGdibVYzSUU5M2JsQnliMjFwYzJWRFlYQmhZbWxzYVhSNUtFTXBYRzRnSUNBZ0lDQTZJRzVsZDBkbGJtVnlhV05RY205dGFYTmxRMkZ3WVdKcGJHbDBlU2hES1R0Y2JpQWdmVHRjYm4xY2JseHVKR1Y0Y0c5eWRDZ2taWGh3YjNKMExrY2dLeUFrWlhod2IzSjBMbGNnS3lBa1pYaHdiM0owTGtZZ0tpQWhWVk5GWDA1QlZFbFdSU3dnZXlCUWNtOXRhWE5sT2lBa1VISnZiV2x6WlNCOUtUdGNibkpsY1hWcGNtVW9KeTR2WDNObGRDMTBieTF6ZEhKcGJtY3RkR0ZuSnlrb0pGQnliMjFwYzJVc0lGQlNUMDFKVTBVcE8xeHVjbVZ4ZFdseVpTZ25MaTlmYzJWMExYTndaV05wWlhNbktTaFFVazlOU1ZORktUdGNibGR5WVhCd1pYSWdQU0J5WlhGMWFYSmxLQ2N1TDE5amIzSmxKeWxiVUZKUFRVbFRSVjA3WEc1Y2JpOHZJSE4wWVhScFkzTmNiaVJsZUhCdmNuUW9KR1Y0Y0c5eWRDNVRJQ3NnSkdWNGNHOXlkQzVHSUNvZ0lWVlRSVjlPUVZSSlZrVXNJRkJTVDAxSlUwVXNJSHRjYmlBZ0x5OGdNalV1TkM0MExqVWdVSEp2YldselpTNXlaV3BsWTNRb2NpbGNiaUFnY21WcVpXTjBPaUJtZFc1amRHbHZiaUJ5WldwbFkzUW9jaWtnZTF4dUlDQWdJSFpoY2lCallYQmhZbWxzYVhSNUlEMGdibVYzVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtvZEdocGN5azdYRzRnSUNBZ2RtRnlJQ1FrY21WcVpXTjBJRDBnWTJGd1lXSnBiR2wwZVM1eVpXcGxZM1E3WEc0Z0lDQWdKQ1J5WldwbFkzUW9jaWs3WEc0Z0lDQWdjbVYwZFhKdUlHTmhjR0ZpYVd4cGRIa3VjSEp2YldselpUdGNiaUFnZlZ4dWZTazdYRzRrWlhod2IzSjBLQ1JsZUhCdmNuUXVVeUFySUNSbGVIQnZjblF1UmlBcUlDaE1TVUpTUVZKWklIeDhJQ0ZWVTBWZlRrRlVTVlpGS1N3Z1VGSlBUVWxUUlN3Z2UxeHVJQ0F2THlBeU5TNDBMalF1TmlCUWNtOXRhWE5sTG5KbGMyOXNkbVVvZUNsY2JpQWdjbVZ6YjJ4MlpUb2dablZ1WTNScGIyNGdjbVZ6YjJ4MlpTaDRLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIQnliMjFwYzJWU1pYTnZiSFpsS0V4SlFsSkJVbGtnSmlZZ2RHaHBjeUE5UFQwZ1YzSmhjSEJsY2lBL0lDUlFjbTl0YVhObElEb2dkR2hwY3l3Z2VDazdYRzRnSUgxY2JuMHBPMXh1SkdWNGNHOXlkQ2drWlhod2IzSjBMbE1nS3lBa1pYaHdiM0owTGtZZ0tpQWhLRlZUUlY5T1FWUkpWa1VnSmlZZ2NtVnhkV2x5WlNnbkxpOWZhWFJsY2kxa1pYUmxZM1FuS1NobWRXNWpkR2x2YmlBb2FYUmxjaWtnZTF4dUlDQWtVSEp2YldselpTNWhiR3dvYVhSbGNpbGJKMk5oZEdOb0oxMG9aVzF3ZEhrcE8xeHVmU2twTENCUVVrOU5TVk5GTENCN1hHNGdJQzh2SURJMUxqUXVOQzR4SUZCeWIyMXBjMlV1WVd4c0tHbDBaWEpoWW14bEtWeHVJQ0JoYkd3NklHWjFibU4wYVc5dUlHRnNiQ2hwZEdWeVlXSnNaU2tnZTF4dUlDQWdJSFpoY2lCRElEMGdkR2hwY3p0Y2JpQWdJQ0IyWVhJZ1kyRndZV0pwYkdsMGVTQTlJRzVsZDFCeWIyMXBjMlZEWVhCaFltbHNhWFI1S0VNcE8xeHVJQ0FnSUhaaGNpQnlaWE52YkhabElEMGdZMkZ3WVdKcGJHbDBlUzV5WlhOdmJIWmxPMXh1SUNBZ0lIWmhjaUJ5WldwbFkzUWdQU0JqWVhCaFltbHNhWFI1TG5KbGFtVmpkRHRjYmlBZ0lDQjJZWElnY21WemRXeDBJRDBnY0dWeVptOXliU2htZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCMllYSWdkbUZzZFdWeklEMGdXMTA3WEc0Z0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNBd08xeHVJQ0FnSUNBZ2RtRnlJSEpsYldGcGJtbHVaeUE5SURFN1hHNGdJQ0FnSUNCbWIzSlBaaWhwZEdWeVlXSnNaU3dnWm1Gc2MyVXNJR1oxYm1OMGFXOXVJQ2h3Y205dGFYTmxLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQWthVzVrWlhnZ1BTQnBibVJsZUNzck8xeHVJQ0FnSUNBZ0lDQjJZWElnWVd4eVpXRmtlVU5oYkd4bFpDQTlJR1poYkhObE8xeHVJQ0FnSUNBZ0lDQjJZV3gxWlhNdWNIVnphQ2gxYm1SbFptbHVaV1FwTzF4dUlDQWdJQ0FnSUNCeVpXMWhhVzVwYm1jckt6dGNiaUFnSUNBZ0lDQWdReTV5WlhOdmJIWmxLSEJ5YjIxcGMyVXBMblJvWlc0b1puVnVZM1JwYjI0Z0tIWmhiSFZsS1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dGc2NtVmhaSGxEWVd4c1pXUXBJSEpsZEhWeWJqdGNiaUFnSUNBZ0lDQWdJQ0JoYkhKbFlXUjVRMkZzYkdWa0lEMGdkSEoxWlR0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlhOYkpHbHVaR1Y0WFNBOUlIWmhiSFZsTzF4dUlDQWdJQ0FnSUNBZ0lDMHRjbVZ0WVdsdWFXNW5JSHg4SUhKbGMyOXNkbVVvZG1Gc2RXVnpLVHRjYmlBZ0lDQWdJQ0FnZlN3Z2NtVnFaV04wS1R0Y2JpQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0xTMXlaVzFoYVc1cGJtY2dmSHdnY21WemIyeDJaU2gyWVd4MVpYTXBPMXh1SUNBZ0lIMHBPMXh1SUNBZ0lHbG1JQ2h5WlhOMWJIUXVaU2tnY21WcVpXTjBLSEpsYzNWc2RDNTJLVHRjYmlBZ0lDQnlaWFIxY200Z1kyRndZV0pwYkdsMGVTNXdjbTl0YVhObE8xeHVJQ0I5TEZ4dUlDQXZMeUF5TlM0MExqUXVOQ0JRY205dGFYTmxMbkpoWTJVb2FYUmxjbUZpYkdVcFhHNGdJSEpoWTJVNklHWjFibU4wYVc5dUlISmhZMlVvYVhSbGNtRmliR1VwSUh0Y2JpQWdJQ0IyWVhJZ1F5QTlJSFJvYVhNN1hHNGdJQ0FnZG1GeUlHTmhjR0ZpYVd4cGRIa2dQU0J1WlhkUWNtOXRhWE5sUTJGd1lXSnBiR2wwZVNoREtUdGNiaUFnSUNCMllYSWdjbVZxWldOMElEMGdZMkZ3WVdKcGJHbDBlUzV5WldwbFkzUTdYRzRnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJSEJsY21admNtMG9ablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnWm05eVQyWW9hWFJsY21GaWJHVXNJR1poYkhObExDQm1kVzVqZEdsdmJpQW9jSEp2YldselpTa2dlMXh1SUNBZ0lDQWdJQ0JETG5KbGMyOXNkbVVvY0hKdmJXbHpaU2t1ZEdobGJpaGpZWEJoWW1sc2FYUjVMbkpsYzI5c2RtVXNJSEpsYW1WamRDazdYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlLVHRjYmlBZ0lDQnBaaUFvY21WemRXeDBMbVVwSUhKbGFtVmpkQ2h5WlhOMWJIUXVkaWs3WEc0Z0lDQWdjbVYwZFhKdUlHTmhjR0ZpYVd4cGRIa3VjSEp2YldselpUdGNiaUFnZlZ4dWZTazdYRzRpTENKamIyNXpkQ0JzYVdJZ1BTQjNhVzVrYjNjdWJHbGlJSHg4SUNoM2FXNWtiM2N1YkdsaUlEMGdlMzBwWEc1Y2JpOHFLbHh1SUNvZ1ZtVnljMmx2YmlCamJHRnpjeTVjYmlBcUlFQmpiR0Z6Y3lCc2FXSXVaVzUyZmxabGNuTnBiMjVjYmlBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCMklDMGdkbVZ5YzJsdmJpQnVkVzFpWlhJdVhHNGdLaTljYm1WNGNHOXlkQ0JrWldaaGRXeDBJR1oxYm1OMGFXOXVJRlpsY25OcGIyNGdLSFlwSUh0Y2JpQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ2QyWVd3bkxDQjdYRzRnSUNBZ2RtRnNkV1U2SUhZdWRHOVRkSEpwYm1jb0tTeGNiaUFnSUNCbGJuVnRaWEpoWW14bE9pQjBjblZsWEc0Z0lIMHBYRzVjYmlBZ0x5b3FYRzRnSUNBcUlHeGhjbWRsY2lCMGFHRnVYRzRnSUNBcUlFQnRaWFJvYjJRZ1ozUmNiaUFnSUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUhZZ0xTQjJaWEp6YVc5dVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTBKdmIyeGxZVzU5SUhKbGMzVnNkRnh1SUNBZ0tpQkFhVzV6ZEdGdVkyVmNiaUFnSUNvZ1FHMWxiV0psY205bUlGWmxjbk5wYjI1Y2JpQWdJQ292WEc0Z0lIUm9hWE11WjNRZ1BTQm1kVzVqZEdsdmJpQW9kaWtnZTF4dUlDQWdJSEpsZEhWeWJpQldaWEp6YVc5dUxtTnZiWEJoY21Vb2RHaHBjeXdnZGlrZ1BpQXdYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nYkdGeVoyVnlJSFJvWVc0Z2IzSWdaWEYxWVd3Z2RHOHVYRzRnSUNBcUlFQnRaWFJvYjJRZ1ozUmxYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCMklDMGdkbVZ5YzJsdmJseHVJQ0FnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlNCeVpYTjFiSFJjYmlBZ0lDb2dRR2x1YzNSaGJtTmxYRzRnSUNBcUlFQnRaVzFpWlhKdlppQldaWEp6YVc5dVhHNGdJQ0FxTDF4dUlDQjBhR2x6TG1kMFpTQTlJR1oxYm1OMGFXOXVJQ2gyS1NCN1hHNGdJQ0FnY21WMGRYSnVJRlpsY25OcGIyNHVZMjl0Y0dGeVpTaDBhR2x6TENCMktTQStQU0F3WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ2JHVnpjeUIwYUdGdUxseHVJQ0FnS2lCQWJXVjBhRzlrSUd4MFhHNGdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0IySUMwZ2RtVnljMmx2Ymx4dUlDQWdLaUJBY21WMGRYSnVJSHRDYjI5c1pXRnVmU0J5WlhOMWJIUmNiaUFnSUNvZ1FHbHVjM1JoYm1ObFhHNGdJQ0FxSUVCdFpXMWlaWEp2WmlCV1pYSnphVzl1WEc0Z0lDQXFMMXh1SUNCMGFHbHpMbXgwSUQwZ1puVnVZM1JwYjI0Z0tIWXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ZtVnljMmx2Ymk1amIyMXdZWEpsS0hSb2FYTXNJSFlwSUR3Z01GeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJR3hsYzNNZ2RHaGhiaUJ2Y2lCbGNYVmhiQ0IwYnk1Y2JpQWdJQ29nUUcxbGRHaHZaQ0JzZEdWY2JpQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSFlnTFNCMlpYSnphVzl1WEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMEp2YjJ4bFlXNTlJSEpsYzNWc2RGeHVJQ0FnS2lCQWFXNXpkR0Z1WTJWY2JpQWdJQ29nUUcxbGJXSmxjbTltSUZabGNuTnBiMjVjYmlBZ0lDb3ZYRzRnSUhSb2FYTXViSFJsSUQwZ1puVnVZM1JwYjI0Z0tIWXBJSHRjYmlBZ0lDQnlaWFIxY200Z1ZtVnljMmx2Ymk1amIyMXdZWEpsS0hSb2FYTXNJSFlwSUR3OUlEQmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJsY1hWaGJDQjBieTVjYmlBZ0lDb2dRRzFsZEdodlpDQmxjVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UxTjBjbWx1WjMwZ2RpQXRJSFpsY25OcGIyNWNiaUFnSUNvZ1FISmxkSFZ5YmlCN1FtOXZiR1ZoYm4wZ1pYRjFZV3dnZEc5Y2JpQWdJQ29nUUdsdWMzUmhibU5sWEc0Z0lDQXFJRUJ0WlcxaVpYSnZaaUJXWlhKemFXOXVYRzRnSUNBcUwxeHVJQ0IwYUdsekxtVnhJRDBnWm5WdVkzUnBiMjRnS0hZcElIdGNiaUFnSUNCeVpYUjFjbTRnVm1WeWMybHZiaTVqYjIxd1lYSmxLSFJvYVhNc0lIWXBJRDA5UFNBd1hHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQjJaWEp6YVc5dUlHNTFiV0psY2lCemRISnBibWN1WEc0Z0tpQkFiV1YwYUc5a0lIUnZVM1J5YVc1blhHNGdLaUJBY21WMGRYSnVJSHRUZEhKcGJtZDlJR04xY25KbGJuUWdkbVZ5YzJsdmJpQnVkVzFpWlhJZ2MzUnlhVzVuTGx4dUlDb2dRR2x1YzNSaGJtTmxYRzRnS2lCQWJXVnRZbVZ5YjJZZ1ZtVnljMmx2Ymx4dUlDb3ZYRzVXWlhKemFXOXVMbkJ5YjNSdmRIbHdaUzUwYjFOMGNtbHVaeUE5SUdaMWJtTjBhVzl1SUNncElIdGNiaUFnY21WMGRYSnVJSFJvYVhNdWRtRnNYRzU5WEc1Y2JpOHFLbHh1SUNvZ2NtVjBkWEp1SUdOMWNuSmxiblFnZG1WeWMybHZiaUJ1ZFcxaVpYSXVYRzRnS2lCQWJXVjBhRzlrSUhaaGJIVmxUMlpjYmlBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OUlIWmxjbk5wYjI0Z2JuVnRZbVZ5WEc0Z0tpQkFhVzV6ZEdGdVkyVmNiaUFxSUVCdFpXMWlaWEp2WmlCV1pYSnphVzl1WEc0Z0tpOWNibFpsY25OcGIyNHVjSEp2ZEc5MGVYQmxMblpoYkhWbFQyWWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJR052Ym5OMElIWWdQU0IwYUdsekxuWmhiQzV6Y0d4cGRDZ25MaWNwWEc0Z0lHTnZibk4wSUhJZ1BTQmJYVnh1SUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElIWXViR1Z1WjNSb095QnBLeXNwSUh0Y2JpQWdJQ0JzWlhRZ2JpQTlJSEJoY25ObFNXNTBLSFpiYVYwc0lERXdLVnh1SUNBZ0lHbG1JQ2hwYzA1aFRpaHVLU2tnZTF4dUlDQWdJQ0FnYmlBOUlEQmNiaUFnSUNCOVhHNGdJQ0FnYkdWMElITWdQU0J1TG5SdlUzUnlhVzVuS0NsY2JpQWdJQ0JwWmlBb2N5NXNaVzVuZEdnZ1BDQTFLU0I3WEc0Z0lDQWdJQ0J6SUQwZ1FYSnlZWGtvTmlBdElITXViR1Z1WjNSb0tTNXFiMmx1S0Njd0p5a2dLeUJ6WEc0Z0lDQWdmVnh1SUNBZ0lISXVjSFZ6YUNoektWeHVJQ0FnSUdsbUlDaHlMbXhsYm1kMGFDQTlQVDBnTVNrZ2UxeHVJQ0FnSUNBZ2NpNXdkWE5vS0NjdUp5bGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhCaGNuTmxSbXh2WVhRb2NpNXFiMmx1S0NjbktTbGNibjFjYmx4dUx5b3FYRzRnS2lCamIyMXdZWEpsSUhSM2J5QjJaWEp6YVc5dWN5NWNiaUFxSUVCdFpYUm9iMlFnWTI5dGNHRnlaVnh1SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUhZeElDMGdkbVZ5YzJsdmJqRmNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0IyTWlBdElIWmxjbk5wYjI0eVhHNGdLaUJBY21WMGRYSnVJSHRPZFcxaVpYSjlJREFnWm05eUlHVnhkV0ZzYVhSNTc3eU1MVEVnWm05eUlHeGxjM01nZEdoaGJ1KzhqREVnWm05eUlHeGhjbWRsY2lCMGFHRnVMbHh1SUNvZ1FHMWxiV0psY205bUlGWmxjbk5wYjI1Y2JpQXFMMXh1Vm1WeWMybHZiaTVqYjIxd1lYSmxJRDBnWm5WdVkzUnBiMjRnS0hZeExDQjJNaWtnZTF4dUlDQjJNU0E5SUhZeExuUnZVM1J5YVc1bktDa3VjM0JzYVhRb0p5NG5LVnh1SUNCMk1pQTlJSFl5TG5SdlUzUnlhVzVuS0NrdWMzQnNhWFFvSnk0bktWeHVJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhZeExteGxibWQwYUNCOGZDQnBJRHdnZGpJdWJHVnVaM1JvT3lCcEt5c3BJSHRjYmlBZ0lDQnNaWFFnYmpFZ1BTQndZWEp6WlVsdWRDaDJNVnRwWFN3Z01UQXBYRzRnSUNBZ2JHVjBJRzR5SUQwZ2NHRnljMlZKYm5Rb2RqSmJhVjBzSURFd0tWeHVJQ0FnSUdsbUlDaDNhVzVrYjNjdWFYTk9ZVTRvYmpFcEtTQjdYRzRnSUNBZ0lDQnVNU0E5SURCY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hkcGJtUnZkeTVwYzA1aFRpaHVNaWtwSUh0Y2JpQWdJQ0FnSUc0eUlEMGdNRnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9iakVnUENCdU1pa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlDMHhYRzRnSUNBZ2ZWeHVJQ0FnSUdWc2MyVWdhV1lnS0c0eElENGdiaklwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUF4WEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQXdYRzU5WEc1Y2JpOHFLbHh1SUNvZzZLZWo1cDZRNVpLTTVwT041TDJjNTRtSTVweXM1WSszWEc0Z0tpQkFiV1YwYUc5a0lIWmxjbk5wYjI1Y2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjJJQzBnNlp5QTZLYUI2S2VqNXA2UTU1cUU1NG1JNXB5czVZKzNYRzRnS2lCQWNtVjBkWEp1SUh0c2FXSXVaVzUyZmxabGNuTnBiMjU5SUZabGNuTnZidVd1bnVTK2kxeHVJQ29nUUcxbGJXSmxjbTltSUd4cFlseHVJQ292WEc1c2FXSXVkbVZ5YzJsdmJpQTlJR1oxYm1OMGFXOXVJQ2gyS1NCN1hHNGdJSEpsZEhWeWJpQnVaWGNnVm1WeWMybHZiaWgyS1Z4dWZWeHVJaXdpWTI5dWMzUWdiR2xpSUQwZ2QybHVaRzkzTG14cFlpQjhmQ0FvZDJsdVpHOTNMbXhwWWlBOUlIdDlLVnh1WTI5dWMzUWdaVzUySUQwZ2JHbGlMbVZ1ZGlCOGZDQW9iR2xpTG1WdWRpQTlJSHQ5S1Z4dVhHNWpiMjV6ZENCelpXRnlZMmdnUFNCM2FXNWtiM2N1Ykc5allYUnBiMjR1YzJWaGNtTm9MbkpsY0d4aFkyVW9MMTVjWEQ4dkxDQW5KeWxjYm1WdWRpNXdZWEpoYlhNZ1BTQjdmVnh1YVdZZ0tITmxZWEpqYUNrZ2UxeHVJQ0JqYjI1emRDQndZWEpoYlhNZ1BTQnpaV0Z5WTJndWMzQnNhWFFvSnlZbktWeHVJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhCaGNtRnRjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUhCaGNtRnRjMXRwWFNBOUlIQmhjbUZ0YzF0cFhTNXpjR3hwZENnblBTY3BYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR1Z1ZGk1d1lYSmhiWE5iY0dGeVlXMXpXMmxkV3pCZFhTQTlJR1JsWTI5a1pWVlNTVU52YlhCdmJtVnVkQ2h3WVhKaGJYTmJhVjFiTVYwcFhHNGdJQ0FnZlZ4dUlDQWdJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0JsYm5ZdWNHRnlZVzF6VzNCaGNtRnRjMXRwWFZzd1hWMGdQU0J3WVhKaGJYTmJhVjFiTVYxY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmlJc0ltbHRjRzl5ZENBbkxpOTJaWEp6YVc5dUoxeHVhVzF3YjNKMElDY3VMM0JoY21GdGN5ZGNibHh1WTI5dWMzUWdiR2xpSUQwZ2QybHVaRzkzTG14cFlpQjhmQ0FvZDJsdVpHOTNMbXhwWWlBOUlIdDlLVnh1WTI5dWMzUWdaVzUySUQwZ2JHbGlMbVZ1ZGlCOGZDQW9iR2xpTG1WdWRpQTlJSHQ5S1Z4dVhHNWpiMjV6ZENCMVlTQTlJSGRwYm1SdmR5NXVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBYRzVzWlhRZ2JXRjBZMmhjYmx4dUx5b3FYRzRnS2lCdmMxeHVJQ292WEc1Y2JtMWhkR05vSUQwZ2RXRXViV0YwWTJnb0wxZHBibVJ2ZDNOY1hITlFhRzl1WlZ4Y2N5Zy9PazlUWEZ4ektUOG9XMXhjWkM1ZEt5a3ZLVnh1YVdZZ0tHMWhkR05vS1NCN1hHNGdJQzhxS2x4dUlDQWdLaUJBZEhsd1pTQjdUMkpxWldOMGZWeHVJQ0FnS2lCQWJXVnRZbVZ5YjJZZ2JHbGlMbVZ1ZGx4dUlDQWdLaUJBY0hKdmNHVnlkSGtnZTFOMGNtbHVaMzBnYm1GdFpTQXRJRzl6SUc1aGJXVXNJR1V1Wnk0Z1FXNWtjbTlwWkM5QmJtUnliMmxrVUdGa0wybFFhRzl1WlM5cFVHOWtMMmxRWVdRdlYybHVaRzkzY3lCUWFHOXVaUzkxYm10dWIzZHVMQ0JsZEdNdVhHNGdJQ0FxSUVCd2NtOXdaWEowZVNCN2JHbGlMbVZ1ZG41V1pYSnphVzl1ZlNCMlpYSnphVzl1SUMwZ2IzTWdkbVZ5YzJsdmJpNWNiaUFnSUNvZ1FIQnliM0JsY25SNUlIdENiMjlzWldGdWZTQnBjMWRwYm1SdmQzTlFhRzl1WlZ4dUlDQWdLaUJBY0hKdmNHVnlkSGtnZTBKdmIyeGxZVzU5SUdselNWQm9iMjVsSUMwZ2FYTWdhVkJvYjI1bEwybFViM1ZqYUZ4dUlDQWdLaUJBY0hKdmNHVnlkSGtnZTBKdmIyeGxZVzU5SUdselNWQmhaRnh1SUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMEp2YjJ4bFlXNTlJR2x6U1U5VFhHNGdJQ0FxSUVCd2NtOXdaWEowZVNCN1FtOXZiR1ZoYm4wZ2FYTkJibVJ5YjJsa1hHNGdJQ0FxSUVCd2NtOXdaWEowZVNCN1FtOXZiR1ZoYm4wZ2FYTkJibVJ5YjJsa1VHRmtYRzRnSUNBcUwxeHVJQ0JsYm5ZdWIzTWdQU0I3WEc0Z0lDQWdibUZ0WlRvZ0oxZHBibVJ2ZDNNZ1VHaHZibVVuTEZ4dUlDQWdJR2x6VjJsdVpHOTNjMUJvYjI1bE9pQjBjblZsTEZ4dUlDQWdJSFpsY25OcGIyNDZJRzFoZEdOb1d6RmRYRzRnSUgxY2JuMWNibVZzYzJVZ2FXWWdLQ0VoZFdFdWJXRjBZMmdvTDFOaFptRnlhUzhwSUNZbUlDaHRZWFJqYUNBOUlIVmhMbTFoZEdOb0tDOUJibVJ5YjJsa1cxeGNjeTlkS0Z0Y1hHUXVYU3NwTHlrcEtTQjdYRzRnSUdWdWRpNXZjeUE5SUh0Y2JpQWdJQ0IyWlhKemFXOXVPaUJ0WVhSamFGc3hYVnh1SUNCOVhHNWNiaUFnYVdZZ0tDaDFZUzV0WVhSamFDZ3ZUVzlpYVd4bFhGeHpLMU5oWm1GeWFTOHBLU2tnZTF4dUlDQWdJR1Z1ZGk1dmN5NXVZVzFsSUQwZ0owRnVaSEp2YVdRblhHNGdJQ0FnWlc1MkxtOXpMbWx6UVc1a2NtOXBaQ0E5SUhSeWRXVmNiaUFnZlZ4dUlDQmxiSE5sSUh0Y2JpQWdJQ0JsYm5ZdWIzTXVibUZ0WlNBOUlDZEJibVJ5YjJsa1VHRmtKMXh1SUNBZ0lHVnVkaTV2Y3k1cGMwRnVaSEp2YVdSUVlXUWdQU0IwY25WbFhHNGdJSDFjYm4xY2JtVnNjMlVnYVdZZ0tDaHRZWFJqYUNBOUlIVmhMbTFoZEdOb0tDOG9hVkJvYjI1bGZHbFFZV1I4YVZCdlpDa3ZLU2twSUh0Y2JpQWdZMjl1YzNRZ2JtRnRaU0E5SUcxaGRHTm9XekZkWEc1Y2JpQWdiV0YwWTJnZ1BTQjFZUzV0WVhSamFDZ3ZUMU1nS0Z0Y1hHUmZMbDByS1NCc2FXdGxJRTFoWXlCUFV5QllMeWxjYmx4dUlDQmxibll1YjNNZ1BTQjdYRzRnSUNBZ2JtRnRaVG9nYm1GdFpTeGNiaUFnSUNCcGMwbFFhRzl1WlRvZ0tHNWhiV1VnUFQwOUlDZHBVR2h2Ym1VbklIeDhJRzVoYldVZ1BUMDlJQ2RwVUc5a0p5a3NYRzRnSUNBZ2FYTkpVR0ZrT2lCdVlXMWxJRDA5UFNBbmFWQmhaQ2NzWEc0Z0lDQWdhWE5KVDFNNklIUnlkV1VzWEc0Z0lDQWdkbVZ5YzJsdmJqb2diV0YwWTJnZ0ppWWdiV0YwWTJoYk1WMHVjM0JzYVhRb0oxOG5LUzVxYjJsdUtDY3VKeWtnZkh3Z0p5ZGNiaUFnZlZ4dWZWeHVaV3h6WlNCN1hHNGdJR1Z1ZGk1dmN5QTlJSHRjYmlBZ0lDQnVZVzFsT2lBbmRXNXJibTkzYmljc1hHNGdJQ0FnZG1WeWMybHZiam9nSnpBdU1DNHdKMXh1SUNCOVhHNTlYRzVjYm1sbUlDaHNhV0l1ZG1WeWMybHZiaWtnZTF4dUlDQmxibll1YjNNdWRtVnljMmx2YmlBOUlHeHBZaTUyWlhKemFXOXVLR1Z1ZGk1dmN5NTJaWEp6YVc5dUtWeHVmVnh1WEc0dktpcGNiaUFxSUdKeWIzZHpaWEpjYmlBcUwxeHVYRzV0WVhSamFDQTlJSFZoTG0xaGRHTm9LQzhvUHpwVlExZEZRbnhWUTBKeWIzZHpaWEpjWEM4cEtGdGNYR1F1WFNzcEx5bGNibHh1YVdZZ0tHMWhkR05vS1NCN1hHNGdJQzhxS2x4dUlDQWdLaUJBZEhsd1pTQjdUMkpxWldOMGZWeHVJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1pXNTJYRzRnSUNBcUlFQndjbTl3WlhKMGVTQjdVM1J5YVc1bmZTQnVZVzFsSUMwZ1luSnZkM05sY2lCdVlXMWw3N3lNWlM1bkxpQlZReTlSVVM5R2FYSmxabTk0TDBOb2NtOXRaUzlCYm1SeWIybGtMMU5oWm1GeWFTOXBUMU1nVjJWaWRtbGxkeTlEYUhKdmJXVWdWMlZpZG1sbGR5OUpSUzlKUlUxdlltbHNaUzkxYm10dWIzZHVMQ0JsZEdNdVhHNGdJQ0FxSUVCd2NtOXdaWEowZVNCN1pXNTJmbFpsY25OcGIyNTlJSFpsY25OcGIyNGdMU0JpY205M2MyVnlJSFpsY25OcGIyNHVYRzRnSUNBcUlFQndjbTl3WlhKMGVTQjdRbTl2YkdWaGJuMGdhWE5WUTF4dUlDQWdLaUJBY0hKdmNHVnlkSGtnZTBKdmIyeGxZVzU5SUdselVWRmNiaUFnSUNvZ1FIQnliM0JsY25SNUlIdENiMjlzWldGdWZTQnBjMGxGWEc0Z0lDQXFJRUJ3Y205d1pYSjBlU0I3UW05dmJHVmhibjBnYVhOSlJVMXZZbWxzWlZ4dUlDQWdLaUJBY0hKdmNHVnlkSGtnZTBKdmIyeGxZVzU5SUdselNVVk1hV3RsVjJWaWEybDBYRzRnSUNBcUlFQndjbTl3WlhKMGVTQjdRbTl2YkdWaGJuMGdhWE5EYUhKdmJXVmNiaUFnSUNvZ1FIQnliM0JsY25SNUlIdENiMjlzWldGdWZTQnBjMEZ1WkhKdmFXUmNiaUFnSUNvZ1FIQnliM0JsY25SNUlIdENiMjlzWldGdWZTQnBjMU5oWm1GeWFWeHVJQ0FnS2lCQWNISnZjR1Z5ZEhrZ2UwSnZiMnhsWVc1OUlHbHpWMlZpZG1sbGQxeHVJQ0FnS2k5Y2JpQWdaVzUyTG1KeWIzZHpaWElnUFNCN1hHNGdJQ0FnYm1GdFpUb2dKMVZESnl4Y2JpQWdJQ0JwYzFWRE9pQjBjblZsTEZ4dUlDQWdJSFpsY25OcGIyNDZJRzFoZEdOb1d6RmRYRzRnSUgxY2JuMWNibVZzYzJVZ2FXWWdLQ2h0WVhSamFDQTlJSFZoTG0xaGRHTm9LQzlOVVZGQ2NtOTNjMlZ5WEZ3dktGdGNYR1F1WFNzcEx5a3BLU0I3WEc0Z0lHVnVkaTVpY205M2MyVnlJRDBnZTF4dUlDQWdJRzVoYldVNklDZFJVU2NzWEc0Z0lDQWdhWE5SVVRvZ2RISjFaU3hjYmlBZ0lDQjJaWEp6YVc5dU9pQnRZWFJqYUZzeFhWeHVJQ0I5WEc1OVhHNWxiSE5sSUdsbUlDZ29iV0YwWTJnZ1BTQjFZUzV0WVhSamFDZ3ZSbWx5WldadmVGeGNMeWhiWEZ4a0xsMHJLUzhwS1NrZ2UxeHVJQ0JsYm5ZdVluSnZkM05sY2lBOUlIdGNiaUFnSUNCdVlXMWxPaUFuUm1seVpXWnZlQ2NzWEc0Z0lDQWdhWE5HYVhKbFptOTRPaUIwY25WbExGeHVJQ0FnSUhabGNuTnBiMjQ2SUcxaGRHTm9XekZkWEc0Z0lIMWNibjFjYm1Wc2MyVWdhV1lnS0NodFlYUmphQ0E5SUhWaExtMWhkR05vS0M5TlUwbEZYRnh6S0Z0Y1hHUXVYU3NwTHlrcFhHNGdJSHg4SUNodFlYUmphQ0E5SUhWaExtMWhkR05vS0M5SlJVMXZZbWxzWlZ4Y0x5aGJYRnhrTGwwcktTOHBLU2tnZTF4dUlDQmxibll1WW5KdmQzTmxjaUE5SUh0Y2JpQWdJQ0IyWlhKemFXOXVPaUJ0WVhSamFGc3hYVnh1SUNCOVhHNWNiaUFnYVdZZ0tIVmhMbTFoZEdOb0tDOUpSVTF2WW1sc1pTOHBLU0I3WEc0Z0lDQWdaVzUyTG1KeWIzZHpaWEl1Ym1GdFpTQTlJQ2RKUlUxdlltbHNaU2RjYmlBZ0lDQmxibll1WW5KdmQzTmxjaTVwYzBsRlRXOWlhV3hsSUQwZ2RISjFaVnh1SUNCOVhHNGdJR1ZzYzJVZ2UxeHVJQ0FnSUdWdWRpNWljbTkzYzJWeUxtNWhiV1VnUFNBblNVVW5YRzRnSUNBZ1pXNTJMbUp5YjNkelpYSXVhWE5KUlNBOUlIUnlkV1ZjYmlBZ2ZWeHVYRzRnSUdsbUlDaDFZUzV0WVhSamFDZ3ZRVzVrY205cFpIeHBVR2h2Ym1VdktTa2dlMXh1SUNBZ0lHVnVkaTVpY205M2MyVnlMbWx6U1VWTWFXdGxWMlZpYTJsMElEMGdkSEoxWlZ4dUlDQjlYRzU5WEc1bGJITmxJR2xtSUNnb2JXRjBZMmdnUFNCMVlTNXRZWFJqYUNndktEODZRMmh5YjIxbGZFTnlhVTlUS1Z4Y0x5aGJYRnhrTGwwcktTOHBLU2tnZTF4dUlDQmxibll1WW5KdmQzTmxjaUE5SUh0Y2JpQWdJQ0J1WVcxbE9pQW5RMmh5YjIxbEp5eGNiaUFnSUNCcGMwTm9jbTl0WlRvZ2RISjFaU3hjYmlBZ0lDQjJaWEp6YVc5dU9pQnRZWFJqYUZzeFhWeHVJQ0I5WEc1Y2JpQWdhV1lnS0hWaExtMWhkR05vS0M5V1pYSnphVzl1WEZ3dlcxeGNaQ3N1WFN0Y1hITXFRMmh5YjIxbEx5a3BJSHRjYmlBZ0lDQmxibll1WW5KdmQzTmxjaTV1WVcxbElEMGdKME5vY205dFpTQlhaV0oyYVdWM0oxeHVJQ0FnSUdWdWRpNWljbTkzYzJWeUxtbHpWMlZpZG1sbGR5QTlJSFJ5ZFdWY2JpQWdmVnh1ZlZ4dVpXeHpaU0JwWmlBb0lTRjFZUzV0WVhSamFDZ3ZVMkZtWVhKcEx5a2dKaVlnS0cxaGRHTm9JRDBnZFdFdWJXRjBZMmdvTDBGdVpISnZhV1JiWEZ4ekwxMG9XMXhjWkM1ZEt5a3ZLU2twSUh0Y2JpQWdaVzUyTG1KeWIzZHpaWElnUFNCN1hHNGdJQ0FnYm1GdFpUb2dKMEZ1WkhKdmFXUW5MRnh1SUNBZ0lHbHpRVzVrY205cFpEb2dkSEoxWlN4Y2JpQWdJQ0IyWlhKemFXOXVPaUJ0WVhSamFGc3hYVnh1SUNCOVhHNTlYRzVsYkhObElHbG1JQ2gxWVM1dFlYUmphQ2d2YVZCb2IyNWxmR2xRWVdSOGFWQnZaQzhwS1NCN1hHNGdJR2xtSUNoMVlTNXRZWFJqYUNndlUyRm1ZWEpwTHlrcElIdGNiaUFnSUNCdFlYUmphQ0E5SUhWaExtMWhkR05vS0M5V1pYSnphVzl1WEZ3dktGdGNYR1F1WFNzcEx5bGNiaUFnSUNCbGJuWXVZbkp2ZDNObGNpQTlJSHRjYmlBZ0lDQWdJRzVoYldVNklDZFRZV1poY21rbkxGeHVJQ0FnSUNBZ2FYTlRZV1poY21rNklIUnlkV1VzWEc0Z0lDQWdJQ0IyWlhKemFXOXVPaUJ0WVhSamFDQW1KaUJ0WVhSamFGc3hYU0I4ZkNBbkoxeHVJQ0FnSUgxY2JpQWdmVnh1SUNCbGJITmxJSHRjYmlBZ0lDQnRZWFJqYUNBOUlIVmhMbTFoZEdOb0tDOVBVeUFvVzF4Y1pGOHVYU3NwSUd4cGEyVWdUV0ZqSUU5VElGZ3ZLVnh1SUNBZ0lHVnVkaTVpY205M2MyVnlJRDBnZTF4dUlDQWdJQ0FnYm1GdFpUb2dKMmxQVXlCWFpXSjJhV1YzSnl4Y2JpQWdJQ0FnSUdselYyVmlkbWxsZHpvZ2RISjFaU3hjYmlBZ0lDQWdJSFpsY25OcGIyNDZJRzFoZEdOb0lDWW1JRzFoZEdOb1d6RmRMbkpsY0d4aFkyVW9MMTh2Wnl3Z0p5NG5LU0I4ZkNBbkoxeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVpXeHpaU0I3WEc0Z0lHVnVkaTVpY205M2MyVnlJRDBnZTF4dUlDQWdJRzVoYldVNklDZDFibXR1YjNkdUp5eGNiaUFnSUNCMlpYSnphVzl1T2lBbk1DNHdMakFuWEc0Z0lIMWNibjFjYmx4dWFXWWdLR3hwWWk1MlpYSnphVzl1S1NCN1hHNGdJR1Z1ZGk1aWNtOTNjMlZ5TG5abGNuTnBiMjRnUFNCc2FXSXVkbVZ5YzJsdmJpaGxibll1WW5KdmQzTmxjaTUyWlhKemFXOXVLVnh1ZlZ4dUlpd2lMeXBjYmlBcUlFeHBZMlZ1YzJWa0lIUnZJSFJvWlNCQmNHRmphR1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2YmlBb1FWTkdLU0IxYm1SbGNpQnZibVZjYmlBcUlHOXlJRzF2Y21VZ1kyOXVkSEpwWW5WMGIzSWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUnpMaUFnVTJWbElIUm9aU0JPVDFSSlEwVWdabWxzWlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZDJsMGFDQjBhR2x6SUhkdmNtc2dabTl5SUdGa1pHbDBhVzl1WVd3Z2FXNW1iM0p0WVhScGIyNWNiaUFxSUhKbFoyRnlaR2x1WnlCamIzQjVjbWxuYUhRZ2IzZHVaWEp6YUdsd0xpQWdWR2hsSUVGVFJpQnNhV05sYm5ObGN5QjBhR2x6SUdacGJHVmNiaUFxSUhSdklIbHZkU0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVmNiaUFxSUZ3aVRHbGpaVzV6WlZ3aUtUc2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaVnh1SUNvZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM0Z0lGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTEZ4dUlDb2djMjltZEhkaGNtVWdaR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc1Y2JpQXFJRndpUVZNZ1NWTmNJaUJDUVZOSlV5d2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaWEc0Z0tpQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGlBZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1ZjYmlBcUlITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1RZ2JHbHRhWFJoZEdsdmJuTmNiaUFxSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVjYmk4dklFQm1iRzkzWEc1Y2JtTnZibk4wSUhSdlUzUnlhVzVuSUQwZ1QySnFaV04wTG5CeWIzUnZkSGx3WlM1MGIxTjBjbWx1WjF4dVhHNHZLaXBjYmlBcUlGTjBjbWxqZENCdlltcGxZM1FnZEhsd1pTQmphR1ZqYXk0Z1QyNXNlU0J5WlhSMWNtNXpJSFJ5ZFdWY2JpQXFJR1p2Y2lCd2JHRnBiaUJLWVhaaFUyTnlhWEIwSUc5aWFtVmpkSE11WEc0Z0tseHVJQ29nUUhCaGNtRnRJSHNxZlNCdlltcGNiaUFxSUVCeVpYUjFjbTRnZTBKdmIyeGxZVzU5WEc0Z0tpOWNibU52Ym5OMElFOUNTa1ZEVkY5VFZGSkpUa2NnUFNBblcyOWlhbVZqZENCUFltcGxZM1JkSjF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdselVHeGhhVzVQWW1wbFkzUWdLRzlpYWo4NklHMXBlR1ZrS1RvZ1ltOXZiR1ZoYmlCN1hHNGdJSEpsZEhWeWJpQjBiMU4wY21sdVp5NWpZV3hzS0c5aWFpa2dQVDA5SUU5Q1NrVkRWRjlUVkZKSlRrZGNibjFjYmx4dVkyOXVjM1FnUVZKU1FWbGZVMVJTU1U1SElEMGdKMXR2WW1wbFkzUWdRWEp5WVhsZEoxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHbHpRWEp5WVhrZ0tHRnljajg2SUcxcGVHVmtLVG9nWW05dmJHVmhiaUI3WEc0Z0lISmxkSFZ5YmlCMGIxTjBjbWx1Wnk1allXeHNLR0Z5Y2lrZ1BUMDlJRUZTVWtGWlgxTlVVa2xPUjF4dWZWeHVJaXdpTHlwY2JpQXFJRXhwWTJWdWMyVmtJSFJ2SUhSb1pTQkJjR0ZqYUdVZ1UyOW1kSGRoY21VZ1JtOTFibVJoZEdsdmJpQW9RVk5HS1NCMWJtUmxjaUJ2Ym1WY2JpQXFJRzl5SUcxdmNtVWdZMjl1ZEhKcFluVjBiM0lnYkdsalpXNXpaU0JoWjNKbFpXMWxiblJ6TGlBZ1UyVmxJSFJvWlNCT1QxUkpRMFVnWm1sc1pWeHVJQ29nWkdsemRISnBZblYwWldRZ2QybDBhQ0IwYUdseklIZHZjbXNnWm05eUlHRmtaR2wwYVc5dVlXd2dhVzVtYjNKdFlYUnBiMjVjYmlBcUlISmxaMkZ5WkdsdVp5QmpiM0I1Y21sbmFIUWdiM2R1WlhKemFHbHdMaUFnVkdobElFRlRSaUJzYVdObGJuTmxjeUIwYUdseklHWnBiR1ZjYmlBcUlIUnZJSGx2ZFNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1ZjYmlBcUlGd2lUR2xqWlc1elpWd2lLVHNnZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlZ4dUlDb2dkMmwwYUNCMGFHVWdUR2xqWlc1elpTNGdJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxGeHVJQ29nYzI5bWRIZGhjbVVnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNWNiaUFxSUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WlhHNGdLaUJMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xpQWdVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdWY2JpQXFJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUWdiR2x0YVhSaGRHbHZibk5jYmlBcUlIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc0dkx5QkFabXh2ZDF4dWFXMXdiM0owSUh0Y2JpQWdhWE5CY25KaGVWeHVmU0JtY205dElDY3VMM1I1Y0dVblhHNHZLaXBjYmlBcUlFMXBlQ0J3Y205d1pYSjBhV1Z6SUdsdWRHOGdkR0Z5WjJWMElHOWlhbVZqZEM1Y2JpQXFJSFJvWlNCeWFXZG9kR1Z6ZENCdlltcGxZM1FuY3lCMllXeDFaU0JvWVhNZ2RHaGxJR2hwWjJobGMzUWdjSEpwYjNKcGRIa3VYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCbGVIUmxibVFnS0hSdk9pQjdmU3dnTGk0dVlYSm5jem9nUVhKeVlYazhlMzArS1RvZ2UzMGdlMXh1SUNCcFppQW9JV0Z5WjNNZ2ZId2dZWEpuY3k1c1pXNW5kR2dnUEQwZ01Da2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGIxeHVJQ0I5WEc0Z0lHRnlaM011Wm05eVJXRmphQ2htY205dElEMCtJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR1p5YjIwZ0lUMDlJQ2R2WW1wbFkzUW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNGdJQ0FnWm05eUlDaGpiMjV6ZENCclpYa2dhVzRnWm5KdmJTa2dlMXh1SUNBZ0lDQWdkRzliYTJWNVhTQTlJR1p5YjIxYmEyVjVYVnh1SUNBZ0lIMWNiaUFnZlNsY2JpQWdjbVYwZFhKdUlIUnZYRzU5WEc0dktpcGNiaUFxSUUxcGVDQjBjblYwYUhrZ2IzSWdKeWNnY0hKdmNHVnlkSGtnZG1Gc2RXVnpJR2x1ZEc4Z2RHRnlaMlYwSUc5aWFtVmpkQzVjYmlBcUlHMXZjM1JzZVNCbWIzSWdiV1Z5WjJsdVp5QnpkSGxzWlhNdUlDaDBhR0YwSjNNZ2QyaDVJQ2NuSUdseklHWmhiSE41SUdKMWRDQnpkR2xzYkNCemFHOTFiR1FnWW1VZ1kyOTFiblJsWkNCcGJpNHBYRzRnS2lCMGFHVWdjbWxuYUhSbGMzUWdiMkpxWldOMEozTWdkbUZzZFdVZ2FHRnpJSFJvWlNCb2FXZG9aWE4wSUhCeWFXOXlhWFI1TGx4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaWGgwWlc1a1ZISjFkR2g1SUNoMGJ6b2dlMzBzSUM0dUxtRnlaM002SUVGeWNtRjVQSHQ5UGlrNklIdDlJSHRjYmlBZ2FXWWdLQ0ZoY21keklIeDhJR0Z5WjNNdWJHVnVaM1JvSUR3OUlEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHOWNiaUFnZlZ4dUlDQmhjbWR6TG1admNrVmhZMmdvWm5KdmJTQTlQaUI3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJtY205dElDRTlQU0FuYjJKcVpXTjBKeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ2ZWeHVJQ0FnSUd4bGRDQnBYRzRnSUNBZ1ptOXlJQ2hqYjI1emRDQnJaWGtnYVc0Z1puSnZiU2tnZTF4dUlDQWdJQ0FnYVdZZ0tDZ29hU0E5SUdaeWIyMWJhMlY1WFNrZ2ZId2dhU0E5UFQwZ0p5Y2dmSHdnYVNBOVBUMGdNQ2tnSmlZZ2FTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdkRzliYTJWNVhTQTlJR2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUgwcFhHNGdJSEpsZEhWeWJpQjBiMXh1ZlZ4dUx5b3FYRzRnS2lCTmFYZ2djM0JsWTJsbWFXVmtJSEJ5YjNCbGNuUnBaWE1nYVc1MGJ5QjBZWEpuWlhRZ2IySnFaV04wTGx4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaWGgwWlc1a1MyVjVjeUFvZEc4NklIdDlMQ0JtY205dE9pQjdmU0E5SUh0OUxDQnJaWGx6T2lCQmNuSmhlVHh6ZEhKcGJtYytLVG9nZTMwZ2UxeHVJQ0FvYTJWNWN5QjhmQ0JiWFNrdVptOXlSV0ZqYUNoclpYa2dQVDRnZTF4dUlDQWdJR1p5YjIwZ0ppWWdLSFJ2VzJ0bGVWMGdQU0JtY205dFcydGxlVjBwWEc0Z0lIMHBYRzRnSUhKbGRIVnliaUIwYjF4dWZWeHVMeW9xWEc0Z0tpQkZlSFJ5WVdOMElITndaV05wWm1sbFpDQndjbTl3WlhKMGFXVnpJR1p5YjIwZ2MzSmpJSFJ2SUhSaGNtZGxkQ0J2WW1wbFkzUXVYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCbGVIUnlZV04wUzJWNWN5QW9kRzg2SUh0OUxDQm1jbTl0T2lCN2ZTQTlJSHQ5TENCclpYbHpPaUJCY25KaGVUeHpkSEpwYm1jK0tTQjdYRzRnSUdsbUlDZ2habkp2YlNrZ2UxeHVJQ0FnSUhKbGRIVnliaUIwYjF4dUlDQjlYRzRnSUNoclpYbHpJSHg4SUZ0ZEtTNW1iM0pGWVdOb0tHdGxlU0E5UGlCN1hHNGdJQ0FnWm5KdmJTQW1KaUFvZEc5YmEyVjVYU0E5SUdaeWIyMWJhMlY1WFNsY2JpQWdJQ0JtY205dElDWW1JQ2hrWld4bGRHVWdabkp2YlZ0clpYbGRLVnh1SUNCOUtWeHVJQ0J5WlhSMWNtNGdkRzljYm4xY2JpOHFLbHh1SUNvZ1UybHRjR3hsSUdKcGJtUXNJR1poYzNSbGNpQjBhR0Z1SUc1aGRHbDJaVnh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdSblZ1WTNScGIyNTlJR1p1WEc0Z0tpQkFjR0Z5WVcwZ2UwOWlhbVZqZEgwZ1kzUjRYRzRnS2lCQWNtVjBkWEp1SUh0R2RXNWpkR2x2Ym4xY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR0pwYm1RZ0tHWnVPaUJHZFc1amRHbHZiaXdnWTNSNE9pQnRhWGhsWkNrZ2UxeHVJQ0J5WlhSMWNtNGdablZ1WTNScGIyNGdLR0U2SUcxcGVHVmtLU0I3WEc0Z0lDQWdZMjl1YzNRZ2JDQTlJR0Z5WjNWdFpXNTBjeTVzWlc1bmRHaGNiaUFnSUNCeVpYUjFjbTRnYkNBL0lHd2dQaUF4SUQ4Z1ptNHVZWEJ3Ykhrb1kzUjRMQ0JoY21kMWJXVnVkSE1wSURvZ1ptNHVZMkZzYkNoamRIZ3NJR0VwSURvZ1ptNHVZMkZzYkNoamRIZ3BYRzRnSUgxY2JuMWNiaThxS2x4dUlDb2dUMjVzZVNCallXeHNJSFJvWlNCbWRXNWpJSFJvWlNCc1lYTjBJSFJwYldVZ1ltVm1iM0psSUdsMEozTWdibTkwSUhSb1lYUWdabkpsY1hWbGJuUnNlU0JqWVd4c1pXUXVYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCa1pXSnZkVzVqWlNBb1puVnVZem9nUm5WdVkzUnBiMjRzSUhkaGFYUTZJRzUxYldKbGNpa2dlMXh1SUNCc1pYUWdkR2x0WlhKSlpGeHVJQ0JtZFc1amRHbHZiaUJzWVhSbGNpQW9LU0I3WEc0Z0lDQWdkR2x0WlhKSlpDQTlJRzUxYkd4Y2JpQWdJQ0JtZFc1akxtRndjR3g1S0c1MWJHd3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlHWjFibU4wYVc5dUlDZ3BJSHRjYmlBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdsdFpYSkpaQ2xjYmlBZ0lDQjBhVzFsY2tsa0lEMGdjMlYwVkdsdFpXOTFkQ2hzWVhSbGNpd2dkMkZwZENsY2JpQWdmVnh1ZlZ4dUx5b3FYRzRnS2lCUGJteDVJR05oYkd3Z2RHaGxJR1oxYm1NZ2RHaGxJR1pwY25OMElIUnBiV1VnWW1WbWIzSmxJR0VnYzJWeWFXVnpJR1p5WlhGMVpXNTBiSGtnWm5WdVkzUnBiMjRnWTJGc2JITWdhR0Z3Y0dWdUxseHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWkdWd2NtVnpjeUFvWm5WdVl6b2dSblZ1WTNScGIyNHNJSGRoYVhRNklHNTFiV0psY2lrZ2UxeHVJQ0JzWlhRZ2RHbHRaWEpKWkZ4dVhHNGdJR1oxYm1OMGFXOXVJR3hoZEdWeUlDZ3BJSHRjYmlBZ0lDQjBhVzFsY2tsa0lEMGdiblZzYkZ4dUlDQjlYRzRnSUhKbGRIVnliaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnYVdZZ0tDRjBhVzFsY2tsa0tTQjdYRzRnSUNBZ0lDQm1kVzVqTG1Gd2NHeDVLQ2xjYmlBZ0lDQjlYRzRnSUNBZ1kyeGxZWEpVYVcxbGIzVjBLSFJwYldWeVNXUXBYRzRnSUNBZ2RHbHRaWEpKWkNBOUlITmxkRlJwYldWdmRYUW9iR0YwWlhJc0lIZGhhWFFwWEc0Z0lIMWNibjFjYmk4cUtseHVJQ29nVDI1c2VTQmpZV3hzSUhSb1pTQm1kVzVqSUdWMlpYSjVJSFJwYldVZ1lXWjBaWElnWVNCM1lXbDBJRzFwYkd4cGMyVmpiMjVrY3lCcFppQnBkQ2R6SUhSdmJ5Qm1jbVZ4ZFdWdWRHeDVJR05oYkd4bFpDNWNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUhSb2NtOTBkR3hsSUNobWRXNWpPaUJHZFc1amRHbHZiaXdnZDJGcGREb2diblZ0WW1WeUxDQmpZV3hzVEdGemRGUnBiV1U2SUdKdmIyeGxZVzRwSUh0Y2JpQWdiR1YwSUd4aGMzUWdQU0F3WEc0Z0lHeGxkQ0JzWVhOMFZHbHRaWElnUFNCdWRXeHNYRzRnSUdOdmJuTjBJR3hoYzNSVWFXMWxSSFZ5WVhScGIyNGdQU0IzWVdsMElDc2dLSGRoYVhRZ1BpQXlOU0EvSUhkaGFYUWdPaUF5TlNrZ0x5OGdjR3gxY3lCb1lXeG1JSGRoYVhRZ2RHbHRaUzVjYmlBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNndUxpNWhjbWR6T2lCQmNuSmhlVHh0YVhobFpENHBJSHRjYmlBZ0lDQmpiMjV6ZENCamIyNTBaWGgwSUQwZ2RHaHBjMXh1SUNBZ0lHTnZibk4wSUhScGJXVWdQU0J1WlhjZ1JHRjBaU2dwTG1kbGRGUnBiV1VvS1Z4dUlDQWdJR2xtSUNoMGFXMWxJQzBnYkdGemRDQStJSGRoYVhRcElIdGNiaUFnSUNBZ0lHbG1JQ2hqWVd4c1RHRnpkRlJwYldVcElIdGNiaUFnSUNBZ0lDQWdiR0Z6ZEZScGJXVnlJQ1ltSUdOc1pXRnlWR2x0Wlc5MWRDaHNZWE4wVkdsdFpYSXBYRzRnSUNBZ0lDQWdJR3hoYzNSVWFXMWxjaUE5SUhObGRGUnBiV1Z2ZFhRb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUd4aGMzUlVhVzFsY2lBOUlHNTFiR3hjYmlBZ0lDQWdJQ0FnSUNCbWRXNWpMbUZ3Y0d4NUtHTnZiblJsZUhRc0lHRnlaM01wWEc0Z0lDQWdJQ0FnSUgwc0lHeGhjM1JVYVcxbFJIVnlZWFJwYjI0cFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCbWRXNWpMbUZ3Y0d4NUtHTnZiblJsZUhRc0lHRnlaM01wWEc0Z0lDQWdJQ0JzWVhOMElEMGdkR2x0WlZ4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1THk4Z1pHbHlaV04wYVc5dU9pQW5iQ2NnZkNBbmNpY3NJR1JsWm1GMWJIUWdhWE1nSjNJblhHNHZMeUJ1ZFcwNklHaHZkeUJ0WVc1NUlIUnBiV1Z6SUhSdklHeHZiM0FzSUhOb2IzVnNaQ0JpWlNCaElIQnZjMmwwYVhabElHbHVkR1ZuWlhKY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCc2IyOXdRWEp5WVhrZ0tHRnljam9nWVc1NUxDQnVkVzA2SUc1MWJXSmxjaXdnWkdseVpXTjBhVzl1T2lCemRISnBibWNwSUh0Y2JpQWdhV1lnS0NGcGMwRnljbUY1S0dGeWNpa3BJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1SUNCc1pYUWdhWE5NWldaMElEMGdLR1JwY21WamRHbHZiaUFySUNjbktTNTBiMHh2ZDJWeVEyRnpaU2dwSUQwOVBTQW5iQ2RjYmlBZ1kyOXVjM1FnYkdWdUlEMGdZWEp5TG14bGJtZDBhRnh1SUNCdWRXMGdQU0J1ZFcwZ0pTQnNaVzVjYmlBZ2FXWWdLRzUxYlNBOElEQXBJSHRjYmlBZ0lDQnVkVzBnUFNBdGJuVnRYRzRnSUNBZ2FYTk1aV1owSUQwZ0lXbHpUR1ZtZEZ4dUlDQjlYRzRnSUdsbUlDaHVkVzBnUFQwOUlEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z1lYSnlYRzRnSUgxY2JpQWdiR1YwSUd4d0xDQnljRnh1SUNCcFppQW9hWE5NWldaMEtTQjdYRzRnSUNBZ2JIQWdQU0JoY25JdWMyeHBZMlVvTUN3Z2JuVnRLVnh1SUNBZ0lISndJRDBnWVhKeUxuTnNhV05sS0c1MWJTbGNiaUFnZlZ4dUlDQmxiSE5sSUh0Y2JpQWdJQ0JzY0NBOUlHRnljaTV6YkdsalpTZ3dMQ0JzWlc0Z0xTQnVkVzBwWEc0Z0lDQWdjbkFnUFNCaGNuSXVjMnhwWTJVb2JHVnVJQzBnYm5WdEtWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeWNDNWpiMjVqWVhRb2JIQXBYRzU5WEc0dktpcGNiaUFxSUVOeVpXRjBaU0JoSUdOaFkyaGxaQ0IyWlhKemFXOXVJRzltSUdFZ2NIVnlaU0JtZFc1amRHbHZiaTVjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTmhZMmhsWkNBb1ptNDZJR0Z1ZVNrZ2UxeHVJQ0JqYjI1emRDQmpZV05vWlNBOUlFOWlhbVZqZEM1amNtVmhkR1VvYm5Wc2JDbGNiaUFnY21WMGRYSnVJR1oxYm1OMGFXOXVJR05oWTJobFpFWnVJQ2h6ZEhJNklITjBjbWx1WnlrZ2UxeHVJQ0FnSUdOdmJuTjBJR2hwZENBOUlHTmhZMmhsVzNOMGNsMWNiaUFnSUNCeVpYUjFjbTRnYUdsMElIeDhJQ2hqWVdOb1pWdHpkSEpkSUQwZ1ptNG9jM1J5S1NsY2JpQWdmVnh1ZlZ4dUx5b3FYRzRnS2lCRFlXMWxiR2w2WlNCaElHaDVjR2hsYmkxa1pXeHRhWFJsWkNCemRISnBibWN1WEc0Z0tpOWNibU52Ym5OMElHTmhiV1ZzYVhwbFVrVWdQU0F2TFNoY1hIY3BMMmRjYm1WNGNHOXlkQ0JqYjI1emRDQmpZVzFsYkdsNlpTQTlJR05oWTJobFpDaHpkSElnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdjM1J5TG5KbGNHeGhZMlVvWTJGdFpXeHBlbVZTUlN3Z0tGOHNJR01wSUQwK0lHTXVkRzlWY0hCbGNrTmhjMlVvS1NsY2JuMHBYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZMkZ0Wld4cGVtVkxaWGx6SUNodlltbzZJR0Z1ZVNrZ2UxeHVJQ0JqYjI1emRDQnlaWE1nUFNCN2ZWeHVJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnBiaUJ2WW1vcElIdGNiaUFnSUNCeVpYTmJZMkZ0Wld4cGVtVW9hMlY1S1YwZ1BTQnZZbXBiYTJWNVhWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCeVpYTmNibjFjYmk4cUtseHVJQ29nUTJGd2FYUmhiR2w2WlNCaElITjBjbWx1Wnk1Y2JpQXFMMXh1Wlhod2IzSjBJR052Ym5OMElHTmhjR2wwWVd4cGVtVWdQU0JqWVdOb1pXUW9jM1J5SUQwK0lIdGNiaUFnY21WMGRYSnVJSE4wY2k1amFHRnlRWFFvTUNrdWRHOVZjSEJsY2tOaGMyVW9LU0FySUhOMGNpNXpiR2xqWlNneEtWeHVmU2xjYmlBZ0x5b3FYRzRnSUNBcUlFaDVjR2hsYm1GMFpTQmhJR05oYldWc1EyRnpaU0J6ZEhKcGJtY3VYRzRnSUNBcUwxeHVZMjl1YzNRZ2FIbHdhR1Z1WVhSbFVrVWdQU0F2S0Z0ZUxWMHBLRnRCTFZwZEtTOW5YRzVsZUhCdmNuUWdZMjl1YzNRZ2FIbHdhR1Z1WVhSbElEMGdZMkZqYUdWa0tITjBjaUE5UGlCN1hHNGdJSEpsZEhWeWJpQnpkSEl1Y21Wd2JHRmpaU2hvZVhCb1pXNWhkR1ZTUlN3Z0p5UXhMU1F5SnlrdWNtVndiR0ZqWlNob2VYQm9aVzVoZEdWU1JTd2dKeVF4TFNReUp5a3VkRzlNYjNkbGNrTmhjMlVvS1Z4dWZTbGNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm9lWEJvWlc1aGRHVkxaWGx6SUNodlltbzZJR0Z1ZVNrZ2UxeHVJQ0JqYjI1emRDQnlaWE1nUFNCN2ZWeHVJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnBiaUJ2WW1vcElIdGNiaUFnSUNCeVpYTmJhSGx3YUdWdVlYUmxLR3RsZVNsZElEMGdiMkpxVzJ0bGVWMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2NtVnpYRzU5WEc1amIyNXpkQ0IyWlc1a2IzSnpVbVZuSUQwZ0wzZGxZbXRwZEMxOGJXOTZMWHh2TFh4dGN5MHZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhSGx3YUdWdVlYUmxVM1I1YkdWTFpYbHpJQ2h2WW1vNklHRnVlU2tnZTF4dUlDQmpiMjV6ZENCeVpYTWdQU0I3ZlZ4dUlDQm1iM0lnS0dOdmJuTjBJR3RsZVNCcGJpQnZZbW9wSUh0Y2JpQWdJQ0JqYjI1emRDQm9heUE5SUdoNWNHaGxibUYwWlNoclpYa3BMbkpsY0d4aFkyVW9kbVZ1Wkc5eWMxSmxaeXdnWm5WdVkzUnBiMjRnS0NRd0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0p5MG5JQ3NnSkRCY2JpQWdJQ0I5S1Z4dUlDQWdJSEpsYzF0b2ExMGdQU0J2WW1wYmEyVjVYVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnlaWE5jYm4xY2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCallXMWxiRlJ2UzJWaVlXSWdLRzVoYldVNklITjBjbWx1WnlrZ2UxeHVJQ0JwWmlBb0lXNWhiV1VwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdKeWRjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdibUZ0WlM1eVpYQnNZV05sS0M4b1cwRXRXbDBwTDJjc0lHWjFibU4wYVc5dUlDaG5MQ0JuTVNrZ2UxeHVJQ0FnSUhKbGRIVnliaUJnTFNSN1p6RXVkRzlNYjNkbGNrTmhjMlVvS1gxZ1hHNGdJSDBwWEc1OVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1lYQndaVzVrUTNOeklDaGpjM002SUhOMGNtbHVaeXdnWTNOelNXUTZJSE4wY21sdVp5d2djbVZ3YkdGalpUb2dZbTl2YkdWaGJpa2dlMXh1SUNCc1pYUWdjM1I1YkdVNklHRnVlU0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SQ2VVbGtLR056YzBsa0tWeHVJQ0JwWmlBb2MzUjViR1VnSmlZZ2NtVndiR0ZqWlNrZ2UxeHVJQ0FnSUhOMGVXeGxMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2MzUjViR1VwWEc0Z0lDQWdjM1I1YkdVZ1BTQnVkV3hzWEc0Z0lIMWNiaUFnYVdZZ0tDRnpkSGxzWlNrZ2UxeHVJQ0FnSUhOMGVXeGxJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25jM1I1YkdVbktWeHVJQ0FnSUhOMGVXeGxMblI1Y0dVZ1BTQW5kR1Y0ZEM5amMzTW5YRzRnSUNBZ1kzTnpTV1FnSmlZZ0tITjBlV3hsTG1sa0lEMGdZM056U1dRcFhHNGdJQ0FnWkc5amRXMWxiblF1WjJWMFJXeGxiV1Z1ZEhOQ2VWUmhaMDVoYldVb0oyaGxZV1FuS1Zzd1hTNWhjSEJsYm1SRGFHbHNaQ2h6ZEhsc1pTbGNiaUFnZlZ4dUlDQnpkSGxzWlM1aGNIQmxibVJEYUdsc1pDaGtiMk4xYldWdWRDNWpjbVZoZEdWVVpYaDBUbTlrWlNoamMzTXBLVnh1ZlZ4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUc1bGVIUkdjbUZ0WlNBb1kyRnNiR0poWTJzNklHRnVlU2tnZTF4dUlDQmpiMjV6ZENCeWRXNXVaWElnUFNCM2FXNWtiM2N1Y21WeGRXVnpkRUZ1YVcxaGRHbHZia1p5WVcxbFhHNGdJQ0FnZkh3Z2QybHVaRzkzTG5kbFltdHBkRkpsY1hWbGMzUkJibWx0WVhScGIyNUdjbUZ0WlZ4dUlDQWdJSHg4SUhkcGJtUnZkeTV0YjNwU1pYRjFaWE4wUVc1cGJXRjBhVzl1Um5KaGJXVmNiaUFnSUNCOGZDQW9ZMklnUFQ0Z2MyVjBWR2x0Wlc5MWRDaGpZaXdnTVRZcEtWeHVJQ0J5ZFc1dVpYSW9ZMkZzYkdKaFkyc3BYRzU5WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnZEc5RFUxTlVaWGgwSUNodlltcGxZM1E2SUdGdWVTa2dlMXh1SUNCcFppQW9JVzlpYW1WamRDa2dlMXh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzRnSUdOdmJuTjBJRzlpYWlBOUlHaDVjR2hsYm1GMFpWTjBlV3hsUzJWNWN5aHZZbXBsWTNRcFhHNGdJR3hsZENCamMzTlVaWGgwSUQwZ0p5ZGNiaUFnWm05eUlDaGpiMjV6ZENCclpYa2dhVzRnYjJKcUtTQjdYRzRnSUNBZ1kzTnpWR1Y0ZENBclBTQmdKSHRyWlhsOU9pUjdiMkpxVzJ0bGVWMTlPMkJjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdZM056VkdWNGRGeHVmVnh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMaUFnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVmNiaUFxSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVFnYkdsdGFYUmhkR2x2Ym5OY2JpQXFJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNHZMeUJBWm14dmQxeHVYRzVwYlhCdmNuUWdleUJsZUhSbGJtUWdmU0JtY205dElDY3VMaTkxZEdsc2N5OW1kVzVqSjF4dVhHNHZLaXBjYmlBcUlIWnBaWGR3YjNKMElIQnlhVzl5YVhSNU9seHVJQ3BjYmlBcUlERXVJRzFsZEdFZ2QyVmxlQzEyYVdWM2NHOXlkQ0FvWkdWMlpXeHZjR1Z5SUdOMWMzUnZiU2xjYmlBcUlESXVJSE5sZEZacFpYZHdiM0owS0dOdmJtWnBaeWtnT2owZ1kyOXVabWxuTG5kcFpIUm9JQ2h3Y21sMllYUmxJR052WkdVcElFQmtaWEJ5WldOaGRHVmtYRzRnS2lBekxpQndjbTlqWlhOekxtVnVkaTVXU1VWWFVFOVNWRjlYU1VSVVNDQW9ZblZwWkNCMGFXMWxLVnh1SUNwY2JpQXFMMXh1YkdWMElHbHpTVzVwZEdWa0lEMGdabUZzYzJWY2JtTnZibk4wSUVSRlJrRlZURlJmVmtsRlYxQlBVbFJmVjBsRVZFZ2dQU0EzTlRCY2JseHVMeW9xWEc0Z0tpQm5aWFFnZG1sbGQzQnZjblFnZDJsa2RHZ2dabkp2YlNCM1pXVjRMWFpwWlhkd2IzSjBJRzFsZEdFdVhHNGdLaTljYm1OdmJuTjBJR1Z1ZGxacFpYZHdiM0owVjJsa2RHZ2dQU0J3WVhKelpVbHVkQ2h3Y205alpYTnpMbVZ1ZGk1V1NVVlhVRTlTVkY5WFNVUlVTQ2xjYm14bGRDQjNhV1IwYURvZ2JuVnRZbVZ5SUQwZ0lXbHpUbUZPS0dWdWRsWnBaWGR3YjNKMFYybGtkR2dwSUNZbUlHVnVkbFpwWlhkd2IzSjBWMmxrZEdnZ1BpQXdYRzRnSUQ4Z1pXNTJWbWxsZDNCdmNuUlhhV1IwYUZ4dUlDQTZJRVJGUmtGVlRGUmZWa2xGVjFCUFVsUmZWMGxFVkVoY2JseHViR1YwSUhkNFZtbGxkM0J2Y25STlpYUmhJRDBnWkc5amRXMWxiblF1Y1hWbGNubFRaV3hsWTNSdmNpZ25iV1YwWVZ0dVlXMWxQVndpZDJWbGVDMTJhV1YzY0c5eWRGd2lYU2NwWEc1amIyNXpkQ0J0WlhSaFYybGtkR2dnUFNCM2VGWnBaWGR3YjNKMFRXVjBZU0FtSmlCd1lYSnpaVWx1ZENoM2VGWnBaWGR3YjNKMFRXVjBZUzVuWlhSQmRIUnlhV0oxZEdVb0oyTnZiblJsYm5RbktTbGNibWxtSUNodFpYUmhWMmxrZEdnZ0ppWWdJV2x6VG1GT0tHMWxkR0ZYYVdSMGFDa2dKaVlnYldWMFlWZHBaSFJvSUQ0Z01Da2dlMXh1SUNCM2FXUjBhQ0E5SUcxbGRHRlhhV1IwYUZ4dWZWeHVYRzVzWlhRZ1pIQnlPaUJ1ZFcxaVpYSWdQU0F3WEc1c1pYUWdjMk55WldWdVYybGtkR2c2SUc1MWJXSmxjaUE5SURCY2JteGxkQ0J6WTNKbFpXNUlaV2xuYUhRNklHNTFiV0psY2lBOUlEQmNibHh1WTI5dWMzUWdhVzVtYnpvZ2UxeHVJQ0JrY0hJNklHNTFiV0psY2l4Y2JpQWdjMk5oYkdVNklHNTFiV0psY2l4Y2JpQWdjbVZ0T2lCdWRXMWlaWElzWEc0Z0lHUmxkbWxqWlZkcFpIUm9PaUJ1ZFcxaVpYSXNYRzRnSUdSbGRtbGpaVWhsYVdkb2REb2diblZ0WW1WeVhHNTlJRDBnZTF4dUlDQmtjSElzWEc0Z0lITmpZV3hsT2lBd0xGeHVJQ0J5WlcwNklEQXNYRzRnSUdSbGRtbGpaVmRwWkhSb09pQXdMRnh1SUNCa1pYWnBZMlZJWldsbmFIUTZJREJjYm4xY2JseHVMeW9xWEc0Z0tpQnpaWFFnY205dmRDQm1iMjUwTFhOcGVtVWdabTl5SUhKbGJTQjFibWwwY3k0Z1NXWWdZV3h5WldGa2VTQmlaV1Z1SUhObGRDd2dhblZ6ZENCemEybHdJSFJvYVhNdVhHNGdLaTljYm1aMWJtTjBhVzl1SUhObGRGSnZiM1JHYjI1MElDaDNhV1IwYURvZ2JuVnRZbVZ5S1RvZ2RtOXBaQ0I3WEc0Z0lHTnZibk4wSUdSdll5QTlJSGRwYm1SdmR5NWtiMk4xYldWdWRGeHVJQ0JqYjI1emRDQnlaVzBnUFNCM2FXUjBhQ0F2SURFd1hHNGdJR2xtSUNnaFpHOWpMbVJ2WTNWdFpXNTBSV3hsYldWdWRDa2dleUJ5WlhSMWNtNGdmVnh1SUNCamIyNXpkQ0J5YjI5MFJtOXVkRk5wZW1VZ1BTQmtiMk11Wkc5amRXMWxiblJGYkdWdFpXNTBMbk4wZVd4bExtWnZiblJUYVhwbFhHNGdJR2xtSUNnaGNtOXZkRVp2Ym5SVGFYcGxLU0I3WEc0Z0lDQWdaRzlqTG1SdlkzVnRaVzUwUld4bGJXVnVkQzV6ZEhsc1pTNW1iMjUwVTJsNlpTQTlJSEpsYlNBcklDZHdlQ2RjYmlBZ0lDQnBibVp2TG5KbGJTQTlJSEpsYlZ4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlITmxkRTFsZEdGV2FXVjNjRzl5ZENBb2QybGtkR2c2SUc1MWJXSmxjaWs2SUhadmFXUWdlMXh1SUNCcFppQW9JWGQ0Vm1sbGQzQnZjblJOWlhSaEtTQjdYRzRnSUNBZ2QzaFdhV1YzY0c5eWRFMWxkR0VnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2R0WlhSaEp5bGNiaUFnSUNCM2VGWnBaWGR3YjNKMFRXVjBZUzV6WlhSQmRIUnlhV0oxZEdVb0oyNWhiV1VuTENBbmQyVmxlQzEyYVdWM2NHOXlkQ2NwWEc0Z0lIMWNiaUFnWld4elpTQjdYRzRnSUNBZ1kyOXVjM1FnYldWMFlWZHBaSFJvSUQwZ2NHRnljMlZKYm5Rb2QzaFdhV1YzY0c5eWRFMWxkR0V1WjJWMFFYUjBjbWxpZFhSbEtDZGpiMjUwWlc1MEp5a3BYRzRnSUNBZ2FXWWdLRzFsZEdGWGFXUjBhQ0E5UFQwZ2QybGtkR2dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lIMWNiaUFnZlZ4dUlDQjNlRlpwWlhkd2IzSjBUV1YwWVM1elpYUkJkSFJ5YVdKMWRHVW9KMk52Ym5SbGJuUW5MQ0IzYVdSMGFDQXJJQ2NuS1Z4dWZWeHVYRzR2S2lwY2JpQXFJR1Y0Y0c5eWRDQjJhV1YzY0c5eWRDQnBibVp2TGx4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhVzVwZENBb2RtbGxkM0J2Y25SWGFXUjBhRG9nYm5WdFltVnlJRDBnZDJsa2RHZ3BPaUEvZTF4dUlDQmtjSEk2SUc1MWJXSmxjaXhjYmlBZ2MyTmhiR1U2SUc1MWJXSmxjaXhjYmlBZ2NtVnRPaUJ1ZFcxaVpYSXNYRzRnSUdSbGRtbGpaVmRwWkhSb09pQnVkVzFpWlhJc1hHNGdJR1JsZG1salpVaGxhV2RvZERvZ2JuVnRZbVZ5WEc1OUlIdGNiaUFnYVdZZ0tDRnBjMGx1YVhSbFpDa2dlMXh1SUNBZ0lHbHpTVzVwZEdWa0lEMGdkSEoxWlZ4dVhHNGdJQ0FnWTI5dWMzUWdaRzlqSUQwZ2QybHVaRzkzTG1SdlkzVnRaVzUwWEc0Z0lDQWdhV1lnS0NGa2IyTXBJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0oxdDJkV1V0Y21WdVpHVnlYU0IzYVc1a2IzY3VaRzlqZFcxbGJuUWdhWE1nZFc1a1ptbHVaV1F1SnlsY2JpQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lIMWNiaUFnSUNCcFppQW9JV1J2WXk1a2IyTjFiV1Z1ZEVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1WlhKeWIzSW9KMXQyZFdVdGNtVnVaR1Z5WFNCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblFnYVhNZ2RXNWtabWx1WldRdUp5bGNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmx4dUlDQWdJR1J3Y2lBOUlHbHVabTh1WkhCeUlEMGdkMmx1Wkc5M0xtUmxkbWxqWlZCcGVHVnNVbUYwYVc5Y2JpQWdJQ0J6WTNKbFpXNVhhV1IwYUNBOUlHUnZZeTVrYjJOMWJXVnVkRVZzWlcxbGJuUXVZMnhwWlc1MFYybGtkR2hjYmlBZ0lDQnpZM0psWlc1SVpXbG5hSFFnUFNCa2IyTXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MExtTnNhV1Z1ZEVobGFXZG9kRnh1WEc0Z0lDQWdZMjl1YzNRZ2NtVnpaWFJFWlhacFkyVklaV2xuYUhRZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0J6WTNKbFpXNUlaV2xuYUhRZ1BTQmtiMk11Wkc5amRXMWxiblJGYkdWdFpXNTBMbU5zYVdWdWRFaGxhV2RvZEZ4dUlDQWdJQ0FnWTI5dWMzUWdaVzUySUQwZ2QybHVaRzkzTG5kbFpYZ2dKaVlnZDJsdVpHOTNMbmRsWlhndVkyOXVabWxuTG1WdWRseHVJQ0FnSUNBZ2FXNW1ieTVrWlhacFkyVklaV2xuYUhRZ1BTQmxibll1WkdWMmFXTmxTR1ZwWjJoMElEMGdjMk55WldWdVNHVnBaMmgwSUNvZ1pIQnlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ0x5OGdjMlYwSUhKdmIzUWdabTl1ZENCbWIzSWdjbVZ0TGx4dUlDQWdJSE5sZEZKdmIzUkdiMjUwS0hOamNtVmxibGRwWkhSb0tWeHVJQ0FnSUhObGRFMWxkR0ZXYVdWM2NHOXlkQ2gyYVdWM2NHOXlkRmRwWkhSb0tWeHVYRzRnSUNBZ2QybHVaRzkzTG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjNKbGMybDZaU2NzSUhKbGMyVjBSR1YyYVdObFNHVnBaMmgwS1Z4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ2QyaDVJRzV2ZENCMGJ5QjFjMlVnZDJsdVpHOTNMbk5qY21WbGJpNTNhV1IwYUNCMGJ5Qm5aWFFnYzJOeVpXVnVWMmxrZEdnZ1B5QkNaV05oZFhObElHbHVJSE52YldWY2JpQWdJQ0FnS2lCdmJHUWdkMlZpYTJsMElHSnliM2R6WlhJZ2IyNGdZVzVrY205cFpDQnplWE4wWlcwZ2FYUWdaMlYwSUhSb1pTQmtaWFpwWTJVZ2NHbDRaV3dnZDJsa2RHZ3NJSGRvYVdOb1hHNGdJQ0FnSUNvZ2FYTWdkR2hsSUhOamNtVmxibGRwWkhSb0lHMTFiSFJwY0d4NUlHSjVJSFJvWlNCa1pYWnBZMlVnY0dsNFpXd2djbUYwYVc4dVhHNGdJQ0FnSUNvZ1pTNW5MaUJwY0RZZ0xUNGdaMlYwSURNM05TQm1iM0lnZG1seWRIVmhiQ0J6WTNKbFpXNGdkMmxrZEdndVhHNGdJQ0FnSUNvdlhHNGdJQ0FnWTI5dWMzUWdjMk5oYkdVZ1BTQnpZM0psWlc1WGFXUjBhQ0F2SUhacFpYZHdiM0owVjJsa2RHaGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQXhMaUJwWmlCelpYUWdhVzVwZEdsaGJDOXRZWGhwYlhWdEwyMXBiV2x0ZFcwdGMyTmhiR1VnYzI5dFpTQm9iM2NnZEdobElIQmhaMlVnZDJsc2JDQm9ZWFpsSUdFZ1ltOTFibU5sWEc0Z0lDQWdJQ29nWldabVpXTjBJSGRvWlc0Z2RYTmxjaUJrY21GbklIUm9aU0J3WVdkbElIUnZkMkZ5WkhNZ2FHOXlhWHB2Ym5SaGJDQmhlR2x6TGx4dUlDQWdJQ0FxSURJdUlFUjFaU0IwYnlCamIyMXdZWFJwWW1sc2FYUjVJSEpsWVhOdmJuTXNJRzV2ZENCMGJ5QjFjMlVnZG1sbGQzQnZjblFnYldWMFlTQmhibmx0YjNKbExpQktkWE4wSUdKeWFXNW5YRzRnSUNBZ0lDb2dZU0J3WVhKaGJXVjBaWElnYzJOaGJHVWdhVzUwYnlCMGFHVWdjM1I1YkdVZ2RtRnNkV1VnY0hKdlkyVnpjMmx1Wnk1Y2JpQWdJQ0FnS2k5Y2JseHVJQ0FnSUM4dklHTnZibk4wSUdOdmJuUmxiblJ6SUQwZ1cxeHVJQ0FnSUM4dklDQWdZSGRwWkhSb1BTUjdkbWxsZDNCdmNuUlhhV1IwYUgxZ0xGeHVJQ0FnSUM4dklDQWdZR2x1YVhScFlXd3RjMk5oYkdVOUpIdHpZMkZzWlgxZ0xGeHVJQ0FnSUM4dklDQWdZRzFoZUdsdGRXMHRjMk5oYkdVOUpIdHpZMkZzWlgxZ0xGeHVJQ0FnSUM4dklDQWdZRzFwYm1sdGRXMHRjMk5oYkdVOUpIdHpZMkZzWlgxZ0xGeHVJQ0FnSUM4dklDQWdZSFZ6WlhJdGMyTmhiR0ZpYkdVOWJtOWdYRzRnSUNBZ0x5OGdYVnh1WEc0Z0lDQWdMeThnYkdWMElHMWxkR0VnUFNCa2IyTXVjWFZsY25sVFpXeGxZM1J2Y2lnbmJXVjBZVnR1WVcxbFBWd2lkbWxsZDNCdmNuUmNJbDBuS1Z4dUlDQWdJQzh2SUdsbUlDZ2hiV1YwWVNrZ2UxeHVJQ0FnSUM4dklDQWdiV1YwWVNBOUlHUnZZeTVqY21WaGRHVkZiR1Z0Wlc1MEtDZHRaWFJoSnlsY2JpQWdJQ0F2THlBZ0lHMWxkR0V1YzJWMFFYUjBjbWxpZFhSbEtDZHVZVzFsSnl3Z0ozWnBaWGR3YjNKMEp5bGNiaUFnSUNBdkx5QWdJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb0oyaGxZV1FuS1M1aGNIQmxibVJEYUdsc1pDaHRaWFJoS1Z4dUlDQWdJQzh2SUgxY2JpQWdJQ0F2THlCdFpYUmhMbk5sZEVGMGRISnBZblYwWlNnblkyOXVkR1Z1ZENjc0lHTnZiblJsYm5SekxtcHZhVzRvSnl3bktTbGNibHh1SUNBZ0lHVjRkR1Z1WkNocGJtWnZMQ0I3WEc0Z0lDQWdJQ0J6WTJGc1pTeGNiaUFnSUNBZ0lHUmxkbWxqWlZkcFpIUm9PaUJ6WTNKbFpXNVhhV1IwYUNBcUlHUndjaXhjYmlBZ0lDQWdJR1JsZG1salpVaGxhV2RvZERvZ2MyTnlaV1Z1U0dWcFoyaDBJQ29nWkhCeVhHNGdJQ0FnZlNsY2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCcGJtWnZYRzU5WEc1Y2JpOHFLbHh1SUNvZ2NtVnpaWFFnZG1sbGQzQnZjblFnZDJsa2RHZ2dZVzVrSUhOallXeGxMbHh1SUNvZ1FISmxkSFZ5YmlCdVpYY2djMk5oYkdVdVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ5WlhObGRGWnBaWGR3YjNKMElDaDJhV1YzY0c5eWRGZHBaSFJvT2lCdWRXMWlaWElwT2lCdWRXMWlaWElnZTF4dUlDQnpaWFJOWlhSaFZtbGxkM0J2Y25Rb2RtbGxkM0J2Y25SWGFXUjBhQ2xjYmlBZ1kyOXVjM1FnYm1WM1UyTmhiR1VnUFNCelkzSmxaVzVYYVdSMGFDQXZJSFpwWlhkd2IzSjBWMmxrZEdoY2JpQWdhVzVtYnk1elkyRnNaU0E5SUc1bGQxTmpZV3hsWEc0Z0lISmxkSFZ5YmlCdVpYZFRZMkZzWlZ4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwVm1sbGQzQnZjblJKYm1adklDZ3BPaUI3WEc0Z0lHUndjam9nYm5WdFltVnlMRnh1SUNCelkyRnNaVG9nYm5WdFltVnlMRnh1SUNCeVpXMDZJRzUxYldKbGNpeGNiaUFnWkdWMmFXTmxWMmxrZEdnNklHNTFiV0psY2l4Y2JpQWdaR1YyYVdObFNHVnBaMmgwT2lCdWRXMWlaWEpjYm4wZ2UxeHVJQ0J5WlhSMWNtNGdhVzVtYjF4dWZWeHVJaXdpTHlwY2JpQXFJRXhwWTJWdWMyVmtJSFJ2SUhSb1pTQkJjR0ZqYUdVZ1UyOW1kSGRoY21VZ1JtOTFibVJoZEdsdmJpQW9RVk5HS1NCMWJtUmxjaUJ2Ym1WY2JpQXFJRzl5SUcxdmNtVWdZMjl1ZEhKcFluVjBiM0lnYkdsalpXNXpaU0JoWjNKbFpXMWxiblJ6TGlBZ1UyVmxJSFJvWlNCT1QxUkpRMFVnWm1sc1pWeHVJQ29nWkdsemRISnBZblYwWldRZ2QybDBhQ0IwYUdseklIZHZjbXNnWm05eUlHRmtaR2wwYVc5dVlXd2dhVzVtYjNKdFlYUnBiMjVjYmlBcUlISmxaMkZ5WkdsdVp5QmpiM0I1Y21sbmFIUWdiM2R1WlhKemFHbHdMaUFnVkdobElFRlRSaUJzYVdObGJuTmxjeUIwYUdseklHWnBiR1ZjYmlBcUlIUnZJSGx2ZFNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1ZjYmlBcUlGd2lUR2xqWlc1elpWd2lLVHNnZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlZ4dUlDb2dkMmwwYUNCMGFHVWdUR2xqWlc1elpTNGdJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxGeHVJQ29nYzI5bWRIZGhjbVVnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNWNiaUFxSUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WlhHNGdLaUJMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xpQWdVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdWY2JpQXFJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUWdiR2x0YVhSaGRHbHZibk5jYmlBcUlIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1Y2JtWjFibU4wYVc5dUlHVjRkR1Z1WkNBb2RHOHNJQzR1TG1GeVozTXBJSHRjYmlBZ2FXWWdLQ0ZoY21keklIeDhJR0Z5WjNNdWJHVnVaM1JvSUR3OUlEQXBJSHNnY21WMGRYSnVJSFJ2SUgxY2JpQWdZWEpuY3k1bWIzSkZZV05vS0daeWIyMGdQVDRnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnWm5KdmJTQWhQVDBnSjI5aWFtVmpkQ2NwSUhzZ2NtVjBkWEp1SUgxY2JpQWdJQ0JtYjNJZ0tHTnZibk4wSUd0bGVTQnBiaUJtY205dEtTQjdYRzRnSUNBZ0lDQjBiMXRyWlhsZElEMGdabkp2YlZ0clpYbGRYRzRnSUNBZ2ZWeHVJQ0I5S1Z4dUlDQnlaWFIxY200Z2RHOWNibjFjYmx4dUx5OGdhV1lnYzNWd2NHOXlkQ0J3WVhOemFYWmxJR1YyWlc1MElHeHBjM1JsYm1WeWN5NWNibXhsZENCZmMzVndjRzl5ZEhOUVlYTnphWFpsSUQwZ1ptRnNjMlZjYm5SeWVTQjdYRzRnSUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcExtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozUmxjM1FuTENCZklEMCtJSHQ5TENCN1hHNGdJQ0FnWjJWMElIQmhjM05wZG1VZ0tDa2dlMXh1SUNBZ0lDQWdYM04xY0hCdmNuUnpVR0Z6YzJsMlpTQTlJSFJ5ZFdWY2JpQWdJQ0I5WEc0Z0lIMHBYRzU5WEc1allYUmphQ0FvWlNrZ2UxeHVJQ0F2THlCa2J5QnViM1JvYVc1bkxseHVmVnh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSE4xY0hCdmNuUnpVR0Z6YzJsMlpTQW9LU0I3WEc0Z0lISmxkSFZ5YmlCZmMzVndjRzl5ZEhOUVlYTnphWFpsWEc1OVhHNWNiaThxS2x4dUlDb2dRM0psWVhSbElFVjJaVzUwTGx4dUlDb2dRSEJoY21GdElIdEVUMDFUZEhKcGJtZDlJSFI1Y0dWY2JpQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQndjbTl3YzF4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZM0psWVhSbFJYWmxiblFnS0hSaGNtZGxkQ3dnZEhsd1pTd2djSEp2Y0hNcElIdGNiaUFnWTI5dWMzUWdaWFpsYm5RZ1BTQnVaWGNnUlhabGJuUW9kSGx3WlN3Z2V5QmlkV0ppYkdWek9pQm1ZV3h6WlNCOUtWeHVYRzRnSUdWNGRHVnVaQ2hsZG1WdWRDd2djSEp2Y0hNcFhHNGdJQzh2SUNCd2FHRnVkRzl0YW5NZ1pHOXVKM1FnYzNWd2NHOXlkQ0JqZFhOMGIyMWxjaUJsZG1WdWRGeHVJQ0JwWmlBb2QybHVaRzkzTG01aGRtbG5ZWFJ2Y2k1MWMyVnlRV2RsYm5RdWRHOU1iM2RsY2tOaGMyVW9LUzVwYm1SbGVFOW1LQ2R3YUdGdWRHOXRhbk1uS1NBaFBUMGdMVEVwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaWFpsYm5SY2JpQWdmVnh1SUNCMGNua2dlMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZG1WdWRDd2dKM1JoY21kbGRDY3NJSHRjYmlBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQjJZV3gxWlRvZ2RHRnlaMlYwWEc0Z0lDQWdmU2xjYmlBZ2ZWeHVJQ0JqWVhSamFDQW9aWEp5S1NCN1hHNGdJQ0FnY21WMGRYSnVJR1Y0ZEdWdVpDaDdmU3dnWlhabGJuUXNJSHNnZEdGeVoyVjBPaUIwWVhKblpYUWdmU2xjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdaWFpsYm5SY2JuMWNibHh1THlvcVhHNGdLaUJEY21WaGRHVWdZU0JpZFdKaVlXSnNaU0JGZG1WdWRDNWNiaUFxSUVCd1lYSmhiU0I3UkU5TlUzUnlhVzVuZlNCMGVYQmxYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnY0hKdmNITmNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdOeVpXRjBaVUoxWW1Kc1pYTkZkbVZ1ZENBb2RHRnlaMlYwTENCMGVYQmxMQ0J3Y205d2N5a2dlMXh1SUNCamIyNXpkQ0JsZG1WdWRDQTlJRzVsZHlCRmRtVnVkQ2gwZVhCbExDQjdJR0oxWW1Kc1pYTTZJSFJ5ZFdVZ2ZTbGNiaUFnWlhoMFpXNWtLR1YyWlc1MExDQndjbTl3Y3lsY2JpQWdMeThnSUhCb1lXNTBiMjFxY3lCa2IyNG5kQ0J6ZFhCd2IzSjBJR04xYzNSdmJXVnlJR1YyWlc1MFhHNGdJR2xtSUNoM2FXNWtiM2N1Ym1GMmFXZGhkRzl5TG5WelpYSkJaMlZ1ZEM1MGIweHZkMlZ5UTJGelpTZ3BMbWx1WkdWNFQyWW9KM0JvWVc1MGIyMXFjeWNwSUNFOVBTQXRNU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmxkbVZ1ZEZ4dUlDQjlYRzRnSUhSeWVTQjdYRzRnSUNBZ1QySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1YyWlc1MExDQW5kR0Z5WjJWMEp5d2dlMXh1SUNBZ0lDQWdaVzUxYldWeVlXSnNaVG9nZEhKMVpTeGNiaUFnSUNBZ0lIWmhiSFZsT2lCMFlYSm5aWFJjYmlBZ0lDQjlLVnh1SUNCOVhHNGdJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaWGgwWlc1a0tIdDlMQ0JsZG1WdWRDd2dleUIwWVhKblpYUTZJSFJoY21kbGRDQjlLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQmxkbVZ1ZEZ4dWZWeHVYRzR2S2lwY2JpQXFJRU55WldGMFpTQkRkWE4wYjIwZ1JYWmxiblF1WEc0Z0tpQkFjR0Z5WVcwZ2UwUlBUVk4wY21sdVozMGdkSGx3WlZ4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIQnliM0J6WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmpjbVZoZEdWRGRYTjBiMjFGZG1WdWRDQW9kR0Z5WjJWMExDQjBlWEJsTENCd2NtOXdjeWtnZTF4dUlDQXZMeUJqYjIxd1lYUnBZbWxzYVhSNU9pQm9kSFJ3T2k4dlkyRnVhWFZ6WlM1amIyMHZJM05sWVhKamFEMWpkWE4wYjIxbGRtVnVkRnh1SUNBdkx5QmpiMjV6ZENCbGRtVnVkQ0E5SUc1bGR5QkRkWE4wYjIxRmRtVnVkQ2gwZVhCbEtWeHVJQ0JqYjI1emRDQmxkbVZ1ZENBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWMlpXNTBLQ2REZFhOMGIyMUZkbVZ1ZENjcFhHNGdJR1YyWlc1MExtbHVhWFJEZFhOMGIyMUZkbVZ1ZENoMGVYQmxMQ0JtWVd4elpTd2dkSEoxWlN3Z2UzMHBYRzRnSUM4dklHVjJaVzUwTG5CeVpYWmxiblJFWldaaGRXeDBLQ2xjYmlBZ0x5OGdaWFpsYm5RdWMzUnZjRkJ5YjNCaFoyRjBhVzl1S0NsY2JseHVJQ0JsZUhSbGJtUW9aWFpsYm5Rc0lIQnliM0J6S1Z4dVhHNGdJQzh2SUdWMlpXNTBMblJoY21kbGRDQnBjeUJ5WldGa2IyNXNlVnh1SUNCMGNua2dlMXh1SUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZG1WdWRDd2dKM1JoY21kbGRDY3NJSHRjYmlBZ0lDQWdJR1Z1ZFcxbGNtRmliR1U2SUhSeWRXVXNYRzRnSUNBZ0lDQjJZV3gxWlRvZ2RHRnlaMlYwSUh4OElHNTFiR3hjYmlBZ0lDQjlLVnh1SUNCOVhHNGdJR05oZEdOb0lDaGxjbklwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaWGgwWlc1a0tIdDlMQ0JsZG1WdWRDd2dleUIwWVhKblpYUTZJSFJoY21kbGRDQjhmQ0J1ZFd4c0lIMHBYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdaWFpsYm5SY2JuMWNibHh1THlvcVhHNGdLaUJrYVhOd1lYUmphQ0JoSUdWMlpXNTBJRzl1SUdFZ1pHOXRJR1ZzWlcxbGJuUXVYRzRnS2lCQWNHRnlZVzBnSUh0SVZFMU1SV3hsYldWdWRIMGdaRzl0WEc0Z0tpQkFjR0Z5WVcwZ0lIdEZkbVZ1ZEgwZ1pYWmxiblJjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHUnBjM0JoZEdOb1JYWmxiblFnS0dSdmJTd2daWFpsYm5RcElIdGNiaUFnWkc5dExtUnBjM0JoZEdOb1JYWmxiblFvWlhabGJuUXBYRzU5WEc1Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCdFlYQkdiM0p0UlhabGJuUnpJQ2hqYjI1MFpYaDBLU0I3WEc0Z0lHTnZibk4wSUdWMlpXNTBUV0Z3SUQwZ2UzMWNiaUFnTzFzbmFXNXdkWFFuTENBblkyaGhibWRsSnl3Z0oyWnZZM1Z6Snl3Z0oySnNkWEluWFM1bWIzSkZZV05vS0hSNWNHVWdQVDRnZTF4dUlDQWdJR1YyWlc1MFRXRndXM1I1Y0dWZElEMGdaWFpsYm5RZ1BUNGdlMXh1SUNBZ0lDQWdhV1lnS0dOdmJuUmxlSFF1SkdWc0tTQjdYRzRnSUNBZ0lDQWdJR1YyWlc1MExuWmhiSFZsSUQwZ1kyOXVkR1Y0ZEM0a1pXd3VkbUZzZFdWY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOdmJuUmxlSFF1SkdWdGFYUW9kSGx3WlN3Z1pYWmxiblFwWEc0Z0lDQWdmVnh1SUNCOUtWeHVJQ0J5WlhSMWNtNGdaWFpsYm5STllYQmNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQnRZWEJHYjNKdFJYWmxiblJ6WEc1OVhHNGlMQ0l2S2x4dUlDb2dUR2xqWlc1elpXUWdkRzhnZEdobElFRndZV05vWlNCVGIyWjBkMkZ5WlNCR2IzVnVaR0YwYVc5dUlDaEJVMFlwSUhWdVpHVnlJRzl1WlZ4dUlDb2diM0lnYlc5eVpTQmpiMjUwY21saWRYUnZjaUJzYVdObGJuTmxJR0ZuY21WbGJXVnVkSE11SUNCVFpXVWdkR2hsSUU1UFZFbERSU0JtYVd4bFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCM2FYUm9JSFJvYVhNZ2QyOXlheUJtYjNJZ1lXUmthWFJwYjI1aGJDQnBibVp2Y20xaGRHbHZibHh1SUNvZ2NtVm5ZWEprYVc1bklHTnZjSGx5YVdkb2RDQnZkMjVsY25Ob2FYQXVJQ0JVYUdVZ1FWTkdJR3hwWTJWdWMyVnpJSFJvYVhNZ1ptbHNaVnh1SUNvZ2RHOGdlVzkxSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aVnh1SUNvZ1hDSk1hV05sYm5ObFhDSXBPeUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sWEc0Z0tpQjNhWFJvSUhSb1pTQk1hV05sYm5ObExpQWdXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc1hHNGdLaUJ6YjJaMGQyRnlaU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJseHVJQ29nWENKQlV5QkpVMXdpSUVKQlUwbFRMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxsY2JpQXFJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdUlDQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlZ4dUlDb2djM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpDQnNhVzFwZEdGMGFXOXVjMXh1SUNvZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYm1WNGNHOXlkQ0JrWldaaGRXeDBJSHRjYmlBZ2MyTnliMnhzWVdKc1pWUjVjR1Z6T2lCYkozTmpjbTlzYkdWeUp5d2dKMnhwYzNRbkxDQW5kMkYwWlhKbVlXeHNKMTBzWEc0Z0lHZGxjM1IxY21WRmRtVnVkSE02SUZ0Y2JpQWdJQ0FuY0dGdWMzUmhjblFuTEZ4dUlDQWdJQ2R3WVc1dGIzWmxKeXhjYmlBZ0lDQW5jR0Z1Wlc1a0p5eGNiaUFnSUNBbmMzZHBjR1VuTEZ4dUlDQWdJQ2RzYjI1bmNISmxjM01uTEZ4dUlDQWdJQ2QwWVhBblhHNGdJRjFjYm4xY2JpSXNJaThxWEc0Z0tpQk1hV05sYm5ObFpDQjBieUIwYUdVZ1FYQmhZMmhsSUZOdlpuUjNZWEpsSUVadmRXNWtZWFJwYjI0Z0tFRlRSaWtnZFc1a1pYSWdiMjVsWEc0Z0tpQnZjaUJ0YjNKbElHTnZiblJ5YVdKMWRHOXlJR3hwWTJWdWMyVWdZV2R5WldWdFpXNTBjeTRnSUZObFpTQjBhR1VnVGs5VVNVTkZJR1pwYkdWY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhkcGRHZ2dkR2hwY3lCM2IzSnJJR1p2Y2lCaFpHUnBkR2x2Ym1Gc0lHbHVabTl5YldGMGFXOXVYRzRnS2lCeVpXZGhjbVJwYm1jZ1kyOXdlWEpwWjJoMElHOTNibVZ5YzJocGNDNGdJRlJvWlNCQlUwWWdiR2xqWlc1elpYTWdkR2hwY3lCbWFXeGxYRzRnS2lCMGJ5QjViM1VnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxYRzRnS2lCY0lreHBZMlZ1YzJWY0lpazdJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlZjYmlBcUlIZHBkR2dnZEdobElFeHBZMlZ1YzJVdUlDQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl4Y2JpQXFJSE52Wm5SM1lYSmxJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdVhHNGdLaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1Z4dUlDb2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM0Z0lGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsWEc0Z0tpQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a0lHeHBiV2wwWVhScGIyNXpYRzRnS2lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1YVcxd2IzSjBJSHNnZEdoeWIzUjBiR1VzSUdWNGRHVnVaQ0I5SUdaeWIyMGdKeTR2Wm5WdVl5ZGNibWx0Y0c5eWRDQjdJR055WldGMFpVVjJaVzUwSUgwZ1puSnZiU0FuTGk5bGRtVnVkQ2RjYm1sdGNHOXlkQ0JqYjI1bWFXY2dabkp2YlNBbkxpNHZZMjl1Wm1sbkoxeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwVUdGeVpXNTBVMk55YjJ4c1pYSWdLSFp0S1NCN1hHNGdJR2xtSUNnaGRtMHBJSEpsZEhWeWJpQnVkV3hzWEc0Z0lHbG1JQ2gyYlM1ZmNHRnlaVzUwVTJOeWIyeHNaWElwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkbTB1WDNCaGNtVnVkRk5qY205c2JHVnlYRzRnSUgxY2JpQWdablZ1WTNScGIyNGdYMmRsZEZCaGNtVnVkRk5qY205c2JHVnlJQ2h3WVhKbGJuUXBJSHRjYmlBZ0lDQnBaaUFvSVhCaGNtVnVkQ2tnZXlCeVpYUjFjbTRnZlZ4dUlDQWdJR2xtSUNoamIyNW1hV2N1YzJOeWIyeHNZV0pzWlZSNWNHVnpMbWx1WkdWNFQyWW9jR0Z5Wlc1MExuZGxaWGhVZVhCbEtTQStJQzB4S1NCN1hHNGdJQ0FnSUNCMmJTNWZjR0Z5Wlc1MFUyTnliMnhzWlhJZ1BTQndZWEpsYm5SY2JpQWdJQ0FnSUhKbGRIVnliaUJ3WVhKbGJuUmNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRjluWlhSUVlYSmxiblJUWTNKdmJHeGxjaWh3WVhKbGJuUXVKSEJoY21WdWRDbGNiaUFnZlZ4dUlDQnlaWFIxY200Z1gyZGxkRkJoY21WdWRGTmpjbTlzYkdWeUtIWnRMaVJ3WVhKbGJuUXBYRzU5WEc1Y2JtWjFibU4wYVc5dUlHaHZjbWw2YjI1MFlXeENZV3hoYm1ObElDaHlaV04wTENCamRGSmxZM1FwSUh0Y2JpQWdjbVYwZFhKdUlISmxZM1F1YkdWbWRDQThJR04wVW1WamRDNXlhV2RvZENBbUppQnlaV04wTG5KcFoyaDBJRDRnWTNSU1pXTjBMbXhsWm5SY2JuMWNibHh1Wm5WdVkzUnBiMjRnZG1WeWRHbGpZV3hDWVd4aGJtTmxJQ2h5WldOMExDQmpkRkpsWTNRcElIdGNiaUFnY21WMGRYSnVJSEpsWTNRdWRHOXdJRHdnWTNSU1pXTjBMbUp2ZEhSdmJTQW1KaUJ5WldOMExtSnZkSFJ2YlNBK0lHTjBVbVZqZEM1MGIzQmNibjFjYmx4dUx5b3FYRzRnS2lCeVpYUjFjbTRnWVNCa1lYUmhJR0Z5Y21GNUlIZHBkR2dnZEhkdklHSnZiMnhsWVc0Z2RtRnNkV1VzSUhkb2FXTm9JR0Z5WlRwY2JpQXFJREV1SUhacGMybGliR1VnYVc0Z1kzVnljbVZ1ZENCamRDZHpJSFpwWlhkd2IzSjBMbHh1SUNvZ01pNGdkbWx6YVdKc1pTQjNhWFJvSUc5bVpuTmxkQ0JwYmlCamRYSnlaVzUwSUdOMEozTWdkbWxsZDNCdmNuUXVYRzRnS2k5Y2JtVjRjRzl5ZENCbWRXNWpkR2x2YmlCb1lYTkpiblJsY25ObFkzUnBiMjRnS0hKbFkzUXNJR04wVW1WamRDd2daR2x5TENCdlptWnpaWFFwSUh0Y2JpQWdaR2x5SUQwZ1pHbHlJSHg4SUNkMWNDZGNiaUFnWTI5dWMzUWdhWE5JYjNKcGVtOXVkR0ZzSUQwZ1pHbHlJRDA5UFNBbmJHVm1kQ2NnZkh3Z1pHbHlJRDA5UFNBbmNtbG5hSFFuWEc0Z0lHTnZibk4wSUdselZtVnlkR2xqWVd3Z1BTQmthWElnUFQwOUlDZDFjQ2NnZkh3Z1pHbHlJRDA5UFNBblpHOTNiaWRjYmlBZ2FXWWdLR2x6U0c5eWFYcHZiblJoYkNBbUppQWhkbVZ5ZEdsallXeENZV3hoYm1ObEtISmxZM1FzSUdOMFVtVmpkQ2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdXMlpoYkhObExDQm1ZV3h6WlYxY2JpQWdmVnh1SUNCcFppQW9hWE5XWlhKMGFXTmhiQ0FtSmlBaGFHOXlhWHB2Ym5SaGJFSmhiR0Z1WTJVb2NtVmpkQ3dnWTNSU1pXTjBLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmJabUZzYzJVc0lHWmhiSE5sWFZ4dUlDQjlYRzRnSUc5bVpuTmxkQ0E5SUhCaGNuTmxTVzUwS0c5bVpuTmxkQ0I4ZkNBd0tTQXFJSGRsWlhndVkyOXVabWxuTG1WdWRpNXpZMkZzWlZ4dUlDQnpkMmwwWTJnZ0tHUnBjaWtnZTF4dUlDQWdJR05oYzJVZ0ozVndKenBjYmlBZ0lDQWdJSEpsZEhWeWJpQmJYRzRnSUNBZ0lDQWdJSEpsWTNRdWRHOXdJRHdnWTNSU1pXTjBMbUp2ZEhSdmJTQW1KaUJ5WldOMExtSnZkSFJ2YlNBK0lHTjBVbVZqZEM1MGIzQXNYRzRnSUNBZ0lDQWdJSEpsWTNRdWRHOXdJRHdnWTNSU1pXTjBMbUp2ZEhSdmJTQXJJRzltWm5ObGRDQW1KaUJ5WldOMExtSnZkSFJ2YlNBK0lHTjBVbVZqZEM1MGIzQWdMU0J2Wm1aelpYUmNiaUFnSUNBZ0lGMWNiaUFnSUNCallYTmxJQ2RrYjNkdUp6cGNiaUFnSUNBZ0lISmxkSFZ5YmlCYlhHNGdJQ0FnSUNBZ0lISmxZM1F1WW05MGRHOXRJRDRnWTNSU1pXTjBMblJ2Y0NBbUppQnlaV04wTG5SdmNDQThJR04wVW1WamRDNWliM1IwYjIwc1hHNGdJQ0FnSUNBZ0lISmxZM1F1WW05MGRHOXRJRDRnWTNSU1pXTjBMblJ2Y0NBdElHOW1abk5sZENBbUppQnlaV04wTG5SdmNDQThJR04wVW1WamRDNWliM1IwYjIwZ0t5QnZabVp6WlhSY2JpQWdJQ0FnSUYxY2JpQWdJQ0JqWVhObElDZHNaV1owSnpwY2JpQWdJQ0FnSUhKbGRIVnliaUJiWEc0Z0lDQWdJQ0FnSUhKbFkzUXViR1ZtZENBOElHTjBVbVZqZEM1eWFXZG9kQ0FtSmlCeVpXTjBMbkpwWjJoMElENGdZM1JTWldOMExteGxablFzWEc0Z0lDQWdJQ0FnSUhKbFkzUXViR1ZtZENBOElHTjBVbVZqZEM1eWFXZG9kQ0FySUc5bVpuTmxkQ0FtSmlCeVpXTjBMbkpwWjJoMElENGdZM1JTWldOMExteGxablFnTFNCdlptWnpaWFJjYmlBZ0lDQWdJRjFjYmlBZ0lDQmpZWE5sSUNkeWFXZG9kQ2M2WEc0Z0lDQWdJQ0J5WlhSMWNtNGdXMXh1SUNBZ0lDQWdJQ0J5WldOMExuSnBaMmgwSUQ0Z1kzUlNaV04wTG14bFpuUWdKaVlnY21WamRDNXNaV1owSUR3Z1kzUlNaV04wTG5KcFoyaDBMRnh1SUNBZ0lDQWdJQ0J5WldOMExuSnBaMmgwSUQ0Z1kzUlNaV04wTG14bFpuUWdMU0J2Wm1aelpYUWdKaVlnY21WamRDNXNaV1owSUR3Z1kzUlNaV04wTG5KcFoyaDBJQ3NnYjJabWMyVjBYRzRnSUNBZ0lDQmRYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJwYzBWc1pXMWxiblJXYVhOcFlteGxYRzRnS2lCQWNHRnlZVzBnSUh0SVZFMU1SV3hsYldWdWRIMGdJR1ZzSUNBZ0lHRWdaRzl0SUdWc1pXMWxiblF1WEc0Z0tpQkFjR0Z5WVcwZ0lIdElWRTFNUld4bGJXVnVkSDBnSUdOdmJuUmhhVzVsY2lBZ2IzQjBhVzl1WVd3c0lIUm9aU0JqYjI1MFlXbHVaWElnYjJZZ2RHaHBjeUJsYkM1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR2x6Uld4bGJXVnVkRlpwYzJsaWJHVWdLR1ZzTENCamIyNTBZV2x1WlhJc0lHUnBjaXdnYjJabWMyVjBLU0I3WEc0Z0lHbG1JQ2doWld3dVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLU0I3SUhKbGRIVnliaUJtWVd4elpTQjlYRzRnSUdOdmJuTjBJR0p2WkhsU1pXTjBJRDBnZTF4dUlDQWdJSFJ2Y0RvZ01DeGNiaUFnSUNCc1pXWjBPaUF3TEZ4dUlDQWdJR0p2ZEhSdmJUb2dkMmx1Wkc5M0xtbHVibVZ5U0dWcFoyaDBMRnh1SUNBZ0lISnBaMmgwT2lCM2FXNWtiM2N1YVc1dVpYSlhhV1IwYUZ4dUlDQjlYRzRnSUdOdmJuTjBJR04wVW1WamRDQTlJQ2hqYjI1MFlXbHVaWElnUFQwOUlIZHBibVJ2ZHlCOGZDQmpiMjUwWVdsdVpYSWdQVDA5SUdSdlkzVnRaVzUwTG1KdlpIa3BYRzRnSUNBZ1B5QmliMlI1VW1WamRDQTZJR052Ym5SaGFXNWxjbHh1SUNBZ0lEOGdZMjl1ZEdGcGJtVnlMbWRsZEVKdmRXNWthVzVuUTJ4cFpXNTBVbVZqZENncElEb2dZbTlrZVZKbFkzUmNiaUFnY21WMGRYSnVJR2hoYzBsdWRHVnljMlZqZEdsdmJpaGxiQzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tTd2dZM1JTWldOMExDQmthWElzSUc5bVpuTmxkQ2xjYm4xY2JseHVMeThnZEc4Z2RISnBaMmRsY2lCMGFHVWdZWEJ3WldGeUwyUnBjMkZ3Y0dWaGNpQmxkbVZ1ZEM1Y2JtWjFibU4wYVc5dUlIUnlhV2RuWlhKRmRtVnVkQ0FvWld4dExDQm9ZVzVrYkdWeWN5d2daWFowTENCa2FYSXBJSHRjYmlBZ2JHVjBJR3hwYzNSbGJtVnlJRDBnYUdGdVpHeGxjbk5iWlhaMFhWeHVJQ0JwWmlBb2JHbHpkR1Z1WlhJZ0ppWWdiR2x6ZEdWdVpYSXVabTRwSUh0Y2JpQWdJQ0JzYVhOMFpXNWxjaUE5SUd4cGMzUmxibVZ5TG1adVhHNGdJSDFjYmlBZ2FXWWdLR3hwYzNSbGJtVnlLU0I3WEc0Z0lDQWdiR2x6ZEdWdVpYSW9ZM0psWVhSbFJYWmxiblFvWld4dExDQmxkblFzSUh0Y2JpQWdJQ0FnSUdScGNtVmpkR2x2YmpvZ1pHbHlYRzRnSUNBZ2ZTa3BYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJuWlhRZ1lXeHNJR1YyWlc1MElHeHBjM1JsYm1WeWN5NGdhVzVqYkhWa2FXNW5JR0p2ZFc1a0lHaGhibVJzWlhKeklHbHVJR0ZzYkNCd1lYSmxiblFnZG01dlpHVnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBSWFpsYm5SSVlXNWtiR1Z5Y3lBb1kyOXVkR1Y0ZENrZ2UxeHVJQ0JzWlhRZ2RtNXZaR1VnUFNCamIyNTBaWGgwTGlSMmJtOWtaVnh1SUNCamIyNXpkQ0JvWVc1a2JHVnljeUE5SUh0OVhHNGdJR052Ym5OMElHRjBkR0ZqYUdWa1ZtNXZaR1Z6SUQwZ1cxMWNiaUFnZDJocGJHVWdLSFp1YjJSbEtTQjdYRzRnSUNBZ1lYUjBZV05vWldSV2JtOWtaWE11Y0hWemFDaDJibTlrWlNsY2JpQWdJQ0IyYm05a1pTQTlJSFp1YjJSbExuQmhjbVZ1ZEZ4dUlDQjlYRzRnSUdGMGRHRmphR1ZrVm01dlpHVnpMbVp2Y2tWaFkyZ29ablZ1WTNScGIyNGdLSFp1YjJSbEtTQjdYRzRnSUNBZ1kyOXVjM1FnY0dGeVpXNTBUR2x6ZEdWdVpYSnpJRDBnZG01dlpHVXVZMjl0Y0c5dVpXNTBUM0IwYVc5dWN5QW1KaUIyYm05a1pTNWpiMjF3YjI1bGJuUlBjSFJwYjI1ekxteHBjM1JsYm1WeWMxeHVJQ0FnSUdOdmJuTjBJR1JoZEdGUGJpQTlJSFp1YjJSbExtUmhkR0VnSmlZZ2RtNXZaR1V1WkdGMFlTNXZibHh1SUNBZ0lHVjRkR1Z1WkNob1lXNWtiR1Z5Y3l3Z2NHRnlaVzUwVEdsemRHVnVaWEp6TENCa1lYUmhUMjRwWEc0Z0lIMHBYRzRnSUhKbGRIVnliaUJvWVc1a2JHVnljMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJCY0hCbFlYSlBabVp6WlhRZ0tHVnNLU0I3WEc0Z0lISmxkSFZ5YmlCbGJDQW1KaUJsYkM1blpYUkJkSFJ5YVdKMWRHVW9KMkZ3Y0dWaGNpMXZabVp6WlhRbktWeHVmVnh1WEc1bWRXNWpkR2x2YmlCamFHVmphMGhoYm1Sc1pYSnpJQ2hvWVc1a2JHVnljeWtnZTF4dUlDQnlaWFIxY200Z1cxeHVJQ0FnSUNFaEtHaGhibVJzWlhKekxtRndjR1ZoY2lCOGZDQm9ZVzVrYkdWeWN5NWthWE5oY0hCbFlYSXBMRnh1SUNBZ0lDRWhLR2hoYm1Sc1pYSnpMbTltWm5ObGRFRndjR1ZoY2lCOGZDQm9ZVzVrYkdWeWN5NXZabVp6WlhSRWFYTmhjSEJsWVhJcFhHNGdJRjFjYm4xY2JseHVMeW9xWEc0Z0tpQlhZWFJqYUNCbGJHVnRaVzUwSjNNZ2RtbHphV0pwYkdsMGVTQjBieUIwWld4c0lIZG9aWFJvWlhJZ2MyaHZkV3hrSUhSeWFXZG5aWElnWVNCaGNIQmxZWEl2WkdsellYQndaV0Z5WEc0Z0tpQmxkbVZ1ZENCcGJpQnpZM0p2Ykd3Z2FHRnVaR3hsY2k1Y2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJSGRoZEdOb1FYQndaV0Z5SUNoamIyNTBaWGgwTENCbWFYSmxUbTkzS1NCN1hHNGdJR052Ym5OMElHVnNJRDBnWTI5dWRHVjRkQ0FtSmlCamIyNTBaWGgwTGlSbGJGeHVJQ0JwWmlBb0lXVnNJSHg4SUdWc0xtNXZaR1ZVZVhCbElDRTlQU0F4S1NCN0lISmxkSFZ5YmlCOVhHNGdJR052Ym5OMElHRndjR1ZoY2s5bVpuTmxkQ0E5SUdkbGRFRndjR1ZoY2s5bVpuTmxkQ2hsYkNsY2JseHVJQ0JqYjI1emRDQm9ZVzVrYkdWeWN5QTlJR2RsZEVWMlpXNTBTR0Z1Wkd4bGNuTW9ZMjl1ZEdWNGRDbGNiaUFnWTI5dWMzUWdZMmhsWTJ0U1pYTjFiSFJ6SUQwZ1kyaGxZMnRJWVc1a2JHVnljeWhvWVc1a2JHVnljeWxjYmlBZ0x5OGdibThnWVhCd1pXRnlJRzl5SUc5bVpuTmxkRUZ3Y0dWaGNpQm9ZVzVrYkdWeUlIZGhjeUJpYjNWdVpDNWNiaUFnYVdZZ0tDRmphR1ZqYTFKbGMzVnNkSE5iTUYwZ0ppWWdJV05vWldOclVtVnpkV3gwYzFzeFhTa2dlMXh1SUNBZ0lISmxkSFZ5Ymx4dUlDQjlYRzVjYmlBZ2JHVjBJR2x6VjJsdVpHOTNJRDBnWm1Gc2MyVmNiaUFnYkdWMElHTnZiblJoYVc1bGNpQTlJSGRwYm1SdmQxeHVJQ0JqYjI1emRDQnpZM0p2Ykd4bGNpQTlJR2RsZEZCaGNtVnVkRk5qY205c2JHVnlLR052Ym5SbGVIUXBYRzRnSUdsbUlDaHpZM0p2Ykd4bGNpQW1KaUJ6WTNKdmJHeGxjaTRrWld3cElIdGNiaUFnSUNCamIyNTBZV2x1WlhJZ1BTQnpZM0p2Ykd4bGNpNGtaV3hjYmlBZ2ZWeHVJQ0JsYkhObElIdGNiaUFnSUNCcGMxZHBibVJ2ZHlBOUlIUnlkV1ZjYmlBZ2ZWeHVYRzRnSUdsbUlDaG1hWEpsVG05M0tTQjdYRzRnSUNBZ1kyOXVjM1FnZG1semFXSnNaVVJoZEdFZ1BTQnBjMFZzWlcxbGJuUldhWE5wWW14bEtHVnNMQ0JqYjI1MFlXbHVaWElzSUc1MWJHd3NJR0Z3Y0dWaGNrOW1abk5sZENsY2JpQWdJQ0JrWlhSbFkzUkJjSEJsWVhJb1kyOXVkR1Y0ZEN3Z2RtbHphV0pzWlVSaGRHRXNJRzUxYkd3cFhHNGdJSDFjYmx4dUlDQXZMeUJoWkdRZ1kzVnljbVZ1ZENCMmJTQjBieUIwYUdVZ1kyOXVkR0ZwYm1WeUozTWdZWEJ3WldGeUlIZGhkR05vSUd4cGMzUXVYRzRnSUdsbUlDZ2hZMjl1ZEdGcGJtVnlMbDkzWVhSamFFRndjR1ZoY2t4cGMzUXBJSHRjYmlBZ0lDQmpiMjUwWVdsdVpYSXVYM2RoZEdOb1FYQndaV0Z5VEdsemRDQTlJRnRkWEc0Z0lIMWNiaUFnWTI5dWRHRnBibVZ5TGw5M1lYUmphRUZ3Y0dWaGNreHBjM1F1Y0hWemFDaGpiMjUwWlhoMEtWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGIyUmxJR0psYkc5M0lIZHBiR3dnYjI1c2VTQmxlR1ZqSUc5dVkyVWdabTl5SUdKcGJtUnBibWNnYzJOeWIyeHNJR2hoYm1Sc1pYSWdabTl5SUhCaGNtVnVkQ0JqYjI1MFlXbHVaWEl1WEc0Z0lDQXFMMXh1SUNCcFppQW9ZMjl1ZEdGcGJtVnlMbDl6WTNKdmJHeFhZWFJqYUdWa0tTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNiaUFnWTI5dWRHRnBibVZ5TGw5elkzSnZiR3hYWVhSamFHVmtJRDBnZEhKMVpWeHVJQ0JqYjI1emRDQnpZM0p2Ykd4SVlXNWtiR1Z5SUQwZ2RHaHliM1IwYkdVb1pYWmxiblFnUFQ0Z2UxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlHUmxkR1ZqZENCelkzSnZiR3hwYm1jZ1pHbHlaV04wYVc5dUxseHVJQ0FnSUNBcUlHUnBjbVZqZEdsdmJpQnZibXg1SUhOMWNIQnZjblFnZFhBZ0ppQmtiM2R1SUhsbGRDNWNiaUFnSUNBZ0tpQlVUMFJQT2lCa2FYSmxZM1JwYjI0Z2MzVndjRzl5ZENCc1pXWjBJQ1lnY21sbmFIUXVYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1FnYzJOeWIyeHNWRzl3SUQwZ2FYTlhhVzVrYjNjZ1B5QjNhVzVrYjNjdWNHRm5aVmxQWm1aelpYUWdPaUJqYjI1MFlXbHVaWEl1YzJOeWIyeHNWRzl3WEc0Z0lDQWdZMjl1YzNRZ2NISmxWRzl3SUQwZ1kyOXVkR0ZwYm1WeUxsOXNZWE4wVTJOeWIyeHNWRzl3WEc0Z0lDQWdZMjl1ZEdGcGJtVnlMbDlzWVhOMFUyTnliMnhzVkc5d0lEMGdjMk55YjJ4c1ZHOXdYRzRnSUNBZ1kyOXVjM1FnWkdseUlEMGdLSE5qY205c2JGUnZjQ0E4SUhCeVpWUnZjRnh1SUNBZ0lDQWdQeUFuWkc5M2JpY2dPaUJ6WTNKdmJHeFViM0FnUGlCd2NtVlViM0JjYmlBZ0lDQWdJRDhnSjNWd0p5QTZJR052Ym5SaGFXNWxjaTVmY0hKbGRrUnBjbVZqZEdsdmJpa2dmSHdnYm5Wc2JGeHVJQ0FnSUdOdmJuUmhhVzVsY2k1ZmNISmxka1JwY21WamRHbHZiaUE5SUdScGNseHVJQ0FnSUdOdmJuTjBJSGRoZEdOb1FYQndaV0Z5VEdsemRDQTlJR052Ym5SaGFXNWxjaTVmZDJGMFkyaEJjSEJsWVhKTWFYTjBJSHg4SUZ0ZFhHNGdJQ0FnWTI5dWMzUWdiR1Z1SUQwZ2QyRjBZMmhCY0hCbFlYSk1hWE4wTG14bGJtZDBhRnh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJR052Ym5OMElIWnRJRDBnZDJGMFkyaEJjSEJsWVhKTWFYTjBXMmxkWEc0Z0lDQWdJQ0JqYjI1emRDQmxiQ0E5SUhadExpUmxiRnh1SUNBZ0lDQWdZMjl1YzNRZ1lYQndaV0Z5VDJabWMyVjBJRDBnWjJWMFFYQndaV0Z5VDJabWMyVjBLR1ZzS1Z4dUlDQWdJQ0FnWTI5dWMzUWdkbWx6YVdKc1pVUmhkR0VnUFNCcGMwVnNaVzFsYm5SV2FYTnBZbXhsS0dWc0xDQmpiMjUwWVdsdVpYSXNJR1JwY2l3Z1lYQndaV0Z5VDJabWMyVjBLVnh1SUNBZ0lDQWdaR1YwWldOMFFYQndaV0Z5S0hadExDQjJhWE5wWW14bFJHRjBZU3dnWkdseUtWeHVJQ0FnSUgxY2JpQWdmU3dnTWpVc0lIUnlkV1VwWEc0Z0lHTnZiblJoYVc1bGNpNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtDZHpZM0p2Ykd3bkxDQnpZM0p2Ykd4SVlXNWtiR1Z5TENCbVlXeHpaU2xjYmlBZ0x5b3FYRzRnSUNBcUlFbHVJR05oYzJVZ2RHaGxJSFZ6WlhKeklIVnpaU0IwYUdVZ1ltOWtlU2R6SUc5MlpYSm1iRzkzSUhSdklITmpjbTlzYkM0Z1ZHaGxiaUIwYUdVZ2MyTnliMnhzWEc0Z0lDQXFJR1YyWlc1MElIZHZkV3hrSUc1dmRDQmlaU0JvWVc1a2JHVmtJRzl1SUhSb1pTQjNhVzVrYjNjZ2IySnFaV04wSUdKMWRDQnZiaUIwYUdVZ1ltOWtlUzVjYmlBZ0lDb3ZYRzRnSUdsbUlDaHBjMWRwYm1SdmR5a2dlMXh1SUNBZ0lHUnZZM1Z0Wlc1MExtSnZaSGt1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWduYzJOeWIyeHNKeXdnYzJOeWIyeHNTR0Z1Wkd4bGNpd2dabUZzYzJVcFhHNGdJSDFjYm4xY2JseHVMeW9xWEc0Z0tpQjBjbWxuWjJWeUlHRWdaR2x6WVhCd1pXRnlJR1YyWlc1MExseHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnZEhKcFoyZGxja1JwYzJGd2NHVmhjaUFvWTI5dWRHVjRkQ2tnZTF4dUlDQnlaWFIxY200Z1pHVjBaV04wUVhCd1pXRnlLR052Ym5SbGVIUXNJRnRtWVd4elpTd2dabUZzYzJWZEtWeHVmVnh1WEc0dktpcGNiaUFxSUdSbFkybGtaU0IzYUdWMGFHVnlJSFJ2SUhSeWFXZG5aWElnWVNCaGNIQmxZWEl2WkdsellYQndaV0Z5SUdWMlpXNTBMbHh1SUNvZ1FIQmhjbUZ0SUh0V2RXVkRiMjF3YjI1bGJuUjlJR052Ym5SbGVIUmNiaUFxSUVCd1lYSmhiU0I3WW05dmJHVmhibjBnZG1semFXSnNaVnh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdScGNseHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWkdWMFpXTjBRWEJ3WldGeUlDaGpiMjUwWlhoMExDQjJhWE5wWW14bFJHRjBZU3dnWkdseUlEMGdiblZzYkN3Z1lYQndaV0Z5VDJabWMyVjBLU0I3WEc0Z0lHTnZibk4wSUdWc0lEMGdZMjl1ZEdWNGRDQW1KaUJqYjI1MFpYaDBMaVJsYkZ4dUlDQmpiMjV6ZENCYmRtbHphV0pzWlN3Z2IyWm1jMlYwVm1semFXSnNaVjBnUFNCMmFYTnBZbXhsUkdGMFlWeHVJQ0JwWmlBb0lXVnNLU0I3SUhKbGRIVnliaUI5WEc0Z0lHTnZibk4wSUdoaGJtUnNaWEp6SUQwZ1oyVjBSWFpsYm5SSVlXNWtiR1Z5Y3loamIyNTBaWGgwS1Z4dUlDQXZLaXBjYmlBZ0lDb2dUbThnYldGMGRHVnlJR2wwSjNNZ1ltbHVaR2x1WnlCaGNIQmxZWEl2WkdsellYQndaV0Z5SUc5eUlHSnZkR2dnYjJZZ2RHaGxiUzRnUVd4M1lYbHpYRzRnSUNBcUlITm9iM1ZzWkNCMFpYTjBJR2wwSjNNZ2RtbHphV0pwYkdsMGVTQmhibVFnWTJoaGJtZGxJSFJvWlNCamIyNTBaWGgwTHk1ZmRtbHphV0pzWlM1Y2JpQWdJQ29nU1dZZ2JtVnBkR2h2Y2lCdlppQjBhR1Z0SUhkaGN5QmliM1Z1WkN3Z2RHaGxiaUJxZFhOMElHbG5ibTl5WlNCcGRDNWNiaUFnSUNvdlhHNGdJQzhxS2x4dUlDQWdLaUJwWmlCMGFHVWdZMjl0Y0c5dVpXNTBJR2hoYzI0bmRDQmhjSEJsWVhKbFpDQm1iM0lnYjI1alpTQjVaWFFzSUhSb1pXNGdhWFFnYzJodmRXeGtiaWQwSUhSeWFXZG5aWEpjYmlBZ0lDb2dZU0JrYVhOaGNIQmxZWElnWlhabGJuUWdZWFFnWVd4c0xseHVJQ0FnS2k5Y2JpQWdhV1lnS0dOdmJuUmxlSFF1WDJGd2NHVmhjbVZrVDI1alpTQjhmQ0IyYVhOcFlteGxLU0I3WEc0Z0lDQWdhV1lnS0dOdmJuUmxlSFF1WDNacGMybGliR1VnSVQwOUlIWnBjMmxpYkdVcElIdGNiaUFnSUNBZ0lHbG1JQ2doWTI5dWRHVjRkQzVmWVhCd1pXRnlaV1JQYm1ObEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUXVYMkZ3Y0dWaGNtVmtUMjVqWlNBOUlIUnlkV1ZjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR052Ym5SbGVIUXVYM1pwYzJsaWJHVWdQU0IyYVhOcFlteGxYRzRnSUNBZ0lDQjBjbWxuWjJWeVJYWmxiblFvWld3c0lHaGhibVJzWlhKekxDQjJhWE5wWW14bElEOGdKMkZ3Y0dWaGNpY2dPaUFuWkdsellYQndaV0Z5Snl3Z1pHbHlLVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQnBaaUFvWTI5dWRHVjRkQzVmYjJabWMyVjBRWEJ3WldGeVpXUlBibU5sSUh4OElHOW1abk5sZEZacGMybGliR1VwSUh0Y2JpQWdJQ0JwWmlBb1kyOXVkR1Y0ZEM1ZmIyWm1jMlYwVm1semFXSnNaU0FoUFQwZ2IyWm1jMlYwVm1semFXSnNaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tDRmpiMjUwWlhoMExsOXZabVp6WlhSQmNIQmxZWEpsWkU5dVkyVXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWRHVjRkQzVmYjJabWMyVjBRWEJ3WldGeVpXUlBibU5sSUQwZ2RISjFaVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdZMjl1ZEdWNGRDNWZiMlptYzJWMFZtbHphV0pzWlNBOUlHOW1abk5sZEZacGMybGliR1ZjYmlBZ0lDQWdJSFJ5YVdkblpYSkZkbVZ1ZENobGJDd2dhR0Z1Wkd4bGNuTXNJRzltWm5ObGRGWnBjMmxpYkdVZ1B5QW5iMlptYzJWMFFYQndaV0Z5SnlBNklDZHZabVp6WlhSRWFYTmhjSEJsWVhJbkxDQmthWElwWEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JseHVMeThnUUdac2IzZGNibHh1YVcxd2IzSjBJSHNnYVhORmJHVnRaVzUwVm1semFXSnNaU0I5SUdaeWIyMGdKeTR2WTI5dGNHOXVaVzUwSjF4dWFXMXdiM0owSUhzZ1kzSmxZWFJsUlhabGJuUXNJR1JwYzNCaGRHTm9SWFpsYm5RZ2ZTQm1jbTl0SUNjdUwyVjJaVzUwSjF4dWFXMXdiM0owSUhzZ2RHaHliM1IwYkdVZ2ZTQm1jbTl0SUNjdUwyWjFibU1uWEc1Y2JtWjFibU4wYVc5dUlIQnlaVXh2WVdSSmJXY2dLSE55WXpvZ2MzUnlhVzVuTEZ4dUlDQWdJR3h2WVdSRFlXeHNZbUZqYXpvZ1B5aEZkbVZ1ZENrZ1BUNGdkbTlwWkN4Y2JpQWdJQ0JsY25KdmNrTmhiR3hpWVdOck9pQS9LRVYyWlc1MEtTQTlQaUIyYjJsa0tUb2dkbTlwWkNCN1hHNGdJR052Ym5OMElHbHRaeUE5SUc1bGR5QkpiV0ZuWlNncFhHNGdJR2x0Wnk1dmJteHZZV1FnUFNCc2IyRmtRMkZzYkdKaFkyc2dQeUJzYjJGa1EyRnNiR0poWTJzdVltbHVaQ2hwYldjcElEb2diblZzYkZ4dUlDQnBiV2N1YjI1bGNuSnZjaUE5SUdWeWNtOXlRMkZzYkdKaFkyc2dQeUJsY25KdmNrTmhiR3hpWVdOckxtSnBibVFvYVcxbktTQTZJRzUxYkd4Y2JpQWdhVzFuTG5OeVl5QTlJSE55WTF4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdZWEJ3YkhsVGNtTWdLR2wwWlcwNklHRnVlU3dnYzNKak9pQS9jM1J5YVc1bkxDQndiR0ZqWldodmJHUmxjbE55WXpvZ1AzTjBjbWx1WnlrNklIWnZhV1FnZTF4dUlDQnBaaUFvSVhOeVl5a2dleUJ5WlhSMWNtNGdmVnh1SUNCbWRXNWpkR2x2YmlCbWFXNWhiR3hEWWlBb0tTQjdYRzRnSUNBZ1pHVnNaWFJsSUdsMFpXMHVYM055WTE5c2IyRmthVzVuWEc0Z0lIMWNiaUFnYVdZZ0tHbDBaVzB1WDNOeVkxOXNiMkZrYVc1bklEMDlQU0J6Y21NcElIdGNiaUFnSUNCeVpYUjFjbTVjYmlBZ2ZWeHVJQ0F2S2lwY2JpQWdJQ29nTVM0Z1lYQndiSGtnYzNKaklHbHRiV1ZrYVdGMFpXeDVJR2x1SUdOaGMyVWdhbUYyYzJOeWFYQjBJR0pzYjJOcmN5QjBhR1VnYVcxaFoyVWdiRzloWkdsdVoxeHVJQ0FnS2lBZ1ltVm1iM0psSUc1bGVIUWdkR2xqYXk1Y2JpQWdJQ292WEc0Z0lHbDBaVzB1YzNSNWJHVXVZbUZqYTJkeWIzVnVaRWx0WVdkbElEMGdZSFZ5YkNna2UzTnlZeUI4ZkNBbkozMHBZRnh1SUNCcGRHVnRMbkpsYlc5MlpVRjBkSEpwWW5WMFpTZ25hVzFuTFhOeVl5Y3BYRzRnSUM4cUtseHVJQ0FnS2lBeUxpQjBhR1Z1SUd4dllXUWdkR2hsSUdsdFp5QnpjbU1nZDJsMGFDQkpiV0ZuWlNCamIyNXpkSEoxWTNSdmNpQW9ZblYwSUhkdmRXeGtJRzV2ZENCd2IzTjBYRzRnSUNBcUlDQmhJSEpsY1hWbGMzUWdZV2RoYVc0cExDQnFkWE4wSUhSdklIUnlhV2RuWlhJZ2RHaGxJR3h2WVdRZ1pYWmxiblF1WEc0Z0lDQXFMMXh1SUNCcGRHVnRMbDl6Y21OZmJHOWhaR2x1WnlBOUlITnlZMXh1SUNCd2NtVk1iMkZrU1cxbktITnlZeXdnWm5WdVkzUnBiMjRnS0dWMmRDa2dlMXh1SUNBZ0lHbDBaVzB1YzNSNWJHVXVZbUZqYTJkeWIzVnVaRWx0WVdkbElEMGdZSFZ5YkNna2UzTnlZeUI4ZkNBbkozMHBZRnh1SUNBZ0lHTnZibk4wSUhzZ2QybGtkR2c2SUc1aGRIVnlZV3hYYVdSMGFDd2dhR1ZwWjJoME9pQnVZWFIxY21Gc1NHVnBaMmgwSUgwZ1BTQjBhR2x6WEc0Z0lDQWdZMjl1YzNRZ2NHRnlZVzF6SUQwZ2UxeHVJQ0FnSUNBZ2MzVmpZMlZ6Y3pvZ2RISjFaU3hjYmlBZ0lDQWdJSE5wZW1VNklIc2dibUYwZFhKaGJGZHBaSFJvTENCdVlYUjFjbUZzU0dWcFoyaDBJSDFjYmlBZ0lDQjlYRzRnSUNBZ1pHbHpjR0YwWTJoRmRtVnVkQ2hwZEdWdExDQmpjbVZoZEdWRmRtVnVkQ2hwZEdWdExDQW5iRzloWkNjc0lIQmhjbUZ0Y3lrcFhHNGdJQ0FnWm1sdVlXeHNRMklvS1Z4dUlDQjlMQ0JtZFc1amRHbHZiaUFvWlhaMEtTQjdYRzRnSUNBZ1kyOXVjM1FnY0dGeVlXMXpJRDBnZTF4dUlDQWdJQ0FnYzNWalkyVnpjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQnphWHBsT2lCN0lHNWhkSFZ5WVd4WGFXUjBhRG9nTUN3Z2JtRjBkWEpoYkVobGFXZG9kRG9nTUNCOVhHNGdJQ0FnZlZ4dUlDQWdJR1JwYzNCaGRHTm9SWFpsYm5Rb2FYUmxiU3dnWTNKbFlYUmxSWFpsYm5Rb2FYUmxiU3dnSjJ4dllXUW5MQ0J3WVhKaGJYTXBLVnh1SUNBZ0lHbG1JQ2h3YkdGalpXaHZiR1JsY2xOeVl5a2dlMXh1SUNBZ0lDQWdjSEpsVEc5aFpFbHRaeWh3YkdGalpXaHZiR1JsY2xOeVl5d2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNCcGRHVnRMbk4wZVd4bExtSmhZMnRuY205MWJtUkpiV0ZuWlNBOUlHQjFjbXdvSkh0d2JHRmpaV2h2YkdSbGNsTnlZeUI4ZkNBbkozMHBZRnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQjlYRzRnSUNBZ1ptbHVZV3hzUTJJb0tWeHVJQ0I5S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJuWlhSRGRGTmpjbTlzYkdWeUlDaGxiRG9nWVc1NUtTQjdYRzRnSUdsbUlDZ2haV3dwSUhzZ2NtVjBkWEp1SUgxY2JpQWdiR1YwSUhOamNtOXNiR1Z5SUQwZ1pXd3VYM0IwVTJOeWIyeHNaWEpjYmlBZ2FXWWdLQ0Z6WTNKdmJHeGxjaWtnZTF4dUlDQWdJR3hsZENCd2RDQTlJR1ZzTG5CaGNtVnVkRVZzWlcxbGJuUmNiaUFnSUNCM2FHbHNaU0FvY0hRZ0ppWWdjSFFnSVQwOUlHUnZZM1Z0Wlc1MExtSnZaSGtwSUh0Y2JpQWdJQ0FnSUdsbUlDZ29jSFF1WTJ4aGMzTk9ZVzFsSUNzZ0p5Y2dmSHdnSnljcExtMWhkR05vS0M5M1pXVjRMV3hwYzNSOGQyVmxlQzF6WTNKdmJHeGxjbngzWldWNExYZGhkR1Z5Wm1Gc2JDOHBLU0I3WEc0Z0lDQWdJQ0FnSUhOamNtOXNiR1Z5SUQwZ2NIUmNiaUFnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhCMElEMGdjSFF1Y0dGeVpXNTBSV3hsYldWdWRGeHVJQ0FnSUgxY2JpQWdJQ0J6WTNKdmJHeGxjaUE5SUhCMFhHNGdJQ0FnWld3dVgzQjBVMk55YjJ4c1pYSWdQU0J3ZEZ4dUlDQjlYRzRnSUhKbGRIVnliaUJ6WTNKdmJHeGxjbHh1ZlZ4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1ptbHlaVXhoZW5sc2IyRmtJQ2hsYkRvZ1FYSnlZWGs4WVc1NVBpQjhJR0Z1ZVNCOElHNTFiR3dzSUdsbmJtOXlaVlpwYzJsaWFXeHBkSGs2SUQ5aWIyOXNaV0Z1S1RvZ2RtOXBaQ0I3WEc0Z0lHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHVnNLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQmxiQzVtYjNKRllXTm9LR04wSUQwK0lHWnBjbVZNWVhwNWJHOWhaQ2hqZENrcFhHNGdJSDFjYmlBZ1pXd2dQU0JsYkNCOGZDQmtiMk4xYldWdWRDNWliMlI1WEc0Z0lHbG1JQ2doWld3cElIc2djbVYwZFhKdUlIMWNiaUFnYkdWMElHbHRaM002SUU1dlpHVk1hWE4wSUh3Z1FYSnlZWGs4WVc1NVBpQTlJQ2hsYkNCOGZDQmtiMk4xYldWdWRDNWliMlI1S1M1eGRXVnllVk5sYkdWamRHOXlRV3hzS0NkYmFXMW5MWE55WTEwbktWeHVJQ0JwWmlBb1pXd3VaMlYwUVhSMGNtbGlkWFJsS0NkcGJXY3RjM0pqSnlrcElIc2dhVzFuY3lBOUlGdGxiRjBnZlZ4dUlDQm1iM0lnS0d4bGRDQnBPaUJ1ZFcxaVpYSWdQU0F3T3lCcElEd2dhVzFuY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1SUNBZ0lHTnZibk4wSUdsdFp5QTlJR2x0WjNOYmFWMWNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHbG5ibTl5WlZacGMybGlhV3hwZEhrZ1BUMDlJQ2RpYjI5c1pXRnVKeUFtSmlCcFoyNXZjbVZXYVhOcFltbHNhWFI1S1NCN1hHNGdJQ0FnSUNCaGNIQnNlVk55WXlocGJXY3NJR2x0Wnk1blpYUkJkSFJ5YVdKMWRHVW9KMmx0WnkxemNtTW5LU3dnYVcxbkxtZGxkRUYwZEhKcFluVjBaU2duYVcxbkxYQnNZV05sYUc5c1pHVnlKeWtwWEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnYVdZZ0tHbHpSV3hsYldWdWRGWnBjMmxpYkdVb2FXMW5MQ0JuWlhSRGRGTmpjbTlzYkdWeUtHVnNLU2xiTUYwcElIdGNiaUFnSUNBZ0lHRndjR3g1VTNKaktHbHRaeXdnYVcxbkxtZGxkRUYwZEhKcFluVjBaU2duYVcxbkxYTnlZeWNwTENCcGJXY3VaMlYwUVhSMGNtbGlkWFJsS0NkcGJXY3RjR3hoWTJWb2IyeGtaWEluS1NsY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dUx5b3FYRzRnS2lCallXTm9aU0JoSUhSb2NtOTBkR3hsSUd4aGVubHNiMkZrSUdaMWJtTjBhVzl1SUdadmNpQmxkbVZ5ZVNCamIyNTBZV2x1WlhJZ1pXeGxiV1Z1ZEZ4dUlDb2diMjVqWlNCbWIzSWdaR2xtWm1WeVpXNTBJSGRoYVhRZ2RHbHRaWE1nYzJWd1lYSmhkR1V1WEc0Z0tpQWdJSFJvWlNCaGNtTm9hWFJsWTNSMWNtVWdiMllnZEdocGN5QmpZV05vWlRwY2JpQXFJQ0FnSUNBZ1kyRmphR1U2SUh0Y2JpQXFJQ0FnSUNBZ0lDQmxiQzVwWkRvZ2UxeHVJQ29nSUNBZ0lDQWdJQ0FnZDJGcGREb2dkR2h5YjNSMGJHVmtSblZ1WTNScGIyNGdLQ2tnZXlBdUxpNGdmVnh1SUNvZ0lDQWdJQ0FnSUgxY2JpQXFJQ0FnSUNBZ2ZWeHVJQ292WEc1amIyNXpkQ0JqWVdOb1pTQTlJSHQ5WEc1c1pYUWdYM1ZwWkRvZ2JuVnRZbVZ5SUQwZ01WeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRlJvY205MGRHeGxUR0Y2ZVd4dllXUWdLSGRoYVhRNklHNTFiV0psY2lBOUlERTJMQ0JsYkRvZ1lXNTVJSHdnYm5Wc2JDQTlJR1J2WTNWdFpXNTBMbUp2WkhrcElIdGNiaUFnYkdWMElHbGtPaUJ1ZFcxaVpYSWdQU0FyS0dWc0lDWW1JR1ZzTG1SaGRHRnpaWFF1ZEdoeWIzUjBiR1ZKWkNsY2JpQWdhV1lnS0dselRtRk9LR2xrS1NCOGZDQnBaQ0E4UFNBd0tTQjdYRzRnSUNBZ2FXUWdQU0JmZFdsa0t5dGNiaUFnSUNCbGJDQW1KaUJsYkM1elpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdGRHaHliM1IwYkdVdGFXUW5MQ0JwWkNBcklDY25LVnh1SUNCOVhHNWNiaUFnSVdOaFkyaGxXMmxrWFNBbUppQW9ZMkZqYUdWYmFXUmRJRDBnZTMwcFhHNGdJR052Ym5OMElIUm9jbTkwZEd4bFpDQTlJR05oWTJobFcybGtYVnQzWVdsMFhTQjhmRnh1SUNBZ0lDaGpZV05vWlZ0cFpGMWJkMkZwZEYwZ1BTQjBhSEp2ZEhSc1pTaGNiaUFnSUNBZ0lHWnBjbVZNWVhwNWJHOWhaQzVpYVc1a0tIUm9hWE1zSUdWc0tTeGNiaUFnSUNBZ0lIQmhjbk5sUm14dllYUW9kMkZwZENrc1hHNGdJQ0FnSUNBdkx5QjBjblZsSUdadmNpQmpZV3hzVEdGemRGUnBiV1V1WEc0Z0lDQWdJQ0F2THlCMGJ5QjBjbWxuWjJWeUlHOXVZMlVnYlc5eVpTQjBhVzFsSUdGbWRHVnlJSFJvWlNCc1lYTjBJSFJvY205MGRHeGxaQ0JtZFc1amRHbHZiaUJqWVd4c1pXUWdkMmwwYUNCaElHeHBkSFJzWlNCdGIzSmxJR1JsYkdGNUxseHVJQ0FnSUNBZ2RISjFaU2xjYmlBZ0lDQXBYRzRnSUhKbGRIVnliaUIwYUhKdmRIUnNaV1JjYm4xY2JpSXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdZMkZ3YVhSaGJHbDZaVk4wY21sdVp6dGNibVoxYm1OMGFXOXVJR05oY0dsMFlXeHBlbVZUZEhKcGJtY29jM1J5S1NCN1hHNGdJSEpsZEhWeWJpQnpkSEl1WTJoaGNrRjBLREFwTG5SdlZYQndaWEpEWVhObEtDa2dLeUJ6ZEhJdWMyeHBZMlVvTVNrN1hHNTlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0Y0c5eWRITmJYQ0prWldaaGRXeDBYQ0pkT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUhCeVpXWnBlRkJ5YjNCbGNuUjVPMXh1WEc1MllYSWdYMk5oY0dsMFlXeHBlbVZUZEhKcGJtY2dQU0J5WlhGMWFYSmxLQ2N1TDJOaGNHbDBZV3hwZW1WVGRISnBibWNuS1R0Y2JseHVkbUZ5SUY5allYQnBkR0ZzYVhwbFUzUnlhVzVuTWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJOaGNHbDBZV3hwZW1WVGRISnBibWNwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNW1kVzVqZEdsdmJpQndjbVZtYVhoUWNtOXdaWEowZVNod2NtVm1hWGhRY205d1pYSjBhV1Z6TENCd2NtOXdaWEowZVN3Z2MzUjViR1VwSUh0Y2JpQWdhV1lnS0hCeVpXWnBlRkJ5YjNCbGNuUnBaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29jSEp2Y0dWeWRIa3BLU0I3WEc0Z0lDQWdkbUZ5SUhKbGNYVnBjbVZrVUhKbFptbDRaWE1nUFNCd2NtVm1hWGhRY205d1pYSjBhV1Z6VzNCeWIzQmxjblI1WFR0Y2JpQWdJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diR1Z1SUQwZ2NtVnhkV2x5WldSUWNtVm1hWGhsY3k1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUNzcmFTa2dlMXh1SUNBZ0lDQWdjM1I1YkdWYmNtVnhkV2x5WldSUWNtVm1hWGhsYzF0cFhTQXJJQ2d3TENCZlkyRndhWFJoYkdsNlpWTjBjbWx1WnpJdVpHVm1ZWFZzZENrb2NISnZjR1Z5ZEhrcFhTQTlJSE4wZVd4bFczQnliM0JsY25SNVhUdGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pYaHdiM0owYzFzblpHVm1ZWFZzZENkZE95SXNJbHdpZFhObElITjBjbWxqZEZ3aU8xeHVYRzVQWW1wbFkzUXVaR1ZtYVc1bFVISnZjR1Z5ZEhrb1pYaHdiM0owY3l3Z1hDSmZYMlZ6VFc5a2RXeGxYQ0lzSUh0Y2JpQWdkbUZzZFdVNklIUnlkV1ZjYm4wcE8xeHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdjSEpsWm1sNFZtRnNkV1U3WEc1bWRXNWpkR2x2YmlCd2NtVm1hWGhXWVd4MVpTaHdiSFZuYVc1ekxDQndjbTl3WlhKMGVTd2dkbUZzZFdVc0lITjBlV3hsTENCdFpYUmhSR0YwWVNrZ2UxeHVJQ0JtYjNJZ0tIWmhjaUJwSUQwZ01Dd2diR1Z1SUQwZ2NHeDFaMmx1Y3k1c1pXNW5kR2c3SUdrZ1BDQnNaVzQ3SUNzcmFTa2dlMXh1SUNBZ0lIWmhjaUJ3Y205alpYTnpaV1JXWVd4MVpTQTlJSEJzZFdkcGJuTmJhVjBvY0hKdmNHVnlkSGtzSUhaaGJIVmxMQ0J6ZEhsc1pTd2diV1YwWVVSaGRHRXBPMXh1WEc0Z0lDQWdMeThnZDJVZ1kyRnVJSE4wYjNBZ2NISnZZMlZ6YzJsdVp5QnBaaUJoSUhaaGJIVmxJR2x6SUhKbGRIVnlibVZrWEc0Z0lDQWdMeThnWVhNZ1lXeHNJSEJzZFdkcGJpQmpjbWwwWlhKcFlTQmhjbVVnZFc1cGNYVmxYRzRnSUNBZ2FXWWdLSEJ5YjJObGMzTmxaRlpoYkhWbEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2NISnZZMlZ6YzJWa1ZtRnNkV1U3WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0Y0c5eWRITmJYQ0prWldaaGRXeDBYQ0pkT3lJc0lsd2lkWE5sSUhOMGNtbGpkRndpTzF4dVhHNVBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWlhod2IzSjBjeXdnWENKZlgyVnpUVzlrZFd4bFhDSXNJSHRjYmlBZ2RtRnNkV1U2SUhSeWRXVmNibjBwTzF4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ1lXUmtUbVYzVm1Gc2RXVnpUMjVzZVR0Y2JtWjFibU4wYVc5dUlHRmtaRWxtVG1WM0tHeHBjM1FzSUhaaGJIVmxLU0I3WEc0Z0lHbG1JQ2hzYVhOMExtbHVaR1Y0VDJZb2RtRnNkV1VwSUQwOVBTQXRNU2tnZTF4dUlDQWdJR3hwYzNRdWNIVnphQ2gyWVd4MVpTazdYRzRnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWVdSa1RtVjNWbUZzZFdWelQyNXNlU2hzYVhOMExDQjJZV3gxWlhNcElIdGNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVnpLU2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNaVzRnUFNCMllXeDFaWE11YkdWdVozUm9PeUJwSUR3Z2JHVnVPeUFySzJrcElIdGNiaUFnSUNBZ0lHRmtaRWxtVG1WM0tHeHBjM1FzSUhaaGJIVmxjMXRwWFNrN1hHNGdJQ0FnZlZ4dUlDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUdGa1pFbG1UbVYzS0d4cGMzUXNJSFpoYkhWbGN5azdYRzRnSUgxY2JuMWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaWGh3YjNKMGMxdGNJbVJsWm1GMWJIUmNJbDA3SWl3aVhDSjFjMlVnYzNSeWFXTjBYQ0k3WEc1Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dlMXh1SUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCcGMwOWlhbVZqZER0Y2JtWjFibU4wYVc5dUlHbHpUMkpxWldOMEtIWmhiSFZsS1NCN1hHNGdJSEpsZEhWeWJpQjJZV3gxWlNCcGJuTjBZVzVqWlc5bUlFOWlhbVZqZENBbUppQWhRWEp5WVhrdWFYTkJjbkpoZVNoMllXeDFaU2s3WEc1OVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHVjRjRzl5ZEhOYlhDSmtaV1poZFd4MFhDSmRPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR055WldGMFpWQnlaV1pwZUdWeU8xeHVYRzUyWVhJZ1gzQnlaV1pwZUZCeWIzQmxjblI1SUQwZ2NtVnhkV2x5WlNnbkxpNHZkWFJwYkhNdmNISmxabWw0VUhKdmNHVnlkSGtuS1R0Y2JseHVkbUZ5SUY5d2NtVm1hWGhRY205d1pYSjBlVElnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRjl3Y21WbWFYaFFjbTl3WlhKMGVTazdYRzVjYm5aaGNpQmZjSEpsWm1sNFZtRnNkV1VnUFNCeVpYRjFhWEpsS0NjdUxpOTFkR2xzY3k5d2NtVm1hWGhXWVd4MVpTY3BPMXh1WEc1MllYSWdYM0J5WldacGVGWmhiSFZsTWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDNCeVpXWnBlRlpoYkhWbEtUdGNibHh1ZG1GeUlGOWhaR1JPWlhkV1lXeDFaWE5QYm14NUlEMGdjbVZ4ZFdseVpTZ25MaTR2ZFhScGJITXZZV1JrVG1WM1ZtRnNkV1Z6VDI1c2VTY3BPMXh1WEc1MllYSWdYMkZrWkU1bGQxWmhiSFZsYzA5dWJIa3lJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZZV1JrVG1WM1ZtRnNkV1Z6VDI1c2VTazdYRzVjYm5aaGNpQmZhWE5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TGk5MWRHbHNjeTlwYzA5aWFtVmpkQ2NwTzF4dVhHNTJZWElnWDJselQySnFaV04wTWlBOUlGOXBiblJsY205d1VtVnhkV2x5WlVSbFptRjFiSFFvWDJselQySnFaV04wS1R0Y2JseHVablZ1WTNScGIyNGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENodlltb3BJSHNnY21WMGRYSnVJRzlpYWlBbUppQnZZbW91WDE5bGMwMXZaSFZzWlNBL0lHOWlhaUE2SUhzZ1pHVm1ZWFZzZERvZ2IySnFJSDA3SUgxY2JseHVablZ1WTNScGIyNGdZM0psWVhSbFVISmxabWw0WlhJb1gzSmxaaWtnZTF4dUlDQjJZWElnY0hKbFptbDRUV0Z3SUQwZ1gzSmxaaTV3Y21WbWFYaE5ZWEFzWEc0Z0lDQWdJQ0J3YkhWbmFXNXpJRDBnWDNKbFppNXdiSFZuYVc1ek8xeHVYRzRnSUdaMWJtTjBhVzl1SUhCeVpXWnBlRUZzYkNoemRIbHNaU2tnZTF4dUlDQWdJR1p2Y2lBb2RtRnlJSEJ5YjNCbGNuUjVJR2x1SUhOMGVXeGxLU0I3WEc0Z0lDQWdJQ0IyWVhJZ2RtRnNkV1VnUFNCemRIbHNaVnR3Y205d1pYSjBlVjA3WEc1Y2JpQWdJQ0FnSUM4dklHaGhibVJzWlNCdVpYTjBaV1FnYjJKcVpXTjBjMXh1SUNBZ0lDQWdhV1lnS0Nnd0xDQmZhWE5QWW1wbFkzUXlMbVJsWm1GMWJIUXBLSFpoYkhWbEtTa2dlMXh1SUNBZ0lDQWdJQ0J6ZEhsc1pWdHdjbTl3WlhKMGVWMGdQU0J3Y21WbWFYaEJiR3dvZG1Gc2RXVXBPMXh1SUNBZ0lDQWdJQ0F2THlCb1lXNWtiR1VnWVhKeVlYa2dkbUZzZFdWelhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvZG1Gc2RXVXBLU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQmpiMjFpYVc1bFpGWmhiSFZsSUQwZ1cxMDdYRzVjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3hsYmlBOUlIWmhiSFZsTG14bGJtZDBhRHNnYVNBOElHeGxianNnS3l0cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1GeUlIQnliMk5sYzNObFpGWmhiSFZsSUQwZ0tEQXNJRjl3Y21WbWFYaFdZV3gxWlRJdVpHVm1ZWFZzZENrb2NHeDFaMmx1Y3l3Z2NISnZjR1Z5ZEhrc0lIWmhiSFZsVzJsZExDQnpkSGxzWlN3Z2NISmxabWw0VFdGd0tUdGNiaUFnSUNBZ0lDQWdJQ0FvTUN3Z1gyRmtaRTVsZDFaaGJIVmxjMDl1YkhreUxtUmxabUYxYkhRcEtHTnZiV0pwYm1Wa1ZtRnNkV1VzSUhCeWIyTmxjM05sWkZaaGJIVmxJSHg4SUhaaGJIVmxXMmxkS1R0Y2JpQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQzh2SUc5dWJIa2diVzlrYVdaNUlIUm9aU0IyWVd4MVpTQnBaaUJwZENCM1lYTWdkRzkxWTJobFpGeHVJQ0FnSUNBZ0lDQXZMeUJpZVNCaGJua2djR3gxWjJsdUlIUnZJSEJ5WlhabGJuUWdkVzV1WldObGMzTmhjbmtnYlhWMFlYUnBiMjV6WEc0Z0lDQWdJQ0FnSUdsbUlDaGpiMjFpYVc1bFpGWmhiSFZsTG14bGJtZDBhQ0ErSURBcElIdGNiaUFnSUNBZ0lDQWdJQ0J6ZEhsc1pWdHdjbTl3WlhKMGVWMGdQU0JqYjIxaWFXNWxaRlpoYkhWbE8xeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZWElnWDNCeWIyTmxjM05sWkZaaGJIVmxJRDBnS0RBc0lGOXdjbVZtYVhoV1lXeDFaVEl1WkdWbVlYVnNkQ2tvY0d4MVoybHVjeXdnY0hKdmNHVnlkSGtzSUhaaGJIVmxMQ0J6ZEhsc1pTd2djSEpsWm1sNFRXRndLVHRjYmx4dUlDQWdJQ0FnSUNBdkx5QnZibXg1SUcxdlpHbG1lU0IwYUdVZ2RtRnNkV1VnYVdZZ2FYUWdkMkZ6SUhSdmRXTm9aV1JjYmlBZ0lDQWdJQ0FnTHk4Z1lua2dZVzU1SUhCc2RXZHBiaUIwYnlCd2NtVjJaVzUwSUhWdWJtVmpaWE56WVhKNUlHMTFkR0YwYVc5dWMxeHVJQ0FnSUNBZ0lDQnBaaUFvWDNCeWIyTmxjM05sWkZaaGJIVmxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2MzUjViR1ZiY0hKdmNHVnlkSGxkSUQwZ1gzQnliMk5sYzNObFpGWmhiSFZsTzF4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdLREFzSUY5d2NtVm1hWGhRY205d1pYSjBlVEl1WkdWbVlYVnNkQ2tvY0hKbFptbDRUV0Z3TENCd2NtOXdaWEowZVN3Z2MzUjViR1VwTzF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQnpkSGxzWlR0Y2JpQWdmVnh1WEc0Z0lISmxkSFZ5YmlCd2NtVm1hWGhCYkd3N1hHNTlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0Y0c5eWRITmJKMlJsWm1GMWJIUW5YVHNpTENKY0luVnpaU0J6ZEhKcFkzUmNJanRjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYmx4dWRtRnlJSGNnUFNCYlhDSlhaV0pyYVhSY0lsMDdYRzUyWVhJZ2JTQTlJRnRjSWsxdmVsd2lYVHRjYm5aaGNpQnRjeUE5SUZ0Y0ltMXpYQ0pkTzF4dWRtRnlJSGR0SUQwZ1cxd2lWMlZpYTJsMFhDSXNJRndpVFc5NlhDSmRPMXh1ZG1GeUlIZHRjeUE5SUZ0Y0lsZGxZbXRwZEZ3aUxDQmNJbTF6WENKZE8xeHVkbUZ5SUhkdGJYTWdQU0JiWENKWFpXSnJhWFJjSWl3Z1hDSk5iM3BjSWl3Z1hDSnRjMXdpWFR0Y2JseHVaWGh3YjNKMGN5NWtaV1poZFd4MElEMGdlMXh1SUNCd2JIVm5hVzV6T2lCYlhTeGNiaUFnY0hKbFptbDRUV0Z3T2lCN0lGd2lZWEJ3WldGeVlXNWpaVndpT2lCM2JTd2dYQ0oxYzJWeVUyVnNaV04wWENJNklIZHRiWE1zSUZ3aWRHVjRkRVZ0Y0doaGMybHpVRzl6YVhScGIyNWNJam9nZHl3Z1hDSjBaWGgwUlcxd2FHRnphWE5jSWpvZ2R5d2dYQ0owWlhoMFJXMXdhR0Z6YVhOVGRIbHNaVndpT2lCM0xDQmNJblJsZUhSRmJYQm9ZWE5wYzBOdmJHOXlYQ0k2SUhjc0lGd2lZbTk0UkdWamIzSmhkR2x2YmtKeVpXRnJYQ0k2SUhjc0lGd2lZMnhwY0ZCaGRHaGNJam9nZHl3Z1hDSnRZWE5yU1cxaFoyVmNJam9nZHl3Z1hDSnRZWE5yVFc5a1pWd2lPaUIzTENCY0ltMWhjMnRTWlhCbFlYUmNJam9nZHl3Z1hDSnRZWE5yVUc5emFYUnBiMjVjSWpvZ2R5d2dYQ0p0WVhOclEyeHBjRndpT2lCM0xDQmNJbTFoYzJ0UGNtbG5hVzVjSWpvZ2R5d2dYQ0p0WVhOclUybDZaVndpT2lCM0xDQmNJbTFoYzJ0RGIyMXdiM05wZEdWY0lqb2dkeXdnWENKdFlYTnJYQ0k2SUhjc0lGd2liV0Z6YTBKdmNtUmxjbE52ZFhKalpWd2lPaUIzTENCY0ltMWhjMnRDYjNKa1pYSk5iMlJsWENJNklIY3NJRndpYldGemEwSnZjbVJsY2xOc2FXTmxYQ0k2SUhjc0lGd2liV0Z6YTBKdmNtUmxjbGRwWkhSb1hDSTZJSGNzSUZ3aWJXRnphMEp2Y21SbGNrOTFkSE5sZEZ3aU9pQjNMQ0JjSW0xaGMydENiM0prWlhKU1pYQmxZWFJjSWpvZ2R5d2dYQ0p0WVhOclFtOXlaR1Z5WENJNklIY3NJRndpYldGemExUjVjR1ZjSWpvZ2R5d2dYQ0owWlhoMFJHVmpiM0poZEdsdmJsTjBlV3hsWENJNklIY3NJRndpZEdWNGRFUmxZMjl5WVhScGIyNVRhMmx3WENJNklIY3NJRndpZEdWNGRFUmxZMjl5WVhScGIyNU1hVzVsWENJNklIY3NJRndpZEdWNGRFUmxZMjl5WVhScGIyNURiMnh2Y2x3aU9pQjNMQ0JjSW1acGJIUmxjbHdpT2lCM0xDQmNJbVp2Ym5SR1pXRjBkWEpsVTJWMGRHbHVaM05jSWpvZ2R5d2dYQ0ppY21WaGEwRm1kR1Z5WENJNklIZHRiWE1zSUZ3aVluSmxZV3RDWldadmNtVmNJam9nZDIxdGN5d2dYQ0ppY21WaGEwbHVjMmxrWlZ3aU9pQjNiVzF6TENCY0ltTnZiSFZ0YmtOdmRXNTBYQ0k2SUhkdExDQmNJbU52YkhWdGJrWnBiR3hjSWpvZ2QyMHNJRndpWTI5c2RXMXVSMkZ3WENJNklIZHRMQ0JjSW1OdmJIVnRibEoxYkdWY0lqb2dkMjBzSUZ3aVkyOXNkVzF1VW5Wc1pVTnZiRzl5WENJNklIZHRMQ0JjSW1OdmJIVnRibEoxYkdWVGRIbHNaVndpT2lCM2JTd2dYQ0pqYjJ4MWJXNVNkV3hsVjJsa2RHaGNJam9nZDIwc0lGd2lZMjlzZFcxdWMxd2lPaUIzYlN3Z1hDSmpiMngxYlc1VGNHRnVYQ0k2SUhkdExDQmNJbU52YkhWdGJsZHBaSFJvWENJNklIZHRMQ0JjSW5keWFYUnBibWROYjJSbFhDSTZJSGR0Y3l3Z1hDSm1iR1Y0WENJNklIY3NJRndpWm14bGVFSmhjMmx6WENJNklIY3NJRndpWm14bGVFUnBjbVZqZEdsdmJsd2lPaUIzTENCY0ltWnNaWGhIY205M1hDSTZJSGNzSUZ3aVpteGxlRVpzYjNkY0lqb2dkeXdnWENKbWJHVjRVMmh5YVc1clhDSTZJSGNzSUZ3aVpteGxlRmR5WVhCY0lqb2dkeXdnWENKaGJHbG5ia052Ym5SbGJuUmNJam9nZHl3Z1hDSmhiR2xuYmtsMFpXMXpYQ0k2SUhjc0lGd2lZV3hwWjI1VFpXeG1YQ0k2SUhjc0lGd2lhblZ6ZEdsbWVVTnZiblJsYm5SY0lqb2dkeXdnWENKdmNtUmxjbHdpT2lCM0xDQmNJblJ5WVc1elptOXliVndpT2lCM0xDQmNJblJ5WVc1elptOXliVTl5YVdkcGJsd2lPaUIzTENCY0luUnlZVzV6Wm05eWJVOXlhV2RwYmxoY0lqb2dkeXdnWENKMGNtRnVjMlp2Y20xUGNtbG5hVzVaWENJNklIY3NJRndpWW1GamEyWmhZMlZXYVhOcFltbHNhWFI1WENJNklIY3NJRndpY0dWeWMzQmxZM1JwZG1WY0lqb2dkeXdnWENKd1pYSnpjR1ZqZEdsMlpVOXlhV2RwYmx3aU9pQjNMQ0JjSW5SeVlXNXpabTl5YlZOMGVXeGxYQ0k2SUhjc0lGd2lkSEpoYm5ObWIzSnRUM0pwWjJsdVdsd2lPaUIzTENCY0ltRnVhVzFoZEdsdmJsd2lPaUIzTENCY0ltRnVhVzFoZEdsdmJrUmxiR0Y1WENJNklIY3NJRndpWVc1cGJXRjBhVzl1UkdseVpXTjBhVzl1WENJNklIY3NJRndpWVc1cGJXRjBhVzl1Um1sc2JFMXZaR1ZjSWpvZ2R5d2dYQ0poYm1sdFlYUnBiMjVFZFhKaGRHbHZibHdpT2lCM0xDQmNJbUZ1YVcxaGRHbHZia2wwWlhKaGRHbHZia052ZFc1MFhDSTZJSGNzSUZ3aVlXNXBiV0YwYVc5dVRtRnRaVndpT2lCM0xDQmNJbUZ1YVcxaGRHbHZibEJzWVhsVGRHRjBaVndpT2lCM0xDQmNJbUZ1YVcxaGRHbHZibFJwYldsdVowWjFibU4wYVc5dVhDSTZJSGNzSUZ3aVltRmphMlJ5YjNCR2FXeDBaWEpjSWpvZ2R5d2dYQ0ptYjI1MFMyVnlibWx1WjF3aU9pQjNMQ0JjSW5OamNtOXNiRk51WVhCVWVYQmxYQ0k2SUhkdGN5d2dYQ0p6WTNKdmJHeFRibUZ3VUc5cGJuUnpXRndpT2lCM2JYTXNJRndpYzJOeWIyeHNVMjVoY0ZCdmFXNTBjMWxjSWpvZ2QyMXpMQ0JjSW5OamNtOXNiRk51WVhCRVpYTjBhVzVoZEdsdmJsd2lPaUIzYlhNc0lGd2ljMk55YjJ4c1UyNWhjRU52YjNKa2FXNWhkR1ZjSWpvZ2QyMXpMQ0JjSW5Ob1lYQmxTVzFoWjJWVWFISmxjMmh2YkdSY0lqb2dkeXdnWENKemFHRndaVWx0WVdkbFRXRnlaMmx1WENJNklIY3NJRndpYzJoaGNHVkpiV0ZuWlU5MWRITnBaR1ZjSWpvZ2R5d2dYQ0pvZVhCb1pXNXpYQ0k2SUhkdGJYTXNJRndpWm14dmQwbHVkRzljSWpvZ2QyMXpMQ0JjSW1ac2IzZEdjbTl0WENJNklIZHRjeXdnWENKeVpXZHBiMjVHY21GbmJXVnVkRndpT2lCM2JYTXNJRndpZEdWNGRFRnNhV2R1VEdGemRGd2lPaUJ0TENCY0luUmhZbE5wZW1WY0lqb2diU3dnWENKM2NtRndSbXh2ZDF3aU9pQnRjeXdnWENKM2NtRndWR2h5YjNWbmFGd2lPaUJ0Y3l3Z1hDSjNjbUZ3VFdGeVoybHVYQ0k2SUcxekxDQmNJbWR5YVdSVVpXMXdiR0YwWlVOdmJIVnRibk5jSWpvZ2JYTXNJRndpWjNKcFpGUmxiWEJzWVhSbFVtOTNjMXdpT2lCdGN5d2dYQ0puY21sa1ZHVnRjR3hoZEdWQmNtVmhjMXdpT2lCdGN5d2dYQ0puY21sa1ZHVnRjR3hoZEdWY0lqb2diWE1zSUZ3aVozSnBaRUYxZEc5RGIyeDFiVzV6WENJNklHMXpMQ0JjSW1keWFXUkJkWFJ2VW05M2Mxd2lPaUJ0Y3l3Z1hDSm5jbWxrUVhWMGIwWnNiM2RjSWpvZ2JYTXNJRndpWjNKcFpGd2lPaUJ0Y3l3Z1hDSm5jbWxrVW05M1UzUmhjblJjSWpvZ2JYTXNJRndpWjNKcFpFTnZiSFZ0YmxOMFlYSjBYQ0k2SUcxekxDQmNJbWR5YVdSU2IzZEZibVJjSWpvZ2JYTXNJRndpWjNKcFpGSnZkMXdpT2lCdGN5d2dYQ0puY21sa1EyOXNkVzF1WENJNklHMXpMQ0JjSW1keWFXUkRiMngxYlc1RmJtUmNJam9nYlhNc0lGd2laM0pwWkVOdmJIVnRia2RoY0Z3aU9pQnRjeXdnWENKbmNtbGtVbTkzUjJGd1hDSTZJRzF6TENCY0ltZHlhV1JCY21WaFhDSTZJRzF6TENCY0ltZHlhV1JIWVhCY0lqb2diWE1zSUZ3aWRHVjRkRk5wZW1WQlpHcDFjM1JjSWpvZ2QyMXpMQ0JjSW1KdmNtUmxja2x0WVdkbFhDSTZJSGNzSUZ3aVltOXlaR1Z5U1cxaFoyVlBkWFJ6WlhSY0lqb2dkeXdnWENKaWIzSmtaWEpKYldGblpWSmxjR1ZoZEZ3aU9pQjNMQ0JjSW1KdmNtUmxja2x0WVdkbFUyeHBZMlZjSWpvZ2R5d2dYQ0ppYjNKa1pYSkpiV0ZuWlZOdmRYSmpaVndpT2lCM0xDQmNJbUp2Y21SbGNrbHRZV2RsVjJsa2RHaGNJam9nZHl3Z1hDSjBjbUZ1YzJsMGFXOXVSR1ZzWVhsY0lqb2dkeXdnWENKMGNtRnVjMmwwYVc5dVJIVnlZWFJwYjI1Y0lqb2dkeXdnWENKMGNtRnVjMmwwYVc5dVVISnZjR1Z5ZEhsY0lqb2dkeXdnWENKMGNtRnVjMmwwYVc5dVZHbHRhVzVuUm5WdVkzUnBiMjVjSWpvZ2R5QjlYRzU5TzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbGVIQnZjblJ6VzF3aVpHVm1ZWFZzZEZ3aVhUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQmpkWEp6YjNJN1hHNTJZWElnY0hKbFptbDRaWE1nUFNCYkp5MTNaV0pyYVhRdEp5d2dKeTF0YjNvdEp5d2dKeWRkTzF4dVhHNTJZWElnZG1Gc2RXVnpJRDBnZTF4dUlDQW5lbTl2YlMxcGJpYzZJSFJ5ZFdVc1hHNGdJQ2Q2YjI5dExXOTFkQ2M2SUhSeWRXVXNYRzRnSUdkeVlXSTZJSFJ5ZFdVc1hHNGdJR2R5WVdKaWFXNW5PaUIwY25WbFhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCamRYSnpiM0lvY0hKdmNHVnlkSGtzSUhaaGJIVmxLU0I3WEc0Z0lHbG1JQ2h3Y205d1pYSjBlU0E5UFQwZ0oyTjFjbk52Y2ljZ0ppWWdkbUZzZFdWekxtaGhjMDkzYmxCeWIzQmxjblI1S0haaGJIVmxLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQndjbVZtYVhobGN5NXRZWEFvWm5WdVkzUnBiMjRnS0hCeVpXWnBlQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSEJ5WldacGVDQXJJSFpoYkhWbE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHVjRjRzl5ZEhOYkoyUmxabUYxYkhRblhUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQnBjMUJ5WldacGVHVmtWbUZzZFdVN1hHNTJZWElnY21WblpYZ2dQU0F2TFhkbFltdHBkQzE4TFcxdmVpMThMVzF6TFM4N1hHNWNibVoxYm1OMGFXOXVJR2x6VUhKbFptbDRaV1JXWVd4MVpTaDJZV3gxWlNrZ2UxeHVJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUJ5WldkbGVDNTBaWE4wS0haaGJIVmxLVHRjYm4xY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1pYaHdiM0owYzFzblpHVm1ZWFZzZENkZE95SXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lIWmhiSFZsT2lCMGNuVmxYRzU5S1R0Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHTnliM056Um1Ga1pUdGNibHh1ZG1GeUlGOXBjMUJ5WldacGVHVmtWbUZzZFdVZ1BTQnlaWEYxYVhKbEtDZGpjM010YVc0dGFuTXRkWFJwYkhNdmJHbGlMMmx6VUhKbFptbDRaV1JXWVd4MVpTY3BPMXh1WEc1MllYSWdYMmx6VUhKbFptbDRaV1JXWVd4MVpUSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOXBjMUJ5WldacGVHVmtWbUZzZFdVcE8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzR2THlCb2RIUndPaTh2WTJGdWFYVnpaUzVqYjIwdkkzTmxZWEpqYUQxamNtOXpjeTFtWVdSbFhHNTJZWElnY0hKbFptbDRaWE1nUFNCYkp5MTNaV0pyYVhRdEp5d2dKeWRkTzF4dVpuVnVZM1JwYjI0Z1kzSnZjM05HWVdSbEtIQnliM0JsY25SNUxDQjJZV3gxWlNrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmMzUnlhVzVuSnlBbUppQWhLREFzSUY5cGMxQnlaV1pwZUdWa1ZtRnNkV1V5TG1SbFptRjFiSFFwS0haaGJIVmxLU0FtSmlCMllXeDFaUzVwYm1SbGVFOW1LQ2RqY205emN5MW1ZV1JsS0NjcElENGdMVEVwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEpsWm1sNFpYTXViV0Z3S0daMWJtTjBhVzl1SUNod2NtVm1hWGdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIyWVd4MVpTNXlaWEJzWVdObEtDOWpjbTl6Y3kxbVlXUmxYRndvTDJjc0lIQnlaV1pwZUNBcklDZGpjbTl6Y3kxbVlXUmxLQ2NwTzF4dUlDQWdJSDBwTzF4dUlDQjlYRzU5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdWNGNHOXlkSE5iSjJSbFptRjFiSFFuWFRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dlMXh1SUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCbWFXeDBaWEk3WEc1Y2JuWmhjaUJmYVhOUWNtVm1hWGhsWkZaaGJIVmxJRDBnY21WeGRXbHlaU2duWTNOekxXbHVMV3B6TFhWMGFXeHpMMnhwWWk5cGMxQnlaV1pwZUdWa1ZtRnNkV1VuS1R0Y2JseHVkbUZ5SUY5cGMxQnlaV1pwZUdWa1ZtRnNkV1V5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmYVhOUWNtVm1hWGhsWkZaaGJIVmxLVHRjYmx4dVpuVnVZM1JwYjI0Z1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2h2WW1vcElIc2djbVYwZFhKdUlHOWlhaUFtSmlCdlltb3VYMTlsYzAxdlpIVnNaU0EvSUc5aWFpQTZJSHNnWkdWbVlYVnNkRG9nYjJKcUlIMDdJSDFjYmx4dUx5OGdhSFIwY0RvdkwyTmhibWwxYzJVdVkyOXRMeU5tWldGMFBXTnpjeTFtYVd4MFpYSXRablZ1WTNScGIyNWNiblpoY2lCd2NtVm1hWGhsY3lBOUlGc25MWGRsWW10cGRDMG5MQ0FuSjEwN1hHNW1kVzVqZEdsdmJpQm1hV3gwWlhJb2NISnZjR1Z5ZEhrc0lIWmhiSFZsS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkemRISnBibWNuSUNZbUlDRW9NQ3dnWDJselVISmxabWw0WldSV1lXeDFaVEl1WkdWbVlYVnNkQ2tvZG1Gc2RXVXBJQ1ltSUhaaGJIVmxMbWx1WkdWNFQyWW9KMlpwYkhSbGNpZ25LU0ErSUMweEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhCeVpXWnBlR1Z6TG0xaGNDaG1kVzVqZEdsdmJpQW9jSEpsWm1sNEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2RtRnNkV1V1Y21Wd2JHRmpaU2d2Wm1sc2RHVnlYRndvTDJjc0lIQnlaV1pwZUNBcklDZG1hV3gwWlhJb0p5azdYRzRnSUNBZ2ZTazdYRzRnSUgxY2JuMWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaWGh3YjNKMGMxc25aR1ZtWVhWc2RDZGRPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR1pzWlhnN1hHNTJZWElnZG1Gc2RXVnpJRDBnZTF4dUlDQm1iR1Y0T2lCYkp5MTNaV0pyYVhRdFltOTRKeXdnSnkxdGIzb3RZbTk0Snl3Z0p5MXRjeTFtYkdWNFltOTRKeXdnSnkxM1pXSnJhWFF0Wm14bGVDY3NJQ2RtYkdWNEoxMHNYRzRnSUNkcGJteHBibVV0Wm14bGVDYzZJRnNuTFhkbFltdHBkQzFwYm14cGJtVXRZbTk0Snl3Z0p5MXRiM290YVc1c2FXNWxMV0p2ZUNjc0lDY3RiWE10YVc1c2FXNWxMV1pzWlhoaWIzZ25MQ0FuTFhkbFltdHBkQzFwYm14cGJtVXRabXhsZUNjc0lDZHBibXhwYm1VdFpteGxlQ2RkWEc1OU8xeHVYRzVtZFc1amRHbHZiaUJtYkdWNEtIQnliM0JsY25SNUxDQjJZV3gxWlNrZ2UxeHVJQ0JwWmlBb2NISnZjR1Z5ZEhrZ1BUMDlJQ2RrYVhOd2JHRjVKeUFtSmlCMllXeDFaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29kbUZzZFdVcEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUhaaGJIVmxjMXQyWVd4MVpWMDdYRzRnSUgxY2JuMWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaWGh3YjNKMGMxc25aR1ZtWVhWc2RDZGRPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibVY0Y0c5eWRITXVaR1ZtWVhWc2RDQTlJR1pzWlhoaWIzaFBiR1E3WEc1MllYSWdZV3gwWlhKdVlYUnBkbVZXWVd4MVpYTWdQU0I3WEc0Z0lDZHpjR0ZqWlMxaGNtOTFibVFuT2lBbmFuVnpkR2xtZVNjc1hHNGdJQ2R6Y0dGalpTMWlaWFIzWldWdUp6b2dKMnAxYzNScFpua25MRnh1SUNBblpteGxlQzF6ZEdGeWRDYzZJQ2R6ZEdGeWRDY3NYRzRnSUNkbWJHVjRMV1Z1WkNjNklDZGxibVFuTEZ4dUlDQW5kM0poY0MxeVpYWmxjbk5sSnpvZ0oyMTFiSFJwY0d4bEp5eGNiaUFnZDNKaGNEb2dKMjExYkhScGNHeGxKMXh1ZlR0Y2JseHVkbUZ5SUdGc2RHVnlibUYwYVhabFVISnZjSE1nUFNCN1hHNGdJR0ZzYVdkdVNYUmxiWE02SUNkWFpXSnJhWFJDYjNoQmJHbG5iaWNzWEc0Z0lHcDFjM1JwWm5sRGIyNTBaVzUwT2lBblYyVmlhMmwwUW05NFVHRmpheWNzWEc0Z0lHWnNaWGhYY21Gd09pQW5WMlZpYTJsMFFtOTRUR2x1WlhNblhHNTlPMXh1WEc1bWRXNWpkR2x2YmlCbWJHVjRZbTk0VDJ4a0tIQnliM0JsY25SNUxDQjJZV3gxWlN3Z2MzUjViR1VwSUh0Y2JpQWdhV1lnS0hCeWIzQmxjblI1SUQwOVBTQW5abXhsZUVScGNtVmpkR2x2YmljZ0ppWWdkSGx3Wlc5bUlIWmhiSFZsSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lHbG1JQ2gyWVd4MVpTNXBibVJsZUU5bUtDZGpiMngxYlc0bktTQStJQzB4S1NCN1hHNGdJQ0FnSUNCemRIbHNaUzVYWldKcmFYUkNiM2hQY21sbGJuUWdQU0FuZG1WeWRHbGpZV3duTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnpkSGxzWlM1WFpXSnJhWFJDYjNoUGNtbGxiblFnUFNBbmFHOXlhWHB2Ym5SaGJDYzdYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDJZV3gxWlM1cGJtUmxlRTltS0NkeVpYWmxjbk5sSnlrZ1BpQXRNU2tnZTF4dUlDQWdJQ0FnYzNSNWJHVXVWMlZpYTJsMFFtOTRSR2x5WldOMGFXOXVJRDBnSjNKbGRtVnljMlVuTzF4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnpkSGxzWlM1WFpXSnJhWFJDYjNoRWFYSmxZM1JwYjI0Z1BTQW5ibTl5YldGc0p6dGNiaUFnSUNCOVhHNGdJSDFjYmlBZ2FXWWdLR0ZzZEdWeWJtRjBhWFpsVUhKdmNITXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NISnZjR1Z5ZEhrcEtTQjdYRzRnSUNBZ2MzUjViR1ZiWVd4MFpYSnVZWFJwZG1WUWNtOXdjMXR3Y205d1pYSjBlVjFkSUQwZ1lXeDBaWEp1WVhScGRtVldZV3gxWlhOYmRtRnNkV1ZkSUh4OElIWmhiSFZsTzF4dUlDQjlYRzU5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdWNGNHOXlkSE5iSjJSbFptRjFiSFFuWFRzaUxDSW5kWE5sSUhOMGNtbGpkQ2M3WEc1Y2JrOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2hsZUhCdmNuUnpMQ0JjSWw5ZlpYTk5iMlIxYkdWY0lpd2dlMXh1SUNCMllXeDFaVG9nZEhKMVpWeHVmU2s3WEc1bGVIQnZjblJ6TG1SbFptRjFiSFFnUFNCbmNtRmthV1Z1ZER0Y2JseHVkbUZ5SUY5cGMxQnlaV1pwZUdWa1ZtRnNkV1VnUFNCeVpYRjFhWEpsS0NkamMzTXRhVzR0YW5NdGRYUnBiSE12YkdsaUwybHpVSEpsWm1sNFpXUldZV3gxWlNjcE8xeHVYRzUyWVhJZ1gybHpVSEpsWm1sNFpXUldZV3gxWlRJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5cGMxQnlaV1pwZUdWa1ZtRnNkV1VwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNTJZWElnY0hKbFptbDRaWE1nUFNCYkp5MTNaV0pyYVhRdEp5d2dKeTF0YjNvdEp5d2dKeWRkTzF4dVhHNTJZWElnZG1Gc2RXVnpJRDBnTDJ4cGJtVmhjaTFuY21Ga2FXVnVkSHh5WVdScFlXd3RaM0poWkdsbGJuUjhjbVZ3WldGMGFXNW5MV3hwYm1WaGNpMW5jbUZrYVdWdWRIeHlaWEJsWVhScGJtY3RjbUZrYVdGc0xXZHlZV1JwWlc1MEx6dGNibHh1Wm5WdVkzUnBiMjRnWjNKaFpHbGxiblFvY0hKdmNHVnlkSGtzSUhaaGJIVmxLU0I3WEc0Z0lHbG1JQ2gwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2R6ZEhKcGJtY25JQ1ltSUNFb01Dd2dYMmx6VUhKbFptbDRaV1JXWVd4MVpUSXVaR1ZtWVhWc2RDa29kbUZzZFdVcElDWW1JSFpoYkhWbGN5NTBaWE4wS0haaGJIVmxLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQndjbVZtYVhobGN5NXRZWEFvWm5WdVkzUnBiMjRnS0hCeVpXWnBlQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSEJ5WldacGVDQXJJSFpoYkhWbE8xeHVJQ0FnSUgwcE8xeHVJQ0I5WEc1OVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlHVjRjRzl5ZEhOYkoyUmxabUYxYkhRblhUc2lMQ0luZFhObElITjBjbWxqZENjN1hHNWNiazlpYW1WamRDNWtaV1pwYm1WUWNtOXdaWEowZVNobGVIQnZjblJ6TENCY0lsOWZaWE5OYjJSMWJHVmNJaXdnZTF4dUlDQjJZV3gxWlRvZ2RISjFaVnh1ZlNrN1hHNWxlSEJ2Y25SekxtUmxabUYxYkhRZ1BTQnBiV0ZuWlZObGREdGNibHh1ZG1GeUlGOXBjMUJ5WldacGVHVmtWbUZzZFdVZ1BTQnlaWEYxYVhKbEtDZGpjM010YVc0dGFuTXRkWFJwYkhNdmJHbGlMMmx6VUhKbFptbDRaV1JXWVd4MVpTY3BPMXh1WEc1MllYSWdYMmx6VUhKbFptbDRaV1JXWVd4MVpUSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOXBjMUJ5WldacGVHVmtWbUZzZFdVcE8xeHVYRzVtZFc1amRHbHZiaUJmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtHOWlhaWtnZXlCeVpYUjFjbTRnYjJKcUlDWW1JRzlpYWk1ZlgyVnpUVzlrZFd4bElEOGdiMkpxSURvZ2V5QmtaV1poZFd4ME9pQnZZbW9nZlRzZ2ZWeHVYRzR2THlCb2RIUndPaTh2WTJGdWFYVnpaUzVqYjIwdkkyWmxZWFE5WTNOekxXbHRZV2RsTFhObGRGeHVkbUZ5SUhCeVpXWnBlR1Z6SUQwZ1d5Y3RkMlZpYTJsMExTY3NJQ2NuWFR0Y2JtWjFibU4wYVc5dUlHbHRZV2RsVTJWMEtIQnliM0JsY25SNUxDQjJZV3gxWlNrZ2UxeHVJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmMzUnlhVzVuSnlBbUppQWhLREFzSUY5cGMxQnlaV1pwZUdWa1ZtRnNkV1V5TG1SbFptRjFiSFFwS0haaGJIVmxLU0FtSmlCMllXeDFaUzVwYm1SbGVFOW1LQ2RwYldGblpTMXpaWFFvSnlrZ1BpQXRNU2tnZTF4dUlDQWdJSEpsZEhWeWJpQndjbVZtYVhobGN5NXRZWEFvWm5WdVkzUnBiMjRnS0hCeVpXWnBlQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFpoYkhWbExuSmxjR3hoWTJVb0wybHRZV2RsTFhObGRGeGNLQzluTENCd2NtVm1hWGdnS3lBbmFXMWhaMlV0YzJWMEtDY3BPMXh1SUNBZ0lIMHBPMXh1SUNCOVhHNTlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0Y0c5eWRITmJKMlJsWm1GMWJIUW5YVHNpTENJbmRYTmxJSE4wY21samRDYzdYRzVjYms5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaGxlSEJ2Y25SekxDQmNJbDlmWlhOTmIyUjFiR1ZjSWl3Z2UxeHVJQ0IyWVd4MVpUb2dkSEoxWlZ4dWZTazdYRzVsZUhCdmNuUnpMbVJsWm1GMWJIUWdQU0J3YjNOcGRHbHZianRjYm1aMWJtTjBhVzl1SUhCdmMybDBhVzl1S0hCeWIzQmxjblI1TENCMllXeDFaU2tnZTF4dUlDQnBaaUFvY0hKdmNHVnlkSGtnUFQwOUlDZHdiM05wZEdsdmJpY2dKaVlnZG1Gc2RXVWdQVDA5SUNkemRHbGphM2tuS1NCN1hHNGdJQ0FnY21WMGRYSnVJRnNuTFhkbFltdHBkQzF6ZEdsamEza25MQ0FuYzNScFkydDVKMTA3WEc0Z0lIMWNibjFjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWlhod2IzSjBjMXNuWkdWbVlYVnNkQ2RkT3lJc0lpZDFjMlVnYzNSeWFXTjBKenRjYmx4dVQySnFaV04wTG1SbFptbHVaVkJ5YjNCbGNuUjVLR1Y0Y0c5eWRITXNJRndpWDE5bGMwMXZaSFZzWlZ3aUxDQjdYRzRnSUhaaGJIVmxPaUIwY25WbFhHNTlLVHRjYm1WNGNHOXlkSE11WkdWbVlYVnNkQ0E5SUhOcGVtbHVaenRjYm5aaGNpQndjbVZtYVhobGN5QTlJRnNuTFhkbFltdHBkQzBuTENBbkxXMXZlaTBuTENBbkoxMDdYRzVjYm5aaGNpQndjbTl3WlhKMGFXVnpJRDBnZTF4dUlDQnRZWGhJWldsbmFIUTZJSFJ5ZFdVc1hHNGdJRzFoZUZkcFpIUm9PaUIwY25WbExGeHVJQ0IzYVdSMGFEb2dkSEoxWlN4Y2JpQWdhR1ZwWjJoME9pQjBjblZsTEZ4dUlDQmpiMngxYlc1WGFXUjBhRG9nZEhKMVpTeGNiaUFnYldsdVYybGtkR2c2SUhSeWRXVXNYRzRnSUcxcGJraGxhV2RvZERvZ2RISjFaVnh1ZlR0Y2JuWmhjaUIyWVd4MVpYTWdQU0I3WEc0Z0lDZHRhVzR0WTI5dWRHVnVkQ2M2SUhSeWRXVXNYRzRnSUNkdFlYZ3RZMjl1ZEdWdWRDYzZJSFJ5ZFdVc1hHNGdJQ2RtYVd4c0xXRjJZV2xzWVdKc1pTYzZJSFJ5ZFdVc1hHNGdJQ2RtYVhRdFkyOXVkR1Z1ZENjNklIUnlkV1VzWEc0Z0lDZGpiMjUwWVdsdUxXWnNiMkYwY3ljNklIUnlkV1ZjYm4wN1hHNWNibVoxYm1OMGFXOXVJSE5wZW1sdVp5aHdjbTl3WlhKMGVTd2dkbUZzZFdVcElIdGNiaUFnYVdZZ0tIQnliM0JsY25ScFpYTXVhR0Z6VDNkdVVISnZjR1Z5ZEhrb2NISnZjR1Z5ZEhrcElDWW1JSFpoYkhWbGN5NW9ZWE5QZDI1UWNtOXdaWEowZVNoMllXeDFaU2twSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEpsWm1sNFpYTXViV0Z3S0daMWJtTjBhVzl1SUNod2NtVm1hWGdwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJ3Y21WbWFYZ2dLeUIyWVd4MVpUdGNiaUFnSUNCOUtUdGNiaUFnZlZ4dWZWeHViVzlrZFd4bExtVjRjRzl5ZEhNZ1BTQmxlSEJ2Y25Seld5ZGtaV1poZFd4MEoxMDdJaXdpSjNWelpTQnpkSEpwWTNRbk8xeHVYRzUyWVhJZ2RYQndaWEpqWVhObFVHRjBkR1Z5YmlBOUlDOWJRUzFhWFM5bk8xeHVkbUZ5SUcxelVHRjBkR1Z5YmlBOUlDOWViWE10THp0Y2JuWmhjaUJqWVdOb1pTQTlJSHQ5TzF4dVhHNW1kVzVqZEdsdmJpQm9lWEJvWlc1aGRHVlRkSGxzWlU1aGJXVW9jM1J5YVc1bktTQjdYRzRnSUNBZ2NtVjBkWEp1SUhOMGNtbHVaeUJwYmlCallXTm9aVnh1SUNBZ0lEOGdZMkZqYUdWYmMzUnlhVzVuWFZ4dUlDQWdJRG9nWTJGamFHVmJjM1J5YVc1blhTQTlJSE4wY21sdVoxeHVJQ0FnSUNBZ0xuSmxjR3hoWTJVb2RYQndaWEpqWVhObFVHRjBkR1Z5Yml3Z0p5MGtKaWNwWEc0Z0lDQWdJQ0F1ZEc5TWIzZGxja05oYzJVb0tWeHVJQ0FnSUNBZ0xuSmxjR3hoWTJVb2JYTlFZWFIwWlhKdUxDQW5MVzF6TFNjcE8xeHVmVnh1WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdoNWNHaGxibUYwWlZOMGVXeGxUbUZ0WlR0Y2JpSXNJaWQxYzJVZ2MzUnlhV04wSnp0Y2JseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0dWNGNHOXlkSE1zSUZ3aVgxOWxjMDF2WkhWc1pWd2lMQ0I3WEc0Z0lIWmhiSFZsT2lCMGNuVmxYRzU5S1R0Y2JtVjRjRzl5ZEhNdVpHVm1ZWFZzZENBOUlHaDVjR2hsYm1GMFpWQnliM0JsY25SNU8xeHVYRzUyWVhJZ1gyaDVjR2hsYm1GMFpWTjBlV3hsVG1GdFpTQTlJSEpsY1hWcGNtVW9KMmg1Y0dobGJtRjBaUzF6ZEhsc1pTMXVZVzFsSnlrN1hHNWNiblpoY2lCZmFIbHdhR1Z1WVhSbFUzUjViR1ZPWVcxbE1pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyaDVjR2hsYm1GMFpWTjBlV3hsVG1GdFpTazdYRzVjYm1aMWJtTjBhVzl1SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9iMkpxS1NCN0lISmxkSFZ5YmlCdlltb2dKaVlnYjJKcUxsOWZaWE5OYjJSMWJHVWdQeUJ2WW1vZ09pQjdJR1JsWm1GMWJIUTZJRzlpYWlCOU95QjlYRzVjYm1aMWJtTjBhVzl1SUdoNWNHaGxibUYwWlZCeWIzQmxjblI1S0hCeWIzQmxjblI1S1NCN1hHNGdJSEpsZEhWeWJpQW9NQ3dnWDJoNWNHaGxibUYwWlZOMGVXeGxUbUZ0WlRJdVpHVm1ZWFZzZENrb2NISnZjR1Z5ZEhrcE8xeHVmVnh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JsZUhCdmNuUnpXeWRrWldaaGRXeDBKMTA3SWl3aUozVnpaU0J6ZEhKcFkzUW5PMXh1WEc1UFltcGxZM1F1WkdWbWFXNWxVSEp2Y0dWeWRIa29aWGh3YjNKMGN5d2dYQ0pmWDJWelRXOWtkV3hsWENJc0lIdGNiaUFnZG1Gc2RXVTZJSFJ5ZFdWY2JuMHBPMXh1Wlhod2IzSjBjeTVrWldaaGRXeDBJRDBnZEhKaGJuTnBkR2x2Ymp0Y2JseHVkbUZ5SUY5b2VYQm9aVzVoZEdWUWNtOXdaWEowZVNBOUlISmxjWFZwY21Vb0oyTnpjeTFwYmkxcWN5MTFkR2xzY3k5c2FXSXZhSGx3YUdWdVlYUmxVSEp2Y0dWeWRIa25LVHRjYmx4dWRtRnlJRjlvZVhCb1pXNWhkR1ZRY205d1pYSjBlVElnUFNCZmFXNTBaWEp2Y0ZKbGNYVnBjbVZFWldaaGRXeDBLRjlvZVhCb1pXNWhkR1ZRY205d1pYSjBlU2s3WEc1Y2JuWmhjaUJmYVhOUWNtVm1hWGhsWkZaaGJIVmxJRDBnY21WeGRXbHlaU2duWTNOekxXbHVMV3B6TFhWMGFXeHpMMnhwWWk5cGMxQnlaV1pwZUdWa1ZtRnNkV1VuS1R0Y2JseHVkbUZ5SUY5cGMxQnlaV1pwZUdWa1ZtRnNkV1V5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmYVhOUWNtVm1hWGhsWkZaaGJIVmxLVHRjYmx4dWRtRnlJRjlqWVhCcGRHRnNhWHBsVTNSeWFXNW5JRDBnY21WeGRXbHlaU2duTGk0dkxpNHZkWFJwYkhNdlkyRndhWFJoYkdsNlpWTjBjbWx1WnljcE8xeHVYRzUyWVhJZ1gyTmhjR2wwWVd4cGVtVlRkSEpwYm1jeUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZlkyRndhWFJoYkdsNlpWTjBjbWx1WnlrN1hHNWNibVoxYm1OMGFXOXVJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb2IySnFLU0I3SUhKbGRIVnliaUJ2WW1vZ0ppWWdiMkpxTGw5ZlpYTk5iMlIxYkdVZ1B5QnZZbW9nT2lCN0lHUmxabUYxYkhRNklHOWlhaUI5T3lCOVhHNWNiblpoY2lCd2NtOXdaWEowYVdWeklEMGdlMXh1SUNCMGNtRnVjMmwwYVc5dU9pQjBjblZsTEZ4dUlDQjBjbUZ1YzJsMGFXOXVVSEp2Y0dWeWRIazZJSFJ5ZFdVc1hHNGdJRmRsWW10cGRGUnlZVzV6YVhScGIyNDZJSFJ5ZFdVc1hHNGdJRmRsWW10cGRGUnlZVzV6YVhScGIyNVFjbTl3WlhKMGVUb2dkSEoxWlN4Y2JpQWdUVzk2VkhKaGJuTnBkR2x2YmpvZ2RISjFaU3hjYmlBZ1RXOTZWSEpoYm5OcGRHbHZibEJ5YjNCbGNuUjVPaUIwY25WbFhHNTlPMXh1WEc1Y2JuWmhjaUJ3Y21WbWFYaE5ZWEJ3YVc1bklEMGdlMXh1SUNCWFpXSnJhWFE2SUNjdGQyVmlhMmwwTFNjc1hHNGdJRTF2ZWpvZ0p5MXRiM290Snl4Y2JpQWdiWE02SUNjdGJYTXRKMXh1ZlR0Y2JseHVablZ1WTNScGIyNGdjSEpsWm1sNFZtRnNkV1VvZG1Gc2RXVXNJSEJ5YjNCbGNuUjVVSEpsWm1sNFRXRndLU0I3WEc0Z0lHbG1JQ2dvTUN3Z1gybHpVSEpsWm1sNFpXUldZV3gxWlRJdVpHVm1ZWFZzZENrb2RtRnNkV1VwS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbE8xeHVJQ0I5WEc1Y2JpQWdMeThnYjI1c2VTQnpjR3hwZENCdGRXeDBhU0IyWVd4MVpYTXNJRzV2ZENCamRXSnBZeUJpWlhwcFpYSnpYRzRnSUhaaGNpQnRkV3gwYVhCc1pWWmhiSFZsY3lBOUlIWmhiSFZsTG5Od2JHbDBLQzhzS0Q4aFcxNG9LVjBxS0Q4NlhGd29XMTRvS1YwcVhGd3BLVDljWENrcEwyY3BPMXh1WEc0Z0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc1pXNGdQU0J0ZFd4MGFYQnNaVlpoYkhWbGN5NXNaVzVuZEdnN0lHa2dQQ0JzWlc0N0lDc3JhU2tnZTF4dUlDQWdJSFpoY2lCemFXNW5iR1ZXWVd4MVpTQTlJRzExYkhScGNHeGxWbUZzZFdWelcybGRPMXh1SUNBZ0lIWmhjaUIyWVd4MVpYTWdQU0JiYzJsdVoyeGxWbUZzZFdWZE8xeHVJQ0FnSUdadmNpQW9kbUZ5SUhCeWIzQmxjblI1SUdsdUlIQnliM0JsY25SNVVISmxabWw0VFdGd0tTQjdYRzRnSUNBZ0lDQjJZWElnWkdGemFFTmhjMlZRY205d1pYSjBlU0E5SUNnd0xDQmZhSGx3YUdWdVlYUmxVSEp2Y0dWeWRIa3lMbVJsWm1GMWJIUXBLSEJ5YjNCbGNuUjVLVHRjYmx4dUlDQWdJQ0FnYVdZZ0tITnBibWRzWlZaaGJIVmxMbWx1WkdWNFQyWW9aR0Z6YUVOaGMyVlFjbTl3WlhKMGVTa2dQaUF0TVNBbUppQmtZWE5vUTJGelpWQnliM0JsY25SNUlDRTlQU0FuYjNKa1pYSW5LU0I3WEc0Z0lDQWdJQ0FnSUhaaGNpQndjbVZtYVhobGN5QTlJSEJ5YjNCbGNuUjVVSEpsWm1sNFRXRndXM0J5YjNCbGNuUjVYVHRjYmlBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYWlBOUlEQXNJSEJNWlc0Z1BTQndjbVZtYVhobGN5NXNaVzVuZEdnN0lHb2dQQ0J3VEdWdU95QXJLMm9wSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJxYjJsdUlHRnNiQ0J3Y21WbWFYaGxjeUJoYm1RZ1kzSmxZWFJsSUdFZ2JtVjNJSFpoYkhWbFhHNGdJQ0FnSUNBZ0lDQWdkbUZzZFdWekxuVnVjMmhwWm5Rb2MybHVaMnhsVm1Gc2RXVXVjbVZ3YkdGalpTaGtZWE5vUTJGelpWQnliM0JsY25SNUxDQndjbVZtYVhoTllYQndhVzVuVzNCeVpXWnBlR1Z6VzJwZFhTQXJJR1JoYzJoRFlYTmxVSEp2Y0dWeWRIa3BLVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJRzExYkhScGNHeGxWbUZzZFdWelcybGRJRDBnZG1Gc2RXVnpMbXB2YVc0b0p5d25LVHRjYmlBZ2ZWeHVYRzRnSUhKbGRIVnliaUJ0ZFd4MGFYQnNaVlpoYkhWbGN5NXFiMmx1S0Njc0p5azdYRzU5WEc1Y2JtWjFibU4wYVc5dUlIUnlZVzV6YVhScGIyNG9jSEp2Y0dWeWRIa3NJSFpoYkhWbExDQnpkSGxzWlN3Z2NISnZjR1Z5ZEhsUWNtVm1hWGhOWVhBcElIdGNiaUFnTHk4Z1lXeHpieUJqYUdWamF5Qm1iM0lnWVd4eVpXRmtlU0J3Y21WbWFYaGxaQ0IwY21GdWMybDBhVzl1YzF4dUlDQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElEMDlQU0FuYzNSeWFXNW5KeUFtSmlCd2NtOXdaWEowYVdWekxtaGhjMDkzYmxCeWIzQmxjblI1S0hCeWIzQmxjblI1S1NrZ2UxeHVJQ0FnSUhaaGNpQnZkWFJ3ZFhSV1lXeDFaU0E5SUhCeVpXWnBlRlpoYkhWbEtIWmhiSFZsTENCd2NtOXdaWEowZVZCeVpXWnBlRTFoY0NrN1hHNGdJQ0FnTHk4Z2FXWWdkR2hsSUhCeWIzQmxjblI1SUdseklHRnNjbVZoWkhrZ2NISmxabWw0WldSY2JpQWdJQ0IyWVhJZ2QyVmlhMmwwVDNWMGNIVjBJRDBnYjNWMGNIVjBWbUZzZFdVdWMzQnNhWFFvTHl3b1B5RmJYaWdwWFNvb1B6cGNYQ2hiWGlncFhTcGNYQ2twUDF4Y0tTa3ZaeWt1Wm1sc2RHVnlLR1oxYm1OMGFXOXVJQ2gyWVd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlBaEx5MXRiM290ZkMxdGN5MHZMblJsYzNRb2RtRnNLVHRjYmlBZ0lDQjlLUzVxYjJsdUtDY3NKeWs3WEc1Y2JpQWdJQ0JwWmlBb2NISnZjR1Z5ZEhrdWFXNWtaWGhQWmlnblYyVmlhMmwwSnlrZ1BpQXRNU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSGRsWW10cGRFOTFkSEIxZER0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0IyWVhJZ2JXOTZUM1YwY0hWMElEMGdiM1YwY0hWMFZtRnNkV1V1YzNCc2FYUW9MeXdvUHlGYlhpZ3BYU29vUHpwY1hDaGJYaWdwWFNwY1hDa3BQMXhjS1Nrdlp5a3VabWxzZEdWeUtHWjFibU4wYVc5dUlDaDJZV3dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUFoTHkxM1pXSnJhWFF0ZkMxdGN5MHZMblJsYzNRb2RtRnNLVHRjYmlBZ0lDQjlLUzVxYjJsdUtDY3NKeWs3WEc1Y2JpQWdJQ0JwWmlBb2NISnZjR1Z5ZEhrdWFXNWtaWGhQWmlnblRXOTZKeWtnUGlBdE1Ta2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHMXZlazkxZEhCMWREdGNiaUFnSUNCOVhHNWNiaUFnSUNCemRIbHNaVnNuVjJWaWEybDBKeUFySUNnd0xDQmZZMkZ3YVhSaGJHbDZaVk4wY21sdVp6SXVaR1ZtWVhWc2RDa29jSEp2Y0dWeWRIa3BYU0E5SUhkbFltdHBkRTkxZEhCMWREdGNiaUFnSUNCemRIbHNaVnNuVFc5Nkp5QXJJQ2d3TENCZlkyRndhWFJoYkdsNlpWTjBjbWx1WnpJdVpHVm1ZWFZzZENrb2NISnZjR1Z5ZEhrcFhTQTlJRzF2ZWs5MWRIQjFkRHRjYmlBZ0lDQnlaWFIxY200Z2IzVjBjSFYwVm1Gc2RXVTdYRzRnSUgxY2JuMWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaWGh3YjNKMGMxc25aR1ZtWVhWc2RDZGRPeUlzSWlkMWMyVWdjM1J5YVdOMEp6dGNibHh1VDJKcVpXTjBMbVJsWm1sdVpWQnliM0JsY25SNUtHVjRjRzl5ZEhNc0lGd2lYMTlsYzAxdlpIVnNaVndpTENCN1hHNGdJSFpoYkhWbE9pQjBjblZsWEc1OUtUdGNibHh1ZG1GeUlGOWpjbVZoZEdWUWNtVm1hWGhsY2lBOUlISmxjWFZwY21Vb0p5NHZZM0psWVhSbFVISmxabWw0WlhJbktUdGNibHh1ZG1GeUlGOWpjbVZoZEdWUWNtVm1hWGhsY2pJZ1BTQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0Y5amNtVmhkR1ZRY21WbWFYaGxjaWs3WEc1Y2JuWmhjaUJmYzNSaGRHbGpSR0YwWVNBOUlISmxjWFZwY21Vb0p5NHZjM1JoZEdsalJHRjBZU2NwTzF4dVhHNTJZWElnWDNOMFlYUnBZMFJoZEdFeUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZmMzUmhkR2xqUkdGMFlTazdYRzVjYm5aaGNpQmZZM1Z5YzI5eUlEMGdjbVZ4ZFdseVpTZ25MaTl3YkhWbmFXNXpMMk4xY25OdmNpY3BPMXh1WEc1MllYSWdYMk4xY25OdmNqSWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOWpkWEp6YjNJcE8xeHVYRzUyWVhJZ1gyTnliM056Um1Ga1pTQTlJSEpsY1hWcGNtVW9KeTR2Y0d4MVoybHVjeTlqY205emMwWmhaR1VuS1R0Y2JseHVkbUZ5SUY5amNtOXpjMFpoWkdVeUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZlkzSnZjM05HWVdSbEtUdGNibHh1ZG1GeUlGOW1hV3gwWlhJZ1BTQnlaWEYxYVhKbEtDY3VMM0JzZFdkcGJuTXZabWxzZEdWeUp5azdYRzVjYm5aaGNpQmZabWxzZEdWeU1pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyWnBiSFJsY2lrN1hHNWNiblpoY2lCZlpteGxlQ0E5SUhKbGNYVnBjbVVvSnk0dmNHeDFaMmx1Y3k5bWJHVjRKeWs3WEc1Y2JuWmhjaUJmWm14bGVESWdQU0JmYVc1MFpYSnZjRkpsY1hWcGNtVkVaV1poZFd4MEtGOW1iR1Y0S1R0Y2JseHVkbUZ5SUY5bWJHVjRZbTk0VDJ4a0lEMGdjbVZ4ZFdseVpTZ25MaTl3YkhWbmFXNXpMMlpzWlhoaWIzaFBiR1FuS1R0Y2JseHVkbUZ5SUY5bWJHVjRZbTk0VDJ4a01pQTlJRjlwYm5SbGNtOXdVbVZ4ZFdseVpVUmxabUYxYkhRb1gyWnNaWGhpYjNoUGJHUXBPMXh1WEc1MllYSWdYMmR5WVdScFpXNTBJRDBnY21WeGRXbHlaU2duTGk5d2JIVm5hVzV6TDJkeVlXUnBaVzUwSnlrN1hHNWNiblpoY2lCZlozSmhaR2xsYm5ReUlEMGdYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENoZlozSmhaR2xsYm5RcE8xeHVYRzUyWVhJZ1gybHRZV2RsVTJWMElEMGdjbVZ4ZFdseVpTZ25MaTl3YkhWbmFXNXpMMmx0WVdkbFUyVjBKeWs3WEc1Y2JuWmhjaUJmYVcxaFoyVlRaWFF5SUQwZ1gybHVkR1Z5YjNCU1pYRjFhWEpsUkdWbVlYVnNkQ2hmYVcxaFoyVlRaWFFwTzF4dVhHNTJZWElnWDNCdmMybDBhVzl1SUQwZ2NtVnhkV2x5WlNnbkxpOXdiSFZuYVc1ekwzQnZjMmwwYVc5dUp5azdYRzVjYm5aaGNpQmZjRzl6YVhScGIyNHlJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZjRzl6YVhScGIyNHBPMXh1WEc1MllYSWdYM05wZW1sdVp5QTlJSEpsY1hWcGNtVW9KeTR2Y0d4MVoybHVjeTl6YVhwcGJtY25LVHRjYmx4dWRtRnlJRjl6YVhwcGJtY3lJRDBnWDJsdWRHVnliM0JTWlhGMWFYSmxSR1ZtWVhWc2RDaGZjMmw2YVc1bktUdGNibHh1ZG1GeUlGOTBjbUZ1YzJsMGFXOXVJRDBnY21WeGRXbHlaU2duTGk5d2JIVm5hVzV6TDNSeVlXNXphWFJwYjI0bktUdGNibHh1ZG1GeUlGOTBjbUZ1YzJsMGFXOXVNaUE5SUY5cGJuUmxjbTl3VW1WeGRXbHlaVVJsWm1GMWJIUW9YM1J5WVc1emFYUnBiMjRwTzF4dVhHNW1kVzVqZEdsdmJpQmZhVzUwWlhKdmNGSmxjWFZwY21WRVpXWmhkV3gwS0c5aWFpa2dleUJ5WlhSMWNtNGdiMkpxSUNZbUlHOWlhaTVmWDJWelRXOWtkV3hsSUQ4Z2IySnFJRG9nZXlCa1pXWmhkV3gwT2lCdlltb2dmVHNnZlZ4dVhHNTJZWElnY0d4MVoybHVjeUE5SUZ0ZlkzSnZjM05HWVdSbE1pNWtaV1poZFd4MExDQmZZM1Z5YzI5eU1pNWtaV1poZFd4MExDQmZabWxzZEdWeU1pNWtaV1poZFd4MExDQmZabXhsZUdKdmVFOXNaREl1WkdWbVlYVnNkQ3dnWDJkeVlXUnBaVzUwTWk1a1pXWmhkV3gwTENCZmFXMWhaMlZUWlhReUxtUmxabUYxYkhRc0lGOXdiM05wZEdsdmJqSXVaR1ZtWVhWc2RDd2dYM05wZW1sdVp6SXVaR1ZtWVhWc2RDd2dYM1J5WVc1emFYUnBiMjR5TG1SbFptRjFiSFFzSUY5bWJHVjRNaTVrWldaaGRXeDBYVHRjYmx4dVpYaHdiM0owY3k1a1pXWmhkV3gwSUQwZ0tEQXNJRjlqY21WaGRHVlFjbVZtYVhobGNqSXVaR1ZtWVhWc2RDa29lMXh1SUNCd2NtVm1hWGhOWVhBNklGOXpkR0YwYVdORVlYUmhNaTVrWldaaGRXeDBMbkJ5WldacGVFMWhjQ3hjYmlBZ2NHeDFaMmx1Y3pvZ2NHeDFaMmx1YzF4dWZTazdYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR1Y0Y0c5eWRITmJKMlJsWm1GMWJIUW5YVHNpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JseHVMeThnUUdac2IzZGNibHh1YVcxd2IzSjBJSHNnWjJWMFZtbGxkM0J2Y25SSmJtWnZJSDBnWm5KdmJTQW5MaTR2Wlc1MkwzWnBaWGR3YjNKMEoxeHVhVzF3YjNKMElHRmtaRkJ5WldacGVDQm1jbTl0SUNkcGJteHBibVV0YzNSNWJHVXRjSEpsWm1sNFpYSXZjM1JoZEdsakwybHVaR1Y0SjF4dVhHNWpiMjV6ZENCdWIxVnVhWFJ6VG5WdFltVnlTMlY1Y3lBOUlGdGNiaUFnSjJac1pYZ25MRnh1SUNBbmIzQmhZMmwwZVNjc1hHNGdJQ2Q2U1c1a1pYZ25MRnh1SUNBblptOXVkRmRsYVdkb2RDY3NYRzRnSUNkc2FXNWxjeWRjYmwxY2JseHVMeThnZDJobGRHaGxjaUIwYnlCemRYQndiM0owSUhWemFXNW5JREF1TlhCNElIUnZJSEJoYVc1MElERndlQ0IzYVdSMGFDQmliM0prWlhJdVhHNXNaWFFnWDNOMWNIQnZjblJJWVdseWJHbHVaWE02SUQ5aWIyOXNaV0Z1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYzNWd2NHOXlkRWhoYVhKc2FXNWxjeUFvS1NCN1hHNGdJR2xtSUNoMGVYQmxiMllnWDNOMWNIQnZjblJJWVdseWJHbHVaWE1nUFQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdZMjl1YzNRZ1pIQnlJRDBnZDJsdVpHOTNMbVJsZG1salpWQnBlR1ZzVW1GMGFXOWNiaUFnSUNCcFppQW9aSEJ5SUNZbUlHUndjaUErUFNBeUlDWW1JR1J2WTNWdFpXNTBMbVJ2WTNWdFpXNTBSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1pHOWpSV3h0SUQwZ1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwWEc0Z0lDQWdJQ0JqYjI1emRDQjBaWE4wUld4dElEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWxjYmlBZ0lDQWdJR052Ym5OMElHWmhhMlZDYjJSNUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblltOWtlU2NwWEc0Z0lDQWdJQ0JqYjI1emRDQmlaV1p2Y21WT2IyUmxJRDBnWkc5alJXeHRMbVpwY25OMFJXeGxiV1Z1ZEVOb2FXeGtJSHg4SUdSdlkwVnNiUzVtYVhKemRFTm9hV3hrWEc0Z0lDQWdJQ0IwWlhOMFJXeHRMbk4wZVd4bExtSnZjbVJsY2lBOUlDY3dMalZ3ZUNCemIyeHBaQ0IwY21GdWMzQmhjbVZ1ZENkY2JpQWdJQ0FnSUdaaGEyVkNiMlI1TG1Gd2NHVnVaRU5vYVd4a0tIUmxjM1JGYkcwcFhHNGdJQ0FnSUNCa2IyTkZiRzB1YVc1elpYSjBRbVZtYjNKbEtHWmhhMlZDYjJSNUxDQmlaV1p2Y21WT2IyUmxLVnh1SUNBZ0lDQWdYM04xY0hCdmNuUklZV2x5YkdsdVpYTWdQU0IwWlhOMFJXeHRMbTltWm5ObGRFaGxhV2RvZENBOVBUMGdNVnh1SUNBZ0lDQWdaRzlqUld4dExuSmxiVzkyWlVOb2FXeGtLR1poYTJWQ2IyUjVLVnh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJSHRjYmlBZ0lDQWdJRjl6ZFhCd2IzSjBTR0ZwY214cGJtVnpJRDBnWm1Gc2MyVmNiaUFnSUNCOVhHNGdJSDFjYmlBZ2NtVjBkWEp1SUY5emRYQndiM0owU0dGcGNteHBibVZ6WEc1OVhHNWNiaThxS2x4dUlDb2djbVZ0YjNabElHTnZiVzFsYm5SeklHWnliMjBnWVNCamMzTlVaWGgwTGx4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdkSEpwYlVOdmJXMWxiblFnS0dOemMxUmxlSFE2SUhOMGNtbHVaeWs2SUhOMGNtbHVaeUI3WEc0Z0lISmxkSFZ5YmlCamMzTlVaWGgwTG5KbGNHeGhZMlVvTHlnL09seGNMMXhjS2lsYlhGeHpYRnhUWFNvL1hGd3FYRnd2TDJjc0lDY25LVnh1ZlZ4dVhHNXNaWFFnYzNWd2NHOXlkRG9nWW05dmJHVmhiaUI4SUc1MWJHd2dQU0J1ZFd4c1hHNWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQnpkWEJ3YjNKMFUzUnBZMnQ1SUNncE9pQmliMjlzWldGdUlIdGNiaUFnYVdZZ0tITjFjSEJ2Y25RZ0lUMDlJRzUxYkd3cElIdGNiaUFnSUNCeVpYUjFjbTRnYzNWd2NHOXlkRnh1SUNCOVhHNGdJR052Ym5OMElHVnNaVzFsYm5RZ1BTQjNhVzVrYjNjdVpHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5bGNiaUFnWTI5dWMzUWdaV3hsYldWdWRGTjBlV3hsSUQwZ1pXeGxiV1Z1ZEM1emRIbHNaVnh1SUNCbGJHVnRaVzUwVTNSNWJHVXVZM056VkdWNGRDQTlJQ2R3YjNOcGRHbHZiam90ZDJWaWEybDBMWE4wYVdOcmVUdHdiM05wZEdsdmJqcHpkR2xqYTNrN0oxeHVJQ0J6ZFhCd2IzSjBJRDBnWld4bGJXVnVkRk4wZVd4bExuQnZjMmwwYVc5dUxtbHVaR1Y0VDJZb0ozTjBhV05yZVNjcElDRTlQU0F0TVZ4dUlDQnlaWFIxY200Z2MzVndjRzl5ZEZ4dWZWeHVYRzVqYjI1emRDQnlaV2RRWlhKalpXNTBZV2RsSUQwZ0wxNWJLeTFkUDF4Y1pDc29YRnd1WEZ4a0t5ay9KU1F2WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYVhOUVpYSmpaVzUwWVdkbElDaDJZV3c2SUhOMGNtbHVaeWtnZTF4dUlDQnlaWFIxY200Z2NtVm5VR1Z5WTJWdWRHRm5aUzUwWlhOMEtIWmhiQ2xjYm4xY2JseHVZMjl1YzNRZ2NtVm5WVzVwZEhOT2RXMGdQU0F2WGloYkt5MWRQMXhjWkNzb1B6cGNYQzVjWEdRcktUOHBLRnR3TEhkZGVDay9KQzhnTHk4Z2MzVndjRzl5ZENCMWJtbDBjem9nY0hnc0lIZDRMbHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJRzV2Y20xaGJHbDZaVlZ1YVhSelRuVnRJQ2gyWVd3NklITjBjbWx1WnlrNklITjBjbWx1WnlCN1hHNGdJR052Ym5OMElHMWhkR05vSUQwZ2RtRnNMbTFoZEdOb0tISmxaMVZ1YVhSelRuVnRLVnh1SUNCcFppQW9JVzFoZEdOb0tTQjdJSEpsZEhWeWJpQW5KeUI5WEc0Z0lHeGxkQ0IxYm1sMElEMGdKM0I0SnlBdkx5QndlQ0JpZVNCa1pXWmhkV3gwTGx4dUlDQnBaaUFvYldGMFkyaGJNbDBwSUh0Y2JpQWdJQ0IxYm1sMElEMGdiV0YwWTJoYk1sMWNiaUFnZlZ4dUlDQnlaWFIxY200Z2NHRnljMlZUWTJGc1pTaHdZWEp6WlVac2IyRjBLRzFoZEdOb1d6RmRLU3dnZFc1cGRDbGNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBWVzVwZEZOallXeGxUV0Z3SUNncElIdGNiaUFnWTI5dWMzUWdleUJ6WTJGc1pTd2daSEJ5SUgwZ1BTQm5aWFJXYVdWM2NHOXlkRWx1Wm04b0tWeHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lIQjRPaUJ6WTJGc1pTeGNiaUFnSUNCM2VEb2djMk5oYkdVZ0tpQmtjSEpjYmlBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCc2FXMXBkRk5qWVd4bElDaDJZV3dzSUd4cGJXbDBLU0I3WEc0Z0lHeHBiV2wwSUQwZ2JHbHRhWFFnZkh3Z01WeHVJQ0JqYjI1emRDQnphV2R1SUQwZ2RtRnNJRDA5UFNBd0lEOGdNQ0E2SUhaaGJDQStJREFnUHlBeElEb2dMVEZjYmlBZ2JHVjBJRzVsZDFaaGJDQTlJRTFoZEdndVlXSnpLSFpoYkNrZ1BpQnNhVzFwZENBL0lIWmhiQ0E2SUhOcFoyNGdLaUJzYVcxcGRGeHVJQ0F2THlCemRYQndiM0owSURGd2VDQmtaWFpwWTJVZ2QybGtkR2d1WEc0Z0lHbG1JQ2h1WlhkV1lXd2dQVDA5SURFZ0ppWWdkbUZzSUR3Z01TQW1KaUJ6ZFhCd2IzSjBTR0ZwY214cGJtVnpLQ2twSUh0Y2JpQWdJQ0J1WlhkV1lXd2dQU0F3TGpWY2JpQWdmVnh1SUNCeVpYUjFjbTRnYm1WM1ZtRnNYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQmhjbk5sVTJOaGJHVWdLSFpoYkRvZ2JuVnRZbVZ5TENCMWJtbDBPaUJ6ZEhKcGJtY3BPaUJ6ZEhKcGJtY2dlMXh1SUNCamIyNXpkQ0IxYm1sMFUyTmhiR1ZOWVhBZ1BTQm5aWFJWYm1sMFUyTmhiR1ZOWVhBb0tWeHVJQ0J5WlhSMWNtNGdiR2x0YVhSVFkyRnNaU2gyWVd3Z0tpQjFibWwwVTJOaGJHVk5ZWEJiZFc1cGRGMHBJQ3NnSjNCNEoxeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYm05eWJXRnNhWHBsVTNSeWFXNW5JQ2h6ZEhsc1pVdGxlVG9nYzNSeWFXNW5MQ0J6ZEhsc1pWWmhiRG9nYzNSeWFXNW5LVG9nYzNSeWFXNW5JSHRjYmlBZ2FXWWdLR2x6VUdWeVkyVnVkR0ZuWlNoemRIbHNaVlpoYkNrcElIdGNiaUFnSUNCeVpYUjFjbTRnYzNSNWJHVldZV3hjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lBeExpQjBaWE4wSUdsbUlHbHpJR0VnY21WbmRXeGhjaUJ6WTJGc1pTQmpjM011SUdVdVp5NGdZSGRwWkhSb09pQXhNREJ3ZUR0Z1hHNGdJQ0FxSUNCMGFHbHpJSE5vYjNWc1pDQmlaU0JoSUhOMFlXNWtZV3h2Ym1VZ2JuVnRZbVZ5SUhaaGJIVmxJSGRwZEdnZ2IzSWdkMmwwYUc5MWRDQjFibWwwTENCdmRHaGxjbmRwYzJWY2JpQWdJQ29nSUdsMElITm9iM1ZzWkc0bmRDQmlaU0JqYUdGdVoyVmtMbHh1SUNBZ0tpOWNiaUFnWTI5dWMzUWdkVzVwZEhOT2RXMGdQU0J1YjNKdFlXeHBlbVZWYm1sMGMwNTFiU2h6ZEhsc1pWWmhiQ2xjYmlBZ2FXWWdLSFZ1YVhSelRuVnRLU0I3SUhKbGRIVnliaUIxYm1sMGMwNTFiU0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJREl1SUdsbUlHRWdjM1J5YVc1bklHTnZiblJoYVc1eklHMTFiSFJwY0d4bElIQjRJSFpoYkhWbGN5d2dkR2hoYmlCMGFHVjVJSE5vYjNWc1pDQmlaU0JoYkd3Z2JtOXliV0ZzYVhwbFpDNWNiaUFnSUNvZ0lIWmhiSFZsY3lCemFHOTFiR1FnYUdGMlpTQjNlQ0J2Y2lCd2VDQjFibWwwY3l3Z2IzUm9aWEozYVhObElIUm9aWGtnYzJodmRXeGtJR0psSUd4bFpuUWdkVzVqYUdGdVoyVmtMbHh1SUNBZ0tpQWdaUzVuTGx4dUlDQWdLaUFnSUNCMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpTZ3hNSEI0TENBMmNIZ3NJREFwWEc0Z0lDQXFJQ0FnSUdKdmNtUmxjam9nTW5CNElITnZiR2xrSUhKbFpGeHVJQ0FnS2k5Y2JpQWdZMjl1YzNRZ2JuVnRVbVZuSUQwZ0x5aGJLeTFkUDF0Y1hHUXVYU3NwS0Z0d0xIZGRlQ2t2YVdkY2JpQWdhV1lnS0c1MWJWSmxaeTUwWlhOMEtITjBlV3hsVm1Gc0tTa2dlMXh1SUNBZ0lHTnZibk4wSUhWdWFYUlRZMkZzWlUxaGNDQTlJR2RsZEZWdWFYUlRZMkZzWlUxaGNDZ3BYRzRnSUNBZ1kyOXVjM1FnZG1Gc0lEMGdjM1I1YkdWV1lXd3VjbVZ3YkdGalpTaHVkVzFTWldjc0lHWjFibU4wYVc5dUlDaHRMQ0FrTUN3Z0pERXBJSHRjYmlBZ0lDQWdJR052Ym5OMElISmxjeUE5SUhCaGNuTmxSbXh2WVhRb0pEQXBJQ29nZFc1cGRGTmpZV3hsVFdGd1d5UXhYVnh1SUNBZ0lDQWdjbVYwZFhKdUlHeHBiV2wwVTJOaGJHVW9jbVZ6S1NBcklDZHdlQ2RjYmlBZ0lDQjlLVnh1SUNBZ0lISmxkSFZ5YmlCMllXeGNiaUFnZlZ4dVhHNGdJQzh2SUc5MGFHVnlkMmx6WlZ4dUlDQnlaWFIxY200Z2MzUjViR1ZXWVd4Y2JuMWNibHh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR0YxZEc5UWNtVm1hWGdnS0hOMGVXeGxPaUI3ZlNrNklIdDlJSHRjYmlBZ1kyOXVjM1FnY0hKbFptbDRaV1FnUFNCaFpHUlFjbVZtYVhnb2MzUjViR1VwWEc0Z0lDOHZJR1pzWlhnZ2IyNXNlU0JoWkdSbFpDQlhaV0pyYVhSR2JHVjRMaUJUYUc5MWJHUWdZV1JrSUZkbFltdHBkRUp2ZUVac1pYZ2dZV3h6Ynk1Y2JpQWdZMjl1YzNRZ1pteGxlQ0E5SUhCeVpXWnBlR1ZrTG1ac1pYaGNiaUFnYVdZZ0tHWnNaWGdwSUh0Y2JpQWdJQ0J3Y21WbWFYaGxaQzVYWldKcmFYUkNiM2hHYkdWNElEMGdabXhsZUZ4dUlDQWdJSEJ5WldacGVHVmtMazF2ZWtKdmVFWnNaWGdnUFNCbWJHVjRYRzRnSUNBZ2NISmxabWw0WldRdVRYTkdiR1Y0SUQwZ1pteGxlRnh1SUNCOVhHNGdJSEpsZEhWeWJpQndjbVZtYVhobFpGeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnYm05eWJXRnNhWHBsVG5WdFltVnlJQ2h6ZEhsc1pVdGxlVG9nYzNSeWFXNW5MQ0J6ZEhsc1pWWmhiRG9nYm5WdFltVnlLVG9nYzNSeWFXNW5JSHRjYmlBZ1kyOXVjM1FnZXlCelkyRnNaU0I5SUQwZ1oyVjBWbWxsZDNCdmNuUkpibVp2S0NsY2JpQWdjbVYwZFhKdUlITjBlV3hsVm1Gc0lDb2djMk5oYkdVZ0t5QW5jSGduWEc1OVhHNWNiaThxS2x4dUlDb2dibTl5YldGc2FYcGxJSE4wZVd4bElIUnZJR0ZrWVhCMFpTQjBieUJqZFhKeVpXNTBJSFpwWlhkd2IzSjBJR0o1SUcxMWJIUnBjR3g1SUdOMWNuSmxiblFnYzJOaGJHVXVYRzRnS2lCQWNHRnlZVzBnSUh0dlltcGxZM1I5SUhOMGVXeGxPaUJ6YUc5MWJHUWdZbVVnWTJGdFpXeERZWE5sTGx4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdibTl5YldGc2FYcGxVM1I1YkdVZ0tITjBlV3hsT2lCN2ZTa2dlMXh1SUNCamIyNXpkQ0J5WlhNZ1BTQjdmVnh1SUNCbWIzSWdLR052Ym5OMElHdGxlU0JwYmlCemRIbHNaU2tnZTF4dUlDQWdJR052Ym5OMElIWmhiQ0E5SUhOMGVXeGxXMnRsZVYxY2JpQWdJQ0JwWmlBb2JtOVZibWwwYzA1MWJXSmxja3RsZVhNdWFXNWtaWGhQWmloclpYa3BJRDRnTFRFcElIdGNiaUFnSUNBZ0lISmxjMXRyWlhsZElEMGdkbUZzWEc0Z0lDQWdJQ0JqYjI1MGFXNTFaVnh1SUNBZ0lIMWNiaUFnSUNCemQybDBZMmdnS0hSNWNHVnZaaUIyWVd3cElIdGNiaUFnSUNBZ0lHTmhjMlVnSjNOMGNtbHVaeWM2WEc0Z0lDQWdJQ0FnSUhKbGMxdHJaWGxkSUQwZ2JtOXliV0ZzYVhwbFUzUnlhVzVuS0d0bGVTd2dkbUZzS1Z4dUlDQWdJQ0FnSUNCaWNtVmhhMXh1SUNBZ0lDQWdZMkZ6WlNBbmJuVnRZbVZ5SnpwY2JpQWdJQ0FnSUNBZ2NtVnpXMnRsZVYwZ1BTQnViM0p0WVd4cGVtVk9kVzFpWlhJb2EyVjVMQ0IyWVd3cFhHNGdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0J5WlhOYmEyVjVYU0E5SUhaaGJGeHVJQ0FnSUNBZ0lDQmljbVZoYTF4dUlDQWdJSDFjYmlBZ2ZWeHVJQ0J5WlhSMWNtNGdjbVZ6WEc1OVhHNWNiaThxS2x4dUlDb2daMlYwSUhSeVlXNXpabTl5YlU5aWFseHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWjJWMFZISmhibk5tYjNKdFQySnFJQ2hsYkcwNklFaFVUVXhGYkdWdFpXNTBLVG9nWVc1NUlIdGNiaUFnYkdWMElITjBlV3hsVDJKcUlEMGdlMzFjYmlBZ2FXWWdLQ0ZsYkcwcElIc2djbVYwZFhKdUlITjBlV3hsVDJKcUlIMWNiaUFnWTI5dWMzUWdkSEpoYm5ObWIzSnRVM1J5SUQwZ1pXeHRMbk4wZVd4bExuZGxZbXRwZEZSeVlXNXpabTl5YlZ4dUlDQWdJSHg4SUdWc2JTNXpkSGxzWlM1dGIzcFVjbUZ1YzJadmNtMWNiaUFnSUNCOGZDQmxiRzB1YzNSNWJHVXVkSEpoYm5ObWIzSnRYRzRnSUdsbUlDaDBjbUZ1YzJadmNtMVRkSElnSmlZZ2RISmhibk5tYjNKdFUzUnlMbTFoZEdOb0tDOG9Qem9nS2lnL09uUnlZVzV6YkdGMFpYeHliM1JoZEdWOGMyTmhiR1VwVzE0b1hTcGNYQ2hiWGloZEsxeGNLU2tyTDJrcEtTQjdYRzRnSUNBZ2MzUjViR1ZQWW1vZ1BTQjBjbUZ1YzJadmNtMVRkSEl1ZEhKcGJTZ3BMbkpsY0d4aFkyVW9MeXdnS3k5bkxDQW5MQ2NwTG5Od2JHbDBLQ2NnSnlrdWNtVmtkV05sS0daMWJtTjBhVzl1SUNod2NtVXNJSE4wY2lrZ2UxeHVJQ0FnSUNBZ1d5ZDBjbUZ1YzJ4aGRHVW5MQ0FuYzJOaGJHVW5MQ0FuY205MFlYUmxKMTB1Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JtVjNJRkpsWjBWNGNDaHVZVzFsTENBbmFTY3BMblJsYzNRb2MzUnlLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIQnlaVnR1WVcxbFhTQTlJSE4wY2x4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpWeHVJQ0FnSUgwc0lIdDlLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQnpkSGxzWlU5aWFseHVmVnh1WEc0dktpcGNiaUFxSUhSeVlXNXpiR0YwWlNCaElIUnlZVzV6Wm05eWJTQnpkSEpwYm1jZ1puSnZiU0JoSUhSeVlXNXpabTl5YlU5aWFpNWNiaUFxTDF4dVpYaHdiM0owSUdaMWJtTjBhVzl1SUdkbGRGUnlZVzV6Wm05eWJWTjBjaUFvYjJKcU9pQjdmU2s2SUhOMGNtbHVaeUI3WEc0Z0lISmxkSFZ5YmlCUFltcGxZM1F1YTJWNWN5aHZZbW9wTG5KbFpIVmpaU2htZFc1amRHbHZiaUFvY0hKbExDQnJaWGtwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEpsSUNzZ2IySnFXMnRsZVYwZ0t5QW5JQ2RjYmlBZ2ZTd2dKeWNwWEc1OVhHNWNiaThxS2x4dUlDb2dZV1JrSUhSeVlXNXpabTl5YlNCemRIbHNaU0IwYnlCbGJHVnRaVzUwTGx4dUlDb2dRSEJoY21GdElIdElWRTFNUld4bGJXVnVkSDBnWld4dFhHNGdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdjM1I1YkdVNklIUnlZVzV6Wm05eWJTQnZZbXBsWTNRc0lHWnZjbTFoZENCcGN5QnNhV3RsSUhSb2FYTTZYRzRnS2lBZ0lIdGNiaUFxSUNBZ0lDQjBjbUZ1YzJ4aGRHVTZJQ2QwY21GdWMyeGhkR1V6WkNneWNIZ3NJREp3ZUN3Z01uQjRLU2NzWEc0Z0tpQWdJQ0FnYzJOaGJHVTZJQ2R6WTJGc1pTZ3dMaklwSnl4Y2JpQXFJQ0FnSUNCeWIzUmhkR1U2SUNkeWIzUmhkR1VvTXpCa1pXY3BKMXh1SUNvZ0lDQjlYRzRnS2lCQWNHRnlZVzBnZTJKdmIyeGxZVzU5SUhKbGNHeGhZMlU2SUhkb1pYUm9aWElnZEc4Z2NtVndiR0ZqWlNCaGJHd2dkSEpoYm5ObWIzSnRJSEJ5YjNCbGNuUnBaWE11WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQmhaR1JVY21GdWMyWnZjbTBnS0dWc2JUb2dTRlJOVEVWc1pXMWxiblFzSUhOMGVXeGxPaUI3ZlN3Z2NtVndiR0ZqWlRvZ1ltOXZiR1ZoYmlrNklIWnZhV1FnZTF4dUlDQnBaaUFvSVhOMGVXeGxLU0I3SUhKbGRIVnliaUI5WEc0Z0lHeGxkQ0J6ZEhsc1pVOWlhaUE5SUh0OVhHNGdJR2xtSUNnaGNtVndiR0ZqWlNrZ2UxeHVJQ0FnSUhOMGVXeGxUMkpxSUQwZ1oyVjBWSEpoYm5ObWIzSnRUMkpxS0dWc2JTbGNiaUFnZlZ4dUlDQm1iM0lnS0dOdmJuTjBJR3RsZVNCcGJpQnpkSGxzWlNrZ2UxeHVJQ0FnSUdOdmJuTjBJSFpoYkNBOUlITjBlV3hsVzJ0bGVWMWNiaUFnSUNCcFppQW9kbUZzS1NCN1hHNGdJQ0FnSUNCemRIbHNaVTlpYWx0clpYbGRJRDBnZG1Gc1hHNGdJQ0FnZlZ4dUlDQjlYRzRnSUdOdmJuTjBJSEpsYzFOMGNpQTlJR2RsZEZSeVlXNXpabTl5YlZOMGNpaHpkSGxzWlU5aWFpbGNiaUFnWld4dExuTjBlV3hsTG5kbFltdHBkRlJ5WVc1elptOXliU0E5SUhKbGMxTjBjbHh1SUNCbGJHMHVjM1I1YkdVdWJXOTZWSEpoYm5ObWIzSnRJRDBnY21WelUzUnlYRzRnSUdWc2JTNXpkSGxzWlM1MGNtRnVjMlp2Y20wZ1BTQnlaWE5UZEhKY2JuMWNibHh1THlvcVhHNGdLaUJoWkdRZ2RISmhibk5zWVhSbElGZ2dkRzhnZEdobElHVnNaVzFsYm5RdVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJoWkdSVWNtRnVjMnhoZEdWWUlDaGxiRzA2SUVoVVRVeEZiR1Z0Wlc1MExDQjBiMEZrWkRvZ2JuVnRZbVZ5S1RvZ2RtOXBaQ0I3WEc0Z0lHbG1JQ2doZEc5QlpHUXBJSHNnY21WMGRYSnVJSDFjYmlBZ1kyOXVjM1FnYzNSNWJHVlBZbW9nUFNCblpYUlVjbUZ1YzJadmNtMVBZbW9vWld4dEtWeHVJQ0JwWmlBb0lYTjBlV3hsVDJKcUxuUnlZVzV6YkdGMFpTa2dlMXh1SUNBZ0lITjBlV3hsVDJKcUxuUnlZVzV6YkdGMFpTQTlJQ2QwY21GdWMyeGhkR1V6WkNnd2NIZ3NJREJ3ZUN3Z01IQjRLU2RjYmlBZ2ZWeHVJQ0J6ZEhsc1pVOWlhaTUwY21GdWMyeGhkR1VnUFNCemRIbHNaVTlpYWk1MGNtRnVjMnhoZEdVdWNtVndiR0ZqWlNndld5c3RYRnhrTGwwclczQjNYWGd2TENCbWRXNWpkR2x2YmlBb0pEQXBJSHRjYmlBZ0lDQnlaWFIxY200Z0tIQmhjbk5sUm14dllYUW9KREFwSUNzZ2RHOUJaR1FwSUNzZ0ozQjRKMXh1SUNCOUtWeHVJQ0JqYjI1emRDQnlaWE5UZEhJZ1BTQm5aWFJVY21GdWMyWnZjbTFUZEhJb2MzUjViR1ZQWW1vcFhHNGdJR1ZzYlM1emRIbHNaUzUzWldKcmFYUlVjbUZ1YzJadmNtMGdQU0J5WlhOVGRISmNiaUFnWld4dExuTjBlV3hsTG0xdmVsUnlZVzV6Wm05eWJTQTlJSEpsYzFOMGNseHVJQ0JsYkcwdWMzUjViR1V1ZEhKaGJuTm1iM0p0SUQwZ2NtVnpVM1J5WEc1OVhHNWNiaThxS2x4dUlDb2dZMjl3ZVNCaElIUnlZVzV6Wm05eWJTQmlaV2hoZG1sdmRYSWdabkp2YlNCdmJtVWdaV3hsYldWdWRDQjBieUJoYm05MGFHVnlMbHh1SUNvZ2EyVjVJR052ZFd4a0lHSmxPaUFuZEhKaGJuTnNZWFJsSnlCOElDZHpZMkZzWlNjZ2ZDQW5jbTkwWVhSbEoxeHVJQ292WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnWTI5d2VWUnlZVzV6Wm05eWJTQW9abkp2YlRvZ1NGUk5URVZzWlcxbGJuUXNJSFJ2T2lCSVZFMU1SV3hsYldWdWRDd2dhMlY1T2lCemRISnBibWNnZkNCMmIybGtLVG9nZG05cFpDQjdYRzRnSUd4bGRDQnpkSEpjYmlBZ2FXWWdLQ0ZyWlhrcElIdGNiaUFnSUNCemRISWdQU0JtY205dExuTjBlV3hsTG5kbFltdHBkRlJ5WVc1elptOXliVnh1SUNBZ0lDQWdmSHdnWm5KdmJTNXpkSGxzWlM1dGIzcFVjbUZ1YzJadmNtMWNiaUFnSUNBZ0lIeDhJR1p5YjIwdWMzUjViR1V1ZEhKaGJuTm1iM0p0WEc0Z0lIMWNiaUFnWld4elpTQjdYRzRnSUNBZ1kyOXVjM1FnWm5KdmJVOWlhaUE5SUdkbGRGUnlZVzV6Wm05eWJVOWlhaWhtY205dEtWeHVJQ0FnSUdsbUlDZ2habkp2YlU5aWFsdHJaWGxkS1NCN0lISmxkSFZ5YmlCOVhHNGdJQ0FnWTI5dWMzUWdkRzlQWW1vZ1BTQm5aWFJVY21GdWMyWnZjbTFQWW1vb2RHOHBYRzRnSUNBZ2RHOVBZbXBiYTJWNVhTQTlJR1p5YjIxUFltcGJhMlY1WFZ4dUlDQWdJSE4wY2lBOUlHZGxkRlJ5WVc1elptOXliVk4wY2loMGIwOWlhaWxjYmlBZ2ZWeHVJQ0IwYnk1emRIbHNaUzUzWldKcmFYUlVjbUZ1YzJadmNtMGdQU0J6ZEhKY2JpQWdkRzh1YzNSNWJHVXViVzk2VkhKaGJuTm1iM0p0SUQwZ2MzUnlYRzRnSUhSdkxuTjBlV3hsTG5SeVlXNXpabTl5YlNBOUlITjBjbHh1ZlZ4dVhHNHZLaXBjYmlBcUlHZGxkQ0JqYjJ4dmNpZHpJSElzSUdjc0lHSWdkbUZzZFdVdVhHNGdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdZMjlzYjNJZ2MzVndjRzl5ZENCaGJHd2dhMmx1WkhNZ2IyWWdkbUZzZFdVZ2IyWWdZMjlzYjNJdVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSU1oySWdLR052Ykc5eU9pQnpkSEpwYm1jcElIdGNiaUFnWTI5dWMzUWdhR0Y0VW1WbklEMGdMeU1vVzF4Y1pHRXRaa0V0UmwxN01uMHBLRnRjWEdSaExXWkJMVVpkZXpKOUtTaGJYRnhrWVMxbVFTMUdYWHN5ZlNrdlhHNGdJR052Ym5OMElISm5ZbEpsWnlBOUlDOXlaMkpjWENnb1hGeGtLeWtzWEZ4ektpaGNYR1FyS1N4Y1hITXFLRnhjWkNzcFhGd3BMMXh1SUNCamIyNXpkQ0J6Y0dGdUlEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbmMzQmhiaWNwWEc0Z0lHTnZibk4wSUdKdlpIa2dQU0JrYjJOMWJXVnVkQzVpYjJSNVhHNGdJSE53WVc0dWMzUjViR1V1WTNOelZHVjRkQ0E5SUdCamIyeHZjam9nSkh0amIyeHZjbjA3SUhkcFpIUm9PaUF3Y0hnN0lHaGxhV2RvZERvZ01IQjRPMkJjYmlBZ1ltOWtlU0FtSmlCaWIyUjVMbUZ3Y0dWdVpFTm9hV3hrS0hOd1lXNHBYRzRnSUdOdmJHOXlJRDBnZDJsdVpHOTNMbWRsZEVOdmJYQjFkR1ZrVTNSNWJHVW9jM0JoYmlrdVkyOXNiM0lnS3lBbkoxeHVJQ0JpYjJSNUlDWW1JR0p2WkhrdWNtVnRiM1psUTJocGJHUW9jM0JoYmlsY2JseHVJQ0JzWlhRZ2JXRjBZMmhjYmlBZ2JXRjBZMmdnUFNCamIyeHZjaTV0WVhSamFDaG9ZWGhTWldjcFhHNGdJR2xtSUNodFlYUmphQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjdYRzRnSUNBZ0lDQnlPaUJ3WVhKelpVbHVkQ2h0WVhSamFGc3hYU3dnTVRZcExGeHVJQ0FnSUNBZ1p6b2djR0Z5YzJWSmJuUW9iV0YwWTJoYk1sMHNJREUyS1N4Y2JpQWdJQ0FnSUdJNklIQmhjbk5sU1c1MEtHMWhkR05vV3pOZExDQXhOaWxjYmlBZ0lDQjlYRzRnSUgxY2JpQWdiV0YwWTJnZ1BTQmpiMnh2Y2k1dFlYUmphQ2h5WjJKU1pXY3BYRzRnSUdsbUlDaHRZWFJqYUNrZ2UxeHVJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0J5T2lCd1lYSnpaVWx1ZENodFlYUmphRnN4WFNrc1hHNGdJQ0FnSUNCbk9pQndZWEp6WlVsdWRDaHRZWFJqYUZzeVhTa3NYRzRnSUNBZ0lDQmlPaUJ3WVhKelpVbHVkQ2h0WVhSamFGc3pYU2xjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1THlvcVhHNGdLaUJuWlhRZ2MzUjViR1VnYzJobFpYUWdkMmwwYUNCdmQyNWxjaUJ1YjJSbEozTWdhV1JjYmlBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCcFpDQnZkMjVsY2lCdWIyUmxJR2xrTGx4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwVTNSNWJHVlRhR1ZsZEVKNVNXUWdLR2xrUHpvZ2MzUnlhVzVuS1NCN1hHNGdJR2xtSUNnaGFXUXBJSHNnY21WMGRYSnVJSDFjYmlBZ1kyOXVjM1FnYzNSNWJHVlRhR1ZsZEhNZ1BTQmtiMk4xYldWdWRDNXpkSGxzWlZOb1pXVjBjMXh1SUNCamIyNXpkQ0JzWlc0Z1BTQnpkSGxzWlZOb1pXVjBjeTVzWlc1bmRHaGNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCc1pXNDdJR2tyS3lrZ2UxeHVJQ0FnSUdOdmJuTjBJSE4wZVd4bFUyaGxaWFFnUFNCemRIbHNaVk5vWldWMGMxdHBYVnh1SUNBZ0lHbG1JQ2h6ZEhsc1pWTm9aV1YwTG05M2JtVnlUbTlrWlM1cFpDQTlQVDBnYVdRcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCemRIbHNaVk5vWldWMFhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlHZGxkRU5vYVd4a2NtVnVWRzkwWVd4WGFXUjBhQ0FvWTJocGJHUnlaVzRwSUh0Y2JpQWdZMjl1YzNRZ2JHVnVJRDBnWTJocGJHUnlaVzR1YkdWdVozUm9YRzRnSUd4bGRDQjBiM1JoYkNBOUlEQmNiaUFnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCc1pXNDdJR2tyS3lrZ2UxeHVJQ0FnSUhSdmRHRnNJQ3M5SUdOb2FXeGtjbVZ1VzJsZExtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTG5kcFpIUm9YRzRnSUgxY2JpQWdjbVYwZFhKdUlIUnZkR0ZzWEc1OVhHNHZLaXBjYmlBcUlHZGxkQ0IwYjNSaGJDQmpiMjUwWlc1MElIZHBaSFJvSUc5bUlIUm9aU0JsYkdWdFpXNTBMbHh1SUNvZ1FIQmhjbUZ0SUh0SVZFMU1SV3hsYldWdWRIMGdaV3h0WEc0Z0tpOWNibVY0Y0c5eWRDQm1kVzVqZEdsdmJpQm5aWFJTWVc1blpWZHBaSFJvSUNobGJHMDZJRWhVVFV4RmJHVnRaVzUwS1NCN1hHNGdJR052Ym5OMElHTm9hV3hrY21WdUlEMGdaV3h0TG1Ob2FXeGtjbVZ1WEc0Z0lHbG1JQ2doWTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdaV3h0TG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BMbmRwWkhSb1hHNGdJSDFjYmlBZ2FXWWdLQ0ZTWVc1blpTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCblpYUkRhR2xzWkhKbGJsUnZkR0ZzVjJsa2RHZ29ZMmhwYkdSeVpXNHBYRzRnSUgxY2JpQWdZMjl1YzNRZ2NtRnVaMlVnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZTWVc1blpTZ3BYRzRnSUdsbUlDZ2hjbUZ1WjJVdWMyVnNaV04wVG05a1pVTnZiblJsYm5SektTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkbGRFTm9hV3hrY21WdVZHOTBZV3hYYVdSMGFDaGphR2xzWkhKbGJpbGNiaUFnZlZ4dUlDQnlZVzVuWlM1elpXeGxZM1JPYjJSbFEyOXVkR1Z1ZEhNb1pXeHRLVnh1SUNCeVpYUjFjbTRnY21GdVoyVXVaMlYwUW05MWJtUnBibWREYkdsbGJuUlNaV04wS0NrdWQybGtkR2hjYm4xY2JpSXNJaThxWEc0Z0tpQk1hV05sYm5ObFpDQjBieUIwYUdVZ1FYQmhZMmhsSUZOdlpuUjNZWEpsSUVadmRXNWtZWFJwYjI0Z0tFRlRSaWtnZFc1a1pYSWdiMjVsWEc0Z0tpQnZjaUJ0YjNKbElHTnZiblJ5YVdKMWRHOXlJR3hwWTJWdWMyVWdZV2R5WldWdFpXNTBjeTRnSUZObFpTQjBhR1VnVGs5VVNVTkZJR1pwYkdWY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhkcGRHZ2dkR2hwY3lCM2IzSnJJR1p2Y2lCaFpHUnBkR2x2Ym1Gc0lHbHVabTl5YldGMGFXOXVYRzRnS2lCeVpXZGhjbVJwYm1jZ1kyOXdlWEpwWjJoMElHOTNibVZ5YzJocGNDNGdJRlJvWlNCQlUwWWdiR2xqWlc1elpYTWdkR2hwY3lCbWFXeGxYRzRnS2lCMGJ5QjViM1VnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxYRzRnS2lCY0lreHBZMlZ1YzJWY0lpazdJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlZjYmlBcUlIZHBkR2dnZEdobElFeHBZMlZ1YzJVdUlDQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl4Y2JpQXFJSE52Wm5SM1lYSmxJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdVhHNGdLaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1Z4dUlDb2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM0Z0lGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsWEc0Z0tpQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a0lHeHBiV2wwWVhScGIyNXpYRzRnS2lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1Wlhod2IzSjBJQ29nWm5KdmJTQW5MaTltZFc1akoxeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpOWxkbVZ1ZENkY2JtVjRjRzl5ZENBcUlHWnliMjBnSnk0dlkyOXRjRzl1Wlc1MEoxeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpOXNZWHA1Ykc5aFpDZGNibVY0Y0c5eWRDQXFJR1p5YjIwZ0p5NHZjM1I1YkdVblhHNWxlSEJ2Y25RZ0tpQm1jbTl0SUNjdUwzUjVjR1VuWEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibWx0Y0c5eWRDQW5MaTR2YkdsaUwyVnVkbVFuWEc1Y2JtbHRjRzl5ZENCN0lHbHVhWFFnWVhNZ2FXNXBkRlpwWlhkd2IzSjBJSDBnWm5KdmJTQW5MaTkyYVdWM2NHOXlkQ2RjYm1sdGNHOXlkQ0I3SUdWNGRHVnVaQ0I5SUdaeWIyMGdKeTR1TDNWMGFXeHpKMXh1WEc0dktpcGNiaUFxSUdkbGRDQlhXRVZ1ZG1seWIyNXRaVzUwSUdsdVptOHVYRzRnS2lCQWNHRnlZVzBnSUh0dlltcGxZM1I5SUhacFpYZHdiM0owU1c1bWJ6b2dhVzVtYnlCaFltOTFkQ0IyYVdWM2NHOXlkQzVjYmlBcUlFQndZWEpoYlNBZ2UyOWlhbVZqZEgwZ1pXNTJTVzVtYnpvZ2FXNW1ieUJ3WVhKelpXUWdabkp2YlNCc2FXSXVaVzUyTGx4dUlDb3ZYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhVzVwZEVWdWRpQW9kbWxsZDNCdmNuUkpibVp2TENCbGJuWkpibVp2S1NCN1hHNGdJR052Ym5OMElHSnliM2R6WlhKT1lXMWxJRDBnWlc1MlNXNW1ieTVpY205M2MyVnlJRDhnWlc1MlNXNW1ieTVpY205M2MyVnlMbTVoYldVZ09pQnVZWFpwWjJGMGIzSXVZWEJ3VG1GdFpWeHVJQ0JqYjI1emRDQmljbTkzYzJWeVZtVnljMmx2YmlBOUlHVnVka2x1Wm04dVluSnZkM05sY2lBL0lHVnVka2x1Wm04dVluSnZkM05sY2k1MlpYSnphVzl1TG5aaGJDQTZJRzUxYkd4Y2JpQWdiR1YwSUc5elRtRnRaU0E5SUdWdWRrbHVabTh1YjNNdWJtRnRaVnh1SUNCcFppQW9iM05PWVcxbExtMWhkR05vS0M4b2FWQm9iMjVsZkdsUVlXUjhhVkJ2WkNrdmFTa3BJSHRjYmlBZ0lDQnZjMDVoYldVZ1BTQW5hVTlUSjF4dUlDQjlYRzRnSUdWc2MyVWdhV1lnS0c5elRtRnRaUzV0WVhSamFDZ3ZRVzVrY205cFpDOXBLU2tnZTF4dUlDQWdJRzl6VG1GdFpTQTlJQ2RoYm1SeWIybGtKMXh1SUNCOVhHNGdJR052Ym5OMElHOXpWbVZ5YzJsdmJpQTlJR1Z1ZGtsdVptOHViM011ZG1WeWMybHZiaTUyWVd4Y2JpQWdZMjl1YzNRZ1pXNTJJRDBnZTF4dUlDQWdJSEJzWVhSbWIzSnRPaUFuVjJWaUp5eGNiaUFnSUNCM1pXVjRWbVZ5YzJsdmJqb2dKM0J5YjJObGMzTXVaVzUyTGxkRlJWaGZWa1ZTVTBsUFRpY3NYRzRnSUNBZ2RYTmxja0ZuWlc1ME9pQnVZWFpwWjJGMGIzSXVkWE5sY2tGblpXNTBMRnh1SUNBZ0lHRndjRTVoYldVNklHSnliM2R6WlhKT1lXMWxMRnh1SUNBZ0lHRndjRlpsY25OcGIyNDZJR0p5YjNkelpYSldaWEp6YVc5dUxGeHVJQ0FnSUc5elRtRnRaU3hjYmlBZ0lDQnZjMVpsY25OcGIyNHNYRzRnSUNBZ1pHVjJhV05sVFc5a1pXdzZJR1Z1ZGtsdVptOHViM011Ym1GdFpTQjhmQ0J1ZFd4c1hHNGdJSDFjYmlBZ0x5b3FYRzRnSUNBcUlIWnBaWGR3YjNKMFNXNW1iem9nYzJOaGJHVXNJR1JsZG1salpWZHBaSFJvTENCa1pYWnBZMlZJWldsbmFIUXVJR1J3Y2x4dUlDQWdLaTljYmlBZ2NtVjBkWEp1SUdWNGRHVnVaQ2hsYm5Zc0lIWnBaWGR3YjNKMFNXNW1ieWxjYm4xY2JseHVMeThnWTI5dWMzUWdkbWxsZDNCdmNuUkpibVp2SUQwZ2FXNXBkRlpwWlhkd2IzSjBLQ2xjYmx4dUx5OGdOelV3SUdKNUlHUmxabUYxYkhRZ1kzVnljbVZ1ZEd4NVhHNHZMeUJqYjI1emRDQnpZMkZzWlNBOUlIWnBaWGR3YjNKMFNXNW1ieTV6WTJGc1pWeHVYRzR2THlCamIyNXpkQ0IxYm1sMGN5QTlJSHRjYmk4dklDQWdVa1ZOT2lBeE1pQXFJSE5qWVd4bExGeHVMeThnSUNCV1Z6b2dkbWxsZDNCdmNuUkpibVp2TG1SbGRtbGpaVmRwWkhSb0lDOGdNVEF3TEZ4dUx5OGdJQ0JXU0RvZ2RtbGxkM0J2Y25SSmJtWnZMbVJsZG1salpVaGxhV2RvZENBdklERXdNQ3hjYmk4dklDQWdWazFKVGpvZ1RXRjBhQzV0YVc0b2RtbGxkM0J2Y25SSmJtWnZMbVJsZG1salpWZHBaSFJvTENCMmFXVjNjRzl5ZEVsdVptOHVaR1YyYVdObFNHVnBaMmgwS1NBdklERXdNQ3hjYmk4dklDQWdWazFCV0RvZ1RXRjBhQzV0WVhnb2RtbGxkM0J2Y25SSmJtWnZMbVJsZG1salpWZHBaSFJvTENCMmFXVjNjRzl5ZEVsdVptOHVaR1YyYVdObFNHVnBaMmgwS1NBdklERXdNQ3hjYmk4dklDQWdRMDA2SURrMklDOGdNaTQxTkNBcUlITmpZV3hsTEZ4dUx5OGdJQ0JOVFRvZ09UWWdMeUF5TlM0MElDb2djMk5oYkdVc1hHNHZMeUFnSUZFNklEazJJQzhnTWpVdU5DQXZJRFFnS2lCelkyRnNaU3hjYmk4dklDQWdTVTQ2SURrMklDb2djMk5oYkdVc1hHNHZMeUFnSUZCVU9pQTVOaUF2SURjeUlDb2djMk5oYkdVc1hHNHZMeUFnSUZCRE9pQTVOaUF2SURZZ0tpQnpZMkZzWlN4Y2JpOHZJQ0FnVUZnNklITmpZV3hsWEc0dkx5QjlYRzVjYmk4dklFOWlhbVZqZEM1bWNtVmxlbVVvZFc1cGRITXBYRzR2THlCUFltcGxZM1F1Wm5KbFpYcGxLR1Z1ZGlsY2JseHVMeThnZDJsdVpHOTNMa05UVTE5VlRrbFVJRDBnZFc1cGRITmNibmRwYm1SdmR5NVhXRVZ1ZG1seWIyNXRaVzUwSUQwZ2FXNXBkRVZ1ZGlocGJtbDBWbWxsZDNCdmNuUW9LU3dnZDJsdVpHOTNMbXhwWWk1bGJuWXBYRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JpOHFJR2RzYjJKaGJDQldkV1VnS2k5Y2JseHVhVzF3YjNKMElDY3VMM2Q0TFdWdWRpZGNibWx0Y0c5eWRDQXFJR0Z6SUhWMGFXeHpJR1p5YjIwZ0p5NHVMM1YwYVd4ekoxeHVYRzVqYjI1emRDQjNaV1Y0VFc5a2RXeGxjeUE5SUh0OVhHNWpiMjV6ZENCZmNtOXZkSE1nUFNCYlhWeHVYRzVqYjI1emRDQjNaV1Y0SUQwZ2UxeHVJQ0JmWDNaMVpWOWZPaUJ1ZFd4c0xGeHVJQ0IxZEdsc2N5eGNiaUFnTHk4Z2RXNXBkSE02SUhkcGJtUnZkeTVEVTFOZlZVNUpWQ3hjYmlBZ1kyOXVabWxuT2lCN1hHNGdJQ0FnWlc1Mk9pQjNhVzVrYjNjdVYxaEZiblpwY205dWJXVnVkQ3hjYmlBZ0lDQmlkVzVrYkdWVmNtdzZJR3h2WTJGMGFXOXVMbWh5WldaY2JpQWdmU3hjYmx4dUlDQmZZMjl0Y0c5dVpXNTBjem9nZTMwc1hHNGdJRjl0YjJSMWJHVnpPaUIzWldWNFRXOWtkV3hsY3l4Y2JseHVJQ0JmYldWMFlUb2dlMXh1SUNBZ0lHMXZkVzUwWldRNklIdDlMRnh1SUNBZ0lIVndaR0YwWldRNklIdDlMRnh1SUNBZ0lHUmxjM1J5YjNsbFpEb2dlMzBzWEc0Z0lDQWdjbVZ4ZFdseVpXUk5iMlIxYkdWek9pQjdmU3hjYmlBZ0lDQmhjR2xEWVd4c1pXUTZJSHQ5TEZ4dUlDQWdJSEJsY21ZNklIdDlYRzRnSUgwc1hHNWNiaUFnWkc5amRXMWxiblE2SUh0Y2JpQWdJQ0JpYjJSNU9pQjdmVnh1SUNCOUxGeHVYRzRnSUhKbGNYVnBjbVZOYjJSMWJHVWdLRzF2WkhWc1pVNWhiV1VwSUh0Y2JpQWdJQ0JqYjI1emRDQnRaWFJoVFc5a0lEMGdkMlZsZUM1ZmJXVjBZUzV5WlhGMWFYSmxaRTF2WkhWc1pYTmNiaUFnSUNCcFppQW9JVzFsZEdGTmIyUmJiVzlrZFd4bFRtRnRaVjBwSUh0Y2JpQWdJQ0FnSUcxbGRHRk5iMlJiYlc5a2RXeGxUbUZ0WlYwZ1BTQXdYRzRnSUNBZ2ZWeHVJQ0FnSUcxbGRHRk5iMlJiYlc5a2RXeGxUbUZ0WlYwcksxeHVJQ0FnSUhKbGRIVnliaUIzWldWNFRXOWtkV3hsYzF0dGIyUjFiR1ZPWVcxbFhWeHVJQ0I5TEZ4dVhHNGdJSEpsWjJsemRHVnlUVzlrZFd4bElDZ3VMaTVoY21kektTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZuYVhOMFpYSkJjR2xOYjJSMWJHVW9MaTR1WVhKbmN5bGNiaUFnZlN4Y2JseHVJQ0J6ZFhCd2IzSjBJQ2htWldGMGRYSmxJRDBnSnljcElIdGNiaUFnSUNCamIyNXpkQ0J0WVhSamFDQTlJQ2htWldGMGRYSmxJQ3NnSnljcExtMWhkR05vS0M5QUtHTnZiWEJ2Ym1WdWRIeHRiMlIxYkdVcFhGd3ZLRnhjZHlzcEtDNWNYSGNyS1Q4dktWeHVJQ0FnSUdsbUlDaHRZWFJqYUNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnZEhsd1pTQTlJRzFoZEdOb1d6RmRYRzRnSUNBZ0lDQmpiMjV6ZENCdGIyUWdQU0J0WVhSamFGc3lYVnh1SUNBZ0lDQWdiR1YwSUcxbGRHaHZaQ0E5SUcxaGRHTm9Xek5kWEc0Z0lDQWdJQ0J0WlhSb2IyUWdQU0J0WlhSb2IyUWdKaVlnYldWMGFHOWtMbkpsY0d4aFkyVW9MMTVjWEM0dkxDQW5KeWxjYmlBZ0lDQWdJSE4zYVhSamFDQW9kSGx3WlNrZ2UxeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkamIyMXdiMjVsYm5Rbk9seHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBlWEJsYjJZZ2RHaHBjeTVmWTI5dGNHOXVaVzUwYzF0dGIyUmRJQ0U5UFNBbmRXNWtaV1pwYm1Wa0oxeHVJQ0FnSUNBZ0lDQmpZWE5sSUNkdGIyUjFiR1VuT2x4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUcxdlpIVnNaU0E5SUhkbFpYaE5iMlIxYkdWelcyMXZaRjFjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYlc5a2RXeGxJQ1ltSUcxbGRHaHZaQ0EvSUNFaGJXOWtkV3hsVzIxbGRHaHZaRjBnT2lBaElXMXZaSFZzWlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGdXM1oxWlMxeVpXNWtaWEpkSUdsdWRtRnNhV1FnWVhKbmRXMWxiblFnWm05eUlIZGxaWGd1YzNWd2NHOXlkRG9nSkh0bVpXRjBkWEpsZldBcFhHNGdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JGeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVZuYVhOMFpYSWdZU0J1WlhjZ2RuVmxJR2x1YzNSaGJtTmxJR2x1SUhSb2FYTWdkMlZsZUNCcGJuTjBZVzVqWlM0Z1VIVjBJR2wwY3lCeWIyOTBJR1ZzWlcxbGJuUWdhVzUwYnlCM1pXVjRMbVJ2WTNWdFpXNTBMbUp2WkhrdVkyaHBiR1J5Wlc0c0lITnZYRzRnSUNBcUlIUm9ZWFFnZFhObGNpQmpZVzRnZFhObElIZGxaWGd1Wkc5amRXMWxiblF1WW05a2VTQjBieUIzWVd4cklIUm9jbTkxWjJnZ1lXeHNJR1J2YlNCemRISjFZM1IxY21WeklHbHVJR0ZzYkNCMmRXVWdhVzV6ZEdGdVkyVnpJR2x1SUhSb1pTQndZV2RsTGx4dUlDQWdLaTljYmlBZ2NtVm5hWE4wWlhKV2RXVkpibk4wWVc1alpTQW9hVzV6ZEdGdVkyVXBJSHRjYmlBZ0lDQnBaaUFvSVdsdWMzUmhibU5sSUdsdWMzUmhibU5sYjJZZ1ZuVmxLU0I3WEc0Z0lDQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQVDA5SUNka1pYWmxiRzl3YldWdWRDY3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGdXM1oxWlMxeVpXNWtaWEpkSUhKbFoybHpkR1Z5Vm5WbFNXNXpkR0Z1WTJVNklHbHVkbUZzYVdRZ2FXNXpkR0Z1WTJVc0lHNXZkQ0JoSUhaMVpTQnBibk4wWVc1alpTNWdLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnZlZ4dUlDQWdJR052Ym5OMElISnZiM1FnUFNCcGJuTjBZVzVqWlM0a2NtOXZkRnh1SUNBZ0lHbG1JQ2doY205dmRDQjhmQ0FoY205dmRDNGtaV3dwSUh0Y2JpQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUE5UFQwZ0oyUmxkbVZzYjNCdFpXNTBKeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLR0JiZG5WbExYSmxibVJsY2wwZ2NtVm5hWE4wWlhKV2RXVkpibk4wWVc1alpUb2dhVzV6ZEdGdVkyVWdhR0Z6SUc1dklISnZiM1F1WUNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lIMWNiaUFnSUNCMGFHbHpMbVJ2WTNWdFpXNTBMbUp2WkhrdVkyaHBiR1J5Wlc0dWNIVnphQ2h5YjI5MExpUmxiQ2xjYmlBZ2ZTeGNibHh1SUNBdkx5QkFaR1Z3Y21WallYUmxaRnh1SUNCeVpYRjFhWEpsSUNndUxpNWhjbWR6S1NCN1hHNGdJQ0FnWTI5dWMyOXNaUzVzYjJjb1lGdFdkV1VnVW1WdVpHVnlYU0JjSW5kbFpYZ3VjbVZ4ZFdseVpWd2lJR2x6SUdSbGNISmxZMkYwWldRc0lIQnNaV0Z6WlNCMWMyVWdYQ0ozWldWNExuSmxjWFZwY21WTmIyUjFiR1ZjSWlCcGJuTjBaV0ZrTG1BcFhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNtVnhkV2x5WlUxdlpIVnNaU2d1TGk1aGNtZHpLVnh1SUNCOUxGeHVYRzRnSUM4dklFQmtaWEJ5WldOaGRHVmtYRzRnSUM4dklGUlBSRTg2SUhKbGJtRnRaU0IwYnlCeVpXZHBjM1JsY2sxdlpIVnNaVnh1SUNCeVpXZHBjM1JsY2tGd2FVMXZaSFZzWlNBb2JtRnRaU3dnYlc5a2RXeGxMQ0J0WlhSaEtTQjdYRzRnSUNBZ2FXWWdLQ0YzWldWNFRXOWtkV3hsYzF0dVlXMWxYU2tnZTF4dUlDQWdJQ0FnZDJWbGVFMXZaSFZzWlhOYmJtRnRaVjBnUFNCN2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb0lTRnRaWFJoSUNZbUlHMWxkR0V1Ylc5MWJuUlVlWEJsSUQwOVBTQW5ablZzYkNjcElIdGNiaUFnSUNBZ0lIZGxaWGhOYjJSMWJHVnpXMjVoYldWZElEMGdiVzlrZFd4bFhHNGdJQ0FnZlZ4dUlDQWdJR1p2Y2lBb1kyOXVjM1FnYTJWNUlHbHVJRzF2WkhWc1pTa2dlMXh1SUNBZ0lDQWdhV1lnS0cxdlpIVnNaUzVvWVhOUGQyNVFjbTl3WlhKMGVTaHJaWGtwS1NCN1hHNGdJQ0FnSUNBZ0lIZGxaWGhOYjJSMWJHVnpXMjVoYldWZFcydGxlVjBnUFNCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZMkZzYkdWa0lEMGdkMlZsZUM1ZmJXVjBZUzVoY0dsRFlXeHNaV1JjYmlBZ0lDQWdJQ0FnSUNCcFppQW9JV05oYkd4bFpGdHVZVzFsWFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHVmtXMjVoYldWZElEMGdlMzFjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ1kyRnNiR1ZrVFc5a0lEMGdZMkZzYkdWa1cyNWhiV1ZkWEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZqWVd4c1pXUk5iMlJiYTJWNVhTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnNiR1ZrVFc5a1cydGxlVjBnUFNBd1hHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdOaGJHeGxaRTF2WkZ0clpYbGRLeXRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYlc5a2RXeGxXMnRsZVYwdVlYQndiSGtvZDJWbGVDd2dZWEpuZFcxbGJuUnpLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOUxGeHVYRzRnSUhKbFoybHpkR1Z5UTI5dGNHOXVaVzUwSUNodVlXMWxMQ0JqYjIxd2IyNWxiblFwSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11WDE5MmRXVmZYeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXViRzluS0NkYlZuVmxJRkpsYm1SbGNsMGdWblZsSUdseklHNXZkQ0JtYjNWdVpDNGdVR3hsWVhObElHbHRjRzl5ZENCV2RXVXVhbk1nWW1WbWIzSmxJSEpsWjJsemRHVnlJR0VnWTI5dGNHOXVaVzUwTGljcFhHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVgyTnZiWEJ2Ym1WdWRITmJibUZ0WlYwZ1BTQXdYRzRnSUNBZ2FXWWdLR052YlhCdmJtVnVkQzVmWTNOektTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCamMzTWdQU0JqYjIxd2IyNWxiblF1WDJOemN5NXlaWEJzWVdObEtDOWNYR0piS3kxZFAxdGNYR1F1WFN0eVpXMDdQMXhjWWk5bkxDQm1kVzVqZEdsdmJpQW9iU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0dGeWMyVkdiRzloZENodEtTQXFJRGMxSUNvZ2QyVmxlQzVqYjI1bWFXY3VaVzUyTG5OallXeGxJQ3NnSjNCNEoxeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lIVjBhV3h6TG1Gd2NHVnVaRU56Y3loamMzTXNJR0IzWldWNExXTnRjQzBrZTI1aGJXVjlZQ2xjYmlBZ0lDQWdJR1JsYkdWMFpTQmpiMjF3YjI1bGJuUXVYMk56YzF4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TGw5ZmRuVmxYMTh1WTI5dGNHOXVaVzUwS0c1aGJXVXNJR052YlhCdmJtVnVkQ2xjYmlBZ2ZTeGNibHh1SUNBdkx5QkFaR1Z3Y21WallYUmxaRnh1SUNCblpYUlNiMjkwSUNncElIdDlMRnh1WEc0Z0lDOHZJRUJrWlhCeVpXTmhkR1ZrWEc0Z0lITmxibVJsY2pvZ2UxeHVJQ0FnSUhCbGNtWnZjbTFEWVd4c1ltRmpheUFvWTJGc2JHSmhZMnNzSUdSaGRHRXNJR3RsWlhCQmJHbDJaU2tnZTF4dUlDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCallXeHNZbUZqYXlBOVBUMGdKMloxYm1OMGFXOXVKeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJGc2JHSmhZMnNvWkdGMFlTbGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCdWRXeHNYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dVhHNGdJQzh2SUVCa1pYQnlaV05oZEdWa1hHNGdJR2x1YzNSaGJHd2dLRzF2WkhWc1pTa2dlMXh1SUNBZ0lHMXZaSFZzWlM1cGJtbDBLSFJvYVhNcFhHNGdJSDFjYm4xY2JseHVUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hkbFpYZ3VaRzlqZFcxbGJuUXVZbTlrZVN3Z0oyTm9hV3hrY21WdUp5d2dlMXh1SUNCblpYUWdLQ2tnZXlCeVpYUjFjbTRnWDNKdmIzUnpJSDFjYm4wcFhHNWNianNnV3lkdmJpY3NJQ2R2Ym1ObEp5d2dKMjltWmljc0lDZGxiV2wwSjEwdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2JXVjBhRzlrS1NCN1hHNGdJSGRsWlhoYmJXVjBhRzlrWFNBOUlHWjFibU4wYVc5dUlDZ3VMaTVoY21kektTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxsOTJkV1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVYM1oxWlNBOUlHNWxkeUIwYUdsekxsOWZkblZsWDE4b0tWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmRuVmxXMkFrSkh0dFpYUm9iMlI5WUYwb0xpNHVZWEpuY3lsY2JpQWdmVnh1ZlNsY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2QyVmxlRnh1SWl3aUlDOHFYRzRnS2lCTWFXTmxibk5sWkNCMGJ5QjBhR1VnUVhCaFkyaGxJRk52Wm5SM1lYSmxJRVp2ZFc1a1lYUnBiMjRnS0VGVFJpa2dkVzVrWlhJZ2IyNWxYRzRnS2lCdmNpQnRiM0psSUdOdmJuUnlhV0oxZEc5eUlHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MGN5NGdJRk5sWlNCMGFHVWdUazlVU1VORklHWnBiR1ZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSGRwZEdnZ2RHaHBjeUIzYjNKcklHWnZjaUJoWkdScGRHbHZibUZzSUdsdVptOXliV0YwYVc5dVhHNGdLaUJ5WldkaGNtUnBibWNnWTI5d2VYSnBaMmgwSUc5M2JtVnljMmhwY0M0Z0lGUm9aU0JCVTBZZ2JHbGpaVzV6WlhNZ2RHaHBjeUJtYVd4bFhHNGdLaUIwYnlCNWIzVWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobFhHNGdLaUJjSWt4cFkyVnVjMlZjSWlrN0lIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVmNiaUFxSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1SUNCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaUFxWEc0Z0tpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXhjYmlBcUlITnZablIzWVhKbElHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1WEc0Z0tpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XVnh1SUNvZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzRnSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxYRzRnS2lCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrSUd4cGJXbDBZWFJwYjI1elhHNGdLaUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVYRzR2THlCQVpteHZkMXh1THlvcVhHNGdLaUJBWm1sc1pVOTJaWEoyYVdWM09pQndaWEptSUdSaGRHRWdjbVZqYjNKa1pYSXVYRzRnS2k5Y2JseHVaWGh3YjNKMElHTnZibk4wSUhCbGNtWTZJSHRjYmlBZ2RHbHRaVG9nZTMxY2JuMGdQU0IzYVc1a2IzY3VYM2RsWlhoZmNHVnlaaUE5SUh0Y2JpQWdkR2x0WlRvZ2UzMWNibjFjYmx4dVkyOXVjM1FnZEcxd0lEMGdlMzFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBUbTkzSUNncE9pQnVkVzFpWlhJZ2UxeHVJQ0JqYjI1emRDQndaWEptYjNKdFlXNWpaU0E5SUhkcGJtUnZkeTV3WlhKbWIzSnRZVzVqWlZ4dUlDQnlaWFIxY200Z2NHVnlabTl5YldGdVkyVWdKaVlnY0dWeVptOXliV0Z1WTJVdWJtOTNJRDhnY0dWeVptOXliV0Z1WTJVdWJtOTNLQ2tnT2lCdVpYY2dSR0YwWlNncExtZGxkRlJwYldVb0tWeHVmVnh1WEc1bGVIQnZjblFnWm5WdVkzUnBiMjRnZEdGblFtVm5hVzRnS0c1aGJXVTZJSE4wY21sdVp5azZJSFp2YVdRZ2UxeHVJQ0IwYlhCYmJtRnRaVjBnUFNCblpYUk9iM2NvS1Z4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdkR0ZuUlc1a0lDaHVZVzFsT2lCemRISnBibWNwT2lCMmIybGtJSHRjYmlBZ2JHVjBJSEJ5WlNBOUlIQmxjbVl1ZEdsdFpWdHVZVzFsWFZ4dUlDQnBaaUFvSVhCeVpTa2dlMXh1SUNBZ0lIQnlaU0E5SURCY2JpQWdmVnh1SUNCd1pYSm1MblJwYldWYmJtRnRaVjBnUFNCd2NtVWdLeUJuWlhST2IzY29LU0F0SUhSdGNGdHVZVzFsWFZ4dWZWeHVJaXdpTHlwY2JpQXFJRXhwWTJWdWMyVmtJSFJ2SUhSb1pTQkJjR0ZqYUdVZ1UyOW1kSGRoY21VZ1JtOTFibVJoZEdsdmJpQW9RVk5HS1NCMWJtUmxjaUJ2Ym1WY2JpQXFJRzl5SUcxdmNtVWdZMjl1ZEhKcFluVjBiM0lnYkdsalpXNXpaU0JoWjNKbFpXMWxiblJ6TGlBZ1UyVmxJSFJvWlNCT1QxUkpRMFVnWm1sc1pWeHVJQ29nWkdsemRISnBZblYwWldRZ2QybDBhQ0IwYUdseklIZHZjbXNnWm05eUlHRmtaR2wwYVc5dVlXd2dhVzVtYjNKdFlYUnBiMjVjYmlBcUlISmxaMkZ5WkdsdVp5QmpiM0I1Y21sbmFIUWdiM2R1WlhKemFHbHdMaUFnVkdobElFRlRSaUJzYVdObGJuTmxjeUIwYUdseklHWnBiR1ZjYmlBcUlIUnZJSGx2ZFNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1ZjYmlBcUlGd2lUR2xqWlc1elpWd2lLVHNnZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlZ4dUlDb2dkMmwwYUNCMGFHVWdUR2xqWlc1elpTNGdJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxGeHVJQ29nYzI5bWRIZGhjbVVnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNWNiaUFxSUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WlhHNGdLaUJMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xpQWdVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdWY2JpQXFJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUWdiR2x0YVhSaGRHbHZibk5jYmlBcUlIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1cGJYQnZjblFnZTF4dUlDQmpZVzFsYkdsNlpVdGxlWE1zWEc0Z0lDOHZJR2g1Y0dobGJtRjBaVXRsZVhNc1hHNGdJR1Y0ZEdWdVpDeGNiaUFnWlhoMFpXNWtWSEoxZEdoNUxGeHVJQ0IwY21sdFEyOXRiV1Z1ZEN4Y2JpQWdibTl5YldGc2FYcGxVM1I1YkdVc1hHNGdJR0YxZEc5UWNtVm1hWGdzWEc0Z0lHbHpRWEp5WVhrc1hHNGdJR2RsZEZCaGNtVnVkRk5qY205c2JHVnlMRnh1SUNCemRYQndiM0owVTNScFkydDVMRnh1SUNCaGNIQmxibVJEYzNOY2JuMGdabkp2YlNBbkxpNHZkWFJwYkhNblhHNXBiWEJ2Y25RZ2V5QjBZV2RDWldkcGJpd2dkR0ZuUlc1a0lIMGdabkp2YlNBbkxpNHZkWFJwYkhNdmNHVnlaaWRjYmk4cUlHbHpkR0Z1WW5Wc0lHbG5ibTl5WlNCdVpYaDBJQ292WEc1Y2JteGxkQ0J3YzJWMVpHOUpaQ0E5SURCY2JpOHFLbHh1SUNvZ1oyVjBJSE5qYjNCbFpDQmpiR0Z6Y3lCemRIbHNaU0J0WVhBZ1puSnZiU0J6ZEhsc1pYTm9aV1YwY3lCcGJpQThhR1ZoWkQ0dVhHNGdLaTljYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJuWlhSSVpXRmtVM1I1YkdWTllYQWdLQ2tnZTF4dUlDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1BUMDlJQ2RrWlhabGJHOXdiV1Z1ZENjcElIdGNiaUFnSUNCMFlXZENaV2RwYmlnbloyVjBTR1ZoWkZOMGVXeGxUV0Z3SnlsY2JpQWdmVnh1SUNCamIyNXpkQ0J1WldWa1ZHOVNaVzF2ZG1WVGRIbHNaVk5vWldWMFRtOWtaWE1nUFNCYlhWeHVJQ0JqYjI1emRDQnpkSGxzWlZOb1pXVjBjMEZ5Y2lBOUlFRnljbUY1TG1aeWIyMG9aRzlqZFcxbGJuUXVjM1I1YkdWVGFHVmxkSE1nZkh3Z1cxMHBMbVpwYkhSbGNpaG1kVzVqZEdsdmJpQW9jM1I1YkdWVGFHVmxkQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQnpkSGxzWlZOb1pXVjBMbTkzYm1WeVRtOWtaUzVuWlhSQmRIUnlhV0oxZEdVb0ozZGxaWGd0YzJOaGJtNWxaQ2NwSUNFOVBTQW5NU2RjYmlBZ2ZTbGNibHh1SUNCamIyNXpkQ0J5WlhNZ1BTQkJjbkpoZVM1bWNtOXRLSE4wZVd4bFUyaGxaWFJ6UVhKeUtWeHVJQ0FnSUM1eVpXUjFZMlVvS0hCeVpTd2djM1I1YkdWVGFHVmxkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2MzUjViR1ZUYUdWbGRDNXZkMjVsY2s1dlpHVXVjMlYwUVhSMGNtbGlkWFJsS0NkM1pXVjRMWE5qWVc1dVpXUW5MQ0F4S1Z4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQjNhSGtnYm05MElIVnphVzVuSUhOMGVXeGxVMmhsWlhRdWNuVnNaWE1nZkh3Z2MzUjViR1ZUYUdWbGRDNWpjM05TZFd4bGN5QjBieUJuWlhRZ1kzTnpJSEoxYkdWeklEOWNiaUFnSUNBZ0lDQXFJR0psWTJGMWMyVWdkMlZsZUNkeklHTnZiWEJ2Ym1WdWRITWdaR1ZtYVc1bFpDQnViMjR0YzNSaGJtUmhjbVFnYzNSNWJHVWdZWFIwY21saWRYUmxjeXdnZDJocFkyZ2dhWE5jYmlBZ0lDQWdJQ0FxSUdGMWRHOGdhV2R1YjNKbFpDQjNhR1Z1SUdGalkyVnpjeUJ5ZFd4bExtTnpjMVJsZUhRdVhHNGdJQ0FnSUNBZ0tpQmhibTkwYUdWeUlISmxZWE52YmlCdWIzUWdkRzhnZFhObElHTnpjMUoxYkdWeklHUnBjbVZqZEhrNlhHNGdJQ0FnSUNBZ0tpQkFhWE56ZFdVNklHaDBkSEJ6T2k4dmMzUmhZMnR2ZG1WeVpteHZkeTVqYjIwdmNYVmxjM1JwYjI1ekx6SXhOalF5TWpjM0wzTmxZM1Z5YVhSNUxXVnljbTl5TFhSb1pTMXZjR1Z5WVhScGIyNHRhWE10YVc1elpXTjFjbVV0YVc0dFptbHlaV1p2ZUMxa2IyTjFiV1Z1ZEMxemRIbHNaWE5vWldWMGMxeHVJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQnBaaUFvWEc0Z0lDQWdJQ0FnSUM4dklHTnpjeUJwYmlCaElHeHBibXN1SUdwMWMzUWdhV2R1YjNKbElIUm9hWE11SUhCeWIySmhZbXg1SUdFZ2JHbHVheUJ6ZEhsc1pYTm9aV1YwTGx4dUlDQWdJQ0FnSUNBb2MzUjViR1ZUYUdWbGRDNXZkMjVsY2s1dlpHVXVkR0ZuVG1GdFpTNTBiMHh2ZDJWeVEyRnpaU2dwSUQwOVBTQW5iR2x1YXljcFhHNGdJQ0FnSUNBZ0lIeDhJQ0Z6ZEhsc1pWTm9aV1YwTG05M2JtVnlUbTlrWlM1MFpYaDBRMjl1ZEdWdWRGeHVJQ0FnSUNBZ0lDQXZMeUJ3YzJWMVpHOGdZMnhoYzNNZ2MzUjViR1ZUYUdWbGRDQnViMlJsSUdseklHZGxibVZ5WVhSbFpDQmllU0IzWldWNExpQnFkWE4wSUdsbmJtOXlaU0JwZEM1Y2JpQWdJQ0FnSUNBZ2ZId2djM1I1YkdWVGFHVmxkQzV2ZDI1bGNrNXZaR1V1YVdRdWJXRjBZMmdvTDNkbFpYZ3RjSE5sZFdSdkxWeGNaQ3N2S1NrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NISmxYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FxSUhOMFlYSjBJSFJ2SUdGdVlXeDVlbVVnYVhRbmN5QmpiMjUwWlc1MExseHVJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQmpiMjV6ZENCemRISkJjbklnUFNCMGNtbHRRMjl0YldWdWRDaHpkSGxzWlZOb1pXVjBMbTkzYm1WeVRtOWtaUzUwWlhoMFEyOXVkR1Z1ZEM1MGNtbHRLQ2twTG5Od2JHbDBLQzk5THlsY2JpQWdJQ0FnSUdOdmJuTjBJR3hsYmlBOUlITjBja0Z5Y2k1c1pXNW5kR2hjYmlBZ0lDQWdJR052Ym5OMElISjFiR1Z6SUQwZ1cxMWNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1J5SUQwZ2MzUnlRWEp5VzJsZFhHNGdJQ0FnSUNBZ0lHbG1JQ2doYzNSeUlIeDhJSE4wY2k1dFlYUmphQ2d2WGx4Y2N5b2tMeWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNBZ0tpQnphRzkxYkdRZ2JXRjBZMmdnZEdobGMyVWdZMkZ6WlhNNlhHNGdJQ0FnSUNBZ0lDQXFJQzVoVzJSaGRHRXRkaTE0ZUhoZElIc2dZMjlzYjNJNklISmxaRHNnZlZ4dUlDQWdJQ0FnSUNBZ0tpQXVZVnRrWVhSaExYWXRlSGg0WFRwaFkzUnBkbVVnZXlCamIyeHZjam9nWjNKbFpXNDdJSDFjYmlBZ0lDQWdJQ0FnSUNvZ0xtRmJaR0YwWVMxMkxYaDRlRjBzSUM1aVcyUmhkR0V0ZGkxNGVIaGRJSHNnWTI5c2IzSTZJSEpsWkRzZ2ZWeHVJQ0FnSUNBZ0lDQWdLbHh1SUNBZ0lDQWdJQ0FnS2lCemFHOTFiR1FnYm05MElHMWhkR05vSUhSb1pYTmxJR05oYzJWek9seHVJQ0FnSUNBZ0lDQWdLaUF1WVNCN0lHTnZiRzl5T2lCeVpXUTdJSDFjYmlBZ0lDQWdJQ0FnSUNvZ1pYUmpMbHh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYldGMFkyZ2dQU0J6ZEhJdWJXRjBZMmdvTHlnb1B6b3NQMXhjY3lwY1hDNWJYRngzTFYwclhGeGJaR0YwWVMxMkxWeGNkeXRjWEYwb1B6bzZYRngzS3lrL0tTc3BYRnh6S2loN1cxNTlYU3NwTHlsY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z0WVhSamFDa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4dklHNXZkQ0IwYUdVZ2RuVmxJSE4wWVhScFl5QmpiR0Z6Y3lCemRIbHNaWE1nYldGd0xpQnpieUJoWTNGMWFYSmxJRzV2SUhKMWJHVnpJR1p2Y2lCMGFHbHpJSE4wZVd4bFUyaGxaWFF1WEc0Z0lDQWdJQ0FnSUNBZ0x5OGdhblZ6ZENCcWRXMXdJSFJvY205MVoyZ2dkR2hwY3lCemRIbHNaVk5vWldWMElHRnVaQ0JuYnlCMGJ5QmhibUZzZVhwcGJtY2dibVY0ZEM1Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2NISmxYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMnh6VG0xeklEMGdiV0YwWTJoYk1WMHVjM0JzYVhRb0p5d25LUzV0WVhBb2JpQTlQaUJ1TG5SeWFXMG9LU2xjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZM056VkdWNGRDQTlJRzFoZEdOb1d6SmRMbkpsY0d4aFkyVW9MMXQ3ZlYwdlp5d2dKeWNwTG5SeWFXMG9LVnh1SUNBZ0lDQWdJQ0JzWlhRZ1kyeHpUbTF6U1dSNElEMGdNRnh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiSE5PYlhOTVpXNGdQU0JqYkhOT2JYTXViR1Z1WjNSb1hHNGdJQ0FnSUNBZ0lIZG9hV3hsSUNoamJITk9iWE5KWkhnZ1BDQmpiSE5PYlhOTVpXNHBJSHRjYmlBZ0lDQWdJQ0FnSUNCeWRXeGxjeTV3ZFhOb0tIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhObGJHVmpkRzl5VkdWNGREb2dZMnh6VG0xelcyTnNjMDV0YzBsa2VGMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCamMzTlVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdJQ0JqYkhOT2JYTkpaSGdySzF4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCQmNuSmhlUzVtY205dEtISjFiR1Z6S1M1bWIzSkZZV05vS0hKMWJHVWdQVDRnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6Wld4bFkzUnZjaUE5SUhKMWJHVXVjMlZzWldOMGIzSlVaWGgwSUh4OElDY25YRzRnSUNBZ0lDQWdJR3hsZENCcGMxQnpaWFZrYnlBOUlHWmhiSE5sWEc0Z0lDQWdJQ0FnSUdsbUlDaHpaV3hsWTNSdmNpNXRZWFJqYUNndk9pZy9PbUZqZEdsMlpYeG1iMk4xYzN4bGJtRmliR1ZrZkdScGMyRmliR1ZrS1M4cEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYVhOUWMyVjFaRzhnUFNCMGNuVmxYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdjM1I1YkdWUFltb2dQU0IwY21sdFEyOXRiV1Z1ZENoeWRXeGxMbU56YzFSbGVIUXBMbk53YkdsMEtDYzdKeWxjYmlBZ0lDQWdJQ0FnSUNBdWNtVmtkV05sS0NoemRIbHNaVTlpYWl3Z2MzUmhkR1Z0Wlc1MEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpkR0YwWlcxbGJuUWdQU0J6ZEdGMFpXMWxiblF1ZEhKcGJTZ3BYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9jM1JoZEdWdFpXNTBJQ1ltSUhOMFlYUmxiV1Z1ZEM1cGJtUmxlRTltS0NjdktpY3BJRHc5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhKbGMwRnljaUE5SUhOMFlYUmxiV1Z1ZEM1emNHeHBkQ2duT2ljcExtMWhjQ2dvY0dGeWRDa2dQVDRnY0dGeWRDNTBjbWx0S0NrcFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMGVXeGxUMkpxVzNKbGMwRnljbHN3WFYwZ1BTQnlaWE5CY25KYk1WMWNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnpkSGxzWlU5aWFseHVJQ0FnSUNBZ0lDQWdJSDBzSUh0OUtWeHVJQ0FnSUNBZ0lDQnBaaUFvYVhOUWMyVjFaRzhwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMGVIUWdQU0JQWW1wbFkzUXVhMlY1Y3loemRIbHNaVTlpYWlrdWNtVmtkV05sS0daMWJtTjBhVzl1SUNod2NtVXNJR04xY2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJSEJ5WlNBcklHQWtlMk4xY24wNkpIdHpkSGxzWlU5aWFsdGpkWEpkZlNGcGJYQnZjblJoYm5RN1lGeHVJQ0FnSUNBZ0lDQWdJSDBzSUNjbktWeHVJQ0FnSUNBZ0lDQWdJR0Z3Y0dWdVpFTnpjeWhnSkh0elpXeGxZM1J2Y24xN0pIdDBlSFI5ZldBc0lHQjNaV1Y0TFhCelpYVmtieTBrZTNCelpYVmtiMGxrS3l0OVlDbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZZbXBOWVhBZ1BTQWhhWE5RYzJWMVpHOGdQeUJ3Y21VZ09pQndjbVV1Y0hObGRXUnZYRzRnSUNBZ0lDQWdJR052Ym5OMElISmxjeUE5SUc5aWFrMWhjRnR6Wld4bFkzUnZjbDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRnlaWE1wSUh0Y2JpQWdJQ0FnSUNBZ0lDQnZZbXBOWVhCYmMyVnNaV04wYjNKZElEMGdjM1I1YkdWUFltcGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0JsZUhSbGJtUW9iMkpxVFdGd1czTmxiR1ZqZEc5eVhTd2djM1I1YkdWUFltb3BYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBcUlISmxiVzkyWlNCMGFHbHpJSE4wZVd4bFUyaGxaWFFnYm05a1pTQnphVzVqWlNCcGRDZHpJR2x1SUhSb1pTQnpkSGxzWlUxaGNDQmhiSEpsWVdSNUxpQkJibVFnZEdocGN5QnpkSGxzWlZ4dUlDQWdJQ0FnSUNvZ2MyaHZkV3hrSUc5dWJIa2dZbVVnWm1WMFkyaGxaQ0JoYm1RZ2RYTmxaQ0JtY205dElITjBlV3hsVFdGd0lIUnZJR2RsYm1WeVlYUmxJSFJvWlNCbWFXNWhiQ0JqYjIxaWFXNWxaRnh1SUNBZ0lDQWdJQ29nWTI5dGNHOXVaVzUwSUhOMGVXeGxMQ0J1YjNRZ1puSnZiU0IwYUdVZ2MzUjViR1Z6YUdWbGRDQnBkSE5sYkdZdVhHNGdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lHNWxaV1JVYjFKbGJXOTJaVk4wZVd4bFUyaGxaWFJPYjJSbGN5NXdkWE5vS0hOMGVXeGxVMmhsWlhRdWIzZHVaWEpPYjJSbEtWeHVJQ0FnSUNBZ2NtVjBkWEp1SUhCeVpWeHVJQ0FnSUgwc0lIc2djSE5sZFdSdk9pQjdmWDBwWEc0Z0lHbG1JQ2doZDJsdVpHOTNMbDl1YjE5eVpXMXZkbVZmYzNSNWJHVmZjMmhsWlhSektTQjdYRzRnSUNBZ2JtVmxaRlJ2VW1WdGIzWmxVM1I1YkdWVGFHVmxkRTV2WkdWekxtWnZja1ZoWTJnb1puVnVZM1JwYjI0Z0tHNXZaR1VwSUh0Y2JpQWdJQ0FnSUc1dlpHVXVjR0Z5Wlc1MFRtOWtaUzV5WlcxdmRtVkRhR2xzWkNodWIyUmxLVnh1SUNBZ0lIMHBYRzRnSUgxY2JpQWdaV3h6WlNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUFQwOUlDZGtaWFpsYkc5d2JXVnVkQ2NwSUh0Y2JpQWdJQ0JqYjI1emIyeGxMbmRoY200b1lGdDJkV1V0Y21WdVpHVnlYU0I1YjNVbmRtVWdaR1ZtYVc1bFpDQW5YMjV2WDNKbGJXOTJaVjl6ZEhsc1pWOXphR1ZsZEhNbklHRnVaQ0IwYUdVZ2RpMWtZWFJoTFhoNElITjBlV3hsYzJobFpYUnpJSGRwYkd3Z2JtOTBJR0psSUhKbGJXOTJaV1F1WUNsY2JpQWdmVnh1SUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUFQwOUlDZGtaWFpsYkc5d2JXVnVkQ2NwSUh0Y2JpQWdJQ0IwWVdkRmJtUW9KMmRsZEVobFlXUlRkSGxzWlUxaGNDY3BYRzRnSUgxY2JpQWdjbVYwZFhKdUlISmxjMXh1ZlZ4dVhHNHZMeUJsZUhCdmNuUWdablZ1WTNScGIyNGdaMlYwVTJOdmNHVkpaSE1nS0dOdmJuUmxlSFFwSUh0Y2JpOHZJQ0FnWTI5dWMzUWdZWEp5SUQwZ1cxMWNiaTh2SUNBZ2JHVjBJR04wZUNBOUlHTnZiblJsZUhSY2JpOHZJQ0FnYkdWMElITmpiM0JsU1dSY2JpOHZJQ0FnZDJocGJHVWdLR04wZUNrZ2UxeHVMeThnSUNBZ0lITmpiM0JsU1dRZ1BTQmpkSGd1Skc5d2RHbHZibk11WDNOamIzQmxTV1JjYmk4dklDQWdJQ0J6WTI5d1pVbGtJQ1ltSUdGeWNpNXdkWE5vS0hOamIzQmxTV1FwWEc0dkx5QWdJQ0FnWTNSNElEMGdZM1I0TGlSdmNIUnBiMjV6TG5CaGNtVnVkRnh1THk4Z0lDQjlYRzR2THlBZ0lISmxkSFZ5YmlCaGNuSmNiaTh2SUgxY2JseHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRk5qYjNCbFNXUWdLSFp1YjJSbEtTQjdYRzRnSUhKbGRIVnliaUIyYm05a1pTNWpiMjUwWlhoMExpUnZjSFJwYjI1ekxsOXpZMjl3WlVsa1hHNTlYRzVjYmk4cUtseHVJQ29nWjJWMElITjBlV3hsSUdsdUlEeHpkSGxzWlNCelkyOXdaV1ErSUhSaFozTWdabTl5SUhSb2FYTWdZMjl0Y0c5dVpXNTBMbHh1SUNvdlhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z1oyVjBVMk52Y0dWVGRIbHNaU0FvZG01dlpHVXNJR05zWVhOelRtRnRaWE1wSUh0Y2JpQWdZMjl1YzNRZ2MyTnZjR1ZKWkNBOUlHZGxkRk5qYjNCbFNXUW9kbTV2WkdVcFhHNGdJR052Ym5OMElITjBlV3hsSUQwZ2UzMWNiaUFnWTI5dWMzUWdjM1I1YkdWTllYQWdQU0IzWldWNExsOXpkSGxzWlUxaGNDQjhmQ0I3ZlZ4dUlDQnNaWFFnWTJ4elRtMXpTV1I0SUQwZ01GeHVJQ0JqYjI1emRDQmpiSE5PYlhOTVpXNGdQU0JqYkdGemMwNWhiV1Z6TG14bGJtZDBhRnh1SUNCM2FHbHNaU0FvWTJ4elRtMXpTV1I0SUR3Z1kyeHpUbTF6VEdWdUtTQjdYRzRnSUNBZ1kyOXVjM1FnWTJ4eklEMGdZQzRrZTJOc1lYTnpUbUZ0WlhOYlkyeHpUbTF6U1dSNFhYMWJKSHR6WTI5d1pVbGtmVjFnWEc0Z0lDQWdZMjl1YzNRZ2JXRndJRDBnYzNSNWJHVk5ZWEJiWTJ4elhWeHVJQ0FnSUcxaGNDQW1KaUJsZUhSbGJtUlVjblYwYUhrb2MzUjViR1VzSUcxaGNDbGNiaUFnSUNCamJITk9iWE5KWkhncksxeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCallXMWxiR2w2WlV0bGVYTW9jM1I1YkdVcFhHNTlYRzVjYm1aMWJtTjBhVzl1SUdkbGRGTjBlV3hsSUNoMmJtOWtaU3dnWlhoMGNtRmpkQ2tnZTF4dUlDQmpiMjV6ZENCa1lYUmhJRDBnZG01dlpHVXVaR0YwWVNCOGZDQjdmVnh1SUNCamIyNXpkQ0J6ZEdGMGFXTkRiR0Z6YzA1aGJXVnpJRDBnS0hSNWNHVnZaaUJrWVhSaExuTjBZWFJwWTBOc1lYTnpJRDA5UFNBbmMzUnlhVzVuSnlrZ1B5QmtZWFJoTG5OMFlYUnBZME5zWVhOekxuTndiR2wwS0NjZ0p5a2dPaUFvWkdGMFlTNXpkR0YwYVdORGJHRnpjeUI4ZkNCYlhTbGNiaUFnWTI5dWMzUWdZMnhoYzNOT1lXMWxjeUE5SUNoMGVYQmxiMllnWkdGMFlTNWpiR0Z6Y3lBOVBUMGdKM04wY21sdVp5Y3BJRDhnWkdGMFlTNWpiR0Z6Y3k1emNHeHBkQ2duSUNjcElEb2dLR1JoZEdFdVkyeGhjM01nZkh3Z1cxMHBYRzRnSUdOdmJuTjBJR05zYzA1dGN5QTlJSE4wWVhScFkwTnNZWE56VG1GdFpYTXVZMjl1WTJGMEtHTnNZWE56VG1GdFpYTXBYRzRnSUdOdmJuTjBJSE4wZVd4bElEMGdibTl5YldGc2FYcGxVM1I1YkdVb1oyVjBVMk52Y0dWVGRIbHNaU2gyYm05a1pTd2dZMnh6VG0xektTbGNiaUFnTHlvcVhHNGdJQ0FxSUdOaFkyaGxJSE4wWVhScFl5QnpkSGxzWlNCaGJtUWdZbWx1WkNCemRIbHNaUzVjYmlBZ0lDb2dZMkZqYUdWa0lITjBZWFJwWTFOMGVXeGxJQ2hwYm1Oc2RXUnBibWNnYzNSNWJHVWdZVzVrSUhOMFlYUnBZMU4wZVd4bEtTQm9ZWE1nWVd4eVpXRmtlU0JpWldWdUlHNXZjbTFoYkdsNlpXUmNiaUFnSUNvZ2FXNGdKSEJ5YjJObGMzTlRkSGxzWlM0Z1UyOGdkR2hsY21VbmN5QnVieUJ1WldWa0lIUnZJRzV2Y20xaGJHbDZaU0JwZENCaFoyRnBiaTVjYmlBZ0lDb3ZYRzRnSUdsbUlDZ2haR0YwWVM1allXTm9aV1FwSUh0Y2JpQWdJQ0F2THlCallXTm9aU0J6ZEdGMGFXTlRkSGxzWlNCdmJtTmxJR2x1SUhSb1pTQmlaV2RwYm01cGJtY3VYRzRnSUNBZ1pHRjBZUzVqWVdOb1pXUWdQU0JsZUhSbGJtUlVjblYwYUhrb2UzMHNJR1JoZEdFdWMzUmhkR2xqVTNSNWJHVXBYRzRnSUgxY2JpQWdMeThnWTJGamFHVWdZbWx1WkdsdVp5QnpkSGxzWlNCbGRtVnllU0IwYVcxbElITnBibU5sSUhSb1pTQmlhVzVrYVc1bklITjBlV3hsSUdseklIWmhjbWxoWW14bExseHVJQ0JsZUhSbGJtUlVjblYwYUhrb1pHRjBZUzVqWVdOb1pXUXNJR1JoZEdFdWMzUjViR1VwWEc0Z0lHVjRkR1Z1WkNoemRIbHNaU3dnWkdGMFlTNWpZV05vWldRcFhHNGdJR1JoZEdFdWMzUmhkR2xqVTNSNWJHVWdQU0J6ZEhsc1pWeHVJQ0JwWmlBb1pYaDBjbUZqZENrZ2UxeHVJQ0FnSUdSbGJHVjBaU0JrWVhSaExuTjBZWFJwWTFOMGVXeGxYRzRnSUNBZ1pHVnNaWFJsSUdSaGRHRXVjM1I1YkdWY2JpQWdmVnh1SUNCeVpYUjFjbTRnYzNSNWJHVmNibjFjYmx4dUx5b3FYRzRnS2lCblpYUWdjM1I1YkdVZ2JXVnlaMlZrSUhkcGRHZ2djM1JoZEdsaklITjBlV3hsY3l3Z1ltbHVaR2x1WnlCemRIbHNaWE1zSUdGdVpDQnpZMjl3WldRZ1kyeGhjM01nYzNSNWJHVnpMRnh1SUNvZ2QybDBhQ0JyWlhseklHbHVJR05oYldWc1kyRnpaUzVjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHZGxkRU52YlhCdmJtVnVkRk4wZVd4bElDaGpiMjUwWlhoMExDQmxlSFJ5WVdOMEtTQjdYRzRnSUdsbUlDZ2hZMjl1ZEdWNGRDNGtkbTV2WkdVcElIdGNiaUFnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnUFQwOUlDZGtaWFpsYkc5d2JXVnVkQ2NwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqYjI1emIyeGxMbVZ5Y205eUtDZGJkblZsTFhKbGJtUmxjbDBnWjJWMFEyOXRjRzl1Wlc1MFUzUjViR1VnWm1GcGJHVmtPaUJ1YnlBa2RtNXZaR1VnYVc0Z1kyOXVkR1Y0ZEM0bktWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdlMzFjYmlBZ2ZWeHVJQ0JzWlhRZ2MzUjViR1VnUFNCN2ZWeHVJQ0JzWlhRZ2RtNXZaR1VnUFNCamIyNTBaWGgwTGlSMmJtOWtaVnh1SUNCM2FHbHNaU0FvZG01dlpHVXBJSHRjYmlBZ0lDQmxlSFJsYm1Rb2MzUjViR1VzSUdkbGRGTjBlV3hsS0hadWIyUmxMQ0JsZUhSeVlXTjBLU2xjYmlBZ0lDQjJibTlrWlNBOUlIWnViMlJsTG5CaGNtVnVkRnh1SUNCOVhHNGdJSE4wZVd4bElEMGdZWFYwYjFCeVpXWnBlQ2h6ZEhsc1pTbGNiaUFnTHlvcVhHNGdJQ0FxSUhkb1pXNGdjSEpsWm1sNFpXUWdkbUZzZFdVZ2FYTWdZU0JoY25KaGVTd2dhWFFnYzJodmRXeGtJR0psSUdGd2NHeHBaV1FnZEc4Z1pXeGxiV1Z1ZEZ4dUlDQWdLaUJrZFhKcGJtY2dkR2hsSUc1bGVIUWdkR2xqYXk1Y2JpQWdJQ29nWlM1bkxseHVJQ0FnS2lBZ1ltRmphMmR5YjNWdVpDMXBiV0ZuWlRvZ0lHeHBibVZoY2kxbmNtRmthV1Z1ZENoMGJ5QjBiM0FzSTJZMVptVm1aQ3dqWm1abVptWm1LVHRjYmlBZ0lDb2dJSGRwYkd3Z1oyVnVaWEpoZEdVNlhHNGdJQ0FxSUNCN1hHNGdJQ0FxSUNBZ0lHSmhZMnRuY205MWJtUkpiV0ZuWlRvZ1cxeHVJQ0FnS2lBZ0lDQWdJRndpTFhkbFltdHBkQzFzYVc1bFlYSXRaM0poWkdsbGJuUW9kRzhnZEc5d0xDTm1OV1psWm1Rc0kyWm1abVptWmlsY0lpeGNiaUFnSUNvZ0lDQWdJQ0JjSWkxdGIzb3RiR2x1WldGeUxXZHlZV1JwWlc1MEtIUnZJSFJ2Y0N3alpqVm1aV1prTENObVptWm1abVlwWENJc1hHNGdJQ0FxSUNBZ0lDQWdYQ0pzYVc1bFlYSXRaM0poWkdsbGJuUW9kRzhnZEc5d0xDTm1OV1psWm1Rc0kyWm1abVptWmlsY0lsMWNiaUFnSUNvZ0lIMWNiaUFnSUNvdlhHNGdJR1p2Y2lBb1kyOXVjM1FnYXlCcGJpQnpkSGxzWlNrZ2UxeHVJQ0FnSUdsbUlDaEJjbkpoZVM1cGMwRnljbUY1S0hOMGVXeGxXMnRkS1NrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnZG1Gc2N5QTlJSE4wZVd4bFcydGRYRzRnSUNBZ0lDQmpiMjUwWlhoMExpUnVaWGgwVkdsamF5aG1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1ZzSUQwZ1kyOXVkR1Y0ZEM0a1pXeGNiaUFnSUNBZ0lDQWdhV1lnS0dWc0tTQjdYRzRnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCMllXeHpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkM1emRIbHNaVnRyWFNBOUlIWmhiSE5iYVYxY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0JwWmlBb2F5QWhQVDBnSjNCdmMybDBhVzl1SnlrZ2V5QmtaV3hsZEdVZ2MzUjViR1ZiYTEwZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpaaUJ3YjNOcGRHbHZiaUJwY3lBbmMzUnBZMnQ1Snl3Z2RHaGxiaUJoWkdRZ2FYUWdkRzhnZEdobElITjBhV05yZVVOb2FXeGtjbVZ1SUc5bUlIUm9aU0J3WVhKbGJuUWdjMk55YjJ4c1pYSXVYRzRnSUNBcUwxeHVJQ0JqYjI1emRDQndiM01nUFNCemRIbHNaUzV3YjNOcGRHbHZibHh1SUNCamIyNXpkQ0J5WldjZ1BTQXZjM1JwWTJ0NUpDOWNiaUFnYVdZZ0tIQnZjeUE5UFQwZ0oyWnBlR1ZrSnlrZ2UxeHVJQ0FnSUdOdmJuUmxlSFF1Skc1bGVIUlVhV05yS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lHTnZibk4wSUdWc0lEMGdZMjl1ZEdWNGRDNGtaV3hjYmlBZ0lDQWdJR2xtSUNobGJDa2dlMXh1SUNBZ0lDQWdJQ0JsYkM1amJHRnpjMHhwYzNRdVlXUmtLQ2QzWldWNExXWnBlR1ZrSnlsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5S1Z4dUlDQjlYRzRnSUdWc2MyVWdhV1lnS0dselFYSnlZWGtvY0c5ektTQW1KaUJ3YjNOYk1GMHViV0YwWTJnb2NtVm5LU0I4ZkNBb2NHOXpJQ3NnSnljcExtMWhkR05vS0hKbFp5a3BJSHRjYmlBZ0lDQmtaV3hsZEdVZ2MzUjViR1V1Y0c5emFYUnBiMjVjYmlBZ0lDQXZMeUIxYzJVZ2JtRjBhWFpsSUhOMGFXTnJlUzVjYmlBZ0lDQnBaaUFvYzNWd2NHOXlkRk4wYVdOcmVTZ3BLU0I3WEc0Z0lDQWdJQ0JqYjI1MFpYaDBMaVJ1WlhoMFZHbGpheWhtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWc0lEMGdZMjl1ZEdWNGRDNGtaV3hjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pXd3VZMnhoYzNOTWFYTjBMbUZrWkNnbmQyVmxlQzFwYjNNdGMzUnBZMnQ1SnlsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNCOVhHNGdJQ0FnTHk4Z2RYTmxJSEpsTFdsdGNHeGxiV1Z1ZEdGMGFXOXVJRzltSUhOMGFXTnJlUzVjYmlBZ0lDQmxiSE5sSUdsbUlDZ2hZMjl1ZEdWNGRDNWZjM1JwWTJ0NVFXUmtaV1FwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJSFZwWkNBOUlHTnZiblJsZUhRdVgzVnBaRnh1SUNBZ0lDQWdZMjl1YzNRZ2MyTnliMnhzWlhJZ1BTQm5aWFJRWVhKbGJuUlRZM0p2Ykd4bGNpaGpiMjUwWlhoMEtWeHVJQ0FnSUNBZ2FXWWdLSE5qY205c2JHVnlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuUmxlSFF1WDNOMGFXTnJlVUZrWkdWa0lEMGdkSEoxWlZ4dUlDQWdJQ0FnSUNCcFppQW9JWE5qY205c2JHVnlMbDl6ZEdsamEzbERhR2xzWkhKbGJpa2dlMXh1SUNBZ0lDQWdJQ0FnSUhOamNtOXNiR1Z5TGw5emRHbGphM2xEYUdsc1pISmxiaUE5SUh0OVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjMk55YjJ4c1pYSXVYM04wYVdOcmVVTm9hV3hrY21WdVczVnBaRjBnUFNCamIyNTBaWGgwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JqYjI1MFpYaDBMaVJ1WlhoMFZHbGpheWhtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdWc0lEMGdZMjl1ZEdWNGRDNGtaV3hjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyOXVkR1Y0ZEM1ZmFXNXBkRTltWm5ObGRGUnZjQ0E5SUdWc0xtOW1abk5sZEZSdmNGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMWNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQnpkSGxzWlZ4dWZWeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdaWGgwY21GamRFTnZiWEJ2Ym1WdWRGTjBlV3hsSUNoamIyNTBaWGgwS1NCN1hHNGdJSEpsZEhWeWJpQm5aWFJEYjIxd2IyNWxiblJUZEhsc1pTaGpiMjUwWlhoMExDQjBjblZsS1Z4dWZWeHVYRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JseHVhVzF3YjNKMElIc2dhWE5CY25KaGVTQjlJR1p5YjIwZ0p5NHVMM1YwYVd4ekoxeHVYRzR2S2lwY2JpQXFJSEpsYlc5MlpTQjBaWGgwSUc1dlpHVnpJR2x1SUhSb1pTQnViMlJsY3lCaGNuSmhlUzVjYmlBcUlFQndZWEpoYlNBZ2UwRnljbUY1ZlNCdWIyUmxjMXh1SUNvZ1FISmxkSFZ5YmlCN1FYSnlZWGw5SUc1dlpHVnpJSGRwZEdodmRYUWdkR1Y0ZENCdWIyUmxjeTVjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlIUnlhVzFVWlhoMFZrNXZaR1Z6SUNoMmJtOWtaWE1wSUh0Y2JpQWdhV1lnS0dselFYSnlZWGtvZG01dlpHVnpLU2tnZTF4dUlDQWdJSEpsZEhWeWJpQjJibTlrWlhNdVptbHNkR1Z5S0hadWIyUmxJRDArSUNFaGRtNXZaR1V1ZEdGbktWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCMmJtOWtaWE5jYm4xY2JseHVMeW9xWEc0Z0tpQm5aWFFnYkdsemRHVnVaWEp6SUdaeWIyMGdiMjRnWTI5dVptbG5JR0Z1WkNCMkxXOXVJR0pwYm1ScGJtY3VYRzRnS2lCMkxXOXVJR0pwYm1ScGJtY2dhR0Z6SUdFZ2NISnBiM0pwZEhrZ2IzWmxjaUJ2YmlCamIyNW1hV2N1WEc0Z0tpQkFjR0Z5WVcwZ2UzWnViMlJsZlNCMmJtOWtaVnh1SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUdWMmREb2daWFpsYm5RZ2JtRnRaUzVjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwVEdsemRHVnVaWEp6SUNoMmJtOWtaU3dnWlhaMEtTQjdYRzRnSUdOdmJuTjBJR2hoYm1Sc1pYSnpJRDBnVzExY2JpQWdkMmhwYkdVZ0tIWnViMlJsS1NCN1hHNGdJQ0FnYVdZZ0tIWnViMlJsTG1SaGRHRWdKaVlnZG01dlpHVXVaR0YwWVM1dmJpa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2FHRnVaR3hsY2lBOUlIWnViMlJsTG1SaGRHRXViMjViWlhaMFhWeHVJQ0FnSUNBZ2FHRnVaR3hsY2lBbUppQm9ZVzVrYkdWeWN5NXdkWE5vS0doaGJtUnNaWElwWEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gyYm05a1pTNWpiMjF3YjI1bGJuUlBjSFJwYjI1eklDWW1JSFp1YjJSbExtTnZiWEJ2Ym1WdWRFOXdkR2x2Ym5NdWJHbHpkR1Z1WlhKektTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCb1lXNWtiR1Z5SUQwZ2RtNXZaR1V1WTI5dGNHOXVaVzUwVDNCMGFXOXVjeTVzYVhOMFpXNWxjbk5iWlhaMFhWeHVJQ0FnSUNBZ2FHRnVaR3hsY2lBbUppQm9ZVzVrYkdWeWN5NXdkWE5vS0doaGJtUnNaWElwWEc0Z0lDQWdmVnh1SUNBZ0lIWnViMlJsSUQwZ2RtNXZaR1V1Y0dGeVpXNTBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHaGhibVJzWlhKelhHNTlYRzVjYmk4cUtseHVJQ29nU1c1emRHVmhaQ0J2WmlCMmRXVW5jeUJwYm5admEyVnlMQ0IwYUdseklHWjFibU4wYVc5dUlITm9iM1ZzWkNCamFHVmpheUJwWmlCMGFHVWdZbWx1WkdsdVp5Qm1kVzVqZEdsdmJseHVJQ29nYUdGeklHRWdYM2RsWlhoZmFHOXZheUJtYkdGbkxpQkpaaUIwYUdWeVpTQnBjeUJ2Ym1Vc0lIUm9aU0JvWVc1a2JHVnlJSE5vYjNWc1pDQnViM1FnWW1VZ2RISnBaMmRsY21Wa0xseHVJQ29nUUhCaGNtRnRJSHRCY25KaGVTQjhJRVoxYm1OMGFXOXVmU0JtYm5OY2JpQXFMMXh1Wlhod2IzSjBJR1oxYm1OMGFXOXVJR0Z3Y0d4NVJtNXpJQ2htYm5Nc0lDNHVMbUZ5WjNNcElIdGNiaUFnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvWm01ektTa2dlMXh1SUNBZ0lHTnZibk4wSUdOc2IyNWxaQ0E5SUdadWN5NXpiR2xqWlNncFhHNGdJQ0FnWTI5dWMzUWdiR1Z1SUQwZ1kyeHZibVZrTG14bGJtZDBhRnh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjYmlBZ0lDQWdJR052Ym5OMElHWnVJRDBnWTJ4dmJtVmtXMmxkWEc0Z0lDQWdJQ0JwWmlBb1ptNHVYM2RsWlhoZmFHOXZheWtnZTF4dUlDQWdJQ0FnSUNCamIyNTBhVzUxWlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWm00dVlYQndiSGtvYm5Wc2JDd2dZWEpuY3lsY2JpQWdJQ0I5WEc0Z0lIMWNiaUFnWld4elpTQjdYRzRnSUNBZ2FXWWdLQ0ZtYm5NdVgzZGxaWGhmYUc5dmF5a2dlMXh1SUNBZ0lDQWdabTV6TG1Gd2NHeDVLRzUxYkd3c0lHRnlaM01wWEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYmk4cUtseHVJQ29nWlcxcGRDQnVZWFJwZG1VZ1pYWmxiblJ6SUhSdklHVnVZV0pzWlNCMkxXOXVMbHh1SUNvZ1FIQmhjbUZ0SUh0V1EyOXRjRzl1Wlc1MGZTQmpiMjUwWlhoME9pQjNhR2xqYUNCdmJtVWdkRzhnWlcxcGRDQmhJR1YyWlc1MElHOXVMbHh1SUNvZ1FIQmhjbUZ0SUh0aGNuSmhlU0I4SUc5aWFtVmpkSDBnWlhabGJuUnpPaUJsZUhSeVlTQmxkbVZ1ZEhNdUlGbHZkU0JqWVc0Z2NHRnpjeUJwYmlCdGRXeDBhWEJzWlNCaGNtZDFiV1Z1ZEhNZ2FHVnlaUzVjYmlBcUwxeHVaWGh3YjNKMElHWjFibU4wYVc5dUlHTnlaV0YwWlVWMlpXNTBUV0Z3SUNoamIyNTBaWGgwTENBdUxpNWxkbVZ1ZEhNcElIdGNiaUFnWTI5dWMzUWdaWFpsYm5STllYQWdQU0I3ZlZ4dUlDQXZLaXBjYmlBZ0lDb2dRbWx1WkNCemIyMWxJRzl5YVdkcGJtRnNJSFI1Y0dVZ1pYWmxiblFnZEc4Z2VXOTFjaUJ6Y0dWamFXWnBaV1FnZEhsd1pTQmxkbVZ1ZENCb1lXNWtiR1Z5TGx4dUlDQWdLaUJsTG1jdUlHSnBibVFnSjNSaGNDY2daWFpsYm5RZ2RHOGdKMk5zYVdOckp5QmxkbVZ1ZENCc2FYTjBaVzVsY2pvZ1ltbHVaRVoxYm1Nb0ozUmhjQ2NwS0NkamJHbGpheWNwTGx4dUlDQWdLaUJQY2lCaWFXNWtJR05sY25ScFlXNGdaWFpsYm5RZ2QybDBhQ0I1YjNWeUlITndaV05wWm1sbFpDQm9ZVzVrYkdWeU9pQmlhVzVrUm5WdVl5Z25ZMnhwWTJzbkxDQnpiMjFsUm5WdVkzUnBiMjRwWEc0Z0lDQXFMMXh1SUNCamIyNXpkQ0JpYVc1a1JuVnVZeUE5SUNodmNtbG5hVzVoYkZSNWNHVXBJRDArSUh0Y2JpQWdJQ0J5WlhSMWNtNGdiR2x6ZEdWdVZHOGdQVDRnZTF4dUlDQWdJQ0FnYkdWMElHaGhibVJzWlhKY2JpQWdJQ0FnSUdOdmJuTjBJR1YyZEU1aGJXVWdQU0J2Y21sbmFXNWhiRlI1Y0dVZ2ZId2diR2x6ZEdWdVZHOWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdiR2x6ZEdWdVZHOGdQVDA5SUNkbWRXNWpkR2x2YmljcElIdGNiaUFnSUNBZ0lDQWdhR0Z1Wkd4bGNpQTlJR3hwYzNSbGJsUnZYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmxiSE5sSUdsbUlDaDBlWEJsYjJZZ2JHbHpkR1Z1Vkc4Z1BUMDlJQ2R6ZEhKcGJtY25LU0I3WEc0Z0lDQWdJQ0FnSUdoaGJtUnNaWElnUFNCbWRXNWpkR2x2YmlBb1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdJQ0FxSUhWelpTQW5YM1J5YVdkblpYSmxaQ2NnZEc4Z1kyOXVkSEp2YkNCaFkzUjFjbUZzSUdKMVltSnNhVzVuSUNoaGJHeHZkeUJ2Y21sbmFXNWhiQ0JpZFdKaWJHbHVaeWt1WEc0Z0lDQWdJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHVXVYM1J5YVdkblpYSmxaQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdJQ0FxSUhSeWFXZG5aWElnZEdobElHTnNiM05sYzNRZ2NHRnlaVzUwSUhkb2FXTm9JR2hoY3lCaWIzVnVaQ0JsZG1WdWRDQm9ZVzVrYkdWeWN5NWNiaUFnSUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ0lDQnNaWFFnZG0wZ1BTQmpiMjUwWlhoMFhHNGdJQ0FnSUNBZ0lDQWdkMmhwYkdVZ0tIWnRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdmJuTWdQU0JuWlhSTWFYTjBaVzVsY25Nb2RtMHVYM1p1YjJSbElIeDhJSFp0TGlSMmJtOWtaU3dnYkdsemRHVnVWRzhwWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCc1pXNGdQU0J2Ym5NdWJHVnVaM1JvWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYkdWdUlENGdNQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ2FXUjRJRDBnTUZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0IzYUdsc1pTQW9hV1I0SUR3Z2JHVnVLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiMjRnUFNCdmJuTmJhV1I0WFZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGd2NHeDVSbTV6S0c5dUxtWnVjeXdnWlNsY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpIZ3JLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzl1WTJVZ1lTQndZWEpsYm5RZ2JtOWtaU0FvYjNJZ2MyVnNaaUJ1YjJSbEtTQm9ZWE1nZEhKcFoyZGxjbVZrSUhSb1pTQm9ZVzVrYkdWeUxDQjBhR1Z1WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUdsMElITjBiM0J6SUdKMVltSnNhVzVuSUdsdGJXVmthV0YwWld4NUxDQmhibVFnWVNBblgzUnlhV2RuWlhKbFpDY2diMkpxWldOMElHbHpJSE5sZEM1Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnWlM1ZmRISnBaMmRsY21Wa0lEMGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzT2lCMmJTNGtaV3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIWnRJRDBnZG0wdUpIQmhjbVZ1ZEZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCbWJHRm5JSFJ2SUdScGMzUnBibWQxYVhOb0lHWnliMjBnZFhObGNpMWlhVzVrYVc1bklHeHBjM1JsYm1WeWN5NWNiaUFnSUNBZ0lDQWdhR0Z1Wkd4bGNpNWZkMlZsZUY5b2IyOXJJRDBnZEhKMVpWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLQ0ZsZG1WdWRFMWhjRnRsZG5ST1lXMWxYU2tnZTF4dUlDQWdJQ0FnSUNCbGRtVnVkRTFoY0Z0bGRuUk9ZVzFsWFNBOUlGdGRYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmxkbVZ1ZEUxaGNGdGxkblJPWVcxbFhTNXdkWE5vS0doaGJtUnNaWElwWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUdOdmJYQnZibVZ1ZENkeklHVjRkSEpoSUdWMlpXNTBJR0pwYm1ScGJtZHpMaUJVYUdseklHbHpJRzF2YzNSc2VTQm1iM0lnZEdobElHNWxaV1J6SUc5bUlHTnZiWEJ2Ym1WdWRDZHpYRzRnSUNBcUlHOTNiaUJ6Y0dWamFXRnNJR0psYUdGMmFXOTFjbk11SUZSb1pYTmxJR2hoYm1Sc1pYSnpJSGRwYkd3Z1ltVWdjSEp2WTJWemMyVmtJR0ZtZEdWeUlIUm9aU0IxYzJWeUozTmNiaUFnSUNvZ1kyOXljbVZ6Y0c5dVpHbHVaeUJsZG1WdWRDQm9ZVzVrYkdWeWN5NWNiaUFnSUNvdlhHNGdJR2xtSUNobGRtVnVkSE1wSUh0Y2JpQWdJQ0JqYjI1emRDQnNaVzRnUFNCbGRtVnVkSE11YkdWdVozUm9YRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnNaVzQ3SUdrckt5a2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1pYaDBjbUVnUFNCbGRtVnVkSE5iYVYxY2JpQWdJQ0FnSUdsbUlDaHBjMEZ5Y21GNUtHVjRkSEpoS1NrZ2UxeHVJQ0FnSUNBZ0lDQmxlSFJ5WVM1bWIzSkZZV05vS0dKcGJtUkdkVzVqS0NrcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCbGJITmxJR2xtSUNoMGVYQmxiMllnWlhoMGNtRWdQVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnSUNBZ0lHWnZjaUFvWTI5dWMzUWdhMlY1SUdsdUlHVjRkSEpoS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZbWx1WkVaMWJtTW9hMlY1S1NobGVIUnlZVnRyWlhsZEtWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlHVjJaVzUwVFdGd1hHNTlYRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JtVjRjRzl5ZENBcUlHWnliMjBnSnk0dmMzUjViR1VuWEc1bGVIQnZjblFnS2lCbWNtOXRJQ2N1TDI1dlpHVW5YRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JtbHRjRzl5ZENCN1hHNGdJR2RsZEZSb2NtOTBkR3hsVEdGNmVXeHZZV1FzWEc0Z0lIZGhkR05vUVhCd1pXRnlMRnh1SUNCMGNtbG5aMlZ5UkdsellYQndaV0Z5TEZ4dUlDQmxlSFJsYm1SY2JuMGdabkp2YlNBbkxpNHZkWFJwYkhNblhHNWNibXhsZENCc1lYcDViRzloWkZkaGRHTm9aV1FnUFNCbVlXeHpaVnh1Wm5WdVkzUnBiMjRnZDJGMFkyaE1ZWHA1Ykc5aFpDQW9LU0I3WEc0Z0lHeGhlbmxzYjJGa1YyRjBZMmhsWkNBOUlIUnlkV1ZjYmlBZ095QmJYRzRnSUNBZ0ozTmpjbTlzYkNjc1hHNGdJQ0FnTHk4Z0ozUnlZVzV6YVhScGIyNWxibVFuTEZ4dUlDQWdJQzh2SUNkM1pXSnJhWFJVY21GdWMybDBhVzl1Ulc1a0p5eGNiaUFnSUNBdkx5QW5ZVzVwYldGMGFXOXVaVzVrSnl4Y2JpQWdJQ0F2THlBbmQyVmlhMmwwUVc1cGJXRjBhVzl1Ulc1a0p5eGNiaUFnSUNBbmNtVnphWHBsSjF4dUlDQmRMbVp2Y2tWaFkyZ29aWFowSUQwK0lIdGNiaUFnSUNCM2FXNWtiM2N1WVdSa1JYWmxiblJNYVhOMFpXNWxjaWhsZG5Rc0lHZGxkRlJvY205MGRHeGxUR0Y2ZVd4dllXUW9NalVzSUdSdlkzVnRaVzUwTG1KdlpIa3BLVnh1SUNCOUtWeHVJQ0F2S2lwY2JpQWdJQ29nU1c0Z1kyRnpaU0IwYUdVZ2RYTmxjbk1nZFhObElIUm9aU0JpYjJSNUozTWdiM1psY21ac2IzY2dkRzhnYzJOeWIyeHNMaUJVYUdWdUlIUm9aU0J6WTNKdmJHeGNiaUFnSUNvZ1pYWmxiblFnZDI5MWJHUWdibTkwSUdKbElIUnlhV2RuWlhKbFpDQnZiaUIwYUdVZ2QybHVaRzkzSUc5aWFtVmpkQ0JpZFhRZ2IyNGdkR2hsSUdKdlpIa3VYRzRnSUNBcUwxeHVJQ0JrYjJOMWJXVnVkQzVpYjJSNUxtRmtaRVYyWlc1MFRHbHpkR1Z1WlhJb0ozTmpjbTlzYkNjc0lHZGxkRlJvY205MGRHeGxUR0Y2ZVd4dllXUW9NalVzSUdSdlkzVnRaVzUwTG1KdlpIa3BLVnh1ZlZ4dVhHNXNaWFFnZDJGeWJtVmtJRDBnWm1Gc2MyVmNibU52Ym5OMElHNXZkR1ZRWVdkbElEMGdKMmgwZEhCek9pOHZaMmx6ZEM1bmFYUm9kV0l1WTI5dEwwMXlVbUZwYm1SeWIzQXZOV0U0TURWaE1EWTNNVFEyTmpBNVpUVmpabVEwWkRZMFpEYzNOV1EyT1RNalptbHNaUzEzWldWNExYWjFaUzF5Wlc1a1pYSXRZMjl1Wm1sbkxXWnZjaTEyZFdVdGJHOWhaR1Z5TFdwekoxeHVablZ1WTNScGIyNGdkMkZ5YmxCeWIyTmxjM05UZEhsc1pTQW9LU0I3WEc0Z0lHbG1JQ2doZDJGeWJtVmtLU0I3WEc0Z0lDQWdkMkZ5Ym1Wa0lEMGdkSEoxWlZ4dUlDQWdJR052Ym5OMElIQmhaMlVnUFNCM2FXNWtiM2N1WDNCeWIyTmxjM05mYzNSNWJHVmZibTkwWlY5d1lXZGxJSHg4SUc1dmRHVlFZV2RsWEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0dCYmRuVmxMWEpsYm1SbGNsMDZJSGx2ZFNCemFHOTFiR1FnWVdSa0lIWjFaUzFzYjJGa1pYSWdZMjl1Wm1sbklIZHBkR2dnSkhCeWIyTmxjM05UZEhsc1pTQjBieUJsYm1GaWJHVWdhVzVzYVc1bElITjBlV3hsY3lkeklHQmNiaUFnSUNBZ0lDc2dZRzV2Y20xaGJHbDZZWFJwYjI0dUlITmxaU0FrZTNCaFoyVjlJRWxtSUhsdmRTQmhiSEpsWVdSNUlHUnBaQ0IwYUdsekxDQndiR1ZoYzJVZ2FXZHViM0psSUhSb2FYTWdiV1Z6YzJGblpTNWdLVnh1SUNCOVhHNTlYRzVjYm14bGRDQnBaRU51ZENBOUlEQmNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdlMXh1SUNCaVpXWnZjbVZEY21WaGRHVWdLQ2tnZTF4dUlDQWdJR2xtSUNnaGJHRjZlV3h2WVdSWFlYUmphR1ZrS1NCN1hHNGdJQ0FnSUNCM1lYUmphRXhoZW5sc2IyRmtLQ2xjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnZFhCa1lYUmxaQ0FvS1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11WDNKdmIzUkpaQ2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdaV3dnUFNCMGFHbHpMaVJsYkZ4dUlDQWdJQ0FnYVdZZ0tHVnNMbTV2WkdWVWVYQmxJRDA5UFNBeFhHNGdJQ0FnSUNBZ0lDWW1JR1ZzTG1Oc1lYTnpUbUZ0WlM1cGJtUmxlRTltS0NkM1pXVjRMWEp2YjNRbktTQThQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQmxiQzVqYkdGemMweHBjM1F1WVdSa0tDZDNaV1Y0TFhKdmIzUW5LVnh1SUNBZ0lDQWdJQ0JsYkM1elpYUkJkSFJ5YVdKMWRHVW9KMlJoZEdFdGQzZ3RjbTl2ZEMxcFpDY3NJSFJvYVhNdVgzSnZiM1JKWkNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JqYjI1emRDQjBZV2RPWVcxbElEMGdkR2hwY3k0a2IzQjBhVzl1Y3lBbUppQjBhR2x6TGlSdmNIUnBiMjV6TGw5amIyMXdiMjVsYm5SVVlXZGNiaUFnSUNCamIyNXpkQ0J0WlhSaFZYQWdQU0IzWldWNExsOXRaWFJoTG5Wd1pHRjBaV1JjYmlBZ0lDQnBaaUFvSVcxbGRHRlZjRnQwWVdkT1lXMWxYU2tnZTF4dUlDQWdJQ0FnYldWMFlWVndXM1JoWjA1aGJXVmRJRDBnTUZ4dUlDQWdJSDFjYmlBZ0lDQnRaWFJoVlhCYmRHRm5UbUZ0WlYwcksxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlITnBibU5sSUhSb1pTQjFjR1JoZEdsdVp5QnZaaUJqYjIxd2IyNWxiblFnYldGNUlHRm1abVZqZENCMGFHVWdiR0Y1YjNWMExDQjBhR1VnYkdGNmVXeHZZV1JwYm1jZ2MyaHZkV3hrWEc0Z0lDQWdJQ29nWW1VZ1ptbHlaV1F1WEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1ZlptbHlaVXhoZW5sc2IyRmtLQ2xjYmlBZ2ZTeGNibHh1SUNCdGIzVnVkR1ZrSUNncElIdGNiaUFnSUNCamIyNXpkQ0IwWVdkT1lXMWxJRDBnZEdocGN5NGtiM0IwYVc5dWN5QW1KaUIwYUdsekxpUnZjSFJwYjI1ekxsOWpiMjF3YjI1bGJuUlVZV2RjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSGRsWlhndVgyTnZiWEJ2Ym1WdWRITmJkR0ZuVG1GdFpWMGdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQjNaV1Y0TGw5amIyMXdiMjVsYm5SelczUmhaMDVoYldWZEt5dGNiaUFnSUNCOVhHNGdJQ0FnWTI5dWMzUWdiV1YwWVUxMElEMGdkMlZsZUM1ZmJXVjBZUzV0YjNWdWRHVmtYRzRnSUNBZ2FXWWdLQ0Z0WlhSaFRYUmJkR0ZuVG1GdFpWMHBJSHRjYmlBZ0lDQWdJRzFsZEdGTmRGdDBZV2RPWVcxbFhTQTlJREJjYmlBZ0lDQjlYRzRnSUNBZ2JXVjBZVTEwVzNSaFowNWhiV1ZkS3l0Y2JpQWdJQ0JwWmlBb2RHaHBjeUE5UFQwZ2RHaHBjeTRrY205dmRDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2NtOXZkRWxrSUQwZ1lIZDRMWEp2YjNRdEpIdHBaRU51ZENzcmZXQmNiaUFnSUNBZ0lHbG1JQ2doZDJWbGVDNWZjbTl2ZENrZ2UxeHVJQ0FnSUNBZ0lDQjNaV1Y0TGw5eWIyOTBJRDBnZTMxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhkbFpYZ3VYM0p2YjNSYmNtOXZkRWxrWFNBOUlIUm9hWE5jYmlBZ0lDQWdJSFJvYVhNdVgzSnZiM1JKWkNBOUlISnZiM1JKWkZ4dUlDQWdJQ0FnWTI5dWMzUWdaV3dnUFNCMGFHbHpMaVJsYkZ4dUlDQWdJQ0FnYVdZZ0tHVnNMbTV2WkdWVWVYQmxJQ0U5UFNBeEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1pXd3VZMnhoYzNOTWFYTjBMbUZrWkNnbmQyVmxlQzF5YjI5MEp5bGNiaUFnSUNBZ0lHVnNMbk5sZEVGMGRISnBZblYwWlNnblpHRjBZUzEzZUMxeWIyOTBMV2xrSnl3Z2NtOXZkRWxrS1Z4dUlDQWdJQ0FnZEdocGN5NWZabWx5WlV4aGVubHNiMkZrS0dWc0tWeHVJQ0FnSUgxY2JseHVJQ0FnSUM4dklHZHBkbVVnZDJGeWJtbHVaeUJtYjNJZ2JtOTBJSFZ6YVc1bklDUndjbTlqWlhOelUzUjViR1VnYVc0Z2RuVmxMV3h2WVdSbGNpQmpiMjVtYVdjdVhHNGdJQ0FnYVdZZ0tDRjNZWEp1WldRZ0ppWWdJWGRwYm1SdmR5NWZjM1I1YkdWZmNISnZZMlZ6YzJsdVoxOWhaR1JsWkNrZ2UxeHVJQ0FnSUNBZ2QyRnlibEJ5YjJObGMzTlRkSGxzWlNncFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHk4Z1ltbHVaQ0JoZEhSeWN5QjBieUFrWld3dVhHNGdJQ0FnYkdWMElHa3NJR3BjYmlBZ0lDQnBaaUFvZEdocGN5NGtaV3dnSmlZZ0tHa2dQU0JxSUQwZ2RHaHBjeTRrZG01dlpHVXBJQ1ltSUNocElEMGdhUzVrWVhSaEtTQW1KaUFvYWlBOUlHb3VZMjl0Y0c5dVpXNTBUM0IwYVc5dWN5a3BJSHRjYmlBZ0lDQWdJSFJvYVhNdUpHVnNMbUYwZEhKeklEMGdaWGgwWlc1a0tIdDlMQ0JwTG1GMGRISnpMQ0JxTG5CeWIzQnpSR0YwWVNsY2JpQWdJQ0I5WEc0Z0lDQWdkMkYwWTJoQmNIQmxZWElvZEdocGN5d2dkSEoxWlNsY2JpQWdmU3hjYmx4dUlDQmtaWE4wY205NVpXUWdLQ2tnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUdsbUlIUm9aU0JrWlhOMGNtOTVaV1FnWld4bGJXVnVkQ0JwY3lCaFltOTJaU0JoYm05MGFHVnlJSEJoYm1Wc0lIZHBkR2dnYVcxaFoyVnpJR2x1YzJsa1pTd2dZVzVrSUhSb1pTQnBiV0ZuWlhOY2JpQWdJQ0FnS2lCdGIzWmxaQ0JwYm5SdklIUm9aU0IyYVdWM2NHOXlkQ3dnZEdobGJpQjBhR1VnYkdGNmVXeHZZV1JwYm1jZ2MyaHZkV3hrSUdKbElIUnlhV2RuWlhKbFpDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCcFppQW9kR2hwY3k1ZmNtOXZkRWxrS1NCN1hHNGdJQ0FnSUNCa1pXeGxkR1VnZDJWbGVDNWZjbTl2ZEZ0MGFHbHpMbDl5YjI5MFNXUmRYRzRnSUNBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVmY205dmRFbGtYRzRnSUNBZ2ZWeHVJQ0FnSUdOdmJuTjBJSFJoWjA1aGJXVWdQU0IwYUdsekxpUnZjSFJwYjI1eklDWW1JSFJvYVhNdUpHOXdkR2x2Ym5NdVgyTnZiWEJ2Ym1WdWRGUmhaMXh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdkMlZsZUM1ZlkyOXRjRzl1Wlc1MGMxdDBZV2RPWVcxbFhTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lIZGxaWGd1WDJOdmJYQnZibVZ1ZEhOYmRHRm5UbUZ0WlYwdExWeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQnRaWFJoUkhNZ1BTQjNaV1Y0TGw5dFpYUmhMbVJsYzNSeWIzbGxaRnh1SUNBZ0lHbG1JQ2doYldWMFlVUnpXM1JoWjA1aGJXVmRLU0I3WEc0Z0lDQWdJQ0J0WlhSaFJITmJkR0ZuVG1GdFpWMGdQU0F3WEc0Z0lDQWdmVnh1SUNBZ0lHMWxkR0ZFYzF0MFlXZE9ZVzFsWFNzclhHNWNiaUFnSUNCMGFHbHpMbDltYVhKbFRHRjZlV3h2WVdRb0tWeHVJQ0FnSUhSeWFXZG5aWEpFYVhOaGNIQmxZWElvZEdocGN5bGNiaUFnZlN4Y2JseHVJQ0J0WlhSb2IyUnpPaUI3WEc0Z0lDQWdYMlpwY21WTVlYcDViRzloWkNBb1pXd3BJSHRjYmlBZ0lDQWdJR2RsZEZSb2NtOTBkR3hsVEdGNmVXeHZZV1FvTWpVc0lHVnNJSHg4SUdSdlkzVnRaVzUwTG1KdlpIa3BLQ2xjYmlBZ0lDQjlYRzRnSUgxY2JuMWNiaUlzSWk4cVhHNGdLaUJNYVdObGJuTmxaQ0IwYnlCMGFHVWdRWEJoWTJobElGTnZablIzWVhKbElFWnZkVzVrWVhScGIyNGdLRUZUUmlrZ2RXNWtaWElnYjI1bFhHNGdLaUJ2Y2lCdGIzSmxJR052Ym5SeWFXSjFkRzl5SUd4cFkyVnVjMlVnWVdkeVpXVnRaVzUwY3k0Z0lGTmxaU0IwYUdVZ1RrOVVTVU5GSUdacGJHVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIZHBkR2dnZEdocGN5QjNiM0pySUdadmNpQmhaR1JwZEdsdmJtRnNJR2x1Wm05eWJXRjBhVzl1WEc0Z0tpQnlaV2RoY21ScGJtY2dZMjl3ZVhKcFoyaDBJRzkzYm1WeWMyaHBjQzRnSUZSb1pTQkJVMFlnYkdsalpXNXpaWE1nZEdocGN5Qm1hV3hsWEc0Z0tpQjBieUI1YjNVZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsWEc0Z0tpQmNJa3hwWTJWdWMyVmNJaWs3SUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJWY2JpQXFJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVJQ0JaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5eGNiaUFxSUhOdlpuUjNZWEpsSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVYRzRnS2lCY0lrRlRJRWxUWENJZ1FrRlRTVk1zSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dWeHVJQ29nUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNGdJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobFhHNGdLaUJ6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtJR3hwYldsMFlYUnBiMjV6WEc0Z0tpQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dWFXMXdiM0owSUh0Y2JpQWdaMlYwU0dWaFpGTjBlV3hsVFdGd1hHNTlJR1p5YjIwZ0p5NHVMMk52Y21VblhHNWNibWx0Y0c5eWRDQjdYRzRnSUc1dmNtMWhiR2w2WlZOMGVXeGxMRnh1SUNCallXMWxiR2w2WlV0bGVYTXNYRzRnSUdWNGRHVnVaRnh1ZlNCbWNtOXRJQ2N1TGk5MWRHbHNjeWRjYmx4dUx5b3FYRzRnS2lCblpYUWdZU0JpWldadmNtVkRjbVZoZEdVZ2FHOXZheXdnZDJocFkyZ2dhR0Z6SUdFZ2JXRnlheUIwYnlCcFpHVnVkR2xtZVNCMGFHVWdhRzl2YXlCbWRXNWpkR2x2YmlCcGRITmxiR1l1WEc0Z0tpOWNibVoxYm1OMGFXOXVJR2RsZEVsa1pXNTBhV1pwWldSQ1pXWnZjbVZEY21WaGRHVWdLQ2tnZTF4dUlDQmpiMjV6ZENCa2FYTndiM05sWkNBOUlIdDlJQzh2SUdScGMzQnZjMlZrSUdOdmJYQnZibVZ1ZEhNdUlFRnNjbVZoWkhrZ2MyTmhibTVsWkM1Y2JpQWdablZ1WTNScGIyNGdZbVZtYjNKbFEzSmxZWFJsSUNncElIdGNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQm5aWFFnYzNSaGRHbGpJR05zWVhOeklITjBlV3hsSUcxaGNDQm1jbTl0SUdSdlkzVnRaVzUwSjNNZ2MzUjViR1ZUYUdWbGRITXVYRzRnSUNBZ0lDb2dWMlZsZUM1dmJpQjNhV3hzSUdOeVpXRjBaU0JoSUZaMVpTQnBibk4wWVc1alpTNGdTVzRnZEdocGN5QmpZWE5sSUhkbEoyeHNJR2xuYm05eVpTQnBkQ3dnYzJsdVkyVmNiaUFnSUNBZ0tpQnBkQ2R6SUc1dmRDQnpkWEpsSUhkb1pYUm9aWElnZEdobElITmpiM0JsWkNCemRIbHNaU0JvWVhNZ1lXeHlaV0ZrZVNCaGRIUmhZMmhsWkNCMGJ5Qm9aV0ZrSUc5eUlHNXZkQzVjYmlBZ0lDQWdLaTljYmlBZ0lDQmpiMjV6ZENCMFlXZE9ZVzFsSUQwZ2RHaHBjeTRrYjNCMGFXOXVjeUFtSmlCMGFHbHpMaVJ2Y0hScGIyNXpMbDlqYjIxd2IyNWxiblJVWVdkY2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCR2IzSWdkblZsTFd4dllXUmxjaUJlTVRFdU15NTRMQ0IwYUdWeVpTZHpJRzV2SUdsdWFtVmpkRk4wZVd4bElHWjFibU4wYVc5dUxpQlVhR1VnYzNSNWJHVlRhR1ZsZEZ4dUlDQWdJQ0FxSUdseklHRnNjbVZoWkhrZ2FXNXFaV04wWldRZ2FXNTBieUIwYUdVZ2FHVmhaQzRnU25WemRDQnpZMkZ1SUdsMExseHVJQ0FnSUNBcUwxeHVJQ0FnSUM4dklHRnplVzVqSUdOdmJYQnZibVZ1ZEM1Y2JpQWdJQ0JwWmlBb0tIUm9hWE11SkhadWIyUmxJQ1ltSUhSb2FYTXVKSFp1YjJSbExtUmhkR0VnSmlZZ2RHaHBjeTRrZG01dlpHVXVaR0YwWVM1MFlXY2dQVDA5SUNkamIyMXdiMjVsYm5RbktWeHVJQ0FnSUNBZ2ZId2dLSFJvYVhNZ1BUMDlJSFJvYVhNdUpISnZiM1FnSmlZZ2RHaHBjeTRrYjNCMGFXOXVjeUFtSmlBaGRHaHBjeTVmWm1seWMzUlRZMkZ1Ym1Wa0tTa2dlMXh1SUNBZ0lDQWdkR2hwY3k1ZlptbHljM1JUWTJGdWJtVmtJRDBnZEhKMVpWeHVJQ0FnSUNBZ1pYaDBaVzVrS0hkbFpYZ3VYM04wZVd4bFRXRndMQ0JuWlhSSVpXRmtVM1I1YkdWTllYQW9LU2xjYmlBZ0lDQjlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dSbTl5SUhaMVpTMXNiMkZrWlhJZ1hqRXlMakFzSUhSb1pTQnBibXBsWTNSVGRIbHNaU0JtZFc1amRHbHZiaUJwY3lCb2IyOXJaV1F1SUZkbElITm9iM1ZzWkNCelkyRnVYRzRnSUNBZ0lDb2djM1I1YkdVZ2JXRndJR0ZtZEdWeUlIUm9aU0JwYm1wbFkzUlRkSGxzWlNCb2IyOXJJR05oYkd4bFpDNWNiaUFnSUNBZ0tpOWNiaUFnSUNCcFppQW9LQ2gwYUdseklEMDlQU0IwYUdsekxpUnliMjkwSUNZbUlIUm9hWE11Skc5d2RHbHZibk1wWEc0Z0lDQWdJQ0I4ZkNBb2RHRm5UbUZ0WlZ4dUlDQWdJQ0FnSmlZZ0tIUjVjR1Z2WmlCM1pXVjRMbDlqYjIxd2IyNWxiblJ6VzNSaFowNWhiV1ZkSUQwOVBTQW5kVzVrWldacGJtVmtKeWxjYmlBZ0lDQWdJQ1ltSUNGa2FYTndiM05sWkZ0MFlXZE9ZVzFsWFNrcFhHNGdJQ0FnSUNBbUppQWhkR2hwY3k1ZmMyVmpiMjVrVTJOaGJtNWxaQ2tnZTF4dUlDQWdJQ0FnWkdsemNHOXpaV1JiZEdGblRtRnRaVjBnUFNBeFhHNGdJQ0FnSUNCMGFHbHpMbDl6WldOdmJtUlRZMkZ1Ym1Wa0lEMGdkSEoxWlZ4dUlDQWdJQ0FnWTI5dWMzUWdhRzl2YTNNZ1BTQjBhR2x6TGlSdmNIUnBiMjV6TG1KbFptOXlaVU55WldGMFpWeHVJQ0FnSUNBZ1kyOXVjM1FnYkdWdUlEMGdhRzl2YTNNdWJHVnVaM1JvWEc0Z0lDQWdJQ0JzWlhRZ2RHaHBjMGh2YjJ0SlpIZ2dQU0F3SUM4dklHbHVaR1Y0SUc5bUlIUm9hWE1nYUc5dmF5QnBiaUIwYUdVZ2FHOXZhM01nWVhKeVlYa3VYRzRnSUNBZ0lDQm1iM0lnS0RzZ2RHaHBjMGh2YjJ0SlpIZ2dQQ0JzWlc0N0lIUm9hWE5JYjI5clNXUjRLeXNwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR2h2YjJ0elczUm9hWE5JYjI5clNXUjRYUzVmYzNSNWJHVk5hWGhwYmlrZ2V5QmljbVZoYXlCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9kR2hwYzBodmIydEpaSGdnSVQwOUlHeGxiaUF0SURFcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1puVnVZeUE5SUdodmIydHpXMnhsYmlBdElERmRYRzRnSUNBZ0lDQWdJR2h2YjJ0elcyeGxiaUF0SURGZElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDOHZJR05oYkd3Z2RHaGxJRzl5YVdkcGJtRnNJR2x1YW1WamRGTjBlV3hsSUdodmIyc3VYRzRnSUNBZ0lDQWdJQ0FnWm5WdVl5NWpZV3hzS0hSb2FYTXBYRzRnSUNBZ0lDQWdJQ0FnTHk4Z2MyTmhiaUIwYUdVZ2JtVjNJR0Z3Y0dWdVpHVmtJSE4wZVd4bFUyaGxaWFF1WEc0Z0lDQWdJQ0FnSUNBZ1pYaDBaVzVrS0hkbFpYZ3VYM04wZVd4bFRXRndMQ0JuWlhSSVpXRmtVM1I1YkdWTllYQW9LU2xjYmlBZ0lDQWdJQ0FnSUNCb2IyOXJjMXRzWlc0Z0xTQXhYU0E5SUdaMWJtTmNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQmlaV1p2Y21WRGNtVmhkR1V1WDNOMGVXeGxUV2w0YVc0Z1BTQjBjblZsWEc0Z0lISmxkSFZ5YmlCaVpXWnZjbVZEY21WaGRHVmNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQmlaV1p2Y21WRGNtVmhkR1U2SUdkbGRFbGtaVzUwYVdacFpXUkNaV1p2Y21WRGNtVmhkR1VvS1N4Y2JseHVJQ0J0WlhSb2IyUnpPaUI3WEc0Z0lDQWdKSEJ5YjJObGMzTlRkSGxzWlNBb2MzUjViR1VwSUh0Y2JpQWdJQ0FnSUhkcGJtUnZkeTVmYzNSNWJHVmZjSEp2WTJWemMybHVaMTloWkdSbFpDQTlJSFJ5ZFdWY2JpQWdJQ0FnSUdsbUlDZ2hjM1I1YkdVcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCeVpYUjFjbTRnYm05eWJXRnNhWHBsVTNSNWJHVW9ZMkZ0Wld4cGVtVkxaWGx6S0hOMGVXeGxLU2xjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMmRsZEZCaGNtVnVkRkpsWTNRZ0tDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2NHRnlaVzUwUld4dElEMGdkR2hwY3k0a2IzQjBhVzl1Y3k1ZmNHRnlaVzUwUld4dFhHNGdJQ0FnSUNCeVpYUjFjbTRnY0dGeVpXNTBSV3h0SUNZbUlIQmhjbVZ1ZEVWc2JTNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1Z4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMaUFnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVmNiaUFxSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVFnYkdsdGFYUmhkR2x2Ym5OY2JpQXFJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWNiaTh2SUVCbWJHOTNYRzVjYmk4dklHbHVjSFYwSUdGdVpDQjBaWGgwWVhKbElHaGhjeUJ6YjIxbElHTnZiVzF2YmlCaGNHa2dZVzVrSUdWMlpXNTBYRzVwYlhCdmNuUWdleUJsZUhSbGJtUWdmU0JtY205dElDY3VMaTkxZEdsc2N5ZGNibHh1WTI5dWMzUWdabWx1WkVWdWRHVnlTMlY1Vkhsd1pTQTlJR1oxYm1OMGFXOXVJQ2hyWlhrNklITjBjbWx1WnlrNklITjBjbWx1WnlCN1hHNGdJR052Ym5OMElHdGxlWE1nUFNCYkoyUmxabUYxYkhRbkxDQW5aMjhuTENBbmJtVjRkQ2NzSUNkelpXRnlZMmduTENBbmMyVnVaQ2RkWEc0Z0lHbG1JQ2hyWlhsekxtbHVaR1Y0VDJZb2EyVjVLU0ErSUMweEtTQjdYRzRnSUNBZ2NtVjBkWEp1SUd0bGVWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlBblpHOXVaU2RjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2UxeHVJQ0J0WlhSb2IyUnpPaUI3WEc0Z0lDQWdabTlqZFhNZ0tDa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a1pXd2dKaVlnZEdocGN5NGtaV3d1Wm05amRYTW9LVnh1SUNBZ0lIMHNYRzRnSUNBZ1lteDFjaUFvS1NCN1hHNGdJQ0FnSUNCMGFHbHpMaVJsYkNBbUppQjBhR2x6TGlSbGJDNWliSFZ5S0NsY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnYzJWMFUyVnNaV04wYVc5dVVtRnVaMlVnS0hOMFlYSjBPaUJ1ZFcxaVpYSXNJR1Z1WkRvZ2JuVnRZbVZ5S1NCN1hHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxpUmxiQzV6WlhSVFpXeGxZM1JwYjI1U1lXNW5aU2h6ZEdGeWRDd2daVzVrS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQwOVBTQW5aR1YyWld4dmNHMWxiblFuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0dCYmRuVmxMWEpsYm1SbGNsMGdjMlYwVTJWc1pXTjBhVzl1VW1GdVoyVWdhWE1nYm05MElITjFjSEJ2Y25SbFpDNWdLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJR2RsZEZObGJHVmpkR2x2YmxKaGJtZGxJQ2hqWVd4c1ltRmphem9nUm5WdVkzUnBiMjRwSUh0Y2JpQWdJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElITmxiR1ZqZEdsdmJpQTlJSGRwYm1SdmR5NW5aWFJUWld4bFkzUnBiMjRvS1Z4dUlDQWdJQ0FnSUNCamIyNXpkQ0J6ZEhJZ1BTQnpaV3hsWTNScGIyNHVkRzlUZEhKcGJtY29LVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpaV3hsWTNScGIyNVRkR0Z5ZENBOUlIUm9hWE11SkdWc0xuWmhiSFZsTG1sdVpHVjRUMllvYzNSeUtWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelpXeGxZM1JwYjI1RmJtUWdQU0J6Wld4bFkzUnBiMjVUZEdGeWRDQTlQVDBnTFRFZ1B5QnpaV3hsWTNScGIyNVRkR0Z5ZENBNklITmxiR1ZqZEdsdmJsTjBZWEowSUNzZ2MzUnlMbXhsYm1kMGFGeHVJQ0FnSUNBZ0lDQmpZV3hzWW1GamF5QW1KaUJqWVd4c1ltRmpheWg3WEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaV04wYVc5dVUzUmhjblFzWEc0Z0lDQWdJQ0FnSUNBZ2MyVnNaV04wYVc5dVJXNWtYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JqWVhSamFDQW9aU2tnZTF4dUlDQWdJQ0FnSUNCallXeHNZbUZqYXlBbUppQmpZV3hzWW1GamF5aHVaWGNnUlhKeWIzSW9KMXQyZFdVdGNtVnVaR1Z5WFNCblpYUlRaV3hsWTNScGIyNGdhWE1nYm05MElITjFjSEJ2Y25SbFpDNG5LU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdaMlYwUldScGRGTmxiR1ZqZEdsdmJsSmhibWRsSUNoallXeHNZbUZqYXpvZ1JuVnVZM1JwYjI0cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbWRsZEZObGJHVmpkR2x2YmxKaGJtZGxLR05oYkd4aVlXTnJLVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZMeUJ6ZFhCd2IzSjBJR1Z1ZEdWeUlHdGxlU0JsZG1WdWRGeHVJQ0FnSUdOeVpXRjBaVXRsZVdKdllYSmtSWFpsYm5RZ0tHVjJaVzUwY3pvZ2UzMHBJSHRjYmlBZ0lDQWdJR052Ym5OMElHTjFjM1J2YlV0bGVWUjVjR1VnUFNCMGFHbHpMbkpsZEhWeWJrdGxlVlI1Y0dWY2JpQWdJQ0FnSUdOdmJuTjBJSE5sYkdZZ1BTQjBhR2x6WEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVmWlhabGJuUnpXeWR5WlhSMWNtNG5YU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JyWlhsaWIyRnlaRVYyWlc1MGN5QTlJSHRjYmlBZ0lDQWdJQ0FnSUNBbmEyVjVkWEFuT2lCbWRXNWpkR2x2YmlBb1pYWXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOdlpHVWdQU0JsZGk1clpYbERiMlJsWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCclpYa2dQU0JsZGk1clpYbGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpiMlJsSUQwOVBTQXhNeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXdGxlU0I4ZkNCclpYa3VkRzlNYjNkbGNrTmhjMlVvS1NBOVBUMGdKM1JoWWljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxkaTVyWlhrZ1BTQW5ibVY0ZENkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQnlhV2RvZEV0bGVWUjVjR1VnUFNCbWFXNWtSVzUwWlhKTFpYbFVlWEJsS0dOMWMzUnZiVXRsZVZSNWNHVXBYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjJMbkpsZEhWeWJrdGxlVlI1Y0dVZ1BTQnlhV2RvZEV0bGVWUjVjR1ZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdaWFl1ZG1Gc2RXVWdQU0JsZGk1MFlYSm5aWFF1ZG1Gc2RXVmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTRrWlcxcGRDZ25jbVYwZFhKdUp5d2daWFlwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHVjJaVzUwY3lBOUlHVjRkR1Z1WkNobGRtVnVkSE1zSUd0bGVXSnZZWEprUlhabGJuUnpLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlHVjJaVzUwYzF4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMaUFnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVmNiaUFxSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVFnYkdsdGFYUmhkR2x2Ym5OY2JpQXFJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNXBiWEJ2Y25RZ2UxeHVJQ0JuWlhSUVlYSmxiblJUWTNKdmJHeGxjbHh1ZlNCbWNtOXRJQ2N1TGk5MWRHbHNjeWRjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQmtaWE4wY205NVpXUWdLQ2tnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTVmYzNScFkydDVRV1JrWldRcElIc2djbVYwZFhKdUlIMWNiaUFnSUNCamIyNXpkQ0J6WTNKdmJHeGxjaUE5SUdkbGRGQmhjbVZ1ZEZOamNtOXNiR1Z5S0hSb2FYTXBYRzRnSUNBZ2FXWWdLQ0Z6WTNKdmJHeGxjaWtnZXlCeVpYUjFjbTRnZlZ4dUlDQWdJR1JsYkdWMFpTQnpZM0p2Ykd4bGNpNWZjM1JwWTJ0NVEyaHBiR1J5Wlc1YmRHaHBjeTVmZFdsa1hWeHVJQ0I5TEZ4dVhHNGdJRzFsZEdodlpITTZJSHRjYmlBZ0lDQmZZV1JrVTNScFkydDVJQ2dwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR1ZzSUQwZ2RHaHBjeTRrWld4Y2JpQWdJQ0FnSUdsbUlDZ2haV3dnZkh3Z1pXd3VibTlrWlZSNWNHVWdQVDA5SURFcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEMDlQU0FuWkdWMlpXeHZjRzFsYm5RbktTQjdYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGdXM1oxWlMxeVpXNWtaWEpkSUNSbGJDQmtiMlZ6YmlkMElHVjRhWE4wSUhSdklHRmtaQ0J6ZEdsamEza3VZQ2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1ZzTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM04wYVdOcmVTY3BYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM0JzWVdObGFHOXNaR1Z5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCc1lXTmxhRzlzWkdWeUlEMGdaV3d1WTJ4dmJtVk9iMlJsS0hSeWRXVXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjBhR2x6TGw5d2JHRmpaV2h2YkdSbGNpNXpkSGxzWlM1a2FYTndiR0Y1SUQwZ0oySnNiMk5ySjF4dUlDQWdJQ0FnZEdocGN5NWZjR3hoWTJWb2IyeGtaWEl1YzNSNWJHVXVkMmxrZEdnZ1BTQjBhR2x6TGlSbGJDNXZabVp6WlhSWGFXUjBhQ0FySUNkd2VDZGNiaUFnSUNBZ0lIUm9hWE11WDNCc1lXTmxhRzlzWkdWeUxuTjBlV3hsTG1obGFXZG9kQ0E5SUhSb2FYTXVKR1ZzTG05bVpuTmxkRWhsYVdkb2RDQXJJQ2R3ZUNkY2JpQWdJQ0FnSUdWc0xuQmhjbVZ1ZEU1dlpHVXVhVzV6WlhKMFFtVm1iM0psS0hSb2FYTXVYM0JzWVdObGFHOXNaR1Z5TENCMGFHbHpMaVJsYkNsY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDNKbGJXOTJaVk4wYVdOcmVTQW9LU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQmxiQ0E5SUhSb2FYTXVKR1ZzWEc0Z0lDQWdJQ0JwWmlBb0lXVnNJSHg4SUdWc0xtNXZaR1ZVZVhCbElEMDlQU0F4S1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBOVBUMGdKMlJsZG1Wc2IzQnRaVzUwSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb1lGdDJkV1V0Y21WdVpHVnlYU0FrWld3Z1pHOWxjMjRuZENCbGVHbHpkQ0IwYnlCeVpXMXZkbVVnYzNScFkydDVMbUFwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYkM1amJHRnpjMHhwYzNRdWNtVnRiM1psS0NkemRHbGphM2tuS1Z4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11WDNCc1lXTmxhRzlzWkdWeUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzQnNZV05sYUc5c1pHVnlMbkJoY21WdWRFNXZaR1V1Y21WdGIzWmxRMmhwYkdRb2RHaHBjeTVmY0d4aFkyVm9iMnhrWlhJcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMGFHbHpMbDl3YkdGalpXaHZiR1JsY2lBOUlHNTFiR3hjYmlBZ0lDQjlYRzRnSUgxY2JuMWNiaUlzSWk4cVhHNGdLaUJNYVdObGJuTmxaQ0IwYnlCMGFHVWdRWEJoWTJobElGTnZablIzWVhKbElFWnZkVzVrWVhScGIyNGdLRUZUUmlrZ2RXNWtaWElnYjI1bFhHNGdLaUJ2Y2lCdGIzSmxJR052Ym5SeWFXSjFkRzl5SUd4cFkyVnVjMlVnWVdkeVpXVnRaVzUwY3k0Z0lGTmxaU0IwYUdVZ1RrOVVTVU5GSUdacGJHVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIZHBkR2dnZEdocGN5QjNiM0pySUdadmNpQmhaR1JwZEdsdmJtRnNJR2x1Wm05eWJXRjBhVzl1WEc0Z0tpQnlaV2RoY21ScGJtY2dZMjl3ZVhKcFoyaDBJRzkzYm1WeWMyaHBjQzRnSUZSb1pTQkJVMFlnYkdsalpXNXpaWE1nZEdocGN5Qm1hV3hsWEc0Z0tpQjBieUI1YjNVZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsWEc0Z0tpQmNJa3hwWTJWdWMyVmNJaWs3SUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJWY2JpQXFJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVJQ0JaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5eGNiaUFxSUhOdlpuUjNZWEpsSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVYRzRnS2lCY0lrRlRJRWxUWENJZ1FrRlRTVk1zSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dWeHVJQ29nUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNGdJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobFhHNGdLaUJ6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtJR3hwYldsMFlYUnBiMjV6WEc0Z0tpQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dWFXMXdiM0owSUdKaGMyVWdabkp2YlNBbkxpOWlZWE5sSjF4dWFXMXdiM0owSUhOMGVXeGxJR1p5YjIwZ0p5NHZjM1I1YkdVblhHNXBiWEJ2Y25RZ2FXNXdkWFJEYjIxdGIyNGdabkp2YlNBbkxpOXBibkIxZEMxamIyMXRiMjRuWEc1cGJYQnZjblFnYzNScFkydDVJR1p5YjIwZ0p5NHZjM1JwWTJ0NUoxeHVYRzVsZUhCdmNuUWdlMXh1SUNCaVlYTmxMRnh1SUNCemRIbHNaU3hjYmlBZ2FXNXdkWFJEYjIxdGIyNHNYRzRnSUhOMGFXTnJlVnh1ZlZ4dUlpd2lMeXBjYmlBcUlFeHBZMlZ1YzJWa0lIUnZJSFJvWlNCQmNHRmphR1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2YmlBb1FWTkdLU0IxYm1SbGNpQnZibVZjYmlBcUlHOXlJRzF2Y21VZ1kyOXVkSEpwWW5WMGIzSWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUnpMaUFnVTJWbElIUm9aU0JPVDFSSlEwVWdabWxzWlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZDJsMGFDQjBhR2x6SUhkdmNtc2dabTl5SUdGa1pHbDBhVzl1WVd3Z2FXNW1iM0p0WVhScGIyNWNiaUFxSUhKbFoyRnlaR2x1WnlCamIzQjVjbWxuYUhRZ2IzZHVaWEp6YUdsd0xpQWdWR2hsSUVGVFJpQnNhV05sYm5ObGN5QjBhR2x6SUdacGJHVmNiaUFxSUhSdklIbHZkU0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVmNiaUFxSUZ3aVRHbGpaVzV6WlZ3aUtUc2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaVnh1SUNvZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM0Z0lGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTEZ4dUlDb2djMjltZEhkaGNtVWdaR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc1Y2JpQXFJRndpUVZNZ1NWTmNJaUJDUVZOSlV5d2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaWEc0Z0tpQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGlBZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1ZjYmlBcUlITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1RZ2JHbHRhWFJoZEdsdmJuTmNiaUFxSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVwYlhCdmNuUWdkMlZsZUNCbWNtOXRJQ2N1TDNkbFpYZ25YRzVwYlhCdmNuUWdLaUJoY3lCamIzSmxJR1p5YjIwZ0p5NHVMMk52Y21VblhHNWNibWx0Y0c5eWRDQjdJR2x1Y0hWMFEyOXRiVzl1SUgwZ1puSnZiU0FuTGk0dmJXbDRhVzV6SjF4dVhHNTNhVzVrYjNjdVoyeHZZbUZzSUQwZ2QybHVaRzkzWEc1M2FXNWtiM2N1ZDJWbGVDQTlJSGRsWlhoY2JseHVkMlZsZUM1ZmMzUjViR1ZOWVhBZ1BTQjdmVnh1WEc0N0lGc25aMlYwUTI5dGNHOXVaVzUwVTNSNWJHVW5MRnh1SUNBblpYaDBjbUZqZEVOdmJYQnZibVZ1ZEZOMGVXeGxKeXhjYmlBZ0oyTnlaV0YwWlVWMlpXNTBUV0Z3Snl4Y2JpQWdKM1J5YVcxVVpYaDBWazV2WkdWekoxMHVabTl5UldGamFDaG1kVzVqZEdsdmJpQW9iV1YwYUc5a0tTQjdYRzRnSUNBZ2QyVmxlRnR0WlhSb2IyUmRJRDBnWTI5eVpWdHRaWFJvYjJSZExtSnBibVFvZDJWbGVDbGNiaUFnZlNsY2JseHVkMlZsZUM1dGFYaHBibk1nUFNCN1hHNGdJR2x1Y0hWMFEyOXRiVzl1WEc1OVhHNGlMQ0l2S2x4dUlDb2dUR2xqWlc1elpXUWdkRzhnZEdobElFRndZV05vWlNCVGIyWjBkMkZ5WlNCR2IzVnVaR0YwYVc5dUlDaEJVMFlwSUhWdVpHVnlJRzl1WlZ4dUlDb2diM0lnYlc5eVpTQmpiMjUwY21saWRYUnZjaUJzYVdObGJuTmxJR0ZuY21WbGJXVnVkSE11SUNCVFpXVWdkR2hsSUU1UFZFbERSU0JtYVd4bFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCM2FYUm9JSFJvYVhNZ2QyOXlheUJtYjNJZ1lXUmthWFJwYjI1aGJDQnBibVp2Y20xaGRHbHZibHh1SUNvZ2NtVm5ZWEprYVc1bklHTnZjSGx5YVdkb2RDQnZkMjVsY25Ob2FYQXVJQ0JVYUdVZ1FWTkdJR3hwWTJWdWMyVnpJSFJvYVhNZ1ptbHNaVnh1SUNvZ2RHOGdlVzkxSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aVnh1SUNvZ1hDSk1hV05sYm5ObFhDSXBPeUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sWEc0Z0tpQjNhWFJvSUhSb1pTQk1hV05sYm5ObExpQWdXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc1hHNGdLaUJ6YjJaMGQyRnlaU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJseHVJQ29nWENKQlV5QkpVMXdpSUVKQlUwbFRMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxsY2JpQXFJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdUlDQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlZ4dUlDb2djM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpDQnNhVzFwZEdGMGFXOXVjMXh1SUNvZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYm1sdGNHOXlkQ0FuTGk0dmMzUjViR1Z6TDNKbGMyVjBMbU56Y3lkY2JtbHRjRzl5ZENBbkxpNHZjM1I1YkdWekwySmhjMlV1WTNOekoxeHVYRzVwYlhCdmNuUWdKeTR1TDJ4cFlpOW5aWE4wZFhKbEoxeHVYRzVwYlhCdmNuUWdKeTR1THk0dUx5NHVMM05vWVhKbFpDOWhjbkpoZVVaeWIyMG5YRzVwYlhCdmNuUWdKeTR1THk0dUx5NHVMM05vWVhKbFpDOXZZbXBsWTNSQmMzTnBaMjRuWEc1cGJYQnZjblFnSnk0dUx5NHVMeTR1TDNOb1lYSmxaQzl2WW1wbFkzUlRaWFJRY205MGIzUjVjR1ZQWmlkY2JseHVhVzF3YjNKMElDZGpiM0psTFdwekwyMXZaSFZzWlhNdlpYTTJMbTlpYW1WamRDNTBieTF6ZEhKcGJtY25YRzVwYlhCdmNuUWdKMk52Y21VdGFuTXZiVzlrZFd4bGN5OWxjell1YzNSeWFXNW5MbWwwWlhKaGRHOXlKMXh1YVcxd2IzSjBJQ2RqYjNKbExXcHpMMjF2WkhWc1pYTXZkMlZpTG1SdmJTNXBkR1Z5WVdKc1pTZGNibWx0Y0c5eWRDQW5ZMjl5WlMxcWN5OXRiMlIxYkdWekwyVnpOaTV3Y205dGFYTmxKMXh1WEc1cGJYQnZjblFnSnk0dloyeHZZbUZzSjF4dVhHNWxlSEJ2Y25RZ1puVnVZM1JwYjI0Z2MyVjBWblZsSUNoMmRXVXBJSHRjYmlBZ2FXWWdLQ0YyZFdVcElIdGNiaUFnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvSjF0V2RXVWdVbVZ1WkdWeVhTQldkV1VnYm05MElHWnZkVzVrTGlCUWJHVmhjMlVnYldGclpTQnpkWEpsSUhaMVpTQXlMbmdnY25WdWRHbHRaU0JwY3lCcGJYQnZjblJsWkM0bktWeHVJQ0I5WEc0Z0lHZHNiMkpoYkM1M1pXVjRMbDlmZG5WbFgxOGdQU0IyZFdWY2JpQWdZMjl1YzI5c1pTNXNiMmNvWUZ0V2RXVWdVbVZ1WkdWeVhTQnBibk4wWVd4c0lGWjFaU0FrZTNaMVpTNTJaWEp6YVc5dWZTNWdLVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCM1pXVjRYRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JseHVhVzF3YjNKMElHTnZibVpwWnlCbWNtOXRJQ2N1TGk5amIyNW1hV2NuWEc1cGJYQnZjblFnZXlCamNtVmhkR1ZGZG1WdWRDd2djM1Z3Y0c5eWRITlFZWE56YVhabElIMGdabkp2YlNBbkxpNHZkWFJwYkhNblhHNXBiWEJ2Y25RZ2V5QmhjSEJzZVVadWN5QjlJR1p5YjIwZ0p5NHVMMk52Y21VblhHNWNibU52Ym5OMElHZGxjM1IxY21WRmRtVnVkSE1nUFNCamIyNW1hV2N1WjJWemRIVnlaVVYyWlc1MGMxeHVZMjl1YzNRZ2JtRjBhWFpsUlhabGJuUnpJRDBnV3lkamJHbGpheWNzSUNkMGIzVmphSE4wWVhKMEp5d2dKM1J2ZFdOb2JXOTJaU2NzSUNkMGIzVmphR1Z1WkNkZFhHNWpiMjV6ZENCdVpXVmtVR0Z6YzJsMlpTQTlJRnNuZEc5MVkyaHRiM1psSjExY2JseHVZMjl1YzNRZ1pYWmxiblJ6SUQwZ1oyVnpkSFZ5WlVWMlpXNTBjeTVqYjI1allYUW9ibUYwYVhabFJYWmxiblJ6S1Z4dVhHNHZLaXBjYmlBcUlHbG1JR1ZzSUdseklHRWdZRHhoUG1BZ1pXeGxiV1Z1ZEM1Y2JpQXFJRUJ3WVhKaGJTQjdTRlJOVEVWc1pXMWxiblI5SUdWc1hHNGdLaTljYm1aMWJtTjBhVzl1SUdselFVNXZaR1VnS0dWc0tTQjdYRzRnSUhKbGRIVnliaUJsYkM1MFlXZE9ZVzFsTG5SdlRHOTNaWEpEWVhObEtDa2dQVDA5SUNkaEoxeHVmVnh1WEc1bWRXNWpkR2x2YmlCcGMwbHVRVTV2WkdVZ0tHVnNLU0I3WEc0Z0lHeGxkQ0J3WVhKbGJuUWdQU0JsYkM1d1lYSmxiblJGYkdWdFpXNTBYRzRnSUhkb2FXeGxJQ2h3WVhKbGJuUWdKaVlnY0dGeVpXNTBJQ0U5UFNCa2IyTjFiV1Z1ZEM1aWIyUjVLU0I3WEc0Z0lDQWdhV1lnS0hCaGNtVnVkQzUwWVdkT1lXMWxJRDA5UFNBblFTY3BJSHNnY21WMGRYSnVJSFJ5ZFdVZ2ZWeHVJQ0FnSUhCaGNtVnVkQ0E5SUhCaGNtVnVkQzV3WVhKbGJuUkZiR1Z0Wlc1MFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUdaaGJITmxYRzU5WEc1Y2JpOHFLbHh1SUNvZ1oyVjBJR3hwYzNSbGJtVnljeUJtY205dElHOXVJR052Ym1acFp5QmhibVFnZGkxdmJpQmlhVzVrYVc1bkxseHVJQ29nZGkxdmJpQmlhVzVrYVc1bklHaGhjeUJoSUhCeWFXOXlhWFI1SUc5MlpYSWdiMjRnWTI5dVptbG5MbHh1SUNvZ1FIQmhjbUZ0SUh0MmJtOWtaWDBnZG01dlpHVmNiaUFxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JsZG5RNklHVjJaVzUwSUc1aGJXVXVYRzRnS2k5Y2JtWjFibU4wYVc5dUlHZGxkRXhwYzNSbGJtVnljeUFvZG01dlpHVXNJR1YyZENrZ2UxeHVJQ0JqYjI1emRDQm9ZVzVrYkdWeWN5QTlJRnRkWEc0Z0lIZG9hV3hsSUNoMmJtOWtaU2tnZTF4dUlDQWdJR2xtSUNoMmJtOWtaUzVrWVhSaElDWW1JSFp1YjJSbExtUmhkR0V1YjI0cElIdGNiaUFnSUNBZ0lHTnZibk4wSUdoaGJtUnNaWElnUFNCMmJtOWtaUzVrWVhSaExtOXVXMlYyZEYxY2JpQWdJQ0FnSUdoaGJtUnNaWElnSmlZZ2FHRnVaR3hsY25NdWNIVnphQ2hvWVc1a2JHVnlLVnh1SUNBZ0lIMWNiaUFnSUNCcFppQW9kbTV2WkdVdVkyOXRjRzl1Wlc1MFQzQjBhVzl1Y3lBbUppQjJibTlrWlM1amIyMXdiMjVsYm5SUGNIUnBiMjV6TG14cGMzUmxibVZ5Y3lrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYUdGdVpHeGxjaUE5SUhadWIyUmxMbU52YlhCdmJtVnVkRTl3ZEdsdmJuTXViR2x6ZEdWdVpYSnpXMlYyZEYxY2JpQWdJQ0FnSUdoaGJtUnNaWElnSmlZZ2FHRnVaR3hsY25NdWNIVnphQ2hvWVc1a2JHVnlLVnh1SUNBZ0lIMWNiaUFnSUNCMmJtOWtaU0E5SUhadWIyUmxMbkJoY21WdWRGeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCb1lXNWtiR1Z5YzF4dWZWeHVYRzVzWlhRZ1gybHVhWFJsWkNBOUlHWmhiSE5sWEc1bWRXNWpkR2x2YmlCZmFXNXBkQ0FvWkc5aktTQjdYRzRnSUdsbUlDaGZhVzVwZEdWa0tTQjdYRzRnSUNBZ2NtVjBkWEp1WEc0Z0lIMWNiaUFnYVdZZ0tDRmtiMk1wSUh0Y2JpQWdJQ0J5WlhSMWNtNWNiaUFnZlZ4dUlDQmZhVzVwZEdWa0lEMGdkSEoxWlZ4dUlDQmpiMjV6ZENCZmMzQWdQU0J6ZFhCd2IzSjBjMUJoYzNOcGRtVW9LVnh1SUNCbGRtVnVkSE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvWlhaMEtTQjdYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dkWE5sSUdOaGNIUjFjbVVnWm05eUlHTnNhV05ySUdoaGJtUnNhVzVuTENCMGFHVnlaV1p2Y21VZ2RHaGxjbVVuY3lCaElHTm9ZVzVqWlNCMGJ5Qm9ZVzVrYkdWY2JpQWdJQ0FnS2lCcGRDQmlaV1p2Y21VZ1lXNTVJRzkwYUdWeUlHeHBjM1JsYm1WeWN5QmlhVzVrYVc1bklHOXVJR1J2WTNWdFpXNTBJRzl5SUdSdlkzVnRaVzUwTG1KdlpIa3VYRzRnSUNBZ0lDb3ZYRzRnSUNBZ1kyOXVjM1FnYjNCMGFXOXVJRDFjYmlBZ0lDQWdJR1YyZENBOVBUMGdKMk5zYVdOckoxeHVJQ0FnSUNBZ1B5QjBjblZsSURvZ2JtVmxaRkJoYzNOcGRtVXVhVzVrWlhoUFppaGxkblFwSUQ0Z0xURWdKaVlnWDNOd1hHNGdJQ0FnSUNBL0lIc2djR0Z6YzJsMlpUb2dkSEoxWlNCOUlEb2dabUZzYzJWY2JpQWdJQ0JrYjJNdVlXUmtSWFpsYm5STWFYTjBaVzVsY2lobGRuUXNJR1oxYm1OMGFXOXVJQ2hsS1NCN1hHNGdJQ0FnSUNCc1pYUWdaV3dnUFNCbExuUmhjbWRsZEZ4dUlDQWdJQ0FnYkdWMElIWnRJRDBnWld3dVgxOTJkV1ZmWDF4dUlDQWdJQ0FnZDJocGJHVWdLQ0YyYlNBbUppQmxiQ0FtSmlCbGJDQWhQVDBnWkc5amRXMWxiblF1WW05a2VTa2dlMXh1SUNBZ0lDQWdJQ0JsYkNBOUlHVnNMbkJoY21WdWRFVnNaVzFsYm5SY2JpQWdJQ0FnSUNBZ2RtMGdQU0JsYkNBbUppQmxiQzVmWDNaMVpWOWZYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvSVhadEtTQjdJQ0F2THlCdWIzUWdZU0IyZFdVZ1kyOXRjRzl1Wlc1MExseHVJQ0FnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUd4bGRDQmthWE53YjNObFpDQTlJR1poYkhObFhHNGdJQ0FnSUNCamIyNXpkQ0JsZG5ST1lXMWxJRDBnWlM1MGVYQmxYRzVjYmlBZ0lDQWdJR2xtSUNobGRuUk9ZVzFsSUQwOVBTQW5kR0Z3SnlBbUppQmxMbDltYjNJZ0lUMDlJQ2QzWldWNEp5a2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdkMmhwYkdVZ0tIWnRLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFp1YjJSbElEMGdkbTB1WDNadWIyUmxJSHg4SUhadExpUjJibTlrWlZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0JsYkcwZ1BTQjJiUzRrWld4Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYjI1eklEMGdaMlYwVEdsemRHVnVaWEp6S0hadWIyUmxMQ0JsZG5ST1lXMWxJRDA5UFNBbmRHRndKeUEvSUNkamJHbGpheWNnT2lCbGRuUk9ZVzFsS1Z4dUlDQWdJQ0FnSUNCamIyNXpkQ0JzWlc0Z1BTQnZibk1nSmlZZ2IyNXpMbXhsYm1kMGFGeHVYRzRnSUNBZ0lDQWdJR2xtSUNoc1pXNGdQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdhV1lnS0dWMmRFNWhiV1VnSVQwOUlDZGpiR2xqYXljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2JHVnVPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXVjM1FnYUdGdVpHeGxjaUE5SUc5dWMxdHBYVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCdVpYZEZkblFnUFNCbGRuUk9ZVzFsSUQwOVBTQW5kR0Z3SjF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUQ4Z1kzSmxZWFJsUlhabGJuUW9aV3dzSUNkamJHbGpheWNwWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnT2lCbFhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGQwVjJkQzVmZEhKcFoyZGxjbVZrSUQwZ2V5QjBZWEpuWlhRNklHVnNiU0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR0Z3Y0d4NVJtNXpLR2hoYm1Sc1pYSXVabTV6TENCdVpYZEZkblFwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lHVXVYM1J5YVdkblpYSmxaQ0E5SUhzZ2RHRnlaMlYwT2lCbGJHMGdmVnh1SUNBZ0lDQWdJQ0FnSUdScGMzQnZjMlZrSUQwZ2RISjFaVnh1SUNBZ0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLR2x6UVU1dlpHVW9aV3h0S1Z4dUlDQWdJQ0FnSUNBZ0lDWW1JQ2hsZG5ST1lXMWxJRDA5UFNBblkyeHBZMnNuSUh4OElHVjJkRTVoYldVZ1BUMDlJQ2QwWVhBbktTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJR2h5WldZZ1BTQmxiRzB1WjJWMFFYUjBjbWxpZFhSbEtDZG9jbVZtSnlsY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCMmIybGtTSEpsWmxKbFp5QTlJQzllWEZ4ekttcGhkbUZ6WTNKcGNIUmNYSE1xT2x4Y2N5cDJiMmxrWEZ4ektpZy9PbHhjS0Z4Y2N5b3dYRnh6S2x4Y0tYd3dLVnhjY3lvN1AxeGNjeW9rTDF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUhCeVpYWmxiblFnUFNCbGJHMHVaMlYwUVhSMGNtbGlkWFJsS0Nkd2NtVjJaVzUwSnlsY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZDJsdVpHOTNMbDl6YUc5MWJHUmZhVzUwWlhKalpYQjBYMkZmYW5WdGNDQW1KaUIzYVc1a2IzY3VYM05vYjNWc1pGOXBiblJsY21ObGNIUmZZVjlxZFcxd0tHVnNiU2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdVdVgzUnlhV2RuWlhKbFpDQnphRzkxYkdRZ2JtOTBJR0psSUhSeWRXVWdjMmx1WTJVZ2QyVWdiR1ZtZENCMGFHVWdhVzUwWlhKalpYQjBaWElnZEc4Z2FHRnVaR3hsSUhSb1pTQmxkbVZ1ZEM1Y2JpQWdJQ0FnSUNBZ0lDQWdJR1V1WDNSeWFXZG5aWEpsWkNBOUlHWmhiSE5sWEc0Z0lDQWdJQ0FnSUNBZ0lDQmthWE53YjNObFpDQTlJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnWld4elpTQnBaaUFvYUhKbFppNXRZWFJqYUNoMmIybGtTSEpsWmxKbFp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUh4OElIQnlaWFpsYm5RZ1BUMDlJQ2NuSUh4OElIQnlaWFpsYm5RZ1BUMDlJQ2QwY25WbEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ1pTNWZkSEpwWjJkbGNtVmtJRDBnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdJQ0FnSUdVdWNISmxkbVZ1ZEVSbFptRjFiSFFvS1Z4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdVdVgzUnlhV2RuWlhKbFpDQTlJSHNnZEdGeVoyVjBPaUJsYkcwZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHOXpaV1FnUFNCMGNuVmxJQzh2SUdoaGJtUnNaV1FnWW5rZ1pHVm1ZWFZzZENCaVpXaGhkbWx2Y2lCbWIzSWdZMnhwWTJ0cGJtY2diMjRnWVNCbGJHVnRaVzUwTGx4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDQWdLaUJKWmlCMGFHVWdZMnhwWTJzZ2FHRnVaR3hsY2lCcGN5QmlhVzVrYVc1bklHOXVJR0VnWld4bGJXVnVkQ0JwYm5OcFpHVWdZU0E4WVQ0Z1pXeGxiV1Z1ZEN4Y2JpQWdJQ0FnSUNBZ0lDb2dkR2hsYmlCemFHOTFiR1FnY0hKbGRtVnVkQ0JrWldaaGRXeDBMbHh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2FXWWdLR1JwYzNCdmMyVmtJQ1ltSUdWMmRFNWhiV1VnUFQwOUlDZGpiR2xqYXljZ0ppWWdhWE5KYmtGT2IyUmxLR1ZzYlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0JsTGw5MGNtbG5aMlZ5WldRZ1BTQjdJSFJoY21kbGREb2daV3h0SUgxY2JpQWdJQ0FnSUNBZ0lDQmxMbkJ5WlhabGJuUkVaV1poZFd4MEtDbGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdsbUlDaGthWE53YjNObFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhadElEMGdkbTB1SkhCaGNtVnVkRnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNJRzl3ZEdsdmJpbGNiaUFnZlNsY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdhVzVwZENBb0tTQjdYRzRnSUY5cGJtbDBLR1J2WTNWdFpXNTBLVnh1ZlZ4dUlpd2lMeXBjYmlBcUlFeHBZMlZ1YzJWa0lIUnZJSFJvWlNCQmNHRmphR1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2YmlBb1FWTkdLU0IxYm1SbGNpQnZibVZjYmlBcUlHOXlJRzF2Y21VZ1kyOXVkSEpwWW5WMGIzSWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUnpMaUFnVTJWbElIUm9aU0JPVDFSSlEwVWdabWxzWlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZDJsMGFDQjBhR2x6SUhkdmNtc2dabTl5SUdGa1pHbDBhVzl1WVd3Z2FXNW1iM0p0WVhScGIyNWNiaUFxSUhKbFoyRnlaR2x1WnlCamIzQjVjbWxuYUhRZ2IzZHVaWEp6YUdsd0xpQWdWR2hsSUVGVFJpQnNhV05sYm5ObGN5QjBhR2x6SUdacGJHVmNiaUFxSUhSdklIbHZkU0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVmNiaUFxSUZ3aVRHbGpaVzV6WlZ3aUtUc2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaVnh1SUNvZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM0Z0lGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTEZ4dUlDb2djMjltZEhkaGNtVWdaR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc1Y2JpQXFJRndpUVZNZ1NWTmNJaUJDUVZOSlV5d2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaWEc0Z0tpQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGlBZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1ZjYmlBcUlITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1RZ2JHbHRhWFJoZEdsdmJuTmNiaUFxSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVwYlhCdmNuUWdkMlZsZUNCbWNtOXRJQ2N1TDJWdWRpZGNibWx0Y0c5eWRDQjdJSE5sZEZaMVpTQjlJR1p5YjIwZ0p5NHZaVzUySjF4dWFXMXdiM0owSUhzZ1ltRnpaU3dnYzNSNWJHVXNJSE4wYVdOcmVTQjlJR1p5YjIwZ0p5NHZiV2w0YVc1ekoxeHVYRzVwYlhCdmNuUWdhVzVwZEVWMlpXNTBUV2R5SUdaeWIyMGdKeTR2Wlc1MkwyVjJaVzUwTFcxaGJtRm5aWEluWEc1Y2JpOHFLbHh1SUNvZ2FXNXBkQ0IzWldWNExseHVJQ29nUUhCaGNtRnRJQ0I3Vm5WbEpESjlJRloxWlRvZ1ZuVmxJRU52Ym5OMGNuVmpkRzl5TGx4dUlDb2dRSEJoY21GdElDQjdiMkpxWldOMGZTQnZjSFJwYjI1ek9pQmxlSFJsYm1RZ2QyVmxlQ0J3YkhWbmFXNXpMbHh1SUNvZ0lDQWdJQ0FnSUNBdElHTnZiWEJ2Ym1WdWRITXVYRzRnS2lBZ0lDQWdJQ0FnSUMwZ2JXOWtkV3hsY3k1Y2JpQXFMMXh1YkdWMElGOXBibWwwWldRZ1BTQm1ZV3h6WlZ4dVpuVnVZM1JwYjI0Z2FXNXBkQ0FvVm5WbEx5b3NJRzl3ZEdsdmJuTWdQU0I3ZlNvdktTQjdYRzRnSUdsbUlDaGZhVzVwZEdWa0tTQjdJSEpsZEhWeWJpQjlYRzRnSUY5cGJtbDBaV1FnUFNCMGNuVmxYRzVjYmlBZ2MyVjBWblZsS0ZaMVpTbGNibHh1SUNCV2RXVXVjSEp2ZEc5MGVYQmxMaVJuWlhSRGIyNW1hV2NnUFNBb0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkYlZuVmxJRkpsYm1SbGNsMGdYQ0owYUdsekxpUm5aWFJEYjI1bWFXZGNJaUJwY3lCa1pYQnlaV05oZEdWa0xDQndiR1ZoYzJVZ2RYTmxJRndpZDJWbGVDNWpiMjVtYVdkY0lpQnBibk4wWldGa0xpY3BYRzRnSUNBZ2NtVjBkWEp1SUhkbFpYZ3VZMjl1Wm1sblhHNGdJSDFjYmx4dUlDQmpiMjV6ZENCb2RHMXNVbVZuWlhnZ1BTQXZYbWgwYld3NkwybGNiaUFnVm5WbExtTnZibVpwWnk1cGMxSmxjMlZ5ZG1Wa1ZHRm5JRDBnZEdGbklEMCtJR2gwYld4U1pXZGxlQzUwWlhOMEtIUmhaeWxjYmlBZ1ZuVmxMbU52Ym1acFp5NXdZWEp6WlZCc1lYUm1iM0p0VkdGblRtRnRaU0E5SUhSaFp5QTlQaUIwWVdjdWNtVndiR0ZqWlNob2RHMXNVbVZuWlhnc0lDY25LVnh1WEc0Z0lHWjFibU4wYVc5dUlHbHpWMlZsZUZSaFp5QW9kR0ZuS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFI1Y0dWdlppQjNaV1Y0TGw5amIyMXdiMjVsYm5SelczUmhaMTBnSVQwOUlDZDFibVJsWm1sdVpXUW5YRzRnSUgxY2JpQWdZMjl1YzNRZ2IyeGtSMlYwVkdGblRtRnRaWE53WVdObElEMGdWblZsTG1OdmJtWnBaeTVuWlhSVVlXZE9ZVzFsYzNCaFkyVmNiaUFnVm5WbExtTnZibVpwWnk1blpYUlVZV2RPWVcxbGMzQmhZMlVnUFNCbWRXNWpkR2x2YmlBb2RHRm5LU0I3WEc0Z0lDQWdhV1lnS0dselYyVmxlRlJoWnloMFlXY3BLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJRzlzWkVkbGRGUmhaMDVoYldWemNHRmpaU2gwWVdjcFhHNGdJSDFjYmx4dUlDQldkV1V1YldsNGFXNG9ZbUZ6WlNsY2JpQWdWblZsTG0xcGVHbHVLSE4wZVd4bEtWeHVJQ0JXZFdVdWJXbDRhVzRvYzNScFkydDVLVnh1WEc0Z0lHbHVhWFJGZG1WdWRFMW5jaWdwWEc1OVhHNWNiaTh2SUdGMWRHOGdhVzVwZENCcGJpQmthWE4wSUcxdlpHVXVYRzVwWmlBb2RIbHdaVzltSUhkcGJtUnZkeUFoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnZDJsdVpHOTNMbFoxWlNrZ2UxeHVJQ0JwYm1sMEtIZHBibVJ2ZHk1V2RXVXBYRzU5WEc1Y2JuZGxaWGd1YVc1cGRDQTlJR2x1YVhSY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2QyVmxlRnh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMaUFnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVmNiaUFxSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVFnYkdsdGFYUmhkR2x2Ym5OY2JpQXFJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNHZMeUJwYlhCdmNuUWdleUIyWVd4cFpHRjBaVk4wZVd4bGN5QjlJR1p5YjIwZ0p5NHVMM1poYkdsa1lYUnZjaWRjYmx4dVkyOXVjM1FnWDJOemN5QTlJR0JjYmk1M1pXVjRMV0VnZTF4dUlDQjBaWGgwTFdSbFkyOXlZWFJwYjI0NklHNXZibVU3WEc1OVhHNWdYRzVjYm1aMWJtTjBhVzl1SUdkbGRFRWdLSGRsWlhncElIdGNiaUFnWTI5dWMzUWdlMXh1SUNBZ0lHVjRkSEpoWTNSRGIyMXdiMjVsYm5SVGRIbHNaU3hjYmlBZ0lDQjBjbWx0VkdWNGRGWk9iMlJsYzF4dUlDQjlJRDBnZDJWbGVGeHVYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdibUZ0WlRvZ0ozZGxaWGd0WVNjc1hHNGdJQ0FnY0hKdmNITTZJSHRjYmlBZ0lDQWdJR2h5WldZNklGTjBjbWx1WjF4dUlDQWdJSDBzWEc0Z0lDQWdjbVZ1WkdWeUlDaGpjbVZoZEdWRmJHVnRaVzUwS1NCN1hHNGdJQ0FnSUNBdktpQnBjM1JoYm1KMWJDQnBaMjV2Y21VZ2JtVjRkQ0FxTDF4dUlDQWdJQ0FnTHk4Z2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQwOVBTQW5aR1YyWld4dmNHMWxiblFuS1NCN1hHNGdJQ0FnSUNBdkx5QWdJSFpoYkdsa1lYUmxVM1I1YkdWektDZGhKeXdnZEdocGN5NGtkbTV2WkdVdVpHRjBZU0FtSmlCMGFHbHpMaVIyYm05a1pTNWtZWFJoTG5OMFlYUnBZMU4wZVd4bEtWeHVJQ0FnSUNBZ0x5OGdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVWc1pXMWxiblFvSjJoMGJXdzZZU2NzSUh0Y2JpQWdJQ0FnSUNBZ1lYUjBjbk02SUh0Y2JpQWdJQ0FnSUNBZ0lDQW5kMlZsZUMxMGVYQmxKem9nSjJFbkxGeHVJQ0FnSUNBZ0lDQWdJR2h5WldZNklIUm9hWE11YUhKbFpseHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J6ZEdGMGFXTkRiR0Z6Y3pvZ0ozZGxaWGd0WVNCM1pXVjRMV04wSnl4Y2JpQWdJQ0FnSUNBZ2MzUmhkR2xqVTNSNWJHVTZJR1Y0ZEhKaFkzUkRiMjF3YjI1bGJuUlRkSGxzWlNoMGFHbHpLVnh1SUNBZ0lDQWdmU3dnZEhKcGJWUmxlSFJXVG05a1pYTW9kR2hwY3k0a2MyeHZkSE11WkdWbVlYVnNkQ2twWEc0Z0lDQWdmU3hjYmlBZ0lDQmZZM056WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQnBibWwwSUNoM1pXVjRLU0I3WEc0Z0lDQWdkMlZsZUM1eVpXZHBjM1JsY2tOdmJYQnZibVZ1ZENnbllTY3NJR2RsZEVFb2QyVmxlQ2twWEc0Z0lIMWNibjFjYmlJc0lpOHFYRzRnS2lCTWFXTmxibk5sWkNCMGJ5QjBhR1VnUVhCaFkyaGxJRk52Wm5SM1lYSmxJRVp2ZFc1a1lYUnBiMjRnS0VGVFJpa2dkVzVrWlhJZ2IyNWxYRzRnS2lCdmNpQnRiM0psSUdOdmJuUnlhV0oxZEc5eUlHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MGN5NGdJRk5sWlNCMGFHVWdUazlVU1VORklHWnBiR1ZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSGRwZEdnZ2RHaHBjeUIzYjNKcklHWnZjaUJoWkdScGRHbHZibUZzSUdsdVptOXliV0YwYVc5dVhHNGdLaUJ5WldkaGNtUnBibWNnWTI5d2VYSnBaMmgwSUc5M2JtVnljMmhwY0M0Z0lGUm9aU0JCVTBZZ2JHbGpaVzV6WlhNZ2RHaHBjeUJtYVd4bFhHNGdLaUIwYnlCNWIzVWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobFhHNGdLaUJjSWt4cFkyVnVjMlZjSWlrN0lIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVmNiaUFxSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1SUNCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaUFxWEc0Z0tpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXhjYmlBcUlITnZablIzWVhKbElHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1WEc0Z0tpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XVnh1SUNvZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzRnSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxYRzRnS2lCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrSUd4cGJXbDBZWFJwYjI1elhHNGdLaUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVYRzVqYjI1emRDQmZZM056SUQwZ1lGeHVZbTlrZVNBK0lDNTNaV1Y0TFdScGRpQjdYRzRnSUcxcGJpMW9aV2xuYUhRNklERXdNQ1U3WEc1OVhHNWdYRzVjYm1aMWJtTjBhVzl1SUdkbGRFUnBkaUFvZDJWbGVDa2dlMXh1SUNCamIyNXpkQ0I3WEc0Z0lDQWdaWGgwY21GamRFTnZiWEJ2Ym1WdWRGTjBlV3hsTEZ4dUlDQWdJSFJ5YVcxVVpYaDBWazV2WkdWelhHNGdJSDBnUFNCM1pXVjRYRzVjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0J1WVcxbE9pQW5kMlZsZUMxa2FYWW5MRnh1SUNBZ0lISmxibVJsY2lBb1kzSmxZWFJsUld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR055WldGMFpVVnNaVzFsYm5Rb0oyaDBiV3c2WkdsMkp5d2dlMXh1SUNBZ0lDQWdJQ0JoZEhSeWN6b2dleUFuZDJWbGVDMTBlWEJsSnpvZ0oyUnBkaWNnZlN4Y2JpQWdJQ0FnSUNBZ2MzUmhkR2xqUTJ4aGMzTTZJQ2QzWldWNExXUnBkaUIzWldWNExXTjBKeXhjYmlBZ0lDQWdJQ0FnYzNSaGRHbGpVM1I1YkdVNklHVjRkSEpoWTNSRGIyMXdiMjVsYm5SVGRIbHNaU2gwYUdsektWeHVJQ0FnSUNBZ2ZTd2dkSEpwYlZSbGVIUldUbTlrWlhNb2RHaHBjeTRrYzJ4dmRITXVaR1ZtWVhWc2RDa3BYRzRnSUNBZ2ZTeGNiaUFnSUNCZlkzTnpYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdlMXh1SUNCcGJtbDBJQ2gzWldWNEtTQjdYRzRnSUNBZ1kyOXVjM1FnWkdsMklEMGdaMlYwUkdsMktIZGxaWGdwWEc0Z0lDQWdkMlZsZUM1eVpXZHBjM1JsY2tOdmJYQnZibVZ1ZENnblpHbDJKeXdnWkdsMktWeHVJQ0FnSUhkbFpYZ3VjbVZuYVhOMFpYSkRiMjF3YjI1bGJuUW9KMk52Ym5SaGFXNWxjaWNzSUdScGRpbGNiaUFnZlZ4dWZWeHVJaXdpTHlwY2JpQXFJRXhwWTJWdWMyVmtJSFJ2SUhSb1pTQkJjR0ZqYUdVZ1UyOW1kSGRoY21VZ1JtOTFibVJoZEdsdmJpQW9RVk5HS1NCMWJtUmxjaUJ2Ym1WY2JpQXFJRzl5SUcxdmNtVWdZMjl1ZEhKcFluVjBiM0lnYkdsalpXNXpaU0JoWjNKbFpXMWxiblJ6TGlBZ1UyVmxJSFJvWlNCT1QxUkpRMFVnWm1sc1pWeHVJQ29nWkdsemRISnBZblYwWldRZ2QybDBhQ0IwYUdseklIZHZjbXNnWm05eUlHRmtaR2wwYVc5dVlXd2dhVzVtYjNKdFlYUnBiMjVjYmlBcUlISmxaMkZ5WkdsdVp5QmpiM0I1Y21sbmFIUWdiM2R1WlhKemFHbHdMaUFnVkdobElFRlRSaUJzYVdObGJuTmxjeUIwYUdseklHWnBiR1ZjYmlBcUlIUnZJSGx2ZFNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1ZjYmlBcUlGd2lUR2xqWlc1elpWd2lLVHNnZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlZ4dUlDb2dkMmwwYUNCMGFHVWdUR2xqWlc1elpTNGdJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxGeHVJQ29nYzI5bWRIZGhjbVVnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNWNiaUFxSUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WlhHNGdLaUJMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xpQWdVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdWY2JpQXFJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUWdiR2x0YVhSaGRHbHZibk5jYmlBcUlIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1Y2JteGxkQ0JsZUhSeVlXTjBRMjl0Y0c5dVpXNTBVM1I1YkdVc0lHTnlaV0YwWlVWMlpXNTBUV0Z3TENCbGVIUmxibVFzSUdselFYSnlZWGxjYmx4dVkyOXVjM1FnU1UxSFgwNUJUVVZmUWtsVVV5QTlJREUxWEc1Y2JtTnZibk4wSUY5amMzTWdQU0JnWEc0dWQyVmxlQzFwYldGblpTd2dMbmRsWlhndGFXMW5JSHRjYmlBZ1ltRmphMmR5YjNWdVpDMXlaWEJsWVhRNklHNXZMWEpsY0dWaGREdGNiaUFnWW1GamEyZHliM1Z1WkMxd2IzTnBkR2x2YmpvZ05UQWxJRFV3SlR0Y2JuMWNibUJjYmk4cUtseHVJQ29nTVM0Z1oyVjBJSE53Y21sMFpTQnpkSGxzWlNCcFppQnpjSEpwZEdWUWIzTnBkR2x2YmlCcGN5QnpaWFF1WEc0Z0tpQXlMaUJsYkhObElHZGxkQ0J5WlhOcGVtVWdLSE4wWlhSamFIeGpiM1psY254amIyNTBZV2x1S1NCeVpXeGhkR1ZrSUhOMGVXeGxjeTVjYmlBcUwxeHVablZ1WTNScGIyNGdaMlYwUTNWemRHOXRVM1I1YkdVZ0tHTnZiblJsZUhRc0lHMWxjbWRsWkZOMGVXeGxLU0I3WEc0Z0lHeGxkQ0J6Y0hKcGRHVlFiM05wZEdsdmJpQTlJR052Ym5SbGVIUXVjM0J5YVhSbFVHOXphWFJwYjI1Y2JpQWdhV1lnS0hOd2NtbDBaVkJ2YzJsMGFXOXVJQ1ltSUNGcGMwRnljbUY1S0hOd2NtbDBaVkJ2YzJsMGFXOXVLU2tnZTF4dUlDQWdJSE53Y21sMFpWQnZjMmwwYVc5dUlEMGdLSE53Y21sMFpWQnZjMmwwYVc5dUlDc2dKeWNwTG5Od2JHbDBLQ2NzSnlrdWJXRndLR1oxYm1OMGFXOXVJQ2gyWVd3cElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMllXd3VjbVZ3YkdGalpTZ3ZXMXRjWEYxZEwyY3NJQ2NuS1M1eVpYQnNZV05sS0M5ZVhGeHpLaWhjWEZOYlhGeHpYRnhUWFNvL0tWeGNjeW9rTDJjc0lHWjFibU4wYVc5dUlDZ2tNQ3dnSkRFcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQmhjbk5sU1c1MEtDUXhLVnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQjlLVnh1SUNCOVhHNGdJR2xtSUNoemNISnBkR1ZRYjNOcGRHbHZiaWtnZTF4dUlDQWdJR052Ym5OMElIQnZjMWdnUFNBdGMzQnlhWFJsVUc5emFYUnBiMjViTUYxY2JpQWdJQ0JqYjI1emRDQndiM05aSUQwZ0xYTndjbWwwWlZCdmMybDBhVzl1V3pGZFhHNGdJQ0FnWTI5dWMzUWdjMk5oYkdVZ1BTQjNaV1Y0TG1OdmJtWnBaeTVsYm5ZdWMyTmhiR1ZjYmlBZ0lDQmpiMjV6ZENCemFYcGxVMk5oYkdVZ1BTQndZWEp6WlVac2IyRjBLR052Ym5SbGVIUXVjM0J5YVhSbFYybGtkR2dwSUM4Z2NHRnljMlZHYkc5aGRDaHRaWEpuWldSVGRIbHNaUzUzYVdSMGFDa2dLaUIzWldWNExtTnZibVpwWnk1bGJuWXVjMk5oYkdWY2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdKMkpoWTJ0bmNtOTFibVF0Y0c5emFYUnBiMjRuT2lCZ0pIdHdiM05ZSUNvZ2MyTmhiR1Y5Y0hnZ0pIdHdiM05aSUNvZ2MyTmhiR1Y5Y0hoZ0xGeHVJQ0FnSUNBZ0oySmhZMnRuY205MWJtUXRjMmw2WlNjNklHQWtlM05wZW1WVFkyRnNaU0FxSURFd01IMGxZRnh1SUNBZ0lIMWNiaUFnZlZ4dUlDQmpiMjV6ZENCemRISmxkR05vSUQwZ0p6RXdNQ1VnTVRBd0pTZGNiaUFnWTI5dWMzUWdjbVZ6YVhwbElEMGdZMjl1ZEdWNGRDNXlaWE5wZW1VZ2ZId2djM1J5WlhSamFGeHVJQ0JqYjI1emRDQmlaMU5wZW1VZ1BTQmJKMk52ZG1WeUp5d2dKMk52Ym5SaGFXNG5MQ0J6ZEhKbGRHTm9YUzVwYm1SbGVFOW1LSEpsYzJsNlpTa2dQaUF0TVNBL0lISmxjMmw2WlNBNklITjBjbVYwWTJoY2JpQWdMeThnWTI5dGNHRjBhV0pwYkdsMGVUb2dhSFIwY0RvdkwyTmhibWwxYzJVdVkyOXRMeU56WldGeVkyZzlZbUZqYTJkeWIzVnVaQzF6YVhwbFhHNGdJSEpsZEhWeWJpQjdJQ2RpWVdOclozSnZkVzVrTFhOcGVtVW5PaUJpWjFOcGVtVWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQndjbVZRY205alpYTnpVM0pqSUNoamIyNTBaWGgwTENCMWNtd3NJRzFsY21kbFpGTjBlV3hsS1NCN1hHNGdJQzh2SUhOdmJXVm9iM2NnZEdobElHMWxjbWRsWkNCemRIbHNaU0JwYmlCZmNISmxjbVZ1WkdWeUlHaHZiMnNnYVhNZ1oyOXVaUzVjYmlBZ0x5OGdhblZ6ZENCeVpYUjFjbTRnZEdobElHOXlhV2RwYm1Gc0lITnlZeTVjYmlBZ2FXWWdLQ0Z0WlhKblpXUlRkSGxzWlNCOGZDQWhiV1Z5WjJWa1UzUjViR1V1ZDJsa2RHZ2dmSHdnSVcxbGNtZGxaRk4wZVd4bExtaGxhV2RvZENrZ2UxeHVJQ0FnSUhKbGRIVnliaUIxY214Y2JpQWdmVnh1SUNCamIyNXpkQ0I3SUhkcFpIUm9MQ0JvWldsbmFIUWdmU0E5SUcxbGNtZGxaRk4wZVd4bFhHNGdJSEpsZEhWeWJpQmpiMjUwWlhoMExuQnliMk5sYzNOSmJXZFRjbU1nSmlZZ1kyOXVkR1Y0ZEM1d2NtOWpaWE56U1cxblUzSmpLSFZ5YkN3Z2UxeHVJQ0FnSUhkcFpIUm9PaUJ3WVhKelpVWnNiMkYwS0hkcFpIUm9LU3hjYmlBZ0lDQm9aV2xuYUhRNklIQmhjbk5sUm14dllYUW9hR1ZwWjJoMEtTeGNiaUFnSUNCeGRXRnNhWFI1T2lCamIyNTBaWGgwTG5GMVlXeHBkSGtzWEc0Z0lDQWdjMmhoY25CbGJqb2dZMjl1ZEdWNGRDNXphR0Z5Y0dWdUxGeHVJQ0FnSUc5eWFXZHBibUZzT2lCamIyNTBaWGgwTG05eWFXZHBibUZzWEc0Z0lIMHBJSHg4SUhWeWJGeHVmVnh1WEc1bWRXNWpkR2x2YmlCa2IzZHViRzloWkNBb2RYSnNMQ0JqWVd4c1ltRmpheWtnZTF4dUlDQm1kVzVqZEdsdmJpQnpkV05qWlhOeklDZ3BJSHRjYmlBZ0lDQmpZV3hzWW1GamF5QW1KaUJqWVd4c1ltRmpheWg3WEc0Z0lDQWdJQ0J6ZFdOalpYTnpPaUIwY25WbFhHNGdJQ0FnZlNsY2JpQWdmVnh1SUNCbWRXNWpkR2x2YmlCbVlXbHNJQ2hsY25JcElIdGNiaUFnSUNCallXeHNZbUZqYXlBbUppQmpZV3hzWW1GamF5aDdYRzRnSUNBZ0lDQnpkV05qWlhOek9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUdWeWNtOXlSR1Z6WXpvZ1pYSnlJQ3NnSnlkY2JpQWdJQ0I5S1Z4dUlDQjlYRzRnSUhSeWVTQjdYRzRnSUNBZ2JHVjBJR2x6UkdGMFlWVnliQ0E5SUdaaGJITmxYRzRnSUNBZ2JHVjBJSEJoY25SelhHNGdJQ0FnYkdWMElHNWhiV1ZjYmlBZ0lDQnBaaUFvZFhKc0xtMWhkR05vS0M5a1lYUmhPbWx0WVdkbFhGd3ZXMTQ3WFNzN1ltRnpaVFkwTEM4cEtTQjdYRzRnSUNBZ0lDQnBjMFJoZEdGVmNtd2dQU0IwY25WbFhHNGdJQ0FnSUNCd1lYSjBjeUE5SUhWeWJDNXpjR3hwZENnbkxDY3BYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDZ2hhWE5FWVhSaFZYSnNLU0I3WEc0Z0lDQWdJQ0J1WVcxbElEMGdkWEpzWEc0Z0lDQWdJQ0FnSUM1eVpYQnNZV05sS0M5Y1hEOWJYajlkS3k4c0lDY25LVnh1SUNBZ0lDQWdJQ0F1Y21Wd2JHRmpaU2d2STF0ZUkxMHJMeXdnSnljcFhHNGdJQ0FnSUNBZ0lDNXRZWFJqYUNndktGdGVMMTByS1NRdktWeHVJQ0FnSUgxY2JpQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lHNWhiV1VnUFNCd1lYSjBjMXN4WFM1emRXSnpkSElvTUN3Z1NVMUhYMDVCVFVWZlFrbFVVeWxjYmlBZ0lDQjlYRzRnSUNBZ1kyOXVjM1FnWVVWc0lEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnbllTY3BYRzRnSUNBZ1lVVnNMbWh5WldZZ1BTQjFjbXhjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJPYjNRZ1lXeHNJR0p5YjNkelpYSWdjM1Z3Y0c5eWRDQjBhR2x6SUNka2IzZHViRzloWkNjZ1lYUjBjbWxpZFhSbExpQkpiaUIwYUdWelpTQmljbTkzYzJWeWN5QnBkQ2RzYkNCcWRXMXdYRzRnSUNBZ0lDb2dkRzhnZEdobElIQm9iM1J2SUhWeWJDQndZV2RsSUdGdVpDQjFjMlZ5SUdoaGRtVWdkRzhnYkc5dVozQnlaWE56SUhSb1pTQndhRzkwYnlCMGJ5QnpZWFpsSUdsMExseHVJQ0FnSUNBcUwxeHVJQ0FnSUdGRmJDNWtiM2R1Ykc5aFpDQTlJRzVoYldWY2JpQWdJQ0JqYjI1emRDQmpiR2xqYTBWMmRDQTlJRzVsZHlCRmRtVnVkQ2duWTJ4cFkyc25MQ0I3SUdKMVltSnNaWE02SUdaaGJITmxJSDBwWEc0Z0lDQWdZVVZzTG1ScGMzQmhkR05vUlhabGJuUW9ZMnhwWTJ0RmRuUXBYRzRnSUNBZ2MzVmpZMlZ6Y3lncFhHNGdJSDFjYmlBZ1kyRjBZMmdnS0dWeWNpa2dlMXh1SUNBZ0lHWmhhV3dvWlhKeUtWeHVJQ0I5WEc1OVhHNWNibU52Ym5OMElHbHRZV2RsSUQwZ2UxeHVJQ0J1WVcxbE9pQW5kMlZsZUMxcGJXRm5aU2NzWEc0Z0lIQnliM0J6T2lCN1hHNGdJQ0FnYzNKak9pQlRkSEpwYm1jc1hHNGdJQ0FnY0d4aFkyVm9iMnhrWlhJNklGTjBjbWx1Wnl4Y2JpQWdJQ0J5WlhOcGVtVTZJRk4wY21sdVp5eGNiaUFnSUNCeGRXRnNhWFI1T2lCVGRISnBibWNzWEc0Z0lDQWdjMmhoY25CbGJqb2dVM1J5YVc1bkxGeHVJQ0FnSUc5eWFXZHBibUZzT2lCYlUzUnlhVzVuTENCQ2IyOXNaV0Z1WFN4Y2JpQWdJQ0J6Y0hKcGRHVlRjbU02SUZOMGNtbHVaeXhjYmlBZ0lDQnpjSEpwZEdWUWIzTnBkR2x2YmpvZ1cxTjBjbWx1Wnl3Z1FYSnlZWGxkTEZ4dUlDQWdJSE53Y21sMFpWZHBaSFJvT2lCYlUzUnlhVzVuTENCT2RXMWlaWEpkWEc0Z0lIMHNYRzVjYmlBZ2RYQmtZWFJsWkNBb0tTQjdYRzRnSUNBZ2RHaHBjeTVmWm1seVpVeGhlbmxzYjJGa0tDbGNiaUFnZlN4Y2JseHVJQ0J0YjNWdWRHVmtJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxsOW1hWEpsVEdGNmVXeHZZV1FvS1Z4dUlDQjlMRnh1WEc0Z0lHMWxkR2h2WkhNNklIdGNiaUFnSUNCellYWmxJQ2hqWVd4c1ltRmpheWtnZTF4dUlDQWdJQ0FnWkc5M2JteHZZV1FvZEdocGN5NXpjbU1zSUdOaGJHeGlZV05yS1Z4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCeVpXNWtaWElnS0dOeVpXRjBaVVZzWlcxbGJuUXBJSHRjYmlBZ0lDQmpiMjV6ZENCemRIbHNaU0E5SUdWNGRISmhZM1JEYjIxd2IyNWxiblJUZEhsc1pTaDBhR2x6S1Z4dUlDQWdJR052Ym5OMElHTjFjM1J2YlZOMGVXeGxJRDBnWjJWMFEzVnpkRzl0VTNSNWJHVW9kR2hwY3l3Z2MzUjViR1VwWEc0Z0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVWc1pXMWxiblFvSjJacFozVnlaU2NzSUh0Y2JpQWdJQ0FnSUdGMGRISnpPaUI3WEc0Z0lDQWdJQ0FnSUNkM1pXVjRMWFI1Y0dVbk9pQW5hVzFoWjJVbkxGeHVJQ0FnSUNBZ0lDQW5hVzFuTFhOeVl5YzZJSFJvYVhNdWMzQnlhWFJsVTNKaklIeDhJSEJ5WlZCeWIyTmxjM05UY21Nb2RHaHBjeXdnZEdocGN5NXpjbU1zSUhOMGVXeGxLU3hjYmlBZ0lDQWdJQ0FnSjJsdFp5MXdiR0ZqWldodmJHUmxjaWM2SUhCeVpWQnliMk5sYzNOVGNtTW9kR2hwY3l3Z2RHaHBjeTV3YkdGalpXaHZiR1JsY2l3Z2MzUjViR1VwTEZ4dUlDQWdJQ0FnSUNBbmMzQnlhWFJsTFhOeVl5YzZJSFJvYVhNdWMzQnlhWFJsVTNKakxGeHVJQ0FnSUNBZ0lDQW5jM0J5YVhSbExYQnZjMmwwYVc5dUp6b2dkR2hwY3k1emNISnBkR1ZRYjNOcGRHbHZiaXhjYmlBZ0lDQWdJQ0FnSjNOd2NtbDBaUzEzYVdSMGFDYzZJSFJvYVhNdWMzQnlhWFJsVjJsa2RHaGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQnZiam9nWTNKbFlYUmxSWFpsYm5STllYQW9kR2hwY3l3Z1d5ZHNiMkZrSnl3Z0oyVnljbTl5SjEwcExGeHVJQ0FnSUNBZ2MzUmhkR2xqUTJ4aGMzTTZJQ2QzWldWNExXbHRZV2RsSUhkbFpYZ3RaV3duTEZ4dUlDQWdJQ0FnYzNSaGRHbGpVM1I1YkdVNklHVjRkR1Z1WkNoemRIbHNaU3dnWTNWemRHOXRVM1I1YkdVcFhHNGdJQ0FnZlNsY2JpQWdmU3hjYmlBZ1gyTnpjMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJR2x1YVhRZ0tIZGxaWGdwSUh0Y2JpQWdJQ0JsZUhSeVlXTjBRMjl0Y0c5dVpXNTBVM1I1YkdVZ1BTQjNaV1Y0TG1WNGRISmhZM1JEYjIxd2IyNWxiblJUZEhsc1pWeHVJQ0FnSUdOeVpXRjBaVVYyWlc1MFRXRndJRDBnZDJWbGVDNWpjbVZoZEdWRmRtVnVkRTFoY0Z4dUlDQWdJR1Y0ZEdWdVpDQTlJSGRsWlhndWRYUnBiSE11WlhoMFpXNWtYRzRnSUNBZ2FYTkJjbkpoZVNBOUlIZGxaWGd1ZFhScGJITXVhWE5CY25KaGVWeHVYRzRnSUNBZ2QyVmxlQzV5WldkcGMzUmxja052YlhCdmJtVnVkQ2duYVcxaFoyVW5MQ0JwYldGblpTbGNiaUFnSUNCM1pXVjRMbkpsWjJsemRHVnlRMjl0Y0c5dVpXNTBLQ2RwYldjbkxDQnBiV0ZuWlNsY2JpQWdmVnh1ZlZ4dUlpd2lMeXBjYmlBcUlFeHBZMlZ1YzJWa0lIUnZJSFJvWlNCQmNHRmphR1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2YmlBb1FWTkdLU0IxYm1SbGNpQnZibVZjYmlBcUlHOXlJRzF2Y21VZ1kyOXVkSEpwWW5WMGIzSWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUnpMaUFnVTJWbElIUm9aU0JPVDFSSlEwVWdabWxzWlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZDJsMGFDQjBhR2x6SUhkdmNtc2dabTl5SUdGa1pHbDBhVzl1WVd3Z2FXNW1iM0p0WVhScGIyNWNiaUFxSUhKbFoyRnlaR2x1WnlCamIzQjVjbWxuYUhRZ2IzZHVaWEp6YUdsd0xpQWdWR2hsSUVGVFJpQnNhV05sYm5ObGN5QjBhR2x6SUdacGJHVmNiaUFxSUhSdklIbHZkU0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVmNiaUFxSUZ3aVRHbGpaVzV6WlZ3aUtUc2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaVnh1SUNvZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM0Z0lGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTEZ4dUlDb2djMjltZEhkaGNtVWdaR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc1Y2JpQXFJRndpUVZNZ1NWTmNJaUJDUVZOSlV5d2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaWEc0Z0tpQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGlBZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1ZjYmlBcUlITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1RZ2JHbHRhWFJoZEdsdmJuTmNiaUFxSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVjYmk4cUtseHVJQ29nUUdacGJHVlBkbVZ5ZG1sbGR5QkpibkIxZENCamIyMXdiMjVsYm5RdVhHNGdLaUJUZFhCd2IzSjBJSFl0Ylc5a1pXd2diMjVzZVNCcFppQjJkV1VnZG1WeWMybHZiaUJwY3lCc1lYSm5aWElnZEdoaGJpQXlMakl1TUZ4dUlDb3ZYRzVzWlhRZ1pYaDBjbUZqZEVOdmJYQnZibVZ1ZEZOMGVXeGxMQ0J0WVhCR2IzSnRSWFpsYm5SekxDQmhjSEJsYm1SRGMzTmNibHh1WTI5dWMzUWdTVVJmVUZKRlJrbFlYMUJNUVVORlNFOU1SRVZTWDBOUFRFOVNJRDBnSjNkcGNIUmZjR3hqWHlkY2JtTnZibk4wSUVsRVgxQlNSVVpKV0Y5SlRsQlZWQ0E5SUNkM2FYQjBYeWRjYm14bGRDQnBaRU52ZFc1MElEMGdNRnh1WEc1amIyNXpkQ0JmWTNOeklEMGdZRnh1TG5kbFpYZ3RhVzV3ZFhRc0lDNTNaV1Y0TFhSbGVIUmhjbVZoSUh0Y2JpQWdabTl1ZEMxemFYcGxPaUF3TGpReU5qWTJOM0psYlR0Y2JuMWNiaTUzWldWNExXbHVjSFYwT21adlkzVnpMQ0F1ZDJWbGVDMTBaWGgwWVhKbFlUcG1iMk4xY3lCN1hHNGdJRzkxZEd4cGJtVTZJRzV2Ym1VN1hHNTlYRzVnWEc1Y2JtWjFibU4wYVc5dUlITmxkRkJzWVdObGFHOXNaR1Z5UTI5c2IzSWdLR2x1Y0hWMFZtMHNJSEJzWVdObGFHOXNaR1Z5UTI5c2IzSXBJSHRjYmlBZ2FXWWdLQ0Z3YkdGalpXaHZiR1JsY2tOdmJHOXlLU0I3WEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYmlBZ1kyOXVjM1FnZG1WdVpHOXljeUE5SUZ0Y2JpQWdJQ0FuT2pvdGQyVmlhMmwwTFdsdWNIVjBMWEJzWVdObGFHOXNaR1Z5Snl4Y2JpQWdJQ0FuT2kxdGIzb3RjR3hoWTJWb2IyeGtaWEluTEZ4dUlDQWdJQ2M2T2kxdGIzb3RjR3hoWTJWb2IyeGtaWEluTEZ4dUlDQWdJQ2M2TFcxekxXbHVjSFYwTFhCc1lXTmxhRzlzWkdWeUp5eGNiaUFnSUNBbk9uQnNZV05sYUc5c1pHVnlMWE5vYjNkdUoxeHVJQ0JkWEc0Z0lHTnZibk4wSUdsa0lEMGdhVzV3ZFhSV2JTNWZhV1JjYmlBZ1lYQndaVzVrUTNOektGeHVJQ0FnSUhabGJtUnZjbk11YldGd0tHWjFibU4wYVc5dUlDaDJaVzVrYjNJc0lHbGtlQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR0FqSkh0SlJGOVFVa1ZHU1ZoZlNVNVFWVlI5Skh0cFpIMGtlM1psYm1SdmNuTmJhV1I0WFgxN1kyOXNiM0k2Skh0d2JHRmpaV2h2YkdSbGNrTnZiRzl5ZlR0OVlGeHVJQ0FnSUgwcExtcHZhVzRvSnljcExGeHVJQ0FnSUdBa2UwbEVYMUJTUlVaSldGOVFURUZEUlVoUFRFUkZVbDlEVDB4UFVuMGtlMmxrZldBc1hHNGdJQ0FnZEhKMVpTbGNibjFjYmx4dVpuVnVZM1JwYjI0Z2NISnZZMlZ6YzFOMGVXeGxJQ2gyYlNrZ2UxeHVJQ0JqYjI1emRDQnpkSGxzWlhNZ1BTQmxlSFJ5WVdOMFEyOXRjRzl1Wlc1MFUzUjViR1VvZG0wcFhHNGdJR052Ym5OMElIQm9RMjlzYjNJZ1BTQnpkSGxzWlhNdWNHeGhZMlZvYjJ4a1pYSkRiMnh2Y2x4dUlDQnBaaUFvY0doRGIyeHZjaWtnZTF4dUlDQWdJSE5sZEZCc1lXTmxhRzlzWkdWeVEyOXNiM0lvZG0wc0lIQm9RMjlzYjNJcFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUhOMGVXeGxjMXh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJKYm5CMWRDQW9kMlZsZUNrZ2UxeHVJQ0JqYjI1emRDQjdJR2x1Y0hWMFEyOXRiVzl1SUgwZ1BTQjNaV1Y0TG0xcGVHbHVjMXh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnYm1GdFpUb2dKM2RsWlhndGFXNXdkWFFuTEZ4dUlDQWdJRzFwZUdsdWN6b2dXMmx1Y0hWMFEyOXRiVzl1WFN4Y2JpQWdJQ0J3Y205d2N6b2dlMXh1SUNBZ0lDQWdkSGx3WlRvZ2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCVGRISnBibWNzWEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2SUNkMFpYaDBKeXhjYmlBZ0lDQWdJQ0FnZG1Gc2FXUmhkRzl5SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCYlhHNGdJQ0FnSUNBZ0lDQWdJQ0FuWlcxaGFXd25MQ0FuYm5WdFltVnlKeXdnSjNCaGMzTjNiM0prSnl3Z0ozTmxZWEpqYUNjc0lDZDBaV3duTENBbmRHVjRkQ2NzSUNkMWNtd25MQ0FuWkdGMFpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBblpHRjBaWFJwYldVbkxDQW5kR2x0WlNkY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUhWdWMzVndjRzl5ZEdWa0lIUjVjR1U2WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJpZFhSMGIyNHNJR05vWldOclltOTRMQ0JqYjJ4dmNpd2dabWxzWlN3Z2FHbGtaR1Z1TENCcGJXRm5aU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzF2Ym5Sb0xDQnlZV1JwYnl3Z2NtRnVaMlVzSUhKbGMyVjBMQ0J6ZFdKdGFYUXNJSGRsWldzc1hHNGdJQ0FnSUNBZ0lDQWdYUzVwYm1SbGVFOW1LSFpoYkhWbEtTQWhQVDBnTFRGY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lIWmhiSFZsT2lCVGRISnBibWNzWEc0Z0lDQWdJQ0J3YkdGalpXaHZiR1JsY2pvZ1UzUnlhVzVuTEZ4dUlDQWdJQ0FnWkdsellXSnNaV1E2SUh0Y2JpQWdJQ0FnSUNBZ2RIbHdaVG9nVzFOMGNtbHVaeXdnUW05dmJHVmhibDBzWEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2SUdaaGJITmxYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdZWFYwYjJadlkzVnpPaUI3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJRnRUZEhKcGJtY3NJRUp2YjJ4bFlXNWRMRnh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJtWVd4elpWeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lHMWhlR3hsYm1kMGFEb2dXMU4wY21sdVp5d2dUblZ0WW1WeVhTeGNiaUFnSUNBZ0lISmxkSFZ5Ymt0bGVWUjVjR1U2SUZOMGNtbHVaMXh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnlaVzVrWlhJZ0tHTnlaV0YwWlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmFXUXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZhV1FnUFNCcFpFTnZkVzUwS3l0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOdmJuTjBJR1YyWlc1MGN5QTlJRzFoY0VadmNtMUZkbVZ1ZEhNb2RHaHBjeWxjYmlBZ0lDQWdJSEpsZEhWeWJpQmpjbVZoZEdWRmJHVnRaVzUwS0Nkb2RHMXNPbWx1Y0hWMEp5d2dlMXh1SUNBZ0lDQWdJQ0JoZEhSeWN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNkM1pXVjRMWFI1Y0dVbk9pQW5hVzV3ZFhRbkxGeHVJQ0FnSUNBZ0lDQWdJR2xrT2lCZ0pIdEpSRjlRVWtWR1NWaGZTVTVRVlZSOUpIdDBhR2x6TGw5cFpIMWdMRnh1SUNBZ0lDQWdJQ0FnSUhSNWNHVTZJSFJvYVhNdWRIbHdaU3hjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaVG9nZEdocGN5NTJZV3gxWlN4Y2JpQWdJQ0FnSUNBZ0lDQmthWE5oWW14bFpEb2dLSFJvYVhNdVpHbHpZV0pzWldRZ0lUMDlJQ2RtWVd4elpTY2dKaVlnZEdocGN5NWthWE5oWW14bFpDQWhQVDBnWm1Gc2MyVXBMRnh1SUNBZ0lDQWdJQ0FnSUdGMWRHOW1iMk4xY3pvZ0tIUm9hWE11WVhWMGIyWnZZM1Z6SUNFOVBTQW5abUZzYzJVbklDWW1JSFJvYVhNdVlYVjBiMlp2WTNWeklDRTlQU0JtWVd4elpTa3NYRzRnSUNBZ0lDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJNklIUm9hWE11Y0d4aFkyVm9iMnhrWlhJc1hHNGdJQ0FnSUNBZ0lDQWdiV0Y0YkdWdVozUm9PaUIwYUdsekxtMWhlR3hsYm1kMGFDeGNiaUFnSUNBZ0lDQWdJQ0FuY21WMGRYSnVTMlY1Vkhsd1pTYzZJSFJvYVhNdWNtVjBkWEp1UzJWNVZIbHdaVnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCa2IyMVFjbTl3Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQjBhR2x6TG5aaGJIVmxYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUc5dU9pQjBhR2x6TG1OeVpXRjBaVXRsZVdKdllYSmtSWFpsYm5Rb1pYWmxiblJ6S1N4Y2JpQWdJQ0FnSUNBZ2MzUmhkR2xqUTJ4aGMzTTZJQ2QzWldWNExXbHVjSFYwSUhkbFpYZ3RaV3duTEZ4dUlDQWdJQ0FnSUNCemRHRjBhV05UZEhsc1pUb2djSEp2WTJWemMxTjBlV3hsS0hSb2FYTXBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMHNYRzRnSUNBZ1gyTnpjMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJSHRjYmlBZ2FXNXBkQ0FvZDJWbGVDa2dlMXh1SUNBZ0lHVjRkSEpoWTNSRGIyMXdiMjVsYm5SVGRIbHNaU0E5SUhkbFpYZ3VaWGgwY21GamRFTnZiWEJ2Ym1WdWRGTjBlV3hsWEc0Z0lDQWdiV0Z3Um05eWJVVjJaVzUwY3lBOUlIZGxaWGd1ZFhScGJITXViV0Z3Um05eWJVVjJaVzUwYzF4dUlDQWdJR0Z3Y0dWdVpFTnpjeUE5SUhkbFpYZ3VkWFJwYkhNdVlYQndaVzVrUTNOelhHNWNiaUFnSUNCM1pXVjRMbkpsWjJsemRHVnlRMjl0Y0c5dVpXNTBLQ2RwYm5CMWRDY3NJR2RsZEVsdWNIVjBLSGRsWlhncEtWeHVJQ0I5WEc1OVhHNGlMQ0l2S2x4dUlDb2dUR2xqWlc1elpXUWdkRzhnZEdobElFRndZV05vWlNCVGIyWjBkMkZ5WlNCR2IzVnVaR0YwYVc5dUlDaEJVMFlwSUhWdVpHVnlJRzl1WlZ4dUlDb2diM0lnYlc5eVpTQmpiMjUwY21saWRYUnZjaUJzYVdObGJuTmxJR0ZuY21WbGJXVnVkSE11SUNCVFpXVWdkR2hsSUU1UFZFbERSU0JtYVd4bFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCM2FYUm9JSFJvYVhNZ2QyOXlheUJtYjNJZ1lXUmthWFJwYjI1aGJDQnBibVp2Y20xaGRHbHZibHh1SUNvZ2NtVm5ZWEprYVc1bklHTnZjSGx5YVdkb2RDQnZkMjVsY25Ob2FYQXVJQ0JVYUdVZ1FWTkdJR3hwWTJWdWMyVnpJSFJvYVhNZ1ptbHNaVnh1SUNvZ2RHOGdlVzkxSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aVnh1SUNvZ1hDSk1hV05sYm5ObFhDSXBPeUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sWEc0Z0tpQjNhWFJvSUhSb1pTQk1hV05sYm5ObExpQWdXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc1hHNGdLaUJ6YjJaMGQyRnlaU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJseHVJQ29nWENKQlV5QkpVMXdpSUVKQlUwbFRMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxsY2JpQXFJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdUlDQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlZ4dUlDb2djM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpDQnNhVzFwZEdGMGFXOXVjMXh1SUNvZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYmx4dVkyOXVjM1FnWDJOemN5QTlJR0JjYmk1M1pXVjRMWE4zYVhSamFDQjdYRzRnSUdKdmNtUmxjam9nTUM0d01UTXpNek55WlcwZ2MyOXNhV1FnSTJSbVpHWmtaanRjYmlBZ1kzVnljMjl5T2lCd2IybHVkR1Z5TzF4dUlDQmthWE53YkdGNU9pQnBibXhwYm1VdFlteHZZMnM3WEc0Z0lIQnZjMmwwYVc5dU9pQnlaV3hoZEdsMlpUdGNiaUFnZG1WeWRHbGpZV3d0WVd4cFoyNDZJRzFwWkdSc1pUdGNiaUFnTFhkbFltdHBkQzExYzJWeUxYTmxiR1ZqZERvZ2JtOXVaVHRjYmlBZ0xXMXZlaTExYzJWeUxYTmxiR1ZqZERvZ2JtOXVaVHRjYmlBZ0xXMXpMWFZ6WlhJdGMyVnNaV04wT2lCdWIyNWxPMXh1SUNCMWMyVnlMWE5sYkdWamREb2dibTl1WlR0Y2JpQWdZbTk0TFhOcGVtbHVaem9nWTI5dWRHVnVkQzFpYjNnN1hHNGdJR0poWTJ0bmNtOTFibVF0WTJ4cGNEb2dZMjl1ZEdWdWRDMWliM2c3WEc0Z0lHTnZiRzl5T2lBak5qUmlaRFl6TzF4dUlDQjNhV1IwYURvZ01TNHpNek16TXpOeVpXMDdYRzRnSUdobGFXZG9kRG9nTUM0NGNtVnRPMXh1SUNCaVlXTnJaM0p2ZFc1a0xXTnZiRzl5T2lCM2FHbDBaVHRjYmlBZ1ltOXlaR1Z5TFdOdmJHOXlPaUFqWkdaa1ptUm1PMXh1SUNCaWIzZ3RjMmhoWkc5M09pQWpaR1prWm1SbUlEQWdNQ0F3SURBZ2FXNXpaWFE3WEc0Z0lHSnZjbVJsY2kxeVlXUnBkWE02SURBdU9ISmxiVHRjYmlBZ0xYZGxZbXRwZEMxMGNtRnVjMmwwYVc5dU9pQmliM0prWlhJZ01DNDBjeXdnWW05NExYTm9ZV1J2ZHlBd0xqUnpMQ0JpWVdOclozSnZkVzVrTFdOdmJHOXlJREV1TW5NN1hHNGdJQzF0YjNvdGRISmhibk5wZEdsdmJqb2dZbTl5WkdWeUlEQXVOSE1zSUdKdmVDMXphR0ZrYjNjZ01DNDBjeXdnWW1GamEyZHliM1Z1WkMxamIyeHZjaUF4TGpKek8xeHVJQ0IwY21GdWMybDBhVzl1T2lCaWIzSmtaWElnTUM0MGN5d2dZbTk0TFhOb1lXUnZkeUF3TGpSekxDQmlZV05yWjNKdmRXNWtMV052Ykc5eUlERXVNbk03WEc1OVhHNWNiaTUzWldWNExYTjNhWFJqYUMxamFHVmphMlZrSUh0Y2JpQWdZbUZqYTJkeWIzVnVaQzFqYjJ4dmNqb2dJelkwWW1RMk16dGNiaUFnWW05eVpHVnlMV052Ykc5eU9pQWpOalJpWkRZek8xeHVJQ0JpYjNndGMyaGhaRzkzT2lBak5qUmlaRFl6SURBZ01DQXdJREF1TlRNek16TXpjbVZ0SUdsdWMyVjBPMXh1ZlZ4dVhHNHVkMlZsZUMxemQybDBZMmd0WTJobFkydGxaQzUzWldWNExYTjNhWFJqYUMxa2FYTmhZbXhsWkNCN1hHNGdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05CTUVORFFUQTdYRzRnSUdKdmVDMXphR0ZrYjNjNklDTkJNRU5EUVRBZ01DQXdJREFnTUM0MU16TXpNek55WlcwZ2FXNXpaWFE3WEc1OVhHNWNiaTUzWldWNExYTjNhWFJqYUMxa2FYTmhZbXhsWkNCN1hHNGdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ05GUlVWRlJVVTdYRzU5WEc1Y2JpNTNaV1Y0TFhOM2FYUmphQzFwYm01bGNpQjdYRzRnSUhkcFpIUm9PaUF3TGpoeVpXMDdYRzRnSUdobGFXZG9kRG9nTUM0NGNtVnRPMXh1SUNCaVlXTnJaM0p2ZFc1a09pQWpabVptTzF4dUlDQmliM0prWlhJdGNtRmthWFZ6T2lBeE1EQWxPMXh1SUNCaWIzZ3RjMmhoWkc5M09pQXdJREF1TURFek16TXpjbVZ0SURBdU1EUnlaVzBnY21kaVlTZ3dMQ0F3TENBd0xDQXdMalFwTzF4dUlDQndiM05wZEdsdmJqb2dZV0p6YjJ4MWRHVTdYRzRnSUhSdmNEb2dNRHRjYmlBZ2JHVm1kRG9nTUR0Y2JpQWdMWGRsWW10cGRDMTBjbUZ1YzJsMGFXOXVPaUJpWVdOclozSnZkVzVrTFdOdmJHOXlJREF1TkhNc0lHeGxablFnTUM0eWN6dGNiaUFnTFcxdmVpMTBjbUZ1YzJsMGFXOXVPaUJpWVdOclozSnZkVzVrTFdOdmJHOXlJREF1TkhNc0lHeGxablFnTUM0eWN6dGNiaUFnZEhKaGJuTnBkR2x2YmpvZ1ltRmphMmR5YjNWdVpDMWpiMnh2Y2lBd0xqUnpMQ0JzWldaMElEQXVNbk03WEc1OVhHNWNiaTUzWldWNExYTjNhWFJqYUMxamFHVmphMlZrSUQ0Z0xuZGxaWGd0YzNkcGRHTm9MV2x1Ym1WeUlIdGNiaUFnYkdWbWREb2dNQzQxTXpNek16TnlaVzA3WEc1OVhHNWdYRzVjYm1aMWJtTjBhVzl1SUdkbGRGTjNhWFJqYUNBb2QyVmxlQ2tnZTF4dUlDQmpiMjV6ZENCN0lHVjRkSEpoWTNSRGIyMXdiMjVsYm5SVGRIbHNaU0I5SUQwZ2QyVmxlRnh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnYm1GdFpUb2dKM2RsWlhndGMzZHBkR05vSnl4Y2JpQWdJQ0J3Y205d2N6b2dlMXh1SUNBZ0lDQWdZMmhsWTJ0bFpEb2dlMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQmJRbTl2YkdWaGJpd2dVM1J5YVc1blhTeGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2dabUZzYzJWY2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCa2FYTmhZbXhsWkRvZ2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCYlFtOXZiR1ZoYml3Z1UzUnlhVzVuWFN4Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ1ptRnNjMlZjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1SUNBZ0lHUmhkR0VnS0NrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0FnSUNBZ2FYTkRhR1ZqYTJWa09pQW9kR2hwY3k1amFHVmphMlZrSUNFOVBTQW5abUZzYzJVbklDWW1JSFJvYVhNdVkyaGxZMnRsWkNBaFBUMGdabUZzYzJVcExGeHVJQ0FnSUNBZ0lDQnBjMFJwYzJGaWJHVmtPaUFvZEdocGN5NWthWE5oWW14bFpDQWhQVDBnSjJaaGJITmxKeUFtSmlCMGFHbHpMbVJwYzJGaWJHVmtJQ0U5UFNCbVlXeHpaU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1SUNBZ0lHTnZiWEIxZEdWa09pQjdYRzRnSUNBZ0lDQjNjbUZ3Y0dWeVEyeGhjM01nS0NrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCamJHRnpjMEZ5Y21GNUlEMGdXeWQzWldWNExYTjNhWFJqYUNkZFhHNGdJQ0FnSUNBZ0lIUm9hWE11YVhORGFHVmphMlZrSUNZbUlHTnNZWE56UVhKeVlYa3VjSFZ6YUNnbmQyVmxlQzF6ZDJsMFkyZ3RZMmhsWTJ0bFpDY3BYRzRnSUNBZ0lDQWdJSFJvYVhNdWFYTkVhWE5oWW14bFpDQW1KaUJqYkdGemMwRnljbUY1TG5CMWMyZ29KM2RsWlhndGMzZHBkR05vTFdScGMyRmliR1ZrSnlsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOc1lYTnpRWEp5WVhrdWFtOXBiaWduSUNjcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JpQWdJQ0J0WlhSb2IyUnpPaUI3WEc0Z0lDQWdJQ0IwYjJkbmJHVWdLQ2tnZTF4dUlDQWdJQ0FnSUNBdkx5QlVUMFJQT2lCb1lXNWtiR1VnZEdobElHVjJaVzUwYzF4dUlDQWdJQ0FnSUNCcFppQW9JWFJvYVhNdWFYTkVhWE5oWW14bFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVhWE5EYUdWamEyVmtJRDBnSVhSb2FYTXVhWE5EYUdWamEyVmtYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NGtaVzFwZENnblkyaGhibWRsSnl3Z2V5QjJZV3gxWlRvZ2RHaHBjeTVwYzBOb1pXTnJaV1FnZlNsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCeVpXNWtaWElnS0dOeVpXRjBaVVZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJQzhxSUdsemRHRnVZblZzSUdsbmJtOXlaU0J1WlhoMElDb3ZYRzRnSUNBZ0lDQXZMeUJwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQVDA5SUNka1pYWmxiRzl3YldWdWRDY3BJSHRjYmlBZ0lDQWdJQzh2SUNBZ2RtRnNhV1JoZEdWVGRIbHNaWE1vSjNOM2FYUmphQ2NzSUhSb2FYTXVKSFp1YjJSbExtUmhkR0VnSmlZZ2RHaHBjeTRrZG01dlpHVXVaR0YwWVM1emRHRjBhV05UZEhsc1pTbGNiaUFnSUNBZ0lDOHZJSDFjYmlBZ0lDQWdJSEpsZEhWeWJpQmpjbVZoZEdWRmJHVnRaVzUwS0NkemNHRnVKeXdnZTF4dUlDQWdJQ0FnSUNCaGRIUnljem9nZXlBbmQyVmxlQzEwZVhCbEp6b2dKM04zYVhSamFDY2dmU3hjYmlBZ0lDQWdJQ0FnYjI0NklIdGNiaUFnSUNBZ0lDQWdJQ0JqYkdsamF6b2daWFpsYm5RZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTRrWlcxcGRDZ25ZMnhwWTJzbkxDQmxkbVZ1ZENsY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRHOW5aMnhsS0NsY2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUhOMFlYUnBZME5zWVhOek9pQjBhR2x6TG5keVlYQndaWEpEYkdGemN5eGNiaUFnSUNBZ0lDQWdjM1JoZEdsalUzUjViR1U2SUdWNGRISmhZM1JEYjIxd2IyNWxiblJUZEhsc1pTaDBhR2x6S1Z4dUlDQWdJQ0FnZlN3Z1cyTnlaV0YwWlVWc1pXMWxiblFvSjNOdFlXeHNKeXdnZXlCemRHRjBhV05EYkdGemN6b2dKM2RsWlhndGMzZHBkR05vTFdsdWJtVnlKeUI5S1YwcFhHNGdJQ0FnZlN4Y2JpQWdJQ0JmWTNOelhHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2UxeHVJQ0JwYm1sMElDaDNaV1Y0S1NCN1hHNGdJQ0FnZDJWbGVDNXlaV2RwYzNSbGNrTnZiWEJ2Ym1WdWRDZ25jM2RwZEdOb0p5d2daMlYwVTNkcGRHTm9LSGRsWlhncEtWeHVJQ0I5WEc1OVhHNGlMQ0l2S2x4dUlDb2dUR2xqWlc1elpXUWdkRzhnZEdobElFRndZV05vWlNCVGIyWjBkMkZ5WlNCR2IzVnVaR0YwYVc5dUlDaEJVMFlwSUhWdVpHVnlJRzl1WlZ4dUlDb2diM0lnYlc5eVpTQmpiMjUwY21saWRYUnZjaUJzYVdObGJuTmxJR0ZuY21WbGJXVnVkSE11SUNCVFpXVWdkR2hsSUU1UFZFbERSU0JtYVd4bFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCM2FYUm9JSFJvYVhNZ2QyOXlheUJtYjNJZ1lXUmthWFJwYjI1aGJDQnBibVp2Y20xaGRHbHZibHh1SUNvZ2NtVm5ZWEprYVc1bklHTnZjSGx5YVdkb2RDQnZkMjVsY25Ob2FYQXVJQ0JVYUdVZ1FWTkdJR3hwWTJWdWMyVnpJSFJvYVhNZ1ptbHNaVnh1SUNvZ2RHOGdlVzkxSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aVnh1SUNvZ1hDSk1hV05sYm5ObFhDSXBPeUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sWEc0Z0tpQjNhWFJvSUhSb1pTQk1hV05sYm5ObExpQWdXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc1hHNGdLaUJ6YjJaMGQyRnlaU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJseHVJQ29nWENKQlV5QkpVMXdpSUVKQlUwbFRMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxsY2JpQXFJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdUlDQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlZ4dUlDb2djM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpDQnNhVzFwZEdGMGFXOXVjMXh1SUNvZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYmx4dVkyOXVjM1FnUkVWR1FWVk1WRjlQUmtaVFJWUmZRVU5EVlZKQlExa2dQU0F4TUZ4dVkyOXVjM1FnUkVWR1FWVk1WRjlNVDBGRVRVOVNSVjlQUmtaVFJWUWdQU0F3WEc1Y2JtWjFibU4wYVc5dUlHZGxkRlJvY205MGRHeGxaRk5qY205c2JDQW9ZMjl1ZEdWNGRDa2dlMXh1SUNCamIyNXpkQ0J6WTJGc1pTQTlJSGRsWlhndVkyOXVabWxuTG1WdWRpNXpZMkZzWlZ4dUlDQnBaaUFvSVdOdmJuUmxlSFF1WDNSb2NtOTBkR3hsVTJOeWIyeHNLU0I3WEc0Z0lDQWdZMjl1YzNRZ2QzSmhjSEJsY2lBOUlHTnZiblJsZUhRdUpISmxabk11ZDNKaGNIQmxjbHh1SUNBZ0lHTnZibk4wSUdsdWJtVnlJRDBnWTI5dWRHVjRkQzRrY21WbWN5NXBibTVsY2x4dUlDQWdJR3hsZENCd2NtVlBabVp6WlhRZ1BTQW9ZMjl1ZEdWNGRDNXpZM0p2Ykd4RWFYSmxZM1JwYjI0Z1BUMDlJQ2RvYjNKcGVtOXVkR0ZzSjF4dUlDQWdJQ0FnSUNBL0lIZHlZWEJ3WlhJdWMyTnliMnhzVEdWbWRGeHVJQ0FnSUNBZ0lDQTZJSGR5WVhCd1pYSXVjMk55YjJ4c1ZHOXdLVnh1SUNBZ0lDQWdmSHdnTUZ4dUlDQWdJR052Ym5SbGVIUXVYM1JvY205MGRHeGxVMk55YjJ4c0lEMGdkMlZsZUM1MWRHbHNjeTUwYUhKdmRIUnNaU2htZFc1amRHbHZiaUFvWlhaMEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCdlptWnpaWFFnUFNCamIyNTBaWGgwTG5OamNtOXNiRVJwY21WamRHbHZiaUE5UFQwZ0oyaHZjbWw2YjI1MFlXd25YRzRnSUNBZ0lDQWdJRDhnZDNKaGNIQmxjaTV6WTNKdmJHeE1aV1owWEc0Z0lDQWdJQ0FnSURvZ2QzSmhjSEJsY2k1elkzSnZiR3hVYjNCY2JpQWdJQ0FnSUdOdmJuTjBJR2x1WkdWdWRDQTlJSEJoY25ObFNXNTBLR052Ym5SbGVIUXViMlptYzJWMFFXTmpkWEpoWTNrcElDb2djMk5oYkdWY2JpQWdJQ0FnSUdaMWJtTjBhVzl1SUhSeWFXZG5aWEpUWTNKdmJHd2dLQ2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5WldOMElEMGdhVzV1WlhJdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2xjYmlBZ0lDQWdJQ0FnWlhaMExtTnZiblJsYm5SVGFYcGxJRDBnZXlCM2FXUjBhRG9nY21WamRDNTNhV1IwYUN3Z2FHVnBaMmgwT2lCeVpXTjBMbWhsYVdkb2RDQjlYRzRnSUNBZ0lDQWdJR1YyZEM1amIyNTBaVzUwVDJabWMyVjBJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lIZzZJSGR5WVhCd1pYSXVjMk55YjJ4c1RHVm1kQ3hjYmlBZ0lDQWdJQ0FnSUNBdktpcGNiaUFnSUNBZ0lDQWdJQ0FnS2lCd2IzTnBkR2wyWlNCa2FYSmxZMmwwYjI0Z1ptOXlJSGt0WVhocGN5QnBjeUJrYjNkdUxseHVJQ0FnSUNBZ0lDQWdJQ0FxSUhOdklITm9iM1ZzWkNCMWMyVWdibVZuWVhScGRtVWdiM0JsY21GMGFXOXVJRzl1SUhOamNtOXNiRlJ2Y0M1Y2JpQWdJQ0FnSUNBZ0lDQWdLbHh1SUNBZ0lDQWdJQ0FnSUNBcUlDQW9NQ3d3S1MwdExTMHRMUzB0TFMwdExTMHRMVDRnZUZ4dUlDQWdJQ0FnSUNBZ0lDQXFJQ0FnSUNBZ0lIeGNiaUFnSUNBZ0lDQWdJQ0FnS2lBZ0lDQWdJQ0I4WEc0Z0lDQWdJQ0FnSUNBZ0lDb2dJQ0FnSUNBZ2ZGeHVJQ0FnSUNBZ0lDQWdJQ0FxSUNBZ0lDQWdJSHhjYmlBZ0lDQWdJQ0FnSUNBZ0tpQWdJQ0FnSUNCMklIbGNiaUFnSUNBZ0lDQWdJQ0FnS2x4dUlDQWdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0FnSUhrNklDMTNjbUZ3Y0dWeUxuTmpjbTlzYkZSdmNGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR052Ym5SbGVIUXVKR1Z0YVhRb0ozTmpjbTlzYkNjc0lHVjJkQ2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoTllYUm9MbUZpY3lodlptWnpaWFFnTFNCd2NtVlBabVp6WlhRcElENDlJR2x1WkdWdWRDa2dlMXh1SUNBZ0lDQWdJQ0IwY21sbloyVnlVMk55YjJ4c0tDbGNiaUFnSUNBZ0lDQWdjSEpsVDJabWMyVjBJRDBnYjJabWMyVjBYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTd2dNVFlzSUhSeWRXVXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlHTnZiblJsZUhRdVgzUm9jbTkwZEd4bFUyTnliMnhzWEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNiaUFnY0hKdmNITTZJSHRjYmlBZ0lDQnNiMkZrYlc5eVpXOW1abk5sZERvZ2UxeHVJQ0FnSUNBZ2RIbHdaVG9nVzFOMGNtbHVaeXdnVG5WdFltVnlYU3hjYmlBZ0lDQWdJR1JsWm1GMWJIUTZJRVJGUmtGVlRGUmZURTlCUkUxUFVrVmZUMFpHVTBWVUxGeHVJQ0FnSUNBZ2RtRnNhV1JoZEc5eUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMllXd2dQU0J3WVhKelpVbHVkQ2gyWVd4MVpTbGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDRnBjMDVoVGloMllXd3BJQ1ltSUhaaGJDQStQU0JFUlVaQlZVeFVYMHhQUVVSTlQxSkZYMDlHUmxORlZGeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCdlptWnpaWFJCWTJOMWNtRmplVG9nZTF4dUlDQWdJQ0FnZEhsd1pUb2dXMDUxYldKbGNpd2dVM1J5YVc1blhTeGNiaUFnSUNBZ0lHUmxabUYxYkhRNklFUkZSa0ZWVEZSZlQwWkdVMFZVWDBGRFExVlNRVU5aTEZ4dUlDQWdJQ0FnZG1Gc2FXUmhkRzl5SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IyWVd3Z1BTQndZWEp6WlVsdWRDaDJZV3gxWlNsY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNGcGMwNWhUaWgyWVd3cElDWW1JSFpoYkNBK1BTQkVSVVpCVlV4VVgwOUdSbE5GVkY5QlEwTlZVa0ZEV1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNCamNtVmhkR1ZrSUNncElIdGNiaUFnSUNBdkx5QnphRzkxYkdRZ1kyRnNiQ0J5WlhObGRFeHZZV1J0YjNKbEtDa2dkRzhnWlc1aFlteGxJR3h2WVdSdGIzSmxJR1YyWlc1MExseHVJQ0FnSUhSb2FYTXVYMnh2WVdSdGIzSmxVbVZ6WlhRZ1BTQjBjblZsWEc0Z0lIMHNYRzVjYmlBZ2JXVjBhRzlrY3pvZ2UxeHVJQ0FnSUhWd1pHRjBaVXhoZVc5MWRDQW9LU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQjNjbUZ3Y0dWeUlEMGdkR2hwY3k0a2NtVm1jeTUzY21Gd2NHVnlYRzRnSUNBZ0lDQnBaaUFvZDNKaGNIQmxjaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5WldOMElEMGdkM0poY0hCbGNpNW5aWFJDYjNWdVpHbHVaME5zYVdWdWRGSmxZM1FvS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMbDkzY21Gd2NHVnlWMmxrZEdnZ1BTQnlaV04wTG5kcFpIUm9YRzRnSUNBZ0lDQWdJSFJvYVhNdVgzZHlZWEJ3WlhKSVpXbG5hSFFnUFNCeVpXTjBMbWhsYVdkb2RGeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyOXVjM1FnYVc1dVpYSWdQU0IwYUdsekxpUnlaV1p6TG1sdWJtVnlYRzRnSUNBZ0lDQmpiMjV6ZENCamFHbHNaSEpsYmlBOUlHbHVibVZ5SUNZbUlHbHVibVZ5TG1Ob2FXeGtjbVZ1WEc0Z0lDQWdJQ0JwWmlBb2FXNXVaWElwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY21WamRDQTlJR2x1Ym1WeUxtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmx1Ym1WeVYybGtkR2dnUFNCeVpXTjBMbmRwWkhSb1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDJsdWJtVnlTR1ZwWjJoMElEMGdjbVZqZEM1b1pXbG5hSFJjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR052Ym5OMElHeHZZV1JwYm1kRmJDQTlJSFJvYVhNdVgyeHZZV1JwYm1jZ0ppWWdkR2hwY3k1ZmJHOWhaR2x1Wnk0a1pXeGNiaUFnSUNBZ0lHTnZibk4wSUhKbFpuSmxjMmhGYkNBOUlIUm9hWE11WDNKbFpuSmxjMmdnSmlZZ2RHaHBjeTVmY21WbWNtVnphQzRrWld4Y2JpQWdJQ0FnSUdsbUlDaHNiMkZrYVc1blJXd3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZhVzV1WlhKSVpXbG5hSFFnTFQwZ2JHOWhaR2x1WjBWc0xtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwTG1obGFXZG9kRnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdhV1lnS0hKbFpuSmxjMmhGYkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5cGJtNWxja2hsYVdkb2RDQXRQU0J5WldaeVpYTm9SV3d1WjJWMFFtOTFibVJwYm1kRGJHbGxiblJTWldOMEtDa3VhR1ZwWjJoMFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QnBibTVsY2lCM2FXUjBhQ0JwY3lCaGJIZGhlWE1nZEdobElIWnBaWGR3YjNKMElIZHBaSFJvSUhOdmJXVm9iM2NnYVc0Z2FHOXlhWHB2Ym5SaGJGeHVJQ0FnSUNBZ0x5OGdjMk52Ykd4bGNpd2dkR2hsY21WbWIzSmxJSFJvWlNCcGJtNWxjaUIzYVdSMGFDQnphRzkxYkdRZ1ltVWdjbVZqYkdGamRXeGhkR1ZrTGx4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11YzJOeWIyeHNSR2x5WldOMGFXOXVJRDA5UFNBbmFHOXlhWHB2Ym5SaGJDY2dKaVlnWTJocGJHUnlaVzRwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYVc1dVpYSlhhV1IwYUNBOUlIZGxaWGd1ZFhScGJITXVaMlYwVW1GdVoyVlhhV1IwYUNocGJtNWxjaWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdjbVZ6WlhSTWIyRmtiVzl5WlNBb0tTQjdYRzRnSUNBZ0lDQjBhR2x6TGw5c2IyRmtiVzl5WlZKbGMyVjBJRDBnZEhKMVpWeHVJQ0FnSUgwc1hHNWNiaUFnSUNBdktpcGNiaUFnSUNBZ0tpQndjbTlqWlhOeklITjBhV05yZVNCamFHbHNaSEpsYmlCcGJpQnpZM0p2Ykd4aFlteGxJR052YlhCdmJtVnVkSE11WEc0Z0lDQWdJQ29nWTNWeWNtVnVkQ0J2Ym14NUlITjFjSEJ2Y25RZ2JHbHpkQ0JoYm1RZ2RtVnlkR2xqWVd3Z2MyTnliMnhzWlhJdVhHNGdJQ0FnSUNvdlhHNGdJQ0FnY0hKdlkyVnpjMU4wYVdOcmVTQW9LU0I3WEc0Z0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBcUlHTjFjbkpsYm5RZ1luSnZkM05sY2lCemRYQndiM0owSUNkemRHbGphM2tuSUc5eUlDY3RkMlZpYTJsMExYTjBhV05yZVNjc0lITnZJSFJvWlhKbEozTWdibThnYm1WbFpGeHVJQ0FnSUNBZ0lDb2dkRzhnWkc4Z1puVnlkR2hsY2lCdGIzSmxMbHh1SUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0JwWmlBb2QyVmxlQzUxZEdsc2N5NXpkWEJ3YjNKMFUzUnBZMnQ1S0NrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNBdkx5QmpkWEp5Wlc1MElHOXViSGtnYzNWd2NHOXlkQ0JzYVhOMElHRnVaQ0IyWlhKMGFXTmhiQ0J6WTNKdmJHeGxjaTVjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbk5qY205c2JFUnBjbVZqZEdsdmJpQTlQVDBnSjJodmNtbDZiMjUwWVd3bktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyOXVjM1FnYzNScFkydDVRMmhwYkdSeVpXNGdQU0IwYUdsekxsOXpkR2xqYTNsRGFHbHNaSEpsYmx4dUlDQWdJQ0FnWTI5dWMzUWdiR1Z1SUQwZ2MzUnBZMnQ1UTJocGJHUnlaVzRnSmlZZ2MzUnBZMnQ1UTJocGJHUnlaVzR1YkdWdVozUm9JSHg4SURCY2JpQWdJQ0FnSUdsbUlDaHNaVzRnUEQwZ01Da2dleUJ5WlhSMWNtNGdmVnh1WEc0Z0lDQWdJQ0JqYjI1emRDQmpiMjUwWVdsdVpYSWdQU0IwYUdsekxpUmxiRnh1SUNBZ0lDQWdhV1lnS0NGamIyNTBZV2x1WlhJcElIc2djbVYwZFhKdUlIMWNiaUFnSUNBZ0lHTnZibk4wSUhOamNtOXNiRlJ2Y0NBOUlHTnZiblJoYVc1bGNpNXpZM0p2Ykd4VWIzQmNibHh1SUNBZ0lDQWdiR1YwSUhOMGFXTnJlVU5vYVd4a1hHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElHeGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJSE4wYVdOcmVVTm9hV3hrSUQwZ2MzUnBZMnQ1UTJocGJHUnlaVzViYVYxY2JpQWdJQ0FnSUNBZ2FXWWdLSE4wYVdOcmVVTm9hV3hrTGw5cGJtbDBUMlptYzJWMFZHOXdJRHdnYzJOeWIyeHNWRzl3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdjM1JwWTJ0NVEyaHBiR1F1WDJGa1pGTjBhV05yZVNncFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdjM1JwWTJ0NVEyaHBiR1F1WDNKbGJXOTJaVk4wYVdOcmVTZ3BYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdhR0Z1Wkd4bFUyTnliMnhzSUNobGRtVnVkQ2tnZTF4dUlDQWdJQ0FnZDJWbGVDNTFkR2xzY3k1blpYUlVhSEp2ZEhSc1pVeGhlbmxzYjJGa0tESTFMQ0IwYUdsekxpUmxiQ3dnSjNOamNtOXNiQ2NwS0NsY2JpQWdJQ0FnSUdkbGRGUm9jbTkwZEd4bFpGTmpjbTlzYkNoMGFHbHpLU2hsZG1WdWRDbGNibHh1SUNBZ0lDQWdkR2hwY3k1d2NtOWpaWE56VTNScFkydDVLQ2xjYmx4dUlDQWdJQ0FnTHk4Z1ptbHlaU0JzYjJGa2JXOXlaU0JsZG1WdWRDNWNiaUFnSUNBZ0lHTnZibk4wSUdsdWJtVnlJRDBnZEdocGN5NGtjbVZtY3k1cGJtNWxjbHh1SUNBZ0lDQWdhV1lnS0dsdWJtVnlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR2x1Ym1WeVRHVnVaM1JvSUQwZ2RHaHBjeTV6WTNKdmJHeEVhWEpsWTNScGIyNGdQVDA5SUNkb2IzSnBlbTl1ZEdGc0oxeHVJQ0FnSUNBZ0lDQWdJRDhnZEdocGN5NWZhVzV1WlhKWGFXUjBhRnh1SUNBZ0lDQWdJQ0FnSURvZ2RHaHBjeTVmYVc1dVpYSklaV2xuYUhSY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwYUdsekxsOXBibTVsY2t4bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJsdWJtVnlUR1Z1WjNSb0lEMGdhVzV1WlhKTVpXNW5kR2hjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmFXNXVaWEpNWlc1bmRHZ2dJVDA5SUdsdWJtVnlUR1Z1WjNSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZhVzV1WlhKTVpXNW5kR2dnUFNCcGJtNWxja3hsYm1kMGFGeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZZV1J0YjNKbFVtVnpaWFFnUFNCMGNuVmxYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDJ4dllXUnRiM0psVW1WelpYUWdKaVlnZEdocGN5NXlaV0ZqYUVKdmRIUnZiU2gwYUdsekxteHZZV1J0YjNKbGIyWm1jMlYwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyeHZZV1J0YjNKbFVtVnpaWFFnUFNCbVlXeHpaVnh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVKR1Z0YVhRb0oyeHZZV1J0YjNKbEp5d2daWFpsYm5RcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVmhZMmhVYjNBZ0tDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2QzSmhjSEJsY2lBOUlIUm9hWE11SkhKbFpuTXVkM0poY0hCbGNseHVJQ0FnSUNBZ2NtVjBkWEp1SUNnaElYZHlZWEJ3WlhJcElDWW1JQ2gzY21Gd2NHVnlMbk5qY205c2JGUnZjQ0E4UFNBd0tWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCeVpXRmphRUp2ZEhSdmJTQW9iMlptYzJWMEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCM2NtRndjR1Z5SUQwZ2RHaHBjeTRrY21WbWN5NTNjbUZ3Y0dWeVhHNGdJQ0FnSUNCamIyNXpkQ0JwYm01bGNpQTlJSFJvYVhNdUpISmxabk11YVc1dVpYSmNiaUFnSUNBZ0lHOW1abk5sZENBOUlIQmhjbk5sU1c1MEtHOW1abk5sZENCOGZDQXdLU0FxSUhkbFpYZ3VZMjl1Wm1sbkxtVnVkaTV6WTJGc1pWeHVYRzRnSUNBZ0lDQnBaaUFvZDNKaGNIQmxjaUFtSmlCcGJtNWxjaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JyWlhrZ1BTQjBhR2x6TG5OamNtOXNiRVJwY21WamRHbHZiaUE5UFQwZ0oyaHZjbWw2YjI1MFlXd25YRzRnSUNBZ0lDQWdJQ0FnUHlBbmQybGtkR2duWEc0Z0lDQWdJQ0FnSUNBZ09pQW5hR1ZwWjJoMEoxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCcGJtNWxja3hsYm1kMGFDQTlJSFJvYVhOYllGOXBibTVsY2lSN2EyVjVXekJkTG5SdlZYQndaWEpEWVhObEtDbDlKSHRyWlhrdWMzVmljM1J5S0RFcGZXQmRYRzRnSUNBZ0lDQWdJR052Ym5OMElIZHlZWEJ3WlhKTVpXNW5kR2dnUFNCMGFHbHpXMkJmZDNKaGNIQmxjaVI3YTJWNVd6QmRMblJ2VlhCd1pYSkRZWE5sS0NsOUpIdHJaWGt1YzNWaWMzUnlLREVwZldCZFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUhOamNtOXNiRTltWm5ObGRDQTlJSFJvYVhNdWMyTnliMnhzUkdseVpXTjBhVzl1SUQwOVBTQW5hRzl5YVhwdmJuUmhiQ2RjYmlBZ0lDQWdJQ0FnSUNBL0lIZHlZWEJ3WlhJdWMyTnliMnhzVEdWbWRGeHVJQ0FnSUNBZ0lDQWdJRG9nZDNKaGNIQmxjaTV6WTNKdmJHeFViM0JjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSE5qY205c2JFOW1abk5sZENBK1BTQnBibTVsY2t4bGJtZDBhQ0F0SUhkeVlYQndaWEpNWlc1bmRHZ2dMU0J2Wm1aelpYUmNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQm9ZVzVrYkdWVWIzVmphRk4wWVhKMElDaGxkbVZ1ZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyeHZZV1JwYm1jZ2ZId2dkR2hwY3k1ZmNtVm1jbVZ6YUNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMGIzVmphQ0E5SUdWMlpXNTBMbU5vWVc1blpXUlViM1ZqYUdWeld6QmRYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzUnZkV05vVUdGeVlXMXpJRDBnZTF4dUlDQWdJQ0FnSUNBZ0lISmxZV05vVkc5d09pQjBhR2x6TG5KbFlXTm9WRzl3S0Nrc1hHNGdJQ0FnSUNBZ0lDQWdjbVZoWTJoQ2IzUjBiMjA2SUhSb2FYTXVjbVZoWTJoQ2IzUjBiMjBvS1N4Y2JpQWdJQ0FnSUNBZ0lDQnpkR0Z5ZEZSdmRXTm9SWFpsYm5RNklIUnZkV05vTEZ4dUlDQWdJQ0FnSUNBZ0lITjBZWEowV0RvZ2RHOTFZMmd1Y0dGblpWZ3NYRzRnSUNBZ0lDQWdJQ0FnYzNSaGNuUlpPaUIwYjNWamFDNXdZV2RsV1N4Y2JpQWdJQ0FnSUNBZ0lDQjBhVzFsVTNSaGJYQTZJR1YyWlc1MExuUnBiV1ZUZEdGdGNGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHaGhibVJzWlZSdmRXTm9UVzkyWlNBb1pYWmxiblFwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1ZmRHOTFZMmhRWVhKaGJYTWdmSHdnSVhSb2FYTXVYM0psWm5KbGMyZ2dKaVlnSVhSb2FYTXVYMnh2WVdScGJtY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpiMjV6ZENCcGJtNWxjaUE5SUhSb2FYTXVKSEpsWm5NdWFXNXVaWEpjYmlBZ0lDQWdJR052Ym5OMElIc2djM1JoY25SWkxDQnlaV0ZqYUZSdmNDd2djbVZoWTJoQ2IzUjBiMjBnZlNBOUlIUm9hWE11WDNSdmRXTm9VR0Z5WVcxelhHNGdJQ0FnSUNCcFppQW9hVzV1WlhJcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHOTFZMmdnUFNCbGRtVnVkQzVqYUdGdVoyVmtWRzkxWTJobGMxc3dYVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnZabVp6WlhSWklEMGdkRzkxWTJndWNHRm5aVmtnTFNCemRHRnlkRmxjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdaR2x5SUQwZ2IyWm1jMlYwV1NBK0lEQWdQeUFuWkc5M2JpY2dPaUFuZFhBblhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNSdmRXTm9VR0Z5WVcxekxtOW1abk5sZEZrZ1BTQnZabVp6WlhSWlhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxsOXlaV1p5WlhOb0lDWW1JQ2hrYVhJZ1BUMDlJQ2RrYjNkdUp5a2dKaVlnY21WaFkyaFViM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXWnlaWE5vTG5CMWJHeHBibWRFYjNkdUtHOW1abk5sZEZrcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9kR2hwY3k1ZmJHOWhaR2x1WnlBbUppQW9aR2x5SUQwOVBTQW5kWEFuS1NBbUppQnlaV0ZqYUVKdmRIUnZiU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJ4dllXUnBibWN1Y0hWc2JHbHVaMVZ3S0MxdlptWnpaWFJaS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUdoaGJtUnNaVlJ2ZFdOb1JXNWtJQ2hsZG1WdWRDa2dlMXh1SUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDkwYjNWamFGQmhjbUZ0Y3lCOGZDQWhkR2hwY3k1ZmNtVm1jbVZ6YUNBbUppQWhkR2hwY3k1ZmJHOWhaR2x1WnlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdOdmJuTjBJR2x1Ym1WeUlEMGdkR2hwY3k0a2NtVm1jeTVwYm01bGNseHVJQ0FnSUNBZ1kyOXVjM1FnZXlCemRHRnlkRmtzSUhKbFlXTm9WRzl3TENCeVpXRmphRUp2ZEhSdmJTQjlJRDBnZEdocGN5NWZkRzkxWTJoUVlYSmhiWE5jYmlBZ0lDQWdJR2xtSUNocGJtNWxjaWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpkQ0IwYjNWamFDQTlJR1YyWlc1MExtTm9ZVzVuWldSVWIzVmphR1Z6V3pCZFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUc5bVpuTmxkRmtnUFNCMGIzVmphQzV3WVdkbFdTQXRJSE4wWVhKMFdWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCa2FYSWdQU0J2Wm1aelpYUlpJRDRnTUNBL0lDZGtiM2R1SnlBNklDZDFjQ2RjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkRzkxWTJoUVlYSmhiWE11YjJabWMyVjBXU0E5SUc5bVpuTmxkRmxjYmlBZ0lDQWdJQ0FnYVdZZ0tIUm9hWE11WDNKbFpuSmxjMmdnSmlZZ0tHUnBjaUE5UFQwZ0oyUnZkMjRuS1NBbUppQnlaV0ZqYUZSdmNDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0psWm5KbGMyZ3VjSFZzYkdsdVowVnVaQ2dwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RHaHBjeTVmYkc5aFpHbHVaeUFtSmlBb1pHbHlJRDA5UFNBbmRYQW5LU0FtSmlCeVpXRmphRUp2ZEhSdmJTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnh2WVdScGJtY3VjSFZzYkdsdVowVnVaQ2dwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdSbGJHVjBaU0IwYUdsekxsOTBiM1ZqYUZCaGNtRnRjMXh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVJaXdpTHlwY2JpQXFJRXhwWTJWdWMyVmtJSFJ2SUhSb1pTQkJjR0ZqYUdVZ1UyOW1kSGRoY21VZ1JtOTFibVJoZEdsdmJpQW9RVk5HS1NCMWJtUmxjaUJ2Ym1WY2JpQXFJRzl5SUcxdmNtVWdZMjl1ZEhKcFluVjBiM0lnYkdsalpXNXpaU0JoWjNKbFpXMWxiblJ6TGlBZ1UyVmxJSFJvWlNCT1QxUkpRMFVnWm1sc1pWeHVJQ29nWkdsemRISnBZblYwWldRZ2QybDBhQ0IwYUdseklIZHZjbXNnWm05eUlHRmtaR2wwYVc5dVlXd2dhVzVtYjNKdFlYUnBiMjVjYmlBcUlISmxaMkZ5WkdsdVp5QmpiM0I1Y21sbmFIUWdiM2R1WlhKemFHbHdMaUFnVkdobElFRlRSaUJzYVdObGJuTmxjeUIwYUdseklHWnBiR1ZjYmlBcUlIUnZJSGx2ZFNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1ZjYmlBcUlGd2lUR2xqWlc1elpWd2lLVHNnZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlZ4dUlDb2dkMmwwYUNCMGFHVWdUR2xqWlc1elpTNGdJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxGeHVJQ29nYzI5bWRIZGhjbVVnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNWNiaUFxSUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WlhHNGdLaUJMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xpQWdVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdWY2JpQXFJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUWdiR2x0YVhSaGRHbHZibk5jYmlBcUlIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUh0Y2JpQWdiV1YwYUc5a2N6b2dlMXh1SUNBZ0lHaGhibVJzWlV4cGMzUlRZM0p2Ykd3Z0tHVjJaVzUwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pWTmpjbTlzYkNobGRtVnVkQ2xjYmx4dUlDQWdJQ0FnYVdZZ0tIZGxaWGd1ZFhScGJITXVjM1Z3Y0c5eWRGTjBhV05yZVNncEtTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQmpiMjV6ZENCelkzSnZiR3hVYjNBZ1BTQjBhR2x6TGlSbGJDNXpZM0p2Ykd4VWIzQmNiaUFnSUNBZ0lHTnZibk4wSUdnZ1BTQjBhR2x6TGlSamFHbHNaSEpsYmk1bWFXeDBaWElvZG0wZ1BUNGdkbTB1SkhKbFpuTXVhR1ZoWkdWeUtWeHVYRzRnSUNBZ0lDQnBaaUFvYUM1c1pXNW5kR2dnUEQwZ01Da2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JvTG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNob1cybGRMbWx1YVhSVWIzQWdQQ0J6WTNKdmJHeFViM0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQm9XMmxkTG1Ga1pGTjBhV05yZVNncFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdhRnRwWFM1eVpXMXZkbVZUZEdsamEza29LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JseHVhVzF3YjNKMElITmpjbTlzYkdGaWJHVWdabkp2YlNBbkxpOXpZM0p2Ykd4aFlteGxKMXh1YVcxd2IzSjBJR3hwYzNRZ1puSnZiU0FuTGk5c2FYTjBKMXh1WEc1bGVIQnZjblFnZTF4dUlDQnpZM0p2Ykd4aFlteGxMRnh1SUNCc2FYTjBYRzU5WEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibWx0Y0c5eWRDQjdJSE5qY205c2JHRmliR1VzSUd4cGMzUWdZWE1nYkdsemRFMXBlR2x1SUgwZ1puSnZiU0FuTGk5dGFYaHBibk1uWEc1Y2JtWjFibU4wYVc5dUlHZGxkRXhwYzNRZ0tIZGxaWGdwSUh0Y2JpQWdZMjl1YzNRZ2UxeHVJQ0FnSUdWNGRISmhZM1JEYjIxd2IyNWxiblJUZEhsc1pTeGNiaUFnSUNCamNtVmhkR1ZGZG1WdWRFMWhjRnh1SUNCOUlEMGdkMlZsZUZ4dVhHNGdJSEpsZEhWeWJpQjdYRzRnSUNBZ2JtRnRaVG9nSjNkbFpYZ3RiR2x6ZENjc1hHNGdJQ0FnYldsNGFXNXpPaUJiYzJOeWIyeHNZV0pzWlN3Z2JHbHpkRTFwZUdsdVhTeGNiaUFnSUNCamIyMXdkWFJsWkRvZ2UxeHVJQ0FnSUNBZ2QzSmhjSEJsY2tOc1lYTnpJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTJ4aGMzTkJjbkpoZVNBOUlGc25kMlZsZUMxc2FYTjBKeXdnSjNkbFpYZ3RiR2x6ZEMxM2NtRndjR1Z5Snl3Z0ozZGxaWGd0WTNRblhWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXWnlaWE5vSUNZbUlHTnNZWE56UVhKeVlYa3VjSFZ6YUNnbmQybDBhQzF5WldaeVpYTm9KeWxjYmlBZ0lDQWdJQ0FnZEdocGN5NWZiRzloWkdsdVp5QW1KaUJqYkdGemMwRnljbUY1TG5CMWMyZ29KM2RwZEdndGJHOWhaR2x1WnljcFhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCamJHRnpjMEZ5Y21GNUxtcHZhVzRvSnlBbktWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCdFpYUm9iMlJ6T2lCN1hHNGdJQ0FnSUNCamNtVmhkR1ZEYUdsc1pISmxiaUFvYUNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCemJHOTBjeUE5SUhSb2FYTXVKSE5zYjNSekxtUmxabUYxYkhRZ2ZId2dXMTFjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMlZzYkhNZ1BTQnpiRzkwY3k1bWFXeDBaWElvZG01dlpHVWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2doZG01dlpHVXVkR0ZuSUh4OElDRjJibTlrWlM1amIyMXdiMjVsYm5SUGNIUnBiMjV6S1NCeVpYUjFjbTRnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlZ4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1cxeHVJQ0FnSUNBZ0lDQWdJR2dvSjJGeWRHbGpiR1VuTENCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WldZNklDZHBibTVsY2ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMGFXTkRiR0Z6Y3pvZ0ozZGxaWGd0YkdsemRDMXBibTVsY2lCM1pXVjRMV04wSjF4dUlDQWdJQ0FnSUNBZ0lIMHNJSFJvYVhNdVgyTmxiR3h6S1Z4dUlDQWdJQ0FnSUNCZFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhKbGJtUmxjaUFvWTNKbFlYUmxSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1M1pXVjRWSGx3WlNBOUlDZHNhWE4wSjF4dVhHNGdJQ0FnSUNCMGFHbHpMaVJ1WlhoMFZHbGpheWdvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWRYQmtZWFJsVEdGNWIzVjBLQ2xjYmlBZ0lDQWdJSDBwWEc1Y2JpQWdJQ0FnSUhKbGRIVnliaUJqY21WaGRHVkZiR1Z0Wlc1MEtDZHRZV2x1Snl3Z2UxeHVJQ0FnSUNBZ0lDQnlaV1k2SUNkM2NtRndjR1Z5Snl4Y2JpQWdJQ0FnSUNBZ1lYUjBjbk02SUhzZ0ozZGxaWGd0ZEhsd1pTYzZJQ2RzYVhOMEp5QjlMRnh1SUNBZ0lDQWdJQ0J6ZEdGMGFXTkRiR0Z6Y3pvZ2RHaHBjeTUzY21Gd2NHVnlRMnhoYzNNc1hHNGdJQ0FnSUNBZ0lHOXVPaUJqY21WaGRHVkZkbVZ1ZEUxaGNDaDBhR2x6TENCN1hHNGdJQ0FnSUNBZ0lDQWdjMk55YjJ4c09pQjBhR2x6TG1oaGJtUnNaVXhwYzNSVFkzSnZiR3dzWEc0Z0lDQWdJQ0FnSUNBZ2RHOTFZMmh6ZEdGeWREb2dkR2hwY3k1b1lXNWtiR1ZVYjNWamFGTjBZWEowTEZ4dUlDQWdJQ0FnSUNBZ0lIUnZkV05vYlc5MlpUb2dkR2hwY3k1b1lXNWtiR1ZVYjNWamFFMXZkbVVzWEc0Z0lDQWdJQ0FnSUNBZ2RHOTFZMmhsYm1RNklIUm9hWE11YUdGdVpHeGxWRzkxWTJoRmJtUmNiaUFnSUNBZ0lDQWdmU2tzWEc0Z0lDQWdJQ0FnSUhOMFlYUnBZMU4wZVd4bE9pQmxlSFJ5WVdOMFEyOXRjRzl1Wlc1MFUzUjViR1VvZEdocGN5bGNiaUFnSUNBZ0lIMHNJSFJvYVhNdVkzSmxZWFJsUTJocGJHUnlaVzRvWTNKbFlYUmxSV3hsYldWdWRDa3BYRzRnSUNBZ2ZWeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNiaUFnYVc1cGRDQW9kMlZsZUNrZ2UxeHVJQ0FnSUhkbFpYZ3VjbVZuYVhOMFpYSkRiMjF3YjI1bGJuUW9KMnhwYzNRbkxDQm5aWFJNYVhOMEtIZGxaWGdwS1Z4dUlDQjlYRzU5WEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibHh1YVcxd2IzSjBJSHNnYzJOeWIyeHNZV0pzWlN3Z2JHbHpkQ0JoY3lCc2FYTjBUV2w0YVc0Z2ZTQm1jbTl0SUNjdUwyMXBlR2x1Y3lkY2JseHVablZ1WTNScGIyNGdaMlYwVTJOeWIyeHNaWElnS0hkbFpYZ3BJSHRjYmlBZ1kyOXVjM1FnZTF4dUlDQWdJR1Y0ZEhKaFkzUkRiMjF3YjI1bGJuUlRkSGxzWlN4Y2JpQWdJQ0JqY21WaGRHVkZkbVZ1ZEUxaGNGeHVJQ0I5SUQwZ2QyVmxlRnh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnYm1GdFpUb2dKM2RsWlhndGMyTnliMnhzWlhJbkxGeHVJQ0FnSUcxcGVHbHVjem9nVzNOamNtOXNiR0ZpYkdVc0lHeHBjM1JOYVhocGJsMHNYRzRnSUNBZ2NISnZjSE02SUh0Y2JpQWdJQ0FnSUhOamNtOXNiRVJwY21WamRHbHZiam9nZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUJiVTNSeWFXNW5YU3hjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nSjNabGNuUnBZMkZzSnl4Y2JpQWdJQ0FnSUNBZ2RtRnNhV1JoZEc5eUlDaDJZV3gxWlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmJKMmh2Y21sNmIyNTBZV3duTENBbmRtVnlkR2xqWVd3blhTNXBibVJsZUU5bUtIWmhiSFZsS1NBaFBUMGdMVEZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUhOamNtOXNiR0ZpYkdVNklIdGNiaUFnSUNBZ0lDQWdkSGx3WlRvZ1cwSnZiMnhsWVc1ZExGeHVJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQjBjblZsWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmlBZ0lDQmpiMjF3ZFhSbFpEb2dlMXh1SUNBZ0lDQWdkM0poY0hCbGNrTnNZWE56SUNncElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyeGhjM05CY25KaGVTQTlJRnNuZDJWbGVDMXpZM0p2Ykd4bGNpY3NJQ2QzWldWNExYTmpjbTlzYkdWeUxYZHlZWEJ3WlhJbkxDQW5kMlZsZUMxamRDZGRYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbk5qY205c2JFUnBjbVZqZEdsdmJpQTlQVDBnSjJodmNtbDZiMjUwWVd3bktTQjdYRzRnSUNBZ0lDQWdJQ0FnWTJ4aGMzTkJjbkpoZVM1d2RYTm9LQ2QzWldWNExYTmpjbTlzYkdWeUxXaHZjbWw2YjI1MFlXd25LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUdOc1lYTnpRWEp5WVhrdWNIVnphQ2duZDJWbGVDMXpZM0p2Ykd4bGNpMTJaWEowYVdOaGJDY3BYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TG5OamNtOXNiR0ZpYkdVcElIdGNiaUFnSUNBZ0lDQWdJQ0JqYkdGemMwRnljbUY1TG5CMWMyZ29KM2RsWlhndGMyTnliMnhzWlhJdFpHbHpZV0pzWldRbktWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmpiR0Z6YzBGeWNtRjVMbXB2YVc0b0p5QW5LVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnRaWFJvYjJSek9pQjdYRzRnSUNBZ0lDQmpjbVZoZEdWRGFHbHNaSEpsYmlBb2FDa2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQnpiRzkwY3lBOUlIUm9hWE11SkhOc2IzUnpMbVJsWm1GMWJIUWdmSHdnVzExY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWTJWc2JITWdQU0J6Ykc5MGN5NW1hV3gwWlhJb2RtNXZaR1VnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJR2xtSUNnaGRtNXZaR1V1ZEdGbklIeDhJQ0YyYm05a1pTNWpiMjF3YjI1bGJuUlBjSFJwYjI1ektTQnlaWFIxY200Z1ptRnNjMlZjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpWeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXMXh1SUNBZ0lDQWdJQ0FnSUdnb0oyRnlkR2xqYkdVbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpXWTZJQ2RwYm01bGNpY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCemRHRjBhV05EYkdGemN6b2dKM2RsWlhndGMyTnliMnhzWlhJdGFXNXVaWElnZDJWbGVDMWpkQ2RjYmlBZ0lDQWdJQ0FnSUNCOUxDQjBhR2x6TGw5alpXeHNjeWxjYmlBZ0lDQWdJQ0FnWFZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J5Wlc1a1pYSWdLR055WldGMFpVVnNaVzFsYm5RcElIdGNiaUFnSUNBZ0lIUm9hWE11ZDJWbGVGUjVjR1VnUFNBbmMyTnliMnhzWlhJblhHNWNiaUFnSUNBZ0lDOHFJR2x6ZEdGdVluVnNJR2xuYm05eVpTQnVaWGgwSUNvdlhHNGdJQ0FnSUNBdkx5QnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1BUMDlJQ2RrWlhabGJHOXdiV1Z1ZENjcElIdGNiaUFnSUNBZ0lDOHZJQ0FnZG1Gc2FXUmhkR1ZUZEhsc1pYTW9KM05qY205c2JHVnlKeXdnZEdocGN5NGtkbTV2WkdVdVpHRjBZU0FtSmlCMGFHbHpMaVIyYm05a1pTNWtZWFJoTG5OMFlYUnBZMU4wZVd4bEtWeHVJQ0FnSUNBZ0x5OGdmVnh1WEc0Z0lDQWdJQ0IwYUdsekxsOWpaV3hzY3lBOUlIUm9hWE11SkhOc2IzUnpMbVJsWm1GMWJIUWdmSHdnVzExY2JpQWdJQ0FnSUhSb2FYTXVKRzVsZUhSVWFXTnJLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1MWNHUmhkR1ZNWVhsdmRYUW9LVnh1SUNBZ0lDQWdmU2xjYmx4dUlDQWdJQ0FnY21WMGRYSnVJR055WldGMFpVVnNaVzFsYm5Rb0oyMWhhVzRuTENCN1hHNGdJQ0FnSUNBZ0lISmxaam9nSjNkeVlYQndaWEluTEZ4dUlDQWdJQ0FnSUNCaGRIUnljem9nZXlBbmQyVmxlQzEwZVhCbEp6b2dKM05qY205c2JHVnlKeUI5TEZ4dUlDQWdJQ0FnSUNCdmJqb2dZM0psWVhSbFJYWmxiblJOWVhBb2RHaHBjeXdnZTF4dUlDQWdJQ0FnSUNBZ0lITmpjbTlzYkRvZ2RHaHBjeTVvWVc1a2JHVlRZM0p2Ykd3c1hHNGdJQ0FnSUNBZ0lDQWdkRzkxWTJoemRHRnlkRG9nZEdocGN5NW9ZVzVrYkdWVWIzVmphRk4wWVhKMExGeHVJQ0FnSUNBZ0lDQWdJSFJ2ZFdOb2JXOTJaVG9nZEdocGN5NW9ZVzVrYkdWVWIzVmphRTF2ZG1Vc1hHNGdJQ0FnSUNBZ0lDQWdkRzkxWTJobGJtUTZJSFJvYVhNdWFHRnVaR3hsVkc5MVkyaEZibVJjYmlBZ0lDQWdJQ0FnZlNrc1hHNGdJQ0FnSUNBZ0lITjBZWFJwWTBOc1lYTnpPaUIwYUdsekxuZHlZWEJ3WlhKRGJHRnpjeXhjYmlBZ0lDQWdJQ0FnYzNSaGRHbGpVM1I1YkdVNklHVjRkSEpoWTNSRGIyMXdiMjVsYm5SVGRIbHNaU2gwYUdsektWeHVJQ0FnSUNBZ2ZTd2dkR2hwY3k1amNtVmhkR1ZEYUdsc1pISmxiaWhqY21WaGRHVkZiR1Z0Wlc1MEtTbGNiaUFnSUNCOVhHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ2UxeHVJQ0JwYm1sMElDaDNaV1Y0S1NCN1hHNGdJQ0FnZDJWbGVDNXlaV2RwYzNSbGNrTnZiWEJ2Ym1WdWRDZ25jMk55YjJ4c1pYSW5MQ0JuWlhSVFkzSnZiR3hsY2loM1pXVjRLU2xjYmlBZ2ZWeHVmVnh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0FnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzRnSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxYRzRnS2lCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrSUd4cGJXbDBZWFJwYjI1elhHNGdLaUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVYRzR2S2lwY2JpQXFJRUJtYVd4bGIzWmxjblpwWlhjZ2QyRjBaWEptWVd4c1hHNGdLaUJPVDFSRk9pQnZibXg1SUhOMWNIQnZjblFnWm5Wc2JDQnpZM0psWlc0Z2QybGtkR2dnZDJGMFpYSm1ZV3hzTGx4dUlDb3ZYRzVjYm1sdGNHOXlkQ0I3SUhOamNtOXNiR0ZpYkdVZ2ZTQm1jbTl0SUNjdUwyMXBlR2x1Y3lkY2JseHVZMjl1YzNRZ1RrOVNUVUZNWDBkQlVGOVRTVnBGSUQwZ016SmNibU52Ym5OMElFUkZSa0ZWVEZSZlEwOU1WVTFPWDBOUFZVNVVJRDBnTVZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJYWVhSbGNtWmhiR3dnS0hkbFpYZ3BJSHRjYmlBZ1kyOXVjM1FnZTF4dUlDQWdJR1Y0ZEhKaFkzUkRiMjF3YjI1bGJuUlRkSGxzWlN4Y2JpQWdJQ0JqY21WaGRHVkZkbVZ1ZEUxaGNGeHVJQ0I5SUQwZ2QyVmxlRnh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnYm1GdFpUb2dKM2RsWlhndGQyRjBaWEptWVd4c0p5eGNiaUFnSUNCdGFYaHBibk02SUZ0elkzSnZiR3hoWW14bFhTeGNiaUFnSUNCd2NtOXdjem9nZTF4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQnpjR1ZqYVdacFpXUWdaMkZ3SUhOcGVtVXVYRzRnSUNBZ0lDQWdLaUIyWVd4MVpTQmpZVzRnWW1VZ2JuVnRZbVZ5SUc5eUlDZHViM0p0WVd3bkxpQW5ibTl5YldGc0p5QW9Nekp3ZUNrZ1lua2daR1ZtWVhWc2RDNWNiaUFnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdZMjlzZFcxdVIyRndPaUI3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJRnRUZEhKcGJtY3NJRTUxYldKbGNsMHNYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJQ2R1YjNKdFlXd25MRnh1SUNBZ0lDQWdJQ0IyWVd4cFpHRjBiM0lnS0haaGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkbUZzSUh4OElIWmhiQ0E5UFQwZ0oyNXZjbTFoYkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbFhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUhaaGJDQTlJSEJoY25ObFNXNTBLSFpoYkNsY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0lXbHpUbUZPS0haaGJDa2dKaVlnZG1Gc0lENGdNRnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQjBhR1VnYldGNGFXMTFiU0JqYjJ4MWJXNGdZMjkxYm5SekxseHVJQ0FnSUNBZ0lDb2dkbUZzZFdVZ1kyRnVJR0psSUc1MWJXSmxjaUJ2Y2lBbllYVjBieWN1SURFZ1lua2daR1ZtWVhWc2RDNWNiaUFnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdZMjlzZFcxdVEyOTFiblE2SUh0Y2JpQWdJQ0FnSUNBZ2RIbHdaVG9nVzFOMGNtbHVaeXdnVG5WdFltVnlYU3hjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nUkVWR1FWVk1WRjlEVDB4VlRVNWZRMDlWVGxRc1hHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhSdmNpQW9kbUZzS1NCN1hHNGdJQ0FnSUNBZ0lDQWdkbUZzSUQwZ2NHRnljMlZKYm5Rb2RtRnNLVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUFoYVhOT1lVNG9kbUZzS1NBbUppQjJZV3dnUGlBd1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FxSUhSb1pTQnRhVzFwYlhWdElHTnZiSFZ0YmlCM2FXUjBhQzVjYmlBZ0lDQWdJQ0FxSUhaaGJIVmxJR05oYmlCaVpTQnVkVzFpWlhJZ2IzSWdKMkYxZEc4bkxpQW5ZWFYwYnljZ1lua2daR1ZtWVhWc2RDNWNiaUFnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdZMjlzZFcxdVYybGtkR2c2SUh0Y2JpQWdJQ0FnSUNBZ2RIbHdaVG9nVzFOMGNtbHVaeXdnVG5WdFltVnlYU3hjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nSjJGMWRHOG5MRnh1SUNBZ0lDQWdJQ0IyWVd4cFpHRjBiM0lnS0haaGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDZ2hkbUZzSUh4OElIWmhiQ0E5UFQwZ0oyRjFkRzhuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkSEoxWlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0IyWVd3Z1BTQndZWEp6WlVsdWRDaDJZV3dwWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUNGcGMwNWhUaWgyWVd3cElDWW1JSFpoYkNBK0lEQmNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQnRiM1Z1ZEdWa0lDZ3BJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyNWxlSFJVYVdOcktDbGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2RYQmtZWFJsWkNBb0tTQjdYRzRnSUNBZ0lDQjBhR2x6TGlSdVpYaDBWR2xqYXloMGFHbHpMbDl1WlhoMFZHbGpheWdwS1Z4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J0WlhSb2IyUnpPaUI3WEc0Z0lDQWdJQ0JmWTNKbFlYUmxRMmhwYkdSeVpXNGdLR2dzSUhKdmIzUlRkSGxzWlNrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCemJHOTBjeUE5SUhSb2FYTXVKSE5zYjNSekxtUmxabUYxYkhRZ2ZId2dXMTFjYmlBZ0lDQWdJQ0FnZEdocGN5NWZhR1ZoWkdWeWN5QTlJRnRkWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjkwYUdWeWN5QTlJRnRkWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk5sYkd4eklEMGdjMnh2ZEhNdVptbHNkR1Z5S0hadWIyUmxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBaaUFvSVhadWIyUmxMblJoWnlCOGZDQWhkbTV2WkdVdVkyOXRjRzl1Wlc1MFQzQjBhVzl1Y3lrZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdkR0ZuSUQwZ2RtNXZaR1V1WTI5dGNHOXVaVzUwVDNCMGFXOXVjeTUwWVdkY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvZEdGbklEMDlQU0FuY21WbWNtVnphQ2NnZkh3Z2RHRm5JRDA5UFNBbmJHOWhaR2x1WnljcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTmJZRjhrZTNSaFozMWdYU0E5SUhadWIyUmxYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLSFJoWnlBOVBUMGdKMmhsWVdSbGNpY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJobFlXUmxjbk11Y0hWemFDaDJibTlrWlNsY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RHRm5JQ0U5UFNBblkyVnNiQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyOTBhR1Z5Y3k1d2RYTm9LSFp1YjJSbEtWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUIwY25WbFhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxRMkZzWXloeWIyOTBVM1I1YkdVcFhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJkbGJrTnZiSFZ0Ym5Nb2FDbGNiaUFnSUNBZ0lDQWdiR1YwSUdOb2FXeGtjbVZ1SUQwZ1cxMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmNtVm1jbVZ6YUNBbUppQmphR2xzWkhKbGJpNXdkWE5vS0hSb2FYTXVYM0psWm5KbGMyZ3BYRzRnSUNBZ0lDQWdJR05vYVd4a2NtVnVJRDBnWTJocGJHUnlaVzVjYmlBZ0lDQWdJQ0FnSUNBdVkyOXVZMkYwS0hSb2FYTXVYMmhsWVdSbGNuTXBYRzRnSUNBZ0lDQWdJQ0FnTG1OdmJtTmhkQ2gwYUdsekxsOXZkR2hsY25NcFhHNGdJQ0FnSUNBZ0lHTm9hV3hrY21WdUxuQjFjMmdvYUNnbmFIUnRiRHBrYVhZbkxDQjdYRzRnSUNBZ0lDQWdJQ0FnY21WbU9pQW5ZMjlzZFcxdWN5Y3NYRzRnSUNBZ0lDQWdJQ0FnYzNSaGRHbGpRMnhoYzNNNklDZDNaV1Y0TFhkaGRHVnlabUZzYkMxcGJtNWxjaTFqYjJ4MWJXNXpJSGRsWlhndFkzUW5YRzRnSUNBZ0lDQWdJSDBzSUhSb2FYTXVYMk52YkhWdGJuTXBLVnh1SUNBZ0lDQWdJQ0IwYUdsekxsOXNiMkZrYVc1bklDWW1JR05vYVd4a2NtVnVMbkIxYzJnb2RHaHBjeTVmYkc5aFpHbHVaeWxjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRnRjYmlBZ0lDQWdJQ0FnSUNCb0tDZGhjblJwWTJ4bEp5d2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVm1PaUFuYVc1dVpYSW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2MzUmhkR2xqUTJ4aGMzTTZJQ2QzWldWNExYZGhkR1Z5Wm1Gc2JDMXBibTVsY2lCM1pXVjRMV04wSjF4dUlDQWdJQ0FnSUNBZ0lIMHNJR05vYVd4a2NtVnVLVnh1SUNBZ0lDQWdJQ0JkWEc0Z0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNCZmNtVkRZV3hqSUNoeWIyOTBVM1I1YkdVcElIdGNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlFNVBWRVU2SUdOdmJIVnRia2RoY0NCaGJtUWdZMjlzZFcxdVYybGtkR2dnWTJGdUozUWdZbTkwYUNCaVpTQmhkWFJ2TGx4dUlDQWdJQ0FnSUNBZ0tpQk9UMVJGT2lCMGFHVWdabTl5YlhWc1lUcGNiaUFnSUNBZ0lDQWdJQ29nSUhSdmRHRnNWMmxrZEdnZ1BTQnVJQ29nZHlBcklDaHVJQzBnTVNrZ0tpQm5ZWEJjYmlBZ0lDQWdJQ0FnSUNvZ01TNGdhV1lnWTI5c2RXMXVRMjkxYm5RZ1BTQnVJSFJvWlc0Z1kyRnNZeUIzWEc0Z0lDQWdJQ0FnSUNBcUlESXVJR2xtSUdOdmJIVnRibGRwWkhSb0lEMGdkeUIwYUdWdUlHTmhiR01nYmx4dUlDQWdJQ0FnSUNBZ0tpQXpMaUJwWmlCamIyeDFiVzVYYVdSMGFDQTlJSGNnWVc1a0lHTnZiSFZ0YmtOdmRXNTBJRDBnYmlCMGFHVnVJR05oYkdNZ2RHOTBZV3hYYVdSMGFGeHVJQ0FnSUNBZ0lDQWdLaUFnSUNBekxqRWdhV1lnZEc5MFlXeFhhV1IwYUNBOElHTjBWMmxrZEdnZ2RHaGxiaUJwYm1OeVpXRnpaU0JqYjJ4MWJXNVhhV1IwYUZ4dUlDQWdJQ0FnSUNBZ0tpQWdJQ0F6TGpJZ2FXWWdkRzkwWVd4WGFXUjBhQ0ErSUdOMFYybGtkR2dnZEdobGJpQmtaV055WldGelpTQmpiMngxYlc1RGIzVnVkRnh1SUNBZ0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUNBZ2JHVjBJSGRwWkhSb0xDQm5ZWEFzSUdOdWRDd2dZM1JYYVdSMGFGeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCelkyRnNaU0E5SUhkbFpYZ3VZMjl1Wm1sbkxtVnVkaTV6WTJGc1pWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbGJDQTlJSFJvYVhNdUpHVnNYRzRnSUNBZ0lDQWdJR1oxYm1OMGFXOXVJR2RsZEVOMFYybGtkR2dnS0hkcFpIUm9MQ0J6ZEhsc1pTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTjBJSEJoWkdScGJtY2dQU0J6ZEhsc1pTNXdZV1JrYVc1blhHNGdJQ0FnSUNBZ0lDQWdJQ0EvSUhCaGNuTmxTVzUwS0hOMGVXeGxMbkJoWkdScGJtY3BJQ29nTWx4dUlDQWdJQ0FnSUNBZ0lDQWdPaUJ3WVhKelpVbHVkQ2h6ZEhsc1pTNXdZV1JrYVc1blRHVm1kQ0I4ZkNBd0tTQXJJSEJoY25ObFNXNTBLSE4wZVd4bExuQmhaR1JwYm1kU2FXZG9kQ0I4ZkNBd0tWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjNhV1IwYUNBdElIQmhaR1JwYm1kY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnBaaUFvWld3Z0ppWWdaV3d1Ym05a1pWUjVjR1VnUFQwOUlERXBJSHNnSUM4dklHRnNjbVZoWkhrZ2JXOTFiblJsWkZ4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOemRIbHNaU0E5SUhkcGJtUnZkeTVuWlhSRGIyMXdkWFJsWkZOMGVXeGxLR1ZzS1Z4dUlDQWdJQ0FnSUNBZ0lHTjBWMmxrZEdnZ1BTQm5aWFJEZEZkcFpIUm9LR1ZzTG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BMbmRwWkhSb0xDQmpjM1I1YkdVcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaV3h6WlNCN0lDQXZMeUJ1YjNRZ2JXOTFiblJsWkM1Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJ2Ym14NUlITjFjSEJ2Y25RZ1puVnNiQ0J6WTNKbFpXNGdkMmxrZEdnZ1ptOXlJSGRoZEdWeVptRnNiQ0JqYjIxd2IyNWxiblF1WEc0Z0lDQWdJQ0FnSUNBZ1kzUlhhV1IwYUNBOUlHZGxkRU4wVjJsa2RHZ29aRzlqZFcxbGJuUXVaRzlqZFcxbGJuUkZiR1Z0Wlc1MExtTnNhV1Z1ZEZkcFpIUm9MQ0J5YjI5MFUzUjViR1VwWEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQm5ZWEFnUFNCMGFHbHpMbU52YkhWdGJrZGhjRnh1SUNBZ0lDQWdJQ0JwWmlBb1oyRndJQ1ltSUdkaGNDQWhQVDBnSjI1dmNtMWhiQ2NwSUh0Y2JpQWdJQ0FnSUNBZ0lDQm5ZWEFnUFNCd1lYSnpaVWx1ZENobllYQXBYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnWld4elpTQjdYRzRnSUNBZ0lDQWdJQ0FnWjJGd0lEMGdUazlTVFVGTVgwZEJVRjlUU1ZwRlhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdaMkZ3SUQwZ1oyRndJQ29nYzJOaGJHVmNibHh1SUNBZ0lDQWdJQ0IzYVdSMGFDQTlJSFJvYVhNdVkyOXNkVzF1VjJsa2RHaGNiaUFnSUNBZ0lDQWdZMjUwSUQwZ2RHaHBjeTVqYjJ4MWJXNURiM1Z1ZEZ4dUlDQWdJQ0FnSUNCcFppQW9kMmxrZEdnZ0ppWWdkMmxrZEdnZ0lUMDlJQ2RoZFhSdkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhkcFpIUm9JRDBnY0dGeWMyVkpiblFvZDJsa2RHZ3BJQ29nYzJOaGJHVmNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JwWmlBb1kyNTBJQ1ltSUdOdWRDQWhQVDBnSjJGMWRHOG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ1kyNTBJRDBnY0dGeWMyVkpiblFvWTI1MEtWeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnTHk4Z01DNGdhV1lnSVdOdmJIVnRia052ZFc1MElDWW1JQ0ZqYjJ4MWJXNVhhV1IwYUZ4dUlDQWdJQ0FnSUNCcFppQW9ZMjUwSUQwOVBTQW5ZWFYwYnljZ0ppWWdkMmxrZEdnZ1BUMDlJQ2RoZFhSdkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUE5UFQwZ0oyUmxkbVZzYjNCdFpXNTBKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0dCYmRuVmxMWEpsYm1SbGNsMGdkMkYwWlhKbVlXeHNKM01nWTI5c2RXMXVWMmxrZEdnZ1lXNWtJR052YkhWdGJrTnZkVzUwSUhOb2IzVnNaRzRuZEdCY2JpQWdJQ0FnSUNBZ0lDQWdJQ3NnWUNCaWIzUm9JR0psSUdGMWRHOGdZWFFnZEdobElITmhiV1VnZEdsdFpTNWdLVnh1SUNBZ0lDQWdJQ0FnSUNBZ1kyNTBJRDBnUkVWR1FWVk1WRjlEVDB4VlRVNWZRMDlWVGxSY2JpQWdJQ0FnSUNBZ0lDQWdJSGRwWkhSb0lEMGdZM1JYYVdSMGFGeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBdkx5QXhMaUJwWmlCamIyeDFiVzVEYjNWdWRDQTlJRzRnZEdobGJpQmpZV3hqSUhjdVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tHTnVkQ0FoUFQwZ0oyRjFkRzhuSUNZbUlIZHBaSFJvSUQwOVBTQW5ZWFYwYnljcElIdGNiaUFnSUNBZ0lDQWdJQ0IzYVdSMGFDQTlJQ2hqZEZkcFpIUm9JQzBnS0dOdWRDQXRJREVwSUNvZ1oyRndLU0F2SUdOdWRGeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQzh2SURJdUlHbG1JR052YkhWdGJsZHBaSFJvSUQwZ2R5QjBhR1Z1SUdOaGJHTWdiaTVjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWTI1MElEMDlQU0FuWVhWMGJ5Y2dKaVlnZDJsa2RHZ2dJVDA5SUNkaGRYUnZKeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnVkQ0E5SUNoamRGZHBaSFJvSUNzZ1oyRndLU0F2SUNoM2FXUjBhQ0FySUdkaGNDbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlBekxpQnBaaUJqYjJ4MWJXNVhhV1IwYUNBOUlIY2dZVzVrSUdOdmJIVnRia052ZFc1MElEMGdiaUIwYUdWdUlHTmhiR01nZEc5MFlXeFhhV1IwYUZ4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNoamJuUWdJVDA5SUNkaGRYUnZKeUFtSmlCM2FXUjBhQ0FoUFQwZ0oyRjFkRzhuS1NCN1hHNGdJQ0FnSUNBZ0lDQWdiR1YwSUhSdmRHRnNWMmxrZEdoY2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCaFpHcDFjM1JEYjNWdWRFRnVaRmRwWkhSb0lEMGdLQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEc5MFlXeFhhV1IwYUNBOUlHTnVkQ0FxSUhkcFpIUm9JQ3NnS0dOdWRDQXRJREVwSUNvZ1oyRndYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kRzkwWVd4WGFXUjBhQ0E4SUdOMFYybGtkR2dwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJsa2RHZ2dLejBnS0dOMFYybGtkR2dnTFNCMGIzUmhiRmRwWkhSb0tTQXZJR051ZEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb2RHOTBZV3hYYVdSMGFDQStJR04wVjJsa2RHZ2dKaVlnWTI1MElENGdNU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYm5RdExWeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFpHcDFjM1JEYjNWdWRFRnVaRmRwWkhSb0tDbGNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLSFJ2ZEdGc1YybGtkR2dnUGlCamRGZHBaSFJvS1NCN0lDQXZMeUJqYm5RZ1BUMDlJREZjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmxrZEdnZ1BTQmpkRmRwWkhSb1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJR0ZrYW5WemRFTnZkVzUwUVc1a1YybGtkR2dvS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOdmJIVnRia052ZFc1MElEMGdZMjUwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMk52YkhWdGJsZHBaSFJvSUQwZ2QybGtkR2hjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZMjlzZFcxdVIyRndJRDBnWjJGd1hHNGdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQmZaMlZ1UTI5c2RXMXVjeUFvWTNKbFlYUmxSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpiMngxYlc1eklEMGdXMTFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMlZzYkhNZ1BTQjBhR2x6TGw5alpXeHNjMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMngxYlc1RGJuUWdQU0IwYUdsekxsOWpiMngxYlc1RGIzVnVkRnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnNaVzRnUFNCalpXeHNjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1kyOXNkVzF1UTJWc2JITWdQU0IwYUdsekxsOWpiMngxYlc1RFpXeHNjeUE5SUVGeWNtRjVLR052YkhWdGJrTnVkQ2t1YW05cGJpZ25MaWNwTG5Od2JHbDBLQ2N1SnlrdWJXRndLR1oxYm1OMGFXOXVJQ2dwSUhzZ2NtVjBkWEp1SUZ0ZElIMHBYRzRnSUNBZ0lDQWdJQzh2SUhOd2NtVmhaQ0JqWld4c2N5QjBieUIwYUdVZ1kyOXNkVzF1Y3lCMWMybHVaeUJ6YVcxd2IyeGxJSEJ2Ykd4cGJtY2dZV3huYjNKcGRHaHRMbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lDQWdLR05sYkd4elcybGRMbVJoZEdFdVlYUjBjbk1nZkh3Z0tHTmxiR3h6VzJsZExtUmhkR0V1WVhSMGNuTWdQU0I3ZlNrcFd5ZGtZWFJoTFdObGJHd25YU0E5SUdsY2JpQWdJQ0FnSUNBZ0lDQmpiMngxYlc1RFpXeHNjMXRwSUNVZ1kyOXNkVzF1UTI1MFhTNXdkWE5vS0dObGJHeHpXMmxkS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dZMjlzZFcxdVEyNTBPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOWpiMngxYlc1ekxuQjFjMmdvWTNKbFlYUmxSV3hsYldWdWRDZ25hSFJ0YkRwa2FYWW5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaV1k2SUdCamIyeDFiVzRrZTJsOVlDeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGMGRISnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ2RrWVhSaExXTnZiSFZ0YmljNklHbGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0J6ZEdGMGFXTkRiR0Z6Y3pvZ0ozZGxaWGd0WTNRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzNSaGRHbGpVM1I1YkdVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2QybGtkR2c2SUhSb2FYTXVYMk52YkhWdGJsZHBaSFJvSUNzZ0ozQjRKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdiV0Z5WjJsdVRHVm1kRG9nYVNBOVBUMGdNQ0EvSURBZ09pQjBhR2x6TGw5amIyeDFiVzVIWVhBZ0t5QW5jSGduWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnZlN3Z1kyOXNkVzF1UTJWc2JITmJhVjBwS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQmZibVY0ZEZScFkyc2dLQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WlV4aGVXOTFkRU5vYVd4a2NtVnVLQ2xjYmlBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUY5eVpVeGhlVzkxZEVOb2FXeGtjbVZ1SUNncElIdGNiaUFnSUNBZ0lDQWdMeW9xWEc0Z0lDQWdJQ0FnSUNBcUlIUnlaV0YwSUhSb1pTQnphRzl5ZEdWemRDQmpiMngxYlc0Z1ltOTBkRzl0SUdGeklIUm9aU0J0WVhSamFDQnpkR0Z1WkdGeVpDNWNiaUFnSUNBZ0lDQWdJQ29nZDJocFkyaGxkbVZ5SUdObGJHd2daWGhqWldWa1pXUWdhWFFnZDI5MWJHUWdZbVVnY21WaGNuSmhibWRsWkM1Y2JpQWdJQ0FnSUNBZ0lDb2dNUzRnYlNBOUlITm9iM0owWlhOMElHTnZiSFZ0YmlCaWIzUjBiMjB1WEc0Z0lDQWdJQ0FnSUNBcUlESXVJR2RsZENCaGJHd2dZMlZzYkNCcFpITWdkMmh2SUdseklHSmxiRzkzSUcwdVhHNGdJQ0FnSUNBZ0lDQXFJRE11SUdOaGJHTjFiR0YwWlNCM2FHbGphQ0JqWld4c0lITm9iM1ZzWkNCaVpTQnBiaUIzYUdsamFDQmpiMngxYlc0dVhHNGdJQ0FnSUNBZ0lDQXFMMXh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMngxYlc1RGJuUWdQU0IwYUdsekxsOWpiMngxYlc1RGIzVnVkRnh1SUNBZ0lDQWdJQ0JqYjI1emRDQmpiMngxYlc1RWIyMXpJRDBnVzExY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTI5c2RXMXVRWEJ3Wlc1a1JuSmhaMjFsYm5SeklEMGdXMTFjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdZMjlzZFcxdVFtOTBkRzl0Y3lBOUlGdGRYRzRnSUNBZ0lDQWdJR3hsZENCdGFXNUNiM1IwYjIwZ1BTQk9kVzFpWlhJdVRVRllYMU5CUmtWZlNVNVVSVWRGVWx4dUlDQWdJQ0FnSUNCc1pYUWdiV2x1UW05MGRHOXRRMjlzZFcxdVNXNWtaWGdnUFNBd1hHNWNiaUFnSUNBZ0lDQWdMeThnTVM0Z1ptbHVaQ0IwYUdVZ2MyaHZjblJsYzNRZ1kyOXNkVzF1SUdKdmRIUnZiUzVjYmlBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCamIyeDFiVzVEYm5RN0lHa3JLeWtnZTF4dUlDQWdJQ0FnSUNBZ0lHTnZibk4wSUdOdmJIVnRia1J2YlNBOUlIUm9hWE11WDJOdmJIVnRibk5iYVYwdVpXeHRYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiR0Z6ZEVOb2FXeGtJRDBnWTI5c2RXMXVSRzl0TG14aGMzUkZiR1Z0Wlc1MFEyaHBiR1JjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JpYjNSMGIyMGdQU0JzWVhOMFEyaHBiR1FnUHlCc1lYTjBRMmhwYkdRdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2t1WW05MGRHOXRJRG9nTUZ4dUlDQWdJQ0FnSUNBZ0lHTnZiSFZ0YmtSdmJYTXVjSFZ6YUNoamIyeDFiVzVFYjIwcFhHNGdJQ0FnSUNBZ0lDQWdZMjlzZFcxdVFtOTBkRzl0YzF0cFhTQTlJR0p2ZEhSdmJWeHVJQ0FnSUNBZ0lDQWdJR052YkhWdGJrRndjR1Z1WkVaeVlXZHRaVzUwY3k1d2RYTm9LR1J2WTNWdFpXNTBMbU55WldGMFpVUnZZM1Z0Wlc1MFJuSmhaMjFsYm5Rb0tTbGNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1ltOTBkRzl0SUR3Z2JXbHVRbTkwZEc5dEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCdGFXNUNiM1IwYjIwZ1BTQmliM1IwYjIxY2JpQWdJQ0FnSUNBZ0lDQWdJRzFwYmtKdmRIUnZiVU52YkhWdGJrbHVaR1Y0SUQwZ2FWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJREl1SUdkbGRDQmhiR3dnWTJWc2JDQnBaSE1nZDJodklHbHpJR0psYkc5M0lHMHVYRzRnSUNBZ0lDQWdJR052Ym5OMElHSmxiRzkzUTJWc2JFbGtjeUE5SUZ0ZFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdKbGJHOTNRMlZzYkhNZ1BTQjdmVnh1SUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUdOdmJIVnRia051ZERzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXWWdLR2tnUFQwOUlHMXBia0p2ZEhSdmJVTnZiSFZ0YmtsdVpHVjRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjUwYVc1MVpWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNCamIyNXpkQ0JqYjJ4MWJXNUViMjBnUFNCamIyeDFiVzVFYjIxelcybGRYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdZMlZzYkhOSmJrTnZiSFZ0YmlBOUlHTnZiSFZ0YmtSdmJTNXhkV1Z5ZVZObGJHVmpkRzl5UVd4c0tDZHpaV04wYVc5dUxuZGxaWGd0WTJWc2JDY3BYRzRnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdiR1Z1SUQwZ1kyVnNiSE5KYmtOdmJIVnRiaTVzWlc1bmRHaGNiaUFnSUNBZ0lDQWdJQ0JtYjNJZ0tHeGxkQ0JxSUQwZ2JHVnVJQzBnTVRzZ2FpQStQU0F3T3lCcUxTMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUdObGJHeEViMjBnUFNCalpXeHNjMGx1UTI5c2RXMXVXMnBkWEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCalpXeHNVbVZqZENBOUlHTmxiR3hFYjIwdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hqWld4c1VtVmpkQzUwYjNBZ1BpQnRhVzVDYjNSMGIyMHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2FXUWdQU0IrZm1ObGJHeEViMjB1WjJWMFFYUjBjbWxpZFhSbEtDZGtZWFJoTFdObGJHd25LVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmlaV3h2ZDBObGJHeEpaSE11Y0hWemFDaHBaQ2xjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdZbVZzYjNkRFpXeHNjMXRwWkYwZ1BTQjdJR1ZzYlRvZ1kyVnNiRVJ2YlN3Z2FHVnBaMmgwT2lCalpXeHNVbVZqZEM1b1pXbG5hSFFnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JqYjJ4MWJXNUNiM1IwYjIxelcybGRJQzA5SUdObGJHeFNaV04wTG1obGFXZG9kRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDOHZJRE11SUdOaGJHTjFiR0YwWlNCM2FHbGphQ0JqWld4c0lITm9iM1ZzWkNCaVpTQnBiaUIzYUdsamFDQmpiMngxYlc0Z1lXNWtJSEpsWVhKeVlXNW5aU0IwYUdWdFhHNGdJQ0FnSUNBZ0lDOHZJQ0JwYmlCMGFHVWdaRzl0SUhSeVpXVXVYRzRnSUNBZ0lDQWdJR0psYkc5M1EyVnNiRWxrY3k1emIzSjBLR1oxYm1OMGFXOXVJQ2hoTENCaUtTQjdJSEpsZEhWeWJpQmhJRDRnWWlCOUtWeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCalpXeHNTV1J6VEdWdUlEMGdZbVZzYjNkRFpXeHNTV1J6TG14bGJtZDBhRnh1SUNBZ0lDQWdJQ0JtZFc1amRHbHZiaUJoWkdSVWIxTm9iM0owWlhOMFEyOXNkVzF1SUNoaVpXeHZkME5sYkd3cElIdGNiaUFnSUNBZ0lDQWdJQ0F2THlCbWFXNWtJSE5vYjNKMFpYTjBJR0p2ZEhSdmJTNWNiaUFnSUNBZ0lDQWdJQ0J0YVc1Q2IzUjBiMjBnUFNCTllYUm9MbTFwYmlndUxpNWpiMngxYlc1Q2IzUjBiMjF6S1Z4dUlDQWdJQ0FnSUNBZ0lHMXBia0p2ZEhSdmJVTnZiSFZ0YmtsdVpHVjRJRDBnWTI5c2RXMXVRbTkwZEc5dGN5NXBibVJsZUU5bUtHMXBia0p2ZEhSdmJTbGNiaUFnSUNBZ0lDQWdJQ0JqYjI1emRDQjdJR1ZzYlRvZ1kyVnNiRVZzYlN3Z2FHVnBaMmgwT2lCalpXeHNTR1ZwWjJoMElIMGdQU0JpWld4dmQwTmxiR3hjYmlBZ0lDQWdJQ0FnSUNCamIyeDFiVzVCY0hCbGJtUkdjbUZuYldWdWRITmJiV2x1UW05MGRHOXRRMjlzZFcxdVNXNWtaWGhkTG1Gd2NHVnVaRU5vYVd4a0tHTmxiR3hGYkcwcFhHNGdJQ0FnSUNBZ0lDQWdZMjlzZFcxdVFtOTBkRzl0YzF0dGFXNUNiM1IwYjIxRGIyeDFiVzVKYm1SbGVGMGdLejBnWTJWc2JFaGxhV2RvZEZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2dZMlZzYkVsa2MweGxianNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJQ0FnWVdSa1ZHOVRhRzl5ZEdWemRFTnZiSFZ0YmloaVpXeHZkME5sYkd4elcySmxiRzkzUTJWc2JFbGtjMXRwWFYwcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0JqYjJ4MWJXNURiblE3SUdrckt5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJIVnRia1J2YlhOYmFWMHVZWEJ3Wlc1a1EyaHBiR1FvWTI5c2RXMXVRWEJ3Wlc1a1JuSmhaMjFsYm5SelcybGRLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJSEpsYm1SbGNpQW9ZM0psWVhSbFJXeGxiV1Z1ZENrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUzWldWNFZIbHdaU0E5SUNkM1lYUmxjbVpoYkd3blhHNGdJQ0FnSUNCMGFHbHpMbDlqWld4c2N5QTlJSFJvYVhNdUpITnNiM1J6TG1SbFptRjFiSFFnZkh3Z1cxMWNiaUFnSUNBZ0lIUm9hWE11Skc1bGVIUlVhV05yS0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NTFjR1JoZEdWTVlYbHZkWFFvS1Z4dUlDQWdJQ0FnZlNsY2JpQWdJQ0FnSUdOdmJuTjBJRzFsY21kbFpGTjBlV3hsSUQwZ1pYaDBjbUZqZEVOdmJYQnZibVZ1ZEZOMGVXeGxLSFJvYVhNcFhHNGdJQ0FnSUNCeVpYUjFjbTRnWTNKbFlYUmxSV3hsYldWdWRDZ25iV0ZwYmljc0lIdGNiaUFnSUNBZ0lDQWdjbVZtT2lBbmQzSmhjSEJsY2ljc1hHNGdJQ0FnSUNBZ0lHRjBkSEp6T2lCN0lDZDNaV1Y0TFhSNWNHVW5PaUFuZDJGMFpYSm1ZV3hzSnlCOUxGeHVJQ0FnSUNBZ0lDQnZiam9nWTNKbFlYUmxSWFpsYm5STllYQW9kR2hwY3l3Z2UxeHVJQ0FnSUNBZ0lDQWdJSE5qY205c2JEb2dkR2hwY3k1b1lXNWtiR1ZUWTNKdmJHd3NYRzRnSUNBZ0lDQWdJQ0FnZEc5MVkyaHpkR0Z5ZERvZ2RHaHBjeTVvWVc1a2JHVlViM1ZqYUZOMFlYSjBMRnh1SUNBZ0lDQWdJQ0FnSUhSdmRXTm9iVzkyWlRvZ2RHaHBjeTVvWVc1a2JHVlViM1ZqYUUxdmRtVXNYRzRnSUNBZ0lDQWdJQ0FnZEc5MVkyaGxibVE2SUhSb2FYTXVhR0Z1Wkd4bFZHOTFZMmhGYm1SY2JpQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0lDQWdJSE4wWVhScFkwTnNZWE56T2lBbmQyVmxlQzEzWVhSbGNtWmhiR3dnZDJWbGVDMTNZWFJsY21aaGJHd3RkM0poY0hCbGNpQjNaV1Y0TFdOMEp5eGNiaUFnSUNBZ0lDQWdjM1JoZEdsalUzUjViR1U2SUcxbGNtZGxaRk4wZVd4bFhHNGdJQ0FnSUNCOUxDQjBhR2x6TGw5amNtVmhkR1ZEYUdsc1pISmxiaWhqY21WaGRHVkZiR1Z0Wlc1MExDQnRaWEpuWldSVGRIbHNaU2twWEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJSHRjYmlBZ2FXNXBkQ0FvZDJWbGVDa2dlMXh1SUNBZ0lIZGxaWGd1Y21WbmFYTjBaWEpEYjIxd2IyNWxiblFvSjNkaGRHVnlabUZzYkNjc0lHZGxkRmRoZEdWeVptRnNiQ2gzWldWNEtTbGNiaUFnZlZ4dWZWeHVJaXdpTHlwY2JpQXFJRXhwWTJWdWMyVmtJSFJ2SUhSb1pTQkJjR0ZqYUdVZ1UyOW1kSGRoY21VZ1JtOTFibVJoZEdsdmJpQW9RVk5HS1NCMWJtUmxjaUJ2Ym1WY2JpQXFJRzl5SUcxdmNtVWdZMjl1ZEhKcFluVjBiM0lnYkdsalpXNXpaU0JoWjNKbFpXMWxiblJ6TGlBZ1UyVmxJSFJvWlNCT1QxUkpRMFVnWm1sc1pWeHVJQ29nWkdsemRISnBZblYwWldRZ2QybDBhQ0IwYUdseklIZHZjbXNnWm05eUlHRmtaR2wwYVc5dVlXd2dhVzVtYjNKdFlYUnBiMjVjYmlBcUlISmxaMkZ5WkdsdVp5QmpiM0I1Y21sbmFIUWdiM2R1WlhKemFHbHdMaUFnVkdobElFRlRSaUJzYVdObGJuTmxjeUIwYUdseklHWnBiR1ZjYmlBcUlIUnZJSGx2ZFNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1ZjYmlBcUlGd2lUR2xqWlc1elpWd2lLVHNnZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlZ4dUlDb2dkMmwwYUNCMGFHVWdUR2xqWlc1elpTNGdJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxGeHVJQ29nYzI5bWRIZGhjbVVnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNWNiaUFxSUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WlhHNGdLaUJMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xpQWdVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdWY2JpQXFJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUWdiR2x0YVhSaGRHbHZibk5jYmlBcUlIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1Y2JtWjFibU4wYVc5dUlHZGxkRU5sYkd3Z0tIZGxaWGdwSUh0Y2JpQWdZMjl1YzNRZ2V5QmxlSFJ5WVdOMFEyOXRjRzl1Wlc1MFUzUjViR1VnZlNBOUlIZGxaWGhjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0J1WVcxbE9pQW5kMlZsZUMxalpXeHNKeXhjYmlBZ0lDQnlaVzVrWlhJZ0tHTnlaV0YwWlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJqY21WaGRHVkZiR1Z0Wlc1MEtDZHpaV04wYVc5dUp5d2dlMXh1SUNBZ0lDQWdJQ0JoZEhSeWN6b2dleUFuZDJWbGVDMTBlWEJsSnpvZ0oyTmxiR3duSUgwc1hHNGdJQ0FnSUNBZ0lITjBZWFJwWTBOc1lYTnpPaUFuZDJWbGVDMWpaV3hzSUhkbFpYZ3RZM1FuTEZ4dUlDQWdJQ0FnSUNCemRHRjBhV05UZEhsc1pUb2daWGgwY21GamRFTnZiWEJ2Ym1WdWRGTjBlV3hsS0hSb2FYTXBYRzRnSUNBZ0lDQjlMQ0IwYUdsekxpUnpiRzkwY3k1a1pXWmhkV3gwS1Z4dUlDQWdJSDFjYmlBZ2ZWeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0I3WEc0Z0lHbHVhWFFnS0hkbFpYZ3BJSHRjYmlBZ0lDQjNaV1Y0TG5KbFoybHpkR1Z5UTI5dGNHOXVaVzUwS0NkalpXeHNKeXdnWjJWMFEyVnNiQ2gzWldWNEtTbGNiaUFnZlZ4dWZWeHVJaXdpTHlwY2JpQXFJRXhwWTJWdWMyVmtJSFJ2SUhSb1pTQkJjR0ZqYUdVZ1UyOW1kSGRoY21VZ1JtOTFibVJoZEdsdmJpQW9RVk5HS1NCMWJtUmxjaUJ2Ym1WY2JpQXFJRzl5SUcxdmNtVWdZMjl1ZEhKcFluVjBiM0lnYkdsalpXNXpaU0JoWjNKbFpXMWxiblJ6TGlBZ1UyVmxJSFJvWlNCT1QxUkpRMFVnWm1sc1pWeHVJQ29nWkdsemRISnBZblYwWldRZ2QybDBhQ0IwYUdseklIZHZjbXNnWm05eUlHRmtaR2wwYVc5dVlXd2dhVzVtYjNKdFlYUnBiMjVjYmlBcUlISmxaMkZ5WkdsdVp5QmpiM0I1Y21sbmFIUWdiM2R1WlhKemFHbHdMaUFnVkdobElFRlRSaUJzYVdObGJuTmxjeUIwYUdseklHWnBiR1ZjYmlBcUlIUnZJSGx2ZFNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1ZjYmlBcUlGd2lUR2xqWlc1elpWd2lLVHNnZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlZ4dUlDb2dkMmwwYUNCMGFHVWdUR2xqWlc1elpTNGdJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxGeHVJQ29nYzI5bWRIZGhjbVVnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNWNiaUFxSUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WlhHNGdLaUJMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xpQWdVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdWY2JpQXFJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUWdiR2x0YVhSaGRHbHZibk5jYmlBcUlIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1Y2JtWjFibU4wYVc5dUlHZGxkRWhsWVdSbGNpQW9kMlZsZUNrZ2UxeHVJQ0JqYjI1emRDQjdJR1Y0ZEhKaFkzUkRiMjF3YjI1bGJuUlRkSGxzWlNCOUlEMGdkMlZsZUZ4dUlDQmpiMjV6ZENCN0lITjFjSEJ2Y25SVGRHbGphM2tnZlNBOUlIZGxaWGd1ZFhScGJITmNibHh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJR1JoZEdFZ0tDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lDQWdjM1JwWTJ0NU9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ2FXNXBkRlJ2Y0RvZ01DeGNiaUFnSUNBZ0lDQWdjR3hoWTJWb2IyeGtaWEk2SUc1MWJHd3NYRzRnSUNBZ0lDQWdJSE4xY0hCdmNuUlRkR2xqYTNrNklITjFjSEJ2Y25SVGRHbGphM2tvS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J0YjNWdWRHVmtJQ2dwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVhVzVwZEZSdmNDQTlJSFJvYVhNdUpHVnNMbTltWm5ObGRGUnZjRnh1SUNBZ0lDQWdkR2hwY3k1d2JHRmpaV2h2YkdSbGNpQTlJSGRwYm1SdmR5NWtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nkb1pXRmtaWEluS1Z4dUlDQWdJSDBzWEc1Y2JpQWdJQ0IxY0dSaGRHVmtJQ2dwSUh0Y2JpQWdJQ0FnSUdsbUlDZ2hkR2hwY3k1emRHbGphM2twSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVwYm1sMFZHOXdJRDBnZEdocGN5NGtaV3d1YjJabWMyVjBWRzl3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJRzFsZEdodlpITTZJSHRjYmlBZ0lDQWdJR0ZrWkZOMGFXTnJlU0FvS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YzNScFkydDVJRDBnZEhKMVpWeHVJQ0FnSUNBZ0lDQjBhR2x6TG5Cc1lXTmxhRzlzWkdWeUxuTjBlV3hsTG1ScGMzQnNZWGtnUFNBbllteHZZMnNuWEc0Z0lDQWdJQ0FnSUhSb2FYTXVjR3hoWTJWb2IyeGtaWEl1YzNSNWJHVXVkMmxrZEdnZ1BTQjBhR2x6TGlSbGJDNXZabVp6WlhSWGFXUjBhQ0FySUNkd2VDZGNiaUFnSUNBZ0lDQWdkR2hwY3k1d2JHRmpaV2h2YkdSbGNpNXpkSGxzWlM1b1pXbG5hSFFnUFNCMGFHbHpMaVJsYkM1dlptWnpaWFJJWldsbmFIUWdLeUFuY0hnblhHNGdJQ0FnSUNBZ0lIUm9hWE11SkdWc0xuQmhjbVZ1ZEU1dlpHVXVhVzV6WlhKMFFtVm1iM0psS0hSb2FYTXVjR3hoWTJWb2IyeGtaWElzSUhSb2FYTXVKR1ZzS1Z4dUlDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ2NtVnRiM1psVTNScFkydDVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEdsamEza2dQU0JtWVd4elpWeHVJQ0FnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11SkdWc0xuQmhjbVZ1ZEU1dlpHVXVjbVZ0YjNabFEyaHBiR1FvZEdocGN5NXdiR0ZqWldodmJHUmxjaWxjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCallYUmphQ0FvWlNrZ2UxeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxibVJsY2lBb1kzSmxZWFJsUld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYmlBZ0lDQWdJQzh2SUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUE5UFQwZ0oyUmxkbVZzYjNCdFpXNTBKeWtnZTF4dUlDQWdJQ0FnTHk4Z0lDQjJZV3hwWkdGMFpWTjBlV3hsY3lnbmFHVmhaR1Z5Snl3Z2RHaHBjeTRrZG01dlpHVXVaR0YwWVNBbUppQjBhR2x6TGlSMmJtOWtaUzVrWVhSaExuTjBZWFJwWTFOMGVXeGxLVnh1SUNBZ0lDQWdMeThnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJR055WldGMFpVVnNaVzFsYm5Rb0oyaDBiV3c2YUdWaFpHVnlKeXdnZTF4dUlDQWdJQ0FnSUNCaGRIUnljem9nZXlBbmQyVmxlQzEwZVhCbEp6b2dKMmhsWVdSbGNpY2dmU3hjYmlBZ0lDQWdJQ0FnY21WbU9pQW5hR1ZoWkdWeUp5eGNiaUFnSUNBZ0lDQWdjM1JoZEdsalEyeGhjM002SUNkM1pXVjRMV2hsWVdSbGNpQjNaV1Y0TFdOMEp5eGNiaUFnSUNBZ0lDQWdZMnhoYzNNNklIc2dKM2RsWlhndGMzUnBZMnQ1SnpvZ2RHaHBjeTV6ZEdsamEza3NJQ2QzWldWNExXbHZjeTF6ZEdsamEza25PaUIwYUdsekxuTjFjSEJ2Y25SVGRHbGphM2tnZlN4Y2JpQWdJQ0FnSUNBZ2MzUmhkR2xqVTNSNWJHVTZJR1Y0ZEhKaFkzUkRiMjF3YjI1bGJuUlRkSGxzWlNoMGFHbHpLVnh1SUNBZ0lDQWdmU3dnZEdocGN5NGtjMnh2ZEhNdVpHVm1ZWFZzZENsY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQnBibWwwSUNoM1pXVjRLU0I3WEc0Z0lDQWdkMlZsZUM1eVpXZHBjM1JsY2tOdmJYQnZibVZ1ZENnbmFHVmhaR1Z5Snl3Z1oyVjBTR1ZoWkdWeUtIZGxaWGdwS1Z4dUlDQjlYRzU5WEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibHh1Wm5WdVkzUnBiMjRnWjJWMFRHOWhaR2x1WnlBb0tTQjdYRzRnSUdOdmJuTjBJSHNnWlhoMGNtRmpkRU52YlhCdmJtVnVkRk4wZVd4bElIMGdQU0IzWldWNFhHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQnVZVzFsT2lBbmQyVmxlQzFzYjJGa2FXNW5KeXhjYmlBZ0lDQndjbTl3Y3pvZ2UxeHVJQ0FnSUNBZ1pHbHpjR3hoZVRvZ2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCVGRISnBibWNzWEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2SUNkemFHOTNKeXhjYmlBZ0lDQWdJQ0FnZG1Gc2FXUmhkRzl5SUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCYkozTm9iM2NuTENBbmFHbGtaU2RkTG1sdVpHVjRUMllvZG1Gc2RXVXBJQ0U5UFNBdE1WeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNiaUFnSUNCa1lYUmhJQ2dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUI3WEc0Z0lDQWdJQ0FnSUdobGFXZG9kRG9nTFRFc1hHNGdJQ0FnSUNBZ0lIWnBaWGRJWldsbmFIUTZJREJjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1SUNBZ0lHMXZkVzUwWldRZ0tDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1MmFXVjNTR1ZwWjJoMElEMGdkR2hwY3k0a1pXd3ViMlptYzJWMFNHVnBaMmgwWEc0Z0lDQWdJQ0JwWmlBb2RHaHBjeTVrYVhOd2JHRjVJRDA5UFNBbmFHbGtaU2NwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVvWldsbmFIUWdQU0F3WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1b1pXbG5hSFFnUFNCMGFHbHpMblpwWlhkSVpXbG5hSFJjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1SUNBZ0lIZGhkR05vT2lCN1hHNGdJQ0FnSUNCb1pXbG5hSFFnS0haaGJDa2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxpUmxiQzV6ZEhsc1pTNW9aV2xuYUhRZ1BTQmdKSHQyWVd4OWNIaGdYRzRnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdaR2x6Y0d4aGVTQW9kbUZzS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gyWVd3Z1BUMDlJQ2RvYVdSbEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR1ZwWjJoMElEMGdNRnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVhR1ZwWjJoMElEMGdkR2hwY3k1MmFXVjNTR1ZwWjJoMFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUcxbGRHaHZaSE02SUh0Y2JpQWdJQ0FnSUhCMWJHeHBibWNnS0c5bVpuTmxkRmtnUFNBd0tTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWFHVnBaMmgwSUQwZ2IyWm1jMlYwV1Z4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUhCMWJHeHBibWRWY0NBb2IyWm1jMlYwV1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSbGJDNXpkSGxzWlM1MGNtRnVjMmwwYVc5dUlEMGdZR2hsYVdkb2RDQXdjMkJjYmlBZ0lDQWdJQ0FnZEdocGN5NXdkV3hzYVc1bktHOW1abk5sZEZrcFhHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ2NIVnNiR2x1WjBWdVpDQW9LU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVKR1ZzTG5OMGVXeGxMblJ5WVc1emFYUnBiMjRnUFNCZ2FHVnBaMmgwSUM0eWMyQmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVhR1ZwWjJoMElENDlJSFJvYVhNdWRtbGxkMGhsYVdkb2RDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjSFZzYkdsdVp5aDBhR2x6TG5acFpYZElaV2xuYUhRcFhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k0a1pXMXBkQ2duYkc5aFpHbHVaeWNwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV3ZFd4c2FXNW5LREFwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCblpYUkRhR2xzWkhKbGJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR05vYVd4a2NtVnVJRDBnZEdocGN5NGtjMnh2ZEhNdVpHVm1ZWFZzZENCOGZDQmJYVnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVrYVhOd2JHRjVJRDA5UFNBbmMyaHZkeWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyaHBiR1J5Wlc1Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyaHBiR1J5Wlc0dVptbHNkR1Z5S0hadWIyUmxJRDArSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtNXZaR1V1WTI5dGNHOXVaVzUwVDNCMGFXOXVjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0ppWWdkbTV2WkdVdVkyOXRjRzl1Wlc1MFQzQjBhVzl1Y3k1MFlXY2dJVDA5SUNkc2IyRmthVzVuTFdsdVpHbGpZWFJ2Y2lkY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUhKbGJtUmxjaUFvWTNKbFlYUmxSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a2NHRnlaVzUwTGw5c2IyRmthVzVuSUQwZ2RHaHBjMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVWc1pXMWxiblFvSjJGemFXUmxKeXdnZTF4dUlDQWdJQ0FnSUNCeVpXWTZJQ2RzYjJGa2FXNW5KeXhjYmlBZ0lDQWdJQ0FnWVhSMGNuTTZJSHNnSjNkbFpYZ3RkSGx3WlNjNklDZHNiMkZrYVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0J6ZEdGMGFXTkRiR0Z6Y3pvZ0ozZGxaWGd0Ykc5aFpHbHVaeUIzWldWNExXTjBKeXhjYmlBZ0lDQWdJQ0FnYzNSaGRHbGpVM1I1YkdVNklHVjRkSEpoWTNSRGIyMXdiMjVsYm5SVGRIbHNaU2gwYUdsektWeHVJQ0FnSUNBZ2ZTd2dkR2hwY3k1blpYUkRhR2xzWkhKbGJpZ3BLVnh1SUNBZ0lIMWNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUdsdWFYUWdLSGRsWlhncElIdGNiaUFnSUNCM1pXVjRMbkpsWjJsemRHVnlRMjl0Y0c5dVpXNTBLQ2RzYjJGa2FXNW5KeXdnWjJWMFRHOWhaR2x1WnloM1pXVjRLU2xjYmlBZ2ZWeHVmVnh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMaUFnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVmNiaUFxSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVFnYkdsdGFYUmhkR2x2Ym5OY2JpQXFJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWNibVoxYm1OMGFXOXVJR2RsZEZKbFpuSmxjMmdnS0hkbFpYZ3BJSHRjYmlBZ1kyOXVjM1FnZXlCbGVIUnlZV04wUTI5dGNHOXVaVzUwVTNSNWJHVWdmU0E5SUhkbFpYaGNiaUFnWTI5dWMzUWdleUJqY21WaGRHVkZkbVZ1ZENCOUlEMGdkMlZsZUM1MWRHbHNjMXh1WEc0Z0lISmxkSFZ5YmlCN1hHNGdJQ0FnYm1GdFpUb2dKM2RsWlhndGNtVm1jbVZ6YUNjc1hHNGdJQ0FnY0hKdmNITTZJSHRjYmlBZ0lDQWdJR1JwYzNCc1lYazZJSHRjYmlBZ0lDQWdJQ0FnZEhsd1pUb2dVM1J5YVc1bkxGeHVJQ0FnSUNBZ0lDQmtaV1poZFd4ME9pQW5jMmh2ZHljc1hHNGdJQ0FnSUNBZ0lIWmhiR2xrWVhSdmNpQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdXeWR6YUc5M0p5d2dKMmhwWkdVblhTNXBibVJsZUU5bUtIWmhiSFZsS1NBaFBUMGdMVEZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBzWEc0Z0lDQWdaR0YwWVNBb0tTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z2UxeHVJQ0FnSUNBZ0lDQnNZWE4wUkhrNklEQXNYRzRnSUNBZ0lDQWdJSFpwWlhkSVpXbG5hSFE2SURBc1hHNGdJQ0FnSUNBZ0lHaGxhV2RvZERvZ0xURmNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUcxdmRXNTBaV1FnS0NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTUyYVdWM1NHVnBaMmgwSUQwZ2RHaHBjeTRrWld3dWIyWm1jMlYwU0dWcFoyaDBYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWthWE53YkdGNUlEMDlQU0FuYUdsa1pTY3BJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NW9aV2xuYUhRZ1BTQXdYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVvWldsbmFIUWdQU0IwYUdsekxuWnBaWGRJWldsbmFIUmNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVJQ0FnSUhkaGRHTm9PaUI3WEc0Z0lDQWdJQ0JvWldsbmFIUWdLSFpoYkNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSbGJDNXpkSGxzWlM1b1pXbG5hSFFnUFNCZ0pIdDJZV3g5Y0hoZ1hHNGdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ1pHbHpjR3hoZVNBb2RtRnNLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDJZV3dnUFQwOUlDZG9hV1JsSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHVnBaMmgwSUQwZ01GeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdWFHVnBaMmgwSUQwZ2RHaHBjeTUyYVdWM1NHVnBaMmgwWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dUlDQWdJRzFsZEdodlpITTZJSHRjYmlBZ0lDQWdJSEIxYkd4cGJtY2dLRzltWm5ObGRGa2dQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11YUdWcFoyaDBJRDBnYjJabWMyVjBXVnh1SUNBZ0lDQWdJQ0IwYUdsekxpUmxiV2wwS0Nkd2RXeHNhVzVuWkc5M2JpY3NJR055WldGMFpVVjJaVzUwS0hSb2FYTXNJQ2R3ZFd4c2FXNW5aRzkzYmljc0lIdGNiaUFnSUNBZ0lDQWdJQ0JrZVRvZ2IyWm1jMlYwV1NBdElIUm9hWE11YkdGemRFUjVMRnh1SUNBZ0lDQWdJQ0FnSUhCMWJHeHBibWRFYVhOMFlXNWpaVG9nYjJabWMyVjBXU3hjYmlBZ0lDQWdJQ0FnSUNCMmFXVjNTR1ZwWjJoME9pQjBhR2x6TG5acFpYZElaV2xuYUhSY2JpQWdJQ0FnSUNBZ2ZTa3BYRzRnSUNBZ0lDQWdJSFJvYVhNdWJHRnpkRVI1SUQwZ2IyWm1jMlYwV1Z4dUlDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUhCMWJHeHBibWRFYjNkdUlDaHZabVp6WlhSWktTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHVnNMbk4wZVd4bExuUnlZVzV6YVhScGIyNGdQU0JnYUdWcFoyaDBJREJ6WUZ4dUlDQWdJQ0FnSUNCMGFHbHpMbkIxYkd4cGJtY29iMlptYzJWMFdTbGNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQndkV3hzYVc1blJXNWtJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTRrWld3dWMzUjViR1V1ZEhKaGJuTnBkR2x2YmlBOUlHQm9aV2xuYUhRZ0xqSnpZRnh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVvWldsbmFIUWdQajBnZEdocGN5NTJhV1YzU0dWcFoyaDBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTV3ZFd4c2FXNW5LSFJvYVhNdWRtbGxkMGhsYVdkb2RDbGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxpUmxiV2wwS0NkeVpXWnlaWE5vSnlsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CMWJHeHBibWNvTUNsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lHZGxkRU5vYVd4a2NtVnVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTJocGJHUnlaVzRnUFNCMGFHbHpMaVJ6Ykc5MGN5NWtaV1poZFd4MElIeDhJRnRkWEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1ScGMzQnNZWGtnUFQwOUlDZHphRzkzSnlrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmphR2xzWkhKbGJseHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmphR2xzWkhKbGJpNW1hV3gwWlhJb2RtNXZaR1VnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjJibTlrWlM1amIyMXdiMjVsYm5SUGNIUnBiMjV6WEc0Z0lDQWdJQ0FnSUNBZ0lDQW1KaUIyYm05a1pTNWpiMjF3YjI1bGJuUlBjSFJwYjI1ekxuUmhaeUFoUFQwZ0oyeHZZV1JwYm1jdGFXNWthV05oZEc5eUoxeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHNYRzRnSUNBZ2NtVnVaR1Z5SUNoamNtVmhkR1ZGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0IwYUdsekxpUndZWEpsYm5RdVgzSmxabkpsYzJnZ1BTQjBhR2x6WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFJXeGxiV1Z1ZENnbllYTnBaR1VuTENCN1hHNGdJQ0FnSUNBZ0lISmxaam9nSjNKbFpuSmxjMmduTEZ4dUlDQWdJQ0FnSUNCaGRIUnljem9nZXlBbmQyVmxlQzEwZVhCbEp6b2dKM0psWm5KbGMyZ25JSDBzWEc0Z0lDQWdJQ0FnSUhOMFlYUnBZME5zWVhOek9pQW5kMlZsZUMxeVpXWnlaWE5vSUhkbFpYZ3RZM1FuTEZ4dUlDQWdJQ0FnSUNCemRHRjBhV05UZEhsc1pUb2daWGgwY21GamRFTnZiWEJ2Ym1WdWRGTjBlV3hsS0hSb2FYTXBYRzRnSUNBZ0lDQjlMQ0IwYUdsekxtZGxkRU5vYVd4a2NtVnVLQ2twWEc0Z0lDQWdmVnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJSHRjYmlBZ2FXNXBkQ0FvZDJWbGVDa2dlMXh1SUNBZ0lIZGxaWGd1Y21WbmFYTjBaWEpEYjIxd2IyNWxiblFvSjNKbFpuSmxjMmduTENCblpYUlNaV1p5WlhOb0tIZGxaWGdwS1Z4dUlDQjlYRzU5WEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibXhsZENCbGVIUnlZV04wUTI5dGNHOXVaVzUwVTNSNWJHVXNJR2RsZEZKbllpd2diRzl2Y0VGeWNtRjVMQ0JuWlhSVGRIbHNaVk5vWldWMFFubEpaRnh1WEc1amIyNXpkQ0JmWTNOeklEMGdZRnh1TG5kbFpYZ3RjbVZtY21WemFDMXBibVJwWTJGMGIzSXNYRzR1ZDJWbGVDMXNiMkZrYVc1bkxXbHVaR2xqWVhSdmNpQjdYRzRnSUhkcFpIUm9PaUF4Y21WdElDRnBiWEJ2Y25SaGJuUTdYRzRnSUdobGFXZG9kRG9nTVhKbGJTQWhhVzF3YjNKMFlXNTBPMXh1SUNBdGQyVmlhMmwwTFdKdmVDMWhiR2xuYmpvZ1kyVnVkR1Z5TzF4dUlDQXRiVzk2TFdKdmVDMWhiR2xuYmpvZ1kyVnVkR1Z5TzF4dUlDQXRkMlZpYTJsMExXRnNhV2R1TFdsMFpXMXpPaUJqWlc1MFpYSTdYRzRnSUMxdGN5MW1iR1Y0TFdGc2FXZHVPaUJqWlc1MFpYSTdYRzRnSUdGc2FXZHVMV2wwWlcxek9pQmpaVzUwWlhJN1hHNGdJQzEzWldKcmFYUXRZbTk0TFhCaFkyczZJR05sYm5SbGNqdGNiaUFnTFcxdmVpMWliM2d0Y0dGamF6b2dZMlZ1ZEdWeU8xeHVJQ0F0ZDJWaWEybDBMV3AxYzNScFpua3RZMjl1ZEdWdWREb2dZMlZ1ZEdWeU8xeHVJQ0F0YlhNdFpteGxlQzF3WVdOck9pQmpaVzUwWlhJN1hHNGdJR3AxYzNScFpua3RZMjl1ZEdWdWREb2dZMlZ1ZEdWeU8xeHVJQ0J2ZG1WeVpteHZkem9nZG1semFXSnNaVHRjYmlBZ1ltRmphMmR5YjNWdVpEb2dibTl1WlR0Y2JuMWNiaTUzWldWNExYSmxabkpsYzJndGFXNWthV05oZEc5eU9tSmxabTl5WlN4Y2JpNTNaV1Y0TFd4dllXUnBibWN0YVc1a2FXTmhkRzl5T21KbFptOXlaU0I3WEc0Z0lHUnBjM0JzWVhrNklHSnNiMk5yTzF4dUlDQmpiMjUwWlc1ME9pQW5KenRjYmlBZ1ptOXVkQzF6YVhwbE9pQXdMakUyY21WdE8xeHVJQ0IzYVdSMGFEb2dNQzQxWlcwN1hHNGdJR2hsYVdkb2REb2dNQzQxWlcwN1hHNGdJR3hsWm5RNklEQTdYRzRnSUhSdmNEb2dNRHRjYmlBZ1ltOXlaR1Z5TFhKaFpHbDFjem9nTlRBbE8xeHVJQ0J3YjNOcGRHbHZiam9nY21Wc1lYUnBkbVU3WEc0Z0lIUmxlSFF0YVc1a1pXNTBPaUF0T1RrNU9XVnRPMXh1SUNBdGQyVmlhMmwwTFdGdWFXMWhkR2x2YmpvZ2QyVmxlQzF6Y0dsdWJtVnlJREV1TVhNZ2FXNW1hVzVwZEdVZ1pXRnpaVHRjYmlBZ0xXMXZlaTFoYm1sdFlYUnBiMjQ2SUhkbFpYZ3RjM0JwYm01bGNpQXhMakZ6SUdsdVptbHVhWFJsSUdWaGMyVTdYRzRnSUdGdWFXMWhkR2x2YmpvZ2QyVmxlQzF6Y0dsdWJtVnlJREV1TVhNZ2FXNW1hVzVwZEdVZ1pXRnpaVHRjYm4xY2JseHVRQzEzWldKcmFYUXRhMlY1Wm5KaGJXVnpJSGRsWlhndGMzQnBibTVsY2lCN1hHNGdJREFsTEZ4dUlDQXhNREFsSUh0Y2JpQWdJQ0JpYjNndGMyaGhaRzkzT2lBd1pXMGdMVEV1TTJWdElEQmxiU0F3WlcwZ0kyWm1abVptWml3Z01DNDVaVzBnTFRBdU9XVnRJREFnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzR5S1N3Z01TNHlOV1Z0SURCbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSURBdU9EYzFaVzBnTUM0NE56VmxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1TWlrc0lEQmxiU0F4TGpJMVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMaklwTENBdE1DNDVaVzBnTUM0NVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMaklwTENBdE1TNHpaVzBnTUdWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNDFLU3dnTFRBdU9XVnRJQzB3TGpsbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVOeWs3WEc0Z0lIMWNiaUFnTVRFdU1qVWxJSHRjYmlBZ0lDQmliM2d0YzJoaFpHOTNPaUF3WlcwZ0xURXVNMlZ0SURCbGJTQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqY3BMQ0F3TGpsbGJTQXRNQzQ1WlcwZ01DQXdaVzBnSTJabVptWm1aaXdnTVM0eU5XVnRJREJsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJREF1T0RjMVpXMGdNQzQ0TnpWbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSURCbGJTQXhMakkxWlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqSXBMQ0F0TUM0NVpXMGdNQzQ1WlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqSXBMQ0F0TVM0elpXMGdNR1Z0SURBZ01HVnRJSEpuWW1Fb01qVTFMQ0F5TlRVc0lESTFOU3dnTUM0eUtTd2dMVEF1T1dWdElDMHdMamxsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU5TazdYRzRnSUgxY2JpQWdNalVsSUh0Y2JpQWdJQ0JpYjNndGMyaGhaRzkzT2lBd1pXMGdMVEV1TTJWdElEQmxiU0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMalVwTENBd0xqbGxiU0F0TUM0NVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMamNwTENBeExqSTFaVzBnTUdWdElEQWdNR1Z0SUNObVptWm1abVlzSURBdU9EYzFaVzBnTUM0NE56VmxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1TWlrc0lEQmxiU0F4TGpJMVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMaklwTENBdE1DNDVaVzBnTUM0NVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMaklwTENBdE1TNHpaVzBnTUdWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLU3dnTFRBdU9XVnRJQzB3TGpsbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWs3WEc0Z0lIMWNiaUFnTXpjdU5TVWdlMXh1SUNBZ0lHSnZlQzF6YUdGa2IzYzZJREJsYlNBdE1TNHpaVzBnTUdWdElEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJREF1T1dWdElDMHdMamxsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU5Ta3NJREV1TWpWbGJTQXdaVzBnTUNBd1pXMGdjbWRpWVNneU5UVXNJREkxTlN3Z01qVTFMQ0F3TGpjcExDQXdMamczTldWdElEQXVPRGMxWlcwZ01DQXdaVzBnSTJabVptWm1aaXdnTUdWdElERXVNalZsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJQzB3TGpsbGJTQXdMamxsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJQzB4TGpObGJTQXdaVzBnTUNBd1pXMGdjbWRpWVNneU5UVXNJREkxTlN3Z01qVTFMQ0F3TGpJcExDQXRNQzQ1WlcwZ0xUQXVPV1Z0SURBZ01HVnRJSEpuWW1Fb01qVTFMQ0F5TlRVc0lESTFOU3dnTUM0eUtUdGNiaUFnZlZ4dUlDQTFNQ1VnZTF4dUlDQWdJR0p2ZUMxemFHRmtiM2M2SURCbGJTQXRNUzR6WlcwZ01HVnRJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSURBdU9XVnRJQzB3TGpsbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSURFdU1qVmxiU0F3WlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqVXBMQ0F3TGpnM05XVnRJREF1T0RjMVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMamNwTENBd1pXMGdNUzR5TldWdElEQWdNR1Z0SUNObVptWm1abVlzSUMwd0xqbGxiU0F3TGpsbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSUMweExqTmxiU0F3WlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqSXBMQ0F0TUM0NVpXMGdMVEF1T1dWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLVHRjYmlBZ2ZWeHVJQ0EyTVM0eU5TVWdlMXh1SUNBZ0lHSnZlQzF6YUdGa2IzYzZJREJsYlNBdE1TNHpaVzBnTUdWdElEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJREF1T1dWdElDMHdMamxsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJREV1TWpWbGJTQXdaVzBnTUNBd1pXMGdjbWRpWVNneU5UVXNJREkxTlN3Z01qVTFMQ0F3TGpJcExDQXdMamczTldWdElEQXVPRGMxWlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqVXBMQ0F3WlcwZ01TNHlOV1Z0SURBZ01HVnRJSEpuWW1Fb01qVTFMQ0F5TlRVc0lESTFOU3dnTUM0M0tTd2dMVEF1T1dWdElEQXVPV1Z0SURBZ01HVnRJQ05tWm1abVptWXNJQzB4TGpObGJTQXdaVzBnTUNBd1pXMGdjbWRpWVNneU5UVXNJREkxTlN3Z01qVTFMQ0F3TGpJcExDQXRNQzQ1WlcwZ0xUQXVPV1Z0SURBZ01HVnRJSEpuWW1Fb01qVTFMQ0F5TlRVc0lESTFOU3dnTUM0eUtUdGNiaUFnZlZ4dUlDQTNOU1VnZTF4dUlDQWdJR0p2ZUMxemFHRmtiM2M2SURCbGJTQXRNUzR6WlcwZ01HVnRJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSURBdU9XVnRJQzB3TGpsbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSURFdU1qVmxiU0F3WlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqSXBMQ0F3TGpnM05XVnRJREF1T0RjMVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMaklwTENBd1pXMGdNUzR5TldWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNDFLU3dnTFRBdU9XVnRJREF1T1dWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNDNLU3dnTFRFdU0yVnRJREJsYlNBd0lEQmxiU0FqWm1abVptWm1MQ0F0TUM0NVpXMGdMVEF1T1dWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLVHRjYmlBZ2ZWeHVJQ0E0Tnk0MUpTQjdYRzRnSUNBZ1ltOTRMWE5vWVdSdmR6b2dNR1Z0SUMweExqTmxiU0F3WlcwZ01HVnRJSEpuWW1Fb01qVTFMQ0F5TlRVc0lESTFOU3dnTUM0eUtTd2dNQzQ1WlcwZ0xUQXVPV1Z0SURBZ01HVnRJSEpuWW1Fb01qVTFMQ0F5TlRVc0lESTFOU3dnTUM0eUtTd2dNUzR5TldWdElEQmxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1TWlrc0lEQXVPRGMxWlcwZ01DNDROelZsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJREJsYlNBeExqSTFaVzBnTUNBd1pXMGdjbWRpWVNneU5UVXNJREkxTlN3Z01qVTFMQ0F3TGpJcExDQXRNQzQ1WlcwZ01DNDVaVzBnTUNBd1pXMGdjbWRpWVNneU5UVXNJREkxTlN3Z01qVTFMQ0F3TGpVcExDQXRNUzR6WlcwZ01HVnRJREFnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzQzS1N3Z0xUQXVPV1Z0SUMwd0xqbGxiU0F3SURCbGJTQWpabVptWm1abU8xeHVJQ0I5WEc1OVhHNWNia0JyWlhsbWNtRnRaWE1nZDJWbGVDMXpjR2x1Ym1WeUlIdGNiaUFnTUNVc1hHNGdJREV3TUNVZ2UxeHVJQ0FnSUdKdmVDMXphR0ZrYjNjNklEQmxiU0F0TVM0elpXMGdNR1Z0SURCbGJTQWpabVptWm1abUxDQXdMamxsYlNBdE1DNDVaVzBnTUNBd1pXMGdjbWRpWVNneU5UVXNJREkxTlN3Z01qVTFMQ0F3TGpJcExDQXhMakkxWlcwZ01HVnRJREFnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzR5S1N3Z01DNDROelZsYlNBd0xqZzNOV1Z0SURBZ01HVnRJSEpuWW1Fb01qVTFMQ0F5TlRVc0lESTFOU3dnTUM0eUtTd2dNR1Z0SURFdU1qVmxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1TWlrc0lDMHdMamxsYlNBd0xqbGxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1TWlrc0lDMHhMak5sYlNBd1pXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMalVwTENBdE1DNDVaVzBnTFRBdU9XVnRJREFnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzQzS1R0Y2JpQWdmVnh1SUNBeE1TNHlOU1VnZTF4dUlDQWdJR0p2ZUMxemFHRmtiM2M2SURCbGJTQXRNUzR6WlcwZ01HVnRJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVOeWtzSURBdU9XVnRJQzB3TGpsbGJTQXdJREJsYlNBalptWm1abVptTENBeExqSTFaVzBnTUdWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLU3dnTUM0NE56VmxiU0F3TGpnM05XVnRJREFnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzR5S1N3Z01HVnRJREV1TWpWbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSUMwd0xqbGxiU0F3TGpsbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSUMweExqTmxiU0F3WlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqSXBMQ0F0TUM0NVpXMGdMVEF1T1dWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNDFLVHRjYmlBZ2ZWeHVJQ0F5TlNVZ2UxeHVJQ0FnSUdKdmVDMXphR0ZrYjNjNklEQmxiU0F0TVM0elpXMGdNR1Z0SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1TlNrc0lEQXVPV1Z0SUMwd0xqbGxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1Tnlrc0lERXVNalZsYlNBd1pXMGdNQ0F3WlcwZ0kyWm1abVptWml3Z01DNDROelZsYlNBd0xqZzNOV1Z0SURBZ01HVnRJSEpuWW1Fb01qVTFMQ0F5TlRVc0lESTFOU3dnTUM0eUtTd2dNR1Z0SURFdU1qVmxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1TWlrc0lDMHdMamxsYlNBd0xqbGxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1TWlrc0lDMHhMak5sYlNBd1pXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMaklwTENBdE1DNDVaVzBnTFRBdU9XVnRJREFnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzR5S1R0Y2JpQWdmVnh1SUNBek55NDFKU0I3WEc0Z0lDQWdZbTk0TFhOb1lXUnZkem9nTUdWdElDMHhMak5sYlNBd1pXMGdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLU3dnTUM0NVpXMGdMVEF1T1dWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNDFLU3dnTVM0eU5XVnRJREJsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU55a3NJREF1T0RjMVpXMGdNQzQ0TnpWbGJTQXdJREJsYlNBalptWm1abVptTENBd1pXMGdNUzR5TldWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLU3dnTFRBdU9XVnRJREF1T1dWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLU3dnTFRFdU0yVnRJREJsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJQzB3TGpsbGJTQXRNQzQ1WlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqSXBPMXh1SUNCOVhHNGdJRFV3SlNCN1hHNGdJQ0FnWW05NExYTm9ZV1J2ZHpvZ01HVnRJQzB4TGpObGJTQXdaVzBnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzR5S1N3Z01DNDVaVzBnTFRBdU9XVnRJREFnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzR5S1N3Z01TNHlOV1Z0SURCbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVOU2tzSURBdU9EYzFaVzBnTUM0NE56VmxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1Tnlrc0lEQmxiU0F4TGpJMVpXMGdNQ0F3WlcwZ0kyWm1abVptWml3Z0xUQXVPV1Z0SURBdU9XVnRJREFnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzR5S1N3Z0xURXVNMlZ0SURCbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSUMwd0xqbGxiU0F0TUM0NVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMaklwTzF4dUlDQjlYRzRnSURZeExqSTFKU0I3WEc0Z0lDQWdZbTk0TFhOb1lXUnZkem9nTUdWdElDMHhMak5sYlNBd1pXMGdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLU3dnTUM0NVpXMGdMVEF1T1dWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLU3dnTVM0eU5XVnRJREJsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJREF1T0RjMVpXMGdNQzQ0TnpWbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVOU2tzSURCbGJTQXhMakkxWlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqY3BMQ0F0TUM0NVpXMGdNQzQ1WlcwZ01DQXdaVzBnSTJabVptWm1aaXdnTFRFdU0yVnRJREJsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJQzB3TGpsbGJTQXRNQzQ1WlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqSXBPMXh1SUNCOVhHNGdJRGMxSlNCN1hHNGdJQ0FnWW05NExYTm9ZV1J2ZHpvZ01HVnRJQzB4TGpObGJTQXdaVzBnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzR5S1N3Z01DNDVaVzBnTFRBdU9XVnRJREFnTUdWdElISm5ZbUVvTWpVMUxDQXlOVFVzSURJMU5Td2dNQzR5S1N3Z01TNHlOV1Z0SURCbGJTQXdJREJsYlNCeVoySmhLREkxTlN3Z01qVTFMQ0F5TlRVc0lEQXVNaWtzSURBdU9EYzFaVzBnTUM0NE56VmxiU0F3SURCbGJTQnlaMkpoS0RJMU5Td2dNalUxTENBeU5UVXNJREF1TWlrc0lEQmxiU0F4TGpJMVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMalVwTENBdE1DNDVaVzBnTUM0NVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMamNwTENBdE1TNHpaVzBnTUdWdElEQWdNR1Z0SUNObVptWm1abVlzSUMwd0xqbGxiU0F0TUM0NVpXMGdNQ0F3WlcwZ2NtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXdMaklwTzF4dUlDQjlYRzRnSURnM0xqVWxJSHRjYmlBZ0lDQmliM2d0YzJoaFpHOTNPaUF3WlcwZ0xURXVNMlZ0SURCbGJTQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqSXBMQ0F3TGpsbGJTQXRNQzQ1WlcwZ01DQXdaVzBnY21kaVlTZ3lOVFVzSURJMU5Td2dNalUxTENBd0xqSXBMQ0F4TGpJMVpXMGdNR1Z0SURBZ01HVnRJSEpuWW1Fb01qVTFMQ0F5TlRVc0lESTFOU3dnTUM0eUtTd2dNQzQ0TnpWbGJTQXdMamczTldWdElEQWdNR1Z0SUhKblltRW9NalUxTENBeU5UVXNJREkxTlN3Z01DNHlLU3dnTUdWdElERXVNalZsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU1pa3NJQzB3TGpsbGJTQXdMamxsYlNBd0lEQmxiU0J5WjJKaEtESTFOU3dnTWpVMUxDQXlOVFVzSURBdU5Ta3NJQzB4TGpObGJTQXdaVzBnTUNBd1pXMGdjbWRpWVNneU5UVXNJREkxTlN3Z01qVTFMQ0F3TGpjcExDQXRNQzQ1WlcwZ0xUQXVPV1Z0SURBZ01HVnRJQ05tWm1abVptWTdYRzRnSUgxY2JuMWNibUJjYmx4dVpuVnVZM1JwYjI0Z1oyVjBVM1I1YkdWVGFHVmxkQ0FvYzNCcGJtNWxjbFp0S1NCN1hHNGdJR2xtSUNoemNHbHVibVZ5Vm0wdVgzTjBlV3hsVTJobFpYUXBJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1SUNCemNHbHVibVZ5Vm0wdVgzTjBlV3hsVTJobFpYUWdQU0JuWlhSVGRIbHNaVk5vWldWMFFubEpaQ2duZDJWbGVDMWpiWEF0Ykc5aFpHbHVaeTFwYm1ScFkyRjBiM0luS1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJ6WlhSTFpYbG1jbUZ0WlVOdmJHOXlJQ2h6Y0dsdWJtVnlWbTBzSUhaaGJDa2dlMXh1SUNCblpYUlRkSGxzWlZOb1pXVjBLSE53YVc1dVpYSldiU2xjYmlBZ1kyOXVjM1FnYTJWNVpuSmhiV1ZTZFd4bGN5QTlJR052YlhCMWRHVkxaWGxHY21GdFpWSjFiR1Z6S0haaGJDbGNiaUFnWTI5dWMzUWdjblZzWlhNZ1BTQnpjR2x1Ym1WeVZtMHVYM04wZVd4bFUyaGxaWFF1Y25Wc1pYTWdmSHdnYzNCcGJtNWxjbFp0TGw5emRIbHNaVk5vWldWMExtTnpjMUoxYkdWelhHNGdJR1p2Y2lBb2JHVjBJR2tnUFNBd0xDQnNJRDBnY25Wc1pYTXViR1Z1WjNSb095QnBJRHdnYkRzZ2FTc3JLU0I3WEc0Z0lDQWdZMjl1YzNRZ2FYUmxiU0E5SUhKMWJHVnpMbWwwWlcwb2FTbGNiaUFnSUNCcFppQW9LR2wwWlcwdWRIbHdaU0E5UFQwZ1ExTlRVblZzWlM1TFJWbEdVa0ZOUlZOZlVsVk1SVnh1SUNBZ0lDQWdJQ0FnSUh4OElHbDBaVzB1ZEhsd1pTQTlQVDBnUTFOVFVuVnNaUzVYUlVKTFNWUmZTMFZaUmxKQlRVVlRYMUpWVEVVcFhHNGdJQ0FnSUNBZ0lDWW1JR2wwWlcwdWJtRnRaU0E5UFQwZ0ozZGxaWGd0YzNCcGJtNWxjaWNwSUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR056YzFKMWJHVnpJRDBnYVhSbGJTNWpjM05TZFd4bGMxeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJREFzSUcwZ1BTQmpjM05TZFd4bGN5NXNaVzVuZEdnN0lHb2dQQ0J0T3lCcUt5c3BJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhMlY1Wm5KaGJXVWdQU0JqYzNOU2RXeGxjMXRxWFZ4dUlDQWdJQ0FnSUNCcFppQW9hMlY1Wm5KaGJXVXVkSGx3WlNBOVBUMGdRMU5UVW5Wc1pTNUxSVmxHVWtGTlJWOVNWVXhGWEc0Z0lDQWdJQ0FnSUNBZ2ZId2dhMlY1Wm5KaGJXVXVkSGx3WlNBOVBUMGdRMU5UVW5Wc1pTNVhSVUpMU1ZSZlMwVlpSbEpCVFVWZlVsVk1SU2tnZTF4dUlDQWdJQ0FnSUNBZ0lHdGxlV1p5WVcxbExuTjBlV3hsTG1KdmVGTm9ZV1J2ZHlBOUlHdGxlV1p5WVcxbFVuVnNaWE5iYWwxY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQmpiMjF3ZFhSbFMyVjVSbkpoYldWU2RXeGxjeUFvY21kaUtTQjdYRzRnSUdsbUlDZ2hjbWRpS1NCN1hHNGdJQ0FnY21WMGRYSnVYRzRnSUgxY2JpQWdZMjl1YzNRZ2MyTmhiR1ZCY25JZ1BTQmJYRzRnSUNBZ0p6QmxiU0F0TVM0elpXMGdNR1Z0SURCbGJTY3NYRzRnSUNBZ0p6QXVPV1Z0SUMwd0xqbGxiU0F3SURCbGJTY3NYRzRnSUNBZ0p6RXVNalZsYlNBd1pXMGdNQ0F3WlcwbkxGeHVJQ0FnSUNjd0xqZzNOV1Z0SURBdU9EYzFaVzBnTUNBd1pXMG5MRnh1SUNBZ0lDY3daVzBnTVM0eU5XVnRJREFnTUdWdEp5eGNiaUFnSUNBbkxUQXVPV1Z0SURBdU9XVnRJREFnTUdWdEp5eGNiaUFnSUNBbkxURXVNMlZ0SURCbGJTQXdJREJsYlNjc1hHNGdJQ0FnSnkwd0xqbGxiU0F0TUM0NVpXMGdNQ0F3WlcwblhWeHVJQ0JqYjI1emRDQmpiMnh2Y2tGeWNpQTlJRnRjYmlBZ0lDQW5NU2NzWEc0Z0lDQWdKekF1TWljc1hHNGdJQ0FnSnpBdU1pY3NYRzRnSUNBZ0p6QXVNaWNzWEc0Z0lDQWdKekF1TWljc1hHNGdJQ0FnSnpBdU1pY3NYRzRnSUNBZ0p6QXVOU2NzWEc0Z0lDQWdKekF1TnlkZExtMWhjQ2htZFc1amRHbHZiaUFvWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUNkeVoySmhLQ2NnS3lCeVoySXVjaUFySUNjc0p5QXJJSEpuWWk1bklDc2dKeXduSUNzZ2NtZGlMbUlnS3lBbkxDY2dLeUJsSUNzZ0p5a25YRzRnSUNBZ2ZTbGNiaUFnWTI5dWMzUWdjblZzWlhNZ1BTQmJYVnh1SUNCbWIzSWdLR3hsZENCcElEMGdNRHNnYVNBOElITmpZV3hsUVhKeUxteGxibWQwYURzZ2FTc3JLU0I3WEc0Z0lDQWdZMjl1YzNRZ2RHMXdRMjlzYjNKQmNuSWdQU0JzYjI5d1FYSnlZWGtvWTI5c2IzSkJjbklzSUdrc0lDZHlKeWxjYmlBZ0lDQnlkV3hsY3k1d2RYTm9LSE5qWVd4bFFYSnlMbTFoY0NobWRXNWpkR2x2YmlBb2MyTmhiR1ZUZEhJc0lHa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQnpZMkZzWlZOMGNpQXJJQ2NnSnlBcklIUnRjRU52Ykc5eVFYSnlXMmxkWEc0Z0lDQWdmU2t1YW05cGJpZ25MQ0FuS1NsY2JpQWdmVnh1SUNCeVpYUjFjbTRnY25Wc1pYTmNibjFjYmx4dVpuVnVZM1JwYjI0Z2NISnZZMlZ6YzFOMGVXeGxJQ2gyYlNrZ2UxeHVJQ0JqYjI1emRDQnpkSGxzWlNBOUlHVjRkSEpoWTNSRGIyMXdiMjVsYm5SVGRIbHNaU2gyYlNsY2JpQWdZMjl1YzNRZ1kyOXNiM0lnUFNCemRIbHNaUzVqYjJ4dmNseHVJQ0JqYjI1emRDQnlaMklnUFNCamIyeHZjaUFtSmlCblpYUlNaMklvWTI5c2IzSXBYRzRnSUdsbUlDaHlaMklwSUh0Y2JpQWdJQ0J6WlhSTFpYbG1jbUZ0WlVOdmJHOXlLSFp0TENCeVoySXBYRzRnSUgxY2JpQWdjbVYwZFhKdUlITjBlV3hsWEc1OVhHNWNibU52Ym5OMElHeHZZV1JwYm1kSmJtUnBZMkYwYjNJZ1BTQjdYRzRnSUc1aGJXVTZJQ2QzWldWNExXeHZZV1JwYm1jdGFXNWthV05oZEc5eUp5eGNiaUFnY21WdVpHVnlJQ2hqY21WaGRHVkZiR1Z0Wlc1MEtTQjdYRzRnSUNBZ2RHaHBjeTUzWldWNFZIbHdaU0E5SUNkc2IyRmthVzVuTFdsdVpHbGpZWFJ2Y2lkY2JpQWdJQ0J5WlhSMWNtNGdZM0psWVhSbFJXeGxiV1Z1ZENnbmJXRnlheWNzSUh0Y2JpQWdJQ0FnSUdGMGRISnpPaUI3SUNkM1pXVjRMWFI1Y0dVbk9pQW5iRzloWkdsdVp5MXBibVJwWTJGMGIzSW5JSDBzWEc0Z0lDQWdJQ0J6ZEdGMGFXTkRiR0Z6Y3pvZ0ozZGxaWGd0Ykc5aFpHbHVaeTFwYm1ScFkyRjBiM0lnZDJWbGVDMWpkQ2NzWEc0Z0lDQWdJQ0J6ZEdGMGFXTlRkSGxzWlRvZ2NISnZZMlZ6YzFOMGVXeGxLSFJvYVhNcFhHNGdJQ0FnZlNsY2JpQWdmU3hjYmlBZ1gyTnpjMXh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJR2x1YVhRZ0tIZGxaWGdwSUh0Y2JpQWdJQ0JsZUhSeVlXTjBRMjl0Y0c5dVpXNTBVM1I1YkdVZ1BTQjNaV1Y0TG1WNGRISmhZM1JEYjIxd2IyNWxiblJUZEhsc1pWeHVJQ0FnSUdkbGRGSm5ZaUE5SUhkbFpYZ3VkWFJwYkhNdVoyVjBVbWRpWEc0Z0lDQWdiRzl2Y0VGeWNtRjVJRDBnZDJWbGVDNTFkR2xzY3k1c2IyOXdRWEp5WVhsY2JpQWdJQ0JuWlhSVGRIbHNaVk5vWldWMFFubEpaQ0E5SUhkbFpYZ3VkWFJwYkhNdVoyVjBVM1I1YkdWVGFHVmxkRUo1U1dSY2JpQWdJQ0IzWldWNExuSmxaMmx6ZEdWeVEyOXRjRzl1Wlc1MEtDZHNiMkZrYVc1bkxXbHVaR2xqWVhSdmNpY3NJR3h2WVdScGJtZEpibVJwWTJGMGIzSXBYRzRnSUgxY2JuMWNiaUlzSWk4cVhHNGdLaUJNYVdObGJuTmxaQ0IwYnlCMGFHVWdRWEJoWTJobElGTnZablIzWVhKbElFWnZkVzVrWVhScGIyNGdLRUZUUmlrZ2RXNWtaWElnYjI1bFhHNGdLaUJ2Y2lCdGIzSmxJR052Ym5SeWFXSjFkRzl5SUd4cFkyVnVjMlVnWVdkeVpXVnRaVzUwY3k0Z0lGTmxaU0IwYUdVZ1RrOVVTVU5GSUdacGJHVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIZHBkR2dnZEdocGN5QjNiM0pySUdadmNpQmhaR1JwZEdsdmJtRnNJR2x1Wm05eWJXRjBhVzl1WEc0Z0tpQnlaV2RoY21ScGJtY2dZMjl3ZVhKcFoyaDBJRzkzYm1WeWMyaHBjQzRnSUZSb1pTQkJVMFlnYkdsalpXNXpaWE1nZEdocGN5Qm1hV3hsWEc0Z0tpQjBieUI1YjNVZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsWEc0Z0tpQmNJa3hwWTJWdWMyVmNJaWs3SUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJWY2JpQXFJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVJQ0JaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5eGNiaUFxSUhOdlpuUjNZWEpsSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVYRzRnS2lCY0lrRlRJRWxUWENJZ1FrRlRTVk1zSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dWeHVJQ29nUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNGdJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobFhHNGdLaUJ6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtJR3hwYldsMFlYUnBiMjV6WEc0Z0tpQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dVhHNXBiWEJ2Y25RZ2JHbHpkQ0JtY205dElDY3VMMnhwYzNRblhHNXBiWEJ2Y25RZ2MyTnliMnhzWlhJZ1puSnZiU0FuTGk5elkzSnZiR3hsY2lkY2JtbHRjRzl5ZENCM1lYUmxjbVpoYkd3Z1puSnZiU0FuTGk5M1lYUmxjbVpoYkd3blhHNXBiWEJ2Y25RZ1kyVnNiQ0JtY205dElDY3VMMk5sYkd3blhHNXBiWEJ2Y25RZ2FHVmhaR1Z5SUdaeWIyMGdKeTR2YUdWaFpHVnlKMXh1YVcxd2IzSjBJR3h2WVdScGJtY2dabkp2YlNBbkxpOXNiMkZrYVc1bkoxeHVhVzF3YjNKMElISmxabkpsYzJnZ1puSnZiU0FuTGk5eVpXWnlaWE5vSjF4dWFXMXdiM0owSUd4dllXUnBibWRKYm1ScFkyRjBiM0lnWm5KdmJTQW5MaTlzYjJGa2FXNW5MV2x1WkdsallYUnZjaWRjYmx4dWFXMXdiM0owSUNjdUwzTjBlV3hsTG1OemN5ZGNibHh1WTI5dWMzUWdiVzlrZFd4bGN5QTlJRnRjYmlBZ2JHbHpkQ3hjYmlBZ2MyTnliMnhzWlhJc1hHNGdJSGRoZEdWeVptRnNiQ3hjYmlBZ1kyVnNiQ3hjYmlBZ2FHVmhaR1Z5TEZ4dUlDQnNiMkZrYVc1bkxGeHVJQ0J5WldaeVpYTm9MRnh1SUNCc2IyRmthVzVuU1c1a2FXTmhkRzl5WEc1ZFhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNiaUFnYVc1cGRDQW9kMlZsZUNrZ2UxeHVJQ0FnSUcxdlpIVnNaWE11Wm05eVJXRmphQ2htZFc1amRHbHZiaUFvYlc5a0tTQjdYRzRnSUNBZ0lDQjNaV1Y0TG1sdWMzUmhiR3dvYlc5a0tWeHVJQ0FnSUgwcFhHNGdJSDFjYm4xY2JpSXNJaThxWEc0Z0tpQk1hV05sYm5ObFpDQjBieUIwYUdVZ1FYQmhZMmhsSUZOdlpuUjNZWEpsSUVadmRXNWtZWFJwYjI0Z0tFRlRSaWtnZFc1a1pYSWdiMjVsWEc0Z0tpQnZjaUJ0YjNKbElHTnZiblJ5YVdKMWRHOXlJR3hwWTJWdWMyVWdZV2R5WldWdFpXNTBjeTRnSUZObFpTQjBhR1VnVGs5VVNVTkZJR1pwYkdWY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhkcGRHZ2dkR2hwY3lCM2IzSnJJR1p2Y2lCaFpHUnBkR2x2Ym1Gc0lHbHVabTl5YldGMGFXOXVYRzRnS2lCeVpXZGhjbVJwYm1jZ1kyOXdlWEpwWjJoMElHOTNibVZ5YzJocGNDNGdJRlJvWlNCQlUwWWdiR2xqWlc1elpYTWdkR2hwY3lCbWFXeGxYRzRnS2lCMGJ5QjViM1VnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxYRzRnS2lCY0lreHBZMlZ1YzJWY0lpazdJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlZjYmlBcUlIZHBkR2dnZEdobElFeHBZMlZ1YzJVdUlDQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl4Y2JpQXFJSE52Wm5SM1lYSmxJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdVhHNGdLaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1Z4dUlDb2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM0Z0lGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsWEc0Z0tpQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a0lHeHBiV2wwWVhScGIyNXpYRzRnS2lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1YVcxd2IzSjBJQ2N1TDNOc2FXUmxjaTVqYzNNblhHNWNibU52Ym5OMElGUlNRVTVUU1ZSSlQwNWZWRWxOUlNBOUlEUXdNRnh1WTI5dWMzUWdUa1ZKUjBoQ1QxSmZVME5CVEVWZlZFbE5SU0E5SURFd01GeHVZMjl1YzNRZ1RVRkpUbDlUVEVsRVJWOVBVRUZEU1ZSWklEMGdNVnh1WTI5dWMzUWdWRWhTVDFSVVRFVmZVME5TVDB4TVgxUkpUVVVnUFNBeU5WeHVZMjl1YzNRZ1NVNVVSVkpXUVV4ZlRVbE9TVTFWVFNBOUlESXdNRnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0I3WEc0Z0lHTnlaV0YwWldRZ0tDa2dlMXh1SUNBZ0lIUm9hWE11WDJOc2IyNWxjeUE5SUZ0ZFhHNGdJQ0FnZEdocGN5NXBibTVsY2s5bVpuTmxkQ0E5SURCY2JpQWdJQ0IwYUdsekxsOXBibVJwWTJGMGIzSWdQU0J1ZFd4c1hHNGdJSDBzWEc1Y2JpQWdZbVZtYjNKbFZYQmtZWFJsSUNncElIdGNiaUFnSUNCMGFHbHpMbDluWlhSWGNtRndjR1Z5VTJsNlpTZ3BYRzRnSUgwc1hHNWNiaUFnZFhCa1lYUmxaQ0FvS1NCN1hHNGdJQ0FnWTI5dWMzUWdZMmhwYkdSeVpXNGdQU0IwYUdsekxpUmphR2xzWkhKbGJseHVJQ0FnSUdOdmJuTjBJR3hsYmlBOUlHTm9hV3hrY21WdUlDWW1JR05vYVd4a2NtVnVMbXhsYm1kMGFGeHVJQ0FnSUdsbUlDaGphR2xzWkhKbGJpQW1KaUJzWlc0Z1BpQXdLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUd4bGJqc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhadElEMGdZMmhwYkdSeVpXNWJhVjFjYmlBZ0lDQWdJQ0FnYVdZZ0tIWnRMaVJ2Y0hScGIyNXpMbDlqYjIxd2IyNWxiblJVWVdjZ1BUMDlJQ2RwYm1ScFkyRjBiM0luWEc0Z0lDQWdJQ0FnSUNBZ2ZId2dkbTB1SkhadWIyUmxMbVJoZEdFdWNtVm1JRDA5UFNBbmFXNWthV05oZEc5eUp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhadExsOTNZWFJqYUdWeUxtZGxkQ2dwWEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQjNaV1Y0TG5WMGFXeHpMbVpwY21WTVlYcDViRzloWkNoMGFHbHpMaVJsYkN3Z2RISjFaU2xjYmlBZ0lDQnBaaUFvZEdocGN5NWZjSEpsU1c1a1pYZ2dJVDA5SUhSb2FYTXVZM1Z5Y21WdWRFbHVaR1Y0S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbDl6Ykdsa1pWUnZLSFJvYVhNdVkzVnljbVZ1ZEVsdVpHVjRLVnh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0J0YjNWdWRHVmtJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxsOW5aWFJYY21Gd2NHVnlVMmw2WlNncFhHNGdJQ0FnZEdocGN5NWZjMnhwWkdWVWJ5aDBhR2x6TG1OMWNuSmxiblJKYm1SbGVDbGNiaUFnSUNCM1pXVjRMblYwYVd4ekxtWnBjbVZNWVhwNWJHOWhaQ2gwYUdsekxpUmxiQ3dnZEhKMVpTbGNiaUFnZlN4Y2JseHVJQ0J0WlhSb2IyUnpPaUI3WEc0Z0lDQWdYMmRsZEZkeVlYQndaWEpUYVhwbElDZ3BJSHRjYmlBZ0lDQWdJR052Ym5OMElIZHlZWEJ3WlhJZ1BTQjBhR2x6TGlSeVpXWnpMbmR5WVhCd1pYSmNiaUFnSUNBZ0lHbG1JQ2gzY21Gd2NHVnlLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSEpsWTNRZ1BTQjNjbUZ3Y0dWeUxtZGxkRUp2ZFc1a2FXNW5RMnhwWlc1MFVtVmpkQ2dwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM2R5WVhCd1pYSlhhV1IwYUNBOUlISmxZM1F1ZDJsa2RHaGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmQzSmhjSEJsY2tobGFXZG9kQ0E5SUhKbFkzUXVhR1ZwWjJoMFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5bWIzSnRZWFJEYUdsc1pISmxiaUFvWTNKbFlYUmxSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ1kyaHBiR1J5Wlc0Z1BTQjBhR2x6TGlSemJHOTBjeTVrWldaaGRXeDBJSHg4SUZ0ZFhHNGdJQ0FnSUNCc1pYUWdhVzVrYVdOaGRHOXlWbTV2WkdWY2JpQWdJQ0FnSUdOdmJuTjBJR05sYkd4eklEMGdZMmhwYkdSeVpXNHVabWxzZEdWeUtIWnViMlJsSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0NGMmJtOWtaUzUwWVdjcElISmxkSFZ5YmlCbVlXeHpaVnh1SUNBZ0lDQWdJQ0JwWmlBb2RtNXZaR1V1WTI5dGNHOXVaVzUwVDNCMGFXOXVjeUFtSmlCMmJtOWtaUzVqYjIxd2IyNWxiblJQY0hScGIyNXpMblJoWnlBOVBUMGdKMmx1WkdsallYUnZjaWNwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnBibVJwWTJGMGIzSldibTlrWlNBOUlIWnViMlJsWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJ5ZFdWY2JpQWdJQ0FnSUgwcExtMWhjQ2gyYm05a1pTQTlQaUI3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqY21WaGRHVkZiR1Z0Wlc1MEtDZHNhU2NzSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaV1k2SUNkalpXeHNjeWNzWEc0Z0lDQWdJQ0FnSUNBZ2MzUmhkR2xqUTJ4aGMzTTZJR0IzWldWNExYTnNhV1JsY2kxalpXeHNJSGRsWlhndFkzUWtlM1JvYVhNdWFYTk9aV2xuYUdKdmNpQS9JQ2NnYm1WcFoyaGliM0l0WTJWc2JDY2dPaUFuSjMxZ1hHNGdJQ0FnSUNBZ0lIMHNJRnQyYm05a1pWMHBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdhV1lnS0dsdVpHbGpZWFJ2Y2xadWIyUmxLU0I3WEc0Z0lDQWdJQ0FnSUdsdVpHbGpZWFJ2Y2xadWIyUmxMbVJoZEdFdVlYUjBjbk1nUFNCcGJtUnBZMkYwYjNKV2JtOWtaUzVrWVhSaExtRjBkSEp6SUh4OElIdDlYRzRnSUNBZ0lDQWdJR2x1WkdsallYUnZjbFp1YjJSbExtUmhkR0V1WVhSMGNuTXVZMjkxYm5RZ1BTQmpaV3hzY3k1c1pXNW5kR2hjYmlBZ0lDQWdJQ0FnYVc1a2FXTmhkRzl5Vm01dlpHVXVaR0YwWVM1aGRIUnljeTVoWTNScGRtVWdQU0IwYUdsekxtTjFjbkpsYm5SSmJtUmxlRnh1SUNBZ0lDQWdJQ0IwYUdsekxsOXBibVJwWTJGMGIzSWdQU0JwYm1ScFkyRjBiM0pXYm05a1pWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2NtVjBkWEp1SUdObGJHeHpYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXlaVzVrWlhKVGJHbGtaWE1nS0dOeVpXRjBaVVZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgyTmxiR3h6SUQwZ2RHaHBjeTVmWm05eWJXRjBRMmhwYkdSeVpXNG9ZM0psWVhSbFJXeGxiV1Z1ZENsY2JpQWdJQ0FnSUhSb2FYTXVabkpoYldWRGIzVnVkQ0E5SUhSb2FYTXVYMk5sYkd4ekxteGxibWQwYUZ4dUlDQWdJQ0FnY21WMGRYSnVJR055WldGMFpVVnNaVzFsYm5Rb1hHNGdJQ0FnSUNBZ0lDZHVZWFluTEZ4dUlDQWdJQ0FnSUNCN1hHNGdJQ0FnSUNBZ0lDQWdjbVZtT2lBbmQzSmhjSEJsY2ljc1hHNGdJQ0FnSUNBZ0lDQWdZWFIwY25NNklIc2dKM2RsWlhndGRIbHdaU2M2SUhSb2FYTXVhWE5PWldsbmFHSnZjaUEvSUNkemJHbGtaWEl0Ym1WcFoyaGliM0luSURvZ0ozTnNhV1JsY2ljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0J2YmpvZ2QyVmxlQzVqY21WaGRHVkZkbVZ1ZEUxaGNDaGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXNYRzRnSUNBZ0lDQWdJQ0FnSUNCYkozTmpjbTlzYkNjc0lDZHpZM0p2Ykd4emRHRnlkQ2NzSUNkelkzSnZiR3hsYm1RblhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnZEc5MVkyaHpkR0Z5ZERvZ2RHaHBjeTVmYUdGdVpHeGxWRzkxWTJoVGRHRnlkQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzkxWTJodGIzWmxPaUIzWldWNExuVjBhV3h6TG5Sb2NtOTBkR3hsS0hkbFpYZ3VkWFJwYkhNdVltbHVaQ2gwYUdsekxsOW9ZVzVrYkdWVWIzVmphRTF2ZG1Vc0lIUm9hWE1wTENBeU5Ta3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnZkV05vWlc1a09pQjBhR2x6TGw5b1lXNWtiR1ZVYjNWamFFVnVaQ3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzkxWTJoallXNWpaV3c2SUhSb2FYTXVYMmhoYm1Sc1pWUnZkV05vUTJGdVkyVnNYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdLU3hjYmlBZ0lDQWdJQ0FnSUNCemRHRjBhV05EYkdGemN6b2dKM2RsWlhndGMyeHBaR1Z5SUhkbFpYZ3RjMnhwWkdWeUxYZHlZWEJ3WlhJZ2QyVmxlQzFqZENjc1hHNGdJQ0FnSUNBZ0lDQWdjM1JoZEdsalUzUjViR1U2SUhkbFpYZ3VaWGgwY21GamRFTnZiWEJ2Ym1WdWRGTjBlV3hsS0hSb2FYTXBYRzRnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUZ0Y2JpQWdJQ0FnSUNBZ0lDQmpjbVZoZEdWRmJHVnRaVzUwS0NkMWJDY3NJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxaam9nSjJsdWJtVnlKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lITjBZWFJwWTBOc1lYTnpPaUFuZDJWbGVDMXpiR2xrWlhJdGFXNXVaWElnZDJWbGVDMWpkQ2RjYmlBZ0lDQWdJQ0FnSUNCOUxDQjBhR2x6TGw5alpXeHNjeWtzWEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYVc1a2FXTmhkRzl5WEc0Z0lDQWdJQ0FnSUYxY2JpQWdJQ0FnSUNsY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnTHk4Z1oyVjBJSE4wWVc1a1lYSmtJR2x1WkdWNFhHNGdJQ0FnWDI1dmNtMWhiR2w2WlVsdVpHVjRJQ2hwYm1SbGVDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2JtVjNTVzVrWlhnZ1BTQW9hVzVrWlhnZ0t5QjBhR2x6TG1aeVlXMWxRMjkxYm5RcElDVWdkR2hwY3k1bWNtRnRaVU52ZFc1MFhHNGdJQ0FnSUNCeVpYUjFjbTRnVFdGMGFDNXRhVzRvVFdGMGFDNXRZWGdvYm1WM1NXNWtaWGdzSURBcExDQjBhR2x6TG1aeVlXMWxRMjkxYm5RZ0xTQXhLVnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQmZjM1JoY25SQmRYUnZVR3hoZVNBb0tTQjdYRzRnSUNBZ0lDQnBaaUFvSVhSb2FYTXVZWFYwYjFCc1lYa2dmSHdnZEdocGN5NWhkWFJ2VUd4aGVTQTlQVDBnSjJaaGJITmxKeWtnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbDloZFhSdlVHeGhlVlJwYldWeUtTQjdYRzRnSUNBZ0lDQWdJR05zWldGeVZHbHRaVzkxZENoMGFHbHpMbDloZFhSdlVHeGhlVlJwYldWeUtWeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5aGRYUnZVR3hoZVZScGJXVnlJRDBnYm5Wc2JGeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2JHVjBJR2x1ZEdWeWRtRnNJRDBnY0dGeWMyVkpiblFvZEdocGN5NXBiblJsY25aaGJDQXRJRlJTUVU1VFNWUkpUMDVmVkVsTlJTQXRJRTVGU1VkSVFrOVNYMU5EUVV4RlgxUkpUVVVwWEc0Z0lDQWdJQ0JwYm5SbGNuWmhiQ0E5SUdsdWRHVnlkbUZzSUQ0Z1NVNVVSVkpXUVV4ZlRVbE9TVTFWVFNBL0lHbHVkR1Z5ZG1Gc0lEb2dTVTVVUlZKV1FVeGZUVWxPU1UxVlRWeHVJQ0FnSUNBZ2RHaHBjeTVmWVhWMGIxQnNZWGxVYVcxbGNpQTlJSE5sZEZScGJXVnZkWFFvZDJWbGVDNTFkR2xzY3k1aWFXNWtLSFJvYVhNdVgyNWxlSFFzSUhSb2FYTXBMQ0JwYm5SbGNuWmhiQ2xjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYM04wYjNCQmRYUnZVR3hoZVNBb0tTQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NWZZWFYwYjFCc1lYbFVhVzFsY2lrZ2UxeHVJQ0FnSUNBZ0lDQmpiR1ZoY2xScGJXVnZkWFFvZEdocGN5NWZZWFYwYjFCc1lYbFVhVzFsY2lsY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWVhWMGIxQnNZWGxVYVcxbGNpQTlJRzUxYkd4Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDNOc2FXUmxWRzhnS0dsdVpHVjRMQ0JwYzFSdmRXTm9VMk55YjJ4c0tTQjdYRzRnSUNBZ0lDQnBaaUFvZEdocGN5NW1jbUZ0WlVOdmRXNTBJRHc5SURBcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCcFppQW9JWFJvYVhNdWFXNW1hVzVwZEdVZ2ZId2dkR2hwY3k1cGJtWnBibWwwWlNBOVBUMGdKMlpoYkhObEp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2FXNWtaWGdnUFQwOUlDMHhJSHg4SUdsdVpHVjRJRDRnS0hSb2FYTXVabkpoYldWRGIzVnVkQ0F0SURFcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZjMnhwWkdWVWJ5aDBhR2x6TG1OMWNuSmxiblJKYm1SbGVDbGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb0lYUm9hWE11WDNCeVpVbHVaR1Y0SUNZbUlIUm9hWE11WDNCeVpVbHVaR1Y0SUNFOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGw5emFHOTNUbTlrWlhNZ0ppWWdkR2hwY3k1ZmMyaHZkMDV2WkdWeld6QmRLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY0hKbFNXNWtaWGdnUFNCMGFHbHpMbDl6YUc5M1RtOWtaWE5iTUYwdWFXNWtaWGhjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl3Y21WSmJtUmxlQ0E5SUhSb2FYTXVZM1Z5Y21WdWRFbHVaR1Y0WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzTnNhV1JwYm1jcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMGFHbHpMbDl6Ykdsa2FXNW5JRDBnZEhKMVpWeHVYRzRnSUNBZ0lDQmpiMjV6ZENCdVpYZEpibVJsZUNBOUlIUm9hWE11WDI1dmNtMWhiR2w2WlVsdVpHVjRLR2x1WkdWNEtWeHVJQ0FnSUNBZ1kyOXVjM1FnYVc1dVpYSWdQU0IwYUdsekxpUnlaV1p6TG1sdWJtVnlYRzRnSUNBZ0lDQmpiMjV6ZENCemRHVndJRDBnZEdocGN5NWZjM1JsY0NBOUlIUm9hWE11Wm5KaGJXVkRiM1Z1ZENBOFBTQXhJRDhnTUNBNklIUm9hWE11WDNCeVpVbHVaR1Y0SUMwZ2FXNWtaWGhjYmx4dUlDQWdJQ0FnYVdZZ0tHbHVibVZ5S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCeVpYQmhjbVZPYjJSbGN5Z3BYRzRnSUNBZ0lDQWdJR052Ym5OMElIUnlZVzV6YkdGMFpTQTlJSGRsWlhndWRYUnBiSE11WjJWMFZISmhibk5tYjNKdFQySnFLR2x1Ym1WeUtTNTBjbUZ1YzJ4aGRHVmNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JXRjBZMmdnUFNCMGNtRnVjMnhoZEdVZ0ppWWdkSEpoYm5Oc1lYUmxMbTFoZEdOb0tDOTBjbUZ1YzJ4aGRHVmJYaWhkSzF4Y0tDaGJLeTFjWEdRdVhTc3BMeWxjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhVzV1WlhKWUlEMGdiV0YwWTJnZ0ppWWdiV0YwWTJoYk1WMGdmSHdnTUZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0JrYVhOMElEMGdhVzV1WlhKWUlDMGdkR2hwY3k1cGJtNWxjazltWm5ObGRGeHVJQ0FnSUNBZ0lDQjBhR2x6TG1sdWJtVnlUMlptYzJWMElDczlJSE4wWlhBZ0tpQjBhR2x6TGw5M2NtRndjR1Z5VjJsa2RHaGNiaUFnSUNBZ0lDQWdMeThnZEhKaGJuTm1iM0p0SUhSb1pTQjNhRzlzWlNCemJHbGtaWE1nWjNKdmRYQXVYRzRnSUNBZ0lDQWdJR2x1Ym1WeUxuTjBlV3hsTG5kbFltdHBkRlJ5WVc1emFYUnBiMjRnUFNCZ0xYZGxZbXRwZEMxMGNtRnVjMlp2Y20wZ0pIdFVVa0ZPVTBsVVNVOU9YMVJKVFVVZ0x5QXhNREF3ZlhNZ1pXRnpaUzFwYmkxdmRYUmdYRzRnSUNBZ0lDQWdJR2x1Ym1WeUxuTjBlV3hsTG0xdmVsUnlZVzV6YVhScGIyNGdQU0JnZEhKaGJuTm1iM0p0SUNSN1ZGSkJUbE5KVkVsUFRsOVVTVTFGSUM4Z01UQXdNSDF6SUdWaGMyVXRhVzR0YjNWMFlGeHVJQ0FnSUNBZ0lDQnBibTVsY2k1emRIbHNaUzUwY21GdWMybDBhVzl1SUQwZ1lIUnlZVzV6Wm05eWJTQWtlMVJTUVU1VFNWUkpUMDVmVkVsTlJTQXZJREV3TURCOWN5QmxZWE5sTFdsdUxXOTFkR0JjYmlBZ0lDQWdJQ0FnYVc1dVpYSXVjM1I1YkdVdWQyVmlhMmwwVkhKaGJuTm1iM0p0SUQwZ1lIUnlZVzV6YkdGMFpUTmtLQ1I3ZEdocGN5NXBibTVsY2s5bVpuTmxkSDF3ZUN3Z01Dd2dNQ2xnWEc0Z0lDQWdJQ0FnSUdsdWJtVnlMbk4wZVd4bExtMXZlbFJ5WVc1elptOXliU0E5SUdCMGNtRnVjMnhoZEdVelpDZ2tlM1JvYVhNdWFXNXVaWEpQWm1aelpYUjljSGdzSURBc0lEQXBZRnh1SUNBZ0lDQWdJQ0JwYm01bGNpNXpkSGxzWlM1MGNtRnVjMlp2Y20wZ1BTQmdkSEpoYm5Oc1lYUmxNMlFvSkh0MGFHbHpMbWx1Ym1WeVQyWm1jMlYwZlhCNExDQXdMQ0F3S1dCY2JseHVJQ0FnSUNBZ0lDQXZMeUJsYldsMElITmpjbTlzYkNCbGRtVnVkSE11WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hhWE5VYjNWamFGTmpjbTlzYkNrZ2UxeHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyVnRhWFJUWTNKdmJHeEZkbVZ1ZENnbmMyTnliMnhzYzNSaGNuUW5LVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDNSb2NtOTBkR3hsUlcxcGRGTmpjbTlzYkNoa2FYTjBMQ0FvS1NBOVBpQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlsYldsMFUyTnliMnhzUlhabGJuUW9KM05qY205c2JHVnVaQ2NwWEc0Z0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdmU3dnVkVoU1QxUlVURVZmVTBOU1QweE1YMVJKVFVVcFhHNWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmJHOXZjRk5vYjNkT2IyUmxjeWh6ZEdWd0tWeHVYRzRnSUNBZ0lDQWdJSE5sZEZScGJXVnZkWFFvS0NrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG1selRtVnBaMmhpYjNJcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM05sZEU1bGFXZG9ZbTl5Y3lncFhHNGdJQ0FnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUNBZ2MyVjBWR2x0Wlc5MWRDZ29LU0E5UGlCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwYm01bGNpNXpkSGxzWlM1M1pXSnJhWFJVY21GdWMybDBhVzl1SUQwZ0p5ZGNiaUFnSUNBZ0lDQWdJQ0FnSUdsdWJtVnlMbk4wZVd4bExtMXZlbFJ5WVc1emFYUnBiMjRnUFNBbkoxeHVJQ0FnSUNBZ0lDQWdJQ0FnYVc1dVpYSXVjM1I1YkdVdWRISmhibk5wZEdsdmJpQTlJQ2NuWEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnZEdocGN5NWZjMmh2ZDFOMFlYSjBTV1I0T3lCcElEdzlJSFJvYVhNdVgzTm9iM2RGYm1SSlpIZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0J1YjJSbElEMGdkR2hwY3k1ZmMyaHZkMDV2WkdWelcybGRYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYm05a1pTa2dleUJqYjI1MGFXNTFaU0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5OMElHVnNiU0E5SUc1dlpHVXVabWx5YzNSRmJHVnRaVzUwUTJocGJHUmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHRMbk4wZVd4bExuZGxZbXRwZEZSeVlXNXphWFJwYjI0Z1BTQW5KMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiRzB1YzNSNWJHVXViVzk2VkhKaGJuTnBkR2x2YmlBOUlDY25YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnNiUzV6ZEhsc1pTNTBjbUZ1YzJsMGFXOXVJRDBnSnlkY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJR05zWldGdUlHTnNiMjVsWkNCdWIyUmxjeUJoYm1RZ2NtVmhjbkpoYm1kbElITnNhV1JsSUdObGJHeHpMbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY21WaGNuSmhibWRsVG05a1pYTW9ibVYzU1c1a1pYZ3BYRzRnSUNBZ0lDQWdJQ0FnZlN3Z1RrVkpSMGhDVDFKZlUwTkJURVZmVkVsTlJTbGNiaUFnSUNBZ0lDQWdmU3dnVkZKQlRsTkpWRWxQVGw5VVNVMUZLVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0JwWmlBb2JtVjNTVzVrWlhnZ0lUMDlJSFJvYVhNdVgzQnlaVWx1WkdWNEtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdUpHVnRhWFFvSjJOb1lXNW5aU2NzSUhkbFpYZ3VkWFJwYkhNdVkzSmxZWFJsUlhabGJuUW9kR2hwY3k0a1pXd3NJQ2RqYUdGdVoyVW5MQ0I3WEc0Z0lDQWdJQ0FnSUNBZ2FXNWtaWGc2SUc1bGQwbHVaR1Y0WEc0Z0lDQWdJQ0FnSUgwcEtWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZlkyeGxZWEpPYjJSbGMwOW1abk5sZENBb0tTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCbGJtUWdQU0IwYUdsekxsOXphRzkzUlc1a1NXUjRYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnZEdocGN5NWZjMmh2ZDFOMFlYSjBTV1I0T3lCcElEdzlJR1Z1WkRzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0FnSUd4bGRDQnViMlJsSUQwZ2RHaHBjeTVmYzJodmQwNXZaR1Z6VzJsZFhHNGdJQ0FnSUNBZ0lHNXZaR1VnUFNCdWIyUmxJQ1ltSUc1dlpHVXVabWx5YzNSRmJHVnRaVzUwUTJocGJHUmNiaUFnSUNBZ0lDQWdhV1lnS0NGdWIyUmxLU0I3SUdOdmJuUnBiblZsSUgxY2JpQWdJQ0FnSUNBZ2QyVmxlQzUxZEdsc2N5NWhaR1JVY21GdWMyWnZjbTBvZEdocGN5NWZjMmh2ZDA1dlpHVnpXMmxkTG1acGNuTjBSV3hsYldWdWRFTm9hV3hrTENCN1hHNGdJQ0FnSUNBZ0lDQWdkSEpoYm5Oc1lYUmxPaUFuZEhKaGJuTnNZWFJsTTJRb01IQjRMQ0F3Y0hnc0lEQndlQ2tuWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5c2IyOXdVMmh2ZDA1dlpHVnpJQ2h6ZEdWd0tTQjdYRzRnSUNBZ0lDQnBaaUFvSVhOMFpYQWdmSHdnZEdocGN5NW1jbUZ0WlVOdmRXNTBJRHc5SURFcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCamIyNXpkQ0J6YVdkdUlEMGdjM1JsY0NBK0lEQWdQeUF4SURvZ0xURmNiaUFnSUNBZ0lHeGxkQ0JwSUQwZ2MzUmxjQ0E4UFNBd0lEOGdkR2hwY3k1ZmMyaHZkMU4wWVhKMFNXUjRJRG9nZEdocGN5NWZjMmh2ZDBWdVpFbGtlRnh1SUNBZ0lDQWdZMjl1YzNRZ1pXNWtJRDBnYzNSbGNDQThQU0F3SUQ4Z2RHaHBjeTVmYzJodmQwVnVaRWxrZUNBNklIUm9hWE11WDNOb2IzZFRkR0Z5ZEVsa2VGeHVJQ0FnSUNBZ1ptOXlJQ2c3SUdrZ0lUMDlJR1Z1WkNBdElITnBaMjQ3SUdrZ0xUMGdjMmxuYmlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdVpYaDBTV1I0SUQwZ2FTQXJJSE4wWlhCY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJodmQwNXZaR1Z6VzI1bGVIUkpaSGhkSUQwZ2RHaHBjeTVmYzJodmQwNXZaR1Z6VzJsZFhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNOb2IzZE9iMlJsYzF0dVpYaDBTV1I0WFM1ZmMyaHZkMGx1WkdWNElEMGdibVY0ZEVsa2VGeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVmYzJodmQwNXZaR1Z6VzJsZFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMGFHbHpMbDl6YUc5M1UzUmhjblJKWkhnZ0t6MGdjM1JsY0Z4dUlDQWdJQ0FnZEdocGN5NWZjMmh2ZDBWdVpFbGtlQ0FyUFNCemRHVndYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXdjbVZ3WVhKbFRtOWtaWE1nS0NrZ2UxeHVJQ0FnSUNBZ0x5OGdkR1Z6ZENCcFppQjBhR1VnYm1WNGRDQnpiR2xrWlNCMGIzZGhjbVJ6SUhSb1pTQmthWEpsWTNScGIyNGdaWGhwYzNSekxseHVJQ0FnSUNBZ0x5OGdaUzVuTGlCamRYSnlaVzUwU1c1a1pYZ2dNQ0F0UGlBeE9pQnphRzkxYkdRZ2NISmxjR0Z5WlNBMElITnNhV1JsY3pvZ0xURXNJREFzSURFc0lESmNiaUFnSUNBZ0lDOHZJR2xtSUc1dmRDd2dkSEpoYm5Oc1lYUmxJR0VnYm05a1pTQjBieUJvWlhKbExDQnZjaUJxZFhOMElHTnNiMjVsSUdsMExseHVJQ0FnSUNBZ1kyOXVjM1FnYzNSbGNDQTlJSFJvYVhNdVgzTjBaWEJjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVmYVc1cGRHVmtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmx1YVhST2IyUmxjeWdwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMmx1YVhSbFpDQTlJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmYzJodmQwNXZaR1Z6SUQwZ2UzMWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtWnlZVzFsUTI5MWJuUWdQRDBnTVNrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emFHOTNVM1JoY25SSlpIZ2dQU0IwYUdsekxsOXphRzkzUlc1a1NXUjRJRDBnTUZ4dUlDQWdJQ0FnSUNCamIyNXpkQ0J1YjJSbElEMGdkR2hwY3k1ZlkyVnNiSE5iTUYwdVpXeHRYRzRnSUNBZ0lDQWdJRzV2WkdVdWMzUjViR1V1YjNCaFkybDBlU0E5SURGY2JpQWdJQ0FnSUNBZ2JtOWtaUzV6ZEhsc1pTNTZTVzVrWlhnZ1BTQTVPVnh1SUNBZ0lDQWdJQ0J1YjJSbExtbHVaR1Y0SUQwZ01GeHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emFHOTNUbTlrWlhOYk1GMGdQU0J1YjJSbFhHNGdJQ0FnSUNBZ0lHNXZaR1V1WDJsdVUyaHZkeUE5SUhSeWRXVmNiaUFnSUNBZ0lDQWdibTlrWlM1ZmMyaHZkMGx1WkdWNElEMGdNRnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHTnZibk4wSUhOb2IzZERiM1Z1ZENBOUlIUm9hWE11WDNOb2IzZERiM1Z1ZENBOUlFMWhkR2d1WVdKektITjBaWEFwSUNzZ00xeHVJQ0FnSUNBZ2RHaHBjeTVmYzJodmQxTjBZWEowU1dSNElEMGdjM1JsY0NBOFBTQXdJRDhnTFRFZ09pQXlJQzBnYzJodmQwTnZkVzUwWEc0Z0lDQWdJQ0IwYUdsekxsOXphRzkzUlc1a1NXUjRJRDBnYzNSbGNDQThQU0F3SUQ4Z2MyaHZkME52ZFc1MElDMGdNaUE2SURGY2JpQWdJQ0FnSUhSb2FYTXVYMk5zWldGeVRtOWtaWE5QWm1aelpYUW9LVnh1SUNBZ0lDQWdkR2hwY3k1ZmNHOXphWFJwYjI1T2IyUmxjeWgwYUdsekxsOXphRzkzVTNSaGNuUkpaSGdzSUhSb2FYTXVYM05vYjNkRmJtUkpaSGdzSUhOMFpYQXBYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lGOXBibWwwVG05a1pYTWdLQ2tnZTF4dUlDQWdJQ0FnWTI5dWMzUWdkRzkwWVd3Z1BTQjBhR2x6TG1aeVlXMWxRMjkxYm5SY2JpQWdJQ0FnSUdOdmJuTjBJR05sYkd4eklEMGdkR2hwY3k1ZlkyVnNiSE5jYmlBZ0lDQWdJR1p2Y2lBb2JHVjBJR2tnUFNBd095QnBJRHdnZEc5MFlXdzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIyUmxJRDBnWTJWc2JITmJhVjB1Wld4dFhHNGdJQ0FnSUNBZ0lHNXZaR1V1YVc1a1pYZ2dQU0JwWEc0Z0lDQWdJQ0FnSUc1dlpHVXVYMmx1VTJodmR5QTlJR1poYkhObFhHNGdJQ0FnSUNBZ0lHNXZaR1V1YzNSNWJHVXVla2x1WkdWNElEMGdNRnh1SUNBZ0lDQWdJQ0J1YjJSbExuTjBlV3hsTG05d1lXTnBkSGtnUFNBd1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5d2IzTnBkR2x2Yms1dlpHVnpJQ2hpWldkcGJpd2daVzVrTENCemRHVndMQ0JoYm1sdEtTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCalpXeHNjeUE5SUhSb2FYTXVYMk5sYkd4elhHNGdJQ0FnSUNCamIyNXpkQ0J6ZEdGeWRDQTlJSE4wWlhBZ1BEMGdNQ0EvSUdKbFoybHVJRG9nWlc1a1hHNGdJQ0FnSUNCamIyNXpkQ0J6ZEc5d0lEMGdjM1JsY0NBOFBTQXdJRDhnWlc1a0lEb2dZbVZuYVc1Y2JpQWdJQ0FnSUdOdmJuTjBJSE5wWjI0Z1BTQnpkR1Z3SUR3OUlEQWdQeUF0TVNBNklERmNiaUFnSUNBZ0lHeGxkQ0JqWld4c1NXNWtaWGdnUFNCMGFHbHpMbDl3Y21WSmJtUmxlQ0FySUhOcFoyNWNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0J6ZEdGeWREc2dhU0FoUFQwZ2MzUnZjQ0F0SUhOcFoyNDdJR2tnUFNCcElDMGdjMmxuYmlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCdWIyUmxJRDBnWTJWc2JITmJkR2hwY3k1ZmJtOXliV0ZzYVhwbFNXNWtaWGdvWTJWc2JFbHVaR1Y0S1YwdVpXeHRYRzRnSUNBZ0lDQWdJR05sYkd4SmJtUmxlQ0E5SUdObGJHeEpibVJsZUNBdElITnBaMjVjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjRzl6YVhScGIyNU9iMlJsS0c1dlpHVXNJR2twWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU3hjYmx4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUdsdVpHVjRPaUJ3YjNOcGRHbHZiaUJwYm1SbGVDQnBiaUIwYUdVZ2MyaHZkMmx1WnlCalpXeHNjeWNnZG1sbGR5NWNiaUFnSUNBZ0tpOWNiaUFnSUNCZmNHOXphWFJwYjI1T2IyUmxJQ2h1YjJSbExDQnBibVJsZUNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnYUc5c1pHVnlJRDBnZEdocGN5NWZjMmh2ZDA1dlpHVnpXMmx1WkdWNFhWeHVJQ0FnSUNBZ2FXWWdLRzV2WkdVdVgybHVVMmh2ZHlBbUppQm9iMnhrWlhJZ0lUMDlJRzV2WkdVcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0dodmJHUmxjaWtnZXlCMGFHbHpMbDl5WlcxdmRtVkRiRzl1WlNob2IyeGtaWElwSUgxY2JpQWdJQ0FnSUNBZ2JtOWtaU0E5SUhSb2FYTXVYMmRsZEVOc2IyNWxLRzV2WkdVdWFXNWtaWGdwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYkhObElHbG1JQ2h1YjJSbExsOXBibE5vYjNjcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lHNXZaR1V1WDJsdVUyaHZkeUE5SUhSeWRXVmNiaUFnSUNBZ0lHTnZibk4wSUhSeVlXNXpiR0YwWlZnZ1BTQnBibVJsZUNBcUlIUm9hWE11WDNkeVlYQndaWEpYYVdSMGFDQXRJSFJvYVhNdWFXNXVaWEpQWm1aelpYUmNiaUFnSUNBZ0lIZGxaWGd1ZFhScGJITXVZV1JrVkhKaGJuTm1iM0p0S0c1dlpHVXNJSHRjYmlBZ0lDQWdJQ0FnZEhKaGJuTnNZWFJsT2lCZ2RISmhibk5zWVhSbE0yUW9KSHQwY21GdWMyeGhkR1ZZZlhCNExDQXdjSGdzSURCd2VDbGdYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdibTlrWlM1emRIbHNaUzU2U1c1a1pYZ2dQU0E1T1NBdElFMWhkR2d1WVdKektHbHVaR1Y0S1Z4dUlDQWdJQ0FnYm05a1pTNXpkSGxzWlM1dmNHRmphWFI1SUQwZ01WeHVJQ0FnSUNBZ2JtOWtaUzVmYzJodmQwbHVaR1Y0SUQwZ2FXNWtaWGhjYmlBZ0lDQWdJSFJvYVhNdVgzTm9iM2RPYjJSbGMxdHBibVJsZUYwZ1BTQnViMlJsWEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjluWlhSRGJHOXVaU0FvYVc1a1pYZ3BJSHRjYmlBZ0lDQWdJR3hsZENCaGNuSWdQU0IwYUdsekxsOWpiRzl1WlhOYmFXNWtaWGhkWEc0Z0lDQWdJQ0JwWmlBb0lXRnljaWtnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYkc5dVpYTmJhVzVrWlhoZElEMGdZWEp5SUQwZ1cxMWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2hoY25JdWJHVnVaM1JvSUR3OUlEQXBJSHRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdiM0pwWjA1dlpHVWdQU0IwYUdsekxsOWpaV3hzYzF0cGJtUmxlRjB1Wld4dFhHNGdJQ0FnSUNBZ0lHTnZibk4wSUdOc2IyNWxJRDBnYjNKcFowNXZaR1V1WTJ4dmJtVk9iMlJsS0hSeWRXVXBYRzRnSUNBZ0lDQWdJR05zYjI1bExsOXBjME5zYjI1bElEMGdkSEoxWlZ4dUlDQWdJQ0FnSUNCamJHOXVaUzVmYVc1VGFHOTNJRDBnYjNKcFowNXZaR1V1WDJsdVUyaHZkMXh1SUNBZ0lDQWdJQ0JqYkc5dVpTNXBibVJsZUNBOUlHOXlhV2RPYjJSbExtbHVaR1Y0WEc0Z0lDQWdJQ0FnSUdOc2IyNWxMbk4wZVd4bExtOXdZV05wZEhrZ1BTQXdYRzRnSUNBZ0lDQWdJR05zYjI1bExuTjBlV3hsTG5wSmJtUmxlQ0E5SURCY2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWTNRZ1BTQjBhR2x6TGlSeVpXWnpMbWx1Ym1WeVhHNGdJQ0FnSUNBZ0lHTjBMbUZ3Y0dWdVpFTm9hV3hrS0dOc2IyNWxLVnh1SUNBZ0lDQWdJQ0JoY25JdWNIVnphQ2hqYkc5dVpTbGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lISmxkSFZ5YmlCaGNuSXVjRzl3S0NsY2JpQWdJQ0I5TEZ4dVhHNGdJQ0FnWDNKbGJXOTJaVU5zYjI1bElDaHViMlJsS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JwWkhnZ1BTQnViMlJsTG1sdVpHVjRYRzRnSUNBZ0lDQjBhR2x6TGw5b2FXUmxUbTlrWlNodWIyUmxLVnh1SUNBZ0lDQWdZMjl1YzNRZ1lYSnlJRDBnZEdocGN5NWZZMnh2Ym1WelcybGtlRjFjYmlBZ0lDQWdJR0Z5Y2k1d2RYTm9LRzV2WkdVcFhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5b2FXUmxUbTlrWlNBb2JtOWtaU2tnZTF4dUlDQWdJQ0FnYm05a1pTNWZhVzVUYUc5M0lEMGdabUZzYzJWY2JpQWdJQ0FnSUc1dlpHVXVjM1I1YkdVdWIzQmhZMmwwZVNBOUlEQmNiaUFnSUNBZ0lHNXZaR1V1YzNSNWJHVXVla2x1WkdWNElEMGdNRnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJvYVdSbElHNXZaR1Z6SUdaeWIyMGdZbVZuYVc0Z2RHOGdaVzVrSUdsdUlITm9iM2RCY25KaGVTNWNiaUFnSUNBZ0tpQnBaaUJwZENCcGN5QmpiRzl1WlNCdWIyUmxMQ0JxZFhOMElHMXZkbVVnZEdobElHTnNiMjVsSUc1dlpHVWdkRzhnZEdobElHSjFabVpsY2k1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmWTJ4bFlYSk9iMlJsY3lBb1ltVm5hVzRzSUdWdVpDa2dlMXh1SUNBZ0lDQWdabTl5SUNoc1pYUWdhU0E5SUdKbFoybHVPeUJwSUR3OUlHVnVaRHNnYVNzcktTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElHNXZaR1VnUFNCMGFHbHpMbDl6YUc5M1RtOWtaWE5iYVYxY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z1YjJSbEtTQjdJSEpsZEhWeWJpQjlYRzRnSUNBZ0lDQWdJR2xtSUNodWIyUmxMbDlwYzBOc2IyNWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY21WdGIzWmxRMnh2Ym1Vb2JtOWtaU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJR2xtSUNnaGJtOWtaUzVmYVc1VGFHOTNLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTVmYUdsa1pVNXZaR1VvYm05a1pTbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZmMyaHZkMDV2WkdWelcybGRYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJR052Y0hrZ2JtOWtaU0J6ZEhsc1pTQndjbTl3Y3lBb2IzQmhZMmwwZVNCaGJtUWdla2x1WkdWNEtTQmhibVFnZEhKaGJuTm1iM0p0SUhOMFlYUjFjeUJtY205dFhHNGdJQ0FnSUNvZ2IyNWxJR1ZzWlcxbGJuUWdkRzhnWVc1dmRHaGxjaTVjYmlBZ0lDQWdLaTljYmlBZ0lDQmZZMjl3ZVZOMGVXeGxJQ2htY205dExDQjBieXdnYzNSNWJHVnpJRDBnV3lkdmNHRmphWFI1Snl3Z0ozcEpibVJsZUNkZExDQjBjbUZ1YzJadmNtMUZlSFJ5WVNBOUlIdDlLU0I3WEc0Z0lDQWdJQ0IzWldWNExuVjBhV3h6TG1WNGRHVnVaRXRsZVhNb2RHOHVjM1I1YkdVc0lHWnliMjB1YzNSNWJHVXNJSE4wZVd4bGN5bGNiaUFnSUNBZ0lHTnZibk4wSUhSeVlXNXpUMkpxSUQwZ2QyVmxlQzUxZEdsc2N5NW5aWFJVY21GdWMyWnZjbTFQWW1vb1puSnZiU2xjYmlBZ0lDQWdJR1p2Y2lBb1kyOXVjM1FnYXlCcGJpQjBjbUZ1YzJadmNtMUZlSFJ5WVNrZ2UxeHVJQ0FnSUNBZ0lDQjBjbUZ1YzA5aWFsdHJYU0E5SUhSeVlXNXpabTl5YlVWNGRISmhXMnRkWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0IzWldWNExuVjBhV3h6TG1Ga1pGUnlZVzV6Wm05eWJTaDBieXdnZEhKaGJuTlBZbW9wWEc0Z0lDQWdJQ0JqYjI1emRDQm1jbTl0U1c1dVpYSWdQU0JtY205dExtWnBjbk4wUld4bGJXVnVkRU5vYVd4a1hHNGdJQ0FnSUNCamIyNXpkQ0IwYjBsdWJtVnlJRDBnZEc4dVptbHljM1JGYkdWdFpXNTBRMmhwYkdSY2JpQWdJQ0FnSUhSdlNXNXVaWEl1YzNSNWJHVXViM0JoWTJsMGVTQTlJR1p5YjIxSmJtNWxjaTV6ZEhsc1pTNXZjR0ZqYVhSNVhHNGdJQ0FnSUNCM1pXVjRMblYwYVd4ekxtTnZjSGxVY21GdWMyWnZjbTBvWm5KdmJVbHVibVZ5TENCMGIwbHVibVZ5S1Z4dUlDQWdJSDBzWEc1Y2JpQWdJQ0F2S2lwY2JpQWdJQ0FnS2lCeVpYQnNZV05sSUdFZ1kyeHZibVVnYm05a1pTQjNhWFJvSUhSb1pTQnZjbWxuYVc1aGJDQnViMlJsSUdsbUlHbDBKM01nYm05MElHbHVJSFZ6WlM1Y2JpQWdJQ0FnS2k5Y2JpQWdJQ0JmY21Wd2JHRmpaVU5zYjI1bElDaGpiRzl1WlN3Z2NHOXpLU0I3WEc0Z0lDQWdJQ0JqYjI1emRDQnZjbWxuVG05a1pTQTlJSFJvYVhNdVgyTmxiR3h6VzJOc2IyNWxMbWx1WkdWNFhTNWxiRzFjYmlBZ0lDQWdJR2xtSUNodmNtbG5UbTlrWlM1ZmFXNVRhRzkzS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dWMzUWdiM0pwWjFOb2IzZEpibVJsZUNBOUlHOXlhV2RPYjJSbExsOXphRzkzU1c1a1pYaGNiaUFnSUNBZ0lHTnZibk4wSUhOMGVXeGxVSEp2Y0hNZ1BTQmJKMjl3WVdOcGRIa25MQ0FuZWtsdVpHVjRKMTFjYmlBZ0lDQWdJR3hsZENCamJGeHVJQ0FnSUNBZ2FXWWdLRTFoZEdndVlXSnpLRzl5YVdkVGFHOTNTVzVrWlhncElEdzlJREVwSUh0Y2JpQWdJQ0FnSUNBZ0x5OGdiR1ZoZG1VZ1lTQmpiRzl1WlNCMGJ5QnlaWEJzWVdObElIUm9aU0J2Y21sblRtOWtaU0JwYmlCMGFHVWdjMmh2ZHlCNmIyNWxLQzB4SUg0Z01Ta3VYRzRnSUNBZ0lDQWdJR05zSUQwZ2RHaHBjeTVmWjJWMFEyeHZibVVvYjNKcFowNXZaR1V1YVc1a1pYZ3BYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTnZjSGxUZEhsc1pTaHZjbWxuVG05a1pTd2dZMndwWEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM05vYjNkT2IyUmxjMXR2Y21sblUyaHZkMGx1WkdWNFhTQTlJR05zWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J2Y21sblRtOWtaUzVmYVc1VGFHOTNJRDBnZEhKMVpWeHVJQ0FnSUNBZ1kyOXVjM1FnZEhKaGJuTlBZbW9nUFNCM1pXVjRMblYwYVd4ekxtZGxkRlJ5WVc1elptOXliVTlpYWloamJHOXVaU2xjYmlBZ0lDQWdJSFJ5WVc1elQySnFMblJ5WVc1emJHRjBaU0E5SUhSeVlXNXpUMkpxTG5SeVlXNXpiR0YwWlM1eVpYQnNZV05sS0M5Ykt5MWNYR1F1WFN0YmNIZGRlQzhzSUNna01Da2dQVDRnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0c5eklDb2dkR2hwY3k1ZmQzSmhjSEJsY2xkcFpIUm9JQzBnZEdocGN5NXBibTVsY2s5bVpuTmxkQ0FySUNkd2VDZGNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQjBhR2x6TGw5amIzQjVVM1I1YkdVb1kyeHZibVVzSUc5eWFXZE9iMlJsTENCemRIbHNaVkJ5YjNCekxDQjBjbUZ1YzA5aWFpbGNiaUFnSUNBZ0lIUm9hWE11WDNKbGJXOTJaVU5zYjI1bEtHTnNiMjVsS1Z4dUlDQWdJQ0FnYVdZZ0tDRmpiQ2tnZTF4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NWZjMmh2ZDA1dlpHVnpXMjl5YVdkVGFHOTNTVzVrWlhoZFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCMGFHbHpMbDl6YUc5M1RtOWtaWE5iY0c5elhTQTlJRzl5YVdkT2IyUmxYRzRnSUNBZ0lDQnZjbWxuVG05a1pTNWZjMmh2ZDBsdVpHVjRJRDBnY0c5elhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5eVpXRnljbUZ1WjJWT2IyUmxjeUFvYm1WM1NXNWtaWGdwSUh0Y2JpQWdJQ0FnSUdsbUlDaDBhR2x6TG1aeVlXMWxRMjkxYm5RZ1BEMGdNU2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbDl6Ykdsa2FXNW5JRDBnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdkR2hwY3k1amRYSnlaVzUwU1c1a1pYZ2dQU0F3WEc0Z0lDQWdJQ0FnSUhKbGRIVnlibHh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0F2THlCamJHVmhjaUJoZFhSdlVHeGhlU0IwYVcxbGNpQW9ZVzVrSUhKbGMzUmhjblFnWVdaMFpYSWdkWEJrWVhSbFpDQm9iMjlyS1M1Y2JpQWdJQ0FnSUhSb2FYTXVYM04wWVhKMFFYVjBiMUJzWVhrb0tWeHVYRzRnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FxSUdOc1pXRnVJRzV2WkdWekxpQnlaWEJzWVdObElHTjFjbkpsYm5RZ2JtOWtaU0IzYVhSb0lHNXZiaTFqYkc5dVpXUWdibTlrWlM1Y2JpQWdJQ0FnSUNBcUlITmxkQ0JqZFhKeVpXNTBJR2x1WkdWNElIUnZJSFJvWlNCdVpYY2dhVzVrWlhndVhHNGdJQ0FnSUNBZ0tpOWNiaUFnSUNBZ0lHTnZibk4wSUhOb2IzZHpJRDBnZEdocGN5NWZjMmh2ZDA1dlpHVnpYRzRnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnZEdocGN5NWZjMmh2ZDFOMFlYSjBTV1I0T3lCcElEdzlJSFJvYVhNdVgzTm9iM2RGYm1SSlpIZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ0lDQnphRzkzYzF0cFhTNWZhVzVUYUc5M0lEMGdabUZzYzJWY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXRNVHNnYVNBOFBTQXhPeUJwS3lzcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2JtOWtaU0E5SUhOb2IzZHpXMmxkWEc0Z0lDQWdJQ0FnSUdsbUlDZ2hibTlrWlM1ZmFYTkRiRzl1WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJRzV2WkdVdVgybHVVMmh2ZHlBOUlIUnlkV1ZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl5WlhCc1lXTmxRMnh2Ym1Vb2JtOWtaU3dnYVNsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQjBhR2x6TGw5amJHVmhjazV2WkdWektIUm9hWE11WDNOb2IzZFRkR0Z5ZEVsa2VDd2dMVElwWEc0Z0lDQWdJQ0IwYUdsekxsOXphRzkzVTNSaGNuUkpaSGdnUFNBdE1WeHVJQ0FnSUNBZ2RHaHBjeTVmWTJ4bFlYSk9iMlJsY3lneUxDQjBhR2x6TGw5emFHOTNSVzVrU1dSNEtWeHVJQ0FnSUNBZ2RHaHBjeTVmYzJodmQwVnVaRWxrZUNBOUlERmNiaUFnSUNBZ0lIUm9hWE11WDNOc2FXUnBibWNnUFNCbVlXeHpaVnh1WEc0Z0lDQWdJQ0F2THlCelpYUWdZM1Z5Y21WdWRDQnBibVJsZUNCMGJ5QjBhR1VnYm1WM0lHbHVaR1Y0TGx4dUlDQWdJQ0FnZEdocGN5NWpkWEp5Wlc1MFNXNWtaWGdnUFNCdVpYZEpibVJsZUZ4dUlDQWdJQ0FnZEdocGN5NWZjSEpsU1c1a1pYZ2dQU0J1WlhkSmJtUmxlRnh1SUNBZ0lIMHNYRzVjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJoWTJOdmNtUnBibWNnZEc4Z2RHaGxJR0YwZEhKek9pQnVaV2xuYUdKdmNsTmpZV3hsTENCdVpXbG5hR0p2Y2tGc2NHaGhMQ0J1WldsbmFHSnZjbE53WVdObExseHVJQ0FnSUNBcUlERXVJR0Z3Y0d4NUlIUm9aU0J0WVdsdUlHTmxiR3dnZEhKaGJuTm1iM0p0SUdWbVptVmpkSE11WEc0Z0lDQWdJQ29nTWk0Z2MyVjBJSFJvWlNCd2NtVjJhVzkxY3lCalpXeHNJR0Z1WkNCMGFHVWdibVY0ZENCalpXeHNKM01nY0c5emFYUnZiaXdnYzJOaGJHVWdZVzVrSUdGc2NHaGhMbHh1SUNBZ0lDQXFJRE11SUhObGRDQnZkR2hsY2lCalpXeHNjeWNnYzJOaGJHVWdZVzVrSUdGc2NHaGhMbHh1SUNBZ0lDQXFMMXh1SUNBZ0lGOXpaWFJPWldsbmFHSnZjbk1nS0NrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJSFJvYVhNdVgzTm9iM2RUZEdGeWRFbGtlRHNnYVNBOFBTQjBhR2x6TGw5emFHOTNSVzVrU1dSNE95QnBLeXNwSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnWld4dElEMGdkR2hwY3k1ZmMyaHZkMDV2WkdWelcybGRMbVpwY25OMFJXeGxiV1Z1ZEVOb2FXeGtYRzRnSUNBZ0lDQWdJR1ZzYlM1emRIbHNaUzUzWldKcmFYUlVjbUZ1YzJsMGFXOXVJRDBnWUdGc2JDQWtlMDVGU1VkSVFrOVNYMU5EUVV4RlgxUkpUVVVnTHlBeE1EQXdmWE1nWldGelpXQmNiaUFnSUNBZ0lDQWdaV3h0TG5OMGVXeGxMbTF2ZWxSeVlXNXphWFJwYjI0Z1BTQmdZV3hzSUNSN1RrVkpSMGhDVDFKZlUwTkJURVZmVkVsTlJTQXZJREV3TURCOWN5QmxZWE5sWUZ4dUlDQWdJQ0FnSUNCbGJHMHVjM1I1YkdVdWRISmhibk5wZEdsdmJpQTlJR0JoYkd3Z0pIdE9SVWxIU0VKUFVsOVRRMEZNUlY5VVNVMUZJQzhnTVRBd01IMXpJR1ZoYzJWZ1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUhSeVlXNXpUMkpxSUQwZ2UxeHVJQ0FnSUNBZ0lDQWdJSE5qWVd4bE9pQmdjMk5oYkdVb0pIdHBJRDA5UFNBd0lEOGdkR2hwY3k1amRYSnlaVzUwU1hSbGJWTmpZV3hsSURvZ2RHaHBjeTV1WldsbmFHSnZjbE5qWVd4bGZTbGdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYkdWMElIUnlZVzV6YkdGMFpWaGNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDl1WldsbmFHSnZjbGRwWkhSb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NWZibVZwWjJoaWIzSlhhV1IwYUNBOUlIQmhjbk5sUm14dllYUW9aV3h0TG5OMGVXeGxMbmRwWkhSb0tTQjhmQ0JsYkcwdVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2t1ZDJsa2RHaGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0F2THlCallXeGpkV3hoZEdVZ2NHOXphWFJwYjI0Z2IyWm1jMlYwY3lCaFkyTnZjbVJwYm1jZ2RHOGdibVZwWjJoaWIzSWdjMk5oYkdWekxseHVJQ0FnSUNBZ0lDQnBaaUFvVFdGMGFDNWhZbk1vYVNrZ1BUMDlJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCa2FYTjBJRDBnS0NoMGFHbHpMbDkzY21Gd2NHVnlWMmxrZEdnZ0xTQjBhR2x6TGw5dVpXbG5hR0p2Y2xkcFpIUm9JQ29nZEdocGN5NXVaV2xuYUdKdmNsTmpZV3hsS1NBdklESmNiaUFnSUNBZ0lDQWdJQ0FnSUNzZ2RHaHBjeTV1WldsbmFHSnZjbE53WVdObElDb2dkMlZsZUM1amIyNW1hV2N1Wlc1MkxuTmpZV3hsS1NBdklIUm9hWE11Ym1WcFoyaGliM0pUWTJGc1pWeHVJQ0FnSUNBZ0lDQWdJSFJ5WVc1emJHRjBaVmdnUFNBdGFTQXFJR1JwYzNSY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQXZMeUJqYkdWaGNpQndiM05wZEdsdmJpQnZabVp6WlhSekxseHVJQ0FnSUNBZ0lDQWdJSFJ5WVc1emJHRjBaVmdnUFNBd1hHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkSEpoYm5OUFltb3VkSEpoYm5Oc1lYUmxJRDBnWUhSeVlXNXpiR0YwWlROa0tDUjdkSEpoYm5Oc1lYUmxXSDF3ZUN3Z01IQjRMQ0F3Y0hncFlGeHVJQ0FnSUNBZ0lDQjNaV1Y0TG5WMGFXeHpMbUZrWkZSeVlXNXpabTl5YlNobGJHMHNJSFJ5WVc1elQySnFLVnh1SUNBZ0lDQWdJQ0JsYkcwdWMzUjViR1V1YjNCaFkybDBlU0E5SUdrZ1BUMDlJREFnUHlCTlFVbE9YMU5NU1VSRlgwOVFRVU5KVkZrZ09pQjBhR2x6TG01bGFXZG9ZbTl5UVd4d2FHRmNiaUFnSUNBZ0lIMWNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gyNWxlSFFnS0NrZ2UxeHVJQ0FnSUNBZ2JHVjBJRzVsZUhRZ1BTQjBhR2x6TG1OMWNuSmxiblJKYm1SbGVDQXJJREZjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbVp5WVcxbFEyOTFiblFnUEQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0J1WlhoMExTMWNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIUm9hWE11WDNOc2FXUmxWRzhvYm1WNGRDbGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gzQnlaWFlnS0NrZ2UxeHVJQ0FnSUNBZ2JHVjBJSEJ5WlhZZ1BTQjBhR2x6TG1OMWNuSmxiblJKYm1SbGVDQXRJREZjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbVp5WVcxbFEyOTFiblFnUEQwZ01Ta2dlMXh1SUNBZ0lDQWdJQ0J3Y21WMkt5dGNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lIUm9hWE11WDNOc2FXUmxWRzhvY0hKbGRpbGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gyaGhibVJzWlZSdmRXTm9VM1JoY25RZ0tHVjJaVzUwS1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0IwYjNWamFDQTlJR1YyWlc1MExtTm9ZVzVuWldSVWIzVmphR1Z6V3pCZFhHNGdJQ0FnSUNCMGFHbHpMbDl6ZEc5d1FYVjBiMUJzWVhrb0tWeHVJQ0FnSUNBZ1kyOXVjM1FnYVc1dVpYSWdQU0IwYUdsekxpUnlaV1p6TG1sdWJtVnlYRzRnSUNBZ0lDQjBhR2x6TGw5MGIzVmphRkJoY21GdGN5QTlJSHRjYmlBZ0lDQWdJQ0FnYjNKcFoybHVZV3hVY21GdWMyWnZjbTA2SUdsdWJtVnlMbk4wZVd4bExuZGxZbXRwZEZSeVlXNXpabTl5YlZ4dUlDQWdJQ0FnSUNBZ0lIeDhJR2x1Ym1WeUxuTjBlV3hsTG0xdmVsUnlZVzV6Wm05eWJWeHVJQ0FnSUNBZ0lDQWdJSHg4SUdsdWJtVnlMbk4wZVd4bExuUnlZVzV6Wm05eWJTeGNiaUFnSUNBZ0lDQWdjM1JoY25SVWIzVmphRVYyWlc1ME9pQjBiM1ZqYUN4Y2JpQWdJQ0FnSUNBZ2MzUmhjblJZT2lCMGIzVmphQzV3WVdkbFdDeGNiaUFnSUNBZ0lDQWdjM1JoY25SWk9pQjBiM1ZqYUM1d1lXZGxXU3hjYmlBZ0lDQWdJQ0FnZEdsdFpWTjBZVzF3T2lCbGRtVnVkQzUwYVcxbFUzUmhiWEJjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlMRnh1WEc0Z0lDQWdYMmhoYm1Sc1pWUnZkV05vVFc5MlpTQW9aWFpsYm5RcElIdGNiaUFnSUNBZ0lHTnZibk4wSUhSd0lEMGdkR2hwY3k1ZmRHOTFZMmhRWVhKaGJYTmNiaUFnSUNBZ0lHbG1JQ2doZEhBcElIc2djbVYwZFhKdUlIMWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxsOXpiR2xrYVc1bktTQjdYRzRnSUNBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQTlQVDBnSjJSbGRtVnNiM0J0Wlc1MEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGdXM1oxWlMxeVpXNWtaWEpkSUhkaGNtNDZJR05oYmlkMElITmpjbTlzYkNCMGFHVWdjMnhwWkdWeUlHUjFjbWx1WnlCemJHbGthVzVuTG1BcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdjbVYwZFhKdVhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCamIyNXpkQ0I3SUhOMFlYSjBXQ3dnYzNSaGNuUlpJSDBnUFNCMGFHbHpMbDkwYjNWamFGQmhjbUZ0YzF4dUlDQWdJQ0FnWTI5dWMzUWdkRzkxWTJnZ1BTQmxkbVZ1ZEM1amFHRnVaMlZrVkc5MVkyaGxjMXN3WFZ4dUlDQWdJQ0FnWTI5dWMzUWdiMlptYzJWMFdDQTlJSFJ2ZFdOb0xuQmhaMlZZSUMwZ2MzUmhjblJZWEc0Z0lDQWdJQ0JqYjI1emRDQnZabVp6WlhSWklEMGdkRzkxWTJndWNHRm5aVmtnTFNCemRHRnlkRmxjYmlBZ0lDQWdJSFJ3TG05bVpuTmxkRmdnUFNCdlptWnpaWFJZWEc0Z0lDQWdJQ0IwY0M1dlptWnpaWFJaSUQwZ2IyWm1jMlYwV1Z4dUlDQWdJQ0FnYkdWMElHbHpWaUE5SUhSd0xtbHpWbVZ5ZEdsallXeGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhWE5XSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNCcGMxWWdQU0IwY0M1cGMxWmxjblJwWTJGc0lEMGdUV0YwYUM1aFluTW9iMlptYzJWMFdDa2dQQ0JOWVhSb0xtRmljeWh2Wm1aelpYUlpLVnh1SUNBZ0lDQWdJQ0JwWmlBb0lXbHpWaWtnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11WDJWdGFYUlRZM0p2Ykd4RmRtVnVkQ2duYzJOeWIyeHNjM1JoY25RbktWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQXZMeUIyWlhKMGFXTmhiQ0J6WTNKdmJHd3VJR3AxYzNRZ2FXZHViM0psSUdsMExseHVJQ0FnSUNBZ2FXWWdLR2x6VmlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUM4dklHaHZjbWw2YjI1MFlXd2djMk55YjJ4c0xpQjBjbWxuWjJWeUlITmpjbTlzYkNCbGRtVnVkQzVjYmlBZ0lDQWdJR1YyWlc1MExuQnlaWFpsYm5SRVpXWmhkV3gwS0NsY2JpQWdJQ0FnSUdOdmJuTjBJR2x1Ym1WeUlEMGdkR2hwY3k0a2NtVm1jeTVwYm01bGNseHVJQ0FnSUNBZ2FXWWdLR2x1Ym1WeUlDWW1JRzltWm5ObGRGZ3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBhR2x6TGw5dWIyUmxjMDltWm5ObGRFTnNaV0Z5WldRcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxsOXViMlJsYzA5bVpuTmxkRU5zWldGeVpXUWdQU0IwY25WbFhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkyeGxZWEpPYjJSbGMwOW1abk5sZENncFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpXMXBkRk5qY205c2JFVjJaVzUwS0NkelkzSnZiR3duTENCN1hHNGdJQ0FnSUNBZ0lDQWdiMlptYzJWMFdGSmhkR2x2T2lCdlptWnpaWFJZSUM4Z2RHaHBjeTVmZDNKaGNIQmxjbGRwWkhSb1hHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQWdJR2x1Ym1WeUxuTjBlV3hsTG5kbFltdHBkRlJ5WVc1elptOXliU0E5SUdCMGNtRnVjMnhoZEdVelpDZ2tlM1JvYVhNdWFXNXVaWEpQWm1aelpYUWdLeUJ2Wm1aelpYUllmWEI0TENBd0xDQXdLV0JjYmlBZ0lDQWdJQ0FnYVc1dVpYSXVjM1I1YkdVdWJXOTZWSEpoYm5ObWIzSnRJRDBnWUhSeVlXNXpiR0YwWlROa0tDUjdkR2hwY3k1cGJtNWxjazltWm5ObGRDQXJJRzltWm5ObGRGaDljSGdzSURBc0lEQXBZRnh1SUNBZ0lDQWdJQ0JwYm01bGNpNXpkSGxzWlM1MGNtRnVjMlp2Y20wZ1BTQmdkSEpoYm5Oc1lYUmxNMlFvSkh0MGFHbHpMbWx1Ym1WeVQyWm1jMlYwSUNzZ2IyWm1jMlYwV0gxd2VDd2dNQ3dnTUNsZ1hHNGdJQ0FnSUNCOVhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUY5b1lXNWtiR1ZVYjNWamFFVnVaQ0FvWlhabGJuUXBJSHRjYmlBZ0lDQWdJSFJvYVhNdVgzTjBZWEowUVhWMGIxQnNZWGtvS1Z4dUlDQWdJQ0FnWTI5dWMzUWdkSEFnUFNCMGFHbHpMbDkwYjNWamFGQmhjbUZ0YzF4dUlDQWdJQ0FnYVdZZ0tDRjBjQ2tnZXlCeVpYUjFjbTRnZlZ4dUlDQWdJQ0FnWTI5dWMzUWdhWE5XSUQwZ2RIQXVhWE5XWlhKMGFXTmhiRnh1SUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJwYzFZZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnWTI5dWMzUWdhVzV1WlhJZ1BTQjBhR2x6TGlSeVpXWnpMbWx1Ym1WeVhHNGdJQ0FnSUNCamIyNXpkQ0I3SUc5bVpuTmxkRmdnZlNBOUlIUndYRzRnSUNBZ0lDQnBaaUFvYVc1dVpYSXBJSHRjYmlBZ0lDQWdJQ0FnZEdocGN5NWZibTlrWlhOUFptWnpaWFJEYkdWaGNtVmtJRDBnWm1Gc2MyVmNiaUFnSUNBZ0lDQWdMeThnVkU5RVR6b2dkR1Z6ZENCMGFHVWdkbVZzYjJOcGRIa2dhV1lnYVhRbmN5QnNaWE56SUhSb1lXNGdNQzR5TGx4dUlDQWdJQ0FnSUNCamIyNXpkQ0J5WlhObGRDQTlJRTFoZEdndVlXSnpLRzltWm5ObGRGZ2dMeUIwYUdsekxsOTNjbUZ3Y0dWeVYybGtkR2dwSUR3Z01DNHlYRzRnSUNBZ0lDQWdJR052Ym5OMElHUnBjbVZqZEdsdmJpQTlJRzltWm5ObGRGZ2dQaUF3SUQ4Z01TQTZJQzB4WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzVsZDBsdVpHVjRJRDBnY21WelpYUWdQeUIwYUdsekxtTjFjbkpsYm5SSmJtUmxlQ0E2SUNoMGFHbHpMbU4xY25KbGJuUkpibVJsZUNBdElHUnBjbVZqZEdsdmJpbGNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmMyeHBaR1ZVYnlodVpYZEpibVJsZUN3Z2RISjFaU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJR1JsYkdWMFpTQjBhR2x6TGw5MGIzVmphRkJoY21GdGMxeHVJQ0FnSUgwc1hHNWNiaUFnSUNCZmFHRnVaR3hsVkc5MVkyaERZVzVqWld3Z0tHVjJaVzUwS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZhR0Z1Wkd4bFZHOTFZMmhGYm1Rb1pYWmxiblFwWEc0Z0lDQWdmU3hjYmx4dUlDQWdJRjlsYldsMFUyTnliMnhzUlhabGJuUWdLSFI1Y0dVc0lHUmhkR0VnUFNCN2ZTa2dlMXh1SUNBZ0lDQWdkR2hwY3k0a1pXMXBkQ2gwZVhCbExDQjNaV1Y0TG5WMGFXeHpMbU55WldGMFpVVjJaVzUwS0hSb2FYTXVKR1ZzTENCMGVYQmxMQ0JrWVhSaEtTbGNiaUFnSUNCOUxGeHVYRzRnSUNBZ1gzUm9jbTkwZEd4bFJXMXBkRk5qY205c2JDQW9iMlptYzJWMExDQmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lDQWdiR1YwSUdrZ1BTQXdYRzRnSUNBZ0lDQmpiMjV6ZENCMGFISnZkSFJzWlZScGJXVWdQU0JVU0ZKUFZGUk1SVjlUUTFKUFRFeGZWRWxOUlZ4dUlDQWdJQ0FnWTI5dWMzUWdZMjUwSUQwZ2NHRnljMlZKYm5Rb1ZGSkJUbE5KVkVsUFRsOVVTVTFGSUM4Z2RHaHliM1IwYkdWVWFXMWxLU0F0SURGY2JpQWdJQ0FnSUdOdmJuTjBJSE5wWjI0Z1BTQnZabVp6WlhRZ1BpQXdJRDhnTVNBNklDMHhYRzRnSUNBZ0lDQmpiMjV6ZENCeUlEMGdUV0YwYUM1aFluTW9iMlptYzJWMElDOGdkR2hwY3k1ZmQzSmhjSEJsY2xkcFpIUm9LVnh1SUNBZ0lDQWdZMjl1YzNRZ2RHaHliM1IwYkdWa1UyTnliMnhzSUQwZ0tDa2dQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9LeXRwSUQ0Z1kyNTBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaGJHeGlZV05ySUNZbUlHTmhiR3hpWVdOckxtTmhiR3dvZEdocGN5bGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JqYjI1emRDQnlZWFJwYnlBOUlIUm9hWE11WDNOMFpYQWdQVDA5SURCY2JpQWdJQ0FnSUNBZ0lDQS9JSE5wWjI0Z0tpQnlJQ29nS0RFZ0xTQnBJQzhnWTI1MEtWeHVJQ0FnSUNBZ0lDQWdJRG9nYzJsbmJpQXFJQ2h5SUNzZ0tERWdMU0J5S1NBcUlHa2dMeUJqYm5RcFhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJWdGFYUlRZM0p2Ykd4RmRtVnVkQ2duYzJOeWIyeHNKeXdnZTF4dUlDQWdJQ0FnSUNBZ0lHOW1abk5sZEZoU1lYUnBiem9nY21GMGFXOWNiaUFnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnYzJWMFZHbHRaVzkxZENoMGFISnZkSFJzWldSVFkzSnZiR3dzSUZSSVVrOVVWRXhGWDFORFVrOU1URjlVU1UxRktWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RHaHliM1IwYkdWa1UyTnliMnhzS0NsY2JpQWdJQ0I5WEc0Z0lIMWNibjFjYmlJc0lpOHFYRzRnS2lCTWFXTmxibk5sWkNCMGJ5QjBhR1VnUVhCaFkyaGxJRk52Wm5SM1lYSmxJRVp2ZFc1a1lYUnBiMjRnS0VGVFJpa2dkVzVrWlhJZ2IyNWxYRzRnS2lCdmNpQnRiM0psSUdOdmJuUnlhV0oxZEc5eUlHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MGN5NGdJRk5sWlNCMGFHVWdUazlVU1VORklHWnBiR1ZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSGRwZEdnZ2RHaHBjeUIzYjNKcklHWnZjaUJoWkdScGRHbHZibUZzSUdsdVptOXliV0YwYVc5dVhHNGdLaUJ5WldkaGNtUnBibWNnWTI5d2VYSnBaMmgwSUc5M2JtVnljMmhwY0M0Z0lGUm9aU0JCVTBZZ2JHbGpaVzV6WlhNZ2RHaHBjeUJtYVd4bFhHNGdLaUIwYnlCNWIzVWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobFhHNGdLaUJjSWt4cFkyVnVjMlZjSWlrN0lIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVmNiaUFxSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1SUNCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaUFxWEc0Z0tpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXhjYmlBcUlITnZablIzWVhKbElHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1WEc0Z0tpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XVnh1SUNvZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzRnSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxYRzRnS2lCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrSUd4cGJXbDBZWFJwYjI1elhHNGdLaUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVMeThnYVcxd2IzSjBJSHNnZG1Gc2FXUmhkR1ZUZEhsc1pYTWdmU0JtY205dElDY3VMaTh1TGk5MllXeHBaR0YwYjNJblhHNHZMeUJwYlhCdmNuUWdhVzVrYVdOaGRHOXlJR1p5YjIwZ0p5NHZhVzVrYVdOaGRHOXlKMXh1YVcxd2IzSjBJSE5zYVdSbFRXbDRhVzRnWm5KdmJTQW5MaTl6Ykdsa1pVMXBlR2x1SjF4dVhHNWpiMjV6ZENCemJHbGtaWElnUFNCN1hHNGdJRzFwZUdsdWN6b2dXM05zYVdSbFRXbDRhVzVkTEZ4dUlDQndjbTl3Y3pvZ2UxeHVJQ0FnSUdsdVpHVjRPaUI3WEc0Z0lDQWdJQ0IwZVhCbE9pQmJVM1J5YVc1bkxDQk9kVzFpWlhKZExGeHVJQ0FnSUNBZ1pHVm1ZWFZzZERvZ01GeHVJQ0FnSUgwc1hHNGdJQ0FnSjJGMWRHOHRjR3hoZVNjNklIdGNiaUFnSUNBZ0lIUjVjR1U2SUZ0VGRISnBibWNzSUVKdmIyeGxZVzVkTEZ4dUlDQWdJQ0FnWkdWbVlYVnNkRG9nWm1Gc2MyVmNiaUFnSUNCOUxGeHVJQ0FnSUdsdWRHVnlkbUZzT2lCN1hHNGdJQ0FnSUNCMGVYQmxPaUJiVTNSeWFXNW5MQ0JPZFcxaVpYSmRMRnh1SUNBZ0lDQWdaR1ZtWVhWc2REb2dNekF3TUZ4dUlDQWdJSDBzWEc0Z0lDQWdhVzVtYVc1cGRHVTZJSHRjYmlBZ0lDQWdJSFI1Y0dVNklGdFRkSEpwYm1jc0lFSnZiMnhsWVc1ZExGeHVJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2RISjFaVnh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0IzWVhSamFEb2dlMXh1SUNBZ0lHbHVaR1Y0SUNncElIdGNiaUFnSUNBZ0lIUm9hWE11WTNWeWNtVnVkRWx1WkdWNElEMGdkR2hwY3k1ZmJtOXliV0ZzYVhwbFNXNWtaWGdvZEdocGN5NXBibVJsZUNsY2JpQWdJQ0I5WEc0Z0lIMHNYRzVjYmlBZ1pHRjBZU0FvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJR1p5WVcxbFEyOTFiblE2SURBc1hHNGdJQ0FnSUNCamRYSnlaVzUwU1c1a1pYZzZJSFJvYVhNdWFXNWtaWGhjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnWW1WbWIzSmxRM0psWVhSbElDZ3BJSHRjYmlBZ0lDQjBhR2x6TG5kbFpYaFVlWEJsSUQwZ0ozTnNhV1JsY2lkY2JpQWdmU3hjYmx4dUlDQnlaVzVrWlhJZ0tHTnlaV0YwWlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNBZ0lDOHZJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQTlQVDBnSjJSbGRtVnNiM0J0Wlc1MEp5a2dlMXh1SUNBZ0lDOHZJQ0FnZG1Gc2FXUmhkR1ZUZEhsc1pYTW9KM05zYVdSbGNpY3NJSFJvYVhNdUpIWnViMlJsTG1SaGRHRWdKaVlnZEdocGN5NGtkbTV2WkdVdVpHRjBZUzV6ZEdGMGFXTlRkSGxzWlNsY2JpQWdJQ0F2THlCOVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdVgzSmxibVJsY2xOc2FXUmxjeWhqY21WaGRHVkZiR1Z0Wlc1MEtWeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNiaUFnYVc1cGRDQW9kMlZsZUNrZ2UxeHVJQ0FnSUhkbFpYZ3VjbVZuYVhOMFpYSkRiMjF3YjI1bGJuUW9KM05zYVdSbGNpY3NJSE5zYVdSbGNpbGNiaUFnSUNCM1pXVjRMbkpsWjJsemRHVnlRMjl0Y0c5dVpXNTBLQ2RqZVdOc1pYTnNhV1JsY2ljc0lITnNhV1JsY2lsY2JpQWdmVnh1ZlZ4dUlpd2lMeXBjYmlBcUlFeHBZMlZ1YzJWa0lIUnZJSFJvWlNCQmNHRmphR1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2YmlBb1FWTkdLU0IxYm1SbGNpQnZibVZjYmlBcUlHOXlJRzF2Y21VZ1kyOXVkSEpwWW5WMGIzSWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUnpMaUFnVTJWbElIUm9aU0JPVDFSSlEwVWdabWxzWlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZDJsMGFDQjBhR2x6SUhkdmNtc2dabTl5SUdGa1pHbDBhVzl1WVd3Z2FXNW1iM0p0WVhScGIyNWNiaUFxSUhKbFoyRnlaR2x1WnlCamIzQjVjbWxuYUhRZ2IzZHVaWEp6YUdsd0xpQWdWR2hsSUVGVFJpQnNhV05sYm5ObGN5QjBhR2x6SUdacGJHVmNiaUFxSUhSdklIbHZkU0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVmNiaUFxSUZ3aVRHbGpaVzV6WlZ3aUtUc2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaVnh1SUNvZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM0Z0lGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTEZ4dUlDb2djMjltZEhkaGNtVWdaR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc1Y2JpQXFJRndpUVZNZ1NWTmNJaUJDUVZOSlV5d2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaWEc0Z0tpQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGlBZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1ZjYmlBcUlITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1RZ2JHbHRhWFJoZEdsdmJuTmNiaUFxSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVwYlhCdmNuUWdjMnhwWkdWTmFYaHBiaUJtY205dElDY3VMM05zYVdSbFRXbDRhVzRuWEc1Y2JtTnZibk4wSUVSRlJrRlZURlJmVGtWSlIwaENUMUpmVTFCQlEwVWdQU0F5TUZ4dVkyOXVjM1FnUkVWR1FWVk1WRjlPUlVsSFNFSlBVbDlCVEZCSVFTQTlJREF1Tmx4dVkyOXVjM1FnUkVWR1FWVk1WRjlPUlVsSFNFSlBVbDlUUTBGTVJTQTlJREF1T0Z4dVkyOXVjM1FnUkVWR1FWVk1WRjlEVlZKU1JVNVVYMGxVUlUxZlUwTkJURVVnUFNBd0xqbGNibHh1WTI5dWMzUWdjMnhwWkdWeVRtVnBaMmhpYjNJZ1BTQjdYRzRnSUcxcGVHbHVjem9nVzNOc2FXUmxUV2w0YVc1ZExGeHVJQ0J3Y205d2N6b2dlMXh1SUNBZ0lHbHVaR1Y0T2lCN1hHNGdJQ0FnSUNCMGVYQmxPaUJiVTNSeWFXNW5MQ0JPZFcxaVpYSmRMRnh1SUNBZ0lDQWdaR1ZtWVhWc2REb2dNRnh1SUNBZ0lIMHNYRzRnSUNBZ1lYVjBiMUJzWVhrNklIdGNiaUFnSUNBZ0lIUjVjR1U2SUZ0VGRISnBibWNzSUVKdmIyeGxZVzVkTEZ4dUlDQWdJQ0FnWkdWbVlYVnNkRG9nWm1Gc2MyVmNiaUFnSUNCOUxGeHVJQ0FnSUdsdWRHVnlkbUZzT2lCN1hHNGdJQ0FnSUNCMGVYQmxPaUJiVTNSeWFXNW5MQ0JPZFcxaVpYSmRMRnh1SUNBZ0lDQWdaR1ZtWVhWc2REb2dNekF3TUZ4dUlDQWdJSDBzWEc0Z0lDQWdhVzVtYVc1cGRHVTZJSHRjYmlBZ0lDQWdJSFI1Y0dVNklGdFRkSEpwYm1jc0lFSnZiMnhsWVc1ZExGeHVJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2RISjFaVnh1SUNBZ0lIMHNYRzRnSUNBZ2JtVnBaMmhpYjNKVGNHRmpaVG9nZTF4dUlDQWdJQ0FnZEhsd1pUb2dXMU4wY21sdVp5d2dUblZ0WW1WeVhTeGNiaUFnSUNBZ0lIWmhiR2xrWVhSdmNqb2dablZ1WTNScGIyNGdLSFpoYkNrZ2UxeHVJQ0FnSUNBZ0lDQjJZV3dnUFNCd1lYSnpaVVpzYjJGMEtIWmhiQ2xjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ0ZwYzA1aFRpaDJZV3dwSUNZbUlIWmhiQ0ErSURCY2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCa1pXWmhkV3gwT2lCRVJVWkJWVXhVWDA1RlNVZElRazlTWDFOUVFVTkZYRzRnSUNBZ2ZTeGNiaUFnSUNCdVpXbG5hR0p2Y2tGc2NHaGhPaUI3WEc0Z0lDQWdJQ0IwZVhCbE9pQmJVM1J5YVc1bkxDQk9kVzFpWlhKZExGeHVJQ0FnSUNBZ2RtRnNhV1JoZEc5eU9pQm1kVzVqZEdsdmJpQW9kbUZzS1NCN1hHNGdJQ0FnSUNBZ0lIWmhiQ0E5SUhCaGNuTmxSbXh2WVhRb2RtRnNLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJV2x6VG1GT0tIWmhiQ2tnSmlZZ2RtRnNJRDQ5SURBZ0ppWWdkbUZzSUR3OUlERmNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQmtaV1poZFd4ME9pQkVSVVpCVlV4VVgwNUZTVWRJUWs5U1gwRk1VRWhCWEc0Z0lDQWdmU3hjYmlBZ0lDQnVaV2xuYUdKdmNsTmpZV3hsT2lCN1hHNGdJQ0FnSUNCMGVYQmxPaUJiVTNSeWFXNW5MQ0JPZFcxaVpYSmRMRnh1SUNBZ0lDQWdkbUZzYVdSaGRHOXlPaUJtZFc1amRHbHZiaUFvZG1Gc0tTQjdYRzRnSUNBZ0lDQWdJSFpoYkNBOUlIQmhjbk5sUm14dllYUW9kbUZzS1Z4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSVdselRtRk9LSFpoYkNrZ0ppWWdkbUZzSUQ0OUlEQWdKaVlnZG1Gc0lEdzlJREZjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0JrWldaaGRXeDBPaUJFUlVaQlZVeFVYMDVGU1VkSVFrOVNYMU5EUVV4RlhHNGdJQ0FnZlN4Y2JpQWdJQ0JqZFhKeVpXNTBTWFJsYlZOallXeGxPaUI3WEc0Z0lDQWdJQ0IwZVhCbE9pQmJVM1J5YVc1bkxDQk9kVzFpWlhKZExGeHVJQ0FnSUNBZ2RtRnNhV1JoZEc5eU9pQm1kVzVqZEdsdmJpQW9kbUZzS1NCN1hHNGdJQ0FnSUNBZ0lIWmhiQ0E5SUhCaGNuTmxSbXh2WVhRb2RtRnNLVnh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdJV2x6VG1GT0tIWmhiQ2tnSmlZZ2RtRnNJRDQ5SURBZ0ppWWdkbUZzSUR3OUlERmNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQmtaV1poZFd4ME9pQkVSVVpCVlV4VVgwTlZVbEpGVGxSZlNWUkZUVjlUUTBGTVJWeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQjNZWFJqYURvZ2UxeHVJQ0FnSUdsdVpHVjRJQ2dwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRFbHVaR1Y0SUQwZ2RHaHBjeTVmYm05eWJXRnNhWHBsU1c1a1pYZ29kR2hwY3k1cGJtUmxlQ2xjYmlBZ0lDQjlYRzRnSUgwc1hHNWNiaUFnWkdGMFlTQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIdGNiaUFnSUNBZ0lHTjFjbkpsYm5SSmJtUmxlRG9nZEdocGN5NXBibVJsZUN4Y2JpQWdJQ0FnSUdaeVlXMWxRMjkxYm5RNklEQmNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdZbVZtYjNKbFEzSmxZWFJsSUNncElIdGNiaUFnSUNCMGFHbHpMbWx6VG1WcFoyaGliM0lnUFNCMGNuVmxYRzRnSUNBZ2RHaHBjeTUzWldWNFZIbHdaU0E5SUNkemJHbGtaWEl0Ym1WcFoyaGliM0luWEc0Z0lIMHNYRzVjYmlBZ2NtVnVaR1Z5SUNoamNtVmhkR1ZGYkdWdFpXNTBLU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGJtUmxjbE5zYVdSbGN5aGpjbVZoZEdWRmJHVnRaVzUwS1Z4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUh0Y2JpQWdhVzVwZENBb2QyVmxlQ2tnZTF4dUlDQWdJSGRsWlhndWNtVm5hWE4wWlhKRGIyMXdiMjVsYm5Rb0ozTnNhV1JsY2kxdVpXbG5hR0p2Y2ljc0lITnNhV1JsY2s1bGFXZG9ZbTl5S1Z4dUlDQjlYRzU5WEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibHh1WTI5dWMzUWdYMk56Y3lBOUlHQmNiaTUzWldWNExXbHVaR2xqWVhSdmNpQjdYRzRnSUhCdmMybDBhVzl1T2lCaFluTnZiSFYwWlR0Y2JpQWdlaTFwYm1SbGVEb2dNVEE3WEc0Z0lDMTNaV0pyYVhRdFpteGxlQzFrYVhKbFkzUnBiMjQ2SUhKdmR6dGNiaUFnTFcxekxXWnNaWGd0WkdseVpXTjBhVzl1T2lCeWIzYzdYRzRnSUMxdGIzb3RZbTk0TFc5eWFXVnVkRG9nYUc5eWFYcHZiblJoYkR0Y2JpQWdMVzF2ZWkxaWIzZ3RaR2x5WldOMGFXOXVPaUJ1YjNKdFlXdzdYRzRnSUdac1pYZ3RaR2x5WldOMGFXOXVPaUJ5YjNjN1hHNGdJQzEzWldKcmFYUXRZbTk0TFc5eWFXVnVkRG9nYUc5eWFYcHZiblJoYkR0Y2JpQWdiV0Z5WjJsdU9pQXdPMXh1SUNCd1lXUmthVzVuT2lBd08xeHVmVnh1WEc0dWQyVmxlQzFwYm1ScFkyRjBiM0l0YVhSbGJTQjdYRzRnSUdScGMzQnNZWGs2SUdsdWJHbHVaUzFpYkc5amF6dGNiaUFnY0c5emFYUnBiMjQ2SUhKbGJHRjBhWFpsTzF4dUlDQmliM0prWlhJdGNtRmthWFZ6T2lBMU1DVTdYRzRnSUhkcFpIUm9PaUF3TGpJMk5qWTJOM0psYlR0Y2JpQWdhR1ZwWjJoME9pQXdMakkyTmpZMk4zSmxiVHRjYmlBZ1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvZ0kwSkNRa0pDUWp0Y2JuMWNiaTUzWldWNExXbHVaR2xqWVhSdmNpMXBkR1Z0SUNzZ0xuZGxaWGd0YVc1a2FXTmhkRzl5TFdsMFpXMGdlMXh1SUNCdFlYSm5hVzR0YkdWbWREb2dNQzR4TXpNek16TnlaVzA3WEc1OVhHNWNiaTUzWldWNExXbHVaR2xqWVhSdmNpMXBkR1Z0TFdGamRHbDJaU0I3WEc0Z0lHSmhZMnRuY205MWJtUXRZMjlzYjNJNklHSnNkV1U3WEc1OVhHNWdYRzVjYm14bGRDQmxlSFJ5WVdOMFEyOXRjRzl1Wlc1MFUzUjViR1VzSUdWNGRHVnVaQ3dnWlhoMFpXNWtTMlY1YzF4dVhHNW1kVzVqZEdsdmJpQm5aWFJKYm1ScFkyRjBiM0pKZEdWdFUzUjViR1VnS0hOd1pXTXNJR2x6UVdOMGFYWmxLU0I3WEc0Z0lHTnZibk4wSUhOMGVXeGxJRDBnZTMxY2JpQWdjM1I1YkdWYkoySmhZMnRuY205MWJtUXRZMjlzYjNJblhTQTlJSE53WldOYmFYTkJZM1JwZG1VZ1B5QW5hWFJsYlZObGJHVmpkR1ZrUTI5c2IzSW5JRG9nSjJsMFpXMURiMnh2Y2lkZFhHNGdJSE4wZVd4bFd5ZDNhV1IwYUNkZElEMGdjM1I1YkdWYkoyaGxhV2RvZENkZElEMGdjM0JsWTFzbmFYUmxiVk5wZW1VblhWeHVJQ0J5WlhSMWNtNGdjM1I1YkdWY2JuMWNibHh1Wm5WdVkzUnBiMjRnWDNKbGJtUmxjaUFvWTI5dWRHVjRkQ3dnYUNrZ2UxeHVJQ0JqYjI1emRDQmphR2xzWkhKbGJpQTlJRnRkWEc0Z0lHTnZibk4wSUcxbGNtZGxaRk4wZVd4bElEMGdaWGgwY21GamRFTnZiWEJ2Ym1WdWRGTjBlV3hsS0dOdmJuUmxlSFFwWEc0Z0lHTnZibk4wSUdsdVpHbGpZWFJ2Y2xOd1pXTlRkSGxzWlNBOUlHVjRkR1Z1WkV0bGVYTW9YRzRnSUNBZ0lDQjdmU3hjYmlBZ0lDQWdJRzFsY21kbFpGTjBlV3hsTEZ4dUlDQWdJQ0FnV3lkcGRHVnRRMjlzYjNJbkxDQW5hWFJsYlZObGJHVmpkR1ZrUTI5c2IzSW5MQ0FuYVhSbGJWTnBlbVVuWFZ4dUlDQWdJQ2xjYmlBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQk9kVzFpWlhJb1kyOXVkR1Y0ZEM1amIzVnVkQ2s3SUNzcmFTa2dlMXh1SUNBZ0lHTnZibk4wSUdOc1lYTnpUbUZ0WlhNZ1BTQmJKM2RsWlhndGFXNWthV05oZEc5eUxXbDBaVzBnZDJWbGVDMWxiQ2RkWEc0Z0lDQWdiR1YwSUdselFXTjBhWFpsSUQwZ1ptRnNjMlZjYmlBZ0lDQnBaaUFvYVNBOVBUMGdUblZ0WW1WeUtHTnZiblJsZUhRdVlXTjBhWFpsS1NrZ2UxeHVJQ0FnSUNBZ1kyeGhjM05PWVcxbGN5NXdkWE5vS0NkM1pXVjRMV2x1WkdsallYUnZjaTFwZEdWdExXRmpkR2wyWlNjcFhHNGdJQ0FnSUNCcGMwRmpkR2wyWlNBOUlIUnlkV1ZjYmlBZ0lDQjlYRzRnSUNBZ1kyaHBiR1J5Wlc0dWNIVnphQ2hvS0NkdFlYSnJKeXdnZTF4dUlDQWdJQ0FnYzNSaGRHbGpRMnhoYzNNNklHTnNZWE56VG1GdFpYTXVhbTlwYmlnbklDY3BMRnh1SUNBZ0lDQWdjM1JoZEdsalUzUjViR1U2SUdkbGRFbHVaR2xqWVhSdmNrbDBaVzFUZEhsc1pTaHBibVJwWTJGMGIzSlRjR1ZqVTNSNWJHVXNJR2x6UVdOMGFYWmxLVnh1SUNBZ0lIMHBLVnh1SUNCOVhHNGdJR052Ym5SbGVIUXVKRzVsZUhSVWFXTnJLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JmY21WTVlYbHZkWFFvZEdocGN5d2dYMmRsZEZacGNuUjFZV3hTWldOMEtIUm9hWE1zSUcxbGNtZGxaRk4wZVd4bEtTd2dYMmRsZEV4MFluSW9kR2hwY3l3Z2JXVnlaMlZrVTNSNWJHVXBLVnh1SUNCOUtWeHVJQ0J5WlhSMWNtNGdhQ2duYm1GMkp5d2dlMXh1SUNBZ0lHRjBkSEp6T2lCN0lDZDNaV1Y0TFhSNWNHVW5PaUFuYVc1a2FXTmhkRzl5SnlCOUxGeHVJQ0FnSUhOMFlYUnBZME5zWVhOek9pQW5kMlZsZUMxcGJtUnBZMkYwYjNJZ2QyVmxlQzFqZENjc1hHNGdJQ0FnYzNSaGRHbGpVM1I1YkdVNklHMWxjbWRsWkZOMGVXeGxYRzRnSUgwc0lHTm9hV3hrY21WdUtWeHVmVnh1WEc0dktpcGNiaUFxSUdkbGRDQnBibVJwWTJGMGIzSW5jeUIyYVhKMGRXRnNJSEpsWTNRZ0tIZHBaSFJvTENCb1pXbG5hSFFwTENCM2FHbGphQ0JwY3lCMGFHVWdMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmZaMlYwVm1seWRIVmhiRkpsWTNRZ0tHTnZiblJsZUhRc0lHMWxjbWRsWkZOMGVXeGxLU0I3WEc0Z0lHTnZibk4wSUdOMElEMGdZMjl1ZEdWNGRDNWZaMlYwVUdGeVpXNTBVbVZqZENncFhHNGdJR052Ym5OMElISmxZM1FnUFNCYkozZHBaSFJvSnl3Z0oyaGxhV2RvZENkZExuSmxaSFZqWlNnb2NISmxMQ0JyWlhrcElEMCtJSHRjYmlBZ0lDQmpiMjV6ZENCdGMzWWdQU0J0WlhKblpXUlRkSGxzWlNBbUppQnRaWEpuWldSVGRIbHNaVnRyWlhsZFhHNGdJQ0FnY0hKbFcydGxlVjBnUFNCdGMzWWdQeUJ3WVhKelpVWnNiMkYwS0cxemRpa2dPaUJqZEZ0clpYbGRYRzRnSUNBZ2NtVjBkWEp1SUhCeVpWeHVJQ0I5TENCN2ZTbGNiaUFnY21WMGRYSnVJSEpsWTNSY2JuMWNibHh1THlvcVhHNGdLaUJuWlhRZ2FXNWthV05oZEc5eUozTWdiSFJpY2lCMllXeDFaWE1nS0hkcGRHaHZkWFFnZFc1cGRITXBMbHh1SUNvdlhHNW1kVzVqZEdsdmJpQmZaMlYwVEhSaWNpQW9ZMjl1ZEdWNGRDd2diV1Z5WjJWa1UzUjViR1VwSUh0Y2JpQWdjbVYwZFhKdUlGc25iR1ZtZENjc0lDZDBiM0FuTENBblltOTBkRzl0Snl3Z0ozSnBaMmgwSjEwdWNtVmtkV05sS0Nod2NtVXNJR3RsZVNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUcxemRpQTlJRzFsY21kbFpGTjBlV3hsSUNZbUlHMWxjbWRsWkZOMGVXeGxXMnRsZVYxY2JpQWdJQ0JwWmlBb0lXMXpkaUFtSmlCdGMzWWdJVDA5SURBcElIc2djbVYwZFhKdUlIQnlaU0I5WEc0Z0lDQWdjSEpsVzJ0bGVWMGdQU0J3WVhKelpVWnNiMkYwS0cxemRpbGNiaUFnSUNCeVpYUjFjbTRnY0hKbFhHNGdJSDBzSUh0OUtWeHVmVnh1WEc0dktpcGNiaUFxSUdkbGRDQnBibVJwWTJGMGIzSW5jeUJ5WldOMElDaDNhV1IwYUN3Z2FHVnBaMmgwS1M1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWDJkbGRFbHVaR2xqWVhSdmNsSmxZM1FnS0dWc0tTQjdYRzRnSUd4bGRDQjNhV1IwYUN3Z2FHVnBaMmgwWEc0Z0lHbG1JQ2hsYkM1amFHbHNaSEpsYmk1c1pXNW5kR2dnUFQwOUlERXBJSHRjYmlBZ0lDQmpiMjV6ZENCcGRHVnRRMjl0Y0hWMFpXUlRkSGxzWlNBOUlIZHBibVJ2ZHk1blpYUkRiMjF3ZFhSbFpGTjBlV3hsS0dWc0xtTm9hV3hrY21WdVd6QmRLVnh1SUNBZ0lIZHBaSFJvSUQwZ2NHRnljMlZHYkc5aGRDaHBkR1Z0UTI5dGNIVjBaV1JUZEhsc1pTNTNhV1IwYUNsY2JpQWdJQ0JvWldsbmFIUWdQU0J3WVhKelpVWnNiMkYwS0dsMFpXMURiMjF3ZFhSbFpGTjBlV3hsTG1obGFXZG9kQ2xjYmlBZ2ZWeHVJQ0JsYkhObElIdGNiaUFnSUNCamIyNXpkQ0JwZEdWdFEyOXRjSFYwWldSVGRIbHNaU0E5SUhkcGJtUnZkeTVuWlhSRGIyMXdkWFJsWkZOMGVXeGxLR1ZzTG1Ob2FXeGtjbVZ1V3pGZEtWeHVJQ0FnSUdOdmJuTjBJSEJoWkdScGJtY2dQU0J3WVhKelpVWnNiMkYwS0dsMFpXMURiMjF3ZFhSbFpGTjBlV3hsTG0xaGNtZHBia3hsWm5RcFhHNGdJQ0FnYUdWcFoyaDBJRDBnY0dGeWMyVkdiRzloZENocGRHVnRRMjl0Y0hWMFpXUlRkSGxzWlM1b1pXbG5hSFFwWEc0Z0lDQWdkMmxrZEdnZ1BTQmxiQzVqYUdsc1pISmxiaTVzWlc1bmRHZ2dLaUFvYUdWcFoyaDBJQ3NnY0dGa1pHbHVaeWtnTFNCd1lXUmthVzVuWEc0Z0lIMWNiaUFnY21WMGRYSnVJSHNnZDJsa2RHZ3NJR2hsYVdkb2RDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1kyRnNZM1ZzWVhSbElHRnVaQ0J5WlhObGRDQnBibVJwWTJGMGIzSW5jeUIzYVdSMGFDd2dhR1ZwWjJoMExDQmhibVFnYkhSaWNpNWNiaUFxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0IyYVhKMGRXRnNVbVZqZEM0Z2QybGtkR2dnWVc1a0lHaGxhV2RvZENCdlppQnBibVJwWTJGMGIzSW5jeUIyYVhKMGRXRnNJSEpsWTNRZ1ltOTRMbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUd4MFluSXVJSFJvWlNCMWMyVnlJSE53WldOcFptbGxaQ0JzWldaMExDQjBiM0FzSUdKdmRIUnZiU3dnY21sbmFIUWdjR2w0Wld4eklDaDNhWFJvYjNWMElIVnVhWFJ6S1M1Y2JpQXFMMXh1Wm5WdVkzUnBiMjRnWDNKbFRHRjViM1YwSUNoamIyNTBaWGgwTENCMmFYSjBkV0ZzVW1WamRDd2diSFJpY2lrZ2UxeHVJQ0JqYjI1emRDQmxiQ0E5SUdOdmJuUmxlSFF1SkdWc1hHNGdJR052Ym5OMElISmxZM1FnUFNCZloyVjBTVzVrYVdOaGRHOXlVbVZqZENobGJDbGNiaUFnWTI5dWMzUWdjbVZqZEZkcGRHaFFlQ0E5SUU5aWFtVmpkQzVyWlhsektISmxZM1FwTG5KbFpIVmpaU2dvY0hKbExDQnJaWGtwSUQwK0lIdGNiaUFnSUNCd2NtVmJhMlY1WFNBOUlISmxZM1JiYTJWNVhTQXJJQ2R3ZUNkY2JpQWdJQ0J5WlhSMWNtNGdjSEpsWEc0Z0lIMHNJSHQ5S1Z4dUlDQmxlSFJsYm1Rb1pXd3VjM1I1YkdVc0lISmxZM1JYYVhSb1VIZ3BYRzRnSUdOdmJuTjBJR0Y0YVhOTllYQWdQU0JiZTF4dUlDQWdJR1JwY2pvZ2JIUmljaTVzWldaMElIeDhJR3gwWW5JdWJHVm1kQ0E5UFQwZ01GeHVJQ0FnSUNBZ1B5QW5iR1ZtZENjZ09pQnNkR0p5TG5KcFoyaDBJSHg4SUd4MFluSXVjbWxuYUhRZ1BUMDlJREJjYmlBZ0lDQWdJRDhnSjNKcFoyaDBKeUE2SUNkc1pXWjBKeXhjYmlBZ0lDQnpZMkZzWlRvZ0ozZHBaSFJvSjF4dUlDQjlMQ0I3WEc0Z0lDQWdaR2x5T2lCc2RHSnlMblJ2Y0NCOGZDQnNkR0p5TG5SdmNDQTlQVDBnTUZ4dUlDQWdJQ0FnUHlBbmRHOXdKeUE2SUd4MFluSXVZbTkwZEc5dElIeDhJR3gwWW5JdVltOTBkRzl0SUQwOVBTQXdYRzRnSUNBZ0lDQS9JQ2RpYjNSMGIyMG5JRG9nSjNSdmNDY3NYRzRnSUNBZ2MyTmhiR1U2SUNkb1pXbG5hSFFuWEc0Z0lIMWRYRzRnSUU5aWFtVmpkQzVyWlhsektHRjRhWE5OWVhBcExtWnZja1ZoWTJnb2EyVjVJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR1JwY2l3Z2MyTmhiR1VnZlNBOUlHRjRhWE5OWVhCYmEyVjVYVnh1SUNBZ0lHVnNMbk4wZVd4bFcyUnBjbDBnUFNBb2JIUmljbHRrYVhKZElIeDhJREFwSUNzZ2RtbHlkSFZoYkZKbFkzUmJjMk5oYkdWZElDOGdNaUF0SUhKbFkzUmJjMk5oYkdWZElDOGdNaUFySUNkd2VDZGNiaUFnZlNsY2JuMWNibHh1WTI5dWMzUWdhVzVrYVdOaGRHOXlJRDBnZTF4dUlDQnVZVzFsT2lBbmQyVmxlQzFwYm1ScFkyRjBiM0luTEZ4dUlDQnRaWFJvYjJSek9pQjdYRzRnSUNBZ2MyaHZkem9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTRrWld3dWMzUjViR1V1ZG1semFXSnBiR2wwZVNBOUlDZDJhWE5wWW14bEoxeHVJQ0FnSUgxY2JpQWdmU3hjYmlBZ1pHRjBZU0FvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSHRjYmlBZ0lDQWdJR052ZFc1ME9pQXdMRnh1SUNBZ0lDQWdZV04wYVhabE9pQXdYRzRnSUNBZ2ZWeHVJQ0I5TEZ4dUlDQnlaVzVrWlhJZ0tHTnlaV0YwWlVWc1pXMWxiblFwSUh0Y2JpQWdJQ0JqYjI1emRDQjdJR052ZFc1MExDQmhZM1JwZG1VZ2ZTQTlJSFJvYVhNdUpIWnViMlJsTG1SaGRHRXVZWFIwY25NZ2ZId2dlMzFjYmlBZ0lDQjBhR2x6TG1OdmRXNTBJRDBnWTI5MWJuUmNiaUFnSUNCMGFHbHpMbUZqZEdsMlpTQTlJR0ZqZEdsMlpWeHVJQ0FnSUdsbUlDZ2hkR2hwY3k1amIzVnVkQ2tnZXlCeVpYUjFjbTRnZlZ4dUlDQWdJSEpsZEhWeWJpQmZjbVZ1WkdWeUtIUm9hWE1zSUdOeVpXRjBaVVZzWlcxbGJuUXBYRzRnSUgwc1hHNGdJRjlqYzNOY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdlMXh1SUNCcGJtbDBJQ2gzWldWNEtTQjdYRzRnSUNBZ1pYaDBjbUZqZEVOdmJYQnZibVZ1ZEZOMGVXeGxJRDBnZDJWbGVDNWxlSFJ5WVdOMFEyOXRjRzl1Wlc1MFUzUjViR1ZjYmlBZ0lDQmxlSFJsYm1RZ1BTQjNaV1Y0TG5WMGFXeHpMbVY0ZEdWdVpGeHVJQ0FnSUdWNGRHVnVaRXRsZVhNZ1BTQjNaV1Y0TG5WMGFXeHpMbVY0ZEdWdVpFdGxlWE5jYmlBZ0lDQjNaV1Y0TG5KbFoybHpkR1Z5UTI5dGNHOXVaVzUwS0NkcGJtUnBZMkYwYjNJbkxDQnBibVJwWTJGMGIzSXBYRzRnSUgxY2JuMWNiaUlzSWk4cVhHNGdLaUJNYVdObGJuTmxaQ0IwYnlCMGFHVWdRWEJoWTJobElGTnZablIzWVhKbElFWnZkVzVrWVhScGIyNGdLRUZUUmlrZ2RXNWtaWElnYjI1bFhHNGdLaUJ2Y2lCdGIzSmxJR052Ym5SeWFXSjFkRzl5SUd4cFkyVnVjMlVnWVdkeVpXVnRaVzUwY3k0Z0lGTmxaU0IwYUdVZ1RrOVVTVU5GSUdacGJHVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIZHBkR2dnZEdocGN5QjNiM0pySUdadmNpQmhaR1JwZEdsdmJtRnNJR2x1Wm05eWJXRjBhVzl1WEc0Z0tpQnlaV2RoY21ScGJtY2dZMjl3ZVhKcFoyaDBJRzkzYm1WeWMyaHBjQzRnSUZSb1pTQkJVMFlnYkdsalpXNXpaWE1nZEdocGN5Qm1hV3hsWEc0Z0tpQjBieUI1YjNVZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsWEc0Z0tpQmNJa3hwWTJWdWMyVmNJaWs3SUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJWY2JpQXFJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVJQ0JaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5eGNiaUFxSUhOdlpuUjNZWEpsSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVYRzRnS2lCY0lrRlRJRWxUWENJZ1FrRlRTVk1zSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dWeHVJQ29nUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNGdJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobFhHNGdLaUJ6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtJR3hwYldsMFlYUnBiMjV6WEc0Z0tpQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dVhHNXBiWEJ2Y25RZ2MyeHBaR1Z5SUdaeWIyMGdKeTR2YzJ4cFpHVnlKMXh1YVcxd2IzSjBJRzVsYVdkb1ltOXlJR1p5YjIwZ0p5NHZjMnhwWkdWeUxXNWxhV2RvWW05eUoxeHVhVzF3YjNKMElHbHVaR2xqWVhSdmNpQm1jbTl0SUNjdUwybHVaR2xqWVhSdmNpZGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdlMXh1SUNCcGJtbDBJQ2gzWldWNEtTQjdYRzRnSUNBZ2QyVmxlQzVwYm5OMFlXeHNLSE5zYVdSbGNpbGNiaUFnSUNCM1pXVjRMbWx1YzNSaGJHd29ibVZwWjJoaWIzSXBYRzRnSUNBZ2QyVmxlQzVwYm5OMFlXeHNLR2x1WkdsallYUnZjaWxjYmlBZ2ZWeHVmVnh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMaUFnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVmNiaUFxSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVFnYkdsdGFYUmhkR2x2Ym5OY2JpQXFJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWNiaThxS2x4dUlDb2dRR1pwYkdWUGRtVnlkbWxsZHlCSmJYQnNJRzltSUhSbGVIUWdZMjl0Y0c5dVpXNTBMbHh1SUNwY2JpQXFJRTV2ZEdWeklHRmliM1YwSUhSb1pTQnpkSGxzWlNBbmFHVnBaMmgwSnlCaGJtUWdKMnhwYm1Wekp6cGNiaUFxSUdsbUlIUm9aU0JqYjIxd2RYUmxaQ0IyWVd4MVpTQnZaaUFuYUdWcFoyaDBKeUJwY3lCaWFXZG5aWElnZEdoaGJpQW5iR2x1WlhNbkxDQjBhR0Z1SUhSb1pTQjBaWGgwSUhkcGJHeGNiaUFxSUdKbElHTnNhWEJ3WldRZ1lXTmpiM0prYVc1bklIUnZJSFJvWlNBbmJHbHVaWE1uTGlCUGRHaGxjbmRwYzJVc0lHbDBKMnhzSUdKbElIUm9aU0FuYUdWcFoyaDBKeTVjYmlBcUwxeHVYRzVqYjI1emRDQmZZM056SUQwZ1lGeHVMbmRsWlhndGRHVjRkQ0I3WEc0Z0lHUnBjM0JzWVhrNklDMTNaV0pyYVhRdFltOTRPMXh1SUNCa2FYTndiR0Y1T2lBdGJXOTZMV0p2ZUR0Y2JpQWdMWGRsWW10cGRDMWliM2d0YjNKcFpXNTBPaUIyWlhKMGFXTmhiRHRjYmlBZ0xXMXZlaTFpYjNndGIzSnBaVzUwT2lCMlpYSjBhV05oYkR0Y2JpQWdMVzF2ZWkxaWIzZ3RaR2x5WldOMGFXOXVPaUJ1YjNKdFlXdzdYRzRnSUhCdmMybDBhVzl1T2lCeVpXeGhkR2wyWlR0Y2JpQWdkMmhwZEdVdGMzQmhZMlU2SUhCeVpTMTNjbUZ3T3lBZ0x5b2dibTkwSUhWemFXNW5JQ2R3Y21Vbk9pQnpkWEJ3YjNKMElHRjFkRzhnYkdsdVpTQm1aV1ZrTGlBcUwxeHVJQ0JtYjI1MExYTnBlbVU2SURBdU5ESTJOalkzY21WdE8xeHVJQ0IzYjNKa0xYZHlZWEE2SUdKeVpXRnJMWGR2Y21RN1hHNGdJRzkyWlhKbWJHOTNPaUJvYVdSa1pXNDdJQzhxSUdsMEoyeHNJR0psSUdOc2FYQndaV1FnYVdZZ2RHaGxJR2hsYVdkb2RDQnBjeUJ1YjNRZ2FHbG5hQ0JsYm05MVoyZ3VJQ292WEc1OVhHNWdYRzVjYmk4cUtseHVJQ29nUjJWMElIUmxlSFFnYzNCbFkybGhiQ0J6ZEhsc1pYTWdLR3hwYm1WeklHRnVaQ0IwWlhoMExXOTJaWEptYkc5M0tTNWNiaUFxTDF4dVpuVnVZM1JwYjI0Z1oyVjBWR1Y0ZEZOd1pXTlRkSGxzWlNBb2JYTWdQU0I3ZlNrZ2UxeHVJQ0JqYjI1emRDQnNhVzVsY3lBOUlIQmhjbk5sU1c1MEtHMXpMbXhwYm1WektTQjhmQ0F3WEc0Z0lHTnZibk4wSUc5MlpYSm1iRzkzSUQwZ2JYTmJKM1JsZUhRdGIzWmxjbVpzYjNjblhTQjhmQ0FuWld4c2FYQnphWE1uWEc0Z0lHbG1JQ2hzYVc1bGN5QStJREFwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lDQWdiM1psY21ac2IzYzZJQ2RvYVdSa1pXNG5MRnh1SUNBZ0lDQWdKM1JsZUhRdGIzWmxjbVpzYjNjbk9pQnZkbVZ5Wm14dmR5eGNiaUFnSUNBZ0lDY3RkMlZpYTJsMExXeHBibVV0WTJ4aGJYQW5PaUJzYVc1bGMxeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm5aWFJVWlhoMElDaDNaV1Y0S1NCN1hHNGdJR052Ym5OMElIc2daWGgwY21GamRFTnZiWEJ2Ym1WdWRGTjBlV3hsTENCamNtVmhkR1ZGZG1WdWRFMWhjQ0I5SUQwZ2QyVmxlRnh1SUNCamIyNXpkQ0I3SUdWNGRHVnVaQ0I5SUQwZ2QyVmxlQzUxZEdsc2MxeHVYRzRnSUhKbGRIVnliaUI3WEc0Z0lDQWdibUZ0WlRvZ0ozZGxaWGd0ZEdWNGRDY3NYRzRnSUNBZ2NISnZjSE02SUh0Y2JpQWdJQ0FnSUd4cGJtVnpPaUJiVG5WdFltVnlMQ0JUZEhKcGJtZGRMRnh1SUNBZ0lDQWdkbUZzZFdVNklGdFRkSEpwYm1kZFhHNGdJQ0FnZlN4Y2JseHVJQ0FnSUhKbGJtUmxjaUFvWTNKbFlYUmxSV3hsYldWdWRDa2dlMXh1SUNBZ0lDQWdZMjl1YzNRZ2MzUjViR1VnUFNCbGVIUnlZV04wUTI5dGNHOXVaVzUwVTNSNWJHVW9kR2hwY3lsY2JpQWdJQ0FnSUdOdmJuTjBJSFJsZUhSVGNHVmpVM1I1YkdVZ1BTQm5aWFJVWlhoMFUzQmxZMU4wZVd4bEtITjBlV3hsS1Z4dUlDQWdJQ0FnY21WMGRYSnVJR055WldGMFpVVnNaVzFsYm5Rb0ozQW5MQ0I3WEc0Z0lDQWdJQ0FnSUdGMGRISnpPaUI3SUNkM1pXVjRMWFI1Y0dVbk9pQW5kR1Y0ZENjZ2ZTeGNiaUFnSUNBZ0lDQWdiMjQ2SUdOeVpXRjBaVVYyWlc1MFRXRndLSFJvYVhNcExGeHVJQ0FnSUNBZ0lDQnpkR0YwYVdORGJHRnpjem9nSjNkbFpYZ3RkR1Y0ZENCM1pXVjRMV1ZzSnl4Y2JpQWdJQ0FnSUNBZ2MzUmhkR2xqVTNSNWJHVTZJR1Y0ZEdWdVpDaHpkSGxzWlN3Z2RHVjRkRk53WldOVGRIbHNaU2xjYmlBZ0lDQWdJSDBzSUhSb2FYTXVKSE5zYjNSekxtUmxabUYxYkhRZ2ZId2dXM1JvYVhNdWRtRnNkV1ZkS1Z4dUlDQWdJSDBzWEc0Z0lDQWdYMk56YzF4dUlDQjlYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUh0Y2JpQWdhVzVwZENBb2QyVmxlQ2tnZTF4dUlDQWdJSGRsWlhndWNtVm5hWE4wWlhKRGIyMXdiMjVsYm5Rb0ozUmxlSFFuTENCblpYUlVaWGgwS0hkbFpYZ3BLVnh1SUNCOVhHNTlYRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JtTnZibk4wSUY5amMzTWdQU0JnWEc0dWQyVmxlQzEwWlhoMFlYSmxZU0I3WEc0Z0lHWnZiblF0YzJsNlpUb2dNQzQwTWpZMk5qZHlaVzFjYm4xY2JpNTNaV1Y0TFhSbGVIUmhjbVZoT21adlkzVnpJSHRjYmlBZ2IzVjBiR2x1WlRvZ2JtOXVaVHRjYm4xY2JtQmNibHh1Wm5WdVkzUnBiMjRnWjJWMFZHVjRkR0Z5WldFZ0tIZGxaWGdwSUh0Y2JpQWdZMjl1YzNRZ2V5QmxlSFJ5WVdOMFEyOXRjRzl1Wlc1MFUzUjViR1VzSUdOeVpXRjBaVVYyWlc1MFRXRndJSDBnUFNCM1pXVjRYRzRnSUdOdmJuTjBJSHNnYVc1d2RYUkRiMjF0YjI0Z2ZTQTlJSGRsWlhndWJXbDRhVzV6WEc0Z0lHTnZibk4wSUhzZ1pYaDBaVzVrTENCdFlYQkdiM0p0UlhabGJuUnpJSDBnUFNCM1pXVjRMblYwYVd4elhHNWNiaUFnY21WMGRYSnVJSHRjYmlBZ0lDQnVZVzFsT2lBbmQyVmxlQzEwWlhoMFlYSmxZU2NzWEc0Z0lDQWdiV2w0YVc1ek9pQmJhVzV3ZFhSRGIyMXRiMjVkTEZ4dUlDQWdJSEJ5YjNCek9pQjdYRzRnSUNBZ0lDQjJZV3gxWlRvZ1UzUnlhVzVuTEZ4dUlDQWdJQ0FnY0d4aFkyVm9iMnhrWlhJNklGTjBjbWx1Wnl4Y2JpQWdJQ0FnSUdScGMyRmliR1ZrT2lCN1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUZ0VGRISnBibWNzSUVKdmIyeGxZVzVkTEZ4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2lCbVlXeHpaVnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJR0YxZEc5bWIyTjFjem9nZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUJiVTNSeWFXNW5MQ0JDYjI5c1pXRnVYU3hjYmlBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nWm1Gc2MyVmNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQnliM2R6T2lCN1hHNGdJQ0FnSUNBZ0lIUjVjR1U2SUZ0VGRISnBibWNzSUU1MWJXSmxjbDBzWEc0Z0lDQWdJQ0FnSUdSbFptRjFiSFE2SURKY2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCeVpYUjFjbTVMWlhsVWVYQmxPaUJUZEhKcGJtZGNiaUFnSUNCOUxGeHVYRzRnSUNBZ2NtVnVaR1Z5SUNoamNtVmhkR1ZGYkdWdFpXNTBLU0I3WEc0Z0lDQWdJQ0F2S2lCcGMzUmhibUoxYkNCcFoyNXZjbVVnYm1WNGRDQXFMMXh1SUNBZ0lDQWdMeThnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJRDA5UFNBblpHVjJaV3h2Y0cxbGJuUW5LU0I3WEc0Z0lDQWdJQ0F2THlBZ0lIWmhiR2xrWVhSbFUzUjViR1Z6S0NkMFpYaDBZWEpsWVNjc0lIUm9hWE11SkhadWIyUmxMbVJoZEdFZ0ppWWdkR2hwY3k0a2RtNXZaR1V1WkdGMFlTNXpkR0YwYVdOVGRIbHNaU2xjYmlBZ0lDQWdJQzh2SUgxY2JpQWdJQ0FnSUdOdmJuTjBJR1YyWlc1MGN5QTlJR1Y0ZEdWdVpDaGpjbVZoZEdWRmRtVnVkRTFoY0NoMGFHbHpLU3dnYldGd1JtOXliVVYyWlc1MGN5aDBhR2x6S1NsY2JpQWdJQ0FnSUhKbGRIVnliaUJqY21WaGRHVkZiR1Z0Wlc1MEtDZG9kRzFzT25SbGVIUmhjbVZoSnl3Z2UxeHVJQ0FnSUNBZ0lDQmhkSFJ5Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ2QzWldWNExYUjVjR1VuT2lBbmRHVjRkR0Z5WldFbkxGeHVJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQjBhR2x6TG5aaGJIVmxMRnh1SUNBZ0lDQWdJQ0FnSUdScGMyRmliR1ZrT2lBb2RHaHBjeTVrYVhOaFlteGxaQ0FoUFQwZ0oyWmhiSE5sSnlBbUppQjBhR2x6TG1ScGMyRmliR1ZrSUNFOVBTQm1ZV3h6WlNrc1hHNGdJQ0FnSUNBZ0lDQWdZWFYwYjJadlkzVnpPaUFvZEdocGN5NWhkWFJ2Wm05amRYTWdJVDA5SUNkbVlXeHpaU2NnSmlZZ2RHaHBjeTVoZFhSdlptOWpkWE1nSVQwOUlHWmhiSE5sS1N4Y2JpQWdJQ0FnSUNBZ0lDQndiR0ZqWldodmJHUmxjam9nZEdocGN5NXdiR0ZqWldodmJHUmxjaXhjYmlBZ0lDQWdJQ0FnSUNCeWIzZHpPaUIwYUdsekxuSnZkM01zWEc0Z0lDQWdJQ0FnSUNBZ0ozSmxkSFZ5YmkxclpYa3RkSGx3WlNjNklIUm9hWE11Y21WMGRYSnVTMlY1Vkhsd1pWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JrYjIxUWNtOXdjem9nZTF4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsT2lCMGFHbHpMblpoYkhWbFhHNGdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJRzl1T2lCMGFHbHpMbU55WldGMFpVdGxlV0p2WVhKa1JYWmxiblFvWlhabGJuUnpLU3hjYmlBZ0lDQWdJQ0FnYzNSaGRHbGpRMnhoYzNNNklDZDNaV1Y0TFhSbGVIUmhjbVZoSUhkbFpYZ3RaV3duTEZ4dUlDQWdJQ0FnSUNCemRHRjBhV05UZEhsc1pUb2daWGgwY21GamRFTnZiWEJ2Ym1WdWRGTjBlV3hsS0hSb2FYTXBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMHNYRzRnSUNBZ1gyTnpjMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJSHRjYmlBZ2FXNXBkQ0FvZDJWbGVDa2dlMXh1SUNBZ0lIZGxaWGd1Y21WbmFYTjBaWEpEYjIxd2IyNWxiblFvSjNSbGVIUmhjbVZoSnl3Z1oyVjBWR1Y0ZEdGeVpXRW9kMlZsZUNrcFhHNGdJSDFjYm4xY2JpSXNJaUF2S2x4dUlDb2dUR2xqWlc1elpXUWdkRzhnZEdobElFRndZV05vWlNCVGIyWjBkMkZ5WlNCR2IzVnVaR0YwYVc5dUlDaEJVMFlwSUhWdVpHVnlJRzl1WlZ4dUlDb2diM0lnYlc5eVpTQmpiMjUwY21saWRYUnZjaUJzYVdObGJuTmxJR0ZuY21WbGJXVnVkSE11SUNCVFpXVWdkR2hsSUU1UFZFbERSU0JtYVd4bFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCM2FYUm9JSFJvYVhNZ2QyOXlheUJtYjNJZ1lXUmthWFJwYjI1aGJDQnBibVp2Y20xaGRHbHZibHh1SUNvZ2NtVm5ZWEprYVc1bklHTnZjSGx5YVdkb2RDQnZkMjVsY25Ob2FYQXVJQ0JVYUdVZ1FWTkdJR3hwWTJWdWMyVnpJSFJvYVhNZ1ptbHNaVnh1SUNvZ2RHOGdlVzkxSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aVnh1SUNvZ1hDSk1hV05sYm5ObFhDSXBPeUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sWEc0Z0tpQjNhWFJvSUhSb1pTQk1hV05sYm5ObExpQWdXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc1hHNGdLaUJ6YjJaMGQyRnlaU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJseHVJQ29nWENKQlV5QkpVMXdpSUVKQlUwbFRMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxsY2JpQXFJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdUlDQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlZ4dUlDb2djM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpDQnNhVzFwZEdGMGFXOXVjMXh1SUNvZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYmx4dVpuVnVZM1JwYjI0Z1oyVjBWbWxrWlc4Z0tIZGxaWGdwSUh0Y2JpQWdZMjl1YzNRZ2V5QmxlSFJ5WVdOMFEyOXRjRzl1Wlc1MFUzUjViR1VzSUdOeVpXRjBaVVYyWlc1MFRXRndJSDBnUFNCM1pXVjRYRzVjYmlBZ2NtVjBkWEp1SUh0Y2JpQWdJQ0J1WVcxbE9pQW5kMlZsZUMxMmFXUmxieWNzWEc0Z0lDQWdjSEp2Y0hNNklIdGNiaUFnSUNBZ0lITnlZem9nVTNSeWFXNW5MRnh1SUNBZ0lDQWdjR3hoZVZOMFlYUjFjem9nZTF4dUlDQWdJQ0FnSUNCMGVYQmxPaUJUZEhKcGJtY3NYRzRnSUNBZ0lDQWdJR1JsWm1GMWJIUTZJQ2R3WVhWelpTY3NYRzRnSUNBZ0lDQWdJSFpoYkdsa1lYUnZjaUFvZG1Gc2RXVXBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnV3lkd2JHRjVKeXdnSjNCaGRYTmxKMTB1YVc1a1pYaFBaaWgyWVd4MVpTa2dJVDA5SUMweFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHNYRzRnSUNBZ0lDQmhkWFJ2Y0d4aGVUb2dlMXh1SUNBZ0lDQWdJQ0IwZVhCbE9pQmJVM1J5YVc1bkxDQkNiMjlzWldGdVhTeGNiaUFnSUNBZ0lDQWdaR1ZtWVhWc2REb2dabUZzYzJWY2JpQWdJQ0FnSUgwc1hHNGdJQ0FnSUNCaGRYUnZVR3hoZVRvZ2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCYlUzUnlhVzVuTENCQ2IyOXNaV0Z1WFN4Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ1ptRnNjMlZjYmlBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0J3YkdGNWMybHViR2x1WlRvZ2UxeHVJQ0FnSUNBZ0lDQjBlWEJsT2lCYlUzUnlhVzVuTENCQ2IyOXNaV0Z1WFN4Y2JpQWdJQ0FnSUNBZ1pHVm1ZWFZzZERvZ2RISjFaVnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJR052Ym5SeWIyeHpPaUI3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJRnRUZEhKcGJtY3NJRUp2YjJ4bFlXNWRMRnh1SUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJtWVd4elpWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwc1hHNWNiaUFnSUNCeVpXNWtaWElnS0dOeVpXRjBaVVZzWlcxbGJuUXBJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbkJzWVhsVGRHRjBkWE1nUFQwOUlDZHdiR0Y1SnlrZ2UxeHVJQ0FnSUNBZ0lDQjBhR2x6TGlSdVpYaDBWR2xqYXlobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NGtaV3dnSmlZZ2RHaHBjeTRrWld3dWNHeGhlU2dwWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCbGJITmxJR2xtSUNoMGFHbHpMbkJzWVhsVGRHRjBkWE1nUFQwOUlDZHdZWFZ6WlNjcElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k0a2JtVjRkRlJwWTJzb1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVKR1ZzSUNZbUlIUm9hWE11SkdWc0xuQmhkWE5sS0NsY2JpQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVWc1pXMWxiblFvSjJoMGJXdzZkbWxrWlc4bkxDQjdYRzRnSUNBZ0lDQWdJR0YwZEhKek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSjNkbFpYZ3RkSGx3WlNjNklDZDJhV1JsYnljc1hHNGdJQ0FnSUNBZ0lDQWdZWFYwYjNCc1lYazZJQ2dvZEdocGN5NWhkWFJ2Y0d4aGVTQWhQVDBnSjJaaGJITmxKeUFtSmlCMGFHbHpMbUYxZEc5d2JHRjVJQ0U5UFNCbVlXeHpaU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lIeDhJQ2gwYUdsekxtRjFkRzlRYkdGNUlDRTlQU0FuWm1Gc2MyVW5JQ1ltSUhSb2FYTXVZWFYwYjFCc1lYa2dJVDA5SUdaaGJITmxLU2tzWEc0Z0lDQWdJQ0FnSUNBZ0ozZGxZbXRwZEMxd2JHRjVjMmx1YkdsdVpTYzZJSFJvYVhNdWNHeGhlWE5wYm14cGJtVXNYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRISnZiSE02SUhSb2FYTXVZMjl1ZEhKdmJITXNYRzRnSUNBZ0lDQWdJQ0FnYzNKak9pQjBhR2x6TG5OeVkxeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J2YmpvZ1kzSmxZWFJsUlhabGJuUk5ZWEFvZEdocGN5d2dXeWR6ZEdGeWRDY3NJQ2R3WVhWelpTY3NJQ2RtYVc1cGMyZ25MQ0FuWm1GcGJDZGRLU3hjYmlBZ0lDQWdJQ0FnYzNSaGRHbGpRMnhoYzNNNklDZDNaV1Y0TFhacFpHVnZJSGRsWlhndFpXd25MRnh1SUNBZ0lDQWdJQ0J6ZEdGMGFXTlRkSGxzWlRvZ1pYaDBjbUZqZEVOdmJYQnZibVZ1ZEZOMGVXeGxLSFJvYVhNcFhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJR2x1YVhRZ0tIZGxaWGdwSUh0Y2JpQWdJQ0IzWldWNExuSmxaMmx6ZEdWeVEyOXRjRzl1Wlc1MEtDZDJhV1JsYnljc0lHZGxkRlpwWkdWdktIZGxaWGdwS1Z4dUlDQjlYRzU5WEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibHh1WTI5dWMzUWdYMk56Y3lBOUlHQmNiaTUzWldWNExYZGxZaUI3WEc0Z0lIQnZjMmwwYVc5dU9pQnlaV3hoZEdsMlpUdGNiaUFnZDJsa2RHZzZJREV3TUNVN1hHNGdJR2hsYVdkb2REb2dNVEF3SlR0Y2JpQWdZbTl5WkdWeU9pQnViMjVsTzF4dUlDQmliM2d0YzJsNmFXNW5PaUJpYjNKa1pYSXRZbTk0TzF4dWZWeHVZRnh1WEc1bWRXNWpkR2x2YmlCblpYUlhaV0lnS0hkbFpYZ3BJSHRjYmlBZ1kyOXVjM1FnZXlCbGVIUnlZV04wUTI5dGNHOXVaVzUwVTNSNWJHVXNJR055WldGMFpVVjJaVzUwVFdGd0lIMGdQU0IzWldWNFhHNGdJR052Ym5OMElIc2dZM0psWVhSbFJYWmxiblFnZlNBOUlIZGxaWGd1ZFhScGJITmNibHh1SUNCeVpYUjFjbTRnZTF4dUlDQWdJRzVoYldVNklDZDNaV1Y0TFhkbFlpY3NYRzRnSUNBZ2NISnZjSE02SUh0Y2JpQWdJQ0FnSUhOeVl6b2dVM1J5YVc1blhHNGdJQ0FnZlN4Y2JpQWdJQ0J0WlhSb2IyUnpPaUI3WEc0Z0lDQWdJQ0F2THlCVVQwUlBPaUJqYUdWamF5QmpjbTl6Y3kxdmNtbG5hVzVjYmlBZ0lDQWdJR2R2UW1GamF5QW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGlSbGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVKR1ZzTG1OdmJuUmxiblJYYVc1a2IzY3VhR2x6ZEc5eWVTNWlZV05yS0NsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lHZHZSbTl5ZDJGeVpDQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGlSbGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVKR1ZzTG1OdmJuUmxiblJYYVc1a2IzY3VhR2x6ZEc5eWVTNW1iM0ozWVhKa0tDbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU3hjYmlBZ0lDQWdJSEpsYkc5aFpDQW9LU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhR2x6TGlSbGJDa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVKR1ZzTG1OdmJuUmxiblJYYVc1a2IzY3VhR2x6ZEc5eWVTNXlaV3h2WVdRb0tWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lHMXZkVzUwWldRZ0tDa2dlMXh1SUNBZ0lDQWdhV1lnS0hSb2FYTXVKR1ZzS1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11SkdWdGFYUW9KM0JoWjJWemRHRnlkQ2NzSUdOeVpXRjBaVVYyWlc1MEtIUm9hWE11SkdWc0xDQW5jR0ZuWlhOMFlYSjBKeXdnZXlCMWNtdzZJSFJvYVhNdWMzSmpJSDBwS1Z4dUlDQWdJQ0FnSUNCMGFHbHpMaVJsYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0Nkc2IyRmtKeXdnWlhabGJuUWdQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11SkdWdGFYUW9KM0JoWjJWbWFXNXBjMmduTENCamNtVmhkR1ZGZG1WdWRDaDBhR2x6TGlSbGJDd2dKM0JoWjJWbWFXNXBjMmduTENCN0lIVnliRG9nZEdocGN5NXpjbU1nZlNrcFhHNGdJQ0FnSUNBZ0lIMHBYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTeGNibHh1SUNBZ0lISmxibVJsY2lBb1kzSmxZWFJsUld4bGJXVnVkQ2tnZTF4dUlDQWdJQ0FnTHlvZ2FYTjBZVzVpZFd3Z2FXZHViM0psSUc1bGVIUWdLaTljYmlBZ0lDQWdJQzh2SUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUE5UFQwZ0oyUmxkbVZzYjNCdFpXNTBKeWtnZTF4dUlDQWdJQ0FnTHk4Z0lDQjJZV3hwWkdGMFpWTjBlV3hsY3lnbmQyVmlKeXdnZEdocGN5NGtkbTV2WkdVdVpHRjBZU0FtSmlCMGFHbHpMaVIyYm05a1pTNWtZWFJoTG5OMFlYUnBZMU4wZVd4bEtWeHVJQ0FnSUNBZ0x5OGdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlHTnlaV0YwWlVWc1pXMWxiblFvSjJsbWNtRnRaU2NzSUh0Y2JpQWdJQ0FnSUNBZ1lYUjBjbk02SUh0Y2JpQWdJQ0FnSUNBZ0lDQW5kMlZsZUMxMGVYQmxKem9nSjNkbFlpY3NYRzRnSUNBZ0lDQWdJQ0FnYzNKak9pQjBhR2x6TG5OeVkxeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J2YmpvZ1kzSmxZWFJsUlhabGJuUk5ZWEFvZEdocGN5d2dXeWRsY25KdmNpZGRLU3hjYmlBZ0lDQWdJQ0FnYzNSaGRHbGpRMnhoYzNNNklDZDNaV1Y0TFhkbFlpQjNaV1Y0TFdWc0p5eGNiaUFnSUNBZ0lDQWdjM1JoZEdsalUzUjViR1U2SUdWNGRISmhZM1JEYjIxd2IyNWxiblJUZEhsc1pTaDBhR2x6S1Z4dUlDQWdJQ0FnZlNsY2JpQWdJQ0I5TEZ4dUlDQWdJRjlqYzNOY2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJR2x1YVhRZ0tIZGxaWGdwSUh0Y2JpQWdJQ0IzWldWNExuSmxaMmx6ZEdWeVEyOXRjRzl1Wlc1MEtDZDNaV0luTENCblpYUlhaV0lvZDJWbGVDa3BYRzRnSUgxY2JuMWNibHh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMaUFnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVmNiaUFxSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVFnYkdsdGFYUmhkR2x2Ym5OY2JpQXFJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNXBiWEJ2Y25RZ1lTQm1jbTl0SUNjdUwyRW5YRzVwYlhCdmNuUWdaR2wySUdaeWIyMGdKeTR2WkdsMkoxeHVhVzF3YjNKMElHbHRZV2RsSUdaeWIyMGdKeTR2YVcxaFoyVW5YRzVwYlhCdmNuUWdhVzV3ZFhRZ1puSnZiU0FuTGk5cGJuQjFkQ2RjYm1sdGNHOXlkQ0JmYzNkcGRHTm9JR1p5YjIwZ0p5NHZjM2RwZEdOb0oxeHVhVzF3YjNKMElITmpjbTlzYkdGaWJHVWdabkp2YlNBbkxpOXpZM0p2Ykd4aFlteGxKMXh1YVcxd2IzSjBJSE5zYVdSbGNpQm1jbTl0SUNjdUwzTnNhV1JsY2lkY2JtbHRjRzl5ZENCMFpYaDBJR1p5YjIwZ0p5NHZkR1Y0ZENkY2JtbHRjRzl5ZENCMFpYaDBZWEpsWVNCbWNtOXRJQ2N1TDNSbGVIUmhjbVZoSjF4dWFXMXdiM0owSUhacFpHVnZJR1p5YjIwZ0p5NHZkbWxrWlc4blhHNXBiWEJ2Y25RZ2QyVmlJR1p5YjIwZ0p5NHZkMlZpSjF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCYlhHNGdJR0VzWEc0Z0lHUnBkaXhjYmlBZ2FXMWhaMlVzWEc0Z0lHbHVjSFYwTEZ4dUlDQmZjM2RwZEdOb0xGeHVJQ0J6WTNKdmJHeGhZbXhsTEZ4dUlDQnpiR2xrWlhJc1hHNGdJSFJsZUhRc1hHNGdJSFJsZUhSaGNtVmhMRnh1SUNCMmFXUmxieXhjYmlBZ2QyVmlYRzVkWEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNiaWQxYzJVZ2MzUnlhV04wSjF4dVhHNWpiMjV6ZENCemRYQndiM0owUjJWdmJHOWpZWFJwYjI0Z1BTQW5aMlZ2Ykc5allYUnBiMjRuSUdsdUlHNWhkbWxuWVhSdmNseHVZMjl1YzNRZ1pYSnliM0pOYzJjZ1BTQmdXMmcxTFhKbGJtUmxjbDA2SUdKeWIzZHpaWElnWkc5bGMyNG5kQ0J6ZFhCd2IzSjBJR2RsYjJ4dlkyRjBhVzl1TG1CY2JseHVZMjl1YzNRZ1oyVnZiRzlqWVhScGIyNGdQU0I3WEc0Z0lDOHZJRzl3ZEdsdmJuTTZYRzRnSUM4dklDQWdMU0JsYm1GaWJHVklhV2RvUVdOamRYSmhZM2tnYjNCMGFXOXVZV3dzSUhaaGJIVmxJR2x6SUhSeWRXVWdiM0lnWm1Gc2MyVXNJR1poYkhObElHSjVJR1JsWm1GMWJIUXVYRzRnSUM4dklDQWdMU0IwYVcxbGIzVjBJRnR1YjI1bExXNWhkR2wyWlYwZ2IzQjBhVzl1WVd3c0lIWmhiSFZsSUdseklHRWdiblZ0WW1WeUlDaHRhV3hzYVhObFkyOXVaSE1wTENCa1pXWmhkV3gwSUhaaGRXeGxJR2x6SUVaSlRrWkpUa2xVV1M1Y2JpQWdMeThnSUNBdElHMWhlR2x0ZFcxQloyVWdXMjV2Ym1VdGJtRjBhWFpsWFNCdmNIUnBiMjVoYkN3Z2RtRnNkV1VnYVhNZ1lTQnVkVzFpWlhJZ0tHMXBiR3hwYzJWamIyNWtjeWtzSUdSbFptRjFiSFFnZG1Gc2RXVWdhWE1nTUM1Y2JpQWdaMlYwUTNWeWNtVnVkRkJ2YzJsMGFXOXVJQ2h6ZFdOalpYTnpRMkpKWkN3Z1pYSnliM0pEWWtsa0xDQnZjSFJwYjI1ektTQjdYRzRnSUNBZ1kyOXVjM1FnYzNWalkyVnpjME5pSUQwZ2NHOXpJRDArSUhSb2FYTXVjMlZ1WkdWeUxuQmxjbVp2Y20xRFlXeHNZbUZqYXloemRXTmpaWE56UTJKSlpDd2djRzl6S1Z4dUlDQWdJR052Ym5OMElHVnljbTl5UTJJZ1BTQmxjbklnUFQ0Z2RHaHBjeTV6Wlc1a1pYSXVjR1Z5Wm05eWJVTmhiR3hpWVdOcktHVnljbTl5UTJKSlpDd2daWEp5S1Z4dUlDQWdJR2xtSUNoemRYQndiM0owUjJWdmJHOWpZWFJwYjI0cElIdGNiaUFnSUNBZ0lHNWhkbWxuWVhSdmNpNW5aVzlzYjJOaGRHbHZiaTVuWlhSRGRYSnlaVzUwVUc5emFYUnBiMjRvYzNWalkyVnpjME5pTENCbGNuSnZja05pTENCdmNIUnBiMjV6S1Z4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1ZDJGeWJpaGxjbkp2Y2sxelp5bGNiaUFnSUNBZ0lHVnljbTl5UTJJb2JtVjNJRVZ5Y205eUtHVnljbTl5VFhObktTbGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdMeThnYjNCMGFXOXVjem9nZEdobElITmhiV1VnZDJsMGFDQmdaMlYwUTNWeWNtVnVkRkJ2YzJsMGFXOXVZQzVjYmlBZ2QyRjBZMmhRYjNOcGRHbHZiaUFvYzNWalkyVnpjME5pU1dRc0lHVnljbTl5UTJKSlpDd2diM0IwYVc5dWN5a2dlMXh1SUNBZ0lHTnZibk4wSUhOMVkyTmxjM05EWWlBOUlIQnZjeUE5UGlCMGFHbHpMbk5sYm1SbGNpNXdaWEptYjNKdFEyRnNiR0poWTJzb2MzVmpZMlZ6YzBOaVNXUXNJSEJ2Y3l3Z2RISjFaU2xjYmlBZ0lDQmpiMjV6ZENCbGNuSnZja05pSUQwZ1pYSnlJRDArSUhSb2FYTXVjMlZ1WkdWeUxuQmxjbVp2Y20xRFlXeHNZbUZqYXlobGNuSnZja05pU1dRc0lHVnljaWxjYmlBZ0lDQnBaaUFvYzNWd2NHOXlkRWRsYjJ4dlkyRjBhVzl1S1NCN1hHNGdJQ0FnSUNCamIyNXpkQ0JwWkNBOUlHNWhkbWxuWVhSdmNpNW5aVzlzYjJOaGRHbHZiaTUzWVhSamFGQnZjMmwwYVc5dUtIQnZjeUE5UGlCN1hHNGdJQ0FnSUNBZ0lIQnZjeTUzWVhSamFFbGtJRDBnYVdSY2JpQWdJQ0FnSUNBZ2MzVmpZMlZ6YzBOaUtIQnZjeWxjYmlBZ0lDQWdJSDBzSUdWeWNtOXlRMklzSUc5d2RHbHZibk1wWEc0Z0lDQWdmVnh1SUNBZ0lHVnNjMlVnZTF4dUlDQWdJQ0FnWTI5dWMyOXNaUzUzWVhKdUtHVnljbTl5VFhObktWeHVJQ0FnSUNBZ1pYSnliM0pEWWlodVpYY2dSWEp5YjNJb1pYSnliM0pOYzJjcEtWeHVJQ0FnSUgxY2JpQWdmU3hjYmx4dUlDQmpiR1ZoY2xkaGRHTm9JQ2gzWVhSamFFbGtLU0I3WEc0Z0lDQWdhV1lnS0hOMWNIQnZjblJIWlc5c2IyTmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ2JtRjJhV2RoZEc5eUxtZGxiMnh2WTJGMGFXOXVMbU5zWldGeVYyRjBZMmdvZDJGMFkyaEpaQ2xjYmlBZ0lDQjlYRzRnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b1pYSnliM0pOYzJjcFhHNGdJQ0FnZlZ4dUlDQjlYRzU5WEc1Y2JtTnZibk4wSUcxbGRHRWdQU0I3WEc0Z0lHZGxiMnh2WTJGMGFXOXVPaUJiZTF4dUlDQWdJRzVoYldVNklDZG5aWFJEZFhKeVpXNTBVRzl6YVhScGIyNG5MRnh1SUNBZ0lHRnlaM002SUZzblpuVnVZM1JwYjI0bkxDQW5ablZ1WTNScGIyNG5MQ0FuYjJKcVpXTjBKMTFjYmlBZ2ZTd2dlMXh1SUNBZ0lHNWhiV1U2SUNkM1lYUmphRkJ2YzJsMGFXOXVKeXhjYmlBZ0lDQmhjbWR6T2lCYkoyWjFibU4wYVc5dUp5d2dKMloxYm1OMGFXOXVKeXdnSjI5aWFtVmpkQ2RkWEc0Z0lIMHNJSHRjYmlBZ0lDQnVZVzFsT2lBblkyeGxZWEpYWVhSamFDY3NYRzRnSUNBZ1lYSm5jem9nV3lkemRISnBibWNuWFZ4dUlDQjlYVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJR2x1YVhRZ0tGZGxaWGdwSUh0Y2JpQWdJQ0JYWldWNExuSmxaMmx6ZEdWeVFYQnBUVzlrZFd4bEtDZG5aVzlzYjJOaGRHbHZiaWNzSUdkbGIyeHZZMkYwYVc5dUxDQnRaWFJoS1Z4dUlDQjlYRzU5WEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNiaThxSUdkc2IySmhiQ0JzYjJOaGJGTjBiM0poWjJVZ0tpOWNibHh1SjNWelpTQnpkSEpwWTNRblhHNWNibXhsZENCemRYQndiM0owVEc5allXeFRkRzl5WVdkbElEMGdabUZzYzJWY2JuUnllU0I3WEc0Z0lITjFjSEJ2Y25STWIyTmhiRk4wYjNKaFoyVWdQU0IwZVhCbGIyWWdiRzlqWVd4VGRHOXlZV2RsSUNFOVBTQW5kVzVrWldacGJtVmtKMXh1ZlZ4dVkyRjBZMmdnS0dWeWNpa2dlMXh1SUNBdkx5QnViM1FnYzNWd2NHOXlkQzVjYm4xY2JseHVZMjl1YzNRZ1UxVkRRMFZUVXlBOUlDZHpkV05qWlhOekoxeHVZMjl1YzNRZ1JrRkpURVZFSUQwZ0oyWmhhV3hsWkNkY2JtTnZibk4wSUVsT1ZrRk1TVVJmVUVGU1FVMGdQU0FuYVc1MllXeHBaRjl3WVhKaGJTZGNibU52Ym5OMElGVk9SRVZHU1U1RlJDQTlJQ2QxYm1SbFptbHVaV1FuWEc1Y2JtWjFibU4wYVc5dUlHTmhiR3hHWVdsc0lDaHpaVzVrWlhJc0lHTmhiR3hpWVdOclNXUXNJR1Z5Y205eVRYTm5LU0I3WEc0Z0lITmxibVJsY2k1d1pYSm1iM0p0UTJGc2JHSmhZMnNvWTJGc2JHSmhZMnRKWkN3Z2UxeHVJQ0FnSUhKbGMzVnNkRG9nUmtGSlRFVkVMRnh1SUNBZ0lHUmhkR0U2SUdWeWNtOXlUWE5uSUh4OElGVk9SRVZHU1U1RlJGeHVJQ0I5S1Z4dWZWeHVYRzVtZFc1amRHbHZiaUJqWVd4c1RtOTBVM1Z3Y0c5eWRFWmhhV3dnS0hObGJtUmxjaXdnWTJGc2JHSmhZMnRKWkNrZ2UxeHVJQ0J6Wlc1a1pYSXVjR1Z5Wm05eWJVTmhiR3hpWVdOcktHTmhiR3hpWVdOclNXUXNJSHRjYmlBZ0lDQnlaWE4xYkhRNklFWkJTVXhGUkN4Y2JpQWdJQ0JrWVhSaE9pQW5iRzlqWVd4VGRHOXlZV2RsSUdseklHUnBjMkZpYkdWa0lHOXlJRzV2ZENCemRYQndiM0owWldRdUoxeHVJQ0I5S1Z4dWZWeHVYRzVqYjI1emRDQnpkRzl5WVdkbElEMGdlMXh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlhhR1Z1SUhCaGMzTmxaQ0JoSUd0bGVTQnVZVzFsSUdGdVpDQjJZV3gxWlN3Z2QybHNiQ0JoWkdRZ2RHaGhkQ0JyWlhrZ2RHOGdkR2hsSUhOMGIzSmhaMlVzWEc0Z0lDQXFJRzl5SUhWd1pHRjBaU0IwYUdGMElHdGxlU2R6SUhaaGJIVmxJR2xtSUdsMElHRnNjbVZoWkhrZ1pYaHBjM1J6TGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdhMlY1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQjJZV3gxWlNCdWIzUWdiblZzYkNCdWIzSWdkVzVrYVdacGJtVms3N3lNWW5WMElEQWdkMjl5YTNNdVhHNGdJQ0FxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUdOaGJHeGlZV05yU1dSY2JpQWdJQ292WEc0Z0lITmxkRWwwWlcwNklHWjFibU4wYVc5dUlDaHJaWGtzSUhaaGJIVmxMQ0JqWVd4c1ltRmphMGxrS1NCN1hHNGdJQ0FnWTI5dWMzUWdjMlZ1WkdWeUlEMGdkR2hwY3k1elpXNWtaWEpjYmlBZ0lDQnBaaUFvSVhOMWNIQnZjblJNYjJOaGJGTjBiM0poWjJVcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCallXeHNUbTkwVTNWd2NHOXlkRVpoYVd3b2MyVnVaR1Z5TENCallXeHNZbUZqYTBsa0tWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb0lXdGxlU0I4ZkNBb0lYWmhiSFZsSUNZbUlIWmhiSFZsSUNFOVBTQXdLU2tnZTF4dUlDQWdJQ0FnYzJWdVpHVnlMbkJsY21admNtMURZV3hzWW1GamF5aGpZV3hzWW1GamEwbGtMQ0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRG9nSjJaaGFXeGxaQ2NzWEc0Z0lDQWdJQ0FnSUdSaGRHRTZJRWxPVmtGTVNVUmZVRUZTUVUxY2JpQWdJQ0FnSUgwcFhHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzRnSUNBZ2RISjVJSHRjYmlBZ0lDQWdJR3h2WTJGc1UzUnZjbUZuWlM1elpYUkpkR1Z0S0d0bGVTd2dkbUZzZFdVcFhHNGdJQ0FnSUNCelpXNWtaWEl1Y0dWeVptOXliVU5oYkd4aVlXTnJLR05oYkd4aVlXTnJTV1FzSUh0Y2JpQWdJQ0FnSUNBZ2NtVnpkV3gwT2lCVFZVTkRSVk5UTEZ4dUlDQWdJQ0FnSUNCa1lYUmhPaUJWVGtSRlJrbE9SVVJjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdmVnh1SUNBZ0lHTmhkR05vSUNobEtTQjdYRzRnSUNBZ0lDQXZMeUJoWTJObGNIUWdZVzU1SUdWNFkyVndkR2x2YmlCMGFISnZkMjRnWkhWeWFXNW5JR0VnYzNSdmNtRm5aU0JoZEhSbGJYQjBJR0Z6SUdFZ2NYVnZkR0VnWlhKeWIzSmNiaUFnSUNBZ0lHTmhiR3hHWVdsc0tITmxibVJsY2l3Z1kyRnNiR0poWTJ0SlpDbGNiaUFnSUNCOVhHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRmRvWlc0Z2NHRnpjMlZrSUdFZ2EyVjVJRzVoYldVc0lIZHBiR3dnY21WMGRYSnVJSFJvWVhRZ2EyVjVKM01nZG1Gc2RXVXVYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCclpYbGNiaUFnSUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ1kyRnNiR0poWTJ0SlpGeHVJQ0FnS2k5Y2JpQWdaMlYwU1hSbGJUb2dablZ1WTNScGIyNGdLR3RsZVN3Z1kyRnNiR0poWTJ0SlpDa2dlMXh1SUNBZ0lHTnZibk4wSUhObGJtUmxjaUE5SUhSb2FYTXVjMlZ1WkdWeVhHNGdJQ0FnYVdZZ0tDRnpkWEJ3YjNKMFRHOWpZV3hUZEc5eVlXZGxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMkZzYkU1dmRGTjFjSEJ2Y25SR1lXbHNLSE5sYm1SbGNpd2dZMkZzYkdKaFkydEpaQ2xjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLQ0ZyWlhrcElIdGNiaUFnSUNBZ0lITmxibVJsY2k1d1pYSm1iM0p0UTJGc2JHSmhZMnNvWTJGc2JHSmhZMnRKWkN3Z2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhRNklFWkJTVXhGUkN4Y2JpQWdJQ0FnSUNBZ1pHRjBZVG9nU1U1V1FVeEpSRjlRUVZKQlRWeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lISmxkSFZ5Ymx4dUlDQWdJSDFjYmlBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnWTI5dWMzUWdkbUZzSUQwZ2JHOWpZV3hUZEc5eVlXZGxMbWRsZEVsMFpXMG9hMlY1S1Z4dUlDQWdJQ0FnYzJWdVpHVnlMbkJsY21admNtMURZV3hzWW1GamF5aGpZV3hzWW1GamEwbGtMQ0I3WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkRG9nZG1Gc0lEOGdVMVZEUTBWVFV5QTZJRVpCU1V4RlJDeGNiaUFnSUNBZ0lDQWdaR0YwWVRvZ2RtRnNJSHg4SUZWT1JFVkdTVTVGUkZ4dUlDQWdJQ0FnZlNsY2JpQWdJQ0I5WEc0Z0lDQWdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQzh2SUdGalkyVndkQ0JoYm5rZ1pYaGpaWEIwYVc5dUlIUm9jbTkzYmlCa2RYSnBibWNnWVNCemRHOXlZV2RsSUdGMGRHVnRjSFFnWVhNZ1lTQnhkVzkwWVNCbGNuSnZjbHh1SUNBZ0lDQWdZMkZzYkVaaGFXd29jMlZ1WkdWeUxDQmpZV3hzWW1GamEwbGtLVnh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ3BYYUdWdUlIQmhjM05sWkNCaElHdGxlU0J1WVcxbExDQjNhV3hzSUhKbGJXOTJaU0IwYUdGMElHdGxlU0JtY205dElIUm9aU0J6ZEc5eVlXZGxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2EyVjVYRzRnSUNBcUlFQndZWEpoYlNCN1puVnVZM1JwYjI1OUlHTmhiR3hpWVdOclNXUmNiaUFnSUNvdlhHNGdJSEpsYlc5MlpVbDBaVzA2SUdaMWJtTjBhVzl1SUNoclpYa3NJR05oYkd4aVlXTnJTV1FwSUh0Y2JpQWdJQ0JqYjI1emRDQnpaVzVrWlhJZ1BTQjBhR2x6TG5ObGJtUmxjbHh1SUNBZ0lHbG1JQ2doYzNWd2NHOXlkRXh2WTJGc1UzUnZjbUZuWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUdOaGJHeE9iM1JUZFhCd2IzSjBSbUZwYkNoelpXNWtaWElzSUdOaGJHeGlZV05yU1dRcFhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNnaGEyVjVLU0I3WEc0Z0lDQWdJQ0J6Wlc1a1pYSXVjR1Z5Wm05eWJVTmhiR3hpWVdOcktHTmhiR3hpWVdOclNXUXNJSHRjYmlBZ0lDQWdJQ0FnY21WemRXeDBPaUJHUVVsTVJVUXNYRzRnSUNBZ0lDQWdJR1JoZEdFNklFbE9Wa0ZNU1VSZlVFRlNRVTFjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lHeHZZMkZzVTNSdmNtRm5aUzV5WlcxdmRtVkpkR1Z0S0d0bGVTbGNiaUFnSUNBZ0lITmxibVJsY2k1d1pYSm1iM0p0UTJGc2JHSmhZMnNvWTJGc2JHSmhZMnRKWkN3Z2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhRNklGTlZRME5GVTFNc1hHNGdJQ0FnSUNBZ0lHUmhkR0U2SUZWT1JFVkdTVTVGUkZ4dUlDQWdJQ0FnZlNsY2JpQWdJQ0I5WEc0Z0lDQWdZMkYwWTJnZ0tHVXBJSHRjYmlBZ0lDQWdJQzh2SUdGalkyVndkQ0JoYm5rZ1pYaGpaWEIwYVc5dUlIUm9jbTkzYmlCa2RYSnBibWNnWVNCemRHOXlZV2RsSUdGMGRHVnRjSFFnWVhNZ1lTQnhkVzkwWVNCbGNuSnZjbHh1SUNBZ0lDQWdZMkZzYkVaaGFXd29jMlZ1WkdWeUxDQmpZV3hzWW1GamEwbGtLVnh1SUNBZ0lIMWNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUJoYmlCcGJuUmxaMlZ5SUhKbGNISmxjMlZ1ZEdsdVp5QjBhR1VnYm5WdFltVnlJRzltSUdSaGRHRWdhWFJsYlhNZ2MzUnZjbVZrSUdsdUlIUm9aU0JUZEc5eVlXZGxJRzlpYW1WamRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ1kyRnNiR0poWTJ0SlpGeHVJQ0FnS2k5Y2JpQWdiR1Z1WjNSb09pQm1kVzVqZEdsdmJpQW9ZMkZzYkdKaFkydEpaQ2tnZTF4dUlDQWdJR052Ym5OMElITmxibVJsY2lBOUlIUm9hWE11YzJWdVpHVnlYRzRnSUNBZ2FXWWdLQ0Z6ZFhCd2IzSjBURzlqWVd4VGRHOXlZV2RsS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnWTJGc2JFNXZkRk4xY0hCdmNuUkdZV2xzS0hObGJtUmxjaXdnWTJGc2JHSmhZMnRKWkNsY2JpQWdJQ0I5WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUdOdmJuTjBJR3hsYmlBOUlHeHZZMkZzVTNSdmNtRm5aUzVzWlc1bmRHaGNiaUFnSUNBZ0lITmxibVJsY2k1d1pYSm1iM0p0UTJGc2JHSmhZMnNvWTJGc2JHSmhZMnRKWkN3Z2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhRNklGTlZRME5GVTFNc1hHNGdJQ0FnSUNBZ0lHUmhkR0U2SUd4bGJseHVJQ0FnSUNBZ2ZTbGNiaUFnSUNCOVhHNGdJQ0FnWTJGMFkyZ2dLR1VwSUh0Y2JpQWdJQ0FnSUM4dklHRmpZMlZ3ZENCaGJua2daWGhqWlhCMGFXOXVJSFJvY205M2JpQmtkWEpwYm1jZ1lTQnpkRzl5WVdkbElHRjBkR1Z0Y0hRZ1lYTWdZU0J4ZFc5MFlTQmxjbkp2Y2x4dUlDQWdJQ0FnWTJGc2JFWmhhV3dvYzJWdVpHVnlMQ0JqWVd4c1ltRmphMGxrS1Z4dUlDQWdJSDFjYmlBZ2ZTeGNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCaGJpQmhjbkpoZVNCMGFHRjBJR052Ym5SaGFXNXpJR0ZzYkNCclpYbHpJSE4wYjNKbFpDQnBiaUJUZEc5eVlXZGxJRzlpYW1WamRDNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0bWRXNWpkR2x2Ym4wZ1kyRnNiR0poWTJ0SlpGeHVJQ0FnS2k5Y2JpQWdaMlYwUVd4c1MyVjVjem9nWm5WdVkzUnBiMjRnS0dOaGJHeGlZV05yU1dRcElIdGNiaUFnSUNCamIyNXpkQ0J6Wlc1a1pYSWdQU0IwYUdsekxuTmxibVJsY2x4dUlDQWdJR2xtSUNnaGMzVndjRzl5ZEV4dlkyRnNVM1J2Y21GblpTa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTmhiR3hPYjNSVGRYQndiM0owUm1GcGJDaHpaVzVrWlhJc0lHTmhiR3hpWVdOclNXUXBYRzRnSUNBZ2ZWeHVJQ0FnSUhSeWVTQjdYRzRnSUNBZ0lDQmpiMjV6ZENCZllYSnlJRDBnVzExY2JpQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2JHOWpZV3hUZEc5eVlXZGxMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNBZ0lGOWhjbkl1Y0hWemFDaHNiMk5oYkZOMGIzSmhaMlV1YTJWNUtHa3BLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjMlZ1WkdWeUxuQmxjbVp2Y20xRFlXeHNZbUZqYXloallXeHNZbUZqYTBsa0xDQjdYRzRnSUNBZ0lDQWdJSEpsYzNWc2REb2dVMVZEUTBWVFV5eGNiaUFnSUNBZ0lDQWdaR0YwWVRvZ1gyRnljbHh1SUNBZ0lDQWdmU2xjYmlBZ0lDQjlYRzRnSUNBZ1kyRjBZMmdnS0dVcElIdGNiaUFnSUNBZ0lDOHZJR0ZqWTJWd2RDQmhibmtnWlhoalpYQjBhVzl1SUhSb2NtOTNiaUJrZFhKcGJtY2dZU0J6ZEc5eVlXZGxJR0YwZEdWdGNIUWdZWE1nWVNCeGRXOTBZU0JsY25KdmNseHVJQ0FnSUNBZ1kyRnNiRVpoYVd3b2MyVnVaR1Z5TENCallXeHNZbUZqYTBsa0tWeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNWpiMjV6ZENCdFpYUmhJRDBnZTF4dUlDQnpkRzl5WVdkbE9pQmJlMXh1SUNBZ0lHNWhiV1U2SUNkelpYUkpkR1Z0Snl4Y2JpQWdJQ0JoY21kek9pQmJKM04wY21sdVp5Y3NJQ2R6ZEhKcGJtY25MQ0FuWm5WdVkzUnBiMjRuWFZ4dUlDQjlMQ0I3WEc0Z0lDQWdibUZ0WlRvZ0oyZGxkRWwwWlcwbkxGeHVJQ0FnSUdGeVozTTZJRnNuYzNSeWFXNW5KeXdnSjJaMWJtTjBhVzl1SjExY2JpQWdmU3dnZTF4dUlDQWdJRzVoYldVNklDZHlaVzF2ZG1WSmRHVnRKeXhjYmlBZ0lDQmhjbWR6T2lCYkozTjBjbWx1Wnljc0lDZG1kVzVqZEdsdmJpZGRYRzRnSUgwc0lIdGNiaUFnSUNCdVlXMWxPaUFuYkdWdVozUm9KeXhjYmlBZ0lDQmhjbWR6T2lCYkoyWjFibU4wYVc5dUoxMWNiaUFnZlN3Z2UxeHVJQ0FnSUc1aGJXVTZJQ2RuWlhSQmJHeExaWGx6Snl4Y2JpQWdJQ0JoY21kek9pQmJKMloxYm1OMGFXOXVKMTFjYmlBZ2ZWMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQnBibWwwT2lCbWRXNWpkR2x2YmlBb1YyVmxlQ2tnZTF4dUlDQWdJRmRsWlhndWNtVm5hWE4wWlhKQmNHbE5iMlIxYkdVb0ozTjBiM0poWjJVbkxDQnpkRzl5WVdkbExDQnRaWFJoS1Z4dUlDQjlYRzU5WEc0aUxDSW9kSGx3Wlc5bUlIZHBibVJ2ZHlBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUNZbUlDaDNhVzVrYjNjZ1BTQjdZM1J5YkRvZ2UzMHNJR3hwWWpvZ2UzMTlLVHNoZDJsdVpHOTNMbU4wY213Z0ppWWdLSGRwYm1SdmR5NWpkSEpzSUQwZ2UzMHBPeUYzYVc1a2IzY3ViR2xpSUNZbUlDaDNhVzVrYjNjdWJHbGlJRDBnZTMwcE95Rm1kVzVqZEdsdmJpaGhMR0lwZTJaMWJtTjBhVzl1SUdNb1lTbDdkbUZ5SUdJOWUzMDdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNYQ0p3WVhKaGJYTmNJaXg3YzJWME9tWjFibU4wYVc5dUtHRXBlMmxtS0Z3aWIySnFaV04wWENJOVBYUjVjR1Z2WmlCaEtYdG1iM0lvZG1GeUlHTWdhVzRnWWlsa1pXeGxkR1VnWWx0alhUdG1iM0lvZG1GeUlHTWdhVzRnWVNsaVcyTmRQV0ZiWTExOWZTeG5aWFE2Wm5WdVkzUnBiMjRvS1h0eVpYUjFjbTRnWW4wc1pXNTFiV1Z5WVdKc1pUb2hNSDBwTEU5aWFtVmpkQzVrWldacGJtVlFjbTl3WlhKMGVTaDBhR2x6TEZ3aWMyVmhjbU5vWENJc2UzTmxkRHBtZFc1amRHbHZiaWhoS1h0cFppaGNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdZU2w3TUQwOVBXRXVhVzVrWlhoUFppaGNJajljSWlrbUppaGhQV0V1YzNWaWMzUnlLREVwS1R0MllYSWdZejFoTG5Od2JHbDBLRndpSmx3aUtUdG1iM0lvZG1GeUlHUWdhVzRnWWlsa1pXeGxkR1VnWWx0a1hUdG1iM0lvZG1GeUlHVTlNRHRsUEdNdWJHVnVaM1JvTzJVckt5bDdkbUZ5SUdZOVkxdGxYUzV6Y0d4cGRDaGNJajFjSWlrN2FXWW9kbTlwWkNBd0lUMDlabHN4WFNZbUtHWmJNVjA5WmxzeFhTNTBiMU4wY21sdVp5Z3BLU3htV3pCZEtYUnllWHRpVzJSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENobVd6QmRLVjA5WkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwS0daYk1WMHBmV05oZEdOb0tHY3BlMkpiWmxzd1hWMDlabHN4WFgxOWZYMHNaMlYwT21aMWJtTjBhVzl1S0NsN2RtRnlJR0U5VzEwN1ptOXlLSFpoY2lCaklHbHVJR0lwYVdZb2RtOXBaQ0F3SVQwOVlsdGpYU2xwWmloY0lsd2lJVDA5WWx0alhTbDBjbmw3WVM1d2RYTm9LR1Z1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2hqS1N0Y0lqMWNJaXRsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvWWx0alhTa3BmV05oZEdOb0tHUXBlMkV1Y0hWemFDaGpLMXdpUFZ3aUsySmJZMTBwZldWc2MyVWdkSEo1ZTJFdWNIVnphQ2hsYm1OdlpHVlZVa2xEYjIxd2IyNWxiblFvWXlrcGZXTmhkR05vS0dRcGUyRXVjSFZ6YUNoaktYMXlaWFIxY200Z1lTNXNaVzVuZEdnL1hDSS9YQ0lyWVM1cWIybHVLRndpSmx3aUtUcGNJbHdpZlN4bGJuVnRaWEpoWW14bE9pRXdmU2s3ZG1GeUlHTTdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNYQ0pvWVhOb1hDSXNlM05sZERwbWRXNWpkR2x2YmloaEtYdGNJbk4wY21sdVoxd2lQVDEwZVhCbGIyWWdZU1ltS0dFbUptRXVhVzVrWlhoUFppaGNJaU5jSWlrOE1DWW1LR0U5WENJalhDSXJZU2tzWXoxaGZIeGNJbHdpS1gwc1oyVjBPbVoxYm1OMGFXOXVLQ2w3Y21WMGRYSnVJR045TEdWdWRXMWxjbUZpYkdVNklUQjlLU3gwYUdsekxuTmxkRDFtZFc1amRHbHZiaWhoS1h0aFBXRjhmRndpWENJN2RtRnlJR0k3YVdZb0lTaGlQV0V1YldGMFkyZ29ibVYzSUZKbFowVjRjQ2hjSWw0b1cyRXRlakF0T1MxZEt6b3BQMXN2WFhzeWZTZy9PaWhiWGtBdk9qOWRLeWtvUHpvNktGdGVRQzg2WFNzcEtUOUFLVDhvVzE0Nkx6OGpYU3NwS0Q4Nld6cGRLRnN3TFRsZEt5a3BQeWhiTDExYlhqOGpPMTBxS1Q4b1B6cGJQMTBvVzE0alhTb3BLVDhvV3lOZFcxNC9YU29wUHlSY0lpeGNJbWxjSWlrcEtTbDBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hDSlhjbTl1WnlCMWNta2djMk5vWlcxbExsd2lLVHQwYUdsekxuQnliM1J2WTI5c1BXSmJNVjE4ZkNoY0ltOWlhbVZqZEZ3aVBUMTBlWEJsYjJZZ2JHOWpZWFJwYjI0L2JHOWpZWFJwYjI0dWNISnZkRzlqYjJ3NlhDSmNJaWtzZEdocGN5NTFjMlZ5Ym1GdFpUMWlXekpkZkh4Y0lsd2lMSFJvYVhNdWNHRnpjM2R2Y21ROVlsc3pYWHg4WENKY0lpeDBhR2x6TG1odmMzUnVZVzFsUFhSb2FYTXVhRzl6ZEQxaVd6UmRMSFJvYVhNdWNHOXlkRDFpV3pWZGZIeGNJbHdpTEhSb2FYTXVjR0YwYUc1aGJXVTlZbHMyWFh4OFhDSXZYQ0lzZEdocGN5NXpaV0Z5WTJnOVlsczNYWHg4WENKY0lpeDBhR2x6TG1oaGMyZzlZbHM0WFh4OFhDSmNJaXgwYUdsekxtOXlhV2RwYmoxMGFHbHpMbkJ5YjNSdlkyOXNLMXdpTHk5Y0lpdDBhR2x6TG1odmMzUnVZVzFsZlN4MGFHbHpMblJ2VTNSeWFXNW5QV1oxYm1OMGFXOXVLQ2w3ZG1GeUlHRTlkR2hwY3k1d2NtOTBiMk52YkN0Y0lpOHZYQ0k3Y21WMGRYSnVJSFJvYVhNdWRYTmxjbTVoYldVbUppaGhLejEwYUdsekxuVnpaWEp1WVcxbExIUm9hWE11Y0dGemMzZHZjbVFtSmloaEt6MWNJanBjSWl0MGFHbHpMbkJoYzNOM2IzSmtLU3hoS3oxY0lrQmNJaWtzWVNzOWRHaHBjeTVvYjNOMExIUm9hWE11Y0c5eWRDWW1YQ0k0TUZ3aUlUMDlkR2hwY3k1d2IzSjBKaVlvWVNzOVhDSTZYQ0lyZEdocGN5NXdiM0owS1N4MGFHbHpMbkJoZEdodVlXMWxKaVlvWVNzOWRHaHBjeTV3WVhSb2JtRnRaU2tzZEdocGN5NXpaV0Z5WTJnbUppaGhLejEwYUdsekxuTmxZWEpqYUNrc2RHaHBjeTVvWVhOb0ppWW9ZU3M5ZEdocGN5NW9ZWE5vS1N4aGZTeGhKaVowYUdsekxuTmxkQ2hoTG5SdlUzUnlhVzVuS0NrcGZXSXVhSFIwY0hWeWJEMW1kVzVqZEdsdmJpaGhLWHR5WlhSMWNtNGdibVYzSUdNb1lTbDlmU2gzYVc1a2IzY3NkMmx1Wkc5M0xteHBZbng4S0hkcGJtUnZkeTVzYVdJOWUzMHBLVHM3Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0IzYVc1a2IzY3ViR2xpV3lkb2RIUndkWEpzSjEwN0lpd2lKM1Z6WlNCemRISnBZM1FuTzF4dWJXOWtkV3hsTG1WNGNHOXlkSE1nUFNCbWRXNWpkR2x2YmlBb2MzUnlLU0I3WEc1Y2RISmxkSFZ5YmlCbGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5Rb2MzUnlLUzV5WlhCc1lXTmxLQzliSVNjb0tTcGRMMmNzSUdaMWJtTjBhVzl1SUNoaktTQjdYRzVjZEZ4MGNtVjBkWEp1SUNjbEp5QXJJR011WTJoaGNrTnZaR1ZCZENnd0tTNTBiMU4wY21sdVp5Z3hOaWt1ZEc5VmNIQmxja05oYzJVb0tUdGNibHgwZlNrN1hHNTlPMXh1SWl3aUx5cGNibTlpYW1WamRDMWhjM05wWjI1Y2JpaGpLU0JUYVc1a2NtVWdVMjl5YUhWelhHNUFiR2xqWlc1elpTQk5TVlJjYmlvdlhHNWNiaWQxYzJVZ2MzUnlhV04wSnp0Y2JpOHFJR1Z6YkdsdWRDMWthWE5oWW14bElHNXZMWFZ1ZFhObFpDMTJZWEp6SUNvdlhHNTJZWElnWjJWMFQzZHVVSEp2Y0dWeWRIbFRlVzFpYjJ4eklEMGdUMkpxWldOMExtZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjenRjYm5aaGNpQm9ZWE5QZDI1UWNtOXdaWEowZVNBOUlFOWlhbVZqZEM1d2NtOTBiM1I1Y0dVdWFHRnpUM2R1VUhKdmNHVnlkSGs3WEc1MllYSWdjSEp2Y0VselJXNTFiV1Z5WVdKc1pTQTlJRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVjSEp2Y0dWeWRIbEpjMFZ1ZFcxbGNtRmliR1U3WEc1Y2JtWjFibU4wYVc5dUlIUnZUMkpxWldOMEtIWmhiQ2tnZTF4dVhIUnBaaUFvZG1Gc0lEMDlQU0J1ZFd4c0lIeDhJSFpoYkNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc1Y2RGeDBkR2h5YjNjZ2JtVjNJRlI1Y0dWRmNuSnZjaWduVDJKcVpXTjBMbUZ6YzJsbmJpQmpZVzV1YjNRZ1ltVWdZMkZzYkdWa0lIZHBkR2dnYm5Wc2JDQnZjaUIxYm1SbFptbHVaV1FuS1R0Y2JseDBmVnh1WEc1Y2RISmxkSFZ5YmlCUFltcGxZM1FvZG1Gc0tUdGNibjFjYmx4dVpuVnVZM1JwYjI0Z2MyaHZkV3hrVlhObFRtRjBhWFpsS0NrZ2UxeHVYSFIwY25rZ2UxeHVYSFJjZEdsbUlDZ2hUMkpxWldOMExtRnpjMmxuYmlrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUdaaGJITmxPMXh1WEhSY2RIMWNibHh1WEhSY2RDOHZJRVJsZEdWamRDQmlkV2RuZVNCd2NtOXdaWEowZVNCbGJuVnRaWEpoZEdsdmJpQnZjbVJsY2lCcGJpQnZiR1JsY2lCV09DQjJaWEp6YVc5dWN5NWNibHh1WEhSY2RDOHZJR2gwZEhCek9pOHZZblZuY3k1amFISnZiV2wxYlM1dmNtY3ZjQzkyT0M5cGMzTjFaWE12WkdWMFlXbHNQMmxrUFRReE1UaGNibHgwWEhSMllYSWdkR1Z6ZERFZ1BTQnVaWGNnVTNSeWFXNW5LQ2RoWW1NbktUc2dJQzh2SUdWemJHbHVkQzFrYVhOaFlteGxMV3hwYm1VZ2JtOHRibVYzTFhkeVlYQndaWEp6WEc1Y2RGeDBkR1Z6ZERGYk5WMGdQU0FuWkdVbk8xeHVYSFJjZEdsbUlDaFBZbXBsWTNRdVoyVjBUM2R1VUhKdmNHVnlkSGxPWVcxbGN5aDBaWE4wTVNsYk1GMGdQVDA5SUNjMUp5a2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHWmhiSE5sTzF4dVhIUmNkSDFjYmx4dVhIUmNkQzh2SUdoMGRIQnpPaTh2WW5WbmN5NWphSEp2YldsMWJTNXZjbWN2Y0M5Mk9DOXBjM04xWlhNdlpHVjBZV2xzUDJsa1BUTXdOVFpjYmx4MFhIUjJZWElnZEdWemRESWdQU0I3ZlR0Y2JseDBYSFJtYjNJZ0tIWmhjaUJwSUQwZ01Ec2dhU0E4SURFd095QnBLeXNwSUh0Y2JseDBYSFJjZEhSbGMzUXlXeWRmSnlBcklGTjBjbWx1Wnk1bWNtOXRRMmhoY2tOdlpHVW9hU2xkSUQwZ2FUdGNibHgwWEhSOVhHNWNkRngwZG1GeUlHOXlaR1Z5TWlBOUlFOWlhbVZqZEM1blpYUlBkMjVRY205d1pYSjBlVTVoYldWektIUmxjM1F5S1M1dFlYQW9ablZ1WTNScGIyNGdLRzRwSUh0Y2JseDBYSFJjZEhKbGRIVnliaUIwWlhOME1sdHVYVHRjYmx4MFhIUjlLVHRjYmx4MFhIUnBaaUFvYjNKa1pYSXlMbXB2YVc0b0p5Y3BJQ0U5UFNBbk1ERXlNelExTmpjNE9TY3BJSHRjYmx4MFhIUmNkSEpsZEhWeWJpQm1ZV3h6WlR0Y2JseDBYSFI5WEc1Y2JseDBYSFF2THlCb2RIUndjem92TDJKMVozTXVZMmh5YjIxcGRXMHViM0puTDNBdmRqZ3ZhWE56ZFdWekwyUmxkR0ZwYkQ5cFpEMHpNRFUyWEc1Y2RGeDBkbUZ5SUhSbGMzUXpJRDBnZTMwN1hHNWNkRngwSjJGaVkyUmxabWRvYVdwcmJHMXViM0J4Y25OMEp5NXpjR3hwZENnbkp5a3VabTl5UldGamFDaG1kVzVqZEdsdmJpQW9iR1YwZEdWeUtTQjdYRzVjZEZ4MFhIUjBaWE4wTTF0c1pYUjBaWEpkSUQwZ2JHVjBkR1Z5TzF4dVhIUmNkSDBwTzF4dVhIUmNkR2xtSUNoUFltcGxZM1F1YTJWNWN5aFBZbXBsWTNRdVlYTnphV2R1S0h0OUxDQjBaWE4wTXlrcExtcHZhVzRvSnljcElDRTlQVnh1WEhSY2RGeDBYSFFuWVdKalpHVm1aMmhwYW10c2JXNXZjSEZ5YzNRbktTQjdYRzVjZEZ4MFhIUnlaWFIxY200Z1ptRnNjMlU3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlIUnlkV1U3WEc1Y2RIMGdZMkYwWTJnZ0tHVnljaWtnZTF4dVhIUmNkQzh2SUZkbElHUnZiaWQwSUdWNGNHVmpkQ0JoYm5rZ2IyWWdkR2hsSUdGaWIzWmxJSFJ2SUhSb2NtOTNMQ0JpZFhRZ1ltVjBkR1Z5SUhSdklHSmxJSE5oWm1VdVhHNWNkRngwY21WMGRYSnVJR1poYkhObE8xeHVYSFI5WEc1OVhHNWNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdjMmh2ZFd4a1ZYTmxUbUYwYVhabEtDa2dQeUJQWW1wbFkzUXVZWE56YVdkdUlEb2dablZ1WTNScGIyNGdLSFJoY21kbGRDd2djMjkxY21ObEtTQjdYRzVjZEhaaGNpQm1jbTl0TzF4dVhIUjJZWElnZEc4Z1BTQjBiMDlpYW1WamRDaDBZWEpuWlhRcE8xeHVYSFIyWVhJZ2MzbHRZbTlzY3p0Y2JseHVYSFJtYjNJZ0tIWmhjaUJ6SUQwZ01Uc2djeUE4SUdGeVozVnRaVzUwY3k1c1pXNW5kR2c3SUhNckt5a2dlMXh1WEhSY2RHWnliMjBnUFNCUFltcGxZM1FvWVhKbmRXMWxiblJ6VzNOZEtUdGNibHh1WEhSY2RHWnZjaUFvZG1GeUlHdGxlU0JwYmlCbWNtOXRLU0I3WEc1Y2RGeDBYSFJwWmlBb2FHRnpUM2R1VUhKdmNHVnlkSGt1WTJGc2JDaG1jbTl0TENCclpYa3BLU0I3WEc1Y2RGeDBYSFJjZEhSdlcydGxlVjBnUFNCbWNtOXRXMnRsZVYwN1hHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tHZGxkRTkzYmxCeWIzQmxjblI1VTNsdFltOXNjeWtnZTF4dVhIUmNkRngwYzNsdFltOXNjeUE5SUdkbGRFOTNibEJ5YjNCbGNuUjVVM2x0WW05c2N5aG1jbTl0S1R0Y2JseDBYSFJjZEdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2MzbHRZbTlzY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh1WEhSY2RGeDBYSFJwWmlBb2NISnZjRWx6Ulc1MWJXVnlZV0pzWlM1allXeHNLR1p5YjIwc0lITjViV0p2YkhOYmFWMHBLU0I3WEc1Y2RGeDBYSFJjZEZ4MGRHOWJjM2x0WW05c2MxdHBYVjBnUFNCbWNtOXRXM041YldKdmJITmJhVjFkTzF4dVhIUmNkRngwWEhSOVhHNWNkRngwWEhSOVhHNWNkRngwZlZ4dVhIUjlYRzVjYmx4MGNtVjBkWEp1SUhSdk8xeHVmVHRjYmlJc0lpZDFjMlVnYzNSeWFXTjBKenRjYm5aaGNpQnpkSEpwWTNSVmNtbEZibU52WkdVZ1BTQnlaWEYxYVhKbEtDZHpkSEpwWTNRdGRYSnBMV1Z1WTI5a1pTY3BPMXh1ZG1GeUlHOWlhbVZqZEVGemMybG5iaUE5SUhKbGNYVnBjbVVvSjI5aWFtVmpkQzFoYzNOcFoyNG5LVHRjYmx4dVpuVnVZM1JwYjI0Z1pXNWpiMlJsY2tadmNrRnljbUY1Um05eWJXRjBLRzl3ZEhNcElIdGNibHgwYzNkcGRHTm9JQ2h2Y0hSekxtRnljbUY1Um05eWJXRjBLU0I3WEc1Y2RGeDBZMkZ6WlNBbmFXNWtaWGduT2x4dVhIUmNkRngwY21WMGRYSnVJR1oxYm1OMGFXOXVJQ2hyWlhrc0lIWmhiSFZsTENCcGJtUmxlQ2tnZTF4dVhIUmNkRngwWEhSeVpYUjFjbTRnZG1Gc2RXVWdQVDA5SUc1MWJHd2dQeUJiWEc1Y2RGeDBYSFJjZEZ4MFpXNWpiMlJsS0d0bGVTd2diM0IwY3lrc1hHNWNkRngwWEhSY2RGeDBKMXNuTEZ4dVhIUmNkRngwWEhSY2RHbHVaR1Y0TEZ4dVhIUmNkRngwWEhSY2RDZGRKMXh1WEhSY2RGeDBYSFJkTG1wdmFXNG9KeWNwSURvZ1cxeHVYSFJjZEZ4MFhIUmNkR1Z1WTI5a1pTaHJaWGtzSUc5d2RITXBMRnh1WEhSY2RGeDBYSFJjZENkYkp5eGNibHgwWEhSY2RGeDBYSFJsYm1OdlpHVW9hVzVrWlhnc0lHOXdkSE1wTEZ4dVhIUmNkRngwWEhSY2RDZGRQU2NzWEc1Y2RGeDBYSFJjZEZ4MFpXNWpiMlJsS0haaGJIVmxMQ0J2Y0hSektWeHVYSFJjZEZ4MFhIUmRMbXB2YVc0b0p5Y3BPMXh1WEhSY2RGeDBmVHRjYmx4dVhIUmNkR05oYzJVZ0oySnlZV05yWlhRbk9seHVYSFJjZEZ4MGNtVjBkWEp1SUdaMWJtTjBhVzl1SUNoclpYa3NJSFpoYkhWbEtTQjdYRzVjZEZ4MFhIUmNkSEpsZEhWeWJpQjJZV3gxWlNBOVBUMGdiblZzYkNBL0lHVnVZMjlrWlNoclpYa3NJRzl3ZEhNcElEb2dXMXh1WEhSY2RGeDBYSFJjZEdWdVkyOWtaU2hyWlhrc0lHOXdkSE1wTEZ4dVhIUmNkRngwWEhSY2RDZGJYVDBuTEZ4dVhIUmNkRngwWEhSY2RHVnVZMjlrWlNoMllXeDFaU3dnYjNCMGN5bGNibHgwWEhSY2RGeDBYUzVxYjJsdUtDY25LVHRjYmx4MFhIUmNkSDA3WEc1Y2JseDBYSFJrWldaaGRXeDBPbHh1WEhSY2RGeDBjbVYwZFhKdUlHWjFibU4wYVc5dUlDaHJaWGtzSUhaaGJIVmxLU0I3WEc1Y2RGeDBYSFJjZEhKbGRIVnliaUIyWVd4MVpTQTlQVDBnYm5Wc2JDQS9JR1Z1WTI5a1pTaHJaWGtzSUc5d2RITXBJRG9nVzF4dVhIUmNkRngwWEhSY2RHVnVZMjlrWlNoclpYa3NJRzl3ZEhNcExGeHVYSFJjZEZ4MFhIUmNkQ2M5Snl4Y2JseDBYSFJjZEZ4MFhIUmxibU52WkdVb2RtRnNkV1VzSUc5d2RITXBYRzVjZEZ4MFhIUmNkRjB1YW05cGJpZ25KeWs3WEc1Y2RGeDBYSFI5TzF4dVhIUjlYRzU5WEc1Y2JtWjFibU4wYVc5dUlIQmhjbk5sY2tadmNrRnljbUY1Um05eWJXRjBLRzl3ZEhNcElIdGNibHgwZG1GeUlISmxjM1ZzZER0Y2JseHVYSFJ6ZDJsMFkyZ2dLRzl3ZEhNdVlYSnlZWGxHYjNKdFlYUXBJSHRjYmx4MFhIUmpZWE5sSUNkcGJtUmxlQ2M2WEc1Y2RGeDBYSFJ5WlhSMWNtNGdablZ1WTNScGIyNGdLR3RsZVN3Z2RtRnNkV1VzSUdGalkzVnRkV3hoZEc5eUtTQjdYRzVjZEZ4MFhIUmNkSEpsYzNWc2RDQTlJQzljWEZzb1hGeGtLaWxjWEYwa0x5NWxlR1ZqS0d0bGVTazdYRzVjYmx4MFhIUmNkRngwYTJWNUlEMGdhMlY1TG5KbGNHeGhZMlVvTDF4Y1cxeGNaQ3BjWEYwa0x5d2dKeWNwTzF4dVhHNWNkRngwWEhSY2RHbG1JQ2doY21WemRXeDBLU0I3WEc1Y2RGeDBYSFJjZEZ4MFlXTmpkVzExYkdGMGIzSmJhMlY1WFNBOUlIWmhiSFZsTzF4dVhIUmNkRngwWEhSY2RISmxkSFZ5Ymp0Y2JseDBYSFJjZEZ4MGZWeHVYRzVjZEZ4MFhIUmNkR2xtSUNoaFkyTjFiWFZzWVhSdmNsdHJaWGxkSUQwOVBTQjFibVJsWm1sdVpXUXBJSHRjYmx4MFhIUmNkRngwWEhSaFkyTjFiWFZzWVhSdmNsdHJaWGxkSUQwZ2UzMDdYRzVjZEZ4MFhIUmNkSDFjYmx4dVhIUmNkRngwWEhSaFkyTjFiWFZzWVhSdmNsdHJaWGxkVzNKbGMzVnNkRnN4WFYwZ1BTQjJZV3gxWlR0Y2JseDBYSFJjZEgwN1hHNWNibHgwWEhSallYTmxJQ2RpY21GamEyVjBKenBjYmx4MFhIUmNkSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9hMlY1TENCMllXeDFaU3dnWVdOamRXMTFiR0YwYjNJcElIdGNibHgwWEhSY2RGeDBjbVZ6ZFd4MElEMGdMeWhjWEZ0Y1hGMHBKQzh1WlhobFl5aHJaWGtwTzF4dVhIUmNkRngwWEhSclpYa2dQU0JyWlhrdWNtVndiR0ZqWlNndlhGeGJYRnhkSkM4c0lDY25LVHRjYmx4dVhIUmNkRngwWEhScFppQW9JWEpsYzNWc2RDa2dlMXh1WEhSY2RGeDBYSFJjZEdGalkzVnRkV3hoZEc5eVcydGxlVjBnUFNCMllXeDFaVHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBYSFJjZEgwZ1pXeHpaU0JwWmlBb1lXTmpkVzExYkdGMGIzSmJhMlY1WFNBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc1Y2RGeDBYSFJjZEZ4MFlXTmpkVzExYkdGMGIzSmJhMlY1WFNBOUlGdDJZV3gxWlYwN1hHNWNkRngwWEhSY2RGeDBjbVYwZFhKdU8xeHVYSFJjZEZ4MFhIUjlYRzVjYmx4MFhIUmNkRngwWVdOamRXMTFiR0YwYjNKYmEyVjVYU0E5SUZ0ZExtTnZibU5oZENoaFkyTjFiWFZzWVhSdmNsdHJaWGxkTENCMllXeDFaU2s3WEc1Y2RGeDBYSFI5TzF4dVhHNWNkRngwWkdWbVlYVnNkRHBjYmx4MFhIUmNkSEpsZEhWeWJpQm1kVzVqZEdsdmJpQW9hMlY1TENCMllXeDFaU3dnWVdOamRXMTFiR0YwYjNJcElIdGNibHgwWEhSY2RGeDBhV1lnS0dGalkzVnRkV3hoZEc5eVcydGxlVjBnUFQwOUlIVnVaR1ZtYVc1bFpDa2dlMXh1WEhSY2RGeDBYSFJjZEdGalkzVnRkV3hoZEc5eVcydGxlVjBnUFNCMllXeDFaVHRjYmx4MFhIUmNkRngwWEhSeVpYUjFjbTQ3WEc1Y2RGeDBYSFJjZEgxY2JseHVYSFJjZEZ4MFhIUmhZMk4xYlhWc1lYUnZjbHRyWlhsZElEMGdXMTB1WTI5dVkyRjBLR0ZqWTNWdGRXeGhkRzl5VzJ0bGVWMHNJSFpoYkhWbEtUdGNibHgwWEhSY2RIMDdYRzVjZEgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnWlc1amIyUmxLSFpoYkhWbExDQnZjSFJ6S1NCN1hHNWNkR2xtSUNodmNIUnpMbVZ1WTI5a1pTa2dlMXh1WEhSY2RISmxkSFZ5YmlCdmNIUnpMbk4wY21samRDQS9JSE4wY21samRGVnlhVVZ1WTI5a1pTaDJZV3gxWlNrZ09pQmxibU52WkdWVlVrbERiMjF3YjI1bGJuUW9kbUZzZFdVcE8xeHVYSFI5WEc1Y2JseDBjbVYwZFhKdUlIWmhiSFZsTzF4dWZWeHVYRzVtZFc1amRHbHZiaUJyWlhselUyOXlkR1Z5S0dsdWNIVjBLU0I3WEc1Y2RHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtHbHVjSFYwS1NrZ2UxeHVYSFJjZEhKbGRIVnliaUJwYm5CMWRDNXpiM0owS0NrN1hHNWNkSDBnWld4elpTQnBaaUFvZEhsd1pXOW1JR2x1Y0hWMElEMDlQU0FuYjJKcVpXTjBKeWtnZTF4dVhIUmNkSEpsZEhWeWJpQnJaWGx6VTI5eWRHVnlLRTlpYW1WamRDNXJaWGx6S0dsdWNIVjBLU2t1YzI5eWRDaG1kVzVqZEdsdmJpQW9ZU3dnWWlrZ2UxeHVYSFJjZEZ4MGNtVjBkWEp1SUU1MWJXSmxjaWhoS1NBdElFNTFiV0psY2loaUtUdGNibHgwWEhSOUtTNXRZWEFvWm5WdVkzUnBiMjRnS0d0bGVTa2dlMXh1WEhSY2RGeDBjbVYwZFhKdUlHbHVjSFYwVzJ0bGVWMDdYRzVjZEZ4MGZTazdYRzVjZEgxY2JseHVYSFJ5WlhSMWNtNGdhVzV3ZFhRN1hHNTlYRzVjYm1WNGNHOXlkSE11WlhoMGNtRmpkQ0E5SUdaMWJtTjBhVzl1SUNoemRISXBJSHRjYmx4MGNtVjBkWEp1SUhOMGNpNXpjR3hwZENnblB5Y3BXekZkSUh4OElDY25PMXh1ZlR0Y2JseHVaWGh3YjNKMGN5NXdZWEp6WlNBOUlHWjFibU4wYVc5dUlDaHpkSElzSUc5d2RITXBJSHRjYmx4MGIzQjBjeUE5SUc5aWFtVmpkRUZ6YzJsbmJpaDdZWEp5WVhsR2IzSnRZWFE2SUNkdWIyNWxKMzBzSUc5d2RITXBPMXh1WEc1Y2RIWmhjaUJtYjNKdFlYUjBaWElnUFNCd1lYSnpaWEpHYjNKQmNuSmhlVVp2Y20xaGRDaHZjSFJ6S1R0Y2JseHVYSFF2THlCRGNtVmhkR1VnWVc0Z2IySnFaV04wSUhkcGRHZ2dibThnY0hKdmRHOTBlWEJsWEc1Y2RDOHZJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzl6YVc1a2NtVnpiM0pvZFhNdmNYVmxjbmt0YzNSeWFXNW5MMmx6YzNWbGN5ODBOMXh1WEhSMllYSWdjbVYwSUQwZ1QySnFaV04wTG1OeVpXRjBaU2h1ZFd4c0tUdGNibHh1WEhScFppQW9kSGx3Wlc5bUlITjBjaUFoUFQwZ0ozTjBjbWx1WnljcElIdGNibHgwWEhSeVpYUjFjbTRnY21WME8xeHVYSFI5WEc1Y2JseDBjM1J5SUQwZ2MzUnlMblJ5YVcwb0tTNXlaWEJzWVdObEtDOWVLRnhjUDN3amZDWXBMeXdnSnljcE8xeHVYRzVjZEdsbUlDZ2hjM1J5S1NCN1hHNWNkRngwY21WMGRYSnVJSEpsZER0Y2JseDBmVnh1WEc1Y2RITjBjaTV6Y0d4cGRDZ25KaWNwTG1admNrVmhZMmdvWm5WdVkzUnBiMjRnS0hCaGNtRnRLU0I3WEc1Y2RGeDBkbUZ5SUhCaGNuUnpJRDBnY0dGeVlXMHVjbVZ3YkdGalpTZ3ZYRndyTDJjc0lDY2dKeWt1YzNCc2FYUW9KejBuS1R0Y2JseDBYSFF2THlCR2FYSmxabTk0SUNod2NtVWdOREFwSUdSbFkyOWtaWE1nWUNVelJHQWdkRzhnWUQxZ1hHNWNkRngwTHk4Z2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwzTnBibVJ5WlhOdmNtaDFjeTl4ZFdWeWVTMXpkSEpwYm1jdmNIVnNiQzh6TjF4dVhIUmNkSFpoY2lCclpYa2dQU0J3WVhKMGN5NXphR2xtZENncE8xeHVYSFJjZEhaaGNpQjJZV3dnUFNCd1lYSjBjeTVzWlc1bmRHZ2dQaUF3SUQ4Z2NHRnlkSE11YW05cGJpZ25QU2NwSURvZ2RXNWtaV1pwYm1Wa08xeHVYRzVjZEZ4MEx5OGdiV2x6YzJsdVp5QmdQV0FnYzJodmRXeGtJR0psSUdCdWRXeHNZRHBjYmx4MFhIUXZMeUJvZEhSd09pOHZkek11YjNKbkwxUlNMekl3TVRJdlYwUXRkWEpzTFRJd01USXdOVEkwTHlOamIyeHNaV04wTFhWeWJDMXdZWEpoYldWMFpYSnpYRzVjZEZ4MGRtRnNJRDBnZG1Gc0lEMDlQU0IxYm1SbFptbHVaV1FnUHlCdWRXeHNJRG9nWkdWamIyUmxWVkpKUTI5dGNHOXVaVzUwS0haaGJDazdYRzVjYmx4MFhIUm1iM0p0WVhSMFpYSW9aR1ZqYjJSbFZWSkpRMjl0Y0c5dVpXNTBLR3RsZVNrc0lIWmhiQ3dnY21WMEtUdGNibHgwZlNrN1hHNWNibHgwY21WMGRYSnVJRTlpYW1WamRDNXJaWGx6S0hKbGRDa3VjMjl5ZENncExuSmxaSFZqWlNobWRXNWpkR2x2YmlBb2NtVnpkV3gwTENCclpYa3BJSHRjYmx4MFhIUjJZWElnZG1Gc0lEMGdjbVYwVzJ0bGVWMDdYRzVjZEZ4MGFXWWdLRUp2YjJ4bFlXNG9kbUZzS1NBbUppQjBlWEJsYjJZZ2RtRnNJRDA5UFNBbmIySnFaV04wSnlBbUppQWhRWEp5WVhrdWFYTkJjbkpoZVNoMllXd3BLU0I3WEc1Y2RGeDBYSFF2THlCVGIzSjBJRzlpYW1WamRDQnJaWGx6TENCdWIzUWdkbUZzZFdWelhHNWNkRngwWEhSeVpYTjFiSFJiYTJWNVhTQTlJR3RsZVhOVGIzSjBaWElvZG1Gc0tUdGNibHgwWEhSOUlHVnNjMlVnZTF4dVhIUmNkRngwY21WemRXeDBXMnRsZVYwZ1BTQjJZV3c3WEc1Y2RGeDBmVnh1WEc1Y2RGeDBjbVYwZFhKdUlISmxjM1ZzZER0Y2JseDBmU3dnVDJKcVpXTjBMbU55WldGMFpTaHVkV3hzS1NrN1hHNTlPMXh1WEc1bGVIQnZjblJ6TG5OMGNtbHVaMmxtZVNBOUlHWjFibU4wYVc5dUlDaHZZbW9zSUc5d2RITXBJSHRjYmx4MGRtRnlJR1JsWm1GMWJIUnpJRDBnZTF4dVhIUmNkR1Z1WTI5a1pUb2dkSEoxWlN4Y2JseDBYSFJ6ZEhKcFkzUTZJSFJ5ZFdVc1hHNWNkRngwWVhKeVlYbEdiM0p0WVhRNklDZHViMjVsSjF4dVhIUjlPMXh1WEc1Y2RHOXdkSE1nUFNCdlltcGxZM1JCYzNOcFoyNG9aR1ZtWVhWc2RITXNJRzl3ZEhNcE8xeHVYRzVjZEhaaGNpQm1iM0p0WVhSMFpYSWdQU0JsYm1OdlpHVnlSbTl5UVhKeVlYbEdiM0p0WVhRb2IzQjBjeWs3WEc1Y2JseDBjbVYwZFhKdUlHOWlhaUEvSUU5aWFtVmpkQzVyWlhsektHOWlhaWt1YzI5eWRDZ3BMbTFoY0NobWRXNWpkR2x2YmlBb2EyVjVLU0I3WEc1Y2RGeDBkbUZ5SUhaaGJDQTlJRzlpYWx0clpYbGRPMXh1WEc1Y2RGeDBhV1lnS0haaGJDQTlQVDBnZFc1a1pXWnBibVZrS1NCN1hHNWNkRngwWEhSeVpYUjFjbTRnSnljN1hHNWNkRngwZlZ4dVhHNWNkRngwYVdZZ0tIWmhiQ0E5UFQwZ2JuVnNiQ2tnZTF4dVhIUmNkRngwY21WMGRYSnVJR1Z1WTI5a1pTaHJaWGtzSUc5d2RITXBPMXh1WEhSY2RIMWNibHh1WEhSY2RHbG1JQ2hCY25KaGVTNXBjMEZ5Y21GNUtIWmhiQ2twSUh0Y2JseDBYSFJjZEhaaGNpQnlaWE4xYkhRZ1BTQmJYVHRjYmx4dVhIUmNkRngwZG1Gc0xuTnNhV05sS0NrdVptOXlSV0ZqYUNobWRXNWpkR2x2YmlBb2RtRnNNaWtnZTF4dVhIUmNkRngwWEhScFppQW9kbUZzTWlBOVBUMGdkVzVrWldacGJtVmtLU0I3WEc1Y2RGeDBYSFJjZEZ4MGNtVjBkWEp1TzF4dVhIUmNkRngwWEhSOVhHNWNibHgwWEhSY2RGeDBjbVZ6ZFd4MExuQjFjMmdvWm05eWJXRjBkR1Z5S0d0bGVTd2dkbUZzTWl3Z2NtVnpkV3gwTG14bGJtZDBhQ2twTzF4dVhIUmNkRngwZlNrN1hHNWNibHgwWEhSY2RISmxkSFZ5YmlCeVpYTjFiSFF1YW05cGJpZ25KaWNwTzF4dVhIUmNkSDFjYmx4dVhIUmNkSEpsZEhWeWJpQmxibU52WkdVb2EyVjVMQ0J2Y0hSektTQXJJQ2M5SnlBcklHVnVZMjlrWlNoMllXd3NJRzl3ZEhNcE8xeHVYSFI5S1M1bWFXeDBaWElvWm5WdVkzUnBiMjRnS0hncElIdGNibHgwWEhSeVpYUjFjbTRnZUM1c1pXNW5kR2dnUGlBd08xeHVYSFI5S1M1cWIybHVLQ2NtSnlrZ09pQW5KenRjYm4wN1hHNGlMQ0l2S2x4dUlDb2dUR2xqWlc1elpXUWdkRzhnZEdobElFRndZV05vWlNCVGIyWjBkMkZ5WlNCR2IzVnVaR0YwYVc5dUlDaEJVMFlwSUhWdVpHVnlJRzl1WlZ4dUlDb2diM0lnYlc5eVpTQmpiMjUwY21saWRYUnZjaUJzYVdObGJuTmxJR0ZuY21WbGJXVnVkSE11SUNCVFpXVWdkR2hsSUU1UFZFbERSU0JtYVd4bFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCM2FYUm9JSFJvYVhNZ2QyOXlheUJtYjNJZ1lXUmthWFJwYjI1aGJDQnBibVp2Y20xaGRHbHZibHh1SUNvZ2NtVm5ZWEprYVc1bklHTnZjSGx5YVdkb2RDQnZkMjVsY25Ob2FYQXVJQ0JVYUdVZ1FWTkdJR3hwWTJWdWMyVnpJSFJvYVhNZ1ptbHNaVnh1SUNvZ2RHOGdlVzkxSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aVnh1SUNvZ1hDSk1hV05sYm5ObFhDSXBPeUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sWEc0Z0tpQjNhWFJvSUhSb1pTQk1hV05sYm5ObExpQWdXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc1hHNGdLaUJ6YjJaMGQyRnlaU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJseHVJQ29nWENKQlV5QkpVMXdpSUVKQlUwbFRMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxsY2JpQXFJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdUlDQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlZ4dUlDb2djM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpDQnNhVzFwZEdGMGFXOXVjMXh1SUNvZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYmk4cUlHZHNiMkpoYkNCc2FXSXNJRmhOVEVoMGRIQlNaWEYxWlhOMElDb3ZYRzR2S2lCa1pYQnpPaUJvZEhSd2RYSnNJQ292WEc1Y2JpZDFjMlVnYzNSeWFXTjBKMXh1WEc1c1pYUWdkWFJwYkhOY2JseHVhVzF3YjNKMElDZG9kSFJ3ZFhKc0oxeHVhVzF3YjNKMElIRnpJR1p5YjIwZ0ozRjFaWEo1TFhOMGNtbHVaeWRjYmx4dWJHVjBJR3B6YjI1d1EyNTBJRDBnTUZ4dVkyOXVjM1FnUlZKU1QxSmZVMVJCVkVVZ1BTQXRNVnh1WEc1bWRXNWpkR2x2YmlCZmFuTnZibkFnS0dOdmJtWnBaeXdnWTJGc2JHSmhZMnNzSUhCeWIyZHlaWE56UTJGc2JHSmhZMnNwSUh0Y2JpQWdZMjl1YzNRZ1kySk9ZVzFsSUQwZ0oycHpiMjV3WHljZ0t5QW9LeXRxYzI5dWNFTnVkQ2xjYmlBZ2JHVjBJSFZ5YkZ4dVhHNGdJR2xtSUNnaFkyOXVabWxuTG5WeWJDa2dlMXh1SUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjF0b05TMXlaVzVrWlhKZElHTnZibVpwWnk1MWNtd2djMmh2ZFd4a0lHSmxJSE5sZENCcGJpQmZhbk52Ym5BZ1ptOXlJRnhjSjJabGRHTm9YRnduSUVGUVNTNG5LVnh1SUNCOVhHNWNiaUFnWjJ4dlltRnNXMk5pVG1GdFpWMGdQU0FvWm5WdVkzUnBiMjRnS0dOaUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNoeVpYTndiMjV6WlNrZ2UxeHVJQ0FnSUNBZ1kyRnNiR0poWTJzb2UxeHVJQ0FnSUNBZ0lDQnpkR0YwZFhNNklESXdNQ3hjYmlBZ0lDQWdJQ0FnYjJzNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUhOMFlYUjFjMVJsZUhRNklDZFBTeWNzWEc0Z0lDQWdJQ0FnSUdSaGRHRTZJSEpsYzNCdmJuTmxYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdaR1ZzWlhSbElHZHNiMkpoYkZ0allsMWNiaUFnSUNCOVhHNGdJSDBwS0dOaVRtRnRaU2xjYmx4dUlDQmpiMjV6ZENCelkzSnBjSFFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2R6WTNKcGNIUW5LVnh1SUNCMGNua2dlMXh1SUNBZ0lIVnliQ0E5SUd4cFlpNW9kSFJ3ZFhKc0tHTnZibVpwWnk1MWNtd3BYRzRnSUgxY2JpQWdZMkYwWTJnZ0tHVnljaWtnZTF4dUlDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0oxdG9OUzF5Wlc1a1pYSmRJR2x1ZG1Gc2FXUWdZMjl1Wm1sbkxuVnliQ0JwYmlCZmFuTnZibkFnWm05eUlGeGNKMlpsZEdOb1hGd25JRUZRU1RvZ0oxeHVJQ0FnSUNBZ0t5QmpiMjVtYVdjdWRYSnNLVnh1SUNCOVhHNGdJSFZ5YkM1d1lYSmhiWE11WTJGc2JHSmhZMnNnUFNCallrNWhiV1ZjYmlBZ2MyTnlhWEIwTG5SNWNHVWdQU0FuZEdWNGRDOXFZWFpoYzJOeWFYQjBKMXh1SUNCelkzSnBjSFF1YzNKaklEMGdkWEpzTG5SdlUzUnlhVzVuS0NsY2JpQWdMeThnYzJOeWFYQjBMbTl1WlhKeWIzSWdhWE1nYm05MElIZHZjbXRwYm1jZ2IyNGdTVVVnYjNJZ2MyRm1ZWEpwTGx4dUlDQXZMeUJpZFhRZ2RHaGxlU0JoY21VZ2JtOTBJR052Ym5OcFpHVnlaV1FnYUdWeVpTNWNiaUFnYzJOeWFYQjBMbTl1WlhKeWIzSWdQU0FvWm5WdVkzUnBiMjRnS0dOaUtTQjdYRzRnSUNBZ2NtVjBkWEp1SUdaMWJtTjBhVzl1SUNobGNuSXBJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVaWEp5YjNJb0oxdG9OUzF5Wlc1a1pYSmRJSFZ1Wlhod1pXTjBaV1FnWlhKeWIzSWdhVzRnWDJwemIyNXdJR1p2Y2lCY1hDZG1aWFJqYUZ4Y0p5QkJVRWtuTENCbGNuSXBYRzRnSUNBZ0lDQmpZV3hzWW1GamF5aDdYRzRnSUNBZ0lDQWdJSE4wWVhSMWN6b2dSVkpTVDFKZlUxUkJWRVVzWEc0Z0lDQWdJQ0FnSUc5ck9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ2MzUmhkSFZ6VkdWNGREb2dKeWNzWEc0Z0lDQWdJQ0FnSUdSaGRHRTZJQ2NuWEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJQ0FnWkdWc1pYUmxJR2RzYjJKaGJGdGpZbDFjYmlBZ0lDQjlYRzRnSUgwcEtHTmlUbUZ0WlNsY2JpQWdZMjl1YzNRZ2FHVmhaQ0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtDZG9aV0ZrSnlsYk1GMWNiaUFnYUdWaFpDNXBibk5sY25SQ1pXWnZjbVVvYzJOeWFYQjBMQ0J1ZFd4c0tWeHVmVnh1WEc1bWRXNWpkR2x2YmlCZmVHaHlJQ2hqYjI1bWFXY3NJR05oYkd4aVlXTnJMQ0J3Y205bmNtVnpjME5oYkd4aVlXTnJLU0I3WEc0Z0lHTnZibk4wSUhob2NpQTlJRzVsZHlCWVRVeElkSFJ3VW1WeGRXVnpkQ2dwWEc0Z0lIaG9jaTV5WlhOd2IyNXpaVlI1Y0dVZ1BTQmpiMjVtYVdjdWRIbHdaVnh1SUNCNGFISXViM0JsYmloamIyNW1hV2N1YldWMGFHOWtMQ0JqYjI1bWFXY3VkWEpzTENCMGNuVmxLVnh1WEc0Z0lDOHZJR052Y25NZ1kyOXZhMmxsSUhOMWNIQnZjblJjYmlBZ2FXWWdLR052Ym1acFp5NTNhWFJvUTNKbFpHVnVkR2xoYkhNZ1BUMDlJSFJ5ZFdVcElIdGNiaUFnSUNCNGFISXVkMmwwYUVOeVpXUmxiblJwWVd4eklEMGdkSEoxWlZ4dUlDQjlYRzVjYmlBZ1kyOXVjM1FnYUdWaFpHVnljeUE5SUdOdmJtWnBaeTVvWldGa1pYSnpJSHg4SUh0OVhHNGdJR1p2Y2lBb1kyOXVjM1FnYXlCcGJpQm9aV0ZrWlhKektTQjdYRzRnSUNBZ2VHaHlMbk5sZEZKbGNYVmxjM1JJWldGa1pYSW9heXdnYUdWaFpHVnljMXRyWFNsY2JpQWdmVnh1WEc0Z0lIaG9jaTV2Ym14dllXUWdQU0JtZFc1amRHbHZiaUFvY21WektTQjdYRzRnSUNBZ1kyRnNiR0poWTJzb2UxeHVJQ0FnSUNBZ2MzUmhkSFZ6T2lCNGFISXVjM1JoZEhWekxGeHVJQ0FnSUNBZ2IyczZJSGhvY2k1emRHRjBkWE1nUGowZ01qQXdJQ1ltSUhob2NpNXpkR0YwZFhNZ1BDQXpNREFzWEc0Z0lDQWdJQ0J6ZEdGMGRYTlVaWGgwT2lCNGFISXVjM1JoZEhWelZHVjRkQ3hjYmlBZ0lDQWdJR1JoZEdFNklIaG9jaTV5WlhOd2IyNXpaU3hjYmlBZ0lDQWdJR2hsWVdSbGNuTTZJSGhvY2k1blpYUkJiR3hTWlhOd2IyNXpaVWhsWVdSbGNuTW9LUzV6Y0d4cGRDZ25YRnh1SnlsY2JpQWdJQ0FnSUNBZ0xuSmxaSFZqWlNobWRXNWpkR2x2YmlBb2IySnFMQ0JvWldGa1pYSlRkSElwSUh0Y2JpQWdJQ0FnSUNBZ0lDQmpiMjV6ZENCb1pXRmtaWEpCY25JZ1BTQm9aV0ZrWlhKVGRISXViV0YwWTJnb0x5Z3VLeWs2SUNndUt5a3ZLVnh1SUNBZ0lDQWdJQ0FnSUdsbUlDaG9aV0ZrWlhKQmNuSXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHOWlhbHRvWldGa1pYSkJjbkpiTVYxZElEMGdhR1ZoWkdWeVFYSnlXekpkWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQnZZbXBjYmlBZ0lDQWdJQ0FnZlN3Z2UzMHBYRzRnSUNBZ2ZTbGNiaUFnZlZ4dVhHNGdJR2xtSUNod2NtOW5jbVZ6YzBOaGJHeGlZV05yS1NCN1hHNGdJQ0FnZUdoeUxtOXVjSEp2WjNKbGMzTWdQU0JtZFc1amRHbHZiaUFvWlNrZ2UxeHVJQ0FnSUNBZ2NISnZaM0psYzNORFlXeHNZbUZqYXloN1hHNGdJQ0FnSUNBZ0lISmxZV1I1VTNSaGRHVTZJSGhvY2k1eVpXRmtlVk4wWVhSbExGeHVJQ0FnSUNBZ0lDQnpkR0YwZFhNNklIaG9jaTV6ZEdGMGRYTXNYRzRnSUNBZ0lDQWdJR3hsYm1kMGFEb2daUzVzYjJGa1pXUXNYRzRnSUNBZ0lDQWdJSFJ2ZEdGc09pQmxMblJ2ZEdGc0xGeHVJQ0FnSUNBZ0lDQnpkR0YwZFhOVVpYaDBPaUI0YUhJdWMzUmhkSFZ6VkdWNGRDeGNiaUFnSUNBZ0lDQWdhR1ZoWkdWeWN6b2dlR2h5TG1kbGRFRnNiRkpsYzNCdmJuTmxTR1ZoWkdWeWN5Z3BMbk53YkdsMEtDZGNYRzRuS1Z4dUlDQWdJQ0FnSUNBZ0lDNXlaV1IxWTJVb1puVnVZM1JwYjI0Z0tHOWlhaXdnYUdWaFpHVnlVM1J5S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1emRDQm9aV0ZrWlhKQmNuSWdQU0JvWldGa1pYSlRkSEl1YldGMFkyZ29MeWd1S3lrNklDZ3VLeWt2S1Z4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dobFlXUmxja0Z5Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCdlltcGJhR1ZoWkdWeVFYSnlXekZkWFNBOUlHaGxZV1JsY2tGeWNsc3lYVnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJRzlpYWx4dUlDQWdJQ0FnSUNBZ0lIMHNJSHQ5S1Z4dUlDQWdJQ0FnZlNsY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCNGFISXViMjVsY25KdmNpQTlJR1oxYm1OMGFXOXVJQ2hsY25JcElIdGNiaUFnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RiYURVdGNtVnVaR1Z5WFNCMWJtVjRjR1ZqZEdWa0lHVnljbTl5SUdsdUlGOTRhSElnWm05eUlGeGNKMlpsZEdOb1hGd25JRUZRU1Njc0lHVnljaWxjYmlBZ0lDQmpZV3hzWW1GamF5aDdYRzRnSUNBZ0lDQnpkR0YwZFhNNklFVlNVazlTWDFOVVFWUkZMRnh1SUNBZ0lDQWdiMnM2SUdaaGJITmxMRnh1SUNBZ0lDQWdjM1JoZEhWelZHVjRkRG9nSnljc1hHNGdJQ0FnSUNCa1lYUmhPaUFuSjF4dUlDQWdJSDBwWEc0Z0lIMWNibHh1SUNCNGFISXVjMlZ1WkNoamIyNW1hV2N1WW05a2VTQjhmQ0J1ZFd4c0tWeHVmVnh1WEc1amIyNXpkQ0J6ZEhKbFlXMGdQU0I3WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJSE5sYm1SSWRIUndYRzRnSUNBcUlFQmtaWEJ5WldOaGRHVmtYRzRnSUNBcUlFNXZkR1U2SUZSb2FYTWdRVkJKSUdseklHUmxjSEpsWTJGMFpXUXVJRkJzWldGelpTQjFjMlVnYzNSeVpXRnRMbVpsZEdOb0lHbHVjM1JsWVdRdVhHNGdJQ0FxSUhObGJtUWdZU0JvZEhSd0lISmxjWFZsYzNRZ2RHaHliM1ZuYUNCWVNGSXVYRzRnSUNBcUlFQndZWEpoYlNBZ2UyOWlhbjBnY0dGeVlXMXpYRzRnSUNBcUlDQXRJRzFsZEdodlpEb2dKMGRGVkNjZ2ZDQW5VRTlUVkNjZ2ZDQW5VRlZVSnlCOElDZEVSVXhGVkVVbklId2dKMGhGUVVRbklId2dKMUJCVkVOSUp5eGNiaUFnSUNvZ0lDMGdkWEpzT2lCMWNtd2djbVZ4ZFdWemRHVmtYRzRnSUNBcUlFQndZWEpoYlNBZ2UzTjBjbWx1WjMwZ1kyRnNiR0poWTJ0SlpGeHVJQ0FnS2k5Y2JpQWdjMlZ1WkVoMGRIQTZJR1oxYm1OMGFXOXVJQ2h3WVhKaGJTd2dZMkZzYkdKaFkydEpaQ2tnZTF4dUlDQWdJR2xtSUNoMGVYQmxiMllnY0dGeVlXMGdQVDA5SUNkemRISnBibWNuS1NCN1hHNGdJQ0FnSUNCMGNua2dlMXh1SUNBZ0lDQWdJQ0J3WVhKaGJTQTlJRXBUVDA0dWNHRnljMlVvY0dGeVlXMHBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQmpZWFJqYUNBb1pTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCd1lYSmhiU0FoUFQwZ0oyOWlhbVZqZENjZ2ZId2dJWEJoY21GdExuVnliQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVaWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDZGJhRFV0Y21WdVpHVnlYU0JwYm5aaGJHbGtJR052Ym1acFp5QnZjaUJwYm5aaGJHbGtJR052Ym1acFp5NTFjbXdnWm05eUlITmxibVJJZEhSd0lFRlFTU2NwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdZMjl1YzNRZ2MyVnVaR1Z5SUQwZ2RHaHBjeTV6Wlc1a1pYSmNiaUFnSUNCamIyNXpkQ0J0WlhSb2IyUWdQU0J3WVhKaGJTNXRaWFJvYjJRZ2ZId2dKMGRGVkNkY2JpQWdJQ0JqYjI1emRDQjRhSElnUFNCdVpYY2dXRTFNU0hSMGNGSmxjWFZsYzNRb0tWeHVJQ0FnSUhob2NpNXZjR1Z1S0cxbGRHaHZaQ3dnY0dGeVlXMHVkWEpzTENCMGNuVmxLVnh1SUNBZ0lIaG9jaTV2Ym14dllXUWdQU0JtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnSUNCelpXNWtaWEl1Y0dWeVptOXliVU5oYkd4aVlXTnJLR05oYkd4aVlXTnJTV1FzSUhSb2FYTXVjbVZ6Y0c5dWMyVlVaWGgwS1Z4dUlDQWdJSDFjYmlBZ0lDQjRhSEl1YjI1bGNuSnZjaUE5SUdaMWJtTjBhVzl1SUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJR052Ym5OdmJHVXVaWEp5YjNJb0oxdG9OUzF5Wlc1a1pYSmRJSFZ1Wlhod1pXTjBaV1FnWlhKeWIzSWdhVzRnYzJWdVpFaDBkSEFnUVZCSkp5d2daWEp5YjNJcFhHNGdJQ0FnSUNBdkx5QnpaVzVrWlhJdWNHVnlabTl5YlVOaGJHeGlZV05yS0Z4dUlDQWdJQ0FnTHk4Z0lDQmpZV3hzWW1GamEwbGtMRnh1SUNBZ0lDQWdMeThnSUNCdVpYY2dSWEp5YjNJb0ozVnVaWGh3WldOMFpXUWdaWEp5YjNJZ2FXNGdjMlZ1WkVoMGRIQWdRVkJKSnlsY2JpQWdJQ0FnSUM4dklDbGNiaUFnSUNCOVhHNGdJQ0FnZUdoeUxuTmxibVFvS1Z4dUlDQjlMRnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQm1aWFJqYUZ4dUlDQWdLaUIxYzJVZ2MzUnlaV0Z0TG1abGRHTm9JSFJ2SUhKbGNYVmxjM1FnWm05eUlHRWdhbk52YmlCbWFXeGxMQ0JoSUhCc1lXbHVJSFJsZUhRZ1ptbHNaU0J2Y2x4dUlDQWdLaUJoSUdGeWNtRjVZblZtWm1WeUlHWnZjaUJoSUdacGJHVWdjM1J5WldGdExpQW9XVzkxSUdOaGJpQjFjMlVnUW14dllpQmhibVFnUm1sc1pWSmxZV1JsY2x4dUlDQWdLaUJCVUVrZ2FXMXdiR1Z0Wlc1MFpXUWdZbmtnYlc5emRDQnRiMlJsY200Z1luSnZkM05sY25NZ2RHOGdjbVZoWkNCaElHRnljbUY1WW5WbVptVnlMaWxjYmlBZ0lDb2dRSEJoY21GdElDQjdiMkpxWldOMGZTQnZjSFJwYjI1eklHTnZibVpwWnlCdmNIUnBiMjV6WEc0Z0lDQXFJQ0FnTFNCdFpYUm9iMlE2SUNkSFJWUW5JSHdnSjFCUFUxUW5JSHdnSjFCVlZDY2dmQ0FuUkVWTVJWUkZKeUI4SUNkSVJVRkVKeUI4SUNkUVFWUkRTQ2RjYmlBZ0lDb2dJQ0F0SUdobFlXUmxjbk1nZTI5aWFuMWNiaUFnSUNvZ0lDQXRJSFZ5YkNCN2MzUnlhVzVuZlZ4dUlDQWdLaUFnSUMwZ2JXOWtaU0I3YzNSeWFXNW5mU0FuWTI5eWN5Y2dmQ0FuYm04dFkyOXljeWNnZkNBbmMyRnRaUzF2Y21sbmFXNG5JSHdnSjI1aGRtbG5ZWFJsSjF4dUlDQWdLaUFnSUMwZ2QybDBhRU55WldSbGJuUnBZV3h6SUh0aWIyOXNaV0Z1ZlZ4dUlDQWdLaUFnSUMwZ1ltOWtlVnh1SUNBZ0tpQWdJQzBnZEhsd1pTQjdjM1J5YVc1bmZTQW5hbk52YmljZ2ZDQW5hbk52Ym5BbklId2dKM1JsZUhRblhHNGdJQ0FxSUVCd1lYSmhiU0FnZTNOMGNtbHVaMzBnWTJGc2JHSmhZMnRKWkZ4dUlDQWdLaUJBY0dGeVlXMGdJSHR6ZEhKcGJtZDlJSEJ5YjJkeVpYTnpRMkZzYkdKaFkydEpaRnh1SUNBZ0tpOWNiaUFnWm1WMFkyZzZJR1oxYm1OMGFXOXVJQ2h2Y0hScGIyNXpMQ0JqWVd4c1ltRmphMGxrTENCd2NtOW5jbVZ6YzBOaGJHeGlZV05yU1dRcElIdGNiaUFnSUNCamIyNXpkQ0JFUlVaQlZVeFVYMDFGVkVoUFJDQTlJQ2RIUlZRblhHNGdJQ0FnWTI5dWMzUWdSRVZHUVZWTVZGOU5UMFJGSUQwZ0oyTnZjbk1uWEc0Z0lDQWdZMjl1YzNRZ1JFVkdRVlZNVkY5VVdWQkZJRDBnSjNSbGVIUW5YRzVjYmlBZ0lDQmpiMjV6ZENCdFpYUm9iMlJQY0hScGIyNXpJRDBnV3lkSFJWUW5MQ0FuVUU5VFZDY3NJQ2RRVlZRbkxDQW5SRVZNUlZSRkp5d2dKMGhGUVVRbkxDQW5VRUZVUTBnblhWeHVJQ0FnSUdOdmJuTjBJRzF2WkdWUGNIUnBiMjV6SUQwZ1d5ZGpiM0p6Snl3Z0oyNXZMV052Y25NbkxDQW5jMkZ0WlMxdmNtbG5hVzRuTENBbmJtRjJhV2RoZEdVblhWeHVJQ0FnSUdOdmJuTjBJSFI1Y0dWUGNIUnBiMjV6SUQwZ1d5ZDBaWGgwSnl3Z0oycHpiMjRuTENBbmFuTnZibkFuTENBbllYSnlZWGxpZFdabVpYSW5YVnh1WEc0Z0lDQWdMeThnWTI5dWMzUWdabUZzYkdKaFkyc2dQU0JtWVd4elpTQWdMeThnWm1Gc2JHSmhZMnNnWm5KdmJTQW5abVYwWTJnbklFRlFTU0IwYnlCWVNGSXVYRzRnSUNBZ1kyOXVjM1FnYzJWdVpHVnlJRDBnZEdocGN5NXpaVzVrWlhKY2JseHVJQ0FnSUdOdmJuTjBJR052Ym1acFp5QTlJSFYwYVd4ekxtVjRkR1Z1WkNoN2ZTd2diM0IwYVc5dWN5bGNibHh1SUNBZ0lDOHZJSFpoYkdsa1lYUmxJRzl3ZEdsdmJuTXViV1YwYUc5a1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCamIyNW1hV2N1YldWMGFHOWtJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdZMjl1Wm1sbkxtMWxkR2h2WkNBOUlFUkZSa0ZWVEZSZlRVVlVTRTlFWEc0Z0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0oxdG9OUzF5Wlc1a1pYSmRJRzl3ZEdsdmJuTXViV1YwYUc5a0lHWnZjaUJjWENkbVpYUmphRnhjSnlCQlVFa2dhR0Z6SUdKbFpXNGdjMlYwSUhSdklDZGNiaUFnSUNBZ0lDQWdLeUFuWkdWbVlYVnNkQ0IyWVd4MVpTQmNYQ2NuSUNzZ1kyOXVabWxuTG0xbGRHaHZaQ0FySUNkY1hDY25LVnh1SUNBZ0lIMWNiaUFnSUNCbGJITmxJR2xtSUNodFpYUm9iMlJQY0hScGIyNXpMbWx1WkdWNFQyWW9LR052Ym1acFp5NXRaWFJvYjJRZ0t5QW5KeWxjYmlBZ0lDQWdJQ0FnTG5SdlZYQndaWEpEWVhObEtDa3BJRDA5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdVpYSnliM0lvSjF0b05TMXlaVzVrWlhKZElHOXdkR2x2Ym5NdWJXVjBhRzlrSUZ4Y0p5ZGNiaUFnSUNBZ0lDQWdLeUJqYjI1bWFXY3ViV1YwYUc5a1hHNGdJQ0FnSUNBZ0lDc2dKMXhjSnlCbWIzSWdYRnduWm1WMFkyaGNYQ2NnUVZCSklITm9iM1ZzWkNCaVpTQnZibVVnYjJZZ0oxeHVJQ0FnSUNBZ0lDQXJJRzFsZEdodlpFOXdkR2x2Ym5NZ0t5QW5MaWNwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnZG1Gc2FXUmhkR1VnYjNCMGFXOXVjeTUxY214Y2JpQWdJQ0JwWmlBb0lXTnZibVpwWnk1MWNtd3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExtVnljbTl5S0NkYmFEVXRjbVZ1WkdWeVhTQnZjSFJwYjI1ekxuVnliQ0J6YUc5MWJHUWdZbVVnYzJWMElHWnZjaUJjWENkbVpYUmphRnhjSnlCQlVFa3VKeWxjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUIyWVd4cFpHRjBaU0JpYjJSNUlHTnZiblJsYm5RZ1ptOXlJRzFsZEdodlpDQW5SMFZVSnk1Y2JpQWdJQ0JwWmlBb1kyOXVabWxuTG0xbGRHaHZaQzUwYjFWd2NHVnlRMkZ6WlNncElEMDlQU0FuUjBWVUp5a2dlMXh1SUNBZ0lDQWdiR1YwSUdKdlpIa2dQU0JqYjI1bWFXY3VZbTlrZVZ4dUlDQWdJQ0FnYVdZZ0tIVjBhV3h6TG1selVHeGhhVzVQWW1wbFkzUW9ZbTlrZVNrcElIdGNiaUFnSUNBZ0lDQWdZbTlrZVNBOUlIRnpMbk4wY21sdVoybG1lU2hpYjJSNUtWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2JHVjBJSFZ5YkNBOUlHTnZibVpwWnk1MWNteGNiaUFnSUNBZ0lHeGxkQ0JvWVhOb1NXUjRJRDBnZFhKc0xtbHVaR1Y0VDJZb0p5TW5LVnh1SUNBZ0lDQWdhR0Z6YUVsa2VDQThQU0F0TVNBbUppQW9hR0Z6YUVsa2VDQTlJSFZ5YkM1c1pXNW5kR2dwWEc0Z0lDQWdJQ0JzWlhRZ2FHRnphQ0E5SUhWeWJDNXpkV0p6ZEhJb2FHRnphRWxrZUNsY2JpQWdJQ0FnSUdsbUlDaG9ZWE5vSUNZbUlHaGhjMmhiTUYwZ1BUMDlJQ2NqSnlrZ2UxeHVJQ0FnSUNBZ0lDQm9ZWE5vSUQwZ2FHRnphQzV6ZFdKemRISW9NU2xjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJSFZ5YkNBOUlIVnliQzV6ZFdKemRISnBibWNvTUN3Z2FHRnphRWxrZUNsY2JpQWdJQ0FnSUdsbUlDaGliMlI1S1NCN1hHNGdJQ0FnSUNBZ0lIVnliQ0FyUFNBb1kyOXVabWxuTG5WeWJDNXBibVJsZUU5bUtDYy9KeWtnUEQwZ0xURWdQeUFuUHljZ09pQW5KaWNwSUNzZ1ltOWtlVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkWEpzSUNzOUlDY2pKeUFySUdoaGMyaGNiaUFnSUNBZ0lHTnZibVpwWnk1MWNtd2dQU0IxY214Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCMllXeHBaR0YwWlNCdmNIUnBiMjV6TG0xdlpHVmNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHTnZibVpwWnk1dGIyUmxJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdZMjl1Wm1sbkxtMXZaR1VnUFNCRVJVWkJWVXhVWDAxUFJFVmNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQnBaaUFvYlc5a1pVOXdkR2x2Ym5NdWFXNWtaWGhQWmlnb1kyOXVabWxuTG0xdlpHVWdLeUFuSnlrdWRHOU1iM2RsY2tOaGMyVW9LU2tnUFQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMjl1YzI5c1pTNWxjbkp2Y2lnblcyZzFMWEpsYm1SbGNsMGdiM0IwYVc5dWN5NXRiMlJsSUZ4Y0p5ZGNiaUFnSUNBZ0lDQWdLeUJqYjI1bWFXY3ViVzlrWlZ4dUlDQWdJQ0FnSUNBcklDZGNYQ2NnWm05eUlGeGNKMlpsZEdOb1hGd25JRUZRU1NCemFHOTFiR1FnWW1VZ2IyNWxJRzltSUNkY2JpQWdJQ0FnSUNBZ0t5QnRiMlJsVDNCMGFXOXVjeUFySUNjdUp5bGNiaUFnSUNCOVhHNWNiaUFnSUNBdkx5QjJZV3hwWkdGMFpTQnZjSFJwYjI1ekxuUjVjR1ZjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JR052Ym1acFp5NTBlWEJsSUQwOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnWTI5dVptbG5MblI1Y0dVZ1BTQkVSVVpCVlV4VVgxUlpVRVZjYmlBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnblcyZzFMWEpsYm1SbGNsMGdiM0IwYVc5dWN5NTBlWEJsSUdadmNpQmNYQ2RtWlhSamFGeGNKeUJCVUVrZ2FHRnpJR0psWlc0Z2MyVjBJSFJ2SUNkY2JpQWdJQ0FnSUNBZ0t5QW5aR1ZtWVhWc2RDQjJZV3gxWlNCY1hDY25JQ3NnWTI5dVptbG5MblI1Y0dVZ0t5QW5YRnduTGljcFhHNGdJQ0FnZlZ4dUlDQWdJR1ZzYzJVZ2FXWWdLSFI1Y0dWUGNIUnBiMjV6TG1sdVpHVjRUMllvS0dOdmJtWnBaeTUwZVhCbElDc2dKeWNwTG5SdlRHOTNaWEpEWVhObEtDa3BJRDA5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlHTnZibk52YkdVdVpYSnliM0lvSjF0b05TMXlaVzVrWlhKZElHOXdkR2x2Ym5NdWRIbHdaU0JjWENjblhHNGdJQ0FnSUNBZ0lDQWdLeUJqYjI1bWFXY3VkSGx3WlZ4dUlDQWdJQ0FnSUNBZ0lDc2dKMXhjSnlCbWIzSWdYRnduWm1WMFkyaGNYQ2NnUVZCSklITm9iM1ZzWkNCaVpTQnZibVVnYjJZZ0oxeHVJQ0FnSUNBZ0lDQWdJQ3NnZEhsd1pVOXdkR2x2Ym5NZ0t5QW5MaWNwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdMeThnZG1Gc2FXUmhkR1VnYjNCMGFXOXVjeTVvWldGa1pYSnpYRzRnSUNBZ1kyOXVabWxuTG1obFlXUmxjbk1nUFNCamIyNW1hV2N1YUdWaFpHVnljeUI4ZkNCN2ZWeHVJQ0FnSUdsbUlDZ2hkWFJwYkhNdWFYTlFiR0ZwYms5aWFtVmpkQ2hqYjI1bWFXY3VhR1ZoWkdWeWN5a3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmpiMjV6YjJ4bExtVnljbTl5S0NkYmFEVXRjbVZ1WkdWeVhTQnZjSFJwYjI1ekxtaGxZV1JsY25NZ2MyaHZkV3hrSUdKbElHRWdjR3hoYVc0Z2IySnFaV04wSnlsY2JpQWdJQ0I5WEc1Y2JpQWdJQ0F2THlCMllXeHBaR0YwWlNCdmNIUnBiMjV6TG5ScGJXVnZkWFJjYmlBZ0lDQmpiMjVtYVdjdWRHbHRaVzkxZENBOUlIQmhjbk5sU1c1MEtHTnZibVpwWnk1MGFXMWxiM1YwTENBeE1Da2dmSHdnTWpVd01GeHVYRzRnSUNBZ1kyOXVjM1FnWDJOaGJHeEJjbWR6SUQwZ1cyTnZibVpwWnl3Z1puVnVZM1JwYjI0Z0tISmxjeWtnZTF4dUlDQWdJQ0FnYzJWdVpHVnlMbkJsY21admNtMURZV3hzWW1GamF5aGpZV3hzWW1GamEwbGtMQ0J5WlhNcFhHNGdJQ0FnZlYxY2JpQWdJQ0JwWmlBb2NISnZaM0psYzNORFlXeHNZbUZqYTBsa0tTQjdYRzRnSUNBZ0lDQmZZMkZzYkVGeVozTXVjSFZ6YUNobWRXNWpkR2x2YmlBb2NtVnpLU0I3WEc0Z0lDQWdJQ0FnSUM4dklGTmxkQ0FuYTJWbGNFRnNhWFpsSnlCMGJ5QjBjblZsSUdadmNpQnpaVzVrYVc1bklHTnZiblJwYm5WdmRYTWdZMkZzYkdKaFkydHpYRzRnSUNBZ0lDQWdJSE5sYm1SbGNpNXdaWEptYjNKdFEyRnNiR0poWTJzb2NISnZaM0psYzNORFlXeHNZbUZqYTBsa0xDQnlaWE1zSUhSeWRXVXBYRzRnSUNBZ0lDQjlLVnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2hqYjI1bWFXY3VkSGx3WlNBOVBUMGdKMnB6YjI1d0p5a2dlMXh1SUNBZ0lDQWdYMnB6YjI1d0xtRndjR3g1S0hSb2FYTXNJRjlqWVd4c1FYSm5jeWxjYmlBZ0lDQjlYRzRnSUNBZ1pXeHpaU0I3WEc0Z0lDQWdJQ0JmZUdoeUxtRndjR3g1S0hSb2FYTXNJRjlqWVd4c1FYSm5jeWxjYmlBZ0lDQjlYRzRnSUgxY2JseHVmVnh1WEc1amIyNXpkQ0J0WlhSaElEMGdlMXh1SUNCemRISmxZVzA2SUZ0N1hHNGdJQ0FnYm1GdFpUb2dKM05sYm1SSWRIUndKeXhjYmlBZ0lDQmhjbWR6T2lCYkoyOWlhbVZqZENjc0lDZG1kVzVqZEdsdmJpZGRYRzRnSUgwc0lIdGNiaUFnSUNCdVlXMWxPaUFuWm1WMFkyZ25MRnh1SUNBZ0lHRnlaM002SUZzbmIySnFaV04wSnl3Z0oyWjFibU4wYVc5dUp5d2dKMloxYm1OMGFXOXVKMTFjYmlBZ2ZWMWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQnBibWwwT2lCbWRXNWpkR2x2YmlBb1YyVmxlQ2tnZTF4dUlDQWdJSFYwYVd4eklEMGdWMlZsZUM1MWRHbHNjMXh1SUNBZ0lGZGxaWGd1Y21WbmFYTjBaWEpCY0dsTmIyUjFiR1VvSjNOMGNtVmhiU2NzSUhOMGNtVmhiU3dnYldWMFlTbGNiaUFnZlZ4dWZWeHVJaXdpTHlwY2JpQXFJRXhwWTJWdWMyVmtJSFJ2SUhSb1pTQkJjR0ZqYUdVZ1UyOW1kSGRoY21VZ1JtOTFibVJoZEdsdmJpQW9RVk5HS1NCMWJtUmxjaUJ2Ym1WY2JpQXFJRzl5SUcxdmNtVWdZMjl1ZEhKcFluVjBiM0lnYkdsalpXNXpaU0JoWjNKbFpXMWxiblJ6TGlBZ1UyVmxJSFJvWlNCT1QxUkpRMFVnWm1sc1pWeHVJQ29nWkdsemRISnBZblYwWldRZ2QybDBhQ0IwYUdseklIZHZjbXNnWm05eUlHRmtaR2wwYVc5dVlXd2dhVzVtYjNKdFlYUnBiMjVjYmlBcUlISmxaMkZ5WkdsdVp5QmpiM0I1Y21sbmFIUWdiM2R1WlhKemFHbHdMaUFnVkdobElFRlRSaUJzYVdObGJuTmxjeUIwYUdseklHWnBiR1ZjYmlBcUlIUnZJSGx2ZFNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1ZjYmlBcUlGd2lUR2xqWlc1elpWd2lLVHNnZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlZ4dUlDb2dkMmwwYUNCMGFHVWdUR2xqWlc1elpTNGdJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxGeHVJQ29nYzI5bWRIZGhjbVVnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNWNiaUFxSUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WlhHNGdLaUJMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xpQWdVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdWY2JpQXFJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUWdiR2x0YVhSaGRHbHZibk5jYmlBcUlIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc0bmRYTmxJSE4wY21samRDZGNibHh1THlvcVhHNWNia0ZWUTFSSlQwNDZYRzUwWVhOclVYVmxkV1ZjYmtOc2FYQmliMkZ5WkM1elpYUlRkSEpwYm1jb0tTQWdUazlYSUc1dmRDQjNiM0pyY3l3Z1ptRmphVzVuSUhSdklIVnpaWEl0WVdOMElHeHZjMlVnYjJZZ2RHRnphMUYxWlhWbExseHVYRzUzYjNKcmN5QnBiaUJEYUhKdmJXVWdSbWx5WldadmVDQlBjR1Z5WVM0Z1luVjBJRzV2ZENCcGJpQlRZV1poY21rdVhHNUFjMlZsSUdoMGRIQnpPaTh2WkdWMlpXeHZjR1Z5TG0xdmVtbHNiR0V1YjNKbkwyVnVMVlZUTDJSdlkzTXZWMlZpTDBGUVNTOUViMk4xYldWdWRDOWxlR1ZqUTI5dGJXRnVaQ05DY205M2MyVnlYMk52YlhCaGRHbGlhV3hwZEhsY2JseHVRMnhwY0dKdllYSmtMbWRsZEZOMGNtbHVaeWdwSUhWdWFXMXdiR1Z0Wlc1MFpXUXVJRlJvWlhKbElHbHpJRzV2SUdWaGMza2dkMkY1SUhSdklHUnZJSEJoYzNSbElHWnliMjBnWTJ4cGNHSnZZWEprSUhSdklHcHpJSFpoY21saFlteGxMbHh1WEc1VGJ5QnNiMjlySUc5MWRDQjViM1Z5SUdGd2NDQmlaV2hoZG1sdmNpd2dkMmhsYmlCa2IzZHVaM0poWkdVZ2RHOGdhSFJ0YkRVZ2NtVnVaR1Z5TGx4dVFXNTVJR2xrWldFZ2FYTWdkMlZzWTI5dFpTNWNiaW9xTDF4dVhHNWpiMjV6ZENCWFJVVllYME5NU1ZCQ1QwRlNSRjlKUkNBOUlDZGZYM2RsWlhoZlkyeHBjR0p2WVhKa1gybGtYMThuWEc1Y2JtTnZibk4wSUdOc2FYQmliMkZ5WkNBOUlIdGNibHh1SUNCblpYUlRkSEpwYm1jNklHWjFibU4wYVc5dUlDaGpZV3hzWW1GamEwbGtLU0I3WEc0Z0lDQWdMeThnYm05MElITjFjSEJ2Y25SbFpDQnBiaUJvZEcxc05WeHVJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZGpiR2x3WW05aGNtUXVaMlYwVTNSeWFXNW5LQ2tnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQ0J1YjNjdUp5bGNiaUFnZlN4Y2JseHVJQ0J6WlhSVGRISnBibWM2SUdaMWJtTjBhVzl1SUNoMFpYaDBLU0I3WEc0Z0lDQWdMeThnYm05MElITjFjSEJ2Y25RZ2MyRm1ZWEpwWEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUIwWlhoMElEMDlQU0FuYzNSeWFXNW5KeUFtSmlCMFpYaDBJQ0U5UFNBbkp5QW1KaUJrYjJOMWJXVnVkQzVsZUdWalEyOXRiV0Z1WkNrZ2UxeHVJQ0FnSUNBZ1kyOXVjM1FnZEdWdGNFbHVjSFYwSUQwZ1pXeGxiV1Z1ZENncFhHNGdJQ0FnSUNCMFpXMXdTVzV3ZFhRdWRtRnNkV1VnUFNCMFpYaDBYRzVjYmlBZ0lDQWdJSFJsYlhCSmJuQjFkQzV6Wld4bFkzUW9LVnh1SUNBZ0lDQWdaRzlqZFcxbGJuUXVaWGhsWTBOdmJXMWhibVFvSjJOdmNIa25LVnh1SUNBZ0lDQWdMeThnZG1GeUlHOTFkQ0E5SUdSdlkzVnRaVzUwTG1WNFpXTkRiMjF0WVc1a0tDZGpiM0I1SnlrN1hHNGdJQ0FnSUNBdkx5QmpiMjV6YjJ4bExteHZaeWhjSW1WNFpXTkRiMjF0WVc1a0lHOTFkQ0JwY3lCY0lpQXJJRzkxZENrN1hHNGdJQ0FnSUNCMFpXMXdTVzV3ZFhRdWRtRnNkV1VnUFNBbkoxeHVJQ0FnSUNBZ2RHVnRjRWx1Y0hWMExtSnNkWElvS1Z4dUlDQWdJSDFjYmlBZ0lDQmxiSE5sSUh0Y2JpQWdJQ0FnSUdOdmJuTnZiR1V1Ykc5bktDZHZibXg1SUhOMWNIQnZjblFnYzNSeWFXNW5JR2x1Y0hWMElHNXZkeWNwWEc0Z0lDQWdmVnh1SUNCOVhHNWNibjFjYmx4dVpuVnVZM1JwYjI0Z1pXeGxiV1Z1ZENBb0tTQjdYRzRnSUd4bGRDQjBaVzF3U1c1d2RYUWdQU0JrYjJOMWJXVnVkQzVuWlhSRmJHVnRaVzUwUW5sSlpDaFhSVVZZWDBOTVNWQkNUMEZTUkY5SlJDbGNiaUFnYVdZZ0tDRjBaVzF3U1c1d2RYUXBJSHRjYmlBZ0lDQjBaVzF3U1c1d2RYUWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZHBibkIxZENjcFhHNGdJQ0FnZEdWdGNFbHVjSFYwTG5ObGRFRjBkSEpwWW5WMFpTZ25hV1FuTENCWFJVVllYME5NU1ZCQ1QwRlNSRjlKUkNsY2JpQWdJQ0IwWlcxd1NXNXdkWFF1YzNSNWJHVXVZM056VkdWNGRDQTlJQ2RvWldsbmFIUTZNWEI0TzNkcFpIUm9PakZ3ZUR0aWIzSmtaWEk2Ym05dVpUc25YRzRnSUNBZ0x5OGdkR1Z0Y0VsdWNIVjBMbk4wZVd4bExtTnpjMVJsZUhRZ1BTQmNJbWhsYVdkb2REbzBNSEI0TzNkcFpIUm9Pak13TUhCNE8ySnZjbVJsY2pwemIyeHBaRHRjSWx4dUlDQWdJR1J2WTNWdFpXNTBMbUp2WkhrdVlYQndaVzVrUTJocGJHUW9kR1Z0Y0VsdWNIVjBLVnh1SUNCOVhHNGdJSEpsZEhWeWJpQjBaVzF3U1c1d2RYUmNibjFjYmx4dVkyOXVjM1FnYldWMFlTQTlJSHRjYmlBZ1kyeHBjR0p2WVhKa09pQmJlMXh1SUNBZ0lHNWhiV1U2SUNkblpYUlRkSEpwYm1jbkxGeHVJQ0FnSUdGeVozTTZJRnNuWm5WdVkzUnBiMjRuWFZ4dUlDQjlMQ0I3WEc0Z0lDQWdibUZ0WlRvZ0ozTmxkRk4wY21sdVp5Y3NYRzRnSUNBZ1lYSm5jem9nV3lkemRISnBibWNuWFZ4dUlDQjlYVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJR2x1YVhRNklHWjFibU4wYVc5dUlDaFhaV1Y0S1NCN1hHNGdJQ0FnVjJWbGVDNXlaV2RwYzNSbGNrRndhVTF2WkhWc1pTZ25ZMnhwY0dKdllYSmtKeXdnWTJ4cGNHSnZZWEprTENCdFpYUmhLVnh1SUNCOVhHNTlYRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JpZDFjMlVnYzNSeWFXTjBKMXh1WEc1amIyNXpkQ0JsZG1WdWRDQTlJSHRjYmlBZ0x5b3FYRzRnSUNBcUlHOXdaVzVWY214Y2JpQWdJQ29nUUhCaGNtRnRJQ0I3YzNSeWFXNW5mU0IxY214Y2JpQWdJQ292WEc0Z0lHOXdaVzVWVWt3NklHWjFibU4wYVc5dUlDaDFjbXdwSUh0Y2JpQWdJQ0JzYjJOaGRHbHZiaTVvY21WbUlEMGdkWEpzWEc0Z0lIMWNibHh1ZlZ4dVhHNWpiMjV6ZENCdFpYUmhJRDBnZTF4dUlDQmxkbVZ1ZERvZ1czdGNiaUFnSUNCdVlXMWxPaUFuYjNCbGJsVlNUQ2NzWEc0Z0lDQWdZWEpuY3pvZ1d5ZHpkSEpwYm1jblhWeHVJQ0I5WFZ4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUdsdWFYUTZJR1oxYm1OMGFXOXVJQ2hYWldWNEtTQjdYRzRnSUNBZ1YyVmxlQzV5WldkcGMzUmxja0Z3YVUxdlpIVnNaU2duWlhabGJuUW5MQ0JsZG1WdWRDd2diV1YwWVNsY2JpQWdmVnh1ZlZ4dUlpd2lMeXBjYmlBcUlFeHBZMlZ1YzJWa0lIUnZJSFJvWlNCQmNHRmphR1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2YmlBb1FWTkdLU0IxYm1SbGNpQnZibVZjYmlBcUlHOXlJRzF2Y21VZ1kyOXVkSEpwWW5WMGIzSWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUnpMaUFnVTJWbElIUm9aU0JPVDFSSlEwVWdabWxzWlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZDJsMGFDQjBhR2x6SUhkdmNtc2dabTl5SUdGa1pHbDBhVzl1WVd3Z2FXNW1iM0p0WVhScGIyNWNiaUFxSUhKbFoyRnlaR2x1WnlCamIzQjVjbWxuYUhRZ2IzZHVaWEp6YUdsd0xpQWdWR2hsSUVGVFJpQnNhV05sYm5ObGN5QjBhR2x6SUdacGJHVmNiaUFxSUhSdklIbHZkU0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVmNiaUFxSUZ3aVRHbGpaVzV6WlZ3aUtUc2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaVnh1SUNvZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM0Z0lGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTEZ4dUlDb2djMjltZEhkaGNtVWdaR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc1Y2JpQXFJRndpUVZNZ1NWTmNJaUJDUVZOSlV5d2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaWEc0Z0tpQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGlBZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1ZjYmlBcUlITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1RZ2JHbHRhWFJoZEdsdmJuTmNiaUFxSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVqYjI1emRDQjFkR2xzY3lBOUlIdDlYRzVzWlhRZ1pXNWtSWFpsYm5SY2JteGxkQ0J6ZEhsc1pVNWhiV1ZjYmx4dVkyOXVjM1FnUlZaRlRsUmZUa0ZOUlY5TlFWQWdQU0I3WEc0Z0lIUnlZVzV6YVhScGIyNDZJQ2QwY21GdWMybDBhVzl1Wlc1a0p5eGNiaUFnVjJWaWEybDBWSEpoYm5OcGRHbHZiam9nSjNkbFltdHBkRlJ5WVc1emFYUnBiMjVGYm1RbkxGeHVJQ0JOYjNwVWNtRnVjMmwwYVc5dU9pQW5iVzk2VkhKaGJuTnBkR2x2YmtWdVpDY3NYRzRnSUU5VWNtRnVjMmwwYVc5dU9pQW5iMVJ5WVc1emFYUnBiMjVGYm1RbkxGeHVJQ0J0YzFSeVlXNXphWFJwYjI0NklDZE5VMVJ5WVc1emFYUnBiMjVGYm1RblhHNTlYRzVjYm1aMWJtTjBhVzl1SUdSbGRHVmpkRVYyWlc1MGN5QW9LU0I3WEc0Z0lHTnZibk4wSUhSbGMzUkZiQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcFhHNGdJR052Ym5OMElITjBlV3hsSUQwZ2RHVnpkRVZzTG5OMGVXeGxYRzRnSUdadmNpQW9ZMjl1YzNRZ2JtRnRaU0JwYmlCRlZrVk9WRjlPUVUxRlgwMUJVQ2tnZTF4dUlDQWdJR2xtSUNodVlXMWxJR2x1SUhOMGVXeGxLU0I3WEc0Z0lDQWdJQ0JsYm1SRmRtVnVkQ0E5SUVWV1JVNVVYMDVCVFVWZlRVRlFXMjVoYldWZFhHNGdJQ0FnSUNCemRIbHNaVTVoYldVZ1BTQnVZVzFsWEc0Z0lDQWdJQ0JpY21WaGExeHVJQ0FnSUgxY2JpQWdmVnh1ZlZ4dVhHNWtaWFJsWTNSRmRtVnVkSE1vS1Z4dVhHNW1kVzVqZEdsdmJpQjBjbUZ1YzJsMGFXOXVUMjVqWlNBb2RtNXZaR1VzSUdOdmJtWnBaeXdnWTJGc2JHSmhZMnNwSUh0Y2JpQWdZMjl1YzNRZ2UxeHVJQ0FnSUc1bGVIUkdjbUZ0WlN4Y2JpQWdJQ0IwYjBOVFUxUmxlSFFzWEc0Z0lDQWdZWFYwYjFCeVpXWnBlQ3hjYmlBZ0lDQmpZVzFsYkdsNlpVdGxlWE1zWEc0Z0lDQWdibTl5YldGc2FYcGxVM1I1YkdVc1hHNGdJQ0FnYVhOQmNuSmhlVnh1SUNCOUlEMGdkWFJwYkhOY2JseHVJQ0JwWmlBb2FYTkJjbkpoZVNoMmJtOWtaU2twSUh0Y2JpQWdJQ0JwWmlBb2NISnZZMlZ6Y3k1bGJuWXVUazlFUlY5RlRsWWdQVDA5SUNka1pYWmxiRzl3YldWdWRDY3BJSHRjYmlBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnblczWjFaUzF5Wlc1a1pYSmRJSFJvWlNCeVpXWWdjR0Z6YzJWa0lIUnZJR0Z1YVcxaGRHbHZiaTUwY21GdWMybDBhVzl1VDI1alpTQnBjeUJoSUdGeWNtRjVMaWNwWEc0Z0lDQWdmVnh1SUNBZ0lIWnViMlJsSUQwZ2RtNXZaR1ZiTUYxY2JpQWdmVnh1WEc0Z0lHTnZibk4wSUdSMWNtRjBhVzl1SUQwZ1kyOXVabWxuTG1SMWNtRjBhVzl1SUh4OElEQWdMeThnYlhOY2JpQWdZMjl1YzNRZ2RHbHRhVzVuSUQwZ1kyOXVabWxuTG5ScGJXbHVaMFoxYm1OMGFXOXVJSHg4SUNkc2FXNWxZWEluWEc0Z0lHTnZibk4wSUdSbGJHRjVJRDBnWTI5dVptbG5MbVJsYkdGNUlIeDhJREFnSUM4dklHMXpYRzVjYmlBZ0x5OGdWRTlFVHpvZ2NHRnljMlVnZEhKaGJuTnBkR2x2YmlCd2NtOXdaWEowYVdWelhHNGdJR052Ym5OMElIUnlZVzV6YVhScGIyNVdZV3gxWlNBOUlHQmhiR3dnSkh0a2RYSmhkR2x2Ym4xdGN5QWtlM1JwYldsdVozMGdKSHRrWld4aGVYMXRjMkJjYmx4dUlDQmpiMjV6ZENCa2IyMGdQU0IyYm05a1pTNGtaV3hjYmlBZ0x5OGdkSEpwWjJkbGNpQnBiV0ZuWlNCc1lYcDViRzloWkdsdVp5QmllU0JtYjNKalpTNWNiaUFnWkc5dElDWW1JSGRsWlhndWRYUnBiSE11Wm1seVpVeGhlbmxzYjJGa0tHUnZiU3dnZEhKMVpTbGNibHh1SUNCamIyNXpkQ0IwY21GdWMybDBhVzl1Ulc1a1NHRnVaR3hsY2lBOUlHWjFibU4wYVc5dUlDaGxkbVZ1ZENrZ2UxeHVJQ0FnSUdWMlpXNTBJQ1ltSUdWMlpXNTBMbk4wYjNCUWNtOXdZV2RoZEdsdmJpZ3BYRzRnSUNBZ2FXWWdLR1Z1WkVWMlpXNTBLU0I3WEc0Z0lDQWdJQ0JrYjIwdWNtVnRiM1psUlhabGJuUk1hWE4wWlc1bGNpaGxibVJGZG1WdWRDd2dkSEpoYm5OcGRHbHZia1Z1WkVoaGJtUnNaWElwWEc0Z0lDQWdJQ0JrYjIwdWMzUjViR1ZiYzNSNWJHVk9ZVzFsWFNBOUlDY25YRzRnSUNBZ2ZWeHVJQ0FnSUdOaGJHeGlZV05yS0NsY2JpQWdmVnh1SUNCcFppQW9aVzVrUlhabGJuUXBJSHRjYmlBZ0lDQmtiMjB1YzNSNWJHVmJjM1I1YkdWT1lXMWxYU0E5SUhSeVlXNXphWFJwYjI1V1lXeDFaVnh1SUNBZ0lHUnZiUzVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLR1Z1WkVWMlpXNTBMQ0IwY21GdWMybDBhVzl1Ulc1a1NHRnVaR3hsY2lsY2JpQWdmVnh1SUNCdVpYaDBSbkpoYldVb0tDa2dQVDRnZTF4dUlDQWdJR1J2YlM1emRIbHNaUzVqYzNOVVpYaDBYRzRnSUNBZ0lDQXJQU0IwYjBOVFUxUmxlSFFvWVhWMGIxQnlaV1pwZUNodWIzSnRZV3hwZW1WVGRIbHNaU2hqWVcxbGJHbDZaVXRsZVhNb1kyOXVabWxuTG5OMGVXeGxjeWtwS1NCOGZDQjdmU2xjYmlBZ2ZTbGNibjFjYmx4dVkyOXVjM1FnWVc1cGJXRjBhVzl1SUQwZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nZEhKaGJuTnBkR2x2Ymx4dUlDQWdLaUJBY0dGeVlXMGdJSHRUZEhKcGJtZDlJSFp1YjJSbFhHNGdJQ0FxSUVCd1lYSmhiU0FnZTA5aWFtVmpkSDBnWTI5dVptbG5YRzRnSUNBcUlFQndZWEpoYlNBZ2UxTjBjbWx1WjMwZ1kyRnNiR0poWTJ0Y2JpQWdJQ292WEc0Z0lIUnlZVzV6YVhScGIyNGdLSFp1YjJSbExDQmpiMjVtYVdjc0lHTmhiR3hpWVdOcktTQjdYRzRnSUNBZ2FXWWdLQ0ZqYjI1bWFXY3VjM1I1YkdWektTQjdJSEpsZEhWeWJpQjlYRzRnSUNBZ2NtVjBkWEp1SUhSeVlXNXphWFJwYjI1UGJtTmxLSFp1YjJSbExDQmpiMjVtYVdjc0lDZ3BJRDArSUh0Y2JpQWdJQ0FnSUdOaGJHeGlZV05ySUNZbUlHTmhiR3hpWVdOcktDbGNiaUFnSUNCOUtWeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNiaUFnYVc1cGRDQW9kMlZsZUNrZ2UxeHVJQ0FnSUdOdmJuTjBJR1Y0ZEdWdVpFdGxlWE1nUFNCM1pXVjRMblYwYVd4ekxtVjRkR1Z1WkV0bGVYTmNiaUFnSUNCbGVIUmxibVJMWlhsektIVjBhV3h6TENCM1pXVjRMblYwYVd4ekxDQmJYRzRnSUNBZ0lDQW5ibVY0ZEVaeVlXMWxKeXhjYmlBZ0lDQWdJQ2QwYjBOVFUxUmxlSFFuTEZ4dUlDQWdJQ0FnSjJGMWRHOVFjbVZtYVhnbkxGeHVJQ0FnSUNBZ0oyTmhiV1ZzYVhwbFMyVjVjeWNzWEc0Z0lDQWdJQ0FuYm05eWJXRnNhWHBsVTNSNWJHVW5MRnh1SUNBZ0lDQWdKMmx6UVhKeVlYa25YRzRnSUNBZ1hTbGNibHh1SUNBZ0lIZGxaWGd1Y21WbmFYTjBaWEpOYjJSMWJHVW9KMkZ1YVcxaGRHbHZiaWNzSUdGdWFXMWhkR2x2YmlsY2JpQWdmVnh1ZlZ4dUlpd2lMeXBjYmlBcUlFeHBZMlZ1YzJWa0lIUnZJSFJvWlNCQmNHRmphR1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2YmlBb1FWTkdLU0IxYm1SbGNpQnZibVZjYmlBcUlHOXlJRzF2Y21VZ1kyOXVkSEpwWW5WMGIzSWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUnpMaUFnVTJWbElIUm9aU0JPVDFSSlEwVWdabWxzWlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZDJsMGFDQjBhR2x6SUhkdmNtc2dabTl5SUdGa1pHbDBhVzl1WVd3Z2FXNW1iM0p0WVhScGIyNWNiaUFxSUhKbFoyRnlaR2x1WnlCamIzQjVjbWxuYUhRZ2IzZHVaWEp6YUdsd0xpQWdWR2hsSUVGVFJpQnNhV05sYm5ObGN5QjBhR2x6SUdacGJHVmNiaUFxSUhSdklIbHZkU0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVmNiaUFxSUZ3aVRHbGpaVzV6WlZ3aUtUc2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaVnh1SUNvZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM0Z0lGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTEZ4dUlDb2djMjltZEhkaGNtVWdaR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc1Y2JpQXFJRndpUVZNZ1NWTmNJaUJDUVZOSlV5d2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaWEc0Z0tpQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGlBZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1ZjYmlBcUlITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1RZ2JHbHRhWFJoZEdsdmJuTmNiaUFxSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVwYlhCdmNuUWdZMjl1Wm1sbklHWnliMjBnSnk0dUwyTnZibVpwWnlkY2JtTnZibk4wSUhWMGFXeHpJRDBnZTMxY2JseHVablZ1WTNScGIyNGdaMlYwVUdGeVpXNTBVMk55YjJ4c1pYSWdLSFp1YjJSbEtTQjdYRzRnSUdsbUlDZ2hkbTV2WkdVcElISmxkSFZ5YmlCdWRXeHNYRzRnSUdOdmJuTjBJSFp0SUQwZ2RtNXZaR1V1SkdWc1hHNGdJRDhnZG01dlpHVWdPaUIyYm05a1pTNWxiRzFjYmlBZ1B5QjJibTlrWlM1amIyMXdiMjVsYm5SSmJuTjBZVzVqWlNCOGZDQjJibTlrWlM1amIyNTBaWGgwSURvZ2JuVnNiRnh1SUNCcFppQW9JWFp0S1NCeVpYUjFjbTRnYm5Wc2JGeHVJQ0JqYjI1emRDQjBlWEJsSUQwZ2RtMHVKR1ZzSUNZbUlIWnRMaVJsYkM1blpYUkJkSFJ5YVdKMWRHVW9KM2RsWlhndGRIbHdaU2NwWEc0Z0lHbG1JQ2hqYjI1bWFXY3VjMk55YjJ4c1lXSnNaVlI1Y0dWekxtbHVaR1Y0VDJZb2RIbHdaU2tnUGlBdE1Ta2dlMXh1SUNBZ0lISmxkSFZ5YmlCMmJWeHVJQ0I5WEc0Z0lISmxkSFZ5YmlCblpYUlFZWEpsYm5SVFkzSnZiR3hsY2loMmJTNGtjR0Z5Wlc1MEtWeHVmVnh1WEc1bWRXNWpkR2x2YmlCdWIzY2dLQ2tnZTF4dUlDQmpiMjV6ZENCdWIzY2dQU0IzYVc1a2IzY3VjR1Z5Wm05eWJXRnVZMlVnSmlZZ2QybHVaRzkzTG5CbGNtWnZjbTFoYm1ObExtNXZkMXh1SUNBL0lIZHBibVJ2ZHk1d1pYSm1iM0p0WVc1alpTNXViM2N1WW1sdVpDaDNhVzVrYjNjdWNHVnlabTl5YldGdVkyVXBJRG9nUkdGMFpTNXViM2RjYmlBZ2NtVjBkWEp1SUc1dmR5Z3BYRzU5WEc1Y2JtWjFibU4wYVc5dUlITmpjbTlzYkVWc1pXMWxiblFnS0dSVGRXWm1hWGdzSUhCdmMybDBhVzl1S1NCN1hHNGdJR2xtSUNnb2RHaHBjeUE5UFQwZ1pHOWpkVzFsYm5RdVltOWtlU2tnZkh3Z0tIUm9hWE1nUFQwOUlIZHBibVJ2ZHlsY2JpQWdJQ0FtSmlCM2FXNWtiM2N1YzJOeWIyeHNWRzhwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkMmx1Wkc5M0xuTmpjbTlzYkZSdktEQXNJSEJ2YzJsMGFXOXVLVnh1SUNCOVhHNGdJSFJvYVhOYllITmpjbTlzYkNSN1pGTjFabVpwZUgxZ1hTQTlJSEJ2YzJsMGFXOXVYRzU5WEc0dktpcGNiaUFxSUhObGJHWWdhVzUyYjJ0bFpDQm1kVzVqZEdsdmJpQjBhR0YwTENCbmFYWmxiaUJoSUdOdmJuUmxlSFFzSUhOMFpYQnpJSFJvY205MVoyZ2djMk55YjJ4c2FXNW5YRzRnS2lCQWJXVjBhRzlrSUhOMFpYQmNiaUFxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0JqYjI1MFpYaDBYRzRnS2k5Y2JtWjFibU4wYVc5dUlITjBaWEFnS0dOdmJuUmxlSFFwSUh0Y2JpQWdMeThnWTJGc2JDQnRaWFJvYjJRZ1lXZGhhVzRnYjI0Z2JtVjRkQ0JoZG1GcGJHRmliR1VnWm5KaGJXVmNiaUFnWTI5dWRHVjRkQzVtY21GdFpTQTlJSGRwYm1SdmR5NXlaWEYxWlhOMFFXNXBiV0YwYVc5dVJuSmhiV1VvYzNSbGNDNWlhVzVrS0hkcGJtUnZkeXdnWTI5dWRHVjRkQ2twWEc0Z0lHTnZibk4wSUhScGJXVWdQU0J1YjNjb0tWeHVJQ0JzWlhRZ1pXeGhjSE5sWkNBOUlDaDBhVzFsSUMwZ1kyOXVkR1Y0ZEM1emRHRnlkRlJwYldVcElDOGdORFk0WEc0Z0lDOHZJR0YyYjJsa0lHVnNZWEJ6WldRZ2RHbHRaWE1nYUdsbmFHVnlJSFJvWVc0Z2IyNWxYRzRnSUdWc1lYQnpaV1FnUFNCbGJHRndjMlZrSUQ0Z01TQS9JREVnT2lCbGJHRndjMlZrWEc0Z0lDOHZJR0Z3Y0d4NUlHVmhjMmx1WnlCMGJ5QmxiR0Z3YzJWa0lIUnBiV1ZjYmlBZ1kyOXVjM1FnZG1Gc2RXVWdQU0JsWVhObEtHVnNZWEJ6WldRcFhHNGdJR052Ym5OMElHTjFjbkpsYm5SUWIzTnBkR2x2YmlBOUlHTnZiblJsZUhRdWMzUmhjblJRYjNOcGRHbHZiaUFySUNoamIyNTBaWGgwTG5CdmMybDBhVzl1SUMwZ1kyOXVkR1Y0ZEM1emRHRnlkRkJ2YzJsMGFXOXVLU0FxSUhaaGJIVmxYRzRnSUdOdmJuUmxlSFF1YldWMGFHOWtMbU5oYkd3b1kyOXVkR1Y0ZEM1elkzSnZiR3hoWW14bExDQmpiMjUwWlhoMExtUlRkV1ptYVhnc0lHTjFjbkpsYm5SUWIzTnBkR2x2YmlsY2JpQWdMeThnY21WMGRYSnVJSGRvWlc0Z1pXNWtJSEJ2YVc1MGN5Qm9ZWFpsSUdKbFpXNGdjbVZoWTJobFpGeHVJQ0F2S2lwY2JpQWdJQ0FxSUU1UFZFVTZJSE5vYjNWc1pDQjFjMlVnZm40Z2RHOGdjR0Z5YzJVZ2NHOXphWFJwYjI0Z2JuVnRZbVZ5SUdsdWRHOGdhVzUwWldkbGNpNGdUM1JvWlhKM2FYTmxYRzRnSUNBZ0tpQjBhR2x6SUhSM2J5Qm1iRzloZENCdWRXMWlaWEp6SUcxaGVXSmxJR2hoZG1VZ1lTQnpiR2xqWld4NUlHeHBkSFJzWlNCa2FXWm1aWEpsYm1ObExDQjNhR2xqYUZ4dUlDQWdJQ29nZDJsc2JDQmpZWFZ6WlNCMGFHbHpJR1oxYm1OMGFXOXVJRzVsZG1WeUlIUnZJSE4wYjNBdVhHNGdJQ292WEc0Z0lHbG1JQ2grZm1OMWNuSmxiblJRYjNOcGRHbHZiaUE5UFQwZ2ZuNWpiMjUwWlhoMExuQnZjMmwwYVc5dUtTQjdYRzRnSUNBZ2QybHVaRzkzTG1OaGJtTmxiRUZ1YVcxaGRHbHZia1p5WVcxbEtHTnZiblJsZUhRdVpuSmhiV1VwWEc0Z0lDQWdjbVYwZFhKdVhHNGdJSDFjYm4xY2JpOHFLbHh1SUNvZ2NtVjBkWEp1Y3lCeVpYTjFiSFFnYjJZZ1lYQndiSGxwYm1jZ1pXRnpaU0J0WVhSb0lHWjFibU4wYVc5dUlIUnZJR0VnYm5WdFltVnlYRzRnS2lCQWJXVjBhRzlrSUdWaGMyVmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JyWEc0Z0tpQkFjbVYwZFhKdWN5QjdUblZ0WW1WeWZWeHVJQ292WEc1bWRXNWpkR2x2YmlCbFlYTmxJQ2hyS1NCN1hHNGdJSEpsZEhWeWJpQXdMalVnS2lBb01TQXRJRTFoZEdndVkyOXpLRTFoZEdndVVFa2dLaUJyS1NsY2JuMWNibU52Ym5OMElHUnZiU0E5SUh0Y2JpQWdMeW9xWEc0Z0lDQXFJSE5qY205c2JGUnZSV3hsYldWdWRGeHVJQ0FnS2lCQWNHRnlZVzBnSUh0V2JtOWtaU0I4SUZaRGIyMXdiMjVsYm5SOUlIWnViMlJsWEc0Z0lDQXFJRUJ3WVhKaGJTQWdlMDlpYW1WamRIMGdiM0IwYVc5dWN5QjdiMlptYzJWME9rNTFiV0psY24xY2JpQWdJQ29nSUNCd2N6b2djMk55YjJ4c0xYUnZJR2hoY3lBblpXRnpaU2NnWVc1a0lDZGtkWEpoZEdsdmJpY29iWE1wSUdGeklHOXdkR2x2Ym5NdVhHNGdJQ0FxTDF4dUlDQnpZM0p2Ykd4VWIwVnNaVzFsYm5RNklHWjFibU4wYVc5dUlDaDJibTlrWlN3Z2IzQjBhVzl1Y3lrZ2UxeHVJQ0FnSUdOdmJuTjBJSHRjYmlBZ0lDQWdJR2x6UVhKeVlYbGNiaUFnSUNCOUlEMGdkWFJwYkhOY2JpQWdJQ0JwWmlBb2FYTkJjbkpoZVNoMmJtOWtaU2twSUh0Y2JpQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUE5UFQwZ0oyUmxkbVZzYjNCdFpXNTBKeWtnZTF4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG5kaGNtNG9KMXQyZFdVdGNtVnVaR1Z5WFNCMGFHVWdjbVZtSUhCaGMzTmxaQ0IwYnlCaGJtbHRZWFJwYjI0dWRISmhibk5wZEdsdmJrOXVZMlVnYVhNZ1lTQmhjbkpoZVM0bktWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2RtNXZaR1VnUFNCMmJtOWtaVnN3WFZ4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCelkzSnZiR3hsY2lBOUlHZGxkRkJoY21WdWRGTmpjbTlzYkdWeUtIWnViMlJsS1Z4dUlDQWdJR052Ym5OMElITmpjbTlzYkVScGNtVmpkR2x2YmlBOUlITmpjbTlzYkdWeUlDWW1JSE5qY205c2JHVnlMbk5qY205c2JFUnBjbVZqZEdsdmJpQjhmQ0FuZG1WeWRHbGpZV3duWEc0Z0lDQWdZMjl1YzNRZ2FYTlhhVzVrYjNjZ1BTQWhjMk55YjJ4c1pYSmNiaUFnSUNCamIyNXpkQ0JqZENBOUlHbHpWMmx1Wkc5M0lEOGdaRzlqZFcxbGJuUXVZbTlrZVNBNklITmpjbTlzYkdWeUxpUmxiRnh1SUNBZ0lHTnZibk4wSUdWc0lEMGdkbTV2WkdVdUpHVnNJSHg4SUhadWIyUmxMbVZzYlZ4dUlDQWdJR2xtSUNoamRDQW1KaUJsYkNrZ2UxeHVJQ0FnSUNBZ0x5OGdhV1lnYVhRbmN5QmhJR3hwYzNRc0lIUm9aVzRnZEdobElHeHBjM1JXYm05a1pTNXpZM0p2Ykd4RWFYSmxZM1JwYjI0Z2FYTWdkVzVrWldacGJtVmtMaUJxZFhOMFhHNGdJQ0FnSUNBdkx5QmhjM04xYlNCcGRDQnBjeUIwYUdVZ1pHVm1ZWFZzZENCMllXeDFaU0FuZG1WeWRHbGpZV3duTGx4dUlDQWdJQ0FnWTI5dWMzUWdaRk4xWm1acGVDQTlJQ2g3WEc0Z0lDQWdJQ0FnSUdodmNtbDZiMjUwWVd3NklDZE1aV1owSnl4Y2JpQWdJQ0FnSUNBZ2RtVnlkR2xqWVd3NklDZFViM0FuWEc0Z0lDQWdJQ0I5S1Z0elkzSnZiR3hFYVhKbFkzUnBiMjVkWEc0Z0lDQWdJQ0JqYjI1emRDQmpkRkpsWTNRZ1BTQmpkQzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tWeHVJQ0FnSUNBZ2JHVjBJR1ZzVW1WamRDQTlJR1ZzTG1kbGRFSnZkVzVrYVc1blEyeHBaVzUwVW1WamRDZ3BYRzRnSUNBZ0lDQXZLaXBjYmlBZ0lDQWdJQ0FnS2lCcFppQnBkQ2R6SUdFZ2QyRjBaWEptWVd4c0xDQmhibVFnZVc5MUlIZGhiblFnZEc4Z2MyTnliMnhzSUhSdklHRWdhR1ZoWkdWeUxDQjBhR1Z1SUdwMWMzUmNiaUFnSUNBZ0lDQWdLaUJ6WTNKdmJHd2dkRzhnZEdobElIUnZjQzVjYmlBZ0lDQWdJQ292WEc0Z0lDQWdJQ0JwWmlBb2MyTnliMnhzWlhJZ0ppWWdjMk55YjJ4c1pYSXVkMlZsZUZSNWNHVWdQVDA5SUNkM1lYUmxjbVpoYkd3bklDWW1JSE5qY205c2JHVnlMbDlvWldGa1pYSnpJQ1ltSUhOamNtOXNiR1Z5TGw5b1pXRmtaWEp6TG1sdVpHVjRUMllvZG01dlpHVXVKSFp1YjJSbElIeDhJSFp1YjJSbEtTQStJQzB4S1NCN1hHNGdJQ0FnSUNBZ0lDOHZJR2wwSjNNZ2FXNGdkMkYwWlhKbVlXeHNMaUJxZFhOMElITmpjbTlzYkNCMGJ5QjBhR1VnZEc5d0xseHVJQ0FnSUNBZ0lDQmxiRkpsWTNRZ1BTQmpkQzVtYVhKemRFVnNaVzFsYm5SRGFHbHNaQzVuWlhSQ2IzVnVaR2x1WjBOc2FXVnVkRkpsWTNRb0tWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ1kyOXVjM1FnWkdseUlEMGdaRk4xWm1acGVDNTBiMHh2ZDJWeVEyRnpaU2dwWEc0Z0lDQWdJQ0JzWlhRZ2IyWm1jMlYwSUQwZ0tHbHpWMmx1Wkc5M0lEOGdNQ0E2SUdOMFcyQnpZM0p2Ykd3a2UyUlRkV1ptYVhoOVlGMHBJQ3NnWld4U1pXTjBXMlJwY2wwZ0xTQmpkRkpsWTNSYlpHbHlYVnh1SUNBZ0lDQWdhV1lnS0c5d2RHbHZibk1wSUh0Y2JpQWdJQ0FnSUNBZ2IyWm1jMlYwSUNzOUlHOXdkR2x2Ym5NdWIyWm1jMlYwSUNZbUlHOXdkR2x2Ym5NdWIyWm1jMlYwSUNvZ2QyVmxlQzVqYjI1bWFXY3VaVzUyTG5OallXeGxJSHg4SURCY2JpQWdJQ0FnSUNBZ0x5OGdiMlptYzJWMElDbzlJSGRsWlhndVkyOXVabWxuTG1WdWRpNXpZMkZzWlNBdktpQmhaR0Z3ZENCdlptWnpaWFFnZEc4Z1pHbG1abVZ5Wlc1MElITmpjbVZsYmlCelkyRnNaWE11SUNvdlhHNGdJQ0FnSUNCOVhHNGdJQ0FnSUNCbGJITmxJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQTlQVDBnSjJSbGRtVnNiM0J0Wlc1MEp5a2dlMXh1SUNBZ0lDQWdJQ0JqYjI1emIyeGxMbmRoY200b0oxdFdkV1VnVW1WdVpHVnlYU0JVYUdVZ2MyVmpiMjVrSUhCaGNtRnRaWFJsY2lCdlppQmNJbk5qY205c2JGUnZSV3hsYldWdWRGd2lJR2x6SUhKbGNYVnBjbVZrTENBblhHNGdJQ0FnSUNBZ0lDc2dKMjkwYUdWeWQybHpaU0JwZENCdFlYa2dibTkwSUhkdmNtdHpJSGRsYkd3Z2IyNGdibUYwYVhabExpY3BYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBaaUFvYjNCMGFXOXVjeUFtSmlCdmNIUnBiMjV6TG1GdWFXMWhkR1ZrSUQwOVBTQm1ZV3h6WlNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyTnliMnhzUld4bGJXVnVkQzVqWVd4c0tHTjBMQ0JrVTNWbVptbDRMQ0J2Wm1aelpYUXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnpkR1Z3S0h0Y2JpQWdJQ0FnSUNBZ2MyTnliMnhzWVdKc1pUb2dZM1FzWEc0Z0lDQWdJQ0FnSUhOMFlYSjBWR2x0WlRvZ2JtOTNLQ2tzWEc0Z0lDQWdJQ0FnSUdaeVlXMWxPaUJ1ZFd4c0xGeHVJQ0FnSUNBZ0lDQnpkR0Z5ZEZCdmMybDBhVzl1T2lCcGMxZHBibVJ2ZHlBL0lIZHBibVJ2ZHk1d1lXZGxXVTltWm5ObGRDQTZJR04wVzJCelkzSnZiR3drZTJSVGRXWm1hWGg5WUYwc1hHNGdJQ0FnSUNBZ0lIQnZjMmwwYVc5dU9pQnZabVp6WlhRc1hHNGdJQ0FnSUNBZ0lHMWxkR2h2WkRvZ2MyTnliMnhzUld4bGJXVnVkQ3hjYmlBZ0lDQWdJQ0FnWkZOMVptWnBlRG9nWkZOMVptWnBlRnh1SUNBZ0lDQWdmU2xjYmlBZ0lDQjlYRzRnSUgwc1hHNGdJQzhxS2x4dUlDQWdLaUJuWlhSRGIyMXdiMjVsYm5SU1pXTjBYRzRnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCMmJtOWtaVnh1SUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmpZV3hzWW1GamExeHVJQ0FnS2k5Y2JpQWdaMlYwUTI5dGNHOXVaVzUwVW1WamREb2dablZ1WTNScGIyNGdLSFp1YjJSbExDQmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lHTnZibk4wSUh0Y2JpQWdJQ0FnSUdselFYSnlZWGxjYmlBZ0lDQjlJRDBnZFhScGJITmNiaUFnSUNCcFppQW9hWE5CY25KaGVTaDJibTlrWlNrcElIdGNiaUFnSUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBOVBUMGdKMlJsZG1Wc2IzQnRaVzUwSnlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSjF0MmRXVXRjbVZ1WkdWeVhTQjBhR1VnY21WbUlIQmhjM05sWkNCMGJ5QmhibWx0WVhScGIyNHVkSEpoYm5OcGRHbHZiazl1WTJVZ2FYTWdZU0JoY25KaGVTNG5LVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkbTV2WkdVZ1BTQjJibTlrWlZzd1hWeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQnpZMkZzWlNBOUlIZHBibVJ2ZHk1M1pXVjRMbU52Ym1acFp5NWxibll1YzJOaGJHVmNiaUFnSUNCamIyNXpkQ0JwYm1adklEMGdlMXh1SUNBZ0lDQWdjbVZ6ZFd4ME9pQm1ZV3h6WlZ4dUlDQWdJSDFjYmlBZ0lDQmpiMjV6ZENCeVpXTjBTMlY1Y3lBOUlGc25kMmxrZEdnbkxDQW5hR1ZwWjJoMEp5d2dKM1J2Y0Njc0lDZGliM1IwYjIwbkxDQW5iR1ZtZENjc0lDZHlhV2RvZENkZFhHNWNiaUFnSUNCbWRXNWpkR2x2YmlCeVpXTmhiR01nS0hKbFkzUXBJSHRjYmlBZ0lDQWdJR052Ym5OMElISmxjeUE5SUh0OVhHNGdJQ0FnSUNCeVpXTjBTMlY1Y3k1bWIzSkZZV05vS0d0bGVTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdsbUlDaHlaV04wVzJ0bGVWMHBJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYTmJhMlY1WFNBOUlISmxZM1JiYTJWNVhTQXZJSE5qWVd4bFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDJibTlrWlNBbUppQjJibTlrWlNBOVBUMGdKM1pwWlhkd2IzSjBKeWtnZTF4dUlDQWdJQ0FnYVc1bWJ5NXlaWE4xYkhRZ1BTQjBjblZsWEc0Z0lDQWdJQ0JwYm1adkxuTnBlbVVnUFNCeVpXTmhiR01vZTF4dUlDQWdJQ0FnSUNCM2FXUjBhRG9nWkc5amRXMWxiblF1Wkc5amRXMWxiblJGYkdWdFpXNTBMbU5zYVdWdWRGZHBaSFJvTEZ4dUlDQWdJQ0FnSUNCb1pXbG5hSFE2SUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkQzVqYkdsbGJuUklaV2xuYUhRc1hHNGdJQ0FnSUNBZ0lIUnZjRG9nTUN4Y2JpQWdJQ0FnSUNBZ2JHVm1kRG9nTUN4Y2JpQWdJQ0FnSUNBZ2NtbG5hSFE2SUdSdlkzVnRaVzUwTG1SdlkzVnRaVzUwUld4bGJXVnVkQzVqYkdsbGJuUlhhV1IwYUN4Y2JpQWdJQ0FnSUNBZ1ltOTBkRzl0T2lCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblF1WTJ4cFpXNTBTR1ZwWjJoMFhHNGdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ2FXNW1ieTVqYjI1MFpXNTBVMmw2WlNBOUlISmxZMkZzWXloN1hHNGdJQ0FnSUNBZ0lIZHBaSFJvT2lCa2IyTjFiV1Z1ZEM1a2IyTjFiV1Z1ZEVWc1pXMWxiblF1YjJabWMyVjBWMmxrZEdnc1hHNGdJQ0FnSUNBZ0lHaGxhV2RvZERvZ1pHOWpkVzFsYm5RdVpHOWpkVzFsYm5SRmJHVnRaVzUwTG05bVpuTmxkRWhsYVdkb2RGeHVJQ0FnSUNBZ2ZTbGNiaUFnSUNCOVhHNGdJQ0FnWld4elpTQnBaaUFvZG01dlpHVWdKaVlnZG01dlpHVXVKR1ZzS1NCN1hHNGdJQ0FnSUNCcGJtWnZMbkpsYzNWc2RDQTlJSFJ5ZFdWY2JpQWdJQ0FnSUdsdVptOHVjMmw2WlNBOUlISmxZMkZzWXloMmJtOWtaUzRrWld3dVoyVjBRbTkxYm1ScGJtZERiR2xsYm5SU1pXTjBLQ2twWEc0Z0lDQWdJQ0JwWmlBb2RtNXZaR1V1SkhKbFpuTXVhVzV1WlhJcElIdGNiaUFnSUNBZ0lDQWdhVzVtYnk1amIyNTBaVzUwVTJsNlpTQTlJSEpsWTJGc1l5aDdYRzRnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJSFp1YjJSbExpUnlaV1p6TG1sdWJtVnlMbTltWm5ObGRGZHBaSFJvTEZ4dUlDQWdJQ0FnSUNBZ0lHaGxhV2RvZERvZ2RtNXZaR1V1SkhKbFpuTXVhVzV1WlhJdWIyWm1jMlYwU0dWcFoyaDBYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0JsYkhObElIdGNiaUFnSUNBZ0lDQWdhVzVtYnk1amIyNTBaVzUwVTJsNlpTQTlJSEpsWTJGc1l5aDdYRzRnSUNBZ0lDQWdJQ0FnZDJsa2RHZzZJSFp1YjJSbExpUmxiQzV2Wm1aelpYUlhhV1IwYUN4Y2JpQWdJQ0FnSUNBZ0lDQm9aV2xuYUhRNklIWnViMlJsTGlSbGJDNXZabVp6WlhSSVpXbG5hSFJjYmlBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2JXVnpjMkZuWlNBOUlHbHVabTh1Y21WemRXeDBJRDhnYVc1bWJ5QTZJSHRjYmlBZ0lDQWdJSEpsYzNWc2REb2dabUZzYzJVc1hHNGdJQ0FnSUNCbGNuSk5jMmM2SUNkSmJHeGxaMkZzSUhCaGNtRnRaWFJsY2lkY2JpQWdJQ0I5WEc0Z0lDQWdZMkZzYkdKaFkyc2dKaVlnWTJGc2JHSmhZMnNvYldWemMyRm5aU2xjYmlBZ0lDQnlaWFIxY200Z2JXVnpjMkZuWlZ4dUlDQjlMRnh1SUNBdktpcGNiaUFnSUNvZ1ptOXlJR0ZrWkdsdVp5Qm1iMjUwUm1GalpWeHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYTJWNUlHWnZiblJHWVdObFhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0J6ZEhsc1pYTWdjblZzWlhOY2JpQWdJQ292WEc0Z0lHRmtaRkoxYkdVNklHWjFibU4wYVc5dUlDaHJaWGtzSUhOMGVXeGxjeWtnZTF4dUlDQWdJR052Ym5OMElIdGNiaUFnSUNBZ0lHTmhiV1ZzVkc5TFpXSmhZaXhjYmlBZ0lDQWdJR0Z3Y0dWdVpFTnpjMXh1SUNBZ0lIMGdQU0IxZEdsc2MxeHVJQ0FnSUd0bGVTQTlJR05oYldWc1ZHOUxaV0poWWloclpYa3BYRzRnSUNBZ2JHVjBJSE4wZVd4bGMxUmxlSFFnUFNBbkoxeHVJQ0FnSUdadmNpQW9ZMjl1YzNRZ2F5QnBiaUJ6ZEhsc1pYTXBJSHRjYmlBZ0lDQWdJR2xtSUNoemRIbHNaWE11YUdGelQzZHVVSEp2Y0dWeWRIa29heWtwSUh0Y2JpQWdJQ0FnSUNBZ2MzUjViR1Z6VkdWNGRDQXJQU0JqWVcxbGJGUnZTMlZpWVdJb2F5a2dLeUFuT2ljZ0t5QnpkSGxzWlhOYmExMGdLeUFuT3lkY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdZMjl1YzNRZ2MzUjViR1ZVWlhoMElEMGdZRUFrZTJ0bGVYMTdKSHR6ZEhsc1pYTlVaWGgwZlgxZ1hHNGdJQ0FnWVhCd1pXNWtRM056S0hOMGVXeGxWR1Y0ZEN3Z0oyUnZiUzFoWkdSbFpDMXlkV3hsY3ljcFhHNGdJSDFjYm4xY2JtVjRjRzl5ZENCa1pXWmhkV3gwSUh0Y2JpQWdhVzVwZENBb2QyVmxlQ2tnZTF4dUlDQWdJR052Ym5OMElHVjRkR1Z1WkV0bGVYTWdQU0IzWldWNExuVjBhV3h6TG1WNGRHVnVaRXRsZVhOY2JpQWdJQ0JsZUhSbGJtUkxaWGx6S0hWMGFXeHpMQ0IzWldWNExuVjBhV3h6TENCYkoyTmhiV1ZzVkc5TFpXSmhZaWNzSUNkaGNIQmxibVJEYzNNbkxDQW5hWE5CY25KaGVTZGRLVnh1SUNBZ0lIZGxaWGd1Y21WbmFYTjBaWEpOYjJSMWJHVW9KMlJ2YlNjc0lHUnZiU2xjYmlBZ2ZWeHVmVnh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMaUFnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVmNiaUFxSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVFnYkdsdGFYUmhkR2x2Ym5OY2JpQXFJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNHZLaXBjYmlBcUlHZHNiMkpoYkVWMlpXNTBJRUZRU1RwY2JpQXFJRUJrYjJNZ2FIUjBjRG92TDNkbFpYZ3VZWEJoWTJobExtOXlaeTlqYmk5eVpXWmxjbVZ1WTJWekwyMXZaSFZzWlhNdloyeHZZbUZzWlhabGJuUXVhSFJ0YkZ4dUlDb3ZYRzR2THlCMGNtRmpheUIyWVhKcFpYTWdhMmx1WkhNZ2IyWWdaWFpsYm5SeklHRnVaQ0JzYVhOMFpXNWxjbk11WEc1amIyNXpkQ0JvWVc1a2JHVnlWSEpoYTJWeUlEMGdlMzFjYmx4dVkyOXVjM1FnWjJ4dlltRnNSWFpsYm5RZ1BTQjdYRzRnSUM4cUtseHVJQ0FnS2lCaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5WEc0Z0lDQXFJRTVQVkVVNklHOXVaU0JqWVd4c1ltRmpheUJqWVc0Z2IyNXNlU0JpWlNCaWIzVnVaQ0IwYnlCMGFHVWdjMkZ0WlNCbGRtVnVkQ0J2Ym1ObExpQkNhVzVrSUdFZ1kyRnNiR0poWTJzZ2RIZHBZMlVnWkc5bGMyNG5kRnh1SUNBZ0tpQWdiV1ZoYmlCcGRDQjNhV3hzSUdKbElHTmhiR3hsWkNCMGQybGpaU0IzYUdWdUlIUm9aU0JsZG1WdWRDQm1hWEpsWkNCdmJtTmxMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1pYWjBJQzBnZEdobElHVjJaVzUwSUc1aGJXVWdkRzhnWVdSa0lHRWdiR2x6ZEdWdVpYSWdiMjR1WEc0Z0lDQXFMMXh1SUNCaFpHUkZkbVZ1ZEV4cGMzUmxibVZ5SUNobGRuUXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdhV1lnS0NGallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSEJ5YjJObGMzTXVaVzUyTGs1UFJFVmZSVTVXSUQwOVBTQW5aR1YyWld4dmNHMWxiblFuS1NCN1hHNGdJQ0FnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvWUZ0MmRXVXRjbVZ1WkdWeVhTQnRhWE56YVc1bklHTmhiR3hpWVdOcklHRnlaeUJwYmlCbmJHOWlZV3hGZG1WdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUxtQXBYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc0Z0lDQWdiR1YwSUdoaGJtUnNaWEp6SUQwZ2FHRnVaR3hsY2xSeVlXdGxjbHRsZG5SZFhHNGdJQ0FnYVdZZ0tDRm9ZVzVrYkdWeWN5a2dlMXh1SUNBZ0lDQWdhR0Z1Wkd4bGNuTWdQU0JvWVc1a2JHVnlWSEpoYTJWeVcyVjJkRjBnUFNCYlhWeHVJQ0FnSUgxY2JpQWdJQ0JqYjI1emRDQnNaVzRnUFNCb1lXNWtiR1Z5Y3k1c1pXNW5kR2hjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR3hsYmpzZ2FTc3JLU0I3WEc0Z0lDQWdJQ0JwWmlBb2FHRnVaR3hsY25OYmFWMGdQVDA5SUdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnSUNBZ0lDOHZJSFJvYVhNZ1kyRnNiR0poWTJzZ2FYTWdZV3h5WldGa2VTQmliM1Z1WkM0Z2JtOGdibVZsWkNCMGJ5QmlhVzVrSUdsMElHRm5ZV2x1TGx4dUlDQWdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2FHRnVaR3hsY25NdWNIVnphQ2hqWVd4c1ltRmpheWxjYmlBZ0lDQmtiMk4xYldWdWRDNWhaR1JGZG1WdWRFeHBjM1JsYm1WeUtHVjJkQ3dnWTJGc2JHSmhZMnNwWEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlISmxiVzkyWlVWMlpXNTBUR2x6ZEdWdVpYSmNiaUFnSUNvZ1RrOVVSVG9nY21WdGIzWmxJR0ZzYkNCMGFHVWdaWFpsYm5RZ2FHRnVaR3hsY25NZ1ptOXlJSFJvWlNCemNHVmphV1pwWldRZ1pYWmxiblFnZEhsd1pTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUdWMmRDQXRJSFJvWlNCbGRtVnVkQ0J1WVcxbElIUnZJSEpsYlc5MlpTQmhJR3hwYzNSbGJtVnlJR1p5YjIwdVhHNGdJQ0FxTDF4dUlDQnlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlJQ2hsZG5RcElIdGNiaUFnSUNCamIyNXpkQ0JvWVc1a2JHVnljeUE5SUdoaGJtUnNaWEpVY21GclpYSmJaWFowWFZ4dUlDQWdJR2xtSUNnaGFHRnVaR3hsY25NcElIdGNiaUFnSUNBZ0lDOHZJR1YyZENCb1lXNWtiR1Z5Y3lCb1lYTWdZbVZsYmlCaGJISmxZV1I1SUhKbGJXOTJaV1F1WEc0Z0lDQWdJQ0J5WlhSMWNtNWNiaUFnSUNCOVhHNGdJQ0FnYUdGdVpHeGxjbk11Wm05eVJXRmphQ2hqWWlBOVBpQmtiMk4xYldWdWRDNXlaVzF2ZG1WRmRtVnVkRXhwYzNSbGJtVnlLR1YyZEN3Z1kySXBLVnh1SUNBZ0lHUmxiR1YwWlNCb1lXNWtiR1Z5VkhKaGEyVnlXMlYyZEYxY2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJR2x1YVhRZ0tIZGxaWGdwSUh0Y2JpQWdJQ0IzWldWNExuSmxaMmx6ZEdWeVRXOWtkV3hsS0NkbmJHOWlZV3hGZG1WdWRDY3NJR2RzYjJKaGJFVjJaVzUwS1Z4dUlDQjlYRzU5WEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibU52Ym5OMElIRjFaWFZsSUQwZ1cxMWNibXhsZENCcGMxQnliMk5sYzNOcGJtY2dQU0JtWVd4elpWeHViR1YwSUhSdllYTjBWMmx1WEc1amIyNXpkQ0JVVDBGVFZGOVhTVTVmUTB4QlUxTmZUa0ZOUlNBOUlDZDNaV1Y0TFhSdllYTjBKMXh1WTI5dWMzUWdWRTlCVTFSZlZGSkJUbE5KVkVsUFRsOUVWVkpCVkVsUFRpQTlJREF1TkZ4dVhHNWpiMjV6ZENCRVJVWkJWVXhVWDBSVlVrRlVTVTlPSUQwZ01DNDRYRzVjYm1aMWJtTjBhVzl1SUhOb2IzZFViMkZ6ZEZkcGJtUnZkeUFvYlhObkxDQmpZV3hzWW1GamF5a2dlMXh1SUNCcFppQW9JWFJ2WVhOMFYybHVLU0I3WEc0Z0lDQWdkRzloYzNSWGFXNGdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGthWFluS1Z4dUlDQWdJSFJ2WVhOMFYybHVMbU5zWVhOelRHbHpkQzVoWkdRb1ZFOUJVMVJmVjBsT1gwTk1RVk5UWDA1QlRVVXBYRzRnSUNBZ2RHOWhjM1JYYVc0dVkyeGhjM05NYVhOMExtRmtaQ2duYUdsa1pTY3BYRzRnSUNBZ1pHOWpkVzFsYm5RdVltOWtlUzVoY0hCbGJtUkRhR2xzWkNoMGIyRnpkRmRwYmlsY2JpQWdmVnh1SUNCMGIyRnpkRmRwYmk1MFpYaDBRMjl1ZEdWdWRDQTlJRzF6WjF4dUlDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwYjJGemRGZHBiaTVqYkdGemMweHBjM1F1Y21WdGIzWmxLQ2RvYVdSbEp5bGNiaUFnSUNCallXeHNZbUZqYXlBbUppQmpZV3hzWW1GamF5Z3BYRzRnSUgwc0lERTJLVnh1ZlZ4dVhHNW1kVzVqZEdsdmJpQm9hV1JsVkc5aGMzUlhhVzVrYjNjZ0tHTmhiR3hpWVdOcktTQjdYRzRnSUdsbUlDZ2hkRzloYzNSWGFXNHBJSHRjYmlBZ0lDQnlaWFIxY201Y2JpQWdmVnh1SUNCMGIyRnpkRmRwYmk1amJHRnpjMHhwYzNRdVlXUmtLQ2RvYVdSbEp5bGNiaUFnYzJWMFZHbHRaVzkxZENobWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ1kyRnNiR0poWTJzZ0ppWWdZMkZzYkdKaFkyc29LVnh1SUNCOUxDQlVUMEZUVkY5VVVrRk9VMGxVU1U5T1gwUlZVa0ZVU1U5T0lDb2dNVEF3TUNsY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdlMXh1SUNCd2RYTm9PaUJtZFc1amRHbHZiaUFvYlhObkxDQmtkWEpoZEdsdmJpa2dlMXh1SUNBZ0lIRjFaWFZsTG5CMWMyZ29lMXh1SUNBZ0lDQWdiWE5uT2lCdGMyY3NYRzRnSUNBZ0lDQmtkWEpoZEdsdmJqb2daSFZ5WVhScGIyNGdmSHdnUkVWR1FWVk1WRjlFVlZKQlZFbFBUbHh1SUNBZ0lIMHBYRzRnSUNBZ2RHaHBjeTV6YUc5M0tDbGNiaUFnZlN4Y2JseHVJQ0J6YUc5M09pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdZMjl1YzNRZ2RHaGhkQ0E5SUhSb2FYTmNibHh1SUNBZ0lDOHZJRUZzYkNCdFpYTnpZV2RsY3lCb1lXUWdZbVZsYmlCMGIyRnpkR1ZrSUdGc2NtVmhaSGtzSUhOdklISmxiVzkyWlNCMGFHVWdkRzloYzNRZ2QybHVaRzkzTEZ4dUlDQWdJR2xtSUNnaGNYVmxkV1V1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0IwYjJGemRGZHBiaUFtSmlCMGIyRnpkRmRwYmk1d1lYSmxiblJPYjJSbExuSmxiVzkyWlVOb2FXeGtLSFJ2WVhOMFYybHVLVnh1SUNBZ0lDQWdkRzloYzNSWGFXNGdQU0J1ZFd4c1hHNGdJQ0FnSUNCeVpYUjFjbTVjYmlBZ0lDQjlYRzVjYmlBZ0lDQXZMeUIwYUdVZ2NISmxkbWx2ZFhNZ2RHOWhjM1FnYVhNZ2JtOTBJR1Z1WkdWa0lIbGxkQzVjYmlBZ0lDQnBaaUFvYVhOUWNtOWpaWE56YVc1bktTQjdYRzRnSUNBZ0lDQnlaWFIxY201Y2JpQWdJQ0I5WEc0Z0lDQWdhWE5RY205alpYTnphVzVuSUQwZ2RISjFaVnh1WEc0Z0lDQWdZMjl1YzNRZ2RHOWhjM1JKYm1adklEMGdjWFZsZFdVdWMyaHBablFvS1Z4dUlDQWdJSE5vYjNkVWIyRnpkRmRwYm1SdmR5aDBiMkZ6ZEVsdVptOHViWE5uTENCbWRXNWpkR2x2YmlBb0tTQjdYRzRnSUNBZ0lDQnpaWFJVYVcxbGIzVjBLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0FnSUNBZ2FHbGtaVlJ2WVhOMFYybHVaRzkzS0daMWJtTjBhVzl1SUNncElIdGNiaUFnSUNBZ0lDQWdJQ0JwYzFCeWIyTmxjM05wYm1jZ1BTQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNBZ0lIUm9ZWFF1YzJodmR5Z3BYRzRnSUNBZ0lDQWdJSDBwWEc0Z0lDQWdJQ0I5TENCMGIyRnpkRWx1Wm04dVpIVnlZWFJwYjI0Z0tpQXhNREF3S1Z4dUlDQWdJSDBwWEc0Z0lIMWNibjFjYmlJc0lpOHFYRzRnS2lCTWFXTmxibk5sWkNCMGJ5QjBhR1VnUVhCaFkyaGxJRk52Wm5SM1lYSmxJRVp2ZFc1a1lYUnBiMjRnS0VGVFJpa2dkVzVrWlhJZ2IyNWxYRzRnS2lCdmNpQnRiM0psSUdOdmJuUnlhV0oxZEc5eUlHeHBZMlZ1YzJVZ1lXZHlaV1Z0Wlc1MGN5NGdJRk5sWlNCMGFHVWdUazlVU1VORklHWnBiR1ZjYmlBcUlHUnBjM1J5YVdKMWRHVmtJSGRwZEdnZ2RHaHBjeUIzYjNKcklHWnZjaUJoWkdScGRHbHZibUZzSUdsdVptOXliV0YwYVc5dVhHNGdLaUJ5WldkaGNtUnBibWNnWTI5d2VYSnBaMmgwSUc5M2JtVnljMmhwY0M0Z0lGUm9aU0JCVTBZZ2JHbGpaVzV6WlhNZ2RHaHBjeUJtYVd4bFhHNGdLaUIwYnlCNWIzVWdkVzVrWlhJZ2RHaGxJRUZ3WVdOb1pTQk1hV05sYm5ObExDQldaWEp6YVc5dUlESXVNQ0FvZEdobFhHNGdLaUJjSWt4cFkyVnVjMlZjSWlrN0lIbHZkU0J0WVhrZ2JtOTBJSFZ6WlNCMGFHbHpJR1pwYkdVZ1pYaGpaWEIwSUdsdUlHTnZiWEJzYVdGdVkyVmNiaUFxSUhkcGRHZ2dkR2hsSUV4cFkyVnVjMlV1SUNCWmIzVWdiV0Y1SUc5aWRHRnBiaUJoSUdOdmNIa2diMllnZEdobElFeHBZMlZ1YzJVZ1lYUmNiaUFxWEc0Z0tpQWdJR2gwZEhBNkx5OTNkM2N1WVhCaFkyaGxMbTl5Wnk5c2FXTmxibk5sY3k5TVNVTkZUbE5GTFRJdU1GeHVJQ3BjYmlBcUlGVnViR1Z6Y3lCeVpYRjFhWEpsWkNCaWVTQmhjSEJzYVdOaFlteGxJR3hoZHlCdmNpQmhaM0psWldRZ2RHOGdhVzRnZDNKcGRHbHVaeXhjYmlBcUlITnZablIzWVhKbElHUnBjM1J5YVdKMWRHVmtJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxJR2x6SUdScGMzUnlhV0oxZEdWa0lHOXVJR0Z1WEc0Z0tpQmNJa0ZUSUVsVFhDSWdRa0ZUU1ZNc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkVsRlV5QlBVaUJEVDA1RVNWUkpUMDVUSUU5R0lFRk9XVnh1SUNvZ1MwbE9SQ3dnWldsMGFHVnlJR1Y0Y0hKbGMzTWdiM0lnYVcxd2JHbGxaQzRnSUZObFpTQjBhR1VnVEdsalpXNXpaU0JtYjNJZ2RHaGxYRzRnS2lCemNHVmphV1pwWXlCc1lXNW5kV0ZuWlNCbmIzWmxjbTVwYm1jZ2NHVnliV2x6YzJsdmJuTWdZVzVrSUd4cGJXbDBZWFJwYjI1elhHNGdLaUIxYm1SbGNpQjBhR1VnVEdsalpXNXpaUzVjYmlBcUwxeHVYRzR2THlCMGFHVnlaU0IzYVd4c0lHSmxJRzl1YkhrZ2IyNWxJR2x1YzNSaGJtTmxJRzltSUcxdlpHRnNMbHh1WTI5dWMzUWdUVTlFUVV4ZlYxSkJVRjlEVEVGVFV5QTlJQ2QzWldWNExXMXZaR0ZzTFhkeVlYQW5YRzVqYjI1emRDQk5UMFJCVEY5T1QwUkZYME5NUVZOVElEMGdKM2RsWlhndGJXOWtZV3d0Ym05a1pTZGNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdablZ1WTNScGIyNGdUVzlrWVd3Z0tDa2dlMXh1SUNCMGFHbHpMbmR5WVhBZ1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0UxUFJFRk1YMWRTUVZCZlEweEJVMU1wWEc0Z0lIUm9hWE11Ym05a1pTQTlJR1J2WTNWdFpXNTBMbkYxWlhKNVUyVnNaV04wYjNJb1RVOUVRVXhmVGs5RVJWOURURUZUVXlsY2JpQWdhV1lnS0NGMGFHbHpMbmR5WVhBcElIdGNiaUFnSUNCMGFHbHpMbU55WldGMFpWZHlZWEFvS1Z4dUlDQjlYRzRnSUdsbUlDZ2hkR2hwY3k1dWIyUmxLU0I3WEc0Z0lDQWdkR2hwY3k1amNtVmhkR1ZPYjJSbEtDbGNiaUFnZlZ4dUlDQjBhR2x6TG1Oc1pXRnlUbTlrWlNncFhHNGdJSFJvYVhNdVkzSmxZWFJsVG05a1pVTnZiblJsYm5Rb0tWeHVJQ0IwYUdsekxtSnBibVJGZG1WdWRITW9LVnh1ZlZ4dVhHNU5iMlJoYkM1d2NtOTBiM1I1Y0dVZ1BTQjdYRzVjYmlBZ2MyaHZkem9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhSb2FYTXVkM0poY0M1emRIbHNaUzVrYVhOd2JHRjVJRDBnSjJKc2IyTnJKMXh1SUNBZ0lIUm9hWE11Ym05a1pTNWpiR0Z6YzB4cGMzUXVjbVZ0YjNabEtDZG9hV1JsSnlsY2JpQWdmU3hjYmx4dUlDQmtaWE4wY205NU9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdaRzlqZFcxbGJuUXVZbTlrZVM1eVpXMXZkbVZEYUdsc1pDaDBhR2x6TG5keVlYQXBYRzRnSUNBZ1pHOWpkVzFsYm5RdVltOWtlUzV5WlcxdmRtVkRhR2xzWkNoMGFHbHpMbTV2WkdVcFhHNGdJQ0FnZEdocGN5NTNjbUZ3SUQwZ2JuVnNiRnh1SUNBZ0lIUm9hWE11Ym05a1pTQTlJRzUxYkd4Y2JpQWdmU3hjYmx4dUlDQmpjbVZoZEdWWGNtRndPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZEdocGN5NTNjbUZ3SUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5bGNiaUFnSUNCMGFHbHpMbmR5WVhBdVkyeGhjM05PWVcxbElEMGdUVTlFUVV4ZlYxSkJVRjlEVEVGVFUxeHVJQ0FnSUdSdlkzVnRaVzUwTG1KdlpIa3VZWEJ3Wlc1a1EyaHBiR1FvZEdocGN5NTNjbUZ3S1Z4dUlDQjlMRnh1WEc0Z0lHTnlaV0YwWlU1dlpHVTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxtNXZaR1VnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktWeHVJQ0FnSUhSb2FYTXVibTlrWlM1amJHRnpjMHhwYzNRdVlXUmtLRTFQUkVGTVgwNVBSRVZmUTB4QlUxTXNJQ2RvYVdSbEp5bGNiaUFnSUNCa2IyTjFiV1Z1ZEM1aWIyUjVMbUZ3Y0dWdVpFTm9hV3hrS0hSb2FYTXVibTlrWlNsY2JpQWdmU3hjYmx4dUlDQmpiR1ZoY2s1dlpHVTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0IwYUdsekxtNXZaR1V1YVc1dVpYSklWRTFNSUQwZ0p5ZGNiaUFnZlN4Y2JseHVJQ0JqY21WaGRHVk9iMlJsUTI5dWRHVnVkRG9nWm5WdVkzUnBiMjRnS0NrZ2UxeHVYRzRnSUNBZ0x5OGdaRzhnYm05MGFHbHVaeTVjYmlBZ0lDQXZMeUJqYUdsc1pDQmpiR0Z6YzJWeklHTmhiaUJ2ZG1WeWNtbGtaU0IwYUdseklHMWxkR2h2WkM1Y2JpQWdmU3hjYmx4dUlDQmlhVzVrUlhabGJuUnpPaUJtZFc1amRHbHZiaUFvS1NCN1hHNGdJQ0FnZEdocGN5NTNjbUZ3TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRnS0dVcElIdGNiaUFnSUNBZ0lHVXVjSEpsZG1WdWRFUmxabUYxYkhRb0tWeHVJQ0FnSUNBZ1pTNXpkRzl3VUhKdmNHRm5ZWFJwYjI0b0tWeHVJQ0FnSUgwcFhHNGdJSDFjYm4xY2JpSXNJaThxWEc0Z0tpQk1hV05sYm5ObFpDQjBieUIwYUdVZ1FYQmhZMmhsSUZOdlpuUjNZWEpsSUVadmRXNWtZWFJwYjI0Z0tFRlRSaWtnZFc1a1pYSWdiMjVsWEc0Z0tpQnZjaUJ0YjNKbElHTnZiblJ5YVdKMWRHOXlJR3hwWTJWdWMyVWdZV2R5WldWdFpXNTBjeTRnSUZObFpTQjBhR1VnVGs5VVNVTkZJR1pwYkdWY2JpQXFJR1JwYzNSeWFXSjFkR1ZrSUhkcGRHZ2dkR2hwY3lCM2IzSnJJR1p2Y2lCaFpHUnBkR2x2Ym1Gc0lHbHVabTl5YldGMGFXOXVYRzRnS2lCeVpXZGhjbVJwYm1jZ1kyOXdlWEpwWjJoMElHOTNibVZ5YzJocGNDNGdJRlJvWlNCQlUwWWdiR2xqWlc1elpYTWdkR2hwY3lCbWFXeGxYRzRnS2lCMGJ5QjViM1VnZFc1a1pYSWdkR2hsSUVGd1lXTm9aU0JNYVdObGJuTmxMQ0JXWlhKemFXOXVJREl1TUNBb2RHaGxYRzRnS2lCY0lreHBZMlZ1YzJWY0lpazdJSGx2ZFNCdFlYa2dibTkwSUhWelpTQjBhR2x6SUdacGJHVWdaWGhqWlhCMElHbHVJR052YlhCc2FXRnVZMlZjYmlBcUlIZHBkR2dnZEdobElFeHBZMlZ1YzJVdUlDQlpiM1VnYldGNUlHOWlkR0ZwYmlCaElHTnZjSGtnYjJZZ2RHaGxJRXhwWTJWdWMyVWdZWFJjYmlBcVhHNGdLaUFnSUdoMGRIQTZMeTkzZDNjdVlYQmhZMmhsTG05eVp5OXNhV05sYm5ObGN5OU1TVU5GVGxORkxUSXVNRnh1SUNwY2JpQXFJRlZ1YkdWemN5QnlaWEYxYVhKbFpDQmllU0JoY0hCc2FXTmhZbXhsSUd4aGR5QnZjaUJoWjNKbFpXUWdkRzhnYVc0Z2QzSnBkR2x1Wnl4Y2JpQXFJSE52Wm5SM1lYSmxJR1JwYzNSeWFXSjFkR1ZrSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sSUdseklHUnBjM1J5YVdKMWRHVmtJRzl1SUdGdVhHNGdLaUJjSWtGVElFbFRYQ0lnUWtGVFNWTXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZFbEZVeUJQVWlCRFQwNUVTVlJKVDA1VElFOUdJRUZPV1Z4dUlDb2dTMGxPUkN3Z1pXbDBhR1Z5SUdWNGNISmxjM01nYjNJZ2FXMXdiR2xsWkM0Z0lGTmxaU0IwYUdVZ1RHbGpaVzV6WlNCbWIzSWdkR2hsWEc0Z0tpQnpjR1ZqYVdacFl5QnNZVzVuZFdGblpTQm5iM1psY201cGJtY2djR1Z5YldsemMybHZibk1nWVc1a0lHeHBiV2wwWVhScGIyNXpYRzRnS2lCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlM1Y2JpQXFMMXh1YVcxd2IzSjBJRTF2WkdGc0lHWnliMjBnSnk0dmJXOWtZV3duWEc1Y2JtTnZibk4wSUVOUFRsUkZUbFJmUTB4QlUxTWdQU0FuWTI5dWRHVnVkQ2RjYm1OdmJuTjBJRTFUUjE5RFRFRlRVeUE5SUNkamIyNTBaVzUwTFcxelp5ZGNibU52Ym5OMElFSlZWRlJQVGw5SFVrOVZVRjlEVEVGVFV5QTlJQ2RpZEc0dFozSnZkWEFuWEc1amIyNXpkQ0JDVlZSVVQwNWZRMHhCVTFNZ1BTQW5ZblJ1SjF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCbWRXNWpkR2x2YmlCQmJHVnlkQ0FvWTI5dVptbG5LU0I3WEc0Z0lIUm9hWE11YlhObklEMGdZMjl1Wm1sbkxtMWxjM05oWjJVZ2ZId2dKeWRjYmlBZ2RHaHBjeTVqWVd4c1ltRmpheUE5SUdOdmJtWnBaeTVqWVd4c1ltRmphMXh1SUNCMGFHbHpMbTlyVkdsMGJHVWdQU0JqYjI1bWFXY3ViMnRVYVhSc1pTQjhmQ0FuVDBzblhHNGdJRTF2WkdGc0xtTmhiR3dvZEdocGN5bGNiaUFnZEdocGN5NXViMlJsTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM2RsWlhndFlXeGxjblFuS1Z4dWZWeHVYRzVCYkdWeWRDNXdjbTkwYjNSNWNHVWdQU0JQWW1wbFkzUXVZM0psWVhSbEtFMXZaR0ZzTG5CeWIzUnZkSGx3WlNsY2JseHVRV3hsY25RdWNISnZkRzkwZVhCbExtTnlaV0YwWlU1dlpHVkRiMjUwWlc1MElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQmpiMjV6ZENCamIyNTBaVzUwSUQwZ1pHOWpkVzFsYm5RdVkzSmxZWFJsUld4bGJXVnVkQ2duWkdsMkp5bGNiaUFnWTI5dWRHVnVkQzVqYkdGemMweHBjM1F1WVdSa0tFTlBUbFJGVGxSZlEweEJVMU1wWEc0Z0lIUm9hWE11Ym05a1pTNWhjSEJsYm1SRGFHbHNaQ2hqYjI1MFpXNTBLVnh1WEc0Z0lHTnZibk4wSUcxelp5QTlJR1J2WTNWdFpXNTBMbU55WldGMFpVVnNaVzFsYm5Rb0oyUnBkaWNwWEc0Z0lHMXpaeTVqYkdGemMweHBjM1F1WVdSa0tFMVRSMTlEVEVGVFV5bGNiaUFnYlhObkxtRndjR1Z1WkVOb2FXeGtLR1J2WTNWdFpXNTBMbU55WldGMFpWUmxlSFJPYjJSbEtIUm9hWE11YlhObktTbGNiaUFnWTI5dWRHVnVkQzVoY0hCbGJtUkRhR2xzWkNodGMyY3BYRzVjYmlBZ1kyOXVjM1FnWW5WMGRHOXVSM0p2ZFhBZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nka2FYWW5LVnh1SUNCaWRYUjBiMjVIY205MWNDNWpiR0Z6YzB4cGMzUXVZV1JrS0VKVlZGUlBUbDlIVWs5VlVGOURURUZUVXlsY2JpQWdkR2hwY3k1dWIyUmxMbUZ3Y0dWdVpFTm9hV3hrS0dKMWRIUnZia2R5YjNWd0tWeHVJQ0JqYjI1emRDQmlkWFIwYjI0Z1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nka2FYWW5LVnh1SUNCaWRYUjBiMjR1WTJ4aGMzTk1hWE4wTG1Ga1pDaENWVlJVVDA1ZlEweEJVMU1zSUNkaGJHVnlkQzF2YXljcFhHNGdJR0oxZEhSdmJpNWhjSEJsYm1SRGFHbHNaQ2hrYjJOMWJXVnVkQzVqY21WaGRHVlVaWGgwVG05a1pTaDBhR2x6TG05clZHbDBiR1VwS1Z4dUlDQmlkWFIwYjI1SGNtOTFjQzVoY0hCbGJtUkRhR2xzWkNoaWRYUjBiMjRwWEc1OVhHNWNia0ZzWlhKMExuQnliM1J2ZEhsd1pTNWlhVzVrUlhabGJuUnpJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0JOYjJSaGJDNXdjbTkwYjNSNWNHVXVZbWx1WkVWMlpXNTBjeTVqWVd4c0tIUm9hWE1wWEc0Z0lHTnZibk4wSUdKMWRIUnZiaUE5SUhSb2FYTXVibTlrWlM1eGRXVnllVk5sYkdWamRHOXlLQ2N1SnlBcklFSlZWRlJQVGw5RFRFRlRVeWxjYmlBZ1luVjBkRzl1TG1Ga1pFVjJaVzUwVEdsemRHVnVaWElvSjJOc2FXTnJKeXdnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0FnSUhSb2FYTXVaR1Z6ZEhKdmVTZ3BYRzRnSUNBZ2RHaHBjeTVqWVd4c1ltRmpheUFtSmlCMGFHbHpMbU5oYkd4aVlXTnJLQ2xjYmlBZ2ZTNWlhVzVrS0hSb2FYTXBLVnh1ZlZ4dUlpd2lMeXBjYmlBcUlFeHBZMlZ1YzJWa0lIUnZJSFJvWlNCQmNHRmphR1VnVTI5bWRIZGhjbVVnUm05MWJtUmhkR2x2YmlBb1FWTkdLU0IxYm1SbGNpQnZibVZjYmlBcUlHOXlJRzF2Y21VZ1kyOXVkSEpwWW5WMGIzSWdiR2xqWlc1elpTQmhaM0psWlcxbGJuUnpMaUFnVTJWbElIUm9aU0JPVDFSSlEwVWdabWxzWlZ4dUlDb2daR2x6ZEhKcFluVjBaV1FnZDJsMGFDQjBhR2x6SUhkdmNtc2dabTl5SUdGa1pHbDBhVzl1WVd3Z2FXNW1iM0p0WVhScGIyNWNiaUFxSUhKbFoyRnlaR2x1WnlCamIzQjVjbWxuYUhRZ2IzZHVaWEp6YUdsd0xpQWdWR2hsSUVGVFJpQnNhV05sYm5ObGN5QjBhR2x6SUdacGJHVmNiaUFxSUhSdklIbHZkU0IxYm1SbGNpQjBhR1VnUVhCaFkyaGxJRXhwWTJWdWMyVXNJRlpsY25OcGIyNGdNaTR3SUNoMGFHVmNiaUFxSUZ3aVRHbGpaVzV6WlZ3aUtUc2dlVzkxSUcxaGVTQnViM1FnZFhObElIUm9hWE1nWm1sc1pTQmxlR05sY0hRZ2FXNGdZMjl0Y0d4cFlXNWpaVnh1SUNvZ2QybDBhQ0IwYUdVZ1RHbGpaVzV6WlM0Z0lGbHZkU0J0WVhrZ2IySjBZV2x1SUdFZ1kyOXdlU0J2WmlCMGFHVWdUR2xqWlc1elpTQmhkRnh1SUNwY2JpQXFJQ0FnYUhSMGNEb3ZMM2QzZHk1aGNHRmphR1V1YjNKbkwyeHBZMlZ1YzJWekwweEpRMFZPVTBVdE1pNHdYRzRnS2x4dUlDb2dWVzVzWlhOeklISmxjWFZwY21Wa0lHSjVJR0Z3Y0d4cFkyRmliR1VnYkdGM0lHOXlJR0ZuY21WbFpDQjBieUJwYmlCM2NtbDBhVzVuTEZ4dUlDb2djMjltZEhkaGNtVWdaR2x6ZEhKcFluVjBaV1FnZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlVnYVhNZ1pHbHpkSEpwWW5WMFpXUWdiMjRnWVc1Y2JpQXFJRndpUVZNZ1NWTmNJaUJDUVZOSlV5d2dWMGxVU0U5VlZDQlhRVkpTUVU1VVNVVlRJRTlTSUVOUFRrUkpWRWxQVGxNZ1QwWWdRVTVaWEc0Z0tpQkxTVTVFTENCbGFYUm9aWElnWlhod2NtVnpjeUJ2Y2lCcGJYQnNhV1ZrTGlBZ1UyVmxJSFJvWlNCTWFXTmxibk5sSUdadmNpQjBhR1ZjYmlBcUlITndaV05wWm1saklHeGhibWQxWVdkbElHZHZkbVZ5Ym1sdVp5QndaWEp0YVhOemFXOXVjeUJoYm1RZ2JHbHRhWFJoZEdsdmJuTmNiaUFxSUhWdVpHVnlJSFJvWlNCTWFXTmxibk5sTGx4dUlDb3ZYRzVwYlhCdmNuUWdUVzlrWVd3Z1puSnZiU0FuTGk5dGIyUmhiQ2RjYmx4dVkyOXVjM1FnUTA5T1ZFVk9WRjlEVEVGVFV5QTlJQ2RqYjI1MFpXNTBKMXh1WTI5dWMzUWdUVk5IWDBOTVFWTlRJRDBnSjJOdmJuUmxiblF0YlhObkoxeHVZMjl1YzNRZ1FsVlVWRTlPWDBkU1QxVlFYME5NUVZOVElEMGdKMkowYmkxbmNtOTFjQ2RjYm1OdmJuTjBJRUpWVkZSUFRsOURURUZUVXlBOUlDZGlkRzRuWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUVOdmJtWnBjbTBnS0dOdmJtWnBaeWtnZTF4dUlDQjBhR2x6TG0xelp5QTlJR052Ym1acFp5NXRaWE56WVdkbElIeDhJQ2NuWEc0Z0lIUm9hWE11WTJGc2JHSmhZMnNnUFNCamIyNW1hV2N1WTJGc2JHSmhZMnRjYmlBZ2RHaHBjeTV2YTFScGRHeGxJRDBnWTI5dVptbG5MbTlyVkdsMGJHVWdmSHdnSjA5TEoxeHVJQ0IwYUdsekxtTmhibU5sYkZScGRHeGxJRDBnWTI5dVptbG5MbU5oYm1ObGJGUnBkR3hsSUh4OElDZERZVzVqWld3blhHNGdJRTF2WkdGc0xtTmhiR3dvZEdocGN5bGNiaUFnZEdocGN5NXViMlJsTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KM2RsWlhndFkyOXVabWx5YlNjcFhHNTlYRzVjYmtOdmJtWnBjbTB1Y0hKdmRHOTBlWEJsSUQwZ1QySnFaV04wTG1OeVpXRjBaU2hOYjJSaGJDNXdjbTkwYjNSNWNHVXBYRzVjYmtOdmJtWnBjbTB1Y0hKdmRHOTBlWEJsTG1OeVpXRjBaVTV2WkdWRGIyNTBaVzUwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCamIyNXpkQ0JqYjI1MFpXNTBJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25aR2wySnlsY2JpQWdZMjl1ZEdWdWRDNWpiR0Z6YzB4cGMzUXVZV1JrS0VOUFRsUkZUbFJmUTB4QlUxTXBYRzRnSUhSb2FYTXVibTlrWlM1aGNIQmxibVJEYUdsc1pDaGpiMjUwWlc1MEtWeHVYRzRnSUdOdmJuTjBJRzF6WnlBOUlHUnZZM1Z0Wlc1MExtTnlaV0YwWlVWc1pXMWxiblFvSjJScGRpY3BYRzRnSUcxelp5NWpiR0Z6YzB4cGMzUXVZV1JrS0UxVFIxOURURUZUVXlsY2JpQWdiWE5uTG1Gd2NHVnVaRU5vYVd4a0tHUnZZM1Z0Wlc1MExtTnlaV0YwWlZSbGVIUk9iMlJsS0hSb2FYTXViWE5uS1NsY2JpQWdZMjl1ZEdWdWRDNWhjSEJsYm1SRGFHbHNaQ2h0YzJjcFhHNWNiaUFnWTI5dWMzUWdZblYwZEc5dVIzSnZkWEFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktWeHVJQ0JpZFhSMGIyNUhjbTkxY0M1amJHRnpjMHhwYzNRdVlXUmtLRUpWVkZSUFRsOUhVazlWVUY5RFRFRlRVeWxjYmlBZ2RHaHBjeTV1YjJSbExtRndjR1Z1WkVOb2FXeGtLR0oxZEhSdmJrZHliM1Z3S1Z4dUlDQmpiMjV6ZENCaWRHNVBheUE5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcFhHNGdJR0owYms5ckxtRndjR1Z1WkVOb2FXeGtLR1J2WTNWdFpXNTBMbU55WldGMFpWUmxlSFJPYjJSbEtIUm9hWE11YjJ0VWFYUnNaU2twWEc0Z0lHSjBiazlyTG1Oc1lYTnpUR2x6ZEM1aFpHUW9KMkowYmkxdmF5Y3NJRUpWVkZSUFRsOURURUZUVXlsY2JpQWdZMjl1YzNRZ1luUnVRMkZ1WTJWc0lEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWxjYmlBZ1luUnVRMkZ1WTJWc0xtRndjR1Z1WkVOb2FXeGtLR1J2WTNWdFpXNTBMbU55WldGMFpWUmxlSFJPYjJSbEtIUm9hWE11WTJGdVkyVnNWR2wwYkdVcEtWeHVJQ0JpZEc1RFlXNWpaV3d1WTJ4aGMzTk1hWE4wTG1Ga1pDZ25ZblJ1TFdOaGJtTmxiQ2NzSUVKVlZGUlBUbDlEVEVGVFV5bGNiaUFnWW5WMGRHOXVSM0p2ZFhBdVlYQndaVzVrUTJocGJHUW9ZblJ1VDJzcFhHNGdJR0oxZEhSdmJrZHliM1Z3TG1Gd2NHVnVaRU5vYVd4a0tHSjBia05oYm1ObGJDbGNiaUFnZEdocGN5NXViMlJsTG1Gd2NHVnVaRU5vYVd4a0tHSjFkSFJ2YmtkeWIzVndLVnh1ZlZ4dVhHNURiMjVtYVhKdExuQnliM1J2ZEhsd1pTNWlhVzVrUlhabGJuUnpJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHVJQ0JOYjJSaGJDNXdjbTkwYjNSNWNHVXVZbWx1WkVWMlpXNTBjeTVqWVd4c0tIUm9hWE1wWEc0Z0lHTnZibk4wSUdKMGJrOXJJRDBnZEdocGN5NXViMlJsTG5GMVpYSjVVMlZzWldOMGIzSW9KeTRuSUNzZ1FsVlVWRTlPWDBOTVFWTlRJQ3NnSnk1aWRHNHRiMnNuS1Z4dUlDQmpiMjV6ZENCaWRHNURZVzVqWld3Z1BTQjBhR2x6TG01dlpHVXVjWFZsY25sVFpXeGxZM1J2Y2lnbkxpY2dLeUJDVlZSVVQwNWZRMHhCVTFNZ0t5QW5MbUowYmkxallXNWpaV3duS1Z4dUlDQmlkRzVQYXk1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCMGFHbHpMbVJsYzNSeWIza29LVnh1SUNBZ0lIUm9hWE11WTJGc2JHSmhZMnNnSmlZZ2RHaHBjeTVqWVd4c1ltRmpheWgwYUdsekxtOXJWR2wwYkdVcFhHNGdJSDB1WW1sdVpDaDBhR2x6S1NsY2JpQWdZblJ1UTJGdVkyVnNMbUZrWkVWMlpXNTBUR2x6ZEdWdVpYSW9KMk5zYVdOckp5d2dablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJSFJvYVhNdVpHVnpkSEp2ZVNncFhHNGdJQ0FnZEdocGN5NWpZV3hzWW1GamF5QW1KaUIwYUdsekxtTmhiR3hpWVdOcktIUm9hWE11WTJGdVkyVnNWR2wwYkdVcFhHNGdJSDB1WW1sdVpDaDBhR2x6S1NsY2JuMWNiaUlzSWk4cVhHNGdLaUJNYVdObGJuTmxaQ0IwYnlCMGFHVWdRWEJoWTJobElGTnZablIzWVhKbElFWnZkVzVrWVhScGIyNGdLRUZUUmlrZ2RXNWtaWElnYjI1bFhHNGdLaUJ2Y2lCdGIzSmxJR052Ym5SeWFXSjFkRzl5SUd4cFkyVnVjMlVnWVdkeVpXVnRaVzUwY3k0Z0lGTmxaU0IwYUdVZ1RrOVVTVU5GSUdacGJHVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIZHBkR2dnZEdocGN5QjNiM0pySUdadmNpQmhaR1JwZEdsdmJtRnNJR2x1Wm05eWJXRjBhVzl1WEc0Z0tpQnlaV2RoY21ScGJtY2dZMjl3ZVhKcFoyaDBJRzkzYm1WeWMyaHBjQzRnSUZSb1pTQkJVMFlnYkdsalpXNXpaWE1nZEdocGN5Qm1hV3hsWEc0Z0tpQjBieUI1YjNVZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsWEc0Z0tpQmNJa3hwWTJWdWMyVmNJaWs3SUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJWY2JpQXFJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVJQ0JaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5eGNiaUFxSUhOdlpuUjNZWEpsSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVYRzRnS2lCY0lrRlRJRWxUWENJZ1FrRlRTVk1zSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dWeHVJQ29nUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNGdJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobFhHNGdLaUJ6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtJR3hwYldsMFlYUnBiMjV6WEc0Z0tpQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dWFXMXdiM0owSUUxdlpHRnNJR1p5YjIwZ0p5NHZiVzlrWVd3blhHNWNibU52Ym5OMElFTlBUbFJGVGxSZlEweEJVMU1nUFNBblkyOXVkR1Z1ZENkY2JtTnZibk4wSUUxVFIxOURURUZUVXlBOUlDZGpiMjUwWlc1MExXMXpaeWRjYm1OdmJuTjBJRUpWVkZSUFRsOUhVazlWVUY5RFRFRlRVeUE5SUNkaWRHNHRaM0p2ZFhBblhHNWpiMjV6ZENCQ1ZWUlVUMDVmUTB4QlUxTWdQU0FuWW5SdUoxeHVZMjl1YzNRZ1NVNVFWVlJmVjFKQlVGOURURUZUVXlBOUlDZHBibkIxZEMxM2NtRndKMXh1WTI5dWMzUWdTVTVRVlZSZlEweEJVMU1nUFNBbmFXNXdkWFFuWEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUdaMWJtTjBhVzl1SUZCeWIyMXdkQ0FvWTI5dVptbG5LU0I3WEc0Z0lIUm9hWE11YlhObklEMGdZMjl1Wm1sbkxtMWxjM05oWjJVZ2ZId2dKeWRjYmlBZ2RHaHBjeTVrWldaaGRXeDBUWE5uSUQwZ1kyOXVabWxuTG1SbFptRjFiSFFnZkh3Z0p5ZGNiaUFnZEdocGN5NWpZV3hzWW1GamF5QTlJR052Ym1acFp5NWpZV3hzWW1GamExeHVJQ0IwYUdsekxtOXJWR2wwYkdVZ1BTQmpiMjVtYVdjdWIydFVhWFJzWlNCOGZDQW5UMHNuWEc0Z0lIUm9hWE11WTJGdVkyVnNWR2wwYkdVZ1BTQmpiMjVtYVdjdVkyRnVZMlZzVkdsMGJHVWdmSHdnSjBOaGJtTmxiQ2RjYmlBZ1RXOWtZV3d1WTJGc2JDaDBhR2x6S1Z4dUlDQjBhR2x6TG01dlpHVXVZMnhoYzNOTWFYTjBMbUZrWkNnbmQyVmxlQzF3Y205dGNIUW5LVnh1ZlZ4dVhHNVFjbTl0Y0hRdWNISnZkRzkwZVhCbElEMGdUMkpxWldOMExtTnlaV0YwWlNoTmIyUmhiQzV3Y205MGIzUjVjR1VwWEc1Y2JsQnliMjF3ZEM1d2NtOTBiM1I1Y0dVdVkzSmxZWFJsVG05a1pVTnZiblJsYm5RZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lHTnZibk4wSUdOdmJuUmxiblFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktWeHVJQ0JqYjI1MFpXNTBMbU5zWVhOelRHbHpkQzVoWkdRb1EwOU9WRVZPVkY5RFRFRlRVeWxjYmlBZ2RHaHBjeTV1YjJSbExtRndjR1Z1WkVOb2FXeGtLR052Ym5SbGJuUXBYRzVjYmlBZ1kyOXVjM1FnYlhObklEMGdaRzlqZFcxbGJuUXVZM0psWVhSbFJXeGxiV1Z1ZENnblpHbDJKeWxjYmlBZ2JYTm5MbU5zWVhOelRHbHpkQzVoWkdRb1RWTkhYME5NUVZOVEtWeHVJQ0J0YzJjdVlYQndaVzVrUTJocGJHUW9aRzlqZFcxbGJuUXVZM0psWVhSbFZHVjRkRTV2WkdVb2RHaHBjeTV0YzJjcEtWeHVJQ0JqYjI1MFpXNTBMbUZ3Y0dWdVpFTm9hV3hrS0cxelp5bGNibHh1SUNCamIyNXpkQ0JwYm5CMWRGZHlZWEFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RrYVhZbktWeHVJQ0JwYm5CMWRGZHlZWEF1WTJ4aGMzTk1hWE4wTG1Ga1pDaEpUbEJWVkY5WFVrRlFYME5NUVZOVEtWeHVJQ0JqYjI1MFpXNTBMbUZ3Y0dWdVpFTm9hV3hrS0dsdWNIVjBWM0poY0NsY2JpQWdZMjl1YzNRZ2FXNXdkWFFnUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2RwYm5CMWRDY3BYRzRnSUdsdWNIVjBMbU5zWVhOelRHbHpkQzVoWkdRb1NVNVFWVlJmUTB4QlUxTXBYRzRnSUdsdWNIVjBMblI1Y0dVZ1BTQW5kR1Y0ZENkY2JpQWdhVzV3ZFhRdVlYVjBiMlp2WTNWeklEMGdkSEoxWlZ4dUlDQnBibkIxZEM1d2JHRmpaV2h2YkdSbGNpQTlJSFJvYVhNdVpHVm1ZWFZzZEUxeloxeHVJQ0JwYm5CMWRGZHlZWEF1WVhCd1pXNWtRMmhwYkdRb2FXNXdkWFFwWEc1Y2JpQWdZMjl1YzNRZ1luVjBkRzl1UjNKdmRYQWdQU0JrYjJOMWJXVnVkQzVqY21WaGRHVkZiR1Z0Wlc1MEtDZGthWFluS1Z4dUlDQmlkWFIwYjI1SGNtOTFjQzVqYkdGemMweHBjM1F1WVdSa0tFSlZWRlJQVGw5SFVrOVZVRjlEVEVGVFV5bGNiaUFnWTI5dWMzUWdZblJ1VDJzZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0Nka2FYWW5LVnh1SUNCaWRHNVBheTVoY0hCbGJtUkRhR2xzWkNoa2IyTjFiV1Z1ZEM1amNtVmhkR1ZVWlhoMFRtOWtaU2gwYUdsekxtOXJWR2wwYkdVcEtWeHVJQ0JpZEc1UGF5NWpiR0Z6YzB4cGMzUXVZV1JrS0NkaWRHNHRiMnNuTENCQ1ZWUlVUMDVmUTB4QlUxTXBYRzRnSUdOdmJuTjBJR0owYmtOaGJtTmxiQ0E5SUdSdlkzVnRaVzUwTG1OeVpXRjBaVVZzWlcxbGJuUW9KMlJwZGljcFhHNGdJR0owYmtOaGJtTmxiQzVoY0hCbGJtUkRhR2xzWkNoa2IyTjFiV1Z1ZEM1amNtVmhkR1ZVWlhoMFRtOWtaU2gwYUdsekxtTmhibU5sYkZScGRHeGxLU2xjYmlBZ1luUnVRMkZ1WTJWc0xtTnNZWE56VEdsemRDNWhaR1FvSjJKMGJpMWpZVzVqWld3bkxDQkNWVlJVVDA1ZlEweEJVMU1wWEc0Z0lHSjFkSFJ2YmtkeWIzVndMbUZ3Y0dWdVpFTm9hV3hrS0dKMGJrOXJLVnh1SUNCaWRYUjBiMjVIY205MWNDNWhjSEJsYm1SRGFHbHNaQ2hpZEc1RFlXNWpaV3dwWEc0Z0lIUm9hWE11Ym05a1pTNWhjSEJsYm1SRGFHbHNaQ2hpZFhSMGIyNUhjbTkxY0NsY2JuMWNibHh1VUhKdmJYQjBMbkJ5YjNSdmRIbHdaUzVpYVc1a1JYWmxiblJ6SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNCTmIyUmhiQzV3Y205MGIzUjVjR1V1WW1sdVpFVjJaVzUwY3k1allXeHNLSFJvYVhNcFhHNGdJR052Ym5OMElHSjBiazlySUQwZ2RHaHBjeTV1YjJSbExuRjFaWEo1VTJWc1pXTjBiM0lvSnk0bklDc2dRbFZVVkU5T1gwTk1RVk5USUNzZ0p5NWlkRzR0YjJzbktWeHVJQ0JqYjI1emRDQmlkRzVEWVc1alpXd2dQU0IwYUdsekxtNXZaR1V1Y1hWbGNubFRaV3hsWTNSdmNpZ25MaWNnS3lCQ1ZWUlVUMDVmUTB4QlUxTWdLeUFuTG1KMGJpMWpZVzVqWld3bktWeHVJQ0JqYjI1emRDQjBhR0YwSUQwZ2RHaHBjMXh1SUNCaWRHNVBheTVoWkdSRmRtVnVkRXhwYzNSbGJtVnlLQ2RqYkdsamF5Y3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdJQ0JqYjI1emRDQjJZV3dnUFNCa2IyTjFiV1Z1ZEM1eGRXVnllVk5sYkdWamRHOXlLQ2RwYm5CMWRDY3BMblpoYkhWbFhHNGdJQ0FnZEdocGN5NWtaWE4wY205NUtDbGNiaUFnSUNCMGFHbHpMbU5oYkd4aVlXTnJJQ1ltSUhSb2FYTXVZMkZzYkdKaFkyc29lMXh1SUNBZ0lDQWdjbVZ6ZFd4ME9pQjBhR0YwTG05clZHbDBiR1VzWEc0Z0lDQWdJQ0JrWVhSaE9pQjJZV3hjYmlBZ0lDQjlLVnh1SUNCOUxtSnBibVFvZEdocGN5a3BYRzRnSUdKMGJrTmhibU5sYkM1aFpHUkZkbVZ1ZEV4cGMzUmxibVZ5S0NkamJHbGpheWNzSUdaMWJtTjBhVzl1SUNncElIdGNiaUFnSUNCamIyNXpkQ0IyWVd3Z1BTQmtiMk4xYldWdWRDNXhkV1Z5ZVZObGJHVmpkRzl5S0NkcGJuQjFkQ2NwTG5aaGJIVmxYRzRnSUNBZ2RHaHBjeTVrWlhOMGNtOTVLQ2xjYmlBZ0lDQjBhR2x6TG1OaGJHeGlZV05ySUNZbUlIUm9hWE11WTJGc2JHSmhZMnNvZTF4dUlDQWdJQ0FnY21WemRXeDBPaUIwYUdGMExtTmhibU5sYkZScGRHeGxMRnh1SUNBZ0lDQWdaR0YwWVRvZ2RtRnNYRzRnSUNBZ2ZTbGNiaUFnZlM1aWFXNWtLSFJvYVhNcEtWeHVmVnh1SWl3aUx5cGNiaUFxSUV4cFkyVnVjMlZrSUhSdklIUm9aU0JCY0dGamFHVWdVMjltZEhkaGNtVWdSbTkxYm1SaGRHbHZiaUFvUVZOR0tTQjFibVJsY2lCdmJtVmNiaUFxSUc5eUlHMXZjbVVnWTI5dWRISnBZblYwYjNJZ2JHbGpaVzV6WlNCaFozSmxaVzFsYm5SekxpQWdVMlZsSUhSb1pTQk9UMVJKUTBVZ1ptbHNaVnh1SUNvZ1pHbHpkSEpwWW5WMFpXUWdkMmwwYUNCMGFHbHpJSGR2Y21zZ1ptOXlJR0ZrWkdsMGFXOXVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQXFJSEpsWjJGeVpHbHVaeUJqYjNCNWNtbG5hSFFnYjNkdVpYSnphR2x3TGlBZ1ZHaGxJRUZUUmlCc2FXTmxibk5sY3lCMGFHbHpJR1pwYkdWY2JpQXFJSFJ2SUhsdmRTQjFibVJsY2lCMGFHVWdRWEJoWTJobElFeHBZMlZ1YzJVc0lGWmxjbk5wYjI0Z01pNHdJQ2gwYUdWY2JpQXFJRndpVEdsalpXNXpaVndpS1RzZ2VXOTFJRzFoZVNCdWIzUWdkWE5sSUhSb2FYTWdabWxzWlNCbGVHTmxjSFFnYVc0Z1kyOXRjR3hwWVc1alpWeHVJQ29nZDJsMGFDQjBhR1VnVEdsalpXNXpaUzRnSUZsdmRTQnRZWGtnYjJKMFlXbHVJR0VnWTI5d2VTQnZaaUIwYUdVZ1RHbGpaVzV6WlNCaGRGeHVJQ3BjYmlBcUlDQWdhSFIwY0RvdkwzZDNkeTVoY0dGamFHVXViM0puTDJ4cFkyVnVjMlZ6TDB4SlEwVk9VMFV0TWk0d1hHNGdLbHh1SUNvZ1ZXNXNaWE56SUhKbGNYVnBjbVZrSUdKNUlHRndjR3hwWTJGaWJHVWdiR0YzSUc5eUlHRm5jbVZsWkNCMGJ5QnBiaUIzY21sMGFXNW5MRnh1SUNvZ2MyOW1kSGRoY21VZ1pHbHpkSEpwWW5WMFpXUWdkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVWdhWE1nWkdsemRISnBZblYwWldRZ2IyNGdZVzVjYmlBcUlGd2lRVk1nU1ZOY0lpQkNRVk5KVXl3Z1YwbFVTRTlWVkNCWFFWSlNRVTVVU1VWVElFOVNJRU5QVGtSSlZFbFBUbE1nVDBZZ1FVNVpYRzRnS2lCTFNVNUVMQ0JsYVhSb1pYSWdaWGh3Y21WemN5QnZjaUJwYlhCc2FXVmtMaUFnVTJWbElIUm9aU0JNYVdObGJuTmxJR1p2Y2lCMGFHVmNiaUFxSUhOd1pXTnBabWxqSUd4aGJtZDFZV2RsSUdkdmRtVnlibWx1WnlCd1pYSnRhWE56YVc5dWN5QmhibVFnYkdsdGFYUmhkR2x2Ym5OY2JpQXFJSFZ1WkdWeUlIUm9aU0JNYVdObGJuTmxMbHh1SUNvdlhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCZ1hHNHVkMlZsZUMxMGIyRnpkQ0I3WEc0Z0lHWnZiblF0YzJsNlpUb2dNQzQwTWpZMk5qZHlaVzA3WEc0Z0lHeHBibVV0YUdWcFoyaDBPaUF3TGpReU5qWTJOM0psYlR0Y2JpQWdjRzl6YVhScGIyNDZJR1pwZUdWa08xeHVJQ0I2TFdsdVpHVjRPaUF4T1RrNU9UazVPVGs1TzF4dUlDQmliM2d0YzJsNmFXNW5PaUJpYjNKa1pYSXRZbTk0TzF4dUlDQnRZWGd0ZDJsa2RHZzZJRGd3SlR0Y2JpQWdZbTkwZEc5dE9pQTFNQ1U3WEc0Z0lHeGxablE2SURVd0pUdGNiaUFnY0dGa1pHbHVaem9nTUM0eU1UTXpNek55WlcwN1hHNGdJR0poWTJ0bmNtOTFibVF0WTI5c2IzSTZJQ013TURBN1hHNGdJR052Ykc5eU9pQWpabVptTzF4dUlDQjBaWGgwTFdGc2FXZHVPaUJqWlc1MFpYSTdYRzRnSUc5d1lXTnBkSGs2SURBdU56dGNiaUFnTFhkbFltdHBkQzEwY21GdWMybDBhVzl1T2lCaGJHd2dNQzQwY3lCbFlYTmxMV2x1TFc5MWREdGNiaUFnTFcxdmVpMTBjbUZ1YzJsMGFXOXVPaUJoYkd3Z01DNDBjeUJsWVhObExXbHVMVzkxZER0Y2JpQWdMVzF6TFhSeVlXNXphWFJwYjI0NklHRnNiQ0F3TGpSeklHVmhjMlV0YVc0dGIzVjBPMXh1SUNCMGNtRnVjMmwwYVc5dU9pQmhiR3dnTUM0MGN5QmxZWE5sTFdsdUxXOTFkRHRjYmlBZ1ltOXlaR1Z5TFhKaFpHbDFjem9nTUM0d05qWTJOamR5WlcwN1hHNGdJQzEzWldKcmFYUXRkSEpoYm5ObWIzSnRPaUIwY21GdWMyeGhkR1ZZS0MwMU1DVXBPMXh1SUNBdGJXOTZMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsV0NndE5UQWxLVHRjYmlBZ0xXMXpMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsV0NndE5UQWxLVHRjYmlBZ2RISmhibk5tYjNKdE9pQjBjbUZ1YzJ4aGRHVllLQzAxTUNVcE8xeHVmVnh1WEc0dWQyVmxlQzEwYjJGemRDNW9hV1JsSUh0Y2JpQWdiM0JoWTJsMGVUb2dNRHRjYm4xY2JseHVMbmRsWlhndFlXeGxjblFnTG5kbFpYZ3RZV3hsY25RdGIyc2dlMXh1SUNCM2FXUjBhRG9nTVRBd0pUdGNibjFjYmx4dUxuZGxaWGd0WTI5dVptbHliU0F1WW5SdUxXZHliM1Z3SUM1aWRHNGdlMXh1SUNCbWJHOWhkRG9nYkdWbWREdGNiaUFnZDJsa2RHZzZJRFV3SlR0Y2JuMWNibHh1TG5kbFpYZ3RZMjl1Wm1seWJTQXVZblJ1TFdkeWIzVndJQzVpZEc0dVluUnVMVzlySUh0Y2JpQWdZbTl5WkdWeUxYSnBaMmgwT2lBd0xqQXhNek16TTNKbGJTQnpiMnhwWkNBalpHUmtPMXh1ZlZ4dVhHNHVkMlZsZUMxdGIyUmhiQzEzY21Gd0lIdGNiaUFnWkdsemNHeGhlVG9nYm05dVpUdGNiaUFnY0c5emFYUnBiMjQ2SUdacGVHVmtPMXh1SUNCNkxXbHVaR1Y0T2lBNU9UazVPVGs1T1RrN1hHNGdJSFJ2Y0RvZ01EdGNiaUFnYkdWbWREb2dNRHRjYmlBZ2QybGtkR2c2SURFd01DVTdYRzRnSUdobGFXZG9kRG9nTVRBd0pUdGNiaUFnWW1GamEyZHliM1Z1WkMxamIyeHZjam9nSXpBd01EdGNiaUFnYjNCaFkybDBlVG9nTUM0MU8xeHVmVnh1WEc0dWQyVmxlQzF0YjJSaGJDMXViMlJsSUh0Y2JpQWdjRzl6YVhScGIyNDZJR1pwZUdWa08xeHVJQ0I2TFdsdVpHVjRPaUE1T1RrNU9UazVPVGs1TzF4dUlDQjBiM0E2SURVd0pUdGNiaUFnYkdWbWREb2dOVEFsTzF4dUlDQjNhV1IwYURvZ05pNDJOalkyTmpkeVpXMDdYRzRnSUcxcGJpMW9aV2xuYUhRNklESXVOalkyTmpZM2NtVnRPMXh1SUNCaWIzSmtaWEl0Y21Ga2FYVnpPaUF3TGpBMk5qWTJOM0psYlR0Y2JpQWdMWGRsWW10cGRDMTBjbUZ1YzJadmNtMDZJSFJ5WVc1emJHRjBaU2d0TlRBbExDQXROVEFsS1R0Y2JpQWdMVzF2ZWkxMGNtRnVjMlp2Y20wNklIUnlZVzV6YkdGMFpTZ3ROVEFsTENBdE5UQWxLVHRjYmlBZ0xXMXpMWFJ5WVc1elptOXliVG9nZEhKaGJuTnNZWFJsS0MwMU1DVXNJQzAxTUNVcE8xeHVJQ0IwY21GdWMyWnZjbTA2SUhSeVlXNXpiR0YwWlNndE5UQWxMQ0F0TlRBbEtUdGNiaUFnWW1GamEyZHliM1Z1WkMxamIyeHZjam9nSTJabVpqdGNibjFjYmx4dUxuZGxaWGd0Ylc5a1lXd3RibTlrWlM1b2FXUmxJSHRjYmlBZ1pHbHpjR3hoZVRvZ2JtOXVaVHRjYm4xY2JseHVMbmRsWlhndGJXOWtZV3d0Ym05a1pTQXVZMjl1ZEdWdWRDQjdYRzRnSUdScGMzQnNZWGs2SUMxM1pXSnJhWFF0WW05NE8xeHVJQ0JrYVhOd2JHRjVPaUF0ZDJWaWEybDBMV1pzWlhnN1hHNGdJR1JwYzNCc1lYazZJQzF0YjNvdFltOTRPMXh1SUNCa2FYTndiR0Y1T2lBdGJYTXRabXhsZUdKdmVEdGNiaUFnWkdsemNHeGhlVG9nWm14bGVEdGNiaUFnTFhkbFltdHBkQzFpYjNndGIzSnBaVzUwT2lCMlpYSjBhV05oYkR0Y2JpQWdMWGRsWW10cGRDMW1iR1Y0TFdScGNtVmpkR2x2YmpvZ1kyOXNkVzF1TzF4dUlDQXRiVzk2TFdKdmVDMXZjbWxsYm5RNklIWmxjblJwWTJGc08xeHVJQ0F0Ylc5NkxXSnZlQzFrYVhKbFkzUnBiMjQ2SUc1dmNtMWhiRHRjYmlBZ0xXMXpMV1pzWlhndFpHbHlaV04wYVc5dU9pQmpiMngxYlc0N1hHNGdJQ0FnSUNCbWJHVjRMV1JwY21WamRHbHZiam9nWTI5c2RXMXVPMXh1SUNBdGQyVmlhMmwwTFdKdmVDMWhiR2xuYmpvZ1kyVnVkR1Z5TzF4dUlDQXRkMlZpYTJsMExXRnNhV2R1TFdsMFpXMXpPaUJqWlc1MFpYSTdYRzRnSUMxdGN5MW1iR1Y0TFdGc2FXZHVPaUJqWlc1MFpYSTdYRzRnSUMxdGIzb3RZbTk0TFdGc2FXZHVPaUJqWlc1MFpYSTdYRzRnSUMxdGN5MW1iR1Y0TFdGc2FXZHVPaUJqWlc1MFpYSTdYRzRnSUdGc2FXZHVMV2wwWlcxek9pQmpaVzUwWlhJN1hHNGdJQzEzWldKcmFYUXRZbTk0TFhCaFkyczZJR05sYm5SbGNqdGNiaUFnTFhkbFltdHBkQzFxZFhOMGFXWjVMV052Ym5SbGJuUTZJR05sYm5SbGNqdGNiaUFnTFcxdmVpMWliM2d0Y0dGamF6b2dZMlZ1ZEdWeU8xeHVJQ0F0YlhNdFpteGxlQzF3WVdOck9pQmpaVzUwWlhJN1hHNGdJR3AxYzNScFpua3RZMjl1ZEdWdWREb2dZMlZ1ZEdWeU8xeHVJQ0IzYVdSMGFEb2dNVEF3SlR0Y2JpQWdiV2x1TFdobGFXZG9kRG9nTVM0NE5qWTJOamR5WlcwN1hHNGdJR0p2ZUMxemFYcHBibWM2SUdKdmNtUmxjaTFpYjNnN1hHNGdJR1p2Ym5RdGMybDZaVG9nTUM0ME1qWTJOamR5WlcwN1hHNGdJR3hwYm1VdGFHVnBaMmgwT2lBd0xqUXlOalkyTjNKbGJUdGNiaUFnY0dGa1pHbHVaem9nTUM0eU1UTXpNek55WlcwN1hHNGdJR0p2Y21SbGNpMWliM1IwYjIwNklEQXVNREV6TXpNemNtVnRJSE52Ykdsa0lDTmtaR1E3WEc1OVhHNWNiaTUzWldWNExXMXZaR0ZzTFc1dlpHVWdMbUowYmkxbmNtOTFjQ0I3WEc0Z0lIZHBaSFJvT2lBeE1EQWxPMXh1SUNCb1pXbG5hSFE2SURBdU9ISmxiVHRjYmlBZ1ptOXVkQzF6YVhwbE9pQXdMak0zTXpNek0zSmxiVHRjYmlBZ2RHVjRkQzFoYkdsbmJqb2dZMlZ1ZEdWeU8xeHVJQ0J0WVhKbmFXNDZJREE3WEc0Z0lIQmhaR1JwYm1jNklEQTdYRzRnSUdKdmNtUmxjam9nYm05dVpUdGNibjFjYmx4dUxuZGxaWGd0Ylc5a1lXd3RibTlrWlNBdVluUnVMV2R5YjNWd0lDNWlkRzRnZTF4dUlDQjBaWGgwTFdGc2FXZHVPaUJqWlc1MFpYSTdYRzU5WEc1Y2JpNTNaV1Y0TFcxdlpHRnNMVzV2WkdVZ0xtSjBiaTFuY205MWNDQXVZblJ1SUh0Y2JpQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y2JpQWdhR1ZwWjJoME9pQXdMamh5WlcwN1hHNGdJR3hwYm1VdGFHVnBaMmgwT2lBd0xqaHlaVzA3WEc0Z0lHMWhjbWRwYmpvZ01EdGNiaUFnY0dGa1pHbHVaem9nTUR0Y2JpQWdZbTl5WkdWeU9pQnViMjVsTzF4dUlDQmlZV05yWjNKdmRXNWtPaUJ1YjI1bE8xeHVJQ0IwWlhoMExXRnNhV2R1T2lCalpXNTBaWEk3WEc1OVhHNWNiaTUzWldWNExYQnliMjF3ZENBdWFXNXdkWFF0ZDNKaGNDQjdYRzRnSUdKdmVDMXphWHBwYm1jNklHSnZjbVJsY2kxaWIzZzdYRzRnSUhkcFpIUm9PaUF4TURBbE8xeHVJQ0J0WVhKbmFXNHRkRzl3T2lBd0xqRXpNek16TTNKbGJUdGNiaUFnYUdWcFoyaDBPaUF3TGprMmNtVnRPMXh1ZlZ4dVhHNHVkMlZsZUMxd2NtOXRjSFFnTG1sdWNIVjBMWGR5WVhBZ0xtbHVjSFYwSUh0Y2JpQWdZbTk0TFhOcGVtbHVaem9nWW05eVpHVnlMV0p2ZUR0Y2JpQWdkMmxrZEdnNklERXdNQ1U3WEc0Z0lHaGxhV2RvZERvZ01DNDFObkpsYlR0Y2JpQWdiR2x1WlMxb1pXbG5hSFE2SURBdU5UWnlaVzA3WEc0Z0lHWnZiblF0YzJsNlpUb2dNQzQwTWpZMk5qZHlaVzA3WEc0Z0lHSnZjbVJsY2pvZ01DNHdNVE16TXpOeVpXMGdjMjlzYVdRZ0l6azVPVHRjYm4xY2JseHVMbmRsWlhndGNISnZiWEIwSUM1aWRHNHRaM0p2ZFhBZ0xtSjBiaUI3WEc0Z0lHWnNiMkYwT2lCc1pXWjBPMXh1SUNCM2FXUjBhRG9nTlRBbE8xeHVmVnh1WEc0dWQyVmxlQzF3Y205dGNIUWdMbUowYmkxbmNtOTFjQ0F1WW5SdUxtSjBiaTF2YXlCN1hHNGdJR0p2Y21SbGNpMXlhV2RvZERvZ01DNHdNVE16TXpOeVpXMGdjMjlzYVdRZ0kyUmtaRHRjYm4xY2JtQmNiaUlzSWk4cVhHNGdLaUJNYVdObGJuTmxaQ0IwYnlCMGFHVWdRWEJoWTJobElGTnZablIzWVhKbElFWnZkVzVrWVhScGIyNGdLRUZUUmlrZ2RXNWtaWElnYjI1bFhHNGdLaUJ2Y2lCdGIzSmxJR052Ym5SeWFXSjFkRzl5SUd4cFkyVnVjMlVnWVdkeVpXVnRaVzUwY3k0Z0lGTmxaU0IwYUdVZ1RrOVVTVU5GSUdacGJHVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIZHBkR2dnZEdocGN5QjNiM0pySUdadmNpQmhaR1JwZEdsdmJtRnNJR2x1Wm05eWJXRjBhVzl1WEc0Z0tpQnlaV2RoY21ScGJtY2dZMjl3ZVhKcFoyaDBJRzkzYm1WeWMyaHBjQzRnSUZSb1pTQkJVMFlnYkdsalpXNXpaWE1nZEdocGN5Qm1hV3hsWEc0Z0tpQjBieUI1YjNVZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsWEc0Z0tpQmNJa3hwWTJWdWMyVmNJaWs3SUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJWY2JpQXFJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVJQ0JaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5eGNiaUFxSUhOdlpuUjNZWEpsSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVYRzRnS2lCY0lrRlRJRWxUWENJZ1FrRlRTVk1zSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dWeHVJQ29nUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNGdJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobFhHNGdLaUJ6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtJR3hwYldsMFlYUnBiMjV6WEc0Z0tpQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dWFXMXdiM0owSUhSdllYTjBJR1p5YjIwZ0p5NHZkRzloYzNRblhHNXBiWEJ2Y25RZ1FXeGxjblFnWm5KdmJTQW5MaTloYkdWeWRDZGNibWx0Y0c5eWRDQkRiMjVtYVhKdElHWnliMjBnSnk0dlkyOXVabWx5YlNkY2JtbHRjRzl5ZENCUWNtOXRjSFFnWm5KdmJTQW5MaTl3Y205dGNIUW5YRzVwYlhCdmNuUWdYMk56Y3lCbWNtOXRJQ2N1TDNOMGVXeGxKMXh1WEc0dkx5QlVUMFJQT2lCeVpYZHlhWFJsSUhSb1pTQnRiMlJoYkNCemRIbHNaWE5jYm1OdmJuTjBJRzF2WkdGc0lEMGdlMXh1WEc0Z0lDOHZJR1IxY21GMGFXOXVPaUJrWldaaGRXeDBJR2x6SURBdU9DQnpaV052Ym1SekxseHVJQ0IwYjJGemREb2dablZ1WTNScGIyNGdLR052Ym1acFp5a2dlMXh1SUNBZ0lIUnZZWE4wTG5CMWMyZ29ZMjl1Wm1sbkxtMWxjM05oWjJVc0lHTnZibVpwWnk1a2RYSmhkR2x2YmlsY2JpQWdmU3hjYmx4dUlDQXZMeUJqYjI1bWFXYzZYRzRnSUM4dklDQXRJRzFsYzNOaFoyVTZJSE4wY21sdVoxeHVJQ0F2THlBZ0xTQnZhMVJwZEd4bE9pQjBhWFJzWlNCdlppQnZheUJpZFhSMGIyNWNiaUFnTHk4Z0lDMGdZMkZzYkdKaFkydGNiaUFnWVd4bGNuUTZJR1oxYm1OMGFXOXVJQ2hqYjI1bWFXY3NJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdZMjl1Wm1sbkxtTmhiR3hpWVdOcklEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQWdJQ0FnWTJGc2JHSmhZMnNnSmlZZ1kyRnNiR0poWTJzb0tWeHVJQ0FnSUgxY2JpQWdJQ0J1WlhjZ1FXeGxjblFvWTI5dVptbG5LUzV6YUc5M0tDbGNiaUFnZlN4Y2JseHVJQ0F2THlCamIyNW1hV2M2WEc0Z0lDOHZJQ0F0SUcxbGMzTmhaMlU2SUhOMGNtbHVaMXh1SUNBdkx5QWdMU0J2YTFScGRHeGxPaUIwYVhSc1pTQnZaaUJ2YXlCaWRYUjBiMjVjYmlBZ0x5OGdJQzBnWTJGdVkyVnNWR2wwYkdVNklIUnBkR3hsSUc5bUlHTmhibU5sYkNCaWRYUjBiMjVjYmlBZ0x5OGdJQzBnWTJGc2JHSmhZMnRjYmlBZ1kyOXVabWx5YlRvZ1puVnVZM1JwYjI0Z0tHTnZibVpwWnl3Z1kyRnNiR0poWTJzcElIdGNiaUFnSUNCamIyNW1hV2N1WTJGc2JHSmhZMnNnUFNCbWRXNWpkR2x2YmlBb2RtRnNLU0I3WEc0Z0lDQWdJQ0JqWVd4c1ltRmpheUFtSmlCallXeHNZbUZqYXloMllXd3BYRzRnSUNBZ2ZWeHVJQ0FnSUc1bGR5QkRiMjVtYVhKdEtHTnZibVpwWnlrdWMyaHZkeWdwWEc0Z0lIMHNYRzVjYmlBZ0x5OGdZMjl1Wm1sbk9seHVJQ0F2THlBZ0xTQnRaWE56WVdkbE9pQnpkSEpwYm1kY2JpQWdMeThnSUMwZ2IydFVhWFJzWlRvZ2RHbDBiR1VnYjJZZ2Iyc2dZblYwZEc5dVhHNGdJQzh2SUNBdElHTmhibU5sYkZScGRHeGxPaUIwYVhSc1pTQnZaaUJqWVc1alpXd2dZblYwZEc5dVhHNGdJQzh2SUNBdElHTmhiR3hpWVdOclhHNGdJSEJ5YjIxd2REb2dablZ1WTNScGIyNGdLR052Ym1acFp5d2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQmpiMjVtYVdjdVkyRnNiR0poWTJzZ1BTQm1kVzVqZEdsdmJpQW9kbUZzS1NCN1hHNGdJQ0FnSUNCallXeHNZbUZqYXlBbUppQmpZV3hzWW1GamF5aDJZV3dwWEc0Z0lDQWdmVnh1SUNBZ0lHNWxkeUJRY205dGNIUW9ZMjl1Wm1sbktTNXphRzkzS0NsY2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCN1hHNGdJR2x1YVhRNklHWjFibU4wYVc5dUlDaFhaV1Y0S1NCN1hHNGdJQ0FnVjJWbGVDNTFkR2xzY3k1aGNIQmxibVJEYzNNb1gyTnpjeXdnSjNkbFpYZ3RiWFZrTFcxdlpHRnNKeWxjYmlBZ0lDQlhaV1Y0TG5KbFoybHpkR1Z5VFc5a2RXeGxLQ2R0YjJSaGJDY3NJRzF2WkdGc0tWeHVJQ0I5WEc1OVhHNGlMQ0l2S2x4dUlDb2dUR2xqWlc1elpXUWdkRzhnZEdobElFRndZV05vWlNCVGIyWjBkMkZ5WlNCR2IzVnVaR0YwYVc5dUlDaEJVMFlwSUhWdVpHVnlJRzl1WlZ4dUlDb2diM0lnYlc5eVpTQmpiMjUwY21saWRYUnZjaUJzYVdObGJuTmxJR0ZuY21WbGJXVnVkSE11SUNCVFpXVWdkR2hsSUU1UFZFbERSU0JtYVd4bFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCM2FYUm9JSFJvYVhNZ2QyOXlheUJtYjNJZ1lXUmthWFJwYjI1aGJDQnBibVp2Y20xaGRHbHZibHh1SUNvZ2NtVm5ZWEprYVc1bklHTnZjSGx5YVdkb2RDQnZkMjVsY25Ob2FYQXVJQ0JVYUdVZ1FWTkdJR3hwWTJWdWMyVnpJSFJvYVhNZ1ptbHNaVnh1SUNvZ2RHOGdlVzkxSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aVnh1SUNvZ1hDSk1hV05sYm5ObFhDSXBPeUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sWEc0Z0tpQjNhWFJvSUhSb1pTQk1hV05sYm5ObExpQWdXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc1hHNGdLaUJ6YjJaMGQyRnlaU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJseHVJQ29nWENKQlV5QkpVMXdpSUVKQlUwbFRMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxsY2JpQXFJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdUlDQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlZ4dUlDb2djM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpDQnNhVzFwZEdGMGFXOXVjMXh1SUNvZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYmx4dUx5b3FYRzRnS2lCT1lYWnBaMkYwYjNJZ2JXOWtkV3hsWEc0Z0tpOWNibU52Ym5OMElHNWhkbWxuWVhSdmNrMXZaSFZzWlNBOUlIdGNiaUFnY0hWemFEb2dablZ1WTNScGIyNGdLR052Ym1acFp5d2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQjNhVzVrYjNjdWJHOWpZWFJwYjI0dWFISmxaaUE5SUdOdmJtWnBaeTUxY214Y2JpQWdJQ0JqWVd4c1ltRmpheUFtSmlCallXeHNZbUZqYXlncFhHNGdJSDBzWEc1Y2JpQWdjRzl3T2lCbWRXNWpkR2x2YmlBb1kyOXVabWxuTENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUhkcGJtUnZkeTVvYVhOMGIzSjVMbUpoWTJzb0tWeHVJQ0FnSUdOaGJHeGlZV05ySUNZbUlHTmhiR3hpWVdOcktDbGNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQjdYRzRnSUdsdWFYUWdLSGRsWlhncElIdGNiaUFnSUNCM1pXVjRMbkpsWjJsemRHVnlUVzlrZFd4bEtDZHVZWFpwWjJGMGIzSW5MQ0J1WVhacFoyRjBiM0pOYjJSMWJHVXBYRzRnSUgxY2JuMWNiaUlzSWk4cVhHNGdLaUJNYVdObGJuTmxaQ0IwYnlCMGFHVWdRWEJoWTJobElGTnZablIzWVhKbElFWnZkVzVrWVhScGIyNGdLRUZUUmlrZ2RXNWtaWElnYjI1bFhHNGdLaUJ2Y2lCdGIzSmxJR052Ym5SeWFXSjFkRzl5SUd4cFkyVnVjMlVnWVdkeVpXVnRaVzUwY3k0Z0lGTmxaU0IwYUdVZ1RrOVVTVU5GSUdacGJHVmNiaUFxSUdScGMzUnlhV0oxZEdWa0lIZHBkR2dnZEdocGN5QjNiM0pySUdadmNpQmhaR1JwZEdsdmJtRnNJR2x1Wm05eWJXRjBhVzl1WEc0Z0tpQnlaV2RoY21ScGJtY2dZMjl3ZVhKcFoyaDBJRzkzYm1WeWMyaHBjQzRnSUZSb1pTQkJVMFlnYkdsalpXNXpaWE1nZEdocGN5Qm1hV3hsWEc0Z0tpQjBieUI1YjNVZ2RXNWtaWElnZEdobElFRndZV05vWlNCTWFXTmxibk5sTENCV1pYSnphVzl1SURJdU1DQW9kR2hsWEc0Z0tpQmNJa3hwWTJWdWMyVmNJaWs3SUhsdmRTQnRZWGtnYm05MElIVnpaU0IwYUdseklHWnBiR1VnWlhoalpYQjBJR2x1SUdOdmJYQnNhV0Z1WTJWY2JpQXFJSGRwZEdnZ2RHaGxJRXhwWTJWdWMyVXVJQ0JaYjNVZ2JXRjVJRzlpZEdGcGJpQmhJR052Y0hrZ2IyWWdkR2hsSUV4cFkyVnVjMlVnWVhSY2JpQXFYRzRnS2lBZ0lHaDBkSEE2THk5M2QzY3VZWEJoWTJobExtOXlaeTlzYVdObGJuTmxjeTlNU1VORlRsTkZMVEl1TUZ4dUlDcGNiaUFxSUZWdWJHVnpjeUJ5WlhGMWFYSmxaQ0JpZVNCaGNIQnNhV05oWW14bElHeGhkeUJ2Y2lCaFozSmxaV1FnZEc4Z2FXNGdkM0pwZEdsdVp5eGNiaUFxSUhOdlpuUjNZWEpsSUdScGMzUnlhV0oxZEdWa0lIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObElHbHpJR1JwYzNSeWFXSjFkR1ZrSUc5dUlHRnVYRzRnS2lCY0lrRlRJRWxUWENJZ1FrRlRTVk1zSUZkSlZFaFBWVlFnVjBGU1VrRk9WRWxGVXlCUFVpQkRUMDVFU1ZSSlQwNVRJRTlHSUVGT1dWeHVJQ29nUzBsT1JDd2daV2wwYUdWeUlHVjRjSEpsYzNNZ2IzSWdhVzF3YkdsbFpDNGdJRk5sWlNCMGFHVWdUR2xqWlc1elpTQm1iM0lnZEdobFhHNGdLaUJ6Y0dWamFXWnBZeUJzWVc1bmRXRm5aU0JuYjNabGNtNXBibWNnY0dWeWJXbHpjMmx2Ym5NZ1lXNWtJR3hwYldsMFlYUnBiMjV6WEc0Z0tpQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTNWNiaUFxTDF4dVhHNHZLaXBjYmlBcUlGZGxZblpwWlhjZ2JXOWtkV3hsWEc0Z0tpOWNibXhsZENCcGMwRnljbUY1WEc1Y2JtTnZibk4wSUhkbFluWnBaWGNnUFNCN1hHNGdJR2R2UW1GamF5QW9kbTV2WkdVcElIdGNiaUFnSUNCcFppQW9hWE5CY25KaGVTaDJibTlrWlNrcElIdGNiaUFnSUNBZ0lHbG1JQ2h3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFZPVmlBOVBUMGdKMlJsZG1Wc2IzQnRaVzUwSnlrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExuZGhjbTRvSjF0MmRXVXRjbVZ1WkdWeVhTQjBhR1VnY21WbUlIQmhjM05sWkNCMGJ5QjNaV0oyYVdWM0xtZHZRbUZqYXlCcGN5QmhJR0Z5Y21GNUxpY3BYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQjJibTlrWlNBOUlIWnViMlJsV3pCZFhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoMmJtOWtaU0FtSmlCMGVYQmxiMllnZG01dlpHVXVaMjlDWVdOcklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNCMmJtOWtaUzVuYjBKaFkyc29LVnh1SUNBZ0lIMWNiaUFnZlN4Y2JpQWdaMjlHYjNKM1lYSmtJQ2gyYm05a1pTa2dlMXh1SUNBZ0lHbG1JQ2hwYzBGeWNtRjVLSFp1YjJSbEtTa2dlMXh1SUNBZ0lDQWdhV1lnS0hCeWIyTmxjM011Wlc1MkxrNVBSRVZmUlU1V0lEMDlQU0FuWkdWMlpXeHZjRzFsYm5RbktTQjdYRzRnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmlnblczWjFaUzF5Wlc1a1pYSmRJSFJvWlNCeVpXWWdjR0Z6YzJWa0lIUnZJSGRsWW5acFpYY3VaMjlHYjNKM1lYSmtJR2x6SUdFZ1lYSnlZWGt1SnlsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhadWIyUmxJRDBnZG01dlpHVmJNRjFjYmlBZ0lDQjlYRzRnSUNBZ2FXWWdLSFp1YjJSbElDWW1JSFI1Y0dWdlppQjJibTlrWlM1bmIwWnZjbmRoY21RZ1BUMDlJQ2RtZFc1amRHbHZiaWNwSUh0Y2JpQWdJQ0FnSUhadWIyUmxMbWR2Um05eWQyRnlaQ2dwWEc0Z0lDQWdmVnh1SUNCOUxGeHVJQ0J5Wld4dllXUWdLSFp1YjJSbEtTQjdYRzRnSUNBZ2FXWWdLR2x6UVhKeVlYa29kbTV2WkdVcEtTQjdYRzRnSUNBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ1BUMDlJQ2RrWlhabGJHOXdiV1Z1ZENjcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkYmRuVmxMWEpsYm1SbGNsMGdkR2hsSUhKbFppQndZWE56WldRZ2RHOGdkMlZpZG1sbGR5NXlaV3h2WVdRZ2FYTWdZU0JoY25KaGVTNG5LVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdkbTV2WkdVZ1BTQjJibTlrWlZzd1hWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb2RtNXZaR1VnSmlZZ2RIbHdaVzltSUhadWIyUmxMbkpsYkc5aFpDQTlQVDBnSjJaMWJtTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2RtNXZaR1V1Y21Wc2IyRmtLQ2xjYmlBZ0lDQjlYRzRnSUgxY2JuMWNibHh1Wlhod2IzSjBJR1JsWm1GMWJIUWdlMXh1SUNCcGJtbDBJQ2gzWldWNEtTQjdYRzRnSUNBZ2FYTkJjbkpoZVNBOUlIZGxaWGd1ZFhScGJITXVhWE5CY25KaGVWeHVJQ0FnSUhkbFpYZ3VjbVZuYVhOMFpYSk5iMlIxYkdVb0ozZGxZblpwWlhjbkxDQjNaV0oyYVdWM0tWeHVJQ0I5WEc1OVhHNGlMQ0l2S2x4dUlDb2dUR2xqWlc1elpXUWdkRzhnZEdobElFRndZV05vWlNCVGIyWjBkMkZ5WlNCR2IzVnVaR0YwYVc5dUlDaEJVMFlwSUhWdVpHVnlJRzl1WlZ4dUlDb2diM0lnYlc5eVpTQmpiMjUwY21saWRYUnZjaUJzYVdObGJuTmxJR0ZuY21WbGJXVnVkSE11SUNCVFpXVWdkR2hsSUU1UFZFbERSU0JtYVd4bFhHNGdLaUJrYVhOMGNtbGlkWFJsWkNCM2FYUm9JSFJvYVhNZ2QyOXlheUJtYjNJZ1lXUmthWFJwYjI1aGJDQnBibVp2Y20xaGRHbHZibHh1SUNvZ2NtVm5ZWEprYVc1bklHTnZjSGx5YVdkb2RDQnZkMjVsY25Ob2FYQXVJQ0JVYUdVZ1FWTkdJR3hwWTJWdWMyVnpJSFJvYVhNZ1ptbHNaVnh1SUNvZ2RHOGdlVzkxSUhWdVpHVnlJSFJvWlNCQmNHRmphR1VnVEdsalpXNXpaU3dnVm1WeWMybHZiaUF5TGpBZ0tIUm9aVnh1SUNvZ1hDSk1hV05sYm5ObFhDSXBPeUI1YjNVZ2JXRjVJRzV2ZENCMWMyVWdkR2hwY3lCbWFXeGxJR1Y0WTJWd2RDQnBiaUJqYjIxd2JHbGhibU5sWEc0Z0tpQjNhWFJvSUhSb1pTQk1hV05sYm5ObExpQWdXVzkxSUcxaGVTQnZZblJoYVc0Z1lTQmpiM0I1SUc5bUlIUm9aU0JNYVdObGJuTmxJR0YwWEc0Z0tseHVJQ29nSUNCb2RIUndPaTh2ZDNkM0xtRndZV05vWlM1dmNtY3ZiR2xqWlc1elpYTXZURWxEUlU1VFJTMHlMakJjYmlBcVhHNGdLaUJWYm14bGMzTWdjbVZ4ZFdseVpXUWdZbmtnWVhCd2JHbGpZV0pzWlNCc1lYY2diM0lnWVdkeVpXVmtJSFJ2SUdsdUlIZHlhWFJwYm1jc1hHNGdLaUJ6YjJaMGQyRnlaU0JrYVhOMGNtbGlkWFJsWkNCMWJtUmxjaUIwYUdVZ1RHbGpaVzV6WlNCcGN5QmthWE4wY21saWRYUmxaQ0J2YmlCaGJseHVJQ29nWENKQlV5QkpVMXdpSUVKQlUwbFRMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUkpSVk1nVDFJZ1EwOU9SRWxVU1U5T1V5QlBSaUJCVGxsY2JpQXFJRXRKVGtRc0lHVnBkR2hsY2lCbGVIQnlaWE56SUc5eUlHbHRjR3hwWldRdUlDQlRaV1VnZEdobElFeHBZMlZ1YzJVZ1ptOXlJSFJvWlZ4dUlDb2djM0JsWTJsbWFXTWdiR0Z1WjNWaFoyVWdaMjkyWlhKdWFXNW5JSEJsY20xcGMzTnBiMjV6SUdGdVpDQnNhVzFwZEdGMGFXOXVjMXh1SUNvZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVdVhHNGdLaTljYmk4cUtseHVJQ29nZDJWaWMyOWphMlYwSUcxdlpIVnNaVnh1SUNvdlhHNHZLbWRzYjJKaGJDQlhaV0pUYjJOclpYUXFMMXh1Wlhod2IzSjBJR1JsWm1GMWJIUWdLR1oxYm1OMGFXOXVJQ2dwSUh0Y2JpQWdZMjl1YzNRZ2NtVm5hWE4wWlhKTWFYTjBaVzVsY25NZ1BTQmJKMjl1YjNCbGJpY3NJQ2R2Ym0xbGMzTmhaMlVuTENBbmIyNWxjbkp2Y2ljc0lDZHZibU5zYjNObEoxMWNiaUFnWTI5dWMzUWdkM01nUFNCN1hHNGdJQ0FnU1U1VFZFRk9RMFU2SUc1MWJHd3NYRzRnSUNBZ1YyVmlVMjlqYTJWME9pQm1kVzVqZEdsdmJpQW9kWEpzTENCd2NtOTBiMk52YkNrZ2UxeHVJQ0FnSUNBZ2FXWWdLQ0YxY213cElIdGNiaUFnSUNBZ0lDQWdkM011U1U1VFZFRk9RMFVnUFNCdWRXeHNYRzRnSUNBZ0lDQWdJSEpsZEhWeWJseHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLQ0Z3Y205MGIyTnZiQ2tnZTF4dUlDQWdJQ0FnSUNCM2N5NUpUbE5VUVU1RFJTQTlJRzVsZHlCWFpXSlRiMk5yWlhRb2RYSnNLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lIZHpMa2xPVTFSQlRrTkZJRDBnYm1WM0lGZGxZbE52WTJ0bGRDaDFjbXdzSUhCeWIzUnZZMjlzS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnY21WMGRYSnVJSGR6TGtsT1UxUkJUa05GWEc0Z0lDQWdmU3hjYmlBZ0lDQnpaVzVrT2lCbWRXNWpkR2x2YmlBb2JXVnpjMkZuWlhNcElIdGNiaUFnSUNBZ0lIZHpMa2xPVTFSQlRrTkZJQ1ltSUhkekxrbE9VMVJCVGtORkxuTmxibVFvYldWemMyRm5aWE1wWEc0Z0lDQWdmU3hjYmlBZ0lDQmpiRzl6WlRvZ1puVnVZM1JwYjI0Z0tDa2dlMXh1SUNBZ0lDQWdkM011U1U1VFZFRk9RMFVnSmlZZ2QzTXVTVTVUVkVGT1EwVXVZMnh2YzJVb0tWeHVJQ0FnSUgxY2JpQWdmVnh1SUNCbWIzSWdLR052Ym5OMElHa2dhVzRnY21WbmFYTjBaWEpNYVhOMFpXNWxjbk1wSUh0Y2JpQWdJQ0JwWmlBb2NtVm5hWE4wWlhKTWFYTjBaVzVsY25NdWFHRnpUM2R1VUhKdmNHVnlkSGtvYVNrcElIdGNiaUFnSUNBZ0lFOWlhbVZqZEM1a1pXWnBibVZRY205d1pYSjBlU2gzY3l3Z2NtVm5hWE4wWlhKTWFYTjBaVzVsY25OYmFWMHNJSHRjYmlBZ0lDQWdJQ0FnWjJWME9pQm1kVzVqZEdsdmJpQW9LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUhkekxrbE9VMVJCVGtORklDWW1JSGR6TGtsT1UxUkJUa05GVzNKbFoybHpkR1Z5VEdsemRHVnVaWEp6VzJsZFhWeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0J6WlhRNklHWjFibU4wYVc5dUlDaG1iaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gzY3k1SlRsTlVRVTVEUlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZDNNdVNVNVRWRUZPUTBWYmNtVm5hWE4wWlhKTWFYTjBaVzVsY25OYmFWMWRJRDBnWm01Y2JpQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdmVnh1SUNCOVhHNGdJSEpsZEhWeWJpQjNjMXh1ZlNrb0tWeHVJaXdpTHlwY2JpQXFJRXhwWTJWdWMyVmtJSFJ2SUhSb1pTQkJjR0ZqYUdVZ1UyOW1kSGRoY21VZ1JtOTFibVJoZEdsdmJpQW9RVk5HS1NCMWJtUmxjaUJ2Ym1WY2JpQXFJRzl5SUcxdmNtVWdZMjl1ZEhKcFluVjBiM0lnYkdsalpXNXpaU0JoWjNKbFpXMWxiblJ6TGlBZ1UyVmxJSFJvWlNCT1QxUkpRMFVnWm1sc1pWeHVJQ29nWkdsemRISnBZblYwWldRZ2QybDBhQ0IwYUdseklIZHZjbXNnWm05eUlHRmtaR2wwYVc5dVlXd2dhVzVtYjNKdFlYUnBiMjVjYmlBcUlISmxaMkZ5WkdsdVp5QmpiM0I1Y21sbmFIUWdiM2R1WlhKemFHbHdMaUFnVkdobElFRlRSaUJzYVdObGJuTmxjeUIwYUdseklHWnBiR1ZjYmlBcUlIUnZJSGx2ZFNCMWJtUmxjaUIwYUdVZ1FYQmhZMmhsSUV4cFkyVnVjMlVzSUZabGNuTnBiMjRnTWk0d0lDaDBhR1ZjYmlBcUlGd2lUR2xqWlc1elpWd2lLVHNnZVc5MUlHMWhlU0J1YjNRZ2RYTmxJSFJvYVhNZ1ptbHNaU0JsZUdObGNIUWdhVzRnWTI5dGNHeHBZVzVqWlZ4dUlDb2dkMmwwYUNCMGFHVWdUR2xqWlc1elpTNGdJRmx2ZFNCdFlYa2diMkowWVdsdUlHRWdZMjl3ZVNCdlppQjBhR1VnVEdsalpXNXpaU0JoZEZ4dUlDcGNiaUFxSUNBZ2FIUjBjRG92TDNkM2R5NWhjR0ZqYUdVdWIzSm5MMnhwWTJWdWMyVnpMMHhKUTBWT1UwVXRNaTR3WEc0Z0tseHVJQ29nVlc1c1pYTnpJSEpsY1hWcGNtVmtJR0o1SUdGd2NHeHBZMkZpYkdVZ2JHRjNJRzl5SUdGbmNtVmxaQ0IwYnlCcGJpQjNjbWwwYVc1bkxGeHVJQ29nYzI5bWRIZGhjbVVnWkdsemRISnBZblYwWldRZ2RXNWtaWElnZEdobElFeHBZMlZ1YzJVZ2FYTWdaR2x6ZEhKcFluVjBaV1FnYjI0Z1lXNWNiaUFxSUZ3aVFWTWdTVk5jSWlCQ1FWTkpVeXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVTVVZUSUU5U0lFTlBUa1JKVkVsUFRsTWdUMFlnUVU1WlhHNGdLaUJMU1U1RUxDQmxhWFJvWlhJZ1pYaHdjbVZ6Y3lCdmNpQnBiWEJzYVdWa0xpQWdVMlZsSUhSb1pTQk1hV05sYm5ObElHWnZjaUIwYUdWY2JpQXFJSE53WldOcFptbGpJR3hoYm1kMVlXZGxJR2R2ZG1WeWJtbHVaeUJ3WlhKdGFYTnphVzl1Y3lCaGJtUWdiR2x0YVhSaGRHbHZibk5jYmlBcUlIVnVaR1Z5SUhSb1pTQk1hV05sYm5ObExseHVJQ292WEc1cGJYQnZjblFnZDJWaWMyOWphMlYwSUdaeWIyMGdKeTR2ZDJWaWMyOWphMlYwSjF4dVhHNHZMeUJVVDBSUE9pQnlaWGR5YVhSbElIUm9aU0J0YjJSMWJHVWdiV1YwWVZ4dVpYaHdiM0owSUdSbFptRjFiSFFnZTF4dUlDQnBibWwwT2lCbWRXNWpkR2x2YmlBb1YyVmxlQ2tnZTF4dUlDQWdJRmRsWlhndWNtVm5hWE4wWlhKTmIyUjFiR1VvSjNkbFlsTnZZMnRsZENjc0lIZGxZbk52WTJ0bGRDd2dleUJ0YjNWdWRGUjVjR1U2SUNkbWRXeHNKeUI5S1Z4dUlDQjlYRzU5WEc0aUxDSXZLbHh1SUNvZ1RHbGpaVzV6WldRZ2RHOGdkR2hsSUVGd1lXTm9aU0JUYjJaMGQyRnlaU0JHYjNWdVpHRjBhVzl1SUNoQlUwWXBJSFZ1WkdWeUlHOXVaVnh1SUNvZ2IzSWdiVzl5WlNCamIyNTBjbWxpZFhSdmNpQnNhV05sYm5ObElHRm5jbVZsYldWdWRITXVJQ0JUWldVZ2RHaGxJRTVQVkVsRFJTQm1hV3hsWEc0Z0tpQmthWE4wY21saWRYUmxaQ0IzYVhSb0lIUm9hWE1nZDI5eWF5Qm1iM0lnWVdSa2FYUnBiMjVoYkNCcGJtWnZjbTFoZEdsdmJseHVJQ29nY21WbllYSmthVzVuSUdOdmNIbHlhV2RvZENCdmQyNWxjbk5vYVhBdUlDQlVhR1VnUVZOR0lHeHBZMlZ1YzJWeklIUm9hWE1nWm1sc1pWeHVJQ29nZEc4Z2VXOTFJSFZ1WkdWeUlIUm9aU0JCY0dGamFHVWdUR2xqWlc1elpTd2dWbVZ5YzJsdmJpQXlMakFnS0hSb1pWeHVJQ29nWENKTWFXTmxibk5sWENJcE95QjViM1VnYldGNUlHNXZkQ0IxYzJVZ2RHaHBjeUJtYVd4bElHVjRZMlZ3ZENCcGJpQmpiMjF3YkdsaGJtTmxYRzRnS2lCM2FYUm9JSFJvWlNCTWFXTmxibk5sTGlBZ1dXOTFJRzFoZVNCdlluUmhhVzRnWVNCamIzQjVJRzltSUhSb1pTQk1hV05sYm5ObElHRjBYRzRnS2x4dUlDb2dJQ0JvZEhSd09pOHZkM2QzTG1Gd1lXTm9aUzV2Y21jdmJHbGpaVzV6WlhNdlRFbERSVTVUUlMweUxqQmNiaUFxWEc0Z0tpQlZibXhsYzNNZ2NtVnhkV2x5WldRZ1lua2dZWEJ3YkdsallXSnNaU0JzWVhjZ2IzSWdZV2R5WldWa0lIUnZJR2x1SUhkeWFYUnBibWNzWEc0Z0tpQnpiMlowZDJGeVpTQmthWE4wY21saWRYUmxaQ0IxYm1SbGNpQjBhR1VnVEdsalpXNXpaU0JwY3lCa2FYTjBjbWxpZFhSbFpDQnZiaUJoYmx4dUlDb2dYQ0pCVXlCSlUxd2lJRUpCVTBsVExDQlhTVlJJVDFWVUlGZEJVbEpCVGxSSlJWTWdUMUlnUTA5T1JFbFVTVTlPVXlCUFJpQkJUbGxjYmlBcUlFdEpUa1FzSUdWcGRHaGxjaUJsZUhCeVpYTnpJRzl5SUdsdGNHeHBaV1F1SUNCVFpXVWdkR2hsSUV4cFkyVnVjMlVnWm05eUlIUm9aVnh1SUNvZ2MzQmxZMmxtYVdNZ2JHRnVaM1ZoWjJVZ1oyOTJaWEp1YVc1bklIQmxjbTFwYzNOcGIyNXpJR0Z1WkNCc2FXMXBkR0YwYVc5dWMxeHVJQ29nZFc1a1pYSWdkR2hsSUV4cFkyVnVjMlV1WEc0Z0tpOWNibHh1WTI5dWMzUWdiV1YwWVNBOUlIdGNiaUFnTHlvcVhHNGdJQ0FxSUhObGRGWnBaWGR3YjNKMFhHNGdJQ0FxSUVOb1lXNW5hVzVuSUhacFpYZHdiM0owSUhkcFpIUm9JR0YwSUhKMWJuUnBiV1VnYVhNZ2JtOTBJSE4xY0hCdmNuUmxaQzRnVUd4bFlYTmxJSFZ6WlNCM1pXVjRMWFpwWlhkd2IzSjBJRzFsZEdGY2JpQWdJQ29nZEdGbklIUnZJSE53WldOcFpua2dlVzkxY2lCMmFXVjNjRzl5ZENCcGJpQjViM1Z5SUdoMGJXd2dabWxzWlM1Y2JpQWdJQ292WEc0Z0lITmxkRlpwWlhkd2IzSjBJQ2h2Y0hScGIyNXpLU0I3WEc0Z0lDQWdZMjl1YzI5c1pTNTNZWEp1S0dCYmRuVmxMWEpsYm1SbGNsMGdiV1YwWVM1elpYUldhV1YzY0c5eWRDQmtiMlZ6YmlkMElIZHZjbXR6SUdGeklHVjRjR1ZqZEdWa0lHbHVJSGRsWWlCd2JHRjBabTl5YlM1Z1hHNGdJQ0FnS3lCZ0lGQnNaV0Z6WlNCMWMyVWdQRzFsZEdFZ2JtRnRaVDFjSW5kbFpYZ3RkbWxsZDNCdmNuUmNJaUJqYjI1MFpXNTBQVndpZUhoNFhDSStJSFJ2SUhOd1pXTnBabmtnZVc5MWNpQjJhV1YzY0c5eWRDQjNhV1IwYUM1Z0tWeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElIdGNiaUFnYVc1cGRDQW9kMlZsZUNrZ2UxeHVJQ0FnSUhkbFpYZ3VjbVZuYVhOMFpYSk5iMlIxYkdVb0oyMWxkR0VuTENCdFpYUmhLVnh1SUNCOVhHNTlYRzRpTENJdktseHVJQ29nVEdsalpXNXpaV1FnZEc4Z2RHaGxJRUZ3WVdOb1pTQlRiMlowZDJGeVpTQkdiM1Z1WkdGMGFXOXVJQ2hCVTBZcElIVnVaR1Z5SUc5dVpWeHVJQ29nYjNJZ2JXOXlaU0JqYjI1MGNtbGlkWFJ2Y2lCc2FXTmxibk5sSUdGbmNtVmxiV1Z1ZEhNdUlDQlRaV1VnZEdobElFNVBWRWxEUlNCbWFXeGxYRzRnS2lCa2FYTjBjbWxpZFhSbFpDQjNhWFJvSUhSb2FYTWdkMjl5YXlCbWIzSWdZV1JrYVhScGIyNWhiQ0JwYm1admNtMWhkR2x2Ymx4dUlDb2djbVZuWVhKa2FXNW5JR052Y0hseWFXZG9kQ0J2ZDI1bGNuTm9hWEF1SUNCVWFHVWdRVk5HSUd4cFkyVnVjMlZ6SUhSb2FYTWdabWxzWlZ4dUlDb2dkRzhnZVc5MUlIVnVaR1Z5SUhSb1pTQkJjR0ZqYUdVZ1RHbGpaVzV6WlN3Z1ZtVnljMmx2YmlBeUxqQWdLSFJvWlZ4dUlDb2dYQ0pNYVdObGJuTmxYQ0lwT3lCNWIzVWdiV0Y1SUc1dmRDQjFjMlVnZEdocGN5Qm1hV3hsSUdWNFkyVndkQ0JwYmlCamIyMXdiR2xoYm1ObFhHNGdLaUIzYVhSb0lIUm9aU0JNYVdObGJuTmxMaUFnV1c5MUlHMWhlU0J2WW5SaGFXNGdZU0JqYjNCNUlHOW1JSFJvWlNCTWFXTmxibk5sSUdGMFhHNGdLbHh1SUNvZ0lDQm9kSFJ3T2k4dmQzZDNMbUZ3WVdOb1pTNXZjbWN2YkdsalpXNXpaWE12VEVsRFJVNVRSUzB5TGpCY2JpQXFYRzRnS2lCVmJteGxjM01nY21WeGRXbHlaV1FnWW5rZ1lYQndiR2xqWVdKc1pTQnNZWGNnYjNJZ1lXZHlaV1ZrSUhSdklHbHVJSGR5YVhScGJtY3NYRzRnS2lCemIyWjBkMkZ5WlNCa2FYTjBjbWxpZFhSbFpDQjFibVJsY2lCMGFHVWdUR2xqWlc1elpTQnBjeUJrYVhOMGNtbGlkWFJsWkNCdmJpQmhibHh1SUNvZ1hDSkJVeUJKVTF3aUlFSkJVMGxUTENCWFNWUklUMVZVSUZkQlVsSkJUbFJKUlZNZ1QxSWdRMDlPUkVsVVNVOU9VeUJQUmlCQlRsbGNiaUFxSUV0SlRrUXNJR1ZwZEdobGNpQmxlSEJ5WlhOeklHOXlJR2x0Y0d4cFpXUXVJQ0JUWldVZ2RHaGxJRXhwWTJWdWMyVWdabTl5SUhSb1pWeHVJQ29nYzNCbFkybG1hV01nYkdGdVozVmhaMlVnWjI5MlpYSnVhVzVuSUhCbGNtMXBjM05wYjI1eklHRnVaQ0JzYVcxcGRHRjBhVzl1YzF4dUlDb2dkVzVrWlhJZ2RHaGxJRXhwWTJWdWMyVXVYRzRnS2k5Y2JseHVMeThnYlc5a2RXeGxjeUJtY205dElISmxibVJsY2k5aWNtOTNaWE55SUNoc1pXZGhZM2tnYlc5a2RXeGxjeWxjYmx4dWFXMXdiM0owSUdkbGIyeHZZMkYwYVc5dUlHWnliMjBnSnk0dUx5NHVMMkp5YjNkelpYSXZaWGgwWlc1a0wyRndhUzluWlc5c2IyTmhkR2x2YmlkY2JtbHRjRzl5ZENCemRHOXlZV2RsSUdaeWIyMGdKeTR1THk0dUwySnliM2R6WlhJdlpYaDBaVzVrTDJGd2FTOXpkRzl5WVdkbEoxeHVhVzF3YjNKMElITjBjbVZoYlNCbWNtOXRJQ2N1TGk4dUxpOWljbTkzYzJWeUwyVjRkR1Z1WkM5aGNHa3ZjM1J5WldGdEoxeHVhVzF3YjNKMElHTnNhWEJpYjJGeVpDQm1jbTl0SUNjdUxpOHVMaTlpY205M2MyVnlMMlY0ZEdWdVpDOWhjR2t2WTJ4cGNHSnZZWEprSjF4dWFXMXdiM0owSUdWMlpXNTBUVzlrZFd4bElHWnliMjBnSnk0dUx5NHVMMkp5YjNkelpYSXZaWGgwWlc1a0wyRndhUzlsZG1WdWRDZGNibHh1THk4Z1kzVnpkRzl0SUcxdlpIVnNaWE5jYm1sdGNHOXlkQ0JoYm1sdFlYUnBiMjRnWm5KdmJTQW5MaTloYm1sdFlYUnBiMjRuWEc1cGJYQnZjblFnWkc5dElHWnliMjBnSnk0dlpHOXRKMXh1YVcxd2IzSjBJR2RzYjJKaGJFVjJaVzUwSUdaeWIyMGdKeTR2WjJ4dlltRnNSWFpsYm5RblhHNXBiWEJ2Y25RZ2JXOWtZV3dnWm5KdmJTQW5MaTl0YjJSaGJDZGNibWx0Y0c5eWRDQnVZWFpwWjJGMGIzSk5iMlIxYkdVZ1puSnZiU0FuTGk5dVlYWnBaMkYwYjNJblhHNXBiWEJ2Y25RZ2QyVmlkbWxsZHlCbWNtOXRJQ2N1TDNkbFluWnBaWGNuWEc1cGJYQnZjblFnZDJWaWMyOWphMlYwSUdaeWIyMGdKeTR2ZDJWaWMyOWphMlYwSjF4dWFXMXdiM0owSUcxbGRHRWdabkp2YlNBbkxpOXRaWFJoSjF4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCYlhHNGdJR2RsYjJ4dlkyRjBhVzl1TEZ4dUlDQnpkRzl5WVdkbExGeHVJQ0J6ZEhKbFlXMHNYRzRnSUdOc2FYQmliMkZ5WkN4Y2JpQWdaWFpsYm5STmIyUjFiR1VzWEc0Z0lHMXZaR0ZzTEZ4dUlDQjNaV0p6YjJOclpYUXNYRzRnSUdGdWFXMWhkR2x2Yml4Y2JpQWdaRzl0TEZ4dUlDQm5iRzlpWVd4RmRtVnVkQ3hjYmlBZ2JtRjJhV2RoZEc5eVRXOWtkV3hsTEZ4dUlDQjNaV0oyYVdWM0xGeHVJQ0J0WlhSaFhHNWRYRzRpTENKcGJYQnZjblFnZDJWbGVDQm1jbTl0SUNjdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsSjF4dVhHNXBiWEJ2Y25RZ1kyOXRjRzl1Wlc1MGN5Qm1jbTl0SUNjdUxpOHVMaTh1TGk5b2RHMXNOUzl5Wlc1a1pYSXZkblZsTDJOdmJYQnZibVZ1ZEhNblhHNXBiWEJ2Y25RZ2JXOWtkV3hsY3lCbWNtOXRJQ2N1TGk4dUxpOHVMaTlvZEcxc05TOXlaVzVrWlhJdmRuVmxMMjF2WkhWc1pYTW5YRzVjYm1OdmJuTjBJSEJ5WlVsdWFYUWdQU0IzWldWNExtbHVhWFJjYmx4dWQyVmxlQzVwYm1sMElEMGdablZ1WTNScGIyNGdLQ2tnZTF4dUlDQndjbVZKYm1sMExtRndjR3g1S0hkbFpYZ3NJR0Z5WjNWdFpXNTBjeWxjYmlBZ1kyOXVjM1FnY0d4MVoybHVjeUE5SUdOdmJYQnZibVZ1ZEhNdVkyOXVZMkYwS0cxdlpIVnNaWE1wWEc1Y2JpQWdjR3gxWjJsdWN5NW1iM0pGWVdOb0tHWjFibU4wYVc5dUlDaHdiSFZuYVc0cElIdGNiaUFnSUNCM1pXVjRMbWx1YzNSaGJHd29jR3gxWjJsdUtWeHVJQ0I5S1Z4dWZWeHVYRzVwWmlBb1oyeHZZbUZzTGxaMVpTa2dlMXh1SUNCM1pXVjRMbWx1YVhRb1oyeHZZbUZzTGxaMVpTbGNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnZDJWbGVGeHVJbDBzSW01aGJXVnpJanBiSW5KbGNYVnBjbVVrSkRBaUxDSnBjMDlpYW1WamRDSXNJbkpsY1hWcGNtVWtKREVpTENKa2IyTjFiV1Z1ZENJc0luSmxjWFZwY21Va0pESWlMQ0p5WlhGMWFYSmxKQ1F6SWl3aVpGQWlMQ0p5WlhGMWFYSmxKQ1EwSWl3aVoyeHZZbUZzSWl3aUpHVjRjRzl5ZENJc0luUnZVM1J5YVc1bklpd2lTVTlpYW1WamRDSXNJblJ2U1c1MFpXZGxjaUlzSW0xcGJpSXNJblJ2U1U5aWFtVmpkQ0lzSW1SbFptbHVaV1FpTENKeVpYRjFhWEpsSkNRMUlpd2lZWEpuZFcxbGJuUnpJaXdpWTI5bUlpd2lZVzVQWW1wbFkzUWlMQ0puWlhSTFpYbHpJaXdpWlc1MWJVSjFaMHRsZVhNaUxDSkpSVjlRVWs5VVR5SXNJbEJTVDFSUFZGbFFSU0lzSW1oaGN5SXNJbFJCUnlJc0ltTnlaV0YwWlNJc0luTmxkRlJ2VTNSeWFXNW5WR0ZuSWl3aWRHOVBZbXBsWTNRaUxDSnlaWEYxYVhKbEpDUTVJaXdpY21WeGRXbHlaU1FrT0NJc0luSmxaR1ZtYVc1bElpd2ljbVZ4ZFdseVpTUWtOeUlzSW1ocFpHVWlMQ0p5WlhGMWFYSmxKQ1EySWl3aVNYUmxjbUYwYjNKeklpd2lTVlJGVWtGVVQxSWlMQ0pCY25KaGVWQnliM1J2SWl3aVkyeGhjM052WmlJc0ltRkdkVzVqZEdsdmJpSXNJbU4wZUNJc0luQnliMk5sYzNNaUxDSlFjbTl0YVhObElpd2lhWE5PYjJSbElpd2libVYzVUhKdmJXbHpaVU5oY0dGaWFXeHBkSGtpTENKVFVFVkRTVVZUSWl3aVRFbENVa0ZTV1NJc0luSmxjWFZwY21Va0pESXdJaXdpY21WeGRXbHlaU1FrTVRraUxDSnlaWEYxYVhKbEpDUXhPQ0lzSW5KbGNYVnBjbVVrSkRFM0lpd2ljbVZ4ZFdseVpTUWtNVFlpTENKeVpYRjFhWEpsSkNReE5TSXNJbkpsY1hWcGNtVWtKREUwSWl3aWNtVnhkV2x5WlNRa01UTWlMQ0p5WlhGMWFYSmxKQ1F4TWlJc0luSmxjWFZwY21Va0pERXhJaXdpY21WeGRXbHlaU1FrTVRBaUxDSlVlWEJsUlhKeWIzSWlMQ0pqYjI1emRDSXNJbXhwWWlJc0lteGxkQ0lzSW1WdWRpSXNJbWtpTENKcGJtbDBJaXdpWlhoMFpXNWtJaXdpWDNWcFpDSXNJbU5oWTJobElpd2ljM1Z3Y0c5eWRDSXNJbWx1YVhSV2FXVjNjRzl5ZENJc0luZGxaWGdpTENKMWRHbHNjeTVoY0hCbGJtUkRjM01pTENKb1lXNWtiR1Z5SWl3aVkyOXlaU0lzSW1kbGRFeHBjM1JsYm1WeWN5SXNJbDlwYm1sMFpXUWlMQ0ppWVhObElpd2lhVzVwZEVWMlpXNTBUV2R5SWl3aVgyTnpjeUlzSW1WNGRISmhZM1JEYjIxd2IyNWxiblJUZEhsc1pTSXNJbU55WldGMFpVVjJaVzUwVFdGd0lpd2lhWE5CY25KaGVTSXNJbTFoY0VadmNtMUZkbVZ1ZEhNaUxDSmhjSEJsYm1SRGMzTWlMQ0owYUdseklpd2ljbVZqZENJc0luTmpjbTlzYkdGaWJHVWlMQ0pqYjJ4MWJXNUViMjBpTENKblpYUlNaMklpTENKc2IyOXdRWEp5WVhraUxDSm5aWFJUZEhsc1pWTm9aV1YwUW5sSlpDSXNJbkJ5YjJObGMzTlRkSGxzWlNJc0lteHBjM1FpTENKc2IyRmthVzVuU1c1a2FXTmhkRzl5SWl3aWMyeHBaR1Z5SWl3aVpYaDBaVzVrUzJWNWN5SXNJbWwwWlcxRGIyMXdkWFJsWkZOMGVXeGxJaXdpYVc1a2FXTmhkRzl5SWl3aWFXMWhaMlVpTENKdFpYUmhJaXdpYUdGelQzZHVVSEp2Y0dWeWRIa2lMQ0oxZEdsc2N5SXNJbkZ6SWl3aVpYWmxiblFpTENKblpYUlFZWEpsYm5SVFkzSnZiR3hsY2lJc0luTjBaWEFpTENKeGRXVjFaU0lzSWtOUFRsUkZUbFJmUTB4QlUxTWlMQ0pOVTBkZlEweEJVMU1pTENKQ1ZWUlVUMDVmUjFKUFZWQmZRMHhCVTFNaUxDSkNWVlJVVDA1ZlEweEJVMU1pTENKM1pXSnpiMk5yWlhRaUxDSm5aVzlzYjJOaGRHbHZiaUlzSW5OMGIzSmhaMlVpTENKemRISmxZVzBpTENKamJHbHdZbTloY21RaUxDSnRiMlJoYkNJc0ltRnVhVzFoZEdsdmJpSXNJbVJ2YlNJc0ltZHNiMkpoYkVWMlpXNTBJaXdpYm1GMmFXZGhkRzl5VFc5a2RXeGxJaXdpZDJWaWRtbGxkeUlzSW0xdlpIVnNaWE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFXOUNRU3hCUVVWQkxFbEJRVWtzWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUVRzN096czdPenM3T3pzN096czdPenRCUVdkQ2VrSXNTVUZCU1N4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlFUdEJRVU42UWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhIUVVGSExFTkJRVU1zWlVGQlpTeERRVUZCTzBGQlF5OUNMRWxCUVVrc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkJPMEZCUTJwRExFbEJRVWtzVVVGQlVTeEhRVUZITEVWQlFVVXNRMEZCUVR0QlFVTnFRaXhKUVVGSkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVRTdPenM3T3pzN096czdRVUZWYkVJc1UwRkJVeXhwUWtGQmFVSXNRMEZCUXl4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRk8wVkJRMjVETEVsQlFVa3NSVUZCUlN4SFFVRkhMRWRCUVVjc1EwRkJRVHRGUVVOYUxFOUJRVThzUlVGQlJTeEZRVUZGTzBsQlExUXNTVUZCU1N4RlFVRkZMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4SFFVRkhMRVZCUVVVN1RVRkRha01zVDBGQlR5eEZRVUZGTzB0QlExWTdTVUZEUkN4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExGVkJRVlVzUTBGQlFUdEhRVU51UWp0RlFVTkVMRTlCUVU4c1NVRkJTVHREUVVOYU96czdPenM3T3pzN1FVRlRSQ3hUUVVGVExGTkJRVk1zUTBGQlF5eFBRVUZQTEVWQlFVVXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSVHRGUVVOMlF5eEpRVUZKTEV0QlFVc3NSMEZCUnl4SFFVRkhMRU5CUVVNc1YwRkJWeXhEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZCTzBWQlEzcERMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRVHM3UlVGRmFrTXNTVUZCU1N4UFFVRlBMRXRCUVVzc1MwRkJTeXhSUVVGUkxFVkJRVVU3U1VGRE4wSXNTMEZCU3l4SlFVRkpMRU5CUVVNc1NVRkJTU3hMUVVGTExFVkJRVVU3VFVGRGJrSXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0TFFVTndRanRIUVVOR096czdPenM3UlVGTlJDeExRVUZMTEVOQlFVTXNTVUZCU1N4SFFVRkhMRTFCUVUwc1EwRkJRVHM3UlVGRmJrSXNUMEZCVHl4RFFVRkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdERRVU0zUWpzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnZRa1FzVTBGQlV5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRkxFVkJRVVVzUlVGQlJUdEZRVU0xUXl4SlFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRVZCUVVVc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUlVGQlJTeEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVFN1JVRkRlRVVzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU03VFVGRGRrTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE8wMUJRemRETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1JVRkRNVUlzU1VGQlNTeFRRVUZUTEVkQlFVYzdTVUZEWkN4RlFVRkZPMDFCUTBFc1MwRkJTeXhIUVVGSExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJRenROUVVNM1FpeExRVUZMTEVkQlFVY3NSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETzBsQlF5OUNMRVZCUVVVN1RVRkRRU3hMUVVGTExFZEJRVWNzUlVGQlJTeEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRE8wMUJRemRDTEV0QlFVc3NSMEZCUnl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkJPenRGUVVWc1F5eFBRVUZQTzBsQlEwd3NUVUZCVFN4RlFVRkZMRTFCUVUwN1NVRkRaQ3hMUVVGTExFVkJRVVVzUzBGQlN6dEpRVU5hTEZOQlFWTXNSVUZCUlN4VFFVRlRPMGxCUTNCQ0xFMUJRVTBzUlVGQlJUdE5RVU5PTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VFVGRGJrVXNRMEZCUXl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VFVGRGJFVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dExRVU5XTzBkQlEwWTdRMEZEUmpzN096czdPenM3T3pzN096czdRVUZqUkN4VFFVRlRMR2xDUVVGcFFpeERRVUZETEV0QlFVc3NSVUZCUlRzN1JVRkZhRU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVWQlFVVTdTVUZEZEVNc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRmRCUVZjc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRVHRKUVVNMVJDeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVlVGQlZTeEZRVUZGTEdWQlFXVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRVHRKUVVNeFJDeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zWVVGQllTeEZRVUZGTEd0Q1FVRnJRaXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZCTzBkQlEycEZPenM3UlVGSFJDeExRVUZMTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3U1VGRGNFUXNTVUZCU1N4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExHTkJRV01zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTnVReXhKUVVGSkxGZEJRVmNzUjBGQlJ5eEZRVUZGTEVOQlFVRTdPMGxCUlhCQ0xFdEJRVXNzU1VGQlNTeERRVUZETEVsQlFVa3NTMEZCU3l4RlFVRkZPMDFCUTI1Q0xGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3UzBGRE1VSTdPMGxCUlVRc1NVRkJTU3hQUVVGUExFZEJRVWM3VFVGRFdpeFZRVUZWTEVWQlFVVXNWMEZCVnp0TlFVTjJRaXhUUVVGVExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlR0TlFVTnlRaXhOUVVGTkxFVkJRVVVzVTBGQlV6dE5RVU5xUWl4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRExGVkJRVlVzU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFR0TlFVTjZReXhsUVVGbExFVkJRVVVzVlVGQlZTeERRVUZETEZWQlFWVXNUMEZCVHl4RlFVRkZMRXRCUVVzc1JVRkJSVHRSUVVOd1JDeFBRVUZQTEZsQlFWazdWVUZEYWtJc1NVRkJTU3hQUVVGUExFTkJRVU1zVFVGQlRTeExRVUZMTEZOQlFWTXNSVUZCUlR0WlFVTm9ReXhQUVVGUExFTkJRVU1zVFVGQlRTeEhRVUZITEZWQlFWVXNRMEZCUVRzN1dVRkZNMElzVTBGQlV5eERRVUZETEU5QlFVOHNSVUZCUlN4WFFVRlhMRVZCUVVVN08yTkJSVGxDTEV0QlFVc3NSVUZCUlN4TFFVRkxPMk5CUTFvc1QwRkJUeXhGUVVGRkxFdEJRVXNzUTBGQlF5eFBRVUZQTzJOQlEzUkNMR05CUVdNc1JVRkJSU3hMUVVGTExFTkJRVU1zWTBGQll6dGpRVU53UXl4VlFVRlZMRVZCUVVVc1MwRkJTenRoUVVOc1FpeERRVUZETEVOQlFVRTdWMEZEU0RzN1ZVRkZSQ3haUVVGWkxFTkJRVU1zVDBGQlR5eERRVUZETEdWQlFXVXNRMEZCUXl4RFFVRkJPMVZCUTNKRExFOUJRVThzUTBGQlF5eGxRVUZsTEVkQlFVY3NTVUZCU1N4RFFVRkJPMU5CUXk5Q08wOUJRMFlzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4SlFVRkpMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUzBGQlN5eERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUTBGQlF6dExRVU51UlN4RFFVRkJPMGxCUTBRc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVFN1IwRkRja003TzBWQlJVUXNTVUZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEUxQlFVMHNTVUZCU1N4RFFVRkRMRVZCUVVVN1NVRkRja01zU1VGQlNTeFJRVUZSTEVkQlFVY3NSVUZCUlN4RFFVRkJPenRKUVVWcVFpeExRVUZMTEVsQlFVa3NRMEZCUXl4SlFVRkpMRkZCUVZFc1JVRkJSVHROUVVOMFFpeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0TFFVTnVRenM3U1VGRlJDeFRRVUZUTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEdkQ1FVRm5RaXhGUVVGRk8wMUJRM1pGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTTdUVUZEYkVNc1ZVRkJWU3hGUVVGRkxFdEJRVXM3UzBGRGJFSXNRMEZCUXl4RFFVRkJPMGRCUTBnN1EwRkRSanM3T3pzN096czdPenM3T3p0QlFXRkVMRk5CUVZNc1owSkJRV2RDTEVOQlFVTXNTMEZCU3l4RlFVRkZPMFZCUXk5Q0xFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRKUVVOd1JDeEpRVUZKTEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEyNURMRWxCUVVrc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVFN08wbEJSWGhETEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVN1RVRkRXaXhOUVVGTk8wdEJRMUE3TzBsQlJVUXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFVkJRVVU3VFVGRGRFSXNUMEZCVHl4RFFVRkRMRk5CUVZNc1IwRkJSeXhQUVVGUExFTkJRVU1zVlVGQlZTeERRVUZCTzB0QlEzWkRPMGxCUTBRc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVWQlFVVTdUVUZEY2tJc1QwRkJUeXhEUVVGRExGRkJRVkVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkJPMHRCUTNKRE8wbEJRMFFzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRMRVZCUVVVN1RVRkRkRUlzVDBGQlR5eERRVUZETEZOQlFWTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1MwRkRkRUk3U1VGRFJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1JVRkJSVHROUVVOMFFpeFBRVUZQTEVOQlFVTXNVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRMUVVOMFFqdEpRVU5FTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hGUVVGRk8wMUJRM0pDTEU5QlFVOHNRMEZCUXl4UlFVRlJMRWRCUVVjc1EwRkJReXhEUVVGQk8wdEJRM0pDT3p0SlFVVkVMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGQk8wbEJRM3BETEVsQlFVa3NSVUZCUlN4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlFUdEpRVU16UkN4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVRTdPMGxCUlRORUxFbEJRVWtzWlVGQlpTeEhRVUZITEVWQlFVVXNRMEZCUVR0SlFVTjRRaXhKUVVGSkxFbEJRVWtzUjBGQlJ5eGxRVUZsTEVWQlFVVTdUVUZETVVJc1NVRkJTU3hIUVVGSExHVkJRV1VzUTBGQlFUdExRVU4yUWp0SlFVTkVMRWxCUVVrc1QwRkJUeXhEUVVGRExGRkJRVkVzUjBGQlJ5eEpRVUZKTEVkQlFVY3NaVUZCWlN4RlFVRkZPMDFCUXpkRExFOUJRVThzUTBGQlF5eFJRVUZSTEVkQlFVY3NaVUZCWlN4SFFVRkhMRWxCUVVrc1EwRkJRVHRMUVVNeFF6czdTVUZGUkN4UFFVRlBMRU5CUVVNc1UwRkJVeXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEZOQlFWTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1VVRkJVU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTTdVVUZEYkVVc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkJPMGxCUXpkQ0xFOUJRVThzUTBGQlF5eFRRVUZUTEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhIUVVGSExFOUJRVThzUTBGQlF5eFJRVUZSTEVkQlFVY3NSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJRenRSUVVOc1JTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVUU3U1VGRE4wSXNUMEZCVHl4RFFVRkRMRkZCUVZFc1NVRkJTU3hKUVVGSkxFTkJRVUU3TzBsQlJYaENMRTlCUVU4c1EwRkJReXhUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZCT3p0SlFVVjBRaXhMUVVGTExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NSVUZCUlR0TlFVTnVRaXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdExRVU5vUXp0SlFVTkVMRTlCUVU4c1EwRkJReXhSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkJPenRKUVVVM1FpeEpRVUZKTEdGQlFXRXNSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkJPMGxCUXpsRUxFbEJRVWtzWVVGQllTeEhRVUZITEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExGVkJRVlVzUTBGQlF5eFBRVUZQTEVOQlFVRTdTVUZET1VRc1NVRkJTU3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExHRkJRV0VzUlVGQlJTeERRVUZETEVOQlFVTTdVVUZETDBNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVNdlFpeEpRVUZKTEZWQlFWVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEY2tVc1NVRkJTU3hUUVVGVExFZEJRVWNzVlVGQlZUdFJRVU4wUWl4aFFVRmhMRWxCUVVrc1EwRkJReXhIUVVGSExFMUJRVTBzUjBGQlJ5eEpRVUZKTzFGQlEyeERMR0ZCUVdFc1NVRkJTU3hEUVVGRExFZEJRVWNzVDBGQlR5eEhRVUZITEUxQlFVMHNRMEZCUVRzN08wbEJSM3BETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hMUVVGTExGTkJRVk1zU1VGQlNTeFBRVUZQTEVOQlFVTXNUVUZCVFN4TFFVRkxMRlZCUVZVc1EwRkJRenRYUVVNMVJDeFJRVUZSTEVkQlFVY3NSVUZCUlN4RlFVRkZPMDFCUTNCQ0xFOUJRVThzUTBGQlF5eE5RVUZOTEVkQlFVY3NVMEZCVXl4RFFVRkJPMDFCUXpGQ0xFOUJRVThzUTBGQlF5eFZRVUZWTEVkQlFVY3NWVUZCVlN4RFFVRkJPMDFCUXk5Q0xFOUJRVThzUTBGQlF5eFRRVUZUTEVkQlFVY3NVMEZCVXl4RFFVRkJPenROUVVVM1FpeFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVkxFVkJRVVU3VVVGRGNrTXNTMEZCU3l4RlFVRkZMRXRCUVVzN1VVRkRXaXhQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEU5QlFVODdVVUZEZEVJc1kwRkJZeXhGUVVGRkxFdEJRVXNzUTBGQlF5eGpRVUZqTzFGQlEzQkRMRlZCUVZVc1JVRkJSU3hMUVVGTE8xRkJRMnBDTEZWQlFWVXNSVUZCUlN4UFFVRlBMRU5CUVVNc1ZVRkJWVHRSUVVNNVFpeFRRVUZUTEVWQlFVVXNVMEZCVXp0UFFVTnlRaXhEUVVGRExFTkJRVUU3UzBGRFNEczdTVUZGUkN4SlFVRkpMRTlCUVU4c1EwRkJReXhOUVVGTkxFdEJRVXNzVTBGQlV5eEZRVUZGTzAxQlEyaERMRTlCUVU4c1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkJPenROUVVVMVFpeFRRVUZUTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSU3hUUVVGVExFVkJRVVU3VVVGRGNFTXNZVUZCWVN4RlFVRkZMR0ZCUVdFN1VVRkROVUlzWVVGQllTeEZRVUZGTEdGQlFXRTdVVUZETlVJc1MwRkJTeXhGUVVGRkxFdEJRVXM3VVVGRFdpeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRTlCUVU4N1VVRkRkRUlzWTBGQll5eEZRVUZGTEV0QlFVc3NRMEZCUXl4alFVRmpPMUZCUTNCRExGVkJRVlVzUlVGQlJTeExRVUZMTzFGQlEycENMRlZCUVZVc1JVRkJSU3hQUVVGUExFTkJRVU1zVlVGQlZUdFJRVU01UWl4VFFVRlRMRVZCUVVVc1UwRkJVenRQUVVOeVFpeERRVUZETEVOQlFVRTdTMEZEU0R0SFFVTkdPenRGUVVWRUxFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhOUVVGTkxFbEJRVWtzUTBGQlF5eEZRVUZGTzBsQlEzSkRMRWxCUVVrc1VVRkJVU3hIUVVGSExFVkJRVVVzUTBGQlFUdEpRVU5xUWl4SlFVRkpMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVUU3U1VGRGFFSXNTVUZCU1N4UlFVRlJMRWRCUVVjc1JVRkJSU3hEUVVGQk8wbEJRMnBDTEVsQlFVa3NVMEZCVXl4RFFVRkJPenRKUVVWaUxFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHROUVVNM1F5eEpRVUZKTEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzAxQlF6VkNMRWxCUVVrc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVFN1RVRkRlRU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGVkxFTkJRVU1zVDBGQlR5eEZRVUZGTEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlFUdE5RVU4yUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlFUdExRVU0zUXpzN1NVRkZSQ3hMUVVGTExFbEJRVWtzUTBGQlF5eEpRVUZKTEZGQlFWRXNSVUZCUlR0TlFVTjBRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdExRVU51UXpzN1NVRkZSQ3hUUVVGVExFZEJRVWNzU1VGQlNUdE5RVU5rTEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VFVGRFpDeFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wMUJRMlFzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenROUVVOa0xGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1RVRkRaQ3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMDFCUTJJc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0TlFVTmlMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdUVUZEWWl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzB0QlEyUXNRMEZCUVR0SlFVTkVMRk5CUVZNc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1YwRkJWeXhGUVVGRk8wMUJRMnhGTEZOQlFWTXNSVUZCUlN4VFFVRlRPMDFCUTNCQ0xFOUJRVThzUlVGQlJTeExRVUZMTEVOQlFVTXNUMEZCVHp0TlFVTjBRaXhWUVVGVkxFVkJRVVVzUzBGQlN6dExRVU5zUWl4RFFVRkRMRU5CUVVFN1IwRkRTRHREUVVOR096czdPenM3T3pzN096czdPenM3T3pzN1FVRnJRa1FzVTBGQlV5eGxRVUZsTEVOQlFVTXNTMEZCU3l4RlFVRkZPenRGUVVVNVFpeEpRVUZKTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVTXNSVUZCUlR0SlFVTnlReXhKUVVGSkxGRkJRVkVzUjBGQlJ5eEZRVUZGTEVOQlFVRTdTVUZEYWtJc1MwRkJTeXhKUVVGSkxFTkJRVU1zU1VGQlNTeFJRVUZSTEVWQlFVVTdUVUZEZEVJc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3UzBGRGJrTTdTVUZEUkN4VFFVRlRMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMR05CUVdNc1JVRkJSVHROUVVOeVJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETzAxQlEyeERMRlZCUVZVc1JVRkJSU3hMUVVGTE8wdEJRMnhDTEVOQlFVTXNRMEZCUVR0SFFVTklPenRGUVVWRUxFdEJRVXNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zWTBGQll5eERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRKUVVOd1JDeEpRVUZKTEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEyNURMRWxCUVVrc1JVRkJSU3hIUVVGSExFdEJRVXNzUTBGQlF5eFZRVUZWTEVOQlFVRTdTVUZEZWtJc1NVRkJTU3hQUVVGUExFZEJRVWNzVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkJPenRKUVVVeFFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMDFCUTFvc1VVRkJVVHRMUVVOVU96dEpRVVZFTEVsQlFVa3NUMEZCVHl4RFFVRkRMR1ZCUVdVc1JVRkJSVHROUVVNelFpeFpRVUZaTEVOQlFVTXNUMEZCVHl4RFFVRkRMR1ZCUVdVc1EwRkJReXhEUVVGQk8wMUJRM0pETEU5QlFVOHNRMEZCUXl4bFFVRmxMRWRCUVVjc1NVRkJTU3hEUVVGQk8wdEJReTlDT3p0SlFVVkVMRWxCUVVrc1QwRkJUeXhEUVVGRExFMUJRVTBzUzBGQlN5eFRRVUZUTEVWQlFVVTdUVUZEYUVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVFN08wMUJSVGxDTEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhGUVVGRkxFdEJRVXNzUlVGQlJUdFJRVU5vUXl4TFFVRkxMRVZCUVVVc1MwRkJTenRSUVVOYUxGVkJRVlVzUlVGQlJTeExRVUZMTzA5QlEyeENMRU5CUVVNc1EwRkJRVHM3VFVGRlJpeEpRVUZKTEU5QlFVOHNTVUZCU1N4UFFVRlBMRU5CUVVNc1UwRkJVeXhIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTEVkQlFVY3NSMEZCUnl4RlFVRkZPMUZCUXpGRUxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRmRCUVZjc1JVRkJSVHRWUVVOMFF5eExRVUZMTEVWQlFVVXNTMEZCU3p0VlFVTmFMRlZCUVZVc1JVRkJSU3hMUVVGTE8xTkJRMnhDTEVOQlFVTXNRMEZCUVR0UFFVTklPenROUVVWRUxFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVRTdTMEZEYkVJN08wbEJSVVFzU1VGQlNTeFBRVUZQTEVOQlFVTXNUVUZCVFN4TFFVRkxMRk5CUVZNc1JVRkJSVHROUVVOb1F5eEpRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVUU3VFVGRGNFSXNTVUZCU1N4UlFVRlJMRWRCUVVjc1IwRkJSeXhIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVRTdUVUZEZEVNc1NVRkJTU3hoUVVGaExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlFUdE5RVU01UkN4SlFVRkpMR0ZCUVdFc1IwRkJSeXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGQk96dE5RVVU1UkN4SlFVRkpMRkZCUVZFc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4VFFVRlRMRWRCUVVjc1QwRkJUeXhEUVVGRExGTkJRVk03VlVGRE1VUXNUMEZCVHl4RFFVRkRMRk5CUVZNc1IwRkJSeXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdUVUZETVVNc1NVRkJTU3hQUVVGUExFZEJRVWNzVVVGQlVTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1IwRkJSeXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkJPMDFCUXpsRUxFbEJRVWtzUzBGQlN5eEhRVUZITzFGQlExWXNVVUZCVVN4RlFVRkZMRkZCUVZFN1VVRkRiRUlzVDBGQlR5eEZRVUZGTEU5QlFVODdVVUZEYUVJc1UwRkJVeXhGUVVGRkxFOUJRVThzUTBGQlF5eFRRVUZUTzFGQlF6VkNMRk5CUVZNc1JVRkJSU3hQUVVGUExFTkJRVU1zVTBGQlV6dFJRVU0xUWl4aFFVRmhMRVZCUVVVc1lVRkJZVHRSUVVNMVFpeGhRVUZoTEVWQlFVVXNZVUZCWVR0UlFVTTFRaXhMUVVGTExFVkJRVVVzUzBGQlN6dFJRVU5hTEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1QwRkJUenRSUVVOMFFpeGpRVUZqTEVWQlFVVXNTMEZCU3l4RFFVRkRMR05CUVdNN1VVRkRjRU1zVlVGQlZTeEZRVUZGTEV0QlFVczdVVUZEYWtJc1ZVRkJWU3hGUVVGRkxFOUJRVThzUTBGQlF5eFZRVUZWTzFGQlF6bENMRk5CUVZNc1JVRkJSU3hQUVVGUExFTkJRVU1zVTBGQlV6dFBRVU0zUWl4RFFVRkJPenROUVVWRUxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUdE5RVU16UXl4SlFVRkpMRTlCUVU4c1JVRkJSVHRSUVVOWUxGTkJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUdFBRVU16UXp0TFFVTkdPenRKUVVWRUxFbEJRVWtzVDBGQlR5eERRVUZETEUxQlFVMHNTMEZCU3l4VlFVRlZMRVZCUVVVN1RVRkRha01zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1ZVRkJWU3hGUVVGRk8xRkJRM0pETEV0QlFVc3NSVUZCUlN4TFFVRkxPMUZCUTFvc1ZVRkJWU3hGUVVGRkxFdEJRVXM3VDBGRGJFSXNRMEZCUXl4RFFVRkJPMHRCUTBnN08wbEJSVVFzVDBGQlR5eFJRVUZSTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVFN1IwRkRjRUk3TzBWQlJVUXNTVUZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEUxQlFVMHNTMEZCU3l4RFFVRkRMRVZCUVVVN1NVRkRkRU1zUzBGQlN5eERRVUZETEcxQ1FVRnRRaXhEUVVGRExGZEJRVmNzUlVGQlJTeG5Ra0ZCWjBJc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUdEpRVU12UkN4TFFVRkxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNWVUZCVlN4RlFVRkZMR1ZCUVdVc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUdEpRVU0zUkN4TFFVRkxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNZVUZCWVN4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkJPMGRCUTNCRk8wTkJRMFk3T3pzN096czdPenM3T3pzN096czdRVUZuUWtRc1UwRkJVeXhyUWtGQmEwSXNRMEZCUXl4TFFVRkxMRVZCUVVVN08wVkJSV3BETEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RlFVRkZPMGxCUTNKRExFbEJRVWtzVVVGQlVTeEhRVUZITEVWQlFVVXNRMEZCUVR0SlFVTnFRaXhMUVVGTExFbEJRVWtzUTBGQlF5eEpRVUZKTEZGQlFWRXNSVUZCUlR0TlFVTjBRaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdExRVU51UXp0SlFVTkVMRk5CUVZNc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1kwRkJZeXhGUVVGRk8wMUJRM0pGTEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTTdUVUZEYkVNc1ZVRkJWU3hGUVVGRkxFdEJRVXM3UzBGRGJFSXNRMEZCUXl4RFFVRkJPMGRCUTBnN08wVkJSVVFzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eGpRVUZqTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wbEJRM0JFTEVsQlFVa3NTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEYmtNc1NVRkJTU3hGUVVGRkxFZEJRVWNzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUVR0SlFVTjZRaXhKUVVGSkxFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVFN08wbEJSVEZDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRVZCUVVVN1RVRkRXaXhSUVVGUk8wdEJRMVE3TzBsQlJVUXNTVUZCU1N4UFFVRlBMRU5CUVVNc1pVRkJaU3hGUVVGRk8wMUJRek5DTEZsQlFWa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hEUVVGRExFTkJRVUU3VFVGRGNrTXNUMEZCVHl4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVUU3UzBGREwwSTdPMGxCUlVRc1NVRkJTU3hQUVVGUExFTkJRVU1zVFVGQlRTeExRVUZMTEZOQlFWTXNSVUZCUlR0TlFVTm9ReXhUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRVZCUVVVN1VVRkRia01zUzBGQlN5eEZRVUZGTEV0QlFVczdVVUZEV2l4UFFVRlBMRVZCUVVVc1MwRkJTeXhEUVVGRExFOUJRVTg3VVVGRGRFSXNZMEZCWXl4RlFVRkZMRXRCUVVzc1EwRkJReXhqUVVGak8xRkJRM0JETEZWQlFWVXNSVUZCUlN4TFFVRkxPMDlCUTJ4Q0xFTkJRVU1zUTBGQlFUdExRVU5JTzBsQlEwUXNTVUZCU1N4UFFVRlBMRU5CUVVNc1RVRkJUU3hMUVVGTExGVkJRVlVzUlVGQlJUdE5RVU5xUXl4VFFVRlRMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJTeFZRVUZWTEVWQlFVVTdVVUZEY2tNc1MwRkJTeXhGUVVGRkxFdEJRVXM3VVVGRFdpeFZRVUZWTEVWQlFVVXNTMEZCU3p0UFFVTnNRaXhEUVVGRExFTkJRVUU3UzBGRFNEdEpRVU5FTEU5QlFVOHNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGQk8wZEJRM0JDT3p0RlFVVkVMRWxCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4TlFVRk5MRXRCUVVzc1EwRkJReXhGUVVGRk8wbEJRM1JETEV0QlFVc3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eFhRVUZYTEVWQlFVVXNaMEpCUVdkQ0xFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVRTdTVUZETDBRc1MwRkJTeXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRlZCUVZVc1JVRkJSU3hsUVVGbExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVRTdTVUZETjBRc1MwRkJTeXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hyUWtGQmEwSXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRVHRIUVVOd1JUdERRVU5HT3p0QlFVVkVMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVU3UlVGRGJFSXNTMEZCU3l4RFFVRkRMR2RDUVVGblFpeERRVUZETEZsQlFWa3NSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUVR0RlFVTTVSQ3hoUVVGaExFZEJRVWNzU1VGQlNTeERRVUZCTzBOQlEzSkNPenRCUTNCblFrUTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRjVRa0VzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVN1JVRkRaaXhMUVVGTExFTkJRVU1zU1VGQlNTeEhRVUZITEVOQlFVTXNWMEZCVnp0SlFVTjJRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRMRkZCUVZFc1EwRkJRenRKUVVOMFF5eEpRVUZKTEZWQlFWVXNSMEZCUnl4VFFVRlRMRVZCUVVVc1JVRkJSVHROUVVNMVFpeFBRVUZQTEU5QlFVOHNSVUZCUlN4TFFVRkxMRlZCUVZVc1NVRkJTU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4TFFVRkxMRzFDUVVGdFFpeERRVUZETzB0QlF6TkZMRU5CUVVNN1NVRkRSaXhKUVVGSkxGTkJRVk1zUjBGQlJ5eFRRVUZUTEV0QlFVc3NSVUZCUlR0TlFVTTVRaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1RVRkRNMElzU1VGQlNTeExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVN1VVRkRha0lzVDBGQlR5eERRVUZETEVOQlFVTTdUMEZEVmp0TlFVTkVMRWxCUVVrc1RVRkJUU3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVNc1JVRkJSVHRSUVVOeVF5eFBRVUZQTEUxQlFVMHNRMEZCUXp0UFFVTm1PMDFCUTBRc1QwRkJUeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTTdTMEZETjBRc1EwRkJRenRKUVVOR0xFbEJRVWtzWTBGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTjZReXhKUVVGSkxGRkJRVkVzUjBGQlJ5eFRRVUZUTEV0QlFVc3NSVUZCUlR0TlFVTTNRaXhKUVVGSkxFZEJRVWNzUjBGQlJ5eFRRVUZUTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1RVRkRNMElzVDBGQlR5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMR05CUVdNc1EwRkJReXhEUVVGRE8wdEJRMjVFTEVOQlFVTTdPenRKUVVkR0xFOUJRVThzVTBGQlV5eEpRVUZKTEVOQlFVTXNVMEZCVXl4MVFrRkJkVUk3TzAxQlJXNUVMRWxCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF6czdPMDFCUjJJc1NVRkJTU3hMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRPenM3VFVGSE9VSXNTVUZCU1N4VFFVRlRMRWxCUVVrc1NVRkJTU3hGUVVGRk8xRkJRM0pDTEUxQlFVMHNTVUZCU1N4VFFVRlRMRU5CUVVNc2EwVkJRV3RGTEVOQlFVTXNRMEZCUXp0UFFVTjZSanM3TzAxQlIwUXNTVUZCU1N4TFFVRkxMRWRCUVVjc1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFdEJRVXNzVTBGQlV5eERRVUZETzAxQlEycEZMRWxCUVVrc1EwRkJReXhEUVVGRE8wMUJRMDRzU1VGQlNTeFBRVUZQTEV0QlFVc3NTMEZCU3l4WFFVRlhMRVZCUVVVN096dFJRVWRvUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eEZRVUZGTzFWQlEzUkNMRTFCUVUwc1NVRkJTU3hUUVVGVExFTkJRVU1zYlVWQlFXMUZMRU5CUVVNc1EwRkJRenRUUVVNeFJqczdPMUZCUjBRc1NVRkJTU3hUUVVGVExFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNSVUZCUlR0VlFVTjRRaXhEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMU5CUTJ4Q08wOUJRMFk3T3pzN1RVRkpSQ3hKUVVGSkxFZEJRVWNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE96czdPenROUVV0cVF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzU1VGQlNTeExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN096dE5RVWMxUkN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03TzAxQlJWWXNTVUZCU1N4TlFVRk5MRU5CUVVNN1RVRkRXQ3hQUVVGUExFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFVVTdVVUZEWkN4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzFGQlEyeENMRWxCUVVrc1MwRkJTeXhGUVVGRk8xVkJRMVFzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJReXhMUVVGTExGZEJRVmNzUjBGQlJ5eExRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF6dFRRVU12UlN4TlFVRk5PMVZCUTB3c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXp0VFFVTm1PMUZCUTBRc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dFBRVU5TT3p0TlFVVkVMRU5CUVVNc1EwRkJReXhOUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZET3p0TlFVVm1MRTlCUVU4c1EwRkJReXhEUVVGRE8wdEJRMVlzUTBGQlF6dEhRVU5JTEVWQlFVVXNRMEZCUXl4RFFVRkRPME5CUTA0N096czdPenM3T3pzN096dEJRM1pIUkN4SlFVRkpMRTFCUVUwc1IwRkJSeXhqUVVGakxFZEJRVWNzVDBGQlR5eE5RVUZOTEVsQlFVa3NWMEZCVnl4SlFVRkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFbEJRVWtzU1VGQlNUdEpRVU0zUlN4TlFVRk5MRWRCUVVjc1QwRkJUeXhKUVVGSkxFbEJRVWtzVjBGQlZ5eEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJTU3hIUVVGSExFbEJRVWs3TzBsQlJTOUVMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUlVGQlJTeERRVUZETzBGQlF6bENMRWxCUVVrc1QwRkJUeXhIUVVGSExFbEJRVWtzVVVGQlVTeEZRVUZGTEVWQlFVRXNSMEZCUnl4SFFVRkhMRTFCUVUwc1EwRkJReXhGUVVGQk96czdPMEZEVEhwRExFbEJRVWtzU1VGQlNTeEhRVUZITEdOQlFXTXNSMEZCUnl4RlFVRkZMRTlCUVU4c1JVRkJSU3hQUVVGUExFVkJRVVVzUTBGQlF6dEJRVU5xUkN4SlFVRkpMRTlCUVU4c1IwRkJSeXhKUVVGSkxGRkJRVkVzUlVGQlJTeEZRVUZCTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJRVHM3TzBGRFJIWkRMR0ZCUVdNc1IwRkJSeXhWUVVGVkxFVkJRVVVzUlVGQlJUdEZRVU0zUWl4UFFVRlBMRTlCUVU4c1JVRkJSU3hMUVVGTExGRkJRVkVzUjBGQlJ5eEZRVUZGTEV0QlFVc3NTVUZCU1N4SFFVRkhMRTlCUVU4c1JVRkJSU3hMUVVGTExGVkJRVlVzUTBGQlF6dERRVU40UlN4RFFVRkRPenRCUTBaR0xFbEJRVWtzVVVGQlVTeEhRVUZIUVN4VFFVRjFRaXhEUVVGRE8wRkJRM1pETEdGQlFXTXNSMEZCUnl4VlFVRlZMRVZCUVVVc1JVRkJSVHRGUVVNM1FpeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVUVzVFVGQlRTeFRRVUZUTEVOQlFVTXNSVUZCUlN4SFFVRkhMRzlDUVVGdlFpeERRVUZETEVOQlFVTXNSVUZCUVR0RlFVTTVSQ3hQUVVGUExFVkJRVVVzUTBGQlF6dERRVU5ZTEVOQlFVTTdPMEZEU2tZc1ZVRkJZeXhIUVVGSExGVkJRVlVzU1VGQlNTeEZRVUZGTzBWQlF5OUNMRWxCUVVrN1NVRkRSaXhQUVVGUExFTkJRVU1zUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0SFFVTnFRaXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzBsQlExWXNUMEZCVHl4SlFVRkpMRU5CUVVNN1IwRkRZanREUVVOR0xFTkJRVU03T3p0QlEweEdMR2RDUVVGakxFZEJRVWNzUTBGQlEwRXNUVUZCYlVJc1EwRkJReXhaUVVGWk8wVkJRMmhFTEU5QlFVOHNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhGUVVGRkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEVWQlFVVXNSMEZCUnl4RlFVRkZMRmxCUVZrc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03UTBGRGJFWXNRMEZCUXl4RFFVRkRPenRCUTBoSUxFbEJRVWxETEZWQlFWRXNSMEZCUjBNc1UwRkJkVUlzUTBGQlF6dEJRVU4yUXl4SlFVRkpReXhWUVVGUkxFZEJRVWRJTEU5QlFXOUNMRU5CUVVNc1VVRkJVU3hEUVVGRE96dEJRVVUzUXl4SlFVRkpMRVZCUVVVc1IwRkJSME1zVlVGQlVTeERRVUZEUlN4VlFVRlJMRU5CUVVNc1NVRkJTVVlzVlVGQlVTeERRVUZEUlN4VlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGRGFFVXNZMEZCWXl4SFFVRkhMRlZCUVZVc1JVRkJSU3hGUVVGRk8wVkJRemRDTEU5QlFVOHNSVUZCUlN4SFFVRkhRU3hWUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRVZCUVVVc1EwRkJRenREUVVNM1F5eERRVUZET3p0QlEwNUdMR2xDUVVGakxFZEJRVWNzUTBGQlEwTXNXVUZCZVVJc1NVRkJTU3hEUVVGRFJpeE5RVUZ0UWl4RFFVRkRMRmxCUVZrN1JVRkRPVVVzVDBGQlR5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRSaXhWUVVGM1FpeERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hGUVVGRkxFZEJRVWNzUlVGQlJTeFpRVUZaTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPME5CUXk5SExFTkJRVU1zUTBGQlF6czdPMEZEUkVnc1NVRkJTVU1zVlVGQlVTeEhRVUZIUkN4VFFVRjFRaXhEUVVGRE96czdRVUZIZGtNc1owSkJRV01zUjBGQlJ5eFZRVUZWTEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVN1JVRkRhRU1zU1VGQlNTeERRVUZEUXl4VlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlFTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RlFVRkJPMFZCUXpkQ0xFbEJRVWtzUlVGQlJTeEZRVUZGTEVkQlFVY3NRMEZCUXp0RlFVTmFMRWxCUVVrc1EwRkJReXhKUVVGSkxGRkJRVkVzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hWUVVGVkxFbEJRVWtzUTBGQlEwRXNWVUZCVVN4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJRU3hQUVVGUExFZEJRVWNzUTBGQlF5eEZRVUZCTzBWQlF6ZEdMRWxCUVVrc1VVRkJVU3hGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEU5QlFVOHNRMEZCUXl4SlFVRkpMRlZCUVZVc1NVRkJTU3hEUVVGRFFTeFZRVUZSTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkJMRTlCUVU4c1IwRkJSeXhEUVVGRExFVkJRVUU3UlVGRGRrWXNTVUZCU1N4RFFVRkRMRU5CUVVNc1NVRkJTU3hSUVVGUkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1ZVRkJWU3hKUVVGSkxFTkJRVU5CTEZWQlFWRXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVFc1QwRkJUeXhIUVVGSExFTkJRVU1zUlVGQlFUdEZRVU01Uml4TlFVRk5MRk5CUVZNc1EwRkJReXg1UTBGQmVVTXNRMEZCUXl4RFFVRkRPME5CUXpWRUxFTkJRVU03TzBGRFdFWXNTVUZCU1N4UlFVRlJMRWRCUVVkSkxGTkJRWFZDTEVOQlFVTTdRVUZEZGtNc1NVRkJTU3hqUVVGakxFZEJRVWRFTEdGQlFUUkNMRU5CUVVNN1FVRkRiRVFzU1VGQlNTeFhRVUZYTEVkQlFVZEdMRmxCUVRCQ0xFTkJRVU03UVVGRE4wTXNTVUZCU1Vrc1NVRkJSU3hIUVVGSExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTTdPMEZCUlM5Q0xGRkJRVmxPTEZsQlFYbENMRWRCUVVjc1RVRkJUU3hEUVVGRExHTkJRV01zUjBGQlJ5eFRRVUZUTEdOQlFXTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRkxGVkJRVlVzUlVGQlJUdEZRVU40Unl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRFdpeERRVUZETEVkQlFVY3NWMEZCVnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEZRVU42UWl4UlFVRlJMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU03UlVGRGNrSXNTVUZCU1N4alFVRmpMRVZCUVVVc1JVRkJRU3hKUVVGSk8wbEJRM1JDTEU5QlFVOU5MRWxCUVVVc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkRPMGRCUXpkQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVXNaVUZCWlN4RlFVRkJPMFZCUXpOQ0xFbEJRVWtzUzBGQlN5eEpRVUZKTEZWQlFWVXNTVUZCU1N4TFFVRkxMRWxCUVVrc1ZVRkJWU3hGUVVGRkxFVkJRVUVzVFVGQlRTeFRRVUZUTEVOQlFVTXNNRUpCUVRCQ0xFTkJRVU1zUTBGQlF5eEZRVUZCTzBWQlF6VkdMRWxCUVVrc1QwRkJUeXhKUVVGSkxGVkJRVlVzUlVGQlJTeEZRVUZCTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhWUVVGVkxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVRTdSVUZEYmtRc1QwRkJUeXhEUVVGRExFTkJRVU03UTBGRFZpeERRVUZET3pzN096czdRVU5tUml4cFFrRkJZeXhIUVVGSExGVkJRVlVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlR0RlFVTjRReXhQUVVGUE8wbEJRMHdzVlVGQlZTeEZRVUZGTEVWQlFVVXNUVUZCVFN4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVONlFpeFpRVUZaTEVWQlFVVXNSVUZCUlN4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRE8wbEJRek5DTEZGQlFWRXNSVUZCUlN4RlFVRkZMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03U1VGRGRrSXNTMEZCU3l4RlFVRkZMRXRCUVVzN1IwRkRZaXhEUVVGRE8wTkJRMGdzUTBGQlF6czdRVU5RUml4SlFVRkpMRVZCUVVVc1IwRkJSMFlzVTBGQmRVSXNRMEZCUXp0QlFVTnFReXhKUVVGSkxGVkJRVlVzUjBGQlIwWXNZVUZCTWtJc1EwRkJRenRCUVVNM1F5eFRRVUZqTEVkQlFVZEdMRmxCUVhsQ0xFZEJRVWNzVlVGQlZTeE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZMRXRCUVVzc1JVRkJSVHRGUVVONlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03UTBGRGFFUXNSMEZCUnl4VlFVRlZMRTFCUVUwc1JVRkJSU3hIUVVGSExFVkJRVVVzUzBGQlN5eEZRVUZGTzBWQlEyaERMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTTdSVUZEY0VJc1QwRkJUeXhOUVVGTkxFTkJRVU03UTBGRFppeERRVUZET3p0QlExQkdMRWxCUVVrc1kwRkJZeXhIUVVGSExFVkJRVVVzUTBGQlF5eGpRVUZqTEVOQlFVTTdRVUZEZGtNc1VVRkJZeXhIUVVGSExGVkJRVlVzUlVGQlJTeEZRVUZGTEVkQlFVY3NSVUZCUlR0RlFVTnNReXhQUVVGUExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wTkJRM0pETEVOQlFVTTdPMEZEU0VZc1NVRkJTU3hGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETzBGQlExZ3NTVUZCU1N4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETzBGQlEzWkNMRkZCUVdNc1IwRkJSeXhWUVVGVkxFZEJRVWNzUlVGQlJUdEZRVU01UWl4UFFVRlBMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eExRVUZMTEZOQlFWTXNSMEZCUnl4RlFVRkZMRWRCUVVjc1IwRkJSeXhGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlN4SFFVRkhMRVZCUVVVc1JVRkJSU3hSUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTjJSaXhEUVVGRE96czdRVU5LUml4SlFVRkpMRTFCUVUwc1IwRkJSMDhzVDBGQmIwSXNRMEZCUXp0QlFVTnNReXhKUVVGSkxFbEJRVWtzUjBGQlIwWXNTMEZCYTBJc1EwRkJRenRCUVVNNVFpeEpRVUZKTEVkQlFVY3NSMEZCUjBRc1NVRkJhVUlzUTBGQlF6dEJRVU0xUWl4SlFVRkpMRWRCUVVjc1IwRkJSMFlzU1VGQmFVSXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVOdVF5eEpRVUZKTEZOQlFWTXNSMEZCUnl4VlFVRlZMRU5CUVVNN1FVRkRNMElzU1VGQlNTeFRRVUZUTEVkQlFVY3NVVUZCVVN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE8wRkJRM0JETEVsQlFVa3NSMEZCUnl4SFFVRkhMRU5CUVVNc1JVRkJSU3hIUVVGSExGTkJRVk1zUlVGQlJTeExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN08wRkJSVFZEUml4TFFVRnJRaXhEUVVGRExHRkJRV0VzUjBGQlJ5eFZRVUZWTEVWQlFVVXNSVUZCUlR0RlFVTXZReXhQUVVGUExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1EwRkRNMElzUTBGQlF6czdRVUZGUml4RFFVRkRMR05CUVdNc1IwRkJSeXhWUVVGVkxFTkJRVU1zUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSVHRGUVVNM1F5eEpRVUZKTEZWQlFWVXNSMEZCUnl4UFFVRlBMRWRCUVVjc1NVRkJTU3hWUVVGVkxFTkJRVU03UlVGRE1VTXNTVUZCU1N4VlFVRlZMRVZCUVVVc1JVRkJRU3hIUVVGSExFTkJRVU1zUjBGQlJ5eEZRVUZGTEUxQlFVMHNRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzVFVGQlRTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVFN1JVRkRNMFFzU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1IwRkJSeXhGUVVGRkxFVkJRVUVzVDBGQlR5eEZRVUZCTzBWQlF6TkNMRWxCUVVrc1ZVRkJWU3hGUVVGRkxFVkJRVUVzUjBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlFUdEZRVU01Uml4SlFVRkpMRU5CUVVNc1MwRkJTeXhOUVVGTkxFVkJRVVU3U1VGRGFFSXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dEhRVU5rTEUxQlFVMHNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRKUVVOb1FpeFBRVUZQTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOa0xFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wZEJRMjVDTEUxQlFVMHNTVUZCU1N4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVU3U1VGRGFrSXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dEhRVU5rTEUxQlFVMDdTVUZEVEN4SlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGRkxFZEJRVWNzUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0SFFVTnVRanM3UTBGRlJpeEZRVUZGTEZGQlFWRXNRMEZCUXl4VFFVRlRMRVZCUVVVc1UwRkJVeXhGUVVGRkxGTkJRVk1zVVVGQlVTeEhRVUZITzBWQlEzQkVMRTlCUVU4c1QwRkJUeXhKUVVGSkxFbEJRVWtzVlVGQlZTeEpRVUZKTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRPME5CUTNaRkxFTkJRVU1zUTBGQlF6czdPMEZET1VKSUxHTkJRV01zUjBGQlJ5eFZRVUZWTEVWQlFVVXNSVUZCUlR0RlFVTTNRaXhKUVVGSkxFOUJRVThzUlVGQlJTeEpRVUZKTEZWQlFWVXNSVUZCUlN4RlFVRkJMRTFCUVUwc1UwRkJVeXhEUVVGRExFVkJRVVVzUjBGQlJ5eHhRa0ZCY1VJc1EwRkJReXhEUVVGRExFVkJRVUU3UlVGRGVrVXNUMEZCVHl4RlFVRkZMRU5CUVVNN1EwRkRXQ3hEUVVGRE96czdRVU5HUml4SlFVRkpMRk5CUVZNc1IwRkJSMEVzVlVGQmQwSXNRMEZCUXp0QlFVTjZReXhSUVVGakxFZEJRVWNzVlVGQlZTeEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTFCUVUwc1JVRkJSVHRGUVVNelF5eFRRVUZUTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1JVRkRaQ3hKUVVGSkxFbEJRVWtzUzBGQlN5eFRRVUZUTEVWQlFVVXNSVUZCUVN4UFFVRlBMRVZCUVVVc1EwRkJReXhGUVVGQk8wVkJRMnhETEZGQlFWRXNUVUZCVFR0SlFVTmFMRXRCUVVzc1EwRkJReXhGUVVGRkxFOUJRVThzVlVGQlZTeERRVUZETEVWQlFVVTdUVUZETVVJc1QwRkJUeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJRenRMUVVONlFpeERRVUZETzBsQlEwWXNTMEZCU3l4RFFVRkRMRVZCUVVVc1QwRkJUeXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVTdUVUZETjBJc1QwRkJUeXhGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU03UzBGRE5VSXNRMEZCUXp0SlFVTkdMRXRCUVVzc1EwRkJReXhGUVVGRkxFOUJRVThzVlVGQlZTeERRVUZETEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHROUVVOb1F5eFBRVUZQTEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRMMElzUTBGQlF6dEhRVU5JTzBWQlEwUXNUMEZCVHl4NVFrRkJlVUk3U1VGRE9VSXNUMEZCVHl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUXp0SFFVTnNReXhEUVVGRE8wTkJRMGdzUTBGQlF6czdRVU51UWtZc1NVRkJTVkVzVVVGQlRTeEhRVUZIUkN4UFFVRnZRaXhEUVVGRE8wRkJRMnhETEVsQlFVa3NTVUZCU1N4SFFVRkhSaXhMUVVGclFpeERRVUZETzBGQlF6bENMRWxCUVVrc1NVRkJTU3hIUVVGSFJDeExRVUZyUWl4RFFVRkRPMEZCUXpsQ0xFbEJRVWtzVVVGQlVTeEhRVUZIUml4VFFVRnpRaXhEUVVGRE8wRkJRM1JETEVsQlFVa3NSMEZCUnl4SFFVRkhSaXhKUVVGcFFpeERRVUZETzBGQlF6VkNMRWxCUVVrc1UwRkJVeXhIUVVGSExGZEJRVmNzUTBGQlF6czdRVUZGTlVJc1NVRkJTVk1zVTBGQlR5eEhRVUZITEZWQlFWVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVU3UlVGRE1VTXNTVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hIUVVGSFFTeFRRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRPMFZCUTJwRExFbEJRVWtzVTBGQlV5eEhRVUZITEVsQlFVa3NSMEZCUjBFc1UwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF6dEZRVU5xUXl4SlFVRkpMRk5CUVZNc1IwRkJSeXhKUVVGSkxFZEJRVWRCTEZOQlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNN1JVRkRha01zU1VGQlNTeFJRVUZSTEVkQlFVY3NTVUZCU1N4SFFVRkhRU3hUUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzBWQlEyaERMRWxCUVVrc1QwRkJUeXhIUVVGSExFbEJRVWtzUjBGQlIwRXNVMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVNdlFpeEpRVUZKTEUxQlFVMHNSMEZCUnl4VFFVRlRMRWRCUVVkRUxGRkJRVTBzUjBGQlJ5eFRRVUZUTEVkQlFVZEJMRkZCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlMwRXNVVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTkJMRkZCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1JVRkRjRWdzU1VGQlNTeFBRVUZQTEVkQlFVY3NVMEZCVXl4SFFVRkhMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETzBWQlEycEZMRWxCUVVrc1VVRkJVU3hIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTXNTMEZCU3l4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTTdSVUZETDBRc1NVRkJTU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNN1JVRkRka0lzU1VGQlNTeFRRVUZUTEVWQlFVVXNSVUZCUVN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVUU3UlVGRE4wSXNTMEZCU3l4SFFVRkhMRWxCUVVrc1RVRkJUU3hGUVVGRk96dEpRVVZzUWl4SFFVRkhMRWRCUVVjc1EwRkJReXhUUVVGVExFbEJRVWtzVFVGQlRTeEpRVUZKTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhUUVVGVExFTkJRVU03TzBsQlJYaEVMRWRCUVVjc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE96dEpRVVZ1UXl4SFFVRkhMRWRCUVVjc1QwRkJUeXhKUVVGSkxFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTXNSMEZCUnl4RlFVRkZRU3hSUVVGTkxFTkJRVU1zUjBGQlJ5eFJRVUZSTEVsQlFVa3NUMEZCVHl4SFFVRkhMRWxCUVVrc1ZVRkJWU3hIUVVGSExFZEJRVWNzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWRCUVVjc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6czdTVUZGTDBjc1NVRkJTU3hOUVVGTkxFVkJRVVVzUlVGQlFTeFJRVUZSTEVOQlFVTXNUVUZCVFN4RlFVRkZMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNTeEhRVUZIUXl4VFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlFUczdTVUZGZWtRc1NVRkJTU3hQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NSMEZCUnl4RlFVRkZMRVZCUVVFc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJRVHRKUVVOcVJDeEpRVUZKTEZGQlFWRXNTVUZCU1N4UlFVRlJMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVWQlFVRXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eEZRVUZCTzBkQlF6TkVPME5CUTBZc1EwRkJRenRCUVVOR1JDeFJRVUZOTEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRenM3UVVGRmJrSkRMRk5CUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyUkJMRk5CUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyUkJMRk5CUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyUkJMRk5CUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBGQlEyUkJMRk5CUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyWkJMRk5CUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyWkJMRk5CUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyWkJMRk5CUVU4c1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzBGQlEyaENMRmRCUVdNc1IwRkJSMEVzVTBGQlR5eERRVUZET3p0QlF6RkRla0lzU1VGQlNVTXNWVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU03TzBGQlJUTkNMRkZCUVdNc1IwRkJSeXhWUVVGVkxFVkJRVVVzUlVGQlJUdEZRVU0zUWl4UFFVRlBRU3hWUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTjJReXhEUVVGRE96czdRVU5JUml4SlFVRkpMRWRCUVVjc1IwRkJSMVlzU1VGQmFVSXNRMEZCUXpzN1FVRkZOVUlzV1VGQll5eEhRVUZITEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhOUVVGTkxFZEJRVWNzVlVGQlZTeEZRVUZGTEVWQlFVVTdSVUZETlVVc1QwRkJUeXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wTkJRM2hFTEVOQlFVTTdPMEZEVEVZN1FVRkRRU3haUVVGakxFZEJRVWNzVlVGQlZTeEZRVUZGTEVWQlFVVTdSVUZETjBJc1NVRkJTU3hGUVVGRkxFbEJRVWtzVTBGQlV5eEZRVUZGTEVWQlFVRXNUVUZCVFN4VFFVRlRMRU5CUVVNc2QwSkJRWGRDTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJRVHRGUVVOd1JTeFBRVUZQTEVWQlFVVXNRMEZCUXp0RFFVTllMRU5CUVVNN096dEJRMGhHTEVsQlFVbFhMRk5CUVU4c1IwRkJSMVFzVVVGQmNVSXNRMEZCUXp0QlFVTndReXhKUVVGSkxFOUJRVThzUjBGQlIwWXNVVUZCY1VJc1EwRkJRenRCUVVOd1F5eGpRVUZqTEVkQlFVY3NWVUZCVlN4RlFVRkZMRVZCUVVVN1JVRkROMElzVDBGQlQxY3NVMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBOQlF6ZENMRU5CUVVNN08wRkRURVk3UVVGRFFTeEpRVUZKTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wRkJRM0pDTEVsQlFVa3NTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU03UVVGRGRrSXNZMEZCWXl4SFFVRkhMRlZCUVZVc1JVRkJSU3hGUVVGRk8wVkJRemRDTEU5QlFVOHNTMEZCU3l4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFZEJRVWNzUzBGQlN5eEhRVUZITEVsQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRenREUVVNeFJDeERRVUZET3pzN1FVTktSaXhKUVVGSkxGTkJRVk1zUjBGQlIxZ3NWVUZCZDBJc1EwRkJRenRCUVVONlF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8wRkJRMjVDTEdGQlFXTXNSMEZCUnl4VlFVRlZMRVZCUVVVc1JVRkJSVHRGUVVNM1FpeFBRVUZQTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4blFrRkJaMElzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0RFFVTXhSQ3hEUVVGRE96dEJRMHhHTEVsQlFVbFpMRmRCUVZNc1IwRkJSMW9zVlVGQmQwSXNRMEZCUXp0QlFVTjZReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTI1Q0xFbEJRVWxoTEV0QlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRE8wRkJRMjVDTEc5Q1FVRmpMRWRCUVVjc1ZVRkJWU3hMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTzBWQlEzaERMRXRCUVVzc1IwRkJSMFFzVjBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMFZCUTNwQ0xFOUJRVThzUzBGQlN5eEhRVUZITEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1MwRkJTeXhIUVVGSExFMUJRVTBzUlVGQlJTeERRVUZETEVOQlFVTXNSMEZCUjBNc1MwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0RFFVTm9SU3hEUVVGRE96czdPMEZEU2tZc1NVRkJTVU1zVjBGQlV5eEhRVUZIVml4VlFVRjNRaXhEUVVGRE8wRkJRM3BETEVsQlFVa3NVVUZCVVN4SFFVRkhSaXhUUVVGMVFpeERRVUZETzBGQlEzWkRMRWxCUVVrc1pVRkJaU3hIUVVGSFJpeG5Ra0ZCSzBJc1EwRkJRenRCUVVOMFJDeHJRa0ZCWXl4SFFVRkhMRlZCUVZVc1YwRkJWeXhGUVVGRk8wVkJRM1JETEU5QlFVOHNWVUZCVlN4TFFVRkxMRVZCUVVVc1JVRkJSU3hGUVVGRkxGTkJRVk1zUlVGQlJUdEpRVU55UXl4SlFVRkpMRU5CUVVNc1IwRkJSMk1zVjBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMGxCUTNwQ0xFbEJRVWtzVFVGQlRTeEhRVUZITEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03U1VGRGFFTXNTVUZCU1N4TFFVRkxMRWRCUVVjc1pVRkJaU3hEUVVGRExGTkJRVk1zUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0SlFVTXZReXhKUVVGSkxFdEJRVXNzUTBGQlF6czdPMGxCUjFZc1NVRkJTU3hYUVVGWExFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNSVUZCUlN4RlFVRkJMRTlCUVU4c1RVRkJUU3hIUVVGSExFdEJRVXNzUlVGQlJUdE5RVU5zUkN4TFFVRkxMRWRCUVVjc1EwRkJReXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTTdPMDFCUlc1Q0xFbEJRVWtzUzBGQlN5eEpRVUZKTEV0QlFVc3NSVUZCUlN4RlFVRkJMRTlCUVU4c1NVRkJTU3hEUVVGRExFVkJRVUU3TzB0QlJXcERMRVZCUVVFc1RVRkJUU3hGUVVGQkxFMUJRVTBzVFVGQlRTeEhRVUZITEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVc1JVRkJSU3hGUVVGQkxFbEJRVWtzVjBGQlZ5eEpRVUZKTEV0QlFVc3NTVUZCU1N4RFFVRkRMRVZCUVVVN1RVRkRia1VzU1VGQlNTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1JVRkJSU3hGUVVGRkxFVkJRVUVzVDBGQlR5eFhRVUZYTEVsQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGQk8wdEJRM1pFTEVsQlFVRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETzBkQlF6ZENMRU5CUVVNN1EwRkRTQ3hEUVVGRE96dEJRM1JDUml4SlFVRkpUaXhSUVVGTkxFZEJRVWRTTEU5QlFXOUNMRU5CUVVNN1FVRkRiRU1zU1VGQlNTeE5RVUZOTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVU03UVVGRGJFTXNTVUZCU1N4TFFVRkxMRWRCUVVkUkxGRkJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCUzBFc1VVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTNCRUxGZEJRV01zUjBGQlJ5eFZRVUZWTEVkQlFVY3NSVUZCUlR0RlFVTTVRaXhQUVVGUExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTTdRMEZEZUVNc1EwRkJRenM3UVVOTVJpeEpRVUZKTEUxQlFVMHNSMEZCUjA0c1QwRkJiMElzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0QlFVTXhReXhKUVVGSkxFZEJRVWNzUjBGQlIwWXNTVUZCYVVJc1EwRkJRenRCUVVNMVFpeGpRVUZqTEVkQlFVY3NWVUZCVlN4SFFVRkhMRVZCUVVVN1JVRkRPVUlzVDBGQlR5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRE8wTkJRMmhFTEVOQlFVTTdPMEZEU2tZc1NVRkJTU3hIUVVGSExFZEJRVWRMTEVsQlFXbENMRU5CUVVNN1FVRkROVUlzU1VGQlNTeFRRVUZUTEVkQlFVZEVMRlZCUVhkQ0xFTkJRVU03UVVGRGVrTXNTVUZCU1N4WlFVRlpMRWRCUVVkR0xHTkJRVFJDTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1FVRkRka1FzU1VGQlNTeFJRVUZSTEVkQlFVZEdMRlZCUVhkQ0xFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdPMEZCUlhCRUxIVkNRVUZqTEVkQlFVY3NWVUZCVlN4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGRk8wVkJRM2hETEVsQlFVa3NRMEZCUXl4SFFVRkhMRk5CUVZNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF6dEZRVU14UWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UlVGRFZpeEpRVUZKTEUxQlFVMHNSMEZCUnl4RlFVRkZMRU5CUVVNN1JVRkRhRUlzU1VGQlNTeEhRVUZITEVOQlFVTTdSVUZEVWl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUlVGQlFTeEpRVUZKTEVkQlFVY3NTVUZCU1N4UlFVRlJMRVZCUVVVc1JVRkJRU3hIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4SlFVRkpMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCUVRzN1JVRkZjRVVzVDBGQlR5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSU3hGUVVGQkxFbEJRVWtzUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlN4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlR0SlFVTnlSQ3hEUVVGRExGbEJRVmtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RFFVRkRMRWxCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SFFVTm9SQ3hGUVVGQk8wVkJRMFFzVDBGQlR5eE5RVUZOTEVOQlFVTTdRMEZEWml4RFFVRkRPenRCUTJoQ1JqdEJRVU5CTEdkQ1FVRmpMRWRCUVVjN1JVRkRaaXdyUmtGQkswWTdSVUZETDBZc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZET3pzN1FVTkdZaXhKUVVGSkxFdEJRVXNzUjBGQlIwVXNiVUpCUVd0RExFTkJRVU03UVVGREwwTXNTVUZCU1N4WFFVRlhMRWRCUVVkR0xGbEJRVEpDTEVOQlFVTTdPMEZCUlRsRExHVkJRV01zUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4SlFVRkpMRk5CUVZNc1NVRkJTU3hEUVVGRExFTkJRVU1zUlVGQlJUdEZRVU12UXl4UFFVRlBMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzVjBGQlZ5eERRVUZETEVOQlFVTTdRMEZET1VJc1EwRkJRenM3UVVOT1JpeFZRVUZaTEUxQlFVMHNRMEZCUXl4eFFrRkJjVUlzUTBGQlF6czdPenM3TzBGRFFYcERMRlZCUVZrc1JVRkJSU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRPenM3T3pzN08wRkRRM0JETEVsQlFVbGxMRk5CUVU4c1IwRkJSMllzVVVGQmNVSXNRMEZCUXp0QlFVTndReXhoUVVGakxFZEJRVWNzVlVGQlZTeEZRVUZGTEVWQlFVVTdSVUZETjBJc1QwRkJUeXhOUVVGTkxFTkJRVU5sTEZOQlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRE8wTkJRelZDTEVOQlFVTTdPenRCUTBaR0xFbEJRVWtzVDBGQlR5eEhRVUZIUXl4WFFVRjVRaXhEUVVGRE8wRkJRM2hETEVsQlFVa3NTVUZCU1N4SFFVRkhWQ3hYUVVGNVFpeERRVUZETzBGQlEzSkRMRWxCUVVrc1IwRkJSeXhIUVVGSFJpeFZRVUYzUWl4RFFVRkRPMEZCUTI1RExFbEJRVWtzVVVGQlVTeEhRVUZIUkN4VFFVRjFRaXhEUVVGRE8wRkJRM1pETEVsQlFVa3NUMEZCVHl4SFFVRkhSaXhSUVVGeFFpeERRVUZETzBGQlEzQkRMRWxCUVVrc1QwRkJUeXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTTdPenRCUVVjMVFpeHBRa0ZCWXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhKUVVGSlJpeE5RVUZ0UWl4RFFVRkRMRmxCUVZrN1JVRkRNMFFzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRPMFZCUTFnc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZET3p0RlFVVllMRWxCUVVrc1EwRkJReXhIUVVGSExFMUJRVTBzUlVGQlJTeERRVUZETzBWQlEycENMRWxCUVVrc1EwRkJReXhIUVVGSExITkNRVUZ6UWl4RFFVRkRPMFZCUXk5Q0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1JVRkRWQ3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGVkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdSVUZEYUVRc1QwRkJUeXhQUVVGUExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBOQlF6VkZMRU5CUVVNc1IwRkJSeXhUUVVGVExFMUJRVTBzUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RlFVRkZPenM3UlVGRGJrTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBWQlEzcENMRWxCUVVrc1NVRkJTU3hIUVVGSExGTkJRVk1zUTBGQlF5eE5RVUZOTEVOQlFVTTdSVUZETlVJc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzBWQlEyUXNTVUZCU1N4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dEZRVU40UWl4SlFVRkpMRTFCUVUwc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETzBWQlEyNUNMRTlCUVU4c1NVRkJTU3hIUVVGSExFdEJRVXNzUlVGQlJUdEpRVU51UWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhQUVVGUExFTkJRVU5wUWl4WFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzBsQlEzQkRMRWxCUVVrc1NVRkJTU3hIUVVGSExGVkJRVlVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU4wUlN4SlFVRkpMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETzBsQlEzcENMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU5XTEVsQlFVa3NSMEZCUnl4RFFVRkRPMGxCUTFJc1QwRkJUeXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTEVWQlFVRXNTVUZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZCTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNTVUZCUVR0SFFVTjZSU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzBOQlExb3NSMEZCUnl4UFFVRlBMRU5CUVVNN096dEJRMmhEV2l4SlFVRkpMRTlCUVU4c1IwRkJSMllzVDBGQmIwSXNRMEZCUXpzN1FVRkZia01zVDBGQlR5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGRExFTkJRVU1zUlVGQlJTeFJRVUZSTEVWQlFVVXNSVUZCUlN4TlFVRk5MRVZCUVVWR0xHRkJRVEpDTEVWQlFVVXNRMEZCUXl4RFFVRkRPenRCUTBoc1JqczdPenM3T3pzN096czdPenM3T3pzN1IwRnJRa0VzUVVGQmFVTTdPMEZEYkVKcVF6czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmQwSkJMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWTBGQll5eEZRVUZGTzBWQlF6RkNMRTFCUVUwc1EwRkJReXhqUVVGakxFZEJRVWNzUTBGQlF5eFRRVUZUTEUxQlFVMHNSVUZCUlN4TFFVRkxMRVZCUVVVN1NVRkRMME1zU1VGQlNTeEhRVUZITEVOQlFVTTdTVUZEVWl4VFFVRlRMR05CUVdNc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eEZRVUZGTzAxQlEyaERMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMDFCUTI1Q0xFOUJRVThzUTBGQlF5eERRVUZETzB0QlExWTdTVUZEUkN4SlFVRkpPenROUVVWR0xFZEJRVWNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zVFVGQlRTeERRVUZETEZOQlFWTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU03VFVGRGJrVXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTTdTMEZEY0VJc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdE5RVU5XT3p0UlFVVkZMRTFCUVUwc1EwRkJReXhUUVVGVExFdEJRVXNzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXpzN096dFJRVWs1UWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eFRRVUZUTEV0QlFVc3NTMEZCU3l4RFFVRkRPenM3TzFGQlNYUkRPMUZCUTBFc1QwRkJUenRQUVVOU096czdUVUZIUkN4SFFVRkhMRWRCUVVjc1UwRkJVeXhMUVVGTExFVkJRVVU3VVVGRGNFSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF6dFBRVU55UWl4RFFVRkRPenM3T3pzN1RVRk5SaXhqUVVGakxFTkJRVU1zVVVGQlVTeEhRVUZITEdOQlFXTTdVVUZEZEVNc1kwRkJZeXhEUVVGRExFVkJRVVVzUlVGQlJTeEpRVUZKTEVOQlFVTTdVVUZEZUVJc1RVRkJUU3hEUVVGRExGTkJRVk03VDBGRGFrSXNXVUZCV1N4TlFVRk5MRU5CUVVNN096czdPenM3TzB0QlVYSkNPMGxCUTBRc1QwRkJUeXhqUVVGakxFTkJRVU03UjBGRGRrSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF6dERRVU42UWpzN08wRkRla1ZFTEVsQlFVa3NTMEZCU3l4SFFVRkhTU3hQUVVGdlFpeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMEZCUTNoRExFbEJRVWtzUjBGQlJ5eEhRVUZIUml4SlFVRnBRaXhEUVVGRE8wRkJRelZDTEVsQlFVa3NUVUZCVFN4SFFVRkhSaXhQUVVGdlFpeERRVUZETEUxQlFVMHNRMEZCUXp0QlFVTjZReXhKUVVGSkxGVkJRVlVzUjBGQlJ5eFBRVUZQTEUxQlFVMHNTVUZCU1N4VlFVRlZMRU5CUVVNN08wRkJSVGRETEVsQlFVa3NVVUZCVVN4SFFVRkhMR05CUVdNc1IwRkJSeXhWUVVGVkxFbEJRVWtzUlVGQlJUdEZRVU01UXl4UFFVRlBMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRPMGxCUTJoRExGVkJRVlVzU1VGQlNTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzVFVGQlRTeEhRVUZITEVkQlFVY3NSVUZCUlN4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF6dERRVU5vUml4RFFVRkRPenRCUVVWR0xGRkJRVkVzUTBGQlF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRPenM3TzBGRFZIWkNMRWxCUVVsclFpeExRVUZITEVkQlFVZG9RaXhKUVVGcFFpeERRVUZETzBGQlF6VkNMRWxCUVVrc1IwRkJSeXhIUVVGSFJpeEpRVUZwUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGRE96dEJRVVV6UXl4SlFVRkpMRWRCUVVjc1IwRkJSMnRDTEV0QlFVY3NRMEZCUXl4WlFVRlpMRVZCUVVVc1QwRkJUeXhUUVVGVExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4WFFVRlhMRU5CUVVNN096dEJRVWRzUlN4SlFVRkpMRTFCUVUwc1IwRkJSeXhWUVVGVkxFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVTdSVUZET1VJc1NVRkJTVHRKUVVOR0xFOUJRVThzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGRCUTJoQ0xFTkJRVU1zVDBGQlR5eERRVUZETEVWQlFVVXNaVUZCWlR0RFFVTTFRaXhEUVVGRE96dEJRVVZHTEZsQlFXTXNSMEZCUnl4VlFVRlZMRVZCUVVVc1JVRkJSVHRGUVVNM1FpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRE8wVkJRMW9zVDBGQlR5eEZRVUZGTEV0QlFVc3NVMEZCVXl4SFFVRkhMRmRCUVZjc1IwRkJSeXhGUVVGRkxFdEJRVXNzU1VGQlNTeEhRVUZITEUxQlFVMDdPMDFCUlhoRUxGRkJRVkVzUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1VVRkJVU3hIUVVGSExFTkJRVU03TzAxQlJYaEVMRWRCUVVjc1IwRkJSMEVzUzBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUXpzN1RVRkZXaXhEUVVGRExFTkJRVU1zUjBGQlIwRXNTMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExGRkJRVkVzU1VGQlNTeFBRVUZQTEVOQlFVTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1ZVRkJWU3hIUVVGSExGZEJRVmNzUjBGQlJ5eERRVUZETEVOQlFVTTdRMEZEYWtZc1EwRkJRenM3TzBGRGNFSkdMRWxCUVVrc1QwRkJUeXhIUVVGSFpDeFJRVUZ4UWl4RFFVRkRPMEZCUTNCRExFbEJRVWtzU1VGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXp0QlFVTmtMRWxCUVVrc1EwRkJRMFlzU1VGQmFVSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF6dEJRVU0zUXl4SlFVRkpMRWxCUVVrc1IwRkJSeXhGUVVGRkxFbEJRVWtzV1VGQldTeEZRVUZGTzBWQlF6ZENSaXhUUVVGelFpeERRVUZETEUxQlFVMHNRMEZCUXl4VFFVRlRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxGTkJRVk1zVVVGQlVTeEhRVUZITzBsQlEzWkZMRTlCUVU4c1ZVRkJWU3hIUVVGSExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNN1IwRkRla01zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXp0RFFVTldPenRCUTFSRUxFbEJRVWxaTEZkQlFWTXNSMEZCUjFZc1ZVRkJkMElzUTBGQlF6dEJRVU42UXl4SlFVRkpZU3hUUVVGUExFZEJRVWRtTEZGQlFYRkNMRU5CUVVNN096dEJRVWR3UXl4aFFVRmpMRWRCUVVjc1ZVRkJWU3hUUVVGVExFVkJRVVU3UlVGRGNFTXNUMEZCVHl4VlFVRlZMRWxCUVVrc1JVRkJSU3hIUVVGSExFVkJRVVU3U1VGRE1VSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRFpTeFRRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRenRKUVVNNVFpeEpRVUZKTEVOQlFVTXNSMEZCUjBnc1YwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBsQlEzWkNMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTTdTVUZEYWtJc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETzBsQlExUXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNSVUZCUVN4UFFVRlBMRk5CUVZNc1IwRkJSeXhGUVVGRkxFZEJRVWNzVTBGQlV5eERRVUZETEVWQlFVRTdTVUZEZGtRc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRjRUlzVDBGQlR5eERRVUZETEVkQlFVY3NUVUZCVFN4SlFVRkpMRU5CUVVNc1IwRkJSeXhOUVVGTkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFbEJRVWtzVFVGQlRTeEpRVUZKTEVOQlFVTXNSMEZCUnl4TlFVRk5PMUZCUXpsR0xGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU03VVVGRE0wSXNVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVsQlFVa3NSVUZCUlN4TFFVRkxMRU5CUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zUjBGQlJ5eFBRVUZQTEVOQlFVTTdSMEZEYWtZc1EwRkJRenREUVVOSUxFTkJRVU03TzBGRGFFSkdMRmxCUVdNc1IwRkJSeXhMUVVGTExFTkJRVU03TzBGRFFYWkNMR05CUVdNc1IwRkJSeXhGUVVGRkxFTkJRVU03TzBGRFFYQkNMRWxCUVVsT0xFbEJRVVVzUjBGQlIwUXNVMEZCZFVJc1EwRkJRenRCUVVOcVF5eEpRVUZKWXl4VlFVRlJMRWRCUVVkbUxGTkJRWFZDTEVOQlFVTTdRVUZEZGtNc1NVRkJTV2RDTEZOQlFVOHNSMEZCUjJ4Q0xGZEJRWGxDTEVOQlFVTTdPMEZCUlhoRExHTkJRV01zUjBGQlIwWXNXVUZCZVVJc1IwRkJSeXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRWRCUVVjc1UwRkJVeXhuUWtGQlowSXNRMEZCUXl4RFFVRkRMRVZCUVVVc1ZVRkJWU3hGUVVGRk8wVkJRemxIYlVJc1ZVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBWQlExb3NTVUZCU1N4SlFVRkpMRWRCUVVkRExGTkJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXp0RlFVTXZRaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRPMFZCUTNwQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0RlFVTldMRWxCUVVrc1EwRkJReXhEUVVGRE8wVkJRMDRzVDBGQlR5eE5RVUZOTEVkQlFVY3NRMEZCUXl4RlFVRkZMRVZCUVVGa0xFbEJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZCTzBWQlEzcEVMRTlCUVU4c1EwRkJReXhEUVVGRE8wTkJRMVlzUTBGQlF6czdRVU5hUml4SlFVRkpTQ3hWUVVGUkxFZEJRVWRJTEU5QlFXOUNMRU5CUVVNc1VVRkJVU3hEUVVGRE8wRkJRemRETEZOQlFXTXNSMEZCUjBjc1ZVRkJVU3hKUVVGSlFTeFZRVUZSTEVOQlFVTXNaVUZCWlN4RFFVRkRPenM3UVVOQmRFUXNTVUZCU1dkQ0xGVkJRVkVzUjBGQlIwZ3NVMEZCZFVJc1EwRkJRenRCUVVOMlF5eEpRVUZKTEVkQlFVY3NSMEZCUjFRc1ZVRkJkMElzUTBGQlF6dEJRVU51UXl4SlFVRkpZeXhoUVVGWExFZEJRVWRvUWl4WlFVRXlRaXhEUVVGRE8wRkJRemxETEVsQlFVbHBRaXhWUVVGUkxFZEJRVWRzUWl4VlFVRjNRaXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlEzQkVMRWxCUVVrc1MwRkJTeXhIUVVGSExGbEJRVmtzWlVGQlpTeERRVUZETzBGQlEzaERMRWxCUVVsdFFpeFhRVUZUTEVkQlFVY3NWMEZCVnl4RFFVRkRPenM3UVVGSE5VSXNTVUZCU1N4VlFVRlZMRWRCUVVjc1dVRkJXVHM3UlVGRk0wSXNTVUZCU1N4TlFVRk5MRWRCUVVkeVFpeFZRVUYzUWl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRE8wVkJRMmhFTEVsQlFVa3NRMEZCUXl4SFFVRkhiVUlzWVVGQlZ5eERRVUZETEUxQlFVMHNRMEZCUXp0RlFVTXpRaXhKUVVGSkxFVkJRVVVzUjBGQlJ5eEhRVUZITEVOQlFVTTdSVUZEWWl4SlFVRkpMRVZCUVVVc1IwRkJSeXhIUVVGSExFTkJRVU03UlVGRFlpeEpRVUZKTEdOQlFXTXNRMEZCUXp0RlFVTnVRaXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNN1JVRkRPVUp5UWl4TFFVRnJRaXhEUVVGRExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0RlFVTjJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEhRVUZITEdGQlFXRXNRMEZCUXpzN08wVkJSek5DTEdOQlFXTXNSMEZCUnl4TlFVRk5MRU5CUVVNc1lVRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF6dEZRVU12UXl4alFVRmpMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU03UlVGRGRFSXNZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRkxFZEJRVWNzVVVGQlVTeEhRVUZITEVWQlFVVXNSMEZCUnl4dFFrRkJiVUlzUjBGQlJ5eEZRVUZGTEVkQlFVY3NVMEZCVXl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRE8wVkJRM0pHTEdOQlFXTXNRMEZCUXl4TFFVRkxMRVZCUVVVc1EwRkJRenRGUVVOMlFpeFZRVUZWTEVkQlFVY3NZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVNNVFpeFBRVUZQTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVFc1QwRkJUeXhWUVVGVkxFTkJRVU4xUWl4WFFVRlRMRU5CUVVNc1EwRkJRMFlzWVVGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJRVHRGUVVONlJDeFBRVUZQTEZWQlFWVXNSVUZCUlN4RFFVRkRPME5CUTNKQ0xFTkJRVU03TzBGQlJVWXNhVUpCUVdNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeEpRVUZKTEZOQlFWTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1JVRkJSU3hWUVVGVkxFVkJRVVU3UlVGREwwUXNTVUZCU1N4TlFVRk5MRU5CUVVNN1JVRkRXQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVWQlFVVTdTVUZEWkN4TFFVRkxMRU5CUVVORkxGZEJRVk1zUTBGQlF5eEhRVUZIU2l4VlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGREwwSXNUVUZCVFN4SFFVRkhMRWxCUVVrc1MwRkJTeXhGUVVGRkxFTkJRVU03U1VGRGNrSXNTMEZCU3l4RFFVRkRTU3hYUVVGVExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdPMGxCUlhoQ0xFMUJRVTBzUTBGQlEwUXNWVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wZEJRM1JDTEUxQlFVMHNSVUZCUVN4TlFVRk5MRWRCUVVjc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUlVGQlFUdEZRVU0zUWl4UFFVRlBMRlZCUVZVc1MwRkJTeXhUUVVGVExFZEJRVWNzVFVGQlRTeEhRVUZITEVkQlFVY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVU03UTBGRGNFVXNRMEZCUXpzN1FVTjRRMFlzU1VGQlNTeEhRVUZITEVkQlFVZHNRaXhUUVVGMVFpeERRVUZETEVOQlFVTXNRMEZCUXp0QlFVTndReXhKUVVGSmIwSXNTMEZCUnl4SFFVRkhkRUlzU1VGQmFVSXNRMEZCUXp0QlFVTTFRaXhKUVVGSmRVSXNTMEZCUnl4SFFVRkhla0lzU1VGQmFVSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenM3UVVGRk0wTXNiVUpCUVdNc1IwRkJSeXhWUVVGVkxFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZPMFZCUTNoRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTjNRaXhMUVVGSExFTkJRVU1zUlVGQlJTeEhRVUZITEVsQlFVa3NSMEZCUnl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExGTkJRVk1zUlVGQlJVTXNTMEZCUnl4RFFVRkRMRVZCUVVVc1JVRkJRU3hIUVVGSExFTkJRVU1zUlVGQlJTeEZRVUZGUVN4TFFVRkhMRVZCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVUU3UTBGRGRFY3NRMEZCUXpzN1FVTk1SaXhKUVVGSlF5eFJRVUZOTEVkQlFVZHVRaXhoUVVFeVFpeERRVUZETzBGQlEzcERMRWxCUVVrc1ZVRkJWU3hIUVVGSFJpeGhRVUV5UWl4RFFVRkRPMEZCUXpkRExFbEJRVWx6UWl4blFrRkJZeXhIUVVGSGRrSXNaVUZCSzBJc1EwRkJRenRCUVVOeVJDeEpRVUZKTEdsQ1FVRnBRaXhIUVVGSExFVkJRVVVzUTBGQlF6czdPMEZCUnpOQ1JpeExRVUZyUWl4RFFVRkRMR2xDUVVGcFFpeEZRVUZGUml4SlFVRnBRaXhEUVVGRExGVkJRVlVzUTBGQlF5eEZRVUZGTEZsQlFWa3NSVUZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6czdRVUZGYmtjc1pVRkJZeXhIUVVGSExGVkJRVlVzVjBGQlZ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRVZCUVVVN1JVRkRiRVFzVjBGQlZ5eERRVUZETEZOQlFWTXNSMEZCUnpCQ0xGRkJRVTBzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hGUVVGRkxFbEJRVWtzUlVGQlJTeFZRVUZWTEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF6dEZRVU5xUmtNc1owSkJRV01zUTBGQlF5eFhRVUZYTEVWQlFVVXNTVUZCU1N4SFFVRkhMRmRCUVZjc1EwRkJReXhEUVVGRE8wTkJRMnBFTEVOQlFVTTdPenRCUTFoR0xFbEJRVWxJTEV0QlFVY3NSMEZCUjNCQ0xFbEJRV2xDTEVOQlFVTTdRVUZETlVJc1NVRkJTWGRDTEZWQlFWRXNSMEZCUnpGQ0xGTkJRWFZDTEVOQlFVTTdRVUZEZGtNc1NVRkJTVzlDTEZWQlFWRXNSMEZCUjNSQ0xGVkJRWGRDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkRjRVFzU1VGQlNTeFhRVUZYTEVkQlFVY3NUVUZCVFN4RFFVRkRMRk5CUVZNc1EwRkJRenM3UVVGRmJrTXNZMEZCWXl4SFFVRkhMRTFCUVUwc1EwRkJReXhqUVVGakxFbEJRVWtzVlVGQlZTeERRVUZETEVWQlFVVTdSVUZEY2tRc1EwRkJReXhIUVVGSE5FSXNWVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wVkJRMmhDTEVsQlFVbEtMRXRCUVVjc1EwRkJReXhEUVVGRExFVkJRVVZHTEZWQlFWRXNRMEZCUXl4RlFVRkZMRVZCUVVFc1QwRkJUeXhEUVVGRExFTkJRVU5CTEZWQlFWRXNRMEZCUXl4RFFVRkRMRVZCUVVFN1JVRkRla01zU1VGQlNTeFBRVUZQTEVOQlFVTXNRMEZCUXl4WFFVRlhMRWxCUVVrc1ZVRkJWU3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZPMGxCUTNCRkxFOUJRVThzUTBGQlF5eERRVUZETEZkQlFWY3NRMEZCUXl4VFFVRlRMRU5CUVVNN1IwRkRhRU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNXVUZCV1N4TlFVRk5MRWRCUVVjc1YwRkJWeXhIUVVGSExFbEJRVWtzUTBGQlF6dERRVU51UkN4RFFVRkRPenRCUTFoR0xFbEJRVWtzVDBGQlR5eEhRVUZIVHl4UlFVRnhRaXhEUVVGRE8wRkJRM0JETEVsQlFVbHdRaXhUUVVGUExFZEJRVWR4UWl4UFFVRnZRaXhEUVVGRE8wRkJRMjVETEVsQlFVbERMRlZCUVZFc1IwRkJSME1zVTBGQmMwSXNRMEZCUXp0QlFVTjBReXhKUVVGSlF5eE5RVUZKTEVkQlFVZERMRXRCUVd0Q0xFTkJRVU03UVVGRE9VSXNTVUZCU1ZZc1MwRkJSeXhIUVVGSFVpeEpRVUZwUWl4RFFVRkRPMEZCUXpWQ0xFbEJRVWtzVTBGQlV5eEhRVUZIVkN4VlFVRjFRaXhEUVVGRE8wRkJRM2hETEVsQlFVa3NWMEZCVnl4SFFVRkhSaXhYUVVGNVFpeERRVUZETzBGQlF6VkRMRWxCUVVrc1kwRkJZeXhIUVVGSFJDeGxRVUVyUWl4RFFVRkRPMEZCUTNKRUxFbEJRVWtzWTBGQll5eEhRVUZIUml4VlFVRjNRaXhEUVVGRE8wRkJRemxETEVsQlFVa3NVVUZCVVN4SFFVRkhSaXhKUVVGcFFpeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkRPMEZCUXpkRExFbEJRVWtzUzBGQlN5eEhRVUZITEVWQlFVVXNSVUZCUlN4RFFVRkRMRWxCUVVrc1NVRkJTU3hOUVVGTkxFbEJRVWtzUlVGQlJTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRPVU1zU1VGQlNTeFhRVUZYTEVkQlFVY3NXVUZCV1N4RFFVRkRPMEZCUXk5Q0xFbEJRVWtzU1VGQlNTeEhRVUZITEUxQlFVMHNRMEZCUXp0QlFVTnNRaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eFJRVUZSTEVOQlFVTTdPMEZCUlhSQ0xFbEJRVWtzVlVGQlZTeEhRVUZITEZsQlFWa3NSVUZCUlN4UFFVRlBMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU03TzBGQlJUbERMR1ZCUVdNc1IwRkJSeXhWUVVGVkxFbEJRVWtzUlVGQlJTeEpRVUZKTEVWQlFVVXNWMEZCVnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hQUVVGUExFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlR0RlFVTnFSaXhYUVVGWExFTkJRVU1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRGUVVOeVF5eEpRVUZKTEZOQlFWTXNSMEZCUnl4VlFVRlZMRWxCUVVrc1JVRkJSVHRKUVVNNVFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4SlFVRkpMRWxCUVVrc1NVRkJTU3hMUVVGTExFVkJRVVVzUlVGQlFTeFBRVUZQTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGQk8wbEJRMmhFTEZGQlFWRXNTVUZCU1R0TlFVTldMRXRCUVVzc1NVRkJTU3hGUVVGRkxFOUJRVThzVTBGQlV5eEpRVUZKTEVkQlFVY3NSVUZCUlN4UFFVRlBMRWxCUVVrc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNN1RVRkRNVVVzUzBGQlN5eE5RVUZOTEVWQlFVVXNUMEZCVHl4VFFVRlRMRTFCUVUwc1IwRkJSeXhGUVVGRkxFOUJRVThzU1VGQlNTeFhRVUZYTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF6dExRVU12UlN4RFFVRkRMRTlCUVU4c1UwRkJVeXhQUVVGUExFZEJRVWNzUlVGQlJTeFBRVUZQTEVsQlFVa3NWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTTdSMEZEY2tVc1EwRkJRenRGUVVOR0xFbEJRVWtzUjBGQlJ5eEhRVUZITEVsQlFVa3NSMEZCUnl4WFFVRlhMRU5CUVVNN1JVRkROMElzU1VGQlNTeFZRVUZWTEVkQlFVY3NUMEZCVHl4SlFVRkpMRTFCUVUwc1EwRkJRenRGUVVOdVF5eEpRVUZKTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNN1JVRkRka0lzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRk5CUVZNc1EwRkJRenRGUVVNelFpeEpRVUZKTEU5QlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFbEJRVWtzUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRTlCUVU4c1NVRkJTU3hMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTTdSVUZEYWtZc1NVRkJTU3hSUVVGUkxFZEJRVWNzVDBGQlR5eEpRVUZKTEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRGUVVNM1F5eEpRVUZKTEZGQlFWRXNSMEZCUnl4UFFVRlBMRWRCUVVjc1EwRkJReXhWUVVGVkxFZEJRVWNzVVVGQlVTeEhRVUZITEZOQlFWTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU03UlVGRGJrWXNTVUZCU1N4VlFVRlZMRWRCUVVjc1NVRkJTU3hKUVVGSkxFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNUMEZCVHl4SlFVRkpMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU03UlVGRGRFVXNTVUZCU1N4UFFVRlBMRVZCUVVVc1IwRkJSeXhGUVVGRkxHbENRVUZwUWl4RFFVRkRPenRGUVVWd1F5eEpRVUZKTEZWQlFWVXNSVUZCUlR0SlFVTmtMR2xDUVVGcFFpeEhRVUZITEdOQlFXTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJoRkxFbEJRVWtzYVVKQlFXbENMRXRCUVVzc1RVRkJUU3hEUVVGRExGTkJRVk1zU1VGQlNTeHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFVkJRVVU3TzAxQlJYQkZMR05CUVdNc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU03TzAxQlJUZERMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzUTBGQlEzZENMRXRCUVVjc1EwRkJReXhwUWtGQmFVSXNSVUZCUlN4UlFVRlJMRU5CUVVNc1JVRkJSU3hGUVVGQlV5eE5RVUZKTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzVVVGQlVTeEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkRMRVZCUVVFN1MwRkRiRWM3UjBGRFJqczdSVUZGUkN4SlFVRkpMRlZCUVZVc1NVRkJTU3hQUVVGUExFbEJRVWtzVDBGQlR5eERRVUZETEVsQlFVa3NTMEZCU3l4TlFVRk5MRVZCUVVVN1NVRkRjRVFzVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXp0SlFVTnNRaXhSUVVGUkxFZEJRVWNzVTBGQlV5eE5RVUZOTEVkQlFVY3NSVUZCUlN4UFFVRlBMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRPMGRCUXpkRU96dEZRVVZFTEVsQlFVa3NRMEZCUXl4RFFVRkRMRTlCUVU4c1NVRkJTU3hOUVVGTkxFMUJRVTBzUzBGQlN5eEpRVUZKTEZWQlFWVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eEZRVUZGTzBsQlEzSkZRU3hOUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJRenRIUVVOcVF6czdSVUZGUkN4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzVVVGQlVTeERRVUZETzBWQlF6TkNMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eFZRVUZWTEVOQlFVTTdSVUZETlVJc1NVRkJTU3hQUVVGUExFVkJRVVU3U1VGRFdDeFBRVUZQTEVkQlFVYzdUVUZEVWl4TlFVRk5MRVZCUVVVc1ZVRkJWU3hIUVVGSExGRkJRVkVzUjBGQlJ5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkRPMDFCUTJwRUxFbEJRVWtzUlVGQlJTeE5RVUZOTEVkQlFVY3NVVUZCVVN4SFFVRkhMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU03VFVGRGVrTXNUMEZCVHl4RlFVRkZMRkZCUVZFN1MwRkRiRUlzUTBGQlF6dEpRVU5HTEVsQlFVa3NUVUZCVFN4RlFVRkZMRVZCUVVFc1MwRkJTeXhIUVVGSExFbEJRVWtzVDBGQlR5eEZRVUZGTzAxQlF5OUNMRWxCUVVrc1JVRkJSU3hIUVVGSExFbEJRVWtzUzBGQlN5eERRVUZETEVWQlFVVXNSVUZCUVVZc1ZVRkJVU3hEUVVGRExFdEJRVXNzUlVGQlJTeEhRVUZITEVWQlFVVXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlFUdExRVU42UkN4RlFVRkJMRTFCUVUwc1JVRkJRWFJDTEZOQlFVOHNRMEZCUTBFc1UwRkJUeXhEUVVGRExFTkJRVU1zUjBGQlIwRXNVMEZCVHl4RFFVRkRMRU5CUVVNc1NVRkJTU3hMUVVGTExFbEJRVWtzVlVGQlZTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1EwRkJReXhEUVVGRExFVkJRVUU3UjBGRE9VVTdSVUZEUkN4UFFVRlBMRTlCUVU4c1EwRkJRenREUVVOb1FpeERRVUZET3p0QlEzQkZSaXhKUVVGSkxFZEJRVWNzUjBGQlIxQXNVMEZCZFVJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6czdPMEZCUjNoRFJpeFhRVUY1UWl4RFFVRkRMRTFCUVUwc1JVRkJSU3hSUVVGUkxFVkJRVVVzVlVGQlZTeFJRVUZSTEVWQlFVVTdSVUZET1VRc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1JVRkRNMElzU1VGQlNTeERRVUZETEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNN08wTkJSV0lzUlVGQlJTeFpRVUZaTzBWQlEySXNTVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF6dEZRVU5vUWl4SlFVRkpMRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETzBWQlEzQkNMRWxCUVVrc1MwRkJTeXhEUVVGRE8wVkJRMVlzU1VGQlNTeExRVUZMTEVsQlFVa3NRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hGUVVGQkxFOUJRVThzUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eEZRVUZCTzBWQlF5OUVMRXRCUVVzc1IwRkJSeXhIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRPMFZCUTNSQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenRGUVVONFFpeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hKUVVGSkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTTdRMEZEZEVNc1EwRkJReXhEUVVGRE96czdRVU5tU0N4SlFVRkpMRmRCUVZjc1IwRkJSMFVzU1VGQmFVSXNRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRenRCUVVOdVJDeEpRVUZKTEZWQlFWVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRE8wRkJRMnBETEVsQlFVa3NWVUZCVlN4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxGTkJRVk1zUlVGQlJTeEZRVUZCUml4TFFVRnJRaXhEUVVGRExGVkJRVlVzUlVGQlJTeFhRVUZYTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNc1JVRkJRVHRCUVVNeFJpeHhRa0ZCWXl4SFFVRkhMRlZCUVZVc1IwRkJSeXhGUVVGRk8wVkJRemxDTEZWQlFWVXNRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTTdRMEZEY2tNc1EwRkJRenM3UVVOT1JpeGhRVUZqTEVkQlFVY3NWVUZCVlN4SlFVRkpMRVZCUVVVc1MwRkJTeXhGUVVGRk8wVkJRM1JETEU5QlFVOHNSVUZCUlN4TFFVRkxMRVZCUVVVc1MwRkJTeXhGUVVGRkxFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNN1EwRkRka01zUTBGQlF6czdRVU5FUml4SlFVRkpMR2RDUVVGblFpeEhRVUZIVHl4cFFrRkJaME1zUTBGQlF6dEJRVU40UkN4SlFVRkpMRWxCUVVrc1IwRkJSMFlzVTBGQmRVSXNRMEZCUXp0QlFVTnVReXhKUVVGSk9FSXNWMEZCVXl4SFFVRkhMMElzVlVGQmRVSXNRMEZCUXp0QlFVTjRReXhKUVVGSlZTeFhRVUZUTEVkQlFVZGFMRlZCUVhkQ0xFTkJRVU03T3pzN096dEJRVTE2UXl4elFrRkJZeXhIUVVGSFJpeFhRVUY1UWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVVzVlVGQlZTeFJRVUZSTEVWQlFVVXNTVUZCU1N4RlFVRkZPMFZCUTI1R0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVZGpMRmRCUVZNc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6dEZRVU01UWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlF6dEZRVU5hTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1NVRkJTU3hEUVVGRE96dERRVVZvUWl4RlFVRkZMRmxCUVZrN1JVRkRZaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRPMFZCUTJoQ0xFbEJRVWtzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1JVRkRia0lzU1VGQlNTeExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8wVkJRM1JDTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1MwRkJTeXhKUVVGSkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVWQlFVVTdTVUZETTBJc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eFRRVUZUTEVOQlFVTTdTVUZEY0VJc1QwRkJUeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdSMEZEYUVJN1JVRkRSQ3hKUVVGSkxFbEJRVWtzU1VGQlNTeE5RVUZOTEVWQlFVVXNSVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUVR0RlFVTXhReXhKUVVGSkxFbEJRVWtzU1VGQlNTeFJRVUZSTEVWQlFVVXNSVUZCUVN4UFFVRlBMRWxCUVVrc1EwRkJReXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJRVHRGUVVNdlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenREUVVOdVF5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPenM3UVVGSFluRkNMRmRCUVZNc1EwRkJReXhUUVVGVExFZEJRVWRCTEZkQlFWTXNRMEZCUXl4TFFVRkxMRU5CUVVNN08wRkJSWFJETEdkQ1FVRm5RaXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETzBGQlEzcENMR2RDUVVGblFpeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRPMEZCUXpOQ0xHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRE96dEJRMnBETlVJc1NVRkJTU3hWUVVGVkxFZEJRVWRFTEd0Q1FVRXJRaXhEUVVGRE8wRkJRMnBFTEVsQlFVbGtMRk5CUVU4c1IwRkJSMG9zVjBGQmVVSXNRMEZCUXp0QlFVTjRReXhKUVVGSlpTeFZRVUZSTEVkQlFVZDRRaXhUUVVGelFpeERRVUZETzBGQlEzUkRMRWxCUVVsRExGRkJRVTBzUjBGQlIwZ3NUMEZCYjBJc1EwRkJRenRCUVVOc1F5eEpRVUZKTkVJc1RVRkJTU3hIUVVGSE4wSXNTMEZCYTBJc1EwRkJRenRCUVVNNVFpeEpRVUZKSzBJc1YwRkJVeXhIUVVGSGFrTXNWVUZCZFVJc1EwRkJRenRCUVVONFF5eEpRVUZKTEVkQlFVY3NSMEZCUjBZc1NVRkJhVUlzUTBGQlF6dEJRVU0xUWl4SlFVRkpiME1zVlVGQlVTeEhRVUZITEVkQlFVY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVNdlFpeEpRVUZKTEdGQlFXRXNSMEZCUnl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVU03UVVGRGRrTXNTVUZCU1N4WFFVRlhMRWRCUVVkRUxGZEJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTTdPMEZCUld4RExFbEJRVWtzV1VGQldTeEhRVUZITzBWQlEycENMRmRCUVZjc1JVRkJSU3hKUVVGSk8wVkJRMnBDTEcxQ1FVRnRRaXhGUVVGRkxFdEJRVXM3UlVGRE1VSXNXVUZCV1N4RlFVRkZMRXRCUVVzN1JVRkRia0lzWTBGQll5eEZRVUZGTEV0QlFVczdSVUZEY2tJc1YwRkJWeXhGUVVGRkxFdEJRVXM3UlVGRGJFSXNZVUZCWVN4RlFVRkZMRXRCUVVzN1JVRkRjRUlzV1VGQldTeEZRVUZGTEVsQlFVazdSVUZEYkVJc2IwSkJRVzlDTEVWQlFVVXNTMEZCU3p0RlFVTXpRaXhSUVVGUkxFVkJRVVVzUzBGQlN6dEZRVU5tTEdsQ1FVRnBRaXhGUVVGRkxFdEJRVXM3UlVGRGVFSXNZMEZCWXl4RlFVRkZMRXRCUVVzN1JVRkRja0lzWlVGQlpTeEZRVUZGTEV0QlFVczdSVUZEZEVJc2FVSkJRV2xDTEVWQlFVVXNTMEZCU3p0RlFVTjRRaXhUUVVGVExFVkJRVVVzU1VGQlNUdEZRVU5tTEdGQlFXRXNSVUZCUlN4TFFVRkxPMFZCUTNCQ0xGbEJRVmtzUlVGQlJTeExRVUZMTzBWQlEyNUNMRkZCUVZFc1JVRkJSU3hKUVVGSk8wVkJRMlFzWjBKQlFXZENMRVZCUVVVc1MwRkJTenRGUVVOMlFpeE5RVUZOTEVWQlFVVXNTMEZCU3p0RlFVTmlMRmRCUVZjc1JVRkJSU3hMUVVGTE8wVkJRMnhDTEdGQlFXRXNSVUZCUlN4TFFVRkxPMFZCUTNCQ0xHRkJRV0VzUlVGQlJTeExRVUZMTzBWQlEzQkNMR05CUVdNc1JVRkJSU3hMUVVGTE8wVkJRM0pDTEZsQlFWa3NSVUZCUlN4TFFVRkxPMFZCUTI1Q0xHRkJRV0VzUlVGQlJTeExRVUZMTzBWQlEzQkNMR2RDUVVGblFpeEZRVUZGTEV0QlFVczdSVUZEZGtJc1owSkJRV2RDTEVWQlFVVXNTMEZCU3p0RlFVTjJRaXhqUVVGakxFVkJRVVVzU1VGQlNUdEZRVU53UWl4blFrRkJaMElzUlVGQlJTeExRVUZMTzBWQlEzWkNMR0ZCUVdFc1JVRkJSU3hMUVVGTE8wVkJRM0JDTEZOQlFWTXNSVUZCUlN4TFFVRkxPME5CUTJwQ0xFTkJRVU03TzBGQlJVWXNTMEZCU3l4SlFVRkpMRmRCUVZjc1IwRkJSMllzVTBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEZkQlFWY3NRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3UlVGRGFFWXNTVUZCU1N4SlFVRkpMRWRCUVVjc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBWQlF6RkNMRWxCUVVrc1VVRkJVU3hIUVVGSExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0RlFVTnNReXhKUVVGSkxGVkJRVlVzUjBGQlIxb3NVVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRE8wVkJRemxDTEVsQlFVa3NTMEZCU3l4SFFVRkhMRlZCUVZVc1NVRkJTU3hWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETzBWQlF5OURMRWxCUVVrc1IwRkJSeXhEUVVGRE8wVkJRMUlzU1VGQlNTeExRVUZMTEVWQlFVVTdTVUZEVkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRE5FSXNWVUZCVVN4RFFVRkRMRVZCUVVVc1JVRkJRVWdzVFVGQlNTeERRVUZETEV0QlFVc3NSVUZCUlVjc1ZVRkJVU3hGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETEVWQlFVRTdTVUZEZWtRc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNSVUZCUlN4RlFVRkJTQ3hOUVVGSkxFTkJRVU1zUzBGQlN5eEZRVUZGTEdGQlFXRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGQk8wbEJRelZFUlN4WFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzVjBGQlZ5eERRVUZETzBsQlF6bENMRWxCUVVrc1VVRkJVU3hGUVVGRkxFVkJRVUVzUzBGQlN5eEhRVUZITEVsQlFVa3NWVUZCVlN4RlFVRkZMRVZCUVVFc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RlFVRkJTaXhWUVVGUkxFTkJRVU1zUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNUVUZCUVR0SFFVTndSenREUVVOR096dEJRM3BFUkN4bFFVRmpMRWRCUVVjc1ZVRkJWU3hGUVVGRkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEVsQlFVa3NSVUZCUlN4alFVRmpMRVZCUVVVN1JVRkRhRVVzU1VGQlNTeEZRVUZGTEVWQlFVVXNXVUZCV1N4WFFVRlhMRU5CUVVNc1MwRkJTeXhqUVVGakxFdEJRVXNzVTBGQlV5eEpRVUZKTEdOQlFXTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJSVHRKUVVNeFJpeE5RVUZOTEZOQlFWTXNRMEZCUXl4SlFVRkpMRWRCUVVjc2VVSkJRWGxDTEVOQlFVTXNRMEZCUXp0SFFVTnVSQ3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETzBOQlEySXNRMEZCUXpzN08wRkRTRVlzU1VGQlNWb3NWVUZCVVN4SFFVRkhia0lzVTBGQmRVSXNRMEZCUXp0QlFVTjJReXhoUVVGakxFZEJRVWNzVlVGQlZTeFJRVUZSTEVWQlFVVXNSVUZCUlN4RlFVRkZMRXRCUVVzc1JVRkJSU3hQUVVGUExFVkJRVVU3UlVGRGRrUXNTVUZCU1R0SlFVTkdMRTlCUVU4c1QwRkJUeXhIUVVGSExFVkJRVVVzUTBGQlEyMUNMRlZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN08wZEJSUzlFTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVN1NVRkRWaXhKUVVGSkxFZEJRVWNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1NVRkROMElzU1VGQlNTeEhRVUZITEV0QlFVc3NVMEZCVXl4RlFVRkZMRVZCUVVGQkxGVkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlFUdEpRVU53UkN4TlFVRk5MRU5CUVVNc1EwRkJRenRIUVVOVU8wTkJRMFlzUTBGQlF6czdPMEZEVmtZc1NVRkJTV2RDTEZkQlFWTXNSMEZCUjJwRExGVkJRWFZDTEVOQlFVTTdRVUZEZUVNc1NVRkJTV3RETEZWQlFWRXNSMEZCUjNCRExFbEJRV2xDTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNN1FVRkROME1zU1VGQlNYRkRMRmxCUVZVc1IwRkJSeXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZET3p0QlFVVnFReXhuUWtGQll5eEhRVUZITEZWQlFWVXNSVUZCUlN4RlFVRkZPMFZCUXpkQ0xFOUJRVThzUlVGQlJTeExRVUZMTEZOQlFWTXNTMEZCUzBZc1YwRkJVeXhEUVVGRExFdEJRVXNzUzBGQlN5eEZRVUZGTEVsQlFVbEZMRmxCUVZVc1EwRkJRMFFzVlVGQlVTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRU5CUVVNN1EwRkRjRVlzUTBGQlF6czdRVU5RUml4SlFVRkpSU3hUUVVGUExFZEJRVWRxUXl4UlFVRnhRaXhEUVVGRE8wRkJRM0JETEVsQlFVa3JRaXhWUVVGUkxFZEJRVWRvUXl4SlFVRnBRaXhEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETzBGQlF6ZERMRWxCUVVrclFpeFhRVUZUTEVkQlFVZHFReXhWUVVGMVFpeERRVUZETzBGQlEzaERMREJDUVVGakxFZEJRVWRHTEV0QlFXdENMRU5CUVVNc2FVSkJRV2xDTEVkQlFVY3NWVUZCVlN4RlFVRkZMRVZCUVVVN1JVRkRjRVVzU1VGQlNTeEZRVUZGTEVsQlFVa3NVMEZCVXl4RlFVRkZMRVZCUVVFc1QwRkJUeXhGUVVGRkxFTkJRVU52UXl4VlFVRlJMRU5CUVVNN1QwRkRia01zUlVGQlJTeERRVUZETEZsQlFWa3NRMEZCUXp0UFFVTm9Ra1FzVjBGQlV5eERRVUZEUnl4VFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZCTzBOQlF6ZENMRU5CUVVNN096dEJRMUJHTEVsQlFVa3NSMEZCUnl4SFFVRkhkRUlzU1VGQmFVSXNRMEZCUXp0QlFVTTFRaXhKUVVGSkxFbEJRVWtzUjBGQlIxUXNVMEZCZFVJc1EwRkJRenRCUVVOdVF5eEpRVUZKTEZkQlFWY3NSMEZCUjBZc1dVRkJNa0lzUTBGQlF6dEJRVU01UXl4SlFVRkpMRkZCUVZFc1IwRkJSMFFzVTBGQmRVSXNRMEZCUXp0QlFVTjJReXhKUVVGSkxGRkJRVkVzUjBGQlIwWXNVMEZCZFVJc1EwRkJRenRCUVVOMlF5eEpRVUZKTEZOQlFWTXNSMEZCUjBZc2MwSkJRWEZETEVOQlFVTTdRVUZEZEVRc1NVRkJTU3hMUVVGTExFZEJRVWNzUlVGQlJTeERRVUZETzBGQlEyWXNTVUZCU1N4TlFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGRE8wRkJRMmhDTEVsQlFVa3NUMEZCVHl4SFFVRkhMR05CUVdNc1IwRkJSeXhWUVVGVkxGRkJRVkVzUlVGQlJTeFBRVUZQTEVWQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hSUVVGUkxFVkJRVVU3UlVGRE9VVXNTVUZCU1N4TlFVRk5MRWRCUVVjc1VVRkJVU3hIUVVGSExGbEJRVmtzUlVGQlJTeFBRVUZQTEZGQlFWRXNRMEZCUXl4RlFVRkZMRWRCUVVjc1UwRkJVeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBWQlF5OUZMRWxCUVVrc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTlCUVU4c1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTTdSVUZEZGtNc1NVRkJTU3hMUVVGTExFZEJRVWNzUTBGQlF5eERRVUZETzBWQlEyUXNTVUZCU1N4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRkxGRkJRVkVzUlVGQlJTeE5RVUZOTEVOQlFVTTdSVUZEYmtNc1NVRkJTU3hQUVVGUExFMUJRVTBzU1VGQlNTeFZRVUZWTEVWQlFVVXNSVUZCUVN4TlFVRk5MRk5CUVZNc1EwRkJReXhSUVVGUkxFZEJRVWNzYlVKQlFXMUNMRU5CUVVNc1EwRkJReXhGUVVGQk96dEZRVVZxUml4SlFVRkpMRmRCUVZjc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEZRVUZCTEV0QlFVc3NUVUZCVFN4SFFVRkhMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNUVUZCVFN4SFFVRkhMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlJUdEpRVU42Uml4TlFVRk5MRWRCUVVjc1QwRkJUeXhIUVVGSExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU40Uml4SlFVRkpMRTFCUVUwc1MwRkJTeXhMUVVGTExFbEJRVWtzVFVGQlRTeExRVUZMTEUxQlFVMHNSVUZCUlN4RlFVRkJMRTlCUVU4c1RVRkJUU3hEUVVGRExFVkJRVUU3UjBGRE1VUXNSVUZCUVN4TlFVRk5MRVZCUVVFc1MwRkJTeXhSUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hKUVVGSkxFZEJRVWM3U1VGRE4wVXNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU03U1VGRGFFUXNTVUZCU1N4TlFVRk5MRXRCUVVzc1MwRkJTeXhKUVVGSkxFMUJRVTBzUzBGQlN5eE5RVUZOTEVWQlFVVXNSVUZCUVN4UFFVRlBMRTFCUVUwc1EwRkJReXhGUVVGQk8wZEJRekZFTEVWQlFVRTdRMEZEUml4RFFVRkRPMEZCUTBZc1QwRkJUeXhEUVVGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTTdRVUZEZEVJc1QwRkJUeXhEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTTdPenM3UVVOMlFuaENMRWxCUVVsdFFpeFZRVUZSTEVkQlFVZG1MRk5CUVhWQ0xFTkJRVU03UVVGRGRrTXNTVUZCU1cxRExGZEJRVk1zUjBGQlIzSkRMRlZCUVhkQ0xFTkJRVU03UVVGRGVrTXNTVUZCU1N4UFFVRlBMRWRCUVVkR0xFbEJRV2xDTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1FVRkRNME1zZFVKQlFXTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVU3UlVGREwwSXNTVUZCU1N4RFFVRkRMRWRCUVVkdFFpeFZRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1YwRkJWeXhEUVVGRE8wVkJRMmhETEVsQlFVa3NRMEZCUXl4RFFVRkRPMFZCUTA0c1QwRkJUeXhEUVVGRExFdEJRVXNzVTBGQlV5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhRU3hWUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1UwRkJVeXhIUVVGSExFTkJRVU1zUjBGQlIyOUNMRmRCUVZNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dERRVU4wUml4RFFVRkRPenRCUTFKR08wRkJRMEVzVjBGQll5eEhRVUZITEZWQlFWVXNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVU3UlVGRGVrTXNTVUZCU1N4RlFVRkZMRWRCUVVjc1NVRkJTU3hMUVVGTExGTkJRVk1zUTBGQlF6dEZRVU0xUWl4UlFVRlJMRWxCUVVrc1EwRkJReXhOUVVGTk8wbEJRMnBDTEV0QlFVc3NRMEZCUXl4RlFVRkZMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzUlVGQlJUdDNRa0ZEU2l4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlEyeERMRXRCUVVzc1EwRkJReXhGUVVGRkxFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlExZ3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRNME1zUzBGQlN5eERRVUZETEVWQlFVVXNUMEZCVHl4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03ZDBKQlEzQkNMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTndSQ3hMUVVGTExFTkJRVU1zUlVGQlJTeFBRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdkMEpCUXpkQ0xFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZETjBRc1MwRkJTeXhEUVVGRExFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenQzUWtGRGRFTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdSMEZEZGtVc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wTkJReTlDTEVOQlFVTTdPMEZEWmtZc1NVRkJTVU1zUzBGQlJ5eEhRVUZIZUVJc1NVRkJhVUlzUTBGQlF6dEJRVU0xUWl4SlFVRkpMRTFCUVUwc1IwRkJSMVFzVDBGQmIwSXNRMEZCUXp0QlFVTnNReXhKUVVGSkxFbEJRVWtzUjBGQlIwWXNTMEZCYTBJc1EwRkJRenRCUVVNNVFpeEpRVUZKTEVkQlFVY3NSMEZCUjBRc1ZVRkJkMElzUTBGQlF6dEJRVU51UXl4SlFVRkpTU3hSUVVGTkxFZEJRVWRPTEU5QlFXOUNMRU5CUVVNN1FVRkRiRU1zU1VGQlNYVkRMRk5CUVU4c1IwRkJSMnBETEZGQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNN1FVRkROMElzU1VGQlNTeFBRVUZQTEVkQlFVZEJMRkZCUVUwc1EwRkJReXhaUVVGWkxFTkJRVU03UVVGRGJFTXNTVUZCU1N4VFFVRlRMRWRCUVVkQkxGRkJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTTdRVUZEZEVNc1NVRkJTU3hqUVVGakxFZEJRVWRCTEZGQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNN1FVRkRNME1zU1VGQlNTeFJRVUZSTEVkQlFVZEJMRkZCUVUwc1EwRkJReXhSUVVGUkxFTkJRVU03UVVGREwwSXNTVUZCU1N4UFFVRlBMRWRCUVVjc1EwRkJReXhEUVVGRE8wRkJRMmhDTEVsQlFVa3NTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRenRCUVVObUxFbEJRVWtzYTBKQlFXdENMRWRCUVVjc2IwSkJRVzlDTEVOQlFVTTdRVUZET1VNc1NVRkJTU3hMUVVGTE8wbEJRVVVzVDBGQlR6dEpRVUZGTEVsQlFVa3NRMEZCUXp0QlFVTjZRaXhKUVVGSkxFZEJRVWNzUjBGQlJ5eFpRVUZaTzBWQlEzQkNMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZET3p0RlFVVm1MRWxCUVVrc1MwRkJTeXhEUVVGRExHTkJRV01zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlR0SlFVTTFRaXhKUVVGSkxFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRia0lzVDBGQlR5eExRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNN1NVRkRha0lzUlVGQlJTeEZRVUZGTEVOQlFVTTdSMEZEVGp0RFFVTkdMRU5CUVVNN1FVRkRSaXhKUVVGSkxGRkJRVkVzUjBGQlJ5eFZRVUZWTEV0QlFVc3NSVUZCUlR0RlFVTTVRaXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRenREUVVOMFFpeERRVUZET3p0QlFVVkdMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVTdSVUZETVVJc1QwRkJUeXhIUVVGSExGTkJRVk1zV1VGQldTeERRVUZETEVWQlFVVXNSVUZCUlRzN08wbEJRMnhETEVsQlFVa3NTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRenRKUVVOa0xFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SlFVTldMRTlCUVU4c1UwRkJVeXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVXNSVUZCUVN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRFV5eFhRVUZUTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVUU3U1VGRGRrUXNTMEZCU3l4RFFVRkRMRVZCUVVVc1QwRkJUeXhEUVVGRExFZEJRVWNzV1VGQldUczdUVUZGTjBJc1RVRkJUU3hEUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEZWQlFWVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1VVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkRPMHRCUXpORUxFTkJRVU03U1VGRFJpeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1NVRkRaaXhQUVVGUExFOUJRVThzUTBGQlF6dEhRVU5vUWl4RFFVRkRPMFZCUTBZc1UwRkJVeXhIUVVGSExGTkJRVk1zWTBGQll5eERRVUZETEVWQlFVVXNSVUZCUlR0SlFVTjBReXhQUVVGUExFdEJRVXNzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXp0SFFVTnNRaXhEUVVGRE96dEZRVVZHTEVsQlFVbHFRaXhKUVVGcFFpeERRVUZEZVVNc1UwRkJUeXhEUVVGRExFbEJRVWtzVTBGQlV5eEZRVUZGTzBsQlF6TkRMRXRCUVVzc1IwRkJSeXhWUVVGVkxFVkJRVVVzUlVGQlJUdE5RVU53UWtFc1UwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlEwUXNTMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTnVReXhEUVVGRE96dEhRVVZJTEUxQlFVMHNTVUZCU1N4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRExFZEJRVWNzUlVGQlJUdEpRVU51UXl4TFFVRkxMRWRCUVVjc1ZVRkJWU3hGUVVGRkxFVkJRVVU3VFVGRGNFSXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJRMEVzUzBGQlJ5eERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dExRVU12UWl4RFFVRkRPenRIUVVWSUxFMUJRVTBzU1VGQlNTeGpRVUZqTEVWQlFVVTdTVUZEZWtJc1QwRkJUeXhIUVVGSExFbEJRVWtzWTBGQll5eEZRVUZGTEVOQlFVTTdTVUZETDBJc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTTdTVUZEY2tJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eFRRVUZUTEVkQlFVY3NVVUZCVVN4RFFVRkRPMGxCUTI1RExFdEJRVXNzUjBGQlIwRXNTMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4RFFVRkRPenM3UjBGSGVFTXNUVUZCVFN4SlFVRkphRU1zVVVGQlRTeERRVUZETEdkQ1FVRm5RaXhKUVVGSkxFOUJRVThzVjBGQlZ5eEpRVUZKTEZWQlFWVXNTVUZCU1N4RFFVRkRRU3hSUVVGTkxFTkJRVU1zWVVGQllTeEZRVUZGTzBsQlF5OUdMRXRCUVVzc1IwRkJSeXhWUVVGVkxFVkJRVVVzUlVGQlJUdE5RVU53UWtFc1VVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wdEJRMnhETEVOQlFVTTdTVUZEUmtFc1VVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTTdPMGRCUlhKRUxFMUJRVTBzU1VGQlNTeHJRa0ZCYTBJc1NVRkJTU3hIUVVGSExFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVTdTVUZET1VNc1MwRkJTeXhIUVVGSExGVkJRVlVzUlVGQlJTeEZRVUZGTzAxQlEzQkNMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4WlFVRlpPMUZCUTJoRkxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1VVRkRka0lzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRQUVVOa0xFTkJRVU03UzBGRFNDeERRVUZET3p0SFFVVklMRTFCUVUwN1NVRkRUQ3hMUVVGTExFZEJRVWNzVlVGQlZTeEZRVUZGTEVWQlFVVTdUVUZEY0VJc1ZVRkJWU3hEUVVGRFowTXNTMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRhRU1zUTBGQlF6dEhRVU5JTzBOQlEwWTdRVUZEUkN4VFFVRmpMRWRCUVVjN1JVRkRaaXhIUVVGSExFVkJRVVVzVDBGQlR6dEZRVU5hTEV0QlFVc3NSVUZCUlN4VFFVRlRPME5CUTJwQ0xFTkJRVU03TzBGRGJrWkdMRWxCUVVsb1F5eFJRVUZOTEVkQlFVZEtMRTlCUVc5Q0xFTkJRVU03UVVGRGJFTXNTVUZCU1N4VFFVRlRMRWRCUVVkR0xFdEJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRPMEZCUTNaRExFbEJRVWtzVVVGQlVTeEhRVUZIVFN4UlFVRk5MRU5CUVVNc1owSkJRV2RDTEVsQlFVbEJMRkZCUVUwc1EwRkJReXh6UWtGQmMwSXNRMEZCUXp0QlFVTjRSU3hKUVVGSmFVTXNVMEZCVHl4SFFVRkhha01zVVVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTTNRaXhKUVVGSmEwTXNVMEZCVHl4SFFVRkhiRU1zVVVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXp0QlFVTTNRaXhKUVVGSmJVTXNVVUZCVFN4SFFVRkhNME1zU1VGQmFVSXNRMEZCUTNsRExGTkJRVThzUTBGQlF5eEpRVUZKTEZOQlFWTXNRMEZCUXpzN1FVRkZja1FzWTBGQll5eEhRVUZITEZsQlFWazdSVUZETTBJc1NVRkJTU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEUxQlFVMHNRMEZCUXpzN1JVRkZka0lzU1VGQlNTeExRVUZMTEVkQlFVY3NXVUZCV1R0SlFVTjBRaXhKUVVGSkxFMUJRVTBzUlVGQlJTeEZRVUZGTEVOQlFVTTdTVUZEWml4SlFVRkpSU3hSUVVGTkxFdEJRVXNzVFVGQlRTeEhRVUZIUml4VFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFVkJRVVVzUlVGQlFTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJRVHRKUVVOMlJDeFBRVUZQTEVsQlFVa3NSVUZCUlR0TlFVTllMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETzAxQlEySXNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU03VFVGRGFrSXNTVUZCU1R0UlFVTkdMRVZCUVVVc1JVRkJSU3hEUVVGRE8wOUJRMDRzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlR0UlFVTldMRWxCUVVrc1NVRkJTU3hGUVVGRkxFVkJRVUVzVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUVR0aFFVTmtMRVZCUVVFc1NVRkJTU3hIUVVGSExGTkJRVk1zUTBGQlF5eEZRVUZCTzFGQlEzUkNMRTFCUVUwc1EwRkJReXhEUVVGRE8wOUJRMVE3UzBGRFJpeERRVUZETEVsQlFVa3NSMEZCUnl4VFFVRlRMRU5CUVVNN1NVRkRia0lzU1VGQlNTeE5RVUZOTEVWQlFVVXNSVUZCUVN4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxFTkJRVU1zUlVGQlFUdEhRVU0xUWl4RFFVRkRPenM3UlVGSFJpeEpRVUZKUlN4UlFVRk5MRVZCUVVVN1NVRkRWaXhOUVVGTkxFZEJRVWNzV1VGQldUdE5RVU51UWtZc1UwRkJUeXhEUVVGRExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTjZRaXhEUVVGRE96dEhRVVZJTEUxQlFVMHNTVUZCU1N4UlFVRlJMRVZCUVVVN1NVRkRia0lzU1VGQlNTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRPMGxCUTJ4Q0xFbEJRVWtzU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRGRrTXNTVUZCU1N4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETzBsQlF6TkVMRTFCUVUwc1IwRkJSeXhaUVVGWk8wMUJRMjVDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZETzB0QlF6bENMRU5CUVVNN08wZEJSVWdzVFVGQlRTeEpRVUZKUXl4VFFVRlBMRWxCUVVsQkxGTkJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVTdTVUZEY2tNc1NVRkJTU3hQUVVGUExFZEJRVWRCTEZOQlFVOHNRMEZCUXl4UFFVRlBMRVZCUVVVc1EwRkJRenRKUVVOb1F5eE5RVUZOTEVkQlFVY3NXVUZCV1R0TlFVTnVRaXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPMHRCUTNKQ0xFTkJRVU03T3pzN096czdSMEZQU0N4TlFVRk5PMGxCUTB3c1RVRkJUU3hIUVVGSExGbEJRVms3TzAxQlJXNUNMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU5zUXl4UlFVRk5MRVZCUVVVc1MwRkJTeXhEUVVGRExFTkJRVU03UzBGREwwSXNRMEZCUXp0SFFVTklPenRGUVVWRUxFOUJRVThzVlVGQlZTeEZRVUZGTEVWQlFVVTdTVUZEYmtJc1NVRkJTU3hKUVVGSkxFZEJRVWNzUlVGQlJTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVrc1JVRkJSU3hUUVVGVExFVkJRVVVzUTBGQlF6dEpRVU4yUXl4SlFVRkpMRWxCUVVrc1JVRkJSU3hGUVVGQkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRVZCUVVFN1NVRkRNMElzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlR0TlFVTlVMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVU03VFVGRFdpeE5RVUZOTEVWQlFVVXNRMEZCUXp0TFFVTldMRU5CUVVNc1NVRkJTU3hIUVVGSExFbEJRVWtzUTBGQlF6dEhRVU5tTEVOQlFVTTdRMEZEU0N4RFFVRkRPenM3UVVOcVJVWXNTVUZCU1N0Q0xGZEJRVk1zUjBGQlIzWkRMRlZCUVhkQ0xFTkJRVU03TzBGQlJYcERMRk5CUVZNc2FVSkJRV2xDTEVOQlFVTXNRMEZCUXl4RlFVRkZPMFZCUXpWQ0xFbEJRVWtzVDBGQlR5eEZRVUZGTEUxQlFVMHNRMEZCUXp0RlFVTndRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4RFFVRkRMRlZCUVZVc1UwRkJVeXhGUVVGRkxGRkJRVkVzUlVGQlJUdEpRVU5zUkN4SlFVRkpMRTlCUVU4c1MwRkJTeXhUUVVGVExFbEJRVWtzVFVGQlRTeExRVUZMTEZOQlFWTXNSVUZCUlN4RlFVRkJMRTFCUVUwc1UwRkJVeXhEUVVGRExIbENRVUY1UWl4RFFVRkRMRU5CUVVNc1JVRkJRVHRKUVVNNVJpeFBRVUZQTEVkQlFVY3NVMEZCVXl4RFFVRkRPMGxCUTNCQ0xFMUJRVTBzUjBGQlJ5eFJRVUZSTEVOQlFVTTdSMEZEYmtJc1EwRkJReXhEUVVGRE8wVkJRMGdzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUjNWRExGZEJRVk1zUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXp0RlFVTnNReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEhRVUZIUVN4WFFVRlRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UTBGRGFrTTdPMEZCUlVRc1ZVRkJiVUlzVlVGQlZTeERRVUZETEVWQlFVVTdSVUZET1VJc1QwRkJUeXhKUVVGSkxHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wTkJRMnBETEVOQlFVTTdPenM3T3p0QlEycENSaXhaUVVGakxFZEJRVWNzVlVGQlZTeEpRVUZKTEVWQlFVVTdSVUZETDBJc1NVRkJTVHRKUVVOR0xFOUJRVThzUlVGQlJTeERRVUZETEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzUlVGQlJTeERRVUZETzBkQlEyaERMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVU3U1VGRFZpeFBRVUZQTEVWQlFVVXNRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTEVOQlFVTTdSMEZETVVJN1EwRkRSaXhEUVVGRE96dEJRMDVHTEVsQlFVbHdRaXhWUVVGUkxFZEJRVWRtTEZOQlFYVkNMRU5CUVVNN1FVRkRka01zU1VGQlNVZ3NWVUZCVVN4SFFVRkhReXhUUVVGMVFpeERRVUZETzBGQlEzWkRMRWxCUVVrd1F5eHpRa0ZCYjBJc1IwRkJSelZETEhGQ1FVRnZReXhEUVVGRE96dEJRVVZvUlN4dFFrRkJZeXhIUVVGSExGVkJRVlVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlR0RlFVTXZRbTFDTEZWQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRGUVVOYUxFbEJRVWxzUWl4VlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEZkQlFWY3NTMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJRU3hQUVVGUExFTkJRVU1zUTBGQlF5eEZRVUZCTzBWQlEycEVMRWxCUVVrc2FVSkJRV2xDTEVkQlFVY3lReXh6UWtGQmIwSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UlVGRGJFUXNTVUZCU1N4UFFVRlBMRWRCUVVjc2FVSkJRV2xDTEVOQlFVTXNUMEZCVHl4RFFVRkRPMFZCUTNoRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0RlFVTllMRTlCUVU4c2FVSkJRV2xDTEVOQlFVTXNUMEZCVHl4RFFVRkRPME5CUTJ4RExFTkJRVU03TzBGRFdFWXNTVUZCU1dJc1ZVRkJVU3hIUVVGSEwwSXNVMEZCYzBJc1EwRkJRenRCUVVOMFF5eG5Ra0ZCWXl4SFFVRkhMRlZCUVZVc1RVRkJUU3hGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVTdSVUZETlVNc1MwRkJTeXhKUVVGSkxFZEJRVWNzU1VGQlNTeEhRVUZITEVWQlFVVXNSVUZCUVN0Q0xGVkJRVkVzUTBGQlF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkJPMFZCUXpORUxFOUJRVThzVFVGQlRTeERRVUZETzBOQlEyWXNRMEZCUXpzN1FVTklSaXhKUVVGSmRrSXNVVUZCVFN4SFFVRkhTQ3hQUVVGdlFpeERRVUZETzBGQlEyeERMRWxCUVVsRExFbEJRVVVzUjBGQlIwWXNVMEZCZFVJc1EwRkJRenRCUVVOcVF5eEpRVUZKTEZkQlFWY3NSMEZCUjBZc1dVRkJlVUlzUTBGQlF6dEJRVU0xUXl4SlFVRkpNa01zVTBGQlR5eEhRVUZITjBNc1NVRkJhVUlzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXpzN1FVRkZNME1zWlVGQll5eEhRVUZITEZWQlFWVXNSMEZCUnl4RlFVRkZPMFZCUXpsQ0xFbEJRVWtzUTBGQlF5eEhRVUZIVVN4UlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UlVGRGNFSXNTVUZCU1N4WFFVRlhMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZEY1VNc1UwRkJUeXhEUVVGRExFVkJRVVVzUlVGQlFYWkRMRWxCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGZFVNc1UwRkJUeXhGUVVGRk8wbEJRM0JFTEZsQlFWa3NSVUZCUlN4SlFVRkpPMGxCUTJ4Q0xFZEJRVWNzUlVGQlJTeFpRVUZaTEVWQlFVVXNUMEZCVHl4SlFVRkpMRU5CUVVNc1JVRkJSVHRIUVVOc1F5eERRVUZETEVOQlFVTXNSVUZCUVR0RFFVTktMRU5CUVVNN08wRkRXa1lzU1VGQlNWUXNWVUZCVVN4SFFVRkhjRU1zU1VGQmFVSXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRenRCUVVNM1F5eEpRVUZKTEZsQlFWa3NSMEZCUnl4TFFVRkxMRU5CUVVNN08wRkJSWHBDTEVsQlFVazdSVUZEUml4SlFVRkpMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZEYjBNc1ZVRkJVU3hEUVVGRExFVkJRVVVzUTBGQlF6dEZRVU0xUWl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzV1VGQldTeEZRVUZGTEZsQlFWa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRE96dEZRVVYyUkN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeFpRVUZaTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03UTBGRE4wTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSU3hsUVVGbE96dEJRVVV6UWl4bFFVRmpMRWRCUVVjc1ZVRkJWU3hKUVVGSkxFVkJRVVVzVjBGQlZ5eEZRVUZGTzBWQlF6VkRMRWxCUVVrc1EwRkJReXhYUVVGWExFbEJRVWtzUTBGQlF5eFpRVUZaTEVWQlFVVXNSVUZCUVN4UFFVRlBMRXRCUVVzc1EwRkJReXhGUVVGQk8wVkJRMmhFTEVsQlFVa3NTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJRenRGUVVOcVFpeEpRVUZKTzBsQlEwWXNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF6dEpRVU5rTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJRMEVzVlVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXp0SlFVTXpRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZsQlFWa3NSVUZCUlN4UFFVRlBMRVZCUVVVc1NVRkJTU3hGUVVGRkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RlFVRkZMRU5CUVVNN1NVRkRNVVFzUjBGQlJ5eERRVUZEUVN4VlFVRlJMRU5CUVVNc1IwRkJSeXhaUVVGWkxFVkJRVVVzVDBGQlR5eEpRVUZKTEVOQlFVTXNSVUZCUlN4RFFVRkRPMGxCUXpkRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0SFFVTllMRU5CUVVNc1QwRkJUeXhEUVVGRExFVkJRVVVzWlVGQlpUdEZRVU16UWl4UFFVRlBMRWxCUVVrc1EwRkJRenREUVVOaUxFTkJRVU03TzBGRGNFSkdMRWxCUVVsVkxGTkJRVThzUjBGQlIwTXNVVUZCY1VJc1EwRkJRenRCUVVOd1F5eEpRVUZKZGtNc1VVRkJUU3hIUVVGSGQwTXNUMEZCYjBJc1EwRkJRenRCUVVOc1F5eEpRVUZKVWl4TFFVRkhMRWRCUVVkVExFbEJRV2xDTEVOQlFVTTdRVUZETlVJc1NVRkJTVmdzVTBGQlR5eEhRVUZIV1N4UlFVRnhRaXhEUVVGRE8wRkJRM0JETEVsQlFVbDZReXhUUVVGUExFZEJRVWN3UXl4UFFVRnZRaXhEUVVGRE8wRkJRMjVETEVsQlFVbHNSQ3hWUVVGUkxFZEJRVWR0UkN4VFFVRjFRaXhEUVVGRE8wRkJRM1pETEVsQlFVbGlMRmRCUVZNc1IwRkJSMk1zVlVGQmQwSXNRMEZCUXp0QlFVTjZReXhKUVVGSkxGVkJRVlVzUjBGQlIwTXNWMEZCZVVJc1EwRkJRenRCUVVNelF5eEpRVUZKTEV0QlFVc3NSMEZCUjBNc1RVRkJiMElzUTBGQlF6dEJRVU5xUXl4SlFVRkpMR3RDUVVGclFpeEhRVUZIUXl4dFFrRkJhVU1zUTBGQlF6dEJRVU16UkN4SlFVRkpMRWxCUVVrc1IwRkJSME1zUzBGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNN1FVRkRiRU1zU1VGQlNTeFRRVUZUTEVkQlFVYzFRaXhWUVVGMVFpeEZRVUZGTEVOQlFVTTdRVUZETVVNc1NVRkJTU3d3UWtGQk1FSXNSMEZCUjBNc2NVSkJRVzlETEVOQlFVTTdRVUZEZEVVc1NVRkJTU3hQUVVGUExFZEJRVWRGTEZGQlFYRkNMRU5CUVVNN1FVRkRjRU1zU1VGQlNTeGpRVUZqTEVkQlFVZEZMR1ZCUVRaQ0xFTkJRVU03UVVGRGJrUXNTVUZCU1N4UFFVRlBMRWRCUVVjc1UwRkJVeXhEUVVGRE8wRkJRM2hDTEVsQlFVbDNRaXhYUVVGVExFZEJRVWRzUkN4UlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRE8wRkJRMnBETEVsQlFVa3NUMEZCVHl4SFFVRkhRU3hSUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETzBGQlF6ZENMRWxCUVVrc1VVRkJVU3hIUVVGSFFTeFJRVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN1FVRkRMMElzU1VGQlNTeE5RVUZOTEVkQlFVYzRRaXhUUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NVMEZCVXl4RFFVRkRPMEZCUXpORExFbEJRVWtzUzBGQlN5eEhRVUZITEZsQlFWa3NaVUZCWlN4RFFVRkRPMEZCUTNoRExFbEJRVWtzVVVGQlVUdEpRVUZGTERKQ1FVRXlRanRKUVVGRkxHOUNRVUZ2UWp0SlFVRkZMRTlCUVU4c1EwRkJRenRCUVVONlJTeEpRVUZKTEc5Q1FVRnZRaXhIUVVGSExESkNRVUV5UWl4SFFVRkhMREJDUVVFd1FpeERRVUZETEVOQlFVTXNRMEZCUXpzN1FVRkZkRVlzU1VGQlNTeFZRVUZWTEVkQlFVY3NRMEZCUXl4RFFVRkRMRmxCUVZrN1JVRkROMElzU1VGQlNUczdTVUZGUml4SlFVRkpMRTlCUVU4c1IwRkJSeXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMGxCUTJ4RExFbEJRVWtzVjBGQlZ5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1IwRkJSeXhGUVVGRkxFVkJRVVYwUWl4SlFVRnBRaXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVkQlFVY3NWVUZCVlN4SlFVRkpMRVZCUVVVN1RVRkRNMFlzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVOd1FpeERRVUZET3p0SlFVVkdMRTlCUVU4c1EwRkJReXhOUVVGTkxFbEJRVWtzVDBGQlR5eHhRa0ZCY1VJc1NVRkJTU3hWUVVGVkxFdEJRVXNzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1dVRkJXU3hYUVVGWExFTkJRVU03UjBGRE4wY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSU3hsUVVGbE8wTkJRelZDTEVWQlFVVXNRMEZCUXpzN08wRkJSMG9zU1VGQlNTeFZRVUZWTEVkQlFVY3NWVUZCVlN4RlFVRkZMRVZCUVVVN1JVRkROMElzU1VGQlNTeEpRVUZKTEVOQlFVTTdSVUZEVkN4UFFVRlBaaXhWUVVGUkxFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NVVUZCVVN4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEZWQlFWVXNSMEZCUnl4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRE8wTkJRemRGTEVOQlFVTTdRVUZEUml4SlFVRkpMRTFCUVUwc1IwRkJSeXhWUVVGVkxFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVTdSVUZEZUVNc1NVRkJTU3hQUVVGUExFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVRXNUMEZCVHl4RlFVRkJPMFZCUTNaQ0xFOUJRVThzUTBGQlF5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRPMFZCUTJ4Q0xFbEJRVWtzUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNN1JVRkRka0lzVTBGQlV5eERRVUZETEZsQlFWazdTVUZEY0VJc1NVRkJTU3hMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEVWQlFVVXNRMEZCUXp0SlFVTjJRaXhKUVVGSkxFVkJRVVVzUjBGQlJ5eFBRVUZQTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRKUVVONlFpeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1NVRkRWaXhKUVVGSkxFZEJRVWNzUjBGQlJ5eFZRVUZWTEZGQlFWRXNSVUZCUlR0TlFVTTFRaXhKUVVGSkxFOUJRVThzUjBGQlJ5eEZRVUZGTEVkQlFVY3NVVUZCVVN4RFFVRkRMRVZCUVVVc1IwRkJSeXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETzAxQlF5OURMRWxCUVVrc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTTdUVUZETDBJc1NVRkJTU3hOUVVGTkxFZEJRVWNzVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXp0TlFVTTNRaXhKUVVGSkxFMUJRVTBzUjBGQlJ5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRPMDFCUXpkQ0xFbEJRVWtzVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXp0TlFVTnFRaXhKUVVGSk8xRkJRMFlzU1VGQlNTeFBRVUZQTEVWQlFVVTdWVUZEV0N4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRk8xbEJRMUFzU1VGQlNTeFBRVUZQTEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGQkxHbENRVUZwUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFVkJRVUU3V1VGRGFFUXNUMEZCVHl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU03VjBGRGFFSTdWVUZEUkN4SlFVRkpMRTlCUVU4c1MwRkJTeXhKUVVGSkxFVkJRVVVzUlVGQlFTeE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRMRVZCUVVFN1pVRkRhRU03V1VGRFNDeEpRVUZKTEUxQlFVMHNSVUZCUlN4RlFVRkJMRTFCUVUwc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlF5eEZRVUZCTzFsQlF6TkNMRTFCUVUwc1IwRkJSeXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdXVUZEZUVJc1NVRkJTU3hOUVVGTkxFVkJRVVVzUlVGQlFTeE5RVUZOTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJRVHRYUVVNelFqdFZRVU5FTEVsQlFVa3NUVUZCVFN4TFFVRkxMRkZCUVZFc1EwRkJReXhQUVVGUExFVkJRVVU3V1VGREwwSXNUVUZCVFN4RFFVRkRlVVFzVjBGQlV5eERRVUZETEhGQ1FVRnhRaXhEUVVGRExFTkJRVU1zUTBGQlF6dFhRVU14UXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hIUVVGSExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTXNSVUZCUlR0WlFVTndReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlN4UFFVRlBMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03VjBGRGNFTXNUVUZCVFN4RlFVRkJMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZCTzFOQlEzaENMRTFCUVUwc1JVRkJRU3hOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUVR0UFFVTjBRaXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTzFGQlExWXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wOUJRMWc3UzBGRFJpeERRVUZETzBsQlEwWXNUMEZCVHl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUlVGQlJTeEZRVUZCTEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVRTdTVUZEZWtNc1QwRkJUeXhEUVVGRExFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTTdTVUZEYUVJc1QwRkJUeXhEUVVGRExFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTTdTVUZEYmtJc1NVRkJTU3hSUVVGUkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVFc1YwRkJWeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVWQlFVRTdSMEZEYmtRc1EwRkJReXhEUVVGRE8wTkJRMG9zUTBGQlF6dEJRVU5HTEVsQlFVa3NWMEZCVnl4SFFVRkhMRlZCUVZVc1QwRkJUeXhGUVVGRk8wVkJRMjVETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVOc1JDeFJRVUZOTEVWQlFVVXNXVUZCV1R0SlFVTTFRaXhKUVVGSkxFdEJRVXNzUjBGQlJ5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRPMGxCUTNaQ0xFbEJRVWtzVTBGQlV5eEhRVUZITEZkQlFWY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRKUVVOeVF5eEpRVUZKTEUxQlFVMHNSVUZCUlN4UFFVRlBMRVZCUVVVc1QwRkJUeXhEUVVGRE8wbEJRemRDTEVsQlFVa3NVMEZCVXl4RlFVRkZPMDFCUTJJc1RVRkJUU3hIUVVGSExFOUJRVThzUTBGQlF5eFpRVUZaTzFGQlF6TkNMRWxCUVVrc1RVRkJUU3hGUVVGRk8xVkJRMVlzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4dlFrRkJiMElzUlVGQlJTeExRVUZMTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNN1UwRkRjRVFzVFVGQlRTeEpRVUZKTEU5QlFVOHNSMEZCUjBFc1VVRkJUU3hEUVVGRExHOUNRVUZ2UWl4RlFVRkZPMVZCUTJoRUxFOUJRVThzUTBGQlF5eEZRVUZGTEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRkxFdEJRVXNzUlVGQlJTeERRVUZETEVOQlFVTTdVMEZET1VNc1RVRkJUU3hKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZIUVN4UlFVRk5MRU5CUVVNc1QwRkJUeXhMUVVGTExFOUJRVThzUTBGQlF5eExRVUZMTEVWQlFVVTdWVUZEZEVRc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5dzJRa0ZCTmtJc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU55UkR0UFFVTkdMRU5CUVVNc1EwRkJRenM3VFVGRlNDeFBRVUZQTEVOQlFVTXNSVUZCUlN4SFFVRkhMRTFCUVUwc1NVRkJTU3hYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenRMUVVOeVJDeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZMRWRCUVVjc1UwRkJVeXhEUVVGRE8wbEJRM3BDTEVsQlFVa3NVMEZCVXl4SlFVRkpMRTFCUVUwc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlFTeE5RVUZOTEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJRVHRIUVVNelF5eERRVUZETEVOQlFVTTdRMEZEU2l4RFFVRkRPMEZCUTBZc1NVRkJTU3hYUVVGWExFZEJRVWNzVlVGQlZTeFBRVUZQTEVWQlFVVTdSVUZEYmtNc1NVRkJTU3hQUVVGUExFTkJRVU1zUlVGQlJTeEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkJMRTlCUVU4c1MwRkJTeXhEUVVGRExFVkJRVUU3UlVGRGJFTXNTVUZCU1N4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExFVkJRVVVzU1VGQlNTeFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRPMFZCUTNKRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0RlFVTldMRWxCUVVrc1VVRkJVU3hEUVVGRE8wVkJRMklzVDBGQlR5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRU5CUVVNc1JVRkJSVHRKUVVOMlFpeFJRVUZSTEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRGRFSXNTVUZCU1N4UlFVRlJMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSU3hGUVVGQkxFOUJRVThzUzBGQlN5eERRVUZETEVWQlFVRTdSMEZEYmtVc1EwRkJReXhQUVVGUExFbEJRVWtzUTBGQlF6dERRVU5tTEVOQlFVTTdRVUZEUml4SlFVRkpMR2xDUVVGcFFpeEhRVUZITEZWQlFWVXNUMEZCVHl4RlFVRkZPMFZCUTNwRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTkJMRkZCUVUwc1JVRkJSU3haUVVGWk8wbEJRelZDTEVsQlFVa3NUMEZCVHl4RFFVRkRPMGxCUTFvc1NVRkJTU3hOUVVGTkxFVkJRVVU3VFVGRFZpeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMR3RDUVVGclFpeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRPMHRCUXpORExFMUJRVTBzU1VGQlNTeFBRVUZQTEVkQlFVZEJMRkZCUVUwc1EwRkJReXhyUWtGQmEwSXNSVUZCUlR0TlFVTTVReXhQUVVGUExFTkJRVU1zUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RlFVRkZMRTFCUVUwc1JVRkJSU3hQUVVGUExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUXp0TFFVTnVSRHRIUVVOR0xFTkJRVU1zUTBGQlF6dERRVU5LTEVOQlFVTTdRVUZEUml4SlFVRkpMRTlCUVU4c1IwRkJSeXhWUVVGVkxFdEJRVXNzUlVGQlJUdEZRVU0zUWl4SlFVRkpMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU03UlVGRGJrSXNTVUZCU1N4UFFVRlBMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVUVzVDBGQlR5eEZRVUZCTzBWQlEzWkNMRTlCUVU4c1EwRkJReXhGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETzBWQlEyeENMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVU1zUlVGQlJTeEpRVUZKTEU5QlFVOHNRMEZCUXp0RlFVTm9ReXhQUVVGUExFTkJRVU1zUlVGQlJTeEhRVUZITEV0QlFVc3NRMEZCUXp0RlFVTnVRaXhQUVVGUExFTkJRVU1zUlVGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXp0RlFVTm1MRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVRXNUMEZCVHl4RFFVRkRMRVZCUVVVc1IwRkJSeXhQUVVGUExFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkRMRVZCUVVFN1JVRkRha1FzVFVGQlRTeERRVUZETEU5QlFVOHNSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenREUVVOMlFpeERRVUZETzBGQlEwWXNTVUZCU1N4UlFVRlJMRWRCUVVjc1ZVRkJWU3hMUVVGTExFVkJRVVU3UlVGRE9VSXNTVUZCU1N4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRE8wVkJRMjVDTEVsQlFVa3NTVUZCU1N4RFFVRkRPMFZCUTFRc1NVRkJTU3hQUVVGUExFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVRXNUMEZCVHl4RlFVRkJPMFZCUTNaQ0xFOUJRVThzUTBGQlF5eEZRVUZGTEVkQlFVY3NTVUZCU1N4RFFVRkRPMFZCUTJ4Q0xFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNSVUZCUlN4SlFVRkpMRTlCUVU4c1EwRkJRenRGUVVOb1F5eEpRVUZKTzBsQlEwWXNTVUZCU1N4UFFVRlBMRXRCUVVzc1MwRkJTeXhGUVVGRkxFVkJRVUVzVFVGQlRXdEVMRmRCUVZNc1EwRkJReXhyUTBGQmEwTXNRMEZCUXl4RFFVRkRMRVZCUVVFN1NVRkRNMFVzU1VGQlNTeEpRVUZKTEVkQlFVY3NWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wMUJRelZDTEZOQlFWTXNRMEZCUXl4WlFVRlpPMUZCUTNCQ0xFbEJRVWtzVDBGQlR5eEhRVUZITEVWQlFVVXNSVUZCUlN4RlFVRkZMRTlCUVU4c1JVRkJSU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVOQlFVTTdVVUZEZWtNc1NVRkJTVHRWUVVOR0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZiRUlzUzBGQlJ5eERRVUZETEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVc1EwRkJReXhEUVVGRExFVkJRVVZCTEV0QlFVY3NRMEZCUXl4UFFVRlBMRVZCUVVVc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEZGtVc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdFZRVU5XTEU5QlFVOHNRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETzFOQlF6RkNPMDlCUTBZc1EwRkJReXhEUVVGRE8wdEJRMG9zVFVGQlRUdE5RVU5NTEU5QlFVOHNRMEZCUXl4RlFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRE8wMUJRMjVDTEU5QlFVOHNRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRE8wMUJRMllzVFVGQlRTeERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRMUVVONFFqdEhRVU5HTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVN1NVRkRWaXhQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEVWQlFVVXNSVUZCUlN4RlFVRkZMRTlCUVU4c1JVRkJSU3hGUVVGRkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1IwRkROME03UTBGRFJpeERRVUZET3pzN1FVRkhSaXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGT3p0RlFVVm1MRkZCUVZFc1IwRkJSeXhUUVVGVExFOUJRVThzUTBGQlF5eFJRVUZSTEVWQlFVVTdTVUZEY0VNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUlVGQlJTeFJRVUZSTEVWQlFVVXNUMEZCVHl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRE8wbEJRekZEUkN4WFFVRlRMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRGNFSXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6dEpRVU53UWl4SlFVRkpPMDFCUTBZc1VVRkJVU3hEUVVGRFF5eExRVUZITEVOQlFVTXNVVUZCVVN4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUlVGQlJVRXNTMEZCUnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTjZSQ3hEUVVGRExFOUJRVThzUjBGQlJ5eEZRVUZGTzAxQlExb3NUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVTTdTMEZEZWtJN1IwRkRSaXhEUVVGRE96dEZRVVZHTEZGQlFWRXNSMEZCUnl4VFFVRlRMRTlCUVU4c1EwRkJReXhSUVVGUkxFVkJRVVU3U1VGRGNFTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU03U1VGRFlpeEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRk5CUVZNc1EwRkJRenRKUVVOd1FpeEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRKUVVOYUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRPMGxCUTJoQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NVMEZCVXl4RFFVRkRPMGxCUTNCQ0xFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTFvc1NVRkJTU3hEUVVGRExFVkJRVVVzUjBGQlJ5eExRVUZMTEVOQlFVTTdSMEZEYWtJc1EwRkJRenRGUVVOR0xGRkJRVkVzUTBGQlF5eFRRVUZUTEVkQlFVZHFReXhaUVVFd1FpeERRVUZETEZGQlFWRXNRMEZCUXl4VFFVRlRMRVZCUVVVN08wbEJSV3hGTEVsQlFVa3NSVUZCUlN4VFFVRlRMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVVzVlVGQlZTeEZRVUZGTzAxQlF6TkRMRWxCUVVrc1VVRkJVU3hIUVVGSExHOUNRVUZ2UWl4RFFVRkRMR3RDUVVGclFpeERRVUZETEVsQlFVa3NSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRE8wMUJRM2hGTEZGQlFWRXNRMEZCUXl4RlFVRkZMRWRCUVVjc1QwRkJUeXhYUVVGWExFbEJRVWtzVlVGQlZTeEhRVUZITEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNN1RVRkRjRVVzVVVGQlVTeERRVUZETEVsQlFVa3NSMEZCUnl4UFFVRlBMRlZCUVZVc1NVRkJTU3hWUVVGVkxFbEJRVWtzVlVGQlZTeERRVUZETzAxQlF6bEVMRkZCUVZFc1EwRkJReXhOUVVGTkxFZEJRVWNzVFVGQlRTeEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRWRCUVVjc1UwRkJVeXhEUVVGRE8wMUJRM1JFTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzAxQlEzWkNMRWxCUVVrc1NVRkJTU3hEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZCTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVWQlFVRTdUVUZEY0VNc1NVRkJTU3hKUVVGSkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVRXNUVUZCVFN4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZCTzAxQlEycERMRTlCUVU4c1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF6dExRVU42UWpzN1NVRkZSQ3hQUVVGUExFVkJRVVVzVlVGQlZTeFZRVUZWTEVWQlFVVTdUVUZETjBJc1QwRkJUeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRenRMUVVONlF6dEhRVU5HTEVOQlFVTXNRMEZCUXp0RlFVTklMRzlDUVVGdlFpeEhRVUZITEZsQlFWazdTVUZEYWtNc1NVRkJTU3hQUVVGUExFZEJRVWNzU1VGQlNTeFJRVUZSTEVWQlFVVXNRMEZCUXp0SlFVTTNRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUXp0SlFVTjJRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZIYVVNc1MwRkJSeXhEUVVGRExGRkJRVkVzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRla01zU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUjBFc1MwRkJSeXhEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1IwRkRlRU1zUTBGQlF6dEZRVU5HTERCQ1FVRXdRaXhEUVVGRExFTkJRVU1zUjBGQlJ5eHZRa0ZCYjBJc1IwRkJSeXhWUVVGVkxFTkJRVU1zUlVGQlJUdEpRVU5xUlN4UFFVRlBMRU5CUVVNc1MwRkJTeXhSUVVGUkxFbEJRVWtzUTBGQlF5eExRVUZMTEU5QlFVODdVVUZEYkVNc1NVRkJTU3h2UWtGQmIwSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1VVRkRNMElzTWtKQlFUSkNMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UjBGRGNFTXNRMEZCUXp0RFFVTklPenRCUVVWRUwwSXNVMEZCVHl4RFFVRkRRU3hUUVVGUExFTkJRVU1zUTBGQlF5eEhRVUZIUVN4VFFVRlBMRU5CUVVNc1EwRkJReXhIUVVGSFFTeFRRVUZQTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVNN1FVRkRhRVpLTEdWQlFTdENMRU5CUVVNc1VVRkJVU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETzBGQlEyNUVSQ3hYUVVGNVFpeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRPMEZCUTI1RExFOUJRVThzUjBGQlIwWXNTMEZCYTBJc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6czdPMEZCUjNSRFR5eFRRVUZQTEVOQlFVTkJMRk5CUVU4c1EwRkJReXhEUVVGRExFZEJRVWRCTEZOQlFVOHNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFVkJRVVVzVDBGQlR5eEZRVUZGT3p0RlFVVndSQ3hOUVVGTkxFVkJRVVVzVTBGQlV5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RlFVRkZPMGxCUTNwQ0xFbEJRVWtzVlVGQlZTeEhRVUZITEc5Q1FVRnZRaXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETzBsQlF6VkRMRWxCUVVrc1VVRkJVU3hIUVVGSExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVTTdTVUZEYWtNc1VVRkJVU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETzBsQlExb3NUMEZCVHl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRE8wZEJRek5DTzBOQlEwWXNRMEZCUXl4RFFVRkRPMEZCUTBoQkxGTkJRVThzUTBGQlEwRXNVMEZCVHl4RFFVRkRMRU5CUVVNc1IwRkJSMEVzVTBGQlR5eERRVUZETEVOQlFVTXNTVUZCU1hGRExGTkJRVThzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRTlCUVU4c1JVRkJSVHM3UlVGRmFrVXNUMEZCVHl4RlFVRkZMRk5CUVZNc1QwRkJUeXhEUVVGRExFTkJRVU1zUlVGQlJUdEpRVU16UWl4UFFVRlBMR05CUVdNc1EwRkJRMEVzVTBGQlR5eEpRVUZKTEVsQlFVa3NTMEZCU3l4UFFVRlBMRWRCUVVjc1VVRkJVU3hIUVVGSExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTjZSVHREUVVOR0xFTkJRVU1zUTBGQlF6dEJRVU5JY2tNc1UwRkJUeXhEUVVGRFFTeFRRVUZQTEVOQlFVTXNRMEZCUXl4SFFVRkhRU3hUUVVGUExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNWVUZCVlN4SlFVRkpWQ3hYUVVGNVFpeERRVUZETEZWQlFWVXNTVUZCU1N4RlFVRkZPMFZCUTNoR0xGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRMEZEY0VNc1EwRkJReXhEUVVGRExFVkJRVVVzVDBGQlR5eEZRVUZGT3p0RlFVVmFMRWRCUVVjc1JVRkJSU3hUUVVGVExFZEJRVWNzUTBGQlF5eFJRVUZSTEVWQlFVVTdTVUZETVVJc1NVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETzBsQlEySXNTVUZCU1N4VlFVRlZMRWRCUVVjc2IwSkJRVzlDTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkRla01zU1VGQlNTeFBRVUZQTEVkQlFVY3NWVUZCVlN4RFFVRkRMRTlCUVU4c1EwRkJRenRKUVVOcVF5eEpRVUZKTEUxQlFVMHNSMEZCUnl4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGRE8wbEJReTlDTEVsQlFVa3NUVUZCVFN4SFFVRkhMRTlCUVU4c1EwRkJReXhaUVVGWk8wMUJReTlDTEVsQlFVa3NUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRenROUVVOb1FpeEpRVUZKTEV0QlFVc3NSMEZCUnl4RFFVRkRMRU5CUVVNN1RVRkRaQ3hKUVVGSkxGTkJRVk1zUjBGQlJ5eERRVUZETEVOQlFVTTdUVUZEYkVJc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJTeExRVUZMTEVWQlFVVXNWVUZCVlN4UFFVRlBMRVZCUVVVN1VVRkRlRU1zU1VGQlNTeE5RVUZOTEVkQlFVY3NTMEZCU3l4RlFVRkZMRU5CUVVNN1VVRkRja0lzU1VGQlNTeGhRVUZoTEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUXpGQ0xFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRU5CUVVNN1VVRkRka0lzVTBGQlV5eEZRVUZGTEVOQlFVTTdVVUZEV2l4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRXRCUVVzc1JVRkJSVHRWUVVOMlF5eEpRVUZKTEdGQlFXRXNSVUZCUlN4RlFVRkJMRTlCUVU4c1JVRkJRVHRWUVVNeFFpeGhRVUZoTEVkQlFVY3NTVUZCU1N4RFFVRkRPMVZCUTNKQ0xFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNN1ZVRkRka0lzUlVGQlJTeFRRVUZUTEVsQlFVa3NUMEZCVHl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRE8xTkJRMmhETEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1QwRkRXaXhEUVVGRExFTkJRVU03VFVGRFNDeEZRVUZGTEZOQlFWTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU03UzBGRGFFTXNRMEZCUXl4RFFVRkRPMGxCUTBnc1NVRkJTU3hOUVVGTkxFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVRXNUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZCTzBsQlF5OUNMRTlCUVU4c1ZVRkJWU3hEUVVGRExFOUJRVThzUTBGQlF6dEhRVU16UWpzN1JVRkZSQ3hKUVVGSkxFVkJRVVVzVTBGQlV5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMGxCUXpWQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXp0SlFVTmlMRWxCUVVrc1ZVRkJWU3hIUVVGSExHOUNRVUZ2UWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wbEJRM3BETEVsQlFVa3NUVUZCVFN4SFFVRkhMRlZCUVZVc1EwRkJReXhOUVVGTkxFTkJRVU03U1VGREwwSXNTVUZCU1N4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGRExGbEJRVms3VFVGREwwSXNTMEZCU3l4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFVkJRVVVzVlVGQlZTeFBRVUZQTEVWQlFVVTdVVUZEZUVNc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1ZVRkJWU3hEUVVGRExFOUJRVThzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXp0UFFVTnlSQ3hEUVVGRExFTkJRVU03UzBGRFNpeERRVUZETEVOQlFVTTdTVUZEU0N4SlFVRkpMRTFCUVUwc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlFTeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVUU3U1VGREwwSXNUMEZCVHl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRE8wZEJRek5DTzBOQlEwWXNRMEZCUXl4RFFVRkRPenRCUTNaU1NESkVMRWxCUVUxRExFdEJRVWNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUVRzN096czdPenRCUVU4elF5eEJRVUZsTEZOQlFWTXNUMEZCVHl4RlFVRkZMRU5CUVVNc1JVRkJSVHRGUVVOc1F5eE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hMUVVGTExFVkJRVVU3U1VGRGFrTXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJReXhSUVVGUkxFVkJRVVU3U1VGRGJrSXNWVUZCVlN4RlFVRkZMRWxCUVVrN1IwRkRha0lzUTBGQlF5eERRVUZCT3pzN096czdPenM3TzBWQlZVWXNTVUZCU1N4RFFVRkRMRVZCUVVVc1IwRkJSeXhWUVVGVkxFTkJRVU1zUlVGQlJUdEpRVU55UWl4UFFVRlBMRTlCUVU4c1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNN1IwRkRjRU1zUTBGQlFUczdPenM3T3pzN096dEZRVlZFTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1ZVRkJWU3hEUVVGRExFVkJRVVU3U1VGRGRFSXNUMEZCVHl4UFFVRlBMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRPMGRCUTNKRExFTkJRVUU3T3pzN096czdPenM3UlVGVlJDeEpRVUZKTEVOQlFVTXNSVUZCUlN4SFFVRkhMRlZCUVZVc1EwRkJReXhGUVVGRk8wbEJRM0pDTEU5QlFVOHNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXp0SFFVTndReXhEUVVGQk96czdPenM3T3pzN08wVkJWVVFzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4VlFVRlZMRU5CUVVNc1JVRkJSVHRKUVVOMFFpeFBRVUZQTEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTTdSMEZEY2tNc1EwRkJRVHM3T3pzN096czdPenRGUVZWRUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVkQlFVY3NWVUZCVlN4RFFVRkRMRVZCUVVVN1NVRkRja0lzVDBGQlR5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETzBkQlEzUkRMRU5CUVVFN1EwRkRSanM3T3pzN096czdPMEZCVTBRc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eFJRVUZSTEVkQlFVY3NXVUZCV1R0RlFVTjJReXhQUVVGUExFbEJRVWtzUTBGQlF5eEhRVUZITzBOQlEyaENMRU5CUVVFN096czdPenM3T3p0QlFWTkVMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zVDBGQlR5eEhRVUZITEZsQlFWazdSVUZEZEVORUxFbEJRVTBzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzBWQlF6ZENRU3hKUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVRTdSVUZEV2l4TFFVRkxSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdTVUZEYWtOQkxFbEJRVWtzUTBGQlF5eEhRVUZITEZGQlFWRXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVRTdTVUZETVVJc1NVRkJTU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVTdUVUZEV2l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wdEJRMDQ3U1VGRFJFRXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZCTzBsQlEzQkNMRWxCUVVrc1EwRkJReXhEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVWQlFVVTdUVUZEYUVJc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1MwRkRkRU03U1VGRFJDeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRMVFzU1VGQlNTeERRVUZETEVOQlFVTXNUVUZCVFN4TFFVRkxMRU5CUVVNc1JVRkJSVHROUVVOc1FpeERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wdEJRMW83UjBGRFJqdEZRVU5FTEU5QlFVOHNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdRMEZET1VJc1EwRkJRVHM3T3pzN096czdPenRCUVZWRUxFOUJRVThzUTBGQlF5eFBRVUZQTEVkQlFVY3NWVUZCVlN4RlFVRkZMRVZCUVVVc1JVRkJSU3hGUVVGRk8wVkJRMnhETEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMFZCUXpkQ0xFVkJRVVVzUjBGQlJ5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzBWQlF6ZENMRXRCUVV0QkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEpRVU51UkVFc1NVRkJTU3hGUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlFUdEpRVU0xUWtFc1NVRkJTU3hGUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlFUdEpRVU0xUWl4SlFVRkpMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVTdUVUZEY0VJc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlFUdExRVU5RTzBsQlEwUXNTVUZCU1N4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eEZRVUZGTzAxQlEzQkNMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVUU3UzBGRFVEdEpRVU5FTEVsQlFVa3NSVUZCUlN4SFFVRkhMRVZCUVVVc1JVRkJSVHROUVVOWUxFOUJRVThzUTBGQlF5eERRVUZETzB0QlExWTdVMEZEU1N4SlFVRkpMRVZCUVVVc1IwRkJSeXhGUVVGRkxFVkJRVVU3VFVGRGFFSXNUMEZCVHl4RFFVRkRPMHRCUTFRN1IwRkRSanRGUVVORUxFOUJRVThzUTBGQlF6dERRVU5VTEVOQlFVRTdPenM3T3pzN096dEJRVk5FUkN4TFFVRkhMRU5CUVVNc1QwRkJUeXhIUVVGSExGVkJRVlVzUTBGQlF5eEZRVUZGTzBWQlEzcENMRTlCUVU4c1NVRkJTU3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZETzBOQlEzUkNMRU5CUVVFN08wRkRka3BFUkN4SlFVRk5ReXhMUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVRTdRVUZETTBORUxFbEJRVTFITEV0QlFVY3NSMEZCUjBZc1MwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZEUVN4TFFVRkhMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZCT3p0QlFVVnlRMFFzU1VGQlRTeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRU5CUVVNc1EwRkJRVHRCUVVONFJFY3NTMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhGUVVGRkxFTkJRVUU3UVVGRFppeEpRVUZKTEUxQlFVMHNSVUZCUlR0RlFVTldTQ3hKUVVGTkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wVkJRMmhETEV0QlFVdEZMRWxCUVVsRkxFZEJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVkJMRWRCUVVNc1IwRkJSeXhOUVVGTkxFTkJRVU1zVFVGQlRTeEZRVUZGUVN4SFFVRkRMRVZCUVVVc1JVRkJSVHRKUVVOMFF5eE5RVUZOTEVOQlFVTkJMRWRCUVVNc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlEwRXNSMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlEyaERMRWxCUVVrN1RVRkRSa1FzUzBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVORExFZEJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc2EwSkJRV3RDTEVOQlFVTXNUVUZCVFN4RFFVRkRRU3hIUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMHRCUXpWRU8wbEJRMFFzVDBGQlR5eERRVUZETEVWQlFVVTdUVUZEVWtRc1MwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTkRMRWRCUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRRU3hIUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0TFFVTjRRenRIUVVOR08wTkJRMFk3TzBGRFlrUktMRWxCUVUxRExFdEJRVWNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNRMEZCUVR0QlFVTXpRMFFzU1VGQlRTeEhRVUZITEVkQlFVZERMRXRCUVVjc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlEwRXNTMEZCUnl4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU1zUTBGQlFUczdRVUZGY2tORUxFbEJRVTBzUlVGQlJTeEhRVUZITEUxQlFVMHNRMEZCUXl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGQk8wRkJRM0pEUlN4SlFVRkpMRXRCUVVzc1EwRkJRVHM3T3pzN08wRkJUVlFzUzBGQlN5eEhRVUZITEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc2JVTkJRVzFETEVOQlFVTXNRMEZCUVR0QlFVTnlSQ3hKUVVGSkxFdEJRVXNzUlVGQlJUczdPenM3T3pzN096czdPenRGUVdGVUxFZEJRVWNzUTBGQlF5eEZRVUZGTEVkQlFVYzdTVUZEVUN4SlFVRkpMRVZCUVVVc1pVRkJaVHRKUVVOeVFpeGpRVUZqTEVWQlFVVXNTVUZCU1R0SlFVTndRaXhQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTnNRaXhEUVVGQk8wTkJRMFk3UzBGRFNTeEpRVUZKTEVOQlFVTXNRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zYzBKQlFYTkNMRU5CUVVNc1EwRkJReXhGUVVGRk8wVkJRek5GTEVkQlFVY3NRMEZCUXl4RlFVRkZMRWRCUVVjN1NVRkRVQ3hQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTnNRaXhEUVVGQk96dEZRVVZFTEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRU5CUVVNc1JVRkJSVHRKUVVOcVF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1IwRkJSeXhUUVVGVExFTkJRVUU3U1VGRGRrSXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhUUVVGVExFZEJRVWNzU1VGQlNTeERRVUZCTzBkQlEzaENPMDlCUTBrN1NVRkRTQ3hIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVsQlFVa3NSMEZCUnl4WlFVRlpMRU5CUVVFN1NVRkRNVUlzUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGQk8wZEJRek5DTzBOQlEwWTdTMEZEU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlF5eEZRVUZGTzBWQlEycEVSaXhKUVVGTkxFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN08wVkJSWEpDTEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExEUkNRVUUwUWl4RFFVRkRMRU5CUVVFN08wVkJSVGxETEVkQlFVY3NRMEZCUXl4RlFVRkZMRWRCUVVjN1NVRkRVQ3hKUVVGSkxFVkJRVVVzU1VGQlNUdEpRVU5XTEZGQlFWRXNSVUZCUlN4RFFVRkRMRWxCUVVrc1MwRkJTeXhSUVVGUkxFbEJRVWtzU1VGQlNTeExRVUZMTEUxQlFVMHNRMEZCUXp0SlFVTm9SQ3hOUVVGTkxFVkJRVVVzU1VGQlNTeExRVUZMTEUxQlFVMDdTVUZEZGtJc1MwRkJTeXhGUVVGRkxFbEJRVWs3U1VGRFdDeFBRVUZQTEVWQlFVVXNTMEZCU3l4SlFVRkpMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVTdSMEZEZEVRc1EwRkJRVHREUVVOR08wdEJRMGs3UlVGRFNDeEhRVUZITEVOQlFVTXNSVUZCUlN4SFFVRkhPMGxCUTFBc1NVRkJTU3hGUVVGRkxGTkJRVk03U1VGRFppeFBRVUZQTEVWQlFVVXNUMEZCVHp0SFFVTnFRaXhEUVVGQk8wTkJRMFk3TzBGQlJVUXNTVUZCU1VNc1MwRkJSeXhEUVVGRExFOUJRVThzUlVGQlJUdEZRVU5tTEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1QwRkJUeXhIUVVGSFFTeExRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdRMEZETjBNN096czdPenRCUVUxRUxFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMQ3RDUVVFclFpeERRVUZETEVOQlFVRTdPMEZCUldwRUxFbEJRVWtzUzBGQlN5eEZRVUZGT3pzN096czdPenM3T3pzN096czdPMFZCWjBKVUxFZEJRVWNzUTBGQlF5eFBRVUZQTEVkQlFVYzdTVUZEV2l4SlFVRkpMRVZCUVVVc1NVRkJTVHRKUVVOV0xFbEJRVWtzUlVGQlJTeEpRVUZKTzBsQlExWXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU03UjBGRGJFSXNRMEZCUVR0RFFVTkdPMHRCUTBrc1NVRkJTU3hEUVVGRExFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMSE5DUVVGelFpeERRVUZETEVOQlFVTXNSVUZCUlR0RlFVTnVSQ3hIUVVGSExFTkJRVU1zVDBGQlR5eEhRVUZITzBsQlExb3NTVUZCU1N4RlFVRkZMRWxCUVVrN1NVRkRWaXhKUVVGSkxFVkJRVVVzU1VGQlNUdEpRVU5XTEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRE8wZEJRMnhDTEVOQlFVRTdRMEZEUmp0TFFVTkpMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZETEVWQlFVVTdSVUZEYUVRc1IwRkJSeXhEUVVGRExFOUJRVThzUjBGQlJ6dEpRVU5hTEVsQlFVa3NSVUZCUlN4VFFVRlRPMGxCUTJZc1UwRkJVeXhGUVVGRkxFbEJRVWs3U1VGRFppeFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJRenRIUVVOc1FpeERRVUZCTzBOQlEwWTdTMEZEU1N4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6dExRVU40UXl4RFFVRkRMRXRCUVVzc1IwRkJSeXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEc5Q1FVRnZRaXhEUVVGRExFTkJRVU1zUlVGQlJUdEZRVU0zUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhIUVVGSE8wbEJRMW9zVDBGQlR5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNN1IwRkRiRUlzUTBGQlFUczdSVUZGUkN4SlFVRkpMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVTdTVUZEZUVJc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVkQlFVY3NWVUZCVlN4RFFVRkJPMGxCUXpkQ0xFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJRVHRIUVVNNVFqdFBRVU5KTzBsQlEwZ3NSMEZCUnl4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZCTzBsQlEzWkNMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU1zU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUVR0SFFVTjRRanM3UlVGRlJDeEpRVUZKTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSVUZCUlR0SlFVTTVRaXhIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEdOQlFXTXNSMEZCUnl4SlFVRkpMRU5CUVVFN1IwRkRiRU03UTBGRFJqdExRVU5KTEVsQlFVa3NRMEZCUXl4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5dzBRa0ZCTkVJc1EwRkJReXhEUVVGRExFVkJRVVU3UlVGRGVrUXNSMEZCUnl4RFFVRkRMRTlCUVU4c1IwRkJSenRKUVVOYUxFbEJRVWtzUlVGQlJTeFJRVUZSTzBsQlEyUXNVVUZCVVN4RlFVRkZMRWxCUVVrN1NVRkRaQ3hQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTnNRaXhEUVVGQk96dEZRVVZFTEVsQlFVa3NSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXd5UWtGQk1rSXNRMEZCUXl4RlFVRkZPMGxCUTNwRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4SFFVRkhMR2RDUVVGblFpeERRVUZCTzBsQlEyNURMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUVR0SFFVTTNRanREUVVOR08wdEJRMGtzU1VGQlNTeERRVUZETEVOQlFVTXNSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExITkNRVUZ6UWl4RFFVRkRMRU5CUVVNc1JVRkJSVHRGUVVNelJTeEhRVUZITEVOQlFVTXNUMEZCVHl4SFFVRkhPMGxCUTFvc1NVRkJTU3hGUVVGRkxGTkJRVk03U1VGRFppeFRRVUZUTEVWQlFVVXNTVUZCU1R0SlFVTm1MRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETzBkQlEyeENMRU5CUVVFN1EwRkRSanRMUVVOSkxFbEJRVWtzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEZRVUZGTzBWQlEzSkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNSVUZCUlR0SlFVTjBRaXhMUVVGTExFZEJRVWNzUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eERRVUZCTzBsQlEzSkRMRWRCUVVjc1EwRkJReXhQUVVGUExFZEJRVWM3VFVGRFdpeEpRVUZKTEVWQlFVVXNVVUZCVVR0TlFVTmtMRkZCUVZFc1JVRkJSU3hKUVVGSk8wMUJRMlFzVDBGQlR5eEZRVUZGTEV0QlFVc3NTVUZCU1N4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJUdExRVU5xUXl4RFFVRkJPMGRCUTBZN1QwRkRTVHRKUVVOSUxFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRFJDUVVFMFFpeERRVUZETEVOQlFVRTdTVUZET1VNc1IwRkJSeXhEUVVGRExFOUJRVThzUjBGQlJ6dE5RVU5hTEVsQlFVa3NSVUZCUlN4aFFVRmhPMDFCUTI1Q0xGTkJRVk1zUlVGQlJTeEpRVUZKTzAxQlEyWXNUMEZCVHl4RlFVRkZMRXRCUVVzc1NVRkJTU3hMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU1zU1VGQlNTeEZRVUZGTzB0QlEzQkVMRU5CUVVFN1IwRkRSanREUVVOR08wdEJRMGs3UlVGRFNDeEhRVUZITEVOQlFVTXNUMEZCVHl4SFFVRkhPMGxCUTFvc1NVRkJTU3hGUVVGRkxGTkJRVk03U1VGRFppeFBRVUZQTEVWQlFVVXNUMEZCVHp0SFFVTnFRaXhEUVVGQk8wTkJRMFk3TzBGQlJVUXNTVUZCU1VFc1MwRkJSeXhEUVVGRExFOUJRVThzUlVGQlJUdEZRVU5tTEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1QwRkJUeXhIUVVGSFFTeExRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhQUVVGUExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdRMEZEZGtRN08wRkRiRXhFT3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnhRa0ZFTEVsQlFVMXFSQ3hWUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4UlFVRlJMRU5CUVVFN096czdPenM3T3p0QlFWTXhRMmxFTEVsQlFVMHNZVUZCWVN4SFFVRkhMR2xDUVVGcFFpeERRVUZCTzBGQlEzWkRMRUZCUVU4c1UwRkJVeXhoUVVGaExFVkJRVVVzUjBGQlJ5eEZRVUZ0UWp0RlFVTnVSQ3hQUVVGUGFrUXNWVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eGhRVUZoTzBOQlF6VkRPenRCUVVWRWFVUXNTVUZCVFN4WlFVRlpMRWRCUVVjc1owSkJRV2RDTEVOQlFVRTdRVUZEY2tNc1FVRkJUeXhUUVVGVExFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFXMUNPMFZCUXpkRExFOUJRVTlxUkN4VlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEZsQlFWazdRMEZETTBNN08wRkRkRU5FT3pzN096czdPenM3T3pzN096czdPenM3TzBGQmJVSkJPenM3TzBGQlQwRXNRVUZCVHl4VFFVRlRMRTFCUVUwc1JVRkJSU3hGUVVGRkxFVkJRVGhDT3pzN08wVkJRM1JFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWxCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVWQlFVVTdTVUZETjBJc1QwRkJUeXhGUVVGRk8wZEJRMVk3UlVGRFJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVVFc1NVRkJTU3hGUVVGRE8wbEJRMmhDTEVsQlFVa3NUMEZCVHl4SlFVRkpMRXRCUVVzc1VVRkJVU3hGUVVGRk8wMUJRelZDTEUxQlFVMDdTMEZEVUR0SlFVTkVMRXRCUVV0cFJDeEpRVUZOTEVkQlFVY3NTVUZCU1N4SlFVRkpMRVZCUVVVN1RVRkRkRUlzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdExRVU53UWp0SFFVTkdMRU5CUVVNc1EwRkJRVHRGUVVOR0xFOUJRVThzUlVGQlJUdERRVU5XT3pzN096czdRVUZOUkN4QlFVRlBMRk5CUVZNc1dVRkJXU3hGUVVGRkxFVkJRVVVzUlVGQk9FSTdPenM3UlVGRE5VUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEpRVUZKTEVOQlFVTXNSVUZCUlR0SlFVTTNRaXhQUVVGUExFVkJRVVU3UjBGRFZqdEZRVU5FTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hKUVVGSkxFVkJRVU03U1VGRGFFSXNTVUZCU1N4UFFVRlBMRWxCUVVrc1MwRkJTeXhSUVVGUkxFVkJRVVU3VFVGRE5VSXNUVUZCVFR0TFFVTlFPMGxCUTBSRkxFbEJRVWtzUTBGQlF5eERRVUZCTzBsQlEwd3NTMEZCUzBZc1NVRkJUU3hIUVVGSExFbEJRVWtzU1VGQlNTeEZRVUZGTzAxQlEzUkNMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzVjBGQlZ5eEZRVUZGTzFGQlEycEZMRVZCUVVVc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdUMEZEV2p0TFFVTkdPMGRCUTBZc1EwRkJReXhEUVVGQk8wVkJRMFlzVDBGQlR5eEZRVUZGTzBOQlExWTdPenM3UVVGSlJDeEJRVUZQTEZOQlFWTXNWVUZCVlN4RlFVRkZMRVZCUVVVc1JVRkJUU3hKUVVGaExFVkJRVVVzU1VGQlNTeEZRVUZ4UWpzMlFrRkJjRU1zUjBGQlR5eEZRVUZGT3p0RlFVTXZReXhEUVVGRExFbEJRVWtzU1VGQlNTeEZRVUZGTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hIUVVGSExFVkJRVU03U1VGRGRrSXNTVUZCU1N4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGQk8wZEJRemxDTEVOQlFVTXNRMEZCUVR0RlFVTkdMRTlCUVU4c1JVRkJSVHREUVVOV096czdPMEZCU1VRc1FVRkJUeXhUUVVGVExGZEJRVmNzUlVGQlJTeEZRVUZGTEVWQlFVMHNTVUZCWVN4RlFVRkZMRWxCUVVrc1JVRkJhVUk3TmtKQlFXaERMRWRCUVU4c1JVRkJSVHM3UlVGRGFFUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRKUVVOVUxFOUJRVThzUlVGQlJUdEhRVU5XTzBWQlEwUXNRMEZCUXl4SlFVRkpMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNSMEZCUnl4RlFVRkRPMGxCUTNaQ0xFbEJRVWtzU1VGQlNTeERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTTNRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGQk8wZEJRek5DTEVOQlFVTXNRMEZCUVR0RlFVTkdMRTlCUVU4c1JVRkJSVHREUVVOV096czdPenM3T3p0QlFWRkVMRUZCUVU4c1UwRkJVeXhKUVVGSkxFVkJRVVVzUlVGQlJTeEZRVUZaTEVkQlFVY3NSVUZCVXp0RlFVTTVReXhQUVVGUExGVkJRVlVzUTBGQlF5eEZRVUZUTzBsQlEzcENRU3hKUVVGTkxFTkJRVU1zUjBGQlJ5eFRRVUZUTEVOQlFVTXNUVUZCVFN4RFFVRkJPMGxCUXpGQ0xFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVWQlFVVXNVMEZCVXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTTdSMEZETjBVN1EwRkRSanM3T3p0QlFVbEVMRUZCUVU4c1UwRkJVeXhSUVVGUkxFVkJRVVVzU1VGQlNTeEZRVUZaTEVsQlFVa3NSVUZCVlR0RlFVTjBSRVVzU1VGQlNTeFBRVUZQTEVOQlFVRTdSVUZEV0N4VFFVRlRMRXRCUVVzc1NVRkJTVHRKUVVOb1FpeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkJPMGxCUTJRc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0SFFVTnFRanRGUVVORUxFOUJRVThzV1VGQldUdEpRVU5xUWl4WlFVRlpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3U1VGRGNrSXNUMEZCVHl4SFFVRkhMRlZCUVZVc1EwRkJReXhMUVVGTExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdSMEZEYkVNN1EwRkRSanM3T3p0QlFVbEVMRUZCUVU4c1UwRkJVeXhQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZaTEVsQlFVa3NSVUZCVlR0RlFVTnlSRUVzU1VGQlNTeFBRVUZQTEVOQlFVRTdPMFZCUlZnc1UwRkJVeXhMUVVGTExFbEJRVWs3U1VGRGFFSXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJRVHRIUVVObU8wVkJRMFFzVDBGQlR5eFpRVUZaTzBsQlEycENMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3VFVGRFdpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVFN1MwRkRZanRKUVVORUxGbEJRVmtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0SlFVTnlRaXhQUVVGUExFZEJRVWNzVlVGQlZTeERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRVHRIUVVOc1F6dERRVU5HT3pzN08wRkJTVVFzUVVGQlR5eFRRVUZUTEZGQlFWRXNSVUZCUlN4SlFVRkpMRVZCUVZrc1NVRkJTU3hGUVVGVkxGbEJRVmtzUlVGQlZ6dEZRVU0zUlVFc1NVRkJTU3hKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZCTzBWQlExcEJMRWxCUVVrc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlFUdEZRVU53UWtZc1NVRkJUU3huUWtGQlowSXNSMEZCUnl4SlFVRkpMRWRCUVVjc1EwRkJReXhKUVVGSkxFZEJRVWNzUlVGQlJTeEhRVUZITEVsQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRVHRGUVVOMlJDeFBRVUZQTEZsQlFXbERPenM3TzBsQlEzUkRRU3hKUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVRTdTVUZEY0VKQkxFbEJRVTBzU1VGQlNTeEhRVUZITEVsQlFVa3NTVUZCU1N4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxFTkJRVUU3U1VGRGFrTXNTVUZCU1N4SlFVRkpMRWRCUVVjc1NVRkJTU3hIUVVGSExFbEJRVWtzUlVGQlJUdE5RVU4wUWl4SlFVRkpMRmxCUVZrc1JVRkJSVHRSUVVOb1FpeFRRVUZUTEVsQlFVa3NXVUZCV1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk8xRkJRM0JETEZOQlFWTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1dVRkJXVHRWUVVOcVF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkJPMVZCUTJoQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGQk8xTkJRekZDTEVWQlFVVXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlFUdFBRVU55UWp0TlFVTkVMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEZRVUZGTEVsQlFVa3NRMEZCUXl4RFFVRkJPMDFCUTNwQ0xFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVRTdTMEZEV2p0SFFVTkdPME5CUTBZN096dEJRVWRFTEVGQlFVOHNVMEZCVXl4VFFVRlRMRVZCUVVVc1IwRkJSeXhGUVVGUExFZEJRVWNzUlVGQlZTeFRRVUZUTEVWQlFWVTdSVUZEYmtVc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlR0SlFVTnFRaXhOUVVGTk8wZEJRMUE3UlVGRFJFVXNTVUZCU1N4TlFVRk5MRWRCUVVjc1EwRkJReXhUUVVGVExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZMRXRCUVVzc1IwRkJSeXhEUVVGQk8wVkJRMjVFUml4SlFVRk5MRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZCTzBWQlEzUkNMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZCTzBWQlEyWXNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJReXhGUVVGRk8wbEJRMWdzUjBGQlJ5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkJPMGxCUTFZc1RVRkJUU3hIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZCTzBkQlEycENPMFZCUTBRc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlF5eEZRVUZGTzBsQlEySXNUMEZCVHl4SFFVRkhPMGRCUTFnN1JVRkRSRVVzU1VGQlNTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RFFVRkJPMFZCUTFZc1NVRkJTU3hOUVVGTkxFVkJRVVU3U1VGRFZpeEZRVUZGTEVkQlFVY3NSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZEZEVJc1JVRkJSU3hIUVVGSExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1IwRkRjRUk3VDBGRFNUdEpRVU5JTEVWQlFVVXNSMEZCUnl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUlVGQlJTeEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVFN1NVRkROVUlzUlVGQlJTeEhRVUZITEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZCTzBkQlF6RkNPMFZCUTBRc1QwRkJUeXhGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXp0RFFVTnlRanM3T3p0QlFVbEVMRUZCUVU4c1UwRkJVeXhOUVVGTkxFVkJRVVVzUlVGQlJTeEZRVUZQTzBWQlF5OUNSaXhKUVVGTkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wVkJRMnBETEU5QlFVOHNVMEZCVXl4UlFVRlJMRVZCUVVVc1IwRkJSeXhGUVVGVk8wbEJRM0pEUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZEZEVJc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBkQlEzSkRPME5CUTBZN096czdRVUZKUkVFc1NVRkJUU3hWUVVGVkxFZEJRVWNzVVVGQlVTeERRVUZCTzBGQlF6TkNMRUZCUVU5QkxFbEJRVTBzVVVGQlVTeEhRVUZITEUxQlFVMHNRMEZCUXl4VlFVRkJMRWRCUVVjc1JVRkJRenRGUVVOcVF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hGUVVGRkxGVkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4VFFVRkhMRU5CUVVNc1EwRkJReXhYUVVGWExFVkJRVVVzUjBGQlFTeERRVUZETzBOQlF6RkVMRU5CUVVNc1EwRkJRVHRCUVVOR0xFRkJRVThzVTBGQlV5eFpRVUZaTEVWQlFVVXNSMEZCUnl4RlFVRlBPMFZCUTNSRFFTeEpRVUZOTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVFN1JVRkRaQ3hMUVVGTFFTeEpRVUZOTEVkQlFVY3NTVUZCU1N4SFFVRkhMRVZCUVVVN1NVRkRja0lzUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhIUVVGSExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0SFFVTTVRanRGUVVORUxFOUJRVThzUjBGQlJ6dERRVU5ZT3pzN08wRkJTVVFzUVVGQlQwRXNTVUZCVFN4VlFVRlZMRWRCUVVjc1RVRkJUU3hEUVVGRExGVkJRVUVzUjBGQlJ5eEZRVUZETzBWQlEyNURMRTlCUVU4c1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1IwRkJSeXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTnNSQ3hEUVVGRExFTkJRVUU3T3pzN1FVRkpSa0VzU1VGQlRTeFhRVUZYTEVkQlFVY3NaMEpCUVdkQ0xFTkJRVUU3UVVGRGNFTXNRVUZCVDBFc1NVRkJUU3hUUVVGVExFZEJRVWNzVFVGQlRTeERRVUZETEZWQlFVRXNSMEZCUnl4RlFVRkRPMFZCUTJ4RExFOUJRVThzUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJReXhYUVVGWExFVkJRVVU3UTBGRGNrWXNRMEZCUXl4RFFVRkJPMEZCUTBZc1FVRkJUeXhUUVVGVExHRkJRV0VzUlVGQlJTeEhRVUZITEVWQlFVODdSVUZEZGtOQkxFbEJRVTBzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUVR0RlFVTmtMRXRCUVV0QkxFbEJRVTBzUjBGQlJ5eEpRVUZKTEVkQlFVY3NSVUZCUlR0SlFVTnlRaXhIUVVGSExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzBkQlF5OUNPMFZCUTBRc1QwRkJUeXhIUVVGSE8wTkJRMWc3UVVGRFJFRXNTVUZCVFN4VlFVRlZMRWRCUVVjc2NVSkJRWEZDTEVOQlFVRTdRVUZEZUVNc1FVRkJUeXhUUVVGVExHdENRVUZyUWl4RlFVRkZMRWRCUVVjc1JVRkJUenRGUVVNMVEwRXNTVUZCVFN4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGQk8wVkJRMlFzUzBGQlMwRXNTVUZCVFN4SFFVRkhMRWxCUVVrc1IwRkJSeXhGUVVGRk8wbEJRM0pDUVN4SlFVRk5MRVZCUVVVc1IwRkJSeXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1JVRkJSU3hWUVVGVkxFVkJRVVVzUlVGQlJUdE5RVU14UkN4UFFVRlBMRWRCUVVjc1IwRkJSeXhGUVVGRk8wdEJRMmhDTEVOQlFVTXNRMEZCUVR0SlFVTkdMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1IwRkRia0k3UlVGRFJDeFBRVUZQTEVkQlFVYzdRMEZEV0R0QlFVTkVMRUZCUVU4c1UwRkJVeXhaUVVGWkxFVkJRVVVzU1VGQlNTeEZRVUZWTzBWQlF6RkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFVkJRVVU3U1VGRFZDeFBRVUZQTEVWQlFVVTdSMEZEVmp0RlFVTkVMRTlCUVU4c1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVWQlFVVXNWVUZCVlN4RFFVRkRMRVZCUVVVc1JVRkJSU3hGUVVGRk8wbEJReTlETEU5QlFVOHNRMEZCUVN4SFFVRkZMRWxCUVVVc1JVRkJSU3hEUVVGRExGZEJRVmNzUlVGQlJTeERRVUZCTEVOQlFVVTdSMEZET1VJc1EwRkJRenREUVVOSU8wRkJRMFFzUVVGQlR5eFRRVUZUTEZOQlFWTXNSVUZCUlN4SFFVRkhMRVZCUVZVc1MwRkJTeXhGUVVGVkxFOUJRVThzUlVGQlZ6dEZRVU4yUlVVc1NVRkJTU3hMUVVGTExFZEJRVkVzVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRGUVVNdlF5eEpRVUZKTEV0QlFVc3NTVUZCU1N4UFFVRlBMRVZCUVVVN1NVRkRjRUlzUzBGQlN5eERRVUZETEZWQlFWVXNRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3U1VGRGJrTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJRVHRIUVVOaU8wVkJRMFFzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0SlFVTldMRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkJPMGxCUTNaRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVkQlFVY3NWVUZCVlN4RFFVRkJPMGxCUTNaQ0xFdEJRVXNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVUU3U1VGRE0wSXNVVUZCVVN4RFFVRkRMRzlDUVVGdlFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0SFFVTTFSRHRGUVVORUxFdEJRVXNzUTBGQlF5eFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZCTzBOQlEyaEVPMEZCUTBRc1FVRkJUeXhUUVVGVExGTkJRVk1zUlVGQlJTeFJRVUZSTEVWQlFVODdSVUZEZUVOR0xFbEJRVTBzVFVGQlRTeEhRVUZITEUxQlFVMHNRMEZCUXl4eFFrRkJjVUk3VDBGRGRFTXNUVUZCVFN4RFFVRkRMREpDUVVFeVFqdFBRVU5zUXl4TlFVRk5MRU5CUVVNc2QwSkJRWGRDTzA5QlF5OUNMRU5CUVVNc1ZVRkJRU3hGUVVGRkxFVkJRVU1zVTBGQlJ5eFZRVUZWTEVOQlFVTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1EwRkJReXhIUVVGQkxFTkJRVU1zUTBGQlFUdEZRVU12UWl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVUU3UTBGRGFrSTdRVUZEUkN4QlFVRlBMRk5CUVZNc1UwRkJVeXhGUVVGRkxFMUJRVTBzUlVGQlR6dEZRVU4wUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wbEJRMWdzVFVGQlRUdEhRVU5RTzBWQlEwUkJMRWxCUVUwc1IwRkJSeXhIUVVGSExHdENRVUZyUWl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8wVkJRM1JEUlN4SlFVRkpMRTlCUVU4c1IwRkJSeXhGUVVGRkxFTkJRVUU3UlVGRGFFSXNTMEZCUzBZc1NVRkJUU3hIUVVGSExFbEJRVWtzUjBGQlJ5eEZRVUZGTzBsQlEzSkNMRTlCUVU4c1NVRkJTU3hIUVVGTkxFMUJRVVVzU1VGQlJTeEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFc1RVRkJSU3hEUVVGQk8wZEJRMmhETzBWQlEwUXNUMEZCVHl4UFFVRlBPME5CUTJZN08wRkRhRkpFT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFXOUNRVHM3T3pzN096czdRVUZWUVVVc1NVRkJTU3hSUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZCTzBGQlEzQkNSaXhKUVVGTkxITkNRVUZ6UWl4SFFVRkhMRWRCUVVjc1EwRkJRVHM3T3pzN1FVRkxiRU5CTEVsQlFVMHNaMEpCUVdkQ0xFZEJRVWNzVVVGQlVTeERRVUZETEVkQlFUQkNMRU5CUVVNc1EwRkJRVHRCUVVNM1JFVXNTVUZCU1N4TFFVRkxMRWRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1NVRkJTU3huUWtGQlowSXNSMEZCUnl4RFFVRkRPMGxCUTJoRkxHZENRVUZuUWp0SlFVTm9RaXh6UWtGQmMwSXNRMEZCUVRzN1FVRkZNVUpCTEVsQlFVa3NZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zTkVKQlFUUkNMRU5CUVVNc1EwRkJRVHRCUVVONlJVWXNTVUZCVFN4VFFVRlRMRWRCUVVjc1kwRkJZeXhKUVVGSkxGRkJRVkVzUTBGQlF5eGpRVUZqTEVOQlFVTXNXVUZCV1N4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGRExFTkJRVUU3UVVGRGNFWXNTVUZCU1N4VFFVRlRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEVsQlFVa3NVMEZCVXl4SFFVRkhMRU5CUVVNc1JVRkJSVHRGUVVOdVJDeExRVUZMTEVkQlFVY3NVMEZCVXl4RFFVRkJPME5CUTJ4Q096dEJRVVZFUlN4SlFVRkpMRWRCUVVjc1IwRkJWeXhEUVVGRExFTkJRVUU3UVVGRGJrSkJMRWxCUVVrc1YwRkJWeXhIUVVGWExFTkJRVU1zUTBGQlFUdEJRVU16UWtFc1NVRkJTU3haUVVGWkxFZEJRVmNzUTBGQlF5eERRVUZCT3p0QlFVVTFRa1lzU1VGQlRTeEpRVUZKTEVkQlRVNDdSVUZEUml4TFFVRkJMRWRCUVVjN1JVRkRTQ3hMUVVGTExFVkJRVVVzUTBGQlF6dEZRVU5TTEVkQlFVY3NSVUZCUlN4RFFVRkRPMFZCUTA0c1YwRkJWeXhGUVVGRkxFTkJRVU03UlVGRFpDeFpRVUZaTEVWQlFVVXNRMEZCUXp0RFFVTm9RaXhEUVVGQk96czdPenRCUVV0RUxGTkJRVk1zVjBGQlZ5eEZRVUZGTEV0QlFVc3NSVUZCWjBJN1JVRkRla05CTEVsQlFVMHNSMEZCUnl4SFFVRkhMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVUU3UlVGRE0wSkJMRWxCUVUwc1IwRkJSeXhIUVVGSExFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVRTdSVUZEZEVJc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eGxRVUZsTEVWQlFVVXNSVUZCUlN4TlFVRk5MRVZCUVVVN1JVRkRjRU5CTEVsQlFVMHNXVUZCV1N4SFFVRkhMRWRCUVVjc1EwRkJReXhsUVVGbExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUVR0RlFVTjJSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTzBsQlEycENMRWRCUVVjc1EwRkJReXhsUVVGbExFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNSMEZCUnl4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGQk8wbEJReTlETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGQk8wZEJRMlk3UTBGRFJqczdRVUZGUkN4VFFVRlRMR1ZCUVdVc1JVRkJSU3hMUVVGTExFVkJRV2RDTzBWQlF6ZERMRWxCUVVrc1EwRkJReXhqUVVGakxFVkJRVVU3U1VGRGJrSXNZMEZCWXl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRTdTVUZETDBNc1kwRkJZeXhEUVVGRExGbEJRVmtzUTBGQlF5eE5RVUZOTEVWQlFVVXNaVUZCWlN4RFFVRkRMRU5CUVVFN1IwRkRja1E3VDBGRFNUdEpRVU5JUVN4SlFVRk5MRk5CUVZNc1IwRkJSeXhSUVVGUkxFTkJRVU1zWTBGQll5eERRVUZETEZsQlFWa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGQk8wbEJRMnhGTEVsQlFVa3NVMEZCVXl4TFFVRkxMRXRCUVVzc1JVRkJSVHROUVVOMlFpeE5RVUZOTzB0QlExQTdSMEZEUmp0RlFVTkVMR05CUVdNc1EwRkJReXhaUVVGWkxFTkJRVU1zVTBGQlV5eEZRVUZGTEV0QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJRVHREUVVOdVJEczdPenM3UVVGTFJDeEJRVUZQTEZOQlFWTkxMRTFCUVVrc1JVRkJSU3hoUVVFMlFpeEZRVTFxUkRzclEwRk9hVU1zUjBGQlZ5eExRVUZMT3p0RlFVOXFSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTzBsQlEySXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRVHM3U1VGRlprd3NTVUZCVFN4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlFUdEpRVU16UWl4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRk8wMUJRMUlzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl3eVEwRkJNa01zUTBGQlF5eERRVUZCTzAxQlF6RkVMRTFCUVUwN1MwRkRVRHRKUVVORUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNaVUZCWlN4RlFVRkZPMDFCUTNoQ0xFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNiMFJCUVc5RUxFTkJRVU1zUTBGQlFUdE5RVU51UlN4TlFVRk5PMHRCUTFBN08wbEJSVVFzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkJPMGxCUTNoRExGZEJRVmNzUjBGQlJ5eEhRVUZITEVOQlFVTXNaVUZCWlN4RFFVRkRMRmRCUVZjc1EwRkJRVHRKUVVNM1F5eFpRVUZaTEVkQlFVY3NSMEZCUnl4RFFVRkRMR1ZCUVdVc1EwRkJReXhaUVVGWkxFTkJRVUU3TzBsQlJTOURRU3hKUVVGTkxHbENRVUZwUWl4SFFVRkhMRmxCUVZrN1RVRkRjRU1zV1VGQldTeEhRVUZITEVkQlFVY3NRMEZCUXl4bFFVRmxMRU5CUVVNc1dVRkJXU3hEUVVGQk8wMUJReTlEUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeEpRVUZKTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlFUdE5RVU5xUkN4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFZEJRVWNzUTBGQlF5eFpRVUZaTEVkQlFVY3NXVUZCV1N4SFFVRkhMRWRCUVVjc1EwRkJRVHRMUVVNeFJDeERRVUZCT3pzN1NVRkhSQ3hYUVVGWExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdTVUZEZUVJc1pVRkJaU3hEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZCT3p0SlFVVTVRaXhOUVVGTkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRkxHbENRVUZwUWl4RFFVRkRMRU5CUVVFN096czdPenM3TzBsQlVYQkVRU3hKUVVGTkxFdEJRVXNzUjBGQlJ5eFhRVUZYTEVkQlFVY3NZVUZCWVN4RFFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1NVRjNRbnBETEUxQlFVMHNRMEZCUXl4SlFVRkpMRVZCUVVVN1RVRkRXQ3hQUVVGQkxFdEJRVXM3VFVGRFRDeFhRVUZYTEVWQlFVVXNWMEZCVnl4SFFVRkhMRWRCUVVjN1RVRkRPVUlzV1VGQldTeEZRVUZGTEZsQlFWa3NSMEZCUnl4SFFVRkhPMHRCUTJwRExFTkJRVU1zUTBGQlFUdEhRVU5JT3p0RlFVVkVMRTlCUVU4c1NVRkJTVHREUVVOYU96czdPenM3UVVGTlJDeEJRVUZQTEVGQlMwNDdPMEZCUlVRc1FVRkJUeXhUUVVGVExHVkJRV1VzU1VGTk4wSTdSVUZEUVN4UFFVRlBMRWxCUVVrN1EwRkRXanM3UVVNdlRFUTdPenM3T3pzN096czdPenM3T3pzN096czdRVUZ0UWtFc1UwRkJVMDBzVVVGQlRTeEZRVUZGTEVWQlFVVXNSVUZCVnpzN096dEZRVU0xUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVc1QwRkJUeXhGUVVGRkxFVkJRVVU3UlVGRE5VTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFbEJRVWtzUlVGQlF6dEpRVU5vUWl4SlFVRkpMRTlCUVU4c1NVRkJTU3hMUVVGTExGRkJRVkVzUlVGQlJTeEZRVUZGTEUxQlFVMHNSVUZCUlR0SlFVTjRReXhMUVVGTFRpeEpRVUZOTEVkQlFVY3NTVUZCU1N4SlFVRkpMRVZCUVVVN1RVRkRkRUlzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdExRVU53UWp0SFFVTkdMRU5CUVVNc1EwRkJRVHRGUVVOR0xFOUJRVThzUlVGQlJUdERRVU5XT3pzN1FVRkhSRVVzU1VGQlNTeG5Ra0ZCWjBJc1IwRkJSeXhMUVVGTExFTkJRVUU3UVVGRE5VSXNTVUZCU1R0RlFVTkdMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVFVGQlRTeEZRVUZGTEZWQlFVRXNRMEZCUXl4RlFVRkRMRVZCUVVzc1JVRkJSVHRKUVVNNVJDeEpRVUZKTEU5QlFVOHNRMEZCUXl4SFFVRkhPMDFCUTJJc1owSkJRV2RDTEVkQlFVY3NTVUZCU1N4RFFVRkJPMHRCUTNoQ08wZEJRMFlzUTBGQlF5eERRVUZCTzBOQlEwZzdRVUZEUkN4UFFVRlBMRU5CUVVNc1JVRkJSVHM3UTBGRlZEdEJRVU5FTEVGQlFVOHNVMEZCVXl4bFFVRmxMRWxCUVVrN1JVRkRha01zVDBGQlR5eG5Ra0ZCWjBJN1EwRkRlRUk3T3pzN096czdRVUZQUkN4QlFVRlBMRk5CUVZNc1YwRkJWeXhGUVVGRkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZPMFZCUTJoRVJpeEpRVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeFBRVUZQTEVWQlFVVXNTMEZCU3l4RlFVRkZMRU5CUVVNc1EwRkJRVHM3UlVGRmFrUk5MRkZCUVUwc1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVRTdPMFZCUlhCQ0xFbEJRVWtzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhGUVVGRk8wbEJRM2hGTEU5QlFVOHNTMEZCU3p0SFFVTmlPMFZCUTBRc1NVRkJTVHRKUVVOR0xFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNTMEZCU3l4RlFVRkZMRkZCUVZFc1JVRkJSVHROUVVOeVF5eFZRVUZWTEVWQlFVVXNTVUZCU1R0TlFVTm9RaXhMUVVGTExFVkJRVVVzVFVGQlRUdExRVU5rTEVOQlFVTXNRMEZCUVR0SFFVTklPMFZCUTBRc1QwRkJUeXhIUVVGSExFVkJRVVU3U1VGRFZpeFBRVUZQUVN4UlFVRk5MRU5CUVVNc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJTeEZRVUZGTEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1EwRkJRenRIUVVNM1F6dEZRVU5FTEU5QlFVOHNTMEZCU3p0RFFVTmlPenM3T3pzN08wRkJUMFFzUVVGQlR5eFRRVUZUTEd0Q1FVRnJRaXhGUVVGRkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZPMFZCUTNaRVRpeEpRVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUlVGQlJTeFBRVUZQTEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1EwRkJRVHRGUVVOb1JFMHNVVUZCVFN4RFFVRkRMRXRCUVVzc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUczdSVUZGY0VJc1NVRkJTU3hOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEZOQlFWTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRVZCUVVVN1NVRkRlRVVzVDBGQlR5eExRVUZMTzBkQlEySTdSVUZEUkN4SlFVRkpPMGxCUTBZc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RlFVRkZPMDFCUTNKRExGVkJRVlVzUlVGQlJTeEpRVUZKTzAxQlEyaENMRXRCUVVzc1JVRkJSU3hOUVVGTk8wdEJRMlFzUTBGQlF5eERRVUZCTzBkQlEwZzdSVUZEUkN4UFFVRlBMRWRCUVVjc1JVRkJSVHRKUVVOV0xFOUJRVTlCTEZGQlFVMHNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNSVUZCUlN4RFFVRkRPMGRCUXpkRE8wVkJRMFFzVDBGQlR5eExRVUZMTzBOQlEySTdPenM3T3pzN1FVRlBSQ3hCUVVGUExGTkJRVk1zYVVKQlFXbENMRVZCUVVVc1RVRkJUU3hGUVVGRkxFbEJRVWtzUlVGQlJTeExRVUZMTEVWQlFVVTdPenRGUVVkMFJFNHNTVUZCVFN4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eGhRVUZoTEVOQlFVTXNRMEZCUVR0RlFVTnFSQ3hMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NSVUZCUlN4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZCT3pzN08wVkJTVFZEVFN4UlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZCT3pzN1JVRkhjRUlzU1VGQlNUdEpRVU5HTEUxQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJUdE5RVU55UXl4VlFVRlZMRVZCUVVVc1NVRkJTVHROUVVOb1FpeExRVUZMTEVWQlFVVXNUVUZCVFN4SlFVRkpMRWxCUVVrN1MwRkRkRUlzUTBGQlF5eERRVUZCTzBkQlEwZzdSVUZEUkN4UFFVRlBMRWRCUVVjc1JVRkJSVHRKUVVOV0xFOUJRVTlCTEZGQlFVMHNRMEZCUXl4RlFVRkZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFVkJRVVVzVFVGQlRTeEZRVUZGTEUxQlFVMHNTVUZCU1N4SlFVRkpMRVZCUVVVc1EwRkJRenRIUVVOeVJEczdSVUZGUkN4UFFVRlBMRXRCUVVzN1EwRkRZanM3T3pzN096dEJRVTlFTEVGQlFVOHNVMEZCVXl4aFFVRmhMRVZCUVVVc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlJUdEZRVU42UXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBOQlEzcENPenRCUVVWRUxFRkJRVThzVTBGQlV5eGhRVUZoTEVWQlFVVXNUMEZCVHl4RlFVRkZPMFZCUTNSRFRpeEpRVUZOTEZGQlFWRXNSMEZCUnl4RlFVRkZMRU5CUTJ4Q0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZGQlFWRXNSVUZCUlN4UFFVRlBMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTVUZCU1N4RlFVRkRPMGxCUTJwRUxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4VlFVRkJMRXRCUVVzc1JVRkJRenROUVVOeVFpeEpRVUZKTEU5QlFVOHNRMEZCUXl4SFFVRkhMRVZCUVVVN1VVRkRaaXhMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGQk8wOUJRMmhETzAxQlEwUXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVRTdTMEZETTBJc1EwRkJRVHRIUVVOR0xFTkJRVU1zUTBGQlFUdEZRVU5HTEU5QlFVOHNVVUZCVVR0RFFVTm9RaXhCUVVWRUxFRkJSVU03TzBGRGNFcEVPenM3T3pzN096czdPenM3T3pzN096czdRVUZyUWtFc1lVRkJaVHRGUVVOaUxHVkJRV1VzUlVGQlJTeERRVUZETEZWQlFWVXNSVUZCUlN4TlFVRk5MRVZCUVVVc1YwRkJWeXhEUVVGRE8wVkJRMnhFTEdGQlFXRXNSVUZCUlR0SlFVTmlMRlZCUVZVN1NVRkRWaXhUUVVGVE8wbEJRMVFzVVVGQlVUdEpRVU5TTEU5QlFVODdTVUZEVUN4WFFVRlhPMGxCUTFnc1MwRkJTenRIUVVOT08wTkJRMFlzUTBGQlFUczdRVU0xUWtRN096czdPenM3T3pzN096czdPenM3T3p0QlFXdENRU3hCUVVOQkxFRkJRMEVzUVVGRlFTeEJRVUZQTEZOQlFWTXNhVUpCUVdsQ0xFVkJRVVVzUlVGQlJTeEZRVUZGTzBWQlEzSkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlFTeFBRVUZQTEVsQlFVa3NSVUZCUVR0RlFVTndRaXhKUVVGSkxFVkJRVVVzUTBGQlF5eGxRVUZsTEVWQlFVVTdTVUZEZEVJc1QwRkJUeXhGUVVGRkxFTkJRVU1zWlVGQlpUdEhRVU14UWp0RlFVTkVMRk5CUVZNc2EwSkJRV3RDTEVWQlFVVXNUVUZCVFN4RlFVRkZPMGxCUTI1RExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNSVUZCUlN4TlFVRk5MRVZCUVVVN1NVRkRka0lzU1VGQlNTeE5RVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVN1RVRkRlRVFzUlVGQlJTeERRVUZETEdWQlFXVXNSMEZCUnl4TlFVRk5MRU5CUVVFN1RVRkRNMElzVDBGQlR5eE5RVUZOTzB0QlEyUTdTVUZEUkN4UFFVRlBMR3RDUVVGclFpeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNN1IwRkRNVU03UlVGRFJDeFBRVUZQTEd0Q1FVRnJRaXhEUVVGRExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTTdRMEZEZEVNN08wRkJSVVFzVTBGQlV5eHBRa0ZCYVVJc1JVRkJSU3hKUVVGSkxFVkJRVVVzVFVGQlRTeEZRVUZGTzBWQlEzaERMRTlCUVU4c1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTMEZCU3l4SlFVRkpMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzVFVGQlRTeERRVUZETEVsQlFVazdRMEZETlVRN08wRkJSVVFzVTBGQlV5eGxRVUZsTEVWQlFVVXNTVUZCU1N4RlFVRkZMRTFCUVUwc1JVRkJSVHRGUVVOMFF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRTFCUVUwc1EwRkJReXhIUVVGSE8wTkJRelZFT3pzN096czdPMEZCVDBRc1FVRkJUeXhUUVVGVExHVkJRV1VzUlVGQlJTeEpRVUZKTEVWQlFVVXNUVUZCVFN4RlFVRkZMRWRCUVVjc1JVRkJSU3hOUVVGTkxFVkJRVVU3UlVGRE1VUXNSMEZCUnl4SFFVRkhMRWRCUVVjc1NVRkJTU3hKUVVGSkxFTkJRVUU3UlVGRGFrSkJMRWxCUVUwc1dVRkJXU3hIUVVGSExFZEJRVWNzUzBGQlN5eE5RVUZOTEVsQlFVa3NSMEZCUnl4TFFVRkxMRTlCUVU4c1EwRkJRVHRGUVVOMFJFRXNTVUZCVFN4VlFVRlZMRWRCUVVjc1IwRkJSeXhMUVVGTExFbEJRVWtzU1VGQlNTeEhRVUZITEV0QlFVc3NUVUZCVFN4RFFVRkJPMFZCUTJwRUxFbEJRVWtzV1VGQldTeEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFTkJRVU1zUlVGQlJUdEpRVU5zUkN4UFFVRlBMRU5CUVVNc1MwRkJTeXhGUVVGRkxFdEJRVXNzUTBGQlF6dEhRVU4wUWp0RlFVTkVMRWxCUVVrc1ZVRkJWU3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eEZRVUZGTzBsQlEyeEVMRTlCUVU4c1EwRkJReXhMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETzBkQlEzUkNPMFZCUTBRc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkJPMFZCUTNSRUxGRkJRVkVzUjBGQlJ6dEpRVU5VTEV0QlFVc3NTVUZCU1R0TlFVTlFMRTlCUVU4N1VVRkRUQ3hKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRWxCUVVrc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNSMEZCUnp0UlFVTndSQ3hKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVVjc1IwRkJSeXhOUVVGTk8wOUJRM1pGTzBsQlEwZ3NTMEZCU3l4TlFVRk5PMDFCUTFRc1QwRkJUenRSUVVOTUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5PMUZCUTNCRUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWRCUVVjc1IwRkJSeXhOUVVGTkxFbEJRVWtzU1VGQlNTeERRVUZETEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTA3VDBGRGRrVTdTVUZEU0N4TFFVRkxMRTFCUVUwN1RVRkRWQ3hQUVVGUE8xRkJRMHdzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQlF5eExRVUZMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrN1VVRkRjRVFzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTeXhIUVVGSExFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFZEJRVWNzVFVGQlRUdFBRVU4yUlR0SlFVTklMRXRCUVVzc1QwRkJUenROUVVOV0xFOUJRVTg3VVVGRFRDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4TlFVRk5MRU5CUVVNc1MwRkJTenRSUVVOd1JDeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFZEJRVWNzVFVGQlRTeEpRVUZKTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFdEJRVXNzUjBGQlJ5eE5RVUZOTzA5QlEzWkZPMGRCUTBvN1EwRkRSanM3T3pzN096dEJRVTlFTEVGQlFVOHNVMEZCVXl4blFrRkJaMElzUlVGQlJTeEZRVUZGTEVWQlFVVXNVMEZCVXl4RlFVRkZMRWRCUVVjc1JVRkJSU3hOUVVGTkxFVkJRVVU3UlVGRE5VUXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4RlFVRkZMRTlCUVU4c1MwRkJTeXhGUVVGRk8wVkJReTlEUVN4SlFVRk5MRkZCUVZFc1IwRkJSenRKUVVObUxFZEJRVWNzUlVGQlJTeERRVUZETzBsQlEwNHNTVUZCU1N4RlFVRkZMRU5CUVVNN1NVRkRVQ3hOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETEZkQlFWYzdTVUZETVVJc1MwRkJTeXhGUVVGRkxFMUJRVTBzUTBGQlF5eFZRVUZWTzBkQlEzcENMRU5CUVVFN1JVRkRSRUVzU1VGQlRTeE5RVUZOTEVkQlFVY3NRMEZCUXl4VFFVRlRMRXRCUVVzc1RVRkJUU3hKUVVGSkxGTkJRVk1zUzBGQlN5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRPMDFCUTJoRkxGRkJRVkVzUjBGQlJ5eFRRVUZUTzAxQlEzQkNMRk5CUVZNc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4SFFVRkhMRkZCUVZFc1EwRkJRVHRGUVVOb1JDeFBRVUZQTEdWQlFXVXNRMEZCUXl4RlFVRkZMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNSVUZCUlN4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRkxFMUJRVTBzUTBGQlF6dERRVU40UlRzN08wRkJSMFFzVTBGQlV5eFpRVUZaTEVWQlFVVXNSMEZCUnl4RlFVRkZMRkZCUVZFc1JVRkJSU3hIUVVGSExFVkJRVVVzUjBGQlJ5eEZRVUZGTzBWQlF6bERSU3hKUVVGSkxGRkJRVkVzUjBGQlJ5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1JVRkROVUlzU1VGQlNTeFJRVUZSTEVsQlFVa3NVVUZCVVN4RFFVRkRMRVZCUVVVc1JVRkJSVHRKUVVNelFpeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMRVZCUVVVc1EwRkJRVHRIUVVOMlFqdEZRVU5FTEVsQlFVa3NVVUZCVVN4RlFVRkZPMGxCUTFvc1VVRkJVU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZPMDFCUXpkQ0xGTkJRVk1zUlVGQlJTeEhRVUZITzB0QlEyWXNRMEZCUXl4RFFVRkRMRU5CUVVFN1IwRkRTanREUVVOR096czdPenRCUVV0RUxFRkJRVThzVTBGQlV5eG5Ra0ZCWjBJc1JVRkJSU3hQUVVGUExFVkJRVVU3UlVGRGVrTkJMRWxCUVVrc1MwRkJTeXhIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTEVOQlFVRTdSVUZETVVKR0xFbEJRVTBzVVVGQlVTeEhRVUZITEVWQlFVVXNRMEZCUVR0RlFVTnVRa0VzU1VGQlRTeGpRVUZqTEVkQlFVY3NSVUZCUlN4RFFVRkJPMFZCUTNwQ0xFOUJRVThzUzBGQlN5eEZRVUZGTzBsQlExb3NZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdEpRVU14UWl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlFUdEhRVU55UWp0RlFVTkVMR05CUVdNc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeExRVUZMTEVWQlFVVTdTVUZEZEVOQkxFbEJRVTBzWlVGQlpTeEhRVUZITEV0QlFVc3NRMEZCUXl4blFrRkJaMElzU1VGQlNTeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVTBGQlV5eERRVUZCTzBsQlEyeEdRU3hKUVVGTkxFMUJRVTBzUjBGQlJ5eExRVUZMTEVOQlFVTXNTVUZCU1N4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZCTzBsQlF6RkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFVkJRVVVzWlVGQlpTeEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkJPMGRCUXpGRExFTkJRVU1zUTBGQlFUdEZRVU5HTEU5QlFVOHNVVUZCVVR0RFFVTm9RanM3UVVGRlJDeFRRVUZUTEdWQlFXVXNSVUZCUlN4RlFVRkZMRVZCUVVVN1JVRkROVUlzVDBGQlR5eEZRVUZGTEVsQlFVa3NSVUZCUlN4RFFVRkRMRmxCUVZrc1EwRkJReXhsUVVGbExFTkJRVU03UTBGRE9VTTdPMEZCUlVRc1UwRkJVeXhoUVVGaExFVkJRVVVzVVVGQlVTeEZRVUZGTzBWQlEyaERMRTlCUVU4N1NVRkRUQ3hEUVVGRExFTkJRVU1zUTBGQlF5eFJRVUZSTEVOQlFVTXNUVUZCVFN4SlFVRkpMRkZCUVZFc1EwRkJReXhUUVVGVExFTkJRVU03U1VGRGVrTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hEUVVGRExGbEJRVmtzU1VGQlNTeFJRVUZSTEVOQlFVTXNaVUZCWlN4RFFVRkRPMGRCUTNSRU8wTkJRMFk3T3pzN096dEJRVTFFTEVGQlFVOHNVMEZCVXl4WFFVRlhMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUlVGQlJUdEZRVU0zUTBFc1NVRkJUU3hGUVVGRkxFZEJRVWNzVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVFN1JVRkRha01zU1VGQlNTeERRVUZETEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1VVRkJVU3hMUVVGTExFTkJRVU1zUlVGQlJTeEZRVUZGTEUxQlFVMHNSVUZCUlR0RlFVTjRRMEVzU1VGQlRTeFpRVUZaTEVkQlFVY3NaVUZCWlN4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGQk96dEZRVVY0UTBFc1NVRkJUU3hSUVVGUkxFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3UlVGRE1VTkJMRWxCUVUwc1dVRkJXU3hIUVVGSExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVRzN1JVRkZOVU1zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0SlFVTjRReXhOUVVGTk8wZEJRMUE3TzBWQlJVUkZMRWxCUVVrc1VVRkJVU3hIUVVGSExFdEJRVXNzUTBGQlFUdEZRVU53UWtFc1NVRkJTU3hUUVVGVExFZEJRVWNzVFVGQlRTeERRVUZCTzBWQlEzUkNSaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eHBRa0ZCYVVJc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdEZRVU16UXl4SlFVRkpMRkZCUVZFc1NVRkJTU3hSUVVGUkxFTkJRVU1zUjBGQlJ5eEZRVUZGTzBsQlF6VkNMRk5CUVZNc1IwRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZCTzBkQlEzcENPMDlCUTBrN1NVRkRTQ3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZCTzBkQlEyaENPenRGUVVWRUxFbEJRVWtzVDBGQlR5eEZRVUZGTzBsQlExaEJMRWxCUVUwc1YwRkJWeXhIUVVGSExHZENRVUZuUWl4RFFVRkRMRVZCUVVVc1JVRkJSU3hUUVVGVExFVkJRVVVzU1VGQlNTeEZRVUZGTEZsQlFWa3NRMEZCUXl4RFFVRkJPMGxCUTNaRkxGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGQk8wZEJRM3BET3pzN1JVRkhSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEdkQ1FVRm5RaXhGUVVGRk8wbEJReTlDTEZOQlFWTXNRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEZRVUZGTEVOQlFVRTdSMEZEYUVNN1JVRkRSQ3hUUVVGVExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZCT3pzN096dEZRVXQ0UXl4SlFVRkpMRk5CUVZNc1EwRkJReXhqUVVGakxFVkJRVVU3U1VGRE5VSXNUVUZCVFR0SFFVTlFPMFZCUTBRc1UwRkJVeXhEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVRTdSVUZETDBKQkxFbEJRVTBzWVVGQllTeEhRVUZITEZGQlFWRXNRMEZCUXl4VlFVRkJMRXRCUVVzc1JVRkJRenM3T3pzN08wbEJUVzVEUVN4SlFVRk5MRk5CUVZNc1IwRkJSeXhSUVVGUkxFZEJRVWNzVFVGQlRTeERRVUZETEZkQlFWY3NSMEZCUnl4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGQk8wbEJRM0pGUVN4SlFVRk5MRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zWTBGQll5eERRVUZCTzBsQlEzWkRMRk5CUVZNc1EwRkJReXhqUVVGakxFZEJRVWNzVTBGQlV5eERRVUZCTzBsQlEzQkRRU3hKUVVGTkxFZEJRVWNzUjBGQlJ5eERRVUZETEZOQlFWTXNSMEZCUnl4TlFVRk5PMUZCUXpOQ0xFMUJRVTBzUjBGQlJ5eFRRVUZUTEVkQlFVY3NUVUZCVFR0UlFVTXpRaXhKUVVGSkxFZEJRVWNzVTBGQlV5eERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJRVHRKUVVNMVF5eFRRVUZUTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWRCUVVjc1EwRkJRVHRKUVVNNVFrRXNTVUZCVFN4bFFVRmxMRWRCUVVjc1UwRkJVeXhEUVVGRExHZENRVUZuUWl4SlFVRkpMRVZCUVVVc1EwRkJRVHRKUVVONFJFRXNTVUZCVFN4SFFVRkhMRWRCUVVjc1pVRkJaU3hEUVVGRExFMUJRVTBzUTBGQlFUdEpRVU5zUXl4TFFVRkxSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdE5RVU0xUWtZc1NVRkJUU3hGUVVGRkxFZEJRVWNzWlVGQlpTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMDFCUXpkQ1FTeEpRVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGQk8wMUJRMnBDUVN4SlFVRk5MRmxCUVZrc1IwRkJSeXhsUVVGbExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVRTdUVUZEZUVOQkxFbEJRVTBzVjBGQlZ5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRExFVkJRVVVzUlVGQlJTeFRRVUZUTEVWQlFVVXNSMEZCUnl4RlFVRkZMRmxCUVZrc1EwRkJReXhEUVVGQk8wMUJRM1JGTEZsQlFWa3NRMEZCUXl4RlFVRkZMRVZCUVVVc1YwRkJWeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZCTzB0QlEyNURPMGRCUTBZc1JVRkJSU3hGUVVGRkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdSVUZEV2l4VFFVRlRMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNVVUZCVVN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUczdPenM3UlVGTE1VUXNTVUZCU1N4UlFVRlJMRVZCUVVVN1NVRkRXaXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGRkJRVkVzUlVGQlJTeGhRVUZoTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVFN1IwRkRMMFE3UTBGRFJqczdPenM3UVVGTFJDeEJRVUZQTEZOQlFWTXNaMEpCUVdkQ0xFVkJRVVVzVDBGQlR5eEZRVUZGTzBWQlEzcERMRTlCUVU4c1dVRkJXU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenREUVVNM1F6czdPenM3T3pzN1FVRlJSQ3hCUVVGUExGTkJRVk1zV1VGQldTeEZRVUZGTEU5QlFVOHNSVUZCUlN4WFFVRlhMRVZCUVVVc1IwRkJWU3hGUVVGRkxGbEJRVmtzUlVGQlJUc3lRa0ZCZGtJc1IwRkJSeXhKUVVGSk96dEZRVU0xUkVFc1NVRkJUU3hGUVVGRkxFZEJRVWNzVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVFN1JVRkRha01zU1VGQlR5eFBRVUZQTzBWQlFVVXNTVUZCUVN4aFFVRmhMR3RDUVVGMlFqdEZRVU5PTEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVc1JVRkJSU3hOUVVGTkxFVkJRVVU3UlVGRGJrSkJMRWxCUVUwc1VVRkJVU3hIUVVGSExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk96czdPenM3T3pzN08wVkJWVEZETEVsQlFVa3NUMEZCVHl4RFFVRkRMR0ZCUVdFc1NVRkJTU3hQUVVGUExFVkJRVVU3U1VGRGNFTXNTVUZCU1N4UFFVRlBMRU5CUVVNc1VVRkJVU3hMUVVGTExFOUJRVThzUlVGQlJUdE5RVU5vUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExHRkJRV0VzUlVGQlJUdFJRVU14UWl4UFFVRlBMRU5CUVVNc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlFUdFBRVU0zUWp0TlFVTkVMRTlCUVU4c1EwRkJReXhSUVVGUkxFZEJRVWNzVDBGQlR5eERRVUZCTzAxQlF6RkNMRmxCUVZrc1EwRkJReXhGUVVGRkxFVkJRVVVzVVVGQlVTeEZRVUZGTEU5QlFVOHNSMEZCUnl4UlFVRlJMRWRCUVVjc1YwRkJWeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZCTzB0QlEyeEZPMGRCUTBZN1JVRkRSQ3hKUVVGSkxFOUJRVThzUTBGQlF5eHRRa0ZCYlVJc1NVRkJTU3hoUVVGaExFVkJRVVU3U1VGRGFFUXNTVUZCU1N4UFFVRlBMRU5CUVVNc1kwRkJZeXhMUVVGTExHRkJRV0VzUlVGQlJUdE5RVU0xUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExHMUNRVUZ0UWl4RlFVRkZPMUZCUTJoRExFOUJRVThzUTBGQlF5eHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxFTkJRVUU3VDBGRGJrTTdUVUZEUkN4UFFVRlBMRU5CUVVNc1kwRkJZeXhIUVVGSExHRkJRV0VzUTBGQlFUdE5RVU4wUXl4WlFVRlpMRU5CUVVNc1JVRkJSU3hGUVVGRkxGRkJRVkVzUlVGQlJTeGhRVUZoTEVkQlFVY3NZMEZCWXl4SFFVRkhMR2xDUVVGcFFpeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkJPMHRCUTNCR08wZEJRMFk3UTBGRFJqczdRVU01VVVRN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRWEZDUVN4QlFVTkJMRUZCUTBFc1FVRkZRU3hUUVVGVExGVkJRVlVzUlVGQlJTeEhRVUZITzBsQlEzQkNMRmxCUVZrN1NVRkRXaXhoUVVGaExFVkJRVEJDTzBWQlEzcERRU3hKUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEV0QlFVc3NSVUZCUlN4RFFVRkJPMFZCUTNaQ0xFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NXVUZCV1N4SFFVRkhMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkJPMFZCUTNwRUxFZEJRVWNzUTBGQlF5eFBRVUZQTEVkQlFVY3NZVUZCWVN4SFFVRkhMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkJPMFZCUXpWRUxFZEJRVWNzUTBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkJPME5CUTJRN08wRkJSVVFzUVVGQlR5eFRRVUZUTEZGQlFWRXNSVUZCUlN4SlFVRkpMRVZCUVU4c1IwRkJSeXhGUVVGWExHTkJRV01zUlVGQmFVSTdSVUZEYUVZc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeEZRVUZGTEUxQlFVMHNSVUZCUlR0RlFVTndRaXhUUVVGVExGRkJRVkVzU1VGQlNUdEpRVU51UWl4UFFVRlBMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVUU3UjBGRGVrSTdSVUZEUkN4SlFVRkpMRWxCUVVrc1EwRkJReXhaUVVGWkxFdEJRVXNzUjBGQlJ5eEZRVUZGTzBsQlF6ZENMRTFCUVUwN1IwRkRVRHM3T3pzN1JVRkxSQ3hKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEdWQlFXVXNSMEZCUnl4TlFVRkxMRWxCUVVVc1IwRkJSeXhKUVVGSkxFVkJRVVVzUTBGQlFTeE5RVUZGTEVOQlFVRTdSVUZETDBNc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUVRzN096czdSVUZMTDBJc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eEhRVUZITEVOQlFVRTdSVUZEZGtJc1ZVRkJWU3hEUVVGRExFZEJRVWNzUlVGQlJTeFZRVUZWTEVkQlFVY3NSVUZCUlR0SlFVTTNRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEdWQlFXVXNSMEZCUnl4TlFVRkxMRWxCUVVVc1IwRkJSeXhKUVVGSkxFVkJRVVVzUTBGQlFTeE5RVUZGTEVOQlFVRTdTVUZETDBNc1QwRkJiMFFzUjBGQlJ5eEpRVUZKTzBsQlFUVkRMRWxCUVVFc1dVRkJXVHRKUVVGVkxFbEJRVUVzWVVGQllTeGpRVUUxUXp0SlFVTk9RU3hKUVVGTkxFMUJRVTBzUjBGQlJ6dE5RVU5pTEU5QlFVOHNSVUZCUlN4SlFVRkpPMDFCUTJJc1NVRkJTU3hGUVVGRkxFVkJRVVVzWTBGQlFTeFpRVUZaTEVWQlFVVXNaVUZCUVN4aFFVRmhMRVZCUVVVN1MwRkRkRU1zUTBGQlFUdEpRVU5FTEdGQlFXRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOMFJDeFJRVUZSTEVWQlFVVXNRMEZCUVR0SFFVTllMRVZCUVVVc1ZVRkJWU3hIUVVGSExFVkJRVVU3U1VGRGFFSkJMRWxCUVUwc1RVRkJUU3hIUVVGSE8wMUJRMklzVDBGQlR5eEZRVUZGTEV0QlFVczdUVUZEWkN4SlFVRkpMRVZCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzUTBGQlF5eEZRVUZGTEdGQlFXRXNSVUZCUlN4RFFVRkRMRVZCUVVVN1MwRkROVU1zUTBGQlFUdEpRVU5FTEdGQlFXRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1YwRkJWeXhEUVVGRExFbEJRVWtzUlVGQlJTeE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOMFJDeEpRVUZKTEdOQlFXTXNSVUZCUlR0TlFVTnNRaXhWUVVGVkxFTkJRVU1zWTBGQll5eEZRVUZGTEZsQlFWazdVVUZEY2tNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGxRVUZsTEVkQlFVY3NUVUZCU3l4SlFVRkZMR05CUVdNc1NVRkJTU3hGUVVGRkxFTkJRVUVzVFVGQlJTeERRVUZCTzA5QlF6TkVMRU5CUVVNc1EwRkJRVHRMUVVOSU8wbEJRMFFzVVVGQlVTeEZRVUZGTEVOQlFVRTdSMEZEV0N4RFFVRkRMRU5CUVVFN1EwRkRTRHM3UVVGRlJDeFRRVUZUTEdGQlFXRXNSVUZCUlN4RlFVRkZMRVZCUVU4N1JVRkRMMElzU1VGQlNTeERRVUZETEVWQlFVVXNSVUZCUlN4RlFVRkZMRTFCUVUwc1JVRkJSVHRGUVVOdVFrVXNTVUZCU1N4UlFVRlJMRWRCUVVjc1JVRkJSU3hEUVVGRExGZEJRVmNzUTBGQlFUdEZRVU0zUWl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRk8wbEJRMkpCTEVsQlFVa3NSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhoUVVGaExFTkJRVUU3U1VGRGVrSXNUMEZCVHl4RlFVRkZMRWxCUVVrc1JVRkJSU3hMUVVGTExGRkJRVkVzUTBGQlF5eEpRVUZKTEVWQlFVVTdUVUZEYWtNc1NVRkJTU3hEUVVGRExFVkJRVVVzUTBGQlF5eFRRVUZUTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eDNRMEZCZDBNc1EwRkJReXhGUVVGRk8xRkJRemRGTEZGQlFWRXNSMEZCUnl4RlFVRkZMRU5CUVVFN1VVRkRZaXhMUVVGTE8wOUJRMDQ3VFVGRFJDeEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMR0ZCUVdFc1EwRkJRVHRMUVVOMFFqdEpRVU5FTEZGQlFWRXNSMEZCUnl4RlFVRkZMRU5CUVVFN1NVRkRZaXhGUVVGRkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVWQlFVVXNRMEZCUVR0SFFVTndRanRGUVVORUxFOUJRVThzVVVGQlVUdERRVU5vUWpzN1FVRkZSQ3hCUVVGUExGTkJRVk1zV1VGQldTeEZRVUZGTEVWQlFVVXNSVUZCTWtJc1owSkJRV2RDTEVWQlFXdENPMFZCUXpOR0xFbEJRVWtzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSVHRKUVVOeVFpeFBRVUZQTEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJRU3hGUVVGRkxFVkJRVU1zVTBGQlJ5eFpRVUZaTEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVFc1EwRkJRenRIUVVNeFF6dEZRVU5FTEVWQlFVVXNSMEZCUnl4RlFVRkZMRWxCUVVrc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlFUdEZRVU40UWl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRkxFVkJRVVVzVFVGQlRTeEZRVUZGTzBWQlEyNUNRU3hKUVVGSkxFbEJRVWtzUjBGQk1FSXNRMEZCUXl4RlFVRkZMRWxCUVVrc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZCTzBWQlEzSkdMRWxCUVVrc1JVRkJSU3hEUVVGRExGbEJRVmtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZCTEVWQlFVVTdSVUZETDBNc1MwRkJTMEVzU1VGQlNTeERRVUZETEVkQlFWY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMGxCUXpWRFJpeEpRVUZOTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3U1VGRGJrSXNTVUZCU1N4UFFVRlBMR2RDUVVGblFpeExRVUZMTEZOQlFWTXNTVUZCU1N4blFrRkJaMElzUlVGQlJUdE5RVU0zUkN4UlFVRlJMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUTBGQlF5eFpRVUZaTEVOQlFVTXNVMEZCVXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExGbEJRVmtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGRExFTkJRVUU3UzBGRGFFWTdVMEZEU1N4SlFVRkpMR2RDUVVGblFpeERRVUZETEVkQlFVY3NSVUZCUlN4aFFVRmhMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlR0TlFVTndSQ3hSUVVGUkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4WlFVRlpMRU5CUVVNc1UwRkJVeXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEZsQlFWa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eERRVUZETEVOQlFVRTdTMEZEYUVZN1IwRkRSanREUVVOR096czdPenM3T3pzN096czdRVUZaUkVFc1NVRkJUU3hMUVVGTExFZEJRVWNzUlVGQlJTeERRVUZCTzBGQlEyaENSU3hKUVVGSlN5eE5RVUZKTEVkQlFWY3NRMEZCUXl4RFFVRkJPMEZCUTNCQ0xFRkJRVThzVTBGQlV5eHRRa0ZCYlVJc1JVRkJSU3hKUVVGcFFpeEZRVUZGTEVWQlFUaENMRVZCUVVVN05rSkJRUzlETEVkQlFWY3NSVUZCUlN4RFFVRkpPM2xDUVVGQkxFZEJRV1VzVVVGQlVTeERRVUZETEVsQlFVazdPMFZCUTNCR1RDeEpRVUZKTEVWQlFVVXNSMEZCVnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVFN1JVRkRMME1zU1VGQlNTeExRVUZMTEVOQlFVTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUlVGQlJUdEpRVU40UWl4RlFVRkZMRWRCUVVkTExFMUJRVWtzUlVGQlJTeERRVUZCTzBsQlExZ3NSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhaUVVGWkxFTkJRVU1zYTBKQlFXdENMRVZCUVVVc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZCTzBkQlEyNUVPenRGUVVWRUxFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkJPMFZCUXpsQ1VDeEpRVUZOTEZOQlFWTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETzBsQlF5OUNMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRkZCUVZFN1RVRkRla0lzV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1JVRkJSU3hEUVVGRE8wMUJRek5DTEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNN096dE5RVWRvUWl4SlFVRkpMRU5CUVVNN1MwRkRUaXhEUVVGQk8wVkJRMGdzVDBGQlR5eFRRVUZUTzBOQlEycENPenM3UVVNdlNVUXNXVUZCV1N4RFFVRkRPenRCUVVWaUxFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNUMEZCVHl4RlFVRkZMRmxCUVZrc1JVRkJSVHRGUVVNelF5eExRVUZMTEVWQlFVVXNTVUZCU1R0RFFVTmFMRU5CUVVNc1EwRkJRenRCUVVOSUxHVkJRV1VzUjBGQlJ5eG5Ra0ZCWjBJc1EwRkJRenRCUVVOdVF5eFRRVUZUTEdkQ1FVRm5RaXhEUVVGRExFZEJRVWNzUlVGQlJUdEZRVU0zUWl4UFFVRlBMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZMRWRCUVVjc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTnVSRHRCUVVORUxHTkJRV01zUjBGQlJ5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRPenM3TzBGRFZHNURMRmxCUVZrc1EwRkJRenM3UVVGRllpeE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRTlCUVU4c1JVRkJSU3haUVVGWkxFVkJRVVU3UlVGRE0wTXNTMEZCU3l4RlFVRkZMRWxCUVVrN1EwRkRXaXhEUVVGRExFTkJRVU03UVVGRFNDeGxRVUZsTEVkQlFVY3NZMEZCWXl4RFFVRkRPenRCUVVWcVF5eEpRVUZKTEdsQ1FVRnBRaXhIUVVGSE0wUXNhMEpCUVRaQ0xFTkJRVU03TzBGQlJYUkVMRWxCUVVrc2EwSkJRV3RDTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenM3UVVGRmJrVXNVMEZCVXl4elFrRkJjMElzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4UFFVRlBMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zVlVGQlZTeEhRVUZITEVkQlFVY3NSMEZCUnl4RlFVRkZMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGT3p0QlFVVXZSaXhUUVVGVExHTkJRV01zUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTzBWQlEzcEVMRWxCUVVrc1owSkJRV2RDTEVOQlFVTXNZMEZCWXl4RFFVRkRMRkZCUVZFc1EwRkJReXhGUVVGRk8wbEJRemRETEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU03U1VGRGJFUXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eEhRVUZITEdkQ1FVRm5RaXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVkQlFVY3NSMEZCUnl4RlFVRkZMRVZCUVVVc1EwRkJReXhGUVVGRk8wMUJRek5FTEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSU3hyUWtGQmEwSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hEUVVGRExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVNN1MwRkRNVVk3UjBGRFJqdERRVU5HTzBGQlEwUXNZMEZCWXl4SFFVRkhMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU03T3pzN1FVTnlRbTVETEZsQlFWa3NRMEZCUXpzN1FVRkZZaXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4WlFVRlpMRVZCUVVVN1JVRkRNME1zUzBGQlN5eEZRVUZGTEVsQlFVazdRMEZEV2l4RFFVRkRMRU5CUVVNN1FVRkRTQ3hsUVVGbExFZEJRVWNzVjBGQlZ5eERRVUZETzBGQlF6bENMRk5CUVZNc1YwRkJWeXhEUVVGRExFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZMRXRCUVVzc1JVRkJSU3hSUVVGUkxFVkJRVVU3UlVGRE9VUXNTMEZCU3l4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eEhRVUZITEU5QlFVOHNRMEZCUXl4TlFVRk5MRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeEZRVUZGTEVOQlFVTXNSVUZCUlR0SlFVTnNSQ3hKUVVGSkxHTkJRV01zUjBGQlJ5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFdEJRVXNzUlVGQlJTeExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNN096czdTVUZKYkVVc1NVRkJTU3hqUVVGakxFVkJRVVU3VFVGRGJFSXNUMEZCVHl4alFVRmpMRU5CUVVNN1MwRkRka0k3UjBGRFJqdERRVU5HTzBGQlEwUXNZMEZCWXl4SFFVRkhMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU03T3pzN1FVTnFRbTVETEZsQlFWa3NRMEZCUXpzN1FVRkZZaXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4WlFVRlpMRVZCUVVVN1JVRkRNME1zUzBGQlN5eEZRVUZGTEVsQlFVazdRMEZEV2l4RFFVRkRMRU5CUVVNN1FVRkRTQ3hsUVVGbExFZEJRVWNzWjBKQlFXZENMRU5CUVVNN1FVRkRia01zVTBGQlV5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RlFVRkZMRXRCUVVzc1JVRkJSVHRGUVVNM1FpeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVWQlFVVTdTVUZET1VJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0SFFVTnNRanREUVVOR096dEJRVVZFTEZOQlFWTXNaMEpCUVdkQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTEUxQlFVMHNSVUZCUlR0RlFVTjBReXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RFFVRkRMRVZCUVVVN1NVRkRla0lzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJUdE5RVU5xUkN4UlFVRlJMRU5CUVVNc1NVRkJTU3hGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRPMHRCUXpOQ08wZEJRMFlzVFVGQlRUdEpRVU5NTEZGQlFWRXNRMEZCUXl4SlFVRkpMRVZCUVVVc1RVRkJUU3hEUVVGRExFTkJRVU03UjBGRGVFSTdRMEZEUmp0QlFVTkVMR05CUVdNc1IwRkJSeXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZET3pzN08wRkRja0p1UXl4WlFVRlpMRU5CUVVNN08wRkJSV0lzVFVGQlRTeERRVUZETEdOQlFXTXNRMEZCUXl4UFFVRlBMRVZCUVVVc1dVRkJXU3hGUVVGRk8wVkJRek5ETEV0QlFVc3NSVUZCUlN4SlFVRkpPME5CUTFvc1EwRkJReXhEUVVGRE8wRkJRMGdzWlVGQlpTeEhRVUZITEZGQlFWRXNRMEZCUXp0QlFVTXpRaXhUUVVGVExGRkJRVkVzUTBGQlF5eExRVUZMTEVWQlFVVTdSVUZEZGtJc1QwRkJUeXhMUVVGTExGbEJRVmtzVFVGQlRTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dERRVU42UkR0QlFVTkVMR05CUVdNc1IwRkJSeXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZET3pzN08wRkRWRzVETEZsQlFWa3NRMEZCUXpzN1FVRkZZaXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4WlFVRlpMRVZCUVVVN1JVRkRNME1zUzBGQlN5eEZRVUZGTEVsQlFVazdRMEZEV2l4RFFVRkRMRU5CUVVNN1FVRkRTQ3hsUVVGbExFZEJRVWNzWTBGQll5eERRVUZET3p0QlFVVnFReXhKUVVGSkxHVkJRV1VzUjBGQlIwc3NaMEpCUVd0RExFTkJRVU03TzBGQlJYcEVMRWxCUVVrc1owSkJRV2RDTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVTTdPMEZCUlM5RUxFbEJRVWtzV1VGQldTeEhRVUZIUkN4aFFVRXJRaXhEUVVGRE96dEJRVVZ1UkN4SlFVRkpMR0ZCUVdFc1IwRkJSeXh6UWtGQmMwSXNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRenM3UVVGRmVrUXNTVUZCU1N4cFFrRkJhVUlzUjBGQlIwWXNhMEpCUVc5RExFTkJRVU03TzBGQlJUZEVMRWxCUVVrc2EwSkJRV3RDTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenM3UVVGRmJrVXNTVUZCU1N4VFFVRlRMRWRCUVVkR0xGVkJRVFJDTEVOQlFVTTdPMEZCUlRkRExFbEJRVWtzVlVGQlZTeEhRVUZITEhOQ1FVRnpRaXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZET3p0QlFVVnVSQ3hUUVVGVExITkNRVUZ6UWl4RFFVRkRMRWRCUVVjc1JVRkJSU3hGUVVGRkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVkQlFVY3NRMEZCUXl4VlFVRlZMRWRCUVVjc1IwRkJSeXhIUVVGSExFVkJRVVVzVDBGQlR5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVN08wRkJSUzlHTEZOQlFWTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSVHRGUVVNMVFpeEpRVUZKTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVenROUVVNeFFpeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJRenM3UlVGRk0wSXNVMEZCVXl4VFFVRlRMRU5CUVVNc1MwRkJTeXhGUVVGRk8wbEJRM2hDTEV0QlFVc3NTVUZCU1N4UlFVRlJMRWxCUVVrc1MwRkJTeXhGUVVGRk8wMUJRekZDTEVsQlFVa3NTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF6czdPMDFCUnpWQ0xFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVVXNWVUZCVlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zUlVGQlJUdFJRVU5zUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRPenRQUVVWd1F5eE5RVUZOTEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdFJRVU12UWl4SlFVRkpMR0ZCUVdFc1IwRkJSeXhGUVVGRkxFTkJRVU03TzFGQlJYWkNMRXRCUVVzc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVkQlFVY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFVVXNSVUZCUlN4RFFVRkRMRVZCUVVVN1ZVRkRhRVFzU1VGQlNTeGpRVUZqTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1lVRkJZU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeExRVUZMTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVNN1ZVRkRMMFlzUTBGQlF5eERRVUZETEVWQlFVVXNhMEpCUVd0Q0xFTkJRVU1zVDBGQlR5eEZRVUZGTEdGQlFXRXNSVUZCUlN4alFVRmpMRWxCUVVrc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdVMEZETlVVN096czdVVUZKUkN4SlFVRkpMR0ZCUVdFc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzFWQlF6VkNMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eGhRVUZoTEVOQlFVTTdVMEZEYWtNN1QwRkRSaXhOUVVGTk8xRkJRMHdzU1VGQlNTeGxRVUZsTEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVc1lVRkJZU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRXRCUVVzc1JVRkJSU3hMUVVGTExFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVTTdPenM3VVVGSk4wWXNTVUZCU1N4bFFVRmxMRVZCUVVVN1ZVRkRia0lzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4SFFVRkhMR1ZCUVdVc1EwRkJRenRUUVVOdVF6czdVVUZGUkN4RFFVRkRMRU5CUVVNc1JVRkJSU3huUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1UwRkJVeXhGUVVGRkxGRkJRVkVzUlVGQlJTeExRVUZMTEVOQlFVTXNRMEZCUXp0UFFVTXpSRHRMUVVOR096dEpRVVZFTEU5QlFVOHNTMEZCU3l4RFFVRkRPMGRCUTJRN08wVkJSVVFzVDBGQlR5eFRRVUZUTEVOQlFVTTdRMEZEYkVJN1FVRkRSQ3hqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXpzN096dEJRM0JGYmtNc1dVRkJXU3hEUVVGRE96dEJRVVZpTEUxQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGbEJRVmtzUlVGQlJUdEZRVU16UXl4TFFVRkxMRVZCUVVVc1NVRkJTVHREUVVOYUxFTkJRVU1zUTBGQlF6czdRVUZGU0N4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETzBGQlEyNUNMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdRVUZEYUVJc1NVRkJTU3hGUVVGRkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXp0QlFVTm9RaXhKUVVGSkxFVkJRVVVzUjBGQlJ5eERRVUZETEZGQlFWRXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRenRCUVVNelFpeEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6dEJRVU16UWl4SlFVRkpMRWxCUVVrc1IwRkJSeXhEUVVGRExGRkJRVkVzUlVGQlJTeExRVUZMTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVNN08wRkJSVzVETEdWQlFXVXNSMEZCUnp0RlFVTm9RaXhQUVVGUExFVkJRVVVzUlVGQlJUdEZRVU5ZTEZOQlFWTXNSVUZCUlN4RlFVRkZMRmxCUVZrc1JVRkJSU3hGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEVsQlFVa3NSVUZCUlN4elFrRkJjMElzUlVGQlJTeERRVUZETEVWQlFVVXNZMEZCWXl4RlFVRkZMRU5CUVVNc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4RFFVRkRMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXl4RlFVRkZMRzlDUVVGdlFpeEZRVUZGTEVOQlFVTXNSVUZCUlN4VlFVRlZMRVZCUVVVc1EwRkJReXhGUVVGRkxGZEJRVmNzUlVGQlJTeERRVUZETEVWQlFVVXNWVUZCVlN4RlFVRkZMRU5CUVVNc1JVRkJSU3haUVVGWkxFVkJRVVVzUTBGQlF5eEZRVUZGTEdOQlFXTXNSVUZCUlN4RFFVRkRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUlVGQlJTeFpRVUZaTEVWQlFVVXNRMEZCUXl4RlFVRkZMRlZCUVZVc1JVRkJSU3hEUVVGRExFVkJRVVVzWlVGQlpTeEZRVUZGTEVOQlFVTXNSVUZCUlN4TlFVRk5MRVZCUVVVc1EwRkJReXhGUVVGRkxHdENRVUZyUWl4RlFVRkZMRU5CUVVNc1JVRkJSU3huUWtGQlowSXNSVUZCUlN4RFFVRkRMRVZCUVVVc2FVSkJRV2xDTEVWQlFVVXNRMEZCUXl4RlFVRkZMR2xDUVVGcFFpeEZRVUZGTEVOQlFVTXNSVUZCUlN4clFrRkJhMElzUlVGQlJTeERRVUZETEVWQlFVVXNhMEpCUVd0Q0xFVkJRVVVzUTBGQlF5eEZRVUZGTEZsQlFWa3NSVUZCUlN4RFFVRkRMRVZCUVVVc1ZVRkJWU3hGUVVGRkxFTkJRVU1zUlVGQlJTeHhRa0ZCY1VJc1JVRkJSU3hEUVVGRExFVkJRVVVzYjBKQlFXOUNMRVZCUVVVc1EwRkJReXhGUVVGRkxHOUNRVUZ2UWl4RlFVRkZMRU5CUVVNc1JVRkJSU3h4UWtGQmNVSXNSVUZCUlN4RFFVRkRMRVZCUVVVc1VVRkJVU3hGUVVGRkxFTkJRVU1zUlVGQlJTeHhRa0ZCY1VJc1JVRkJSU3hEUVVGRExFVkJRVVVzV1VGQldTeEZRVUZGTEVsQlFVa3NSVUZCUlN4aFFVRmhMRVZCUVVVc1NVRkJTU3hGUVVGRkxHRkJRV0VzUlVGQlJTeEpRVUZKTEVWQlFVVXNZVUZCWVN4RlFVRkZMRVZCUVVVc1JVRkJSU3haUVVGWkxFVkJRVVVzUlVGQlJTeEZRVUZGTEZkQlFWY3NSVUZCUlN4RlFVRkZMRVZCUVVVc1dVRkJXU3hGUVVGRkxFVkJRVVVzUlVGQlJTeHBRa0ZCYVVJc1JVRkJSU3hGUVVGRkxFVkJRVVVzYVVKQlFXbENMRVZCUVVVc1JVRkJSU3hGUVVGRkxHbENRVUZwUWl4RlFVRkZMRVZCUVVVc1JVRkJSU3hUUVVGVExFVkJRVVVzUlVGQlJTeEZRVUZGTEZsQlFWa3NSVUZCUlN4RlFVRkZMRVZCUVVVc1lVRkJZU3hGUVVGRkxFVkJRVVVzUlVGQlJTeGhRVUZoTEVWQlFVVXNSMEZCUnl4RlFVRkZMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzVjBGQlZ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4bFFVRmxMRVZCUVVVc1EwRkJReXhGUVVGRkxGVkJRVlVzUlVGQlJTeERRVUZETEVWQlFVVXNWVUZCVlN4RlFVRkZMRU5CUVVNc1JVRkJSU3haUVVGWkxFVkJRVVVzUTBGQlF5eEZRVUZGTEZWQlFWVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1kwRkJZeXhGUVVGRkxFTkJRVU1zUlVGQlJTeFpRVUZaTEVWQlFVVXNRMEZCUXl4RlFVRkZMRmRCUVZjc1JVRkJSU3hEUVVGRExFVkJRVVVzWjBKQlFXZENMRVZCUVVVc1EwRkJReXhGUVVGRkxFOUJRVThzUlVGQlJTeERRVUZETEVWQlFVVXNWMEZCVnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hwUWtGQmFVSXNSVUZCUlN4RFFVRkRMRVZCUVVVc2EwSkJRV3RDTEVWQlFVVXNRMEZCUXl4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEVOQlFVTXNSVUZCUlN4dlFrRkJiMElzUlVGQlJTeERRVUZETEVWQlFVVXNZVUZCWVN4RlFVRkZMRU5CUVVNc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4RFFVRkRMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNRMEZCUXl4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEVOQlFVTXNSVUZCUlN4WFFVRlhMRVZCUVVVc1EwRkJReXhGUVVGRkxHZENRVUZuUWl4RlFVRkZMRU5CUVVNc1JVRkJSU3h2UWtGQmIwSXNSVUZCUlN4RFFVRkRMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXl4RlFVRkZMRzFDUVVGdFFpeEZRVUZGTEVOQlFVTXNSVUZCUlN4NVFrRkJlVUlzUlVGQlJTeERRVUZETEVWQlFVVXNaVUZCWlN4RlFVRkZMRU5CUVVNc1JVRkJSU3h2UWtGQmIwSXNSVUZCUlN4RFFVRkRMRVZCUVVVc2VVSkJRWGxDTEVWQlFVVXNRMEZCUXl4RlFVRkZMR2RDUVVGblFpeEZRVUZGTEVOQlFVTXNSVUZCUlN4aFFVRmhMRVZCUVVVc1EwRkJReXhGUVVGRkxHZENRVUZuUWl4RlFVRkZMRWRCUVVjc1JVRkJSU3h0UWtGQmJVSXNSVUZCUlN4SFFVRkhMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNSMEZCUnl4RlFVRkZMSFZDUVVGMVFpeEZRVUZGTEVkQlFVY3NSVUZCUlN4elFrRkJjMElzUlVGQlJTeEhRVUZITEVWQlFVVXNjVUpCUVhGQ0xFVkJRVVVzUTBGQlF5eEZRVUZGTEd0Q1FVRnJRaXhGUVVGRkxFTkJRVU1zUlVGQlJTeHRRa0ZCYlVJc1JVRkJSU3hEUVVGRExFVkJRVVVzVTBGQlV5eEZRVUZGTEVsQlFVa3NSVUZCUlN4VlFVRlZMRVZCUVVVc1IwRkJSeXhGUVVGRkxGVkJRVlVzUlVGQlJTeEhRVUZITEVWQlFVVXNaMEpCUVdkQ0xFVkJRVVVzUjBGQlJ5eEZRVUZGTEdWQlFXVXNSVUZCUlN4RFFVRkRMRVZCUVVVc1UwRkJVeXhGUVVGRkxFTkJRVU1zUlVGQlJTeFZRVUZWTEVWQlFVVXNSVUZCUlN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEVWQlFVVXNSVUZCUlN4eFFrRkJjVUlzUlVGQlJTeEZRVUZGTEVWQlFVVXNhMEpCUVd0Q0xFVkJRVVVzUlVGQlJTeEZRVUZGTEcxQ1FVRnRRaXhGUVVGRkxFVkJRVVVzUlVGQlJTeGpRVUZqTEVWQlFVVXNSVUZCUlN4RlFVRkZMR2xDUVVGcFFpeEZRVUZGTEVWQlFVVXNSVUZCUlN4alFVRmpMRVZCUVVVc1JVRkJSU3hGUVVGRkxHTkJRV01zUlVGQlJTeEZRVUZGTEVWQlFVVXNUVUZCVFN4RlFVRkZMRVZCUVVVc1JVRkJSU3hqUVVGakxFVkJRVVVzUlVGQlJTeEZRVUZGTEdsQ1FVRnBRaXhGUVVGRkxFVkJRVVVzUlVGQlJTeFpRVUZaTEVWQlFVVXNSVUZCUlN4RlFVRkZMRk5CUVZNc1JVRkJSU3hGUVVGRkxFVkJRVVVzV1VGQldTeEZRVUZGTEVWQlFVVXNSVUZCUlN4bFFVRmxMRVZCUVVVc1JVRkJSU3hGUVVGRkxHVkJRV1VzUlVGQlJTeEZRVUZGTEVWQlFVVXNXVUZCV1N4RlFVRkZMRVZCUVVVc1JVRkJSU3hWUVVGVkxFVkJRVVVzUlVGQlJTeEZRVUZGTEZOQlFWTXNSVUZCUlN4RlFVRkZMRVZCUVVVc1owSkJRV2RDTEVWQlFVVXNSMEZCUnl4RlFVRkZMR0ZCUVdFc1JVRkJSU3hEUVVGRExFVkJRVVVzYlVKQlFXMUNMRVZCUVVVc1EwRkJReXhGUVVGRkxHMUNRVUZ0UWl4RlFVRkZMRU5CUVVNc1JVRkJSU3hyUWtGQmEwSXNSVUZCUlN4RFFVRkRMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXl4RlFVRkZMR3RDUVVGclFpeEZRVUZGTEVOQlFVTXNSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeERRVUZETEVWQlFVVXNiMEpCUVc5Q0xFVkJRVVVzUTBGQlF5eEZRVUZGTEc5Q1FVRnZRaXhGUVVGRkxFTkJRVU1zUlVGQlJTd3dRa0ZCTUVJc1JVRkJSU3hEUVVGRExFVkJRVVU3UTBGRE9TdEZMRU5CUVVNN1FVRkRSaXhqUVVGakxFZEJRVWNzVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXpzN096dEJRMnBDYmtNc1dVRkJXU3hEUVVGRE96dEJRVVZpTEUxQlFVMHNRMEZCUXl4alFVRmpMRU5CUVVNc1QwRkJUeXhGUVVGRkxGbEJRVmtzUlVGQlJUdEZRVU16UXl4TFFVRkxMRVZCUVVVc1NVRkJTVHREUVVOYUxFTkJRVU1zUTBGQlF6dEJRVU5JTEdWQlFXVXNSMEZCUnl4TlFVRk5MRU5CUVVNN1FVRkRla0lzU1VGQlNTeFJRVUZSTEVkQlFVY3NRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJUeXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZET3p0QlFVVjZReXhKUVVGSkxFMUJRVTBzUjBGQlJ6dEZRVU5ZTEZOQlFWTXNSVUZCUlN4SlFVRkpPMFZCUTJZc1ZVRkJWU3hGUVVGRkxFbEJRVWs3UlVGRGFFSXNTVUZCU1N4RlFVRkZMRWxCUVVrN1JVRkRWaXhSUVVGUkxFVkJRVVVzU1VGQlNUdERRVU5tTEVOQlFVTTdPMEZCUlVZc1UwRkJVeXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVc3NSVUZCUlR0RlFVTXZRaXhKUVVGSkxGRkJRVkVzUzBGQlN5eFJRVUZSTEVsQlFVa3NUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdEpRVU42UkN4UFFVRlBMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeE5RVUZOTEVWQlFVVTdUVUZEY0VNc1QwRkJUeXhOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZETzB0QlEzWkNMRU5CUVVNc1EwRkJRenRIUVVOS08wTkJRMFk3UVVGRFJDeGpRVUZqTEVkQlFVY3NUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJRenM3T3p0QlEzUkNia01zV1VGQldTeERRVUZET3p0QlFVVmlMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zVDBGQlR5eEZRVUZGTEZsQlFWa3NSVUZCUlR0RlFVTXpReXhMUVVGTExFVkJRVVVzU1VGQlNUdERRVU5hTEVOQlFVTXNRMEZCUXp0QlFVTklMR1ZCUVdVc1IwRkJSeXhsUVVGbExFTkJRVU03UVVGRGJFTXNTVUZCU1N4TFFVRkxMRWRCUVVjc2NVSkJRWEZDTEVOQlFVTTdPMEZCUld4RExGTkJRVk1zWlVGQlpTeERRVUZETEV0QlFVc3NSVUZCUlR0RlFVTTVRaXhQUVVGUExFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNTVUZCU1N4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBOQlEzWkVPMEZCUTBRc1kwRkJZeXhIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTTdPenM3UVVOWWJrTXNXVUZCV1N4RFFVRkRPenRCUVVWaUxFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNUMEZCVHl4RlFVRkZMRmxCUVZrc1JVRkJSVHRGUVVNelF5eExRVUZMTEVWQlFVVXNTVUZCU1R0RFFVTmFMRU5CUVVNc1EwRkJRenRCUVVOSUxHVkJRV1VzUjBGQlJ5eFRRVUZUTEVOQlFVTTdPMEZCUlRWQ0xFbEJRVWtzWjBKQlFXZENMRWRCUVVkQkxHbENRVUU0UXl4RFFVRkRPenRCUVVWMFJTeEpRVUZKTEdsQ1FVRnBRaXhIUVVGSExITkNRVUZ6UWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdPMEZCUldwRkxGTkJRVk1zYzBKQlFYTkNMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzVDBGQlR5eEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRkRMRlZCUVZVc1IwRkJSeXhIUVVGSExFZEJRVWNzUlVGQlJTeFBRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSVHM3TzBGQlJ5OUdMRWxCUVVrc1VVRkJVU3hIUVVGSExFTkJRVU1zVlVGQlZTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTJoRExGTkJRVk1zVTBGQlV5eERRVUZETEZGQlFWRXNSVUZCUlN4TFFVRkxMRVZCUVVVN1JVRkRiRU1zU1VGQlNTeFBRVUZQTEV0QlFVc3NTMEZCU3l4UlFVRlJMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhoUVVGaExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlR0SlFVTTFSeXhQUVVGUExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4TlFVRk5MRVZCUVVVN1RVRkRjRU1zVDBGQlR5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hOUVVGTkxFZEJRVWNzWVVGQllTeERRVUZETEVOQlFVTTdTMEZETDBRc1EwRkJReXhEUVVGRE8wZEJRMG83UTBGRFJqdEJRVU5FTEdOQlFXTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRE96czdPMEZEZEVKdVF5eFpRVUZaTEVOQlFVTTdPMEZCUldJc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eFBRVUZQTEVWQlFVVXNXVUZCV1N4RlFVRkZPMFZCUXpORExFdEJRVXNzUlVGQlJTeEpRVUZKTzBOQlExb3NRMEZCUXl4RFFVRkRPMEZCUTBnc1pVRkJaU3hIUVVGSExFMUJRVTBzUTBGQlF6czdRVUZGZWtJc1NVRkJTU3huUWtGQlowSXNSMEZCUjBFc2FVSkJRVGhETEVOQlFVTTdPMEZCUlhSRkxFbEJRVWtzYVVKQlFXbENMRWRCUVVjc2MwSkJRWE5DTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zUTBGQlF6czdRVUZGYWtVc1UwRkJVeXh6UWtGQmMwSXNRMEZCUXl4SFFVRkhMRVZCUVVVc1JVRkJSU3hQUVVGUExFZEJRVWNzU1VGQlNTeEhRVUZITEVOQlFVTXNWVUZCVlN4SFFVRkhMRWRCUVVjc1IwRkJSeXhGUVVGRkxFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZPenM3UVVGSEwwWXNTVUZCU1N4UlFVRlJMRWRCUVVjc1EwRkJReXhWUVVGVkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTTdRVUZEYUVNc1UwRkJVeXhOUVVGTkxFTkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVc3NSVUZCUlR0RlFVTXZRaXhKUVVGSkxFOUJRVThzUzBGQlN5eExRVUZMTEZGQlFWRXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxHbENRVUZwUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hMUVVGTExFTkJRVU1zU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTzBsQlEzaEhMRTlCUVU4c1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZWTEUxQlFVMHNSVUZCUlR0TlFVTndReXhQUVVGUExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNWMEZCVnl4RlFVRkZMRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zUTBGQlF6dExRVU4yUkN4RFFVRkRMRU5CUVVNN1IwRkRTanREUVVOR08wRkJRMFFzWTBGQll5eEhRVUZITEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNN096czdRVU4wUW01RExGbEJRVmtzUTBGQlF6czdRVUZGWWl4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUlVGQlJTeFpRVUZaTEVWQlFVVTdSVUZETTBNc1MwRkJTeXhGUVVGRkxFbEJRVWs3UTBGRFdpeERRVUZETEVOQlFVTTdRVUZEU0N4bFFVRmxMRWRCUVVjc1NVRkJTU3hEUVVGRE8wRkJRM1pDTEVsQlFVa3NUVUZCVFN4SFFVRkhPMFZCUTFnc1NVRkJTU3hGUVVGRkxFTkJRVU1zWVVGQllTeEZRVUZGTEZWQlFWVXNSVUZCUlN4aFFVRmhMRVZCUVVVc1kwRkJZeXhGUVVGRkxFMUJRVTBzUTBGQlF6dEZRVU40UlN4aFFVRmhMRVZCUVVVc1EwRkJReXh2UWtGQmIwSXNSVUZCUlN4cFFrRkJhVUlzUlVGQlJTeHZRa0ZCYjBJc1JVRkJSU3h4UWtGQmNVSXNSVUZCUlN4aFFVRmhMRU5CUVVNN1EwRkRja2dzUTBGQlF6czdRVUZGUml4VFFVRlRMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTzBWQlF6ZENMRWxCUVVrc1VVRkJVU3hMUVVGTExGTkJRVk1zU1VGQlNTeE5RVUZOTEVOQlFVTXNZMEZCWXl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wbEJRekZFTEU5QlFVOHNUVUZCVFN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRE8wZEJRM1JDTzBOQlEwWTdRVUZEUkN4alFVRmpMRWRCUVVjc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF6czdPenRCUTJoQ2JrTXNXVUZCV1N4RFFVRkRPenRCUVVWaUxFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNUMEZCVHl4RlFVRkZMRmxCUVZrc1JVRkJSVHRGUVVNelF5eExRVUZMTEVWQlFVVXNTVUZCU1R0RFFVTmFMRU5CUVVNc1EwRkJRenRCUVVOSUxHVkJRV1VzUjBGQlJ5eFZRVUZWTEVOQlFVTTdRVUZETjBJc1NVRkJTU3hwUWtGQmFVSXNSMEZCUnp0RlFVTjBRaXhqUVVGakxFVkJRVVVzVTBGQlV6dEZRVU42UWl4bFFVRmxMRVZCUVVVc1UwRkJVenRGUVVNeFFpeFpRVUZaTEVWQlFVVXNUMEZCVHp0RlFVTnlRaXhWUVVGVkxFVkJRVVVzUzBGQlN6dEZRVU5xUWl4alFVRmpMRVZCUVVVc1ZVRkJWVHRGUVVNeFFpeEpRVUZKTEVWQlFVVXNWVUZCVlR0RFFVTnFRaXhEUVVGRE96dEJRVVZHTEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWM3UlVGRGNrSXNWVUZCVlN4RlFVRkZMR2RDUVVGblFqdEZRVU0xUWl4alFVRmpMRVZCUVVVc1pVRkJaVHRGUVVNdlFpeFJRVUZSTEVWQlFVVXNaMEpCUVdkQ08wTkJRek5DTEVOQlFVTTdPMEZCUlVZc1UwRkJVeXhWUVVGVkxFTkJRVU1zVVVGQlVTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TFFVRkxMRVZCUVVVN1JVRkRNVU1zU1VGQlNTeFJRVUZSTEV0QlFVc3NaVUZCWlN4SlFVRkpMRTlCUVU4c1MwRkJTeXhMUVVGTExGRkJRVkVzUlVGQlJUdEpRVU0zUkN4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRVZCUVVVN1RVRkRhRU1zUzBGQlN5eERRVUZETEdWQlFXVXNSMEZCUnl4VlFVRlZMRU5CUVVNN1MwRkRjRU1zVFVGQlRUdE5RVU5NTEV0QlFVc3NRMEZCUXl4bFFVRmxMRWRCUVVjc1dVRkJXU3hEUVVGRE8wdEJRM1JETzBsQlEwUXNTVUZCU1N4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZPMDFCUTJwRExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1IwRkJSeXhUUVVGVExFTkJRVU03UzBGRGRFTXNUVUZCVFR0TlFVTk1MRXRCUVVzc1EwRkJReXhyUWtGQmEwSXNSMEZCUnl4UlFVRlJMRU5CUVVNN1MwRkRja003UjBGRFJqdEZRVU5FTEVsQlFVa3NaMEpCUVdkQ0xFTkJRVU1zWTBGQll5eERRVUZETEZGQlFWRXNRMEZCUXl4RlFVRkZPMGxCUXpkRExFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eEhRVUZITEdsQ1FVRnBRaXhEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXp0SFFVTjJSVHREUVVOR08wRkJRMFFzWTBGQll5eEhRVUZITEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNN096czdRVU4wUTI1RExGbEJRVmtzUTBGQlF6czdRVUZGWWl4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFOUJRVThzUlVGQlJTeFpRVUZaTEVWQlFVVTdSVUZETTBNc1MwRkJTeXhGUVVGRkxFbEJRVWs3UTBGRFdpeERRVUZETEVOQlFVTTdRVUZEU0N4bFFVRmxMRWRCUVVjc1VVRkJVU3hEUVVGRE96dEJRVVV6UWl4SlFVRkpMR2RDUVVGblFpeEhRVUZIUVN4cFFrRkJPRU1zUTBGQlF6czdRVUZGZEVVc1NVRkJTU3hwUWtGQmFVSXNSMEZCUnl4elFrRkJjMElzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGRE96dEJRVVZxUlN4VFFVRlRMSE5DUVVGelFpeERRVUZETEVkQlFVY3NSVUZCUlN4RlFVRkZMRTlCUVU4c1IwRkJSeXhKUVVGSkxFZEJRVWNzUTBGQlF5eFZRVUZWTEVkQlFVY3NSMEZCUnl4SFFVRkhMRVZCUVVVc1QwRkJUeXhGUVVGRkxFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVTdPMEZCUlM5R0xFbEJRVWtzVVVGQlVTeEhRVUZITEVOQlFVTXNWVUZCVlN4RlFVRkZMRTlCUVU4c1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6czdRVUZGZWtNc1NVRkJTU3hOUVVGTkxFZEJRVWNzY1VaQlFYRkdMRU5CUVVNN08wRkJSVzVITEZOQlFWTXNVVUZCVVN4RFFVRkRMRkZCUVZFc1JVRkJSU3hMUVVGTExFVkJRVVU3UlVGRGFrTXNTVUZCU1N4UFFVRlBMRXRCUVVzc1MwRkJTeXhSUVVGUkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWxCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0SlFVTTNSaXhQUVVGUExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4TlFVRk5MRVZCUVVVN1RVRkRjRU1zVDBGQlR5eE5RVUZOTEVkQlFVY3NTMEZCU3l4RFFVRkRPMHRCUTNaQ0xFTkJRVU1zUTBGQlF6dEhRVU5LTzBOQlEwWTdRVUZEUkN4alFVRmpMRWRCUVVjc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF6czdPenRCUTNoQ2JrTXNXVUZCV1N4RFFVRkRPenRCUVVWaUxFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNUMEZCVHl4RlFVRkZMRmxCUVZrc1JVRkJSVHRGUVVNelF5eExRVUZMTEVWQlFVVXNTVUZCU1R0RFFVTmFMRU5CUVVNc1EwRkJRenRCUVVOSUxHVkJRV1VzUjBGQlJ5eFJRVUZSTEVOQlFVTTdPMEZCUlROQ0xFbEJRVWtzWjBKQlFXZENMRWRCUVVkQkxHbENRVUU0UXl4RFFVRkRPenRCUVVWMFJTeEpRVUZKTEdsQ1FVRnBRaXhIUVVGSExITkNRVUZ6UWl4RFFVRkRMR2RDUVVGblFpeERRVUZETEVOQlFVTTdPMEZCUldwRkxGTkJRVk1zYzBKQlFYTkNMRU5CUVVNc1IwRkJSeXhGUVVGRkxFVkJRVVVzVDBGQlR5eEhRVUZITEVsQlFVa3NSMEZCUnl4RFFVRkRMRlZCUVZVc1IwRkJSeXhIUVVGSExFZEJRVWNzUlVGQlJTeFBRVUZQTEVWQlFVVXNSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSVHM3TzBGQlJ5OUdMRWxCUVVrc1VVRkJVU3hIUVVGSExFTkJRVU1zVlVGQlZTeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkRPMEZCUTJoRExGTkJRVk1zVVVGQlVTeERRVUZETEZGQlFWRXNSVUZCUlN4TFFVRkxMRVZCUVVVN1JVRkRha01zU1VGQlNTeFBRVUZQTEV0QlFVc3NTMEZCU3l4UlFVRlJMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhQUVVGUExFVkJRVVVzUzBGQlN5eERRVUZETEVsQlFVa3NTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJReXhaUVVGWkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlR0SlFVTXpSeXhQUVVGUExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4TlFVRk5MRVZCUVVVN1RVRkRjRU1zVDBGQlR5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMR05CUVdNc1JVRkJSU3hOUVVGTkxFZEJRVWNzV1VGQldTeERRVUZETEVOQlFVTTdTMEZETjBRc1EwRkJReXhEUVVGRE8wZEJRMG83UTBGRFJqdEJRVU5FTEdOQlFXTXNSMEZCUnl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRE96czdPMEZEZEVKdVF5eFpRVUZaTEVOQlFVTTdPMEZCUldJc1RVRkJUU3hEUVVGRExHTkJRV01zUTBGQlF5eFBRVUZQTEVWQlFVVXNXVUZCV1N4RlFVRkZPMFZCUXpORExFdEJRVXNzUlVGQlJTeEpRVUZKTzBOQlExb3NRMEZCUXl4RFFVRkRPMEZCUTBnc1pVRkJaU3hIUVVGSExGRkJRVkVzUTBGQlF6dEJRVU16UWl4VFFVRlRMRkZCUVZFc1EwRkJReXhSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTzBWQlEycERMRWxCUVVrc1VVRkJVU3hMUVVGTExGVkJRVlVzU1VGQlNTeExRVUZMTEV0QlFVc3NVVUZCVVN4RlFVRkZPMGxCUTJwRUxFOUJRVThzUTBGQlF5eG5Ra0ZCWjBJc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF6dEhRVU55UXp0RFFVTkdPMEZCUTBRc1kwRkJZeXhIUVVGSExFOUJRVThzUTBGQlF5eFRRVUZUTEVOQlFVTTdPenM3UVVOWWJrTXNXVUZCV1N4RFFVRkRPenRCUVVWaUxFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNUMEZCVHl4RlFVRkZMRmxCUVZrc1JVRkJSVHRGUVVNelF5eExRVUZMTEVWQlFVVXNTVUZCU1R0RFFVTmFMRU5CUVVNc1EwRkJRenRCUVVOSUxHVkJRV1VzUjBGQlJ5eE5RVUZOTEVOQlFVTTdRVUZEZWtJc1NVRkJTU3hSUVVGUkxFZEJRVWNzUTBGQlF5eFZRVUZWTEVWQlFVVXNUMEZCVHl4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE96dEJRVVY2UXl4SlFVRkpMRlZCUVZVc1IwRkJSenRGUVVObUxGTkJRVk1zUlVGQlJTeEpRVUZKTzBWQlEyWXNVVUZCVVN4RlFVRkZMRWxCUVVrN1JVRkRaQ3hMUVVGTExFVkJRVVVzU1VGQlNUdEZRVU5ZTEUxQlFVMHNSVUZCUlN4SlFVRkpPMFZCUTFvc1YwRkJWeXhGUVVGRkxFbEJRVWs3UlVGRGFrSXNVVUZCVVN4RlFVRkZMRWxCUVVrN1JVRkRaQ3hUUVVGVExFVkJRVVVzU1VGQlNUdERRVU5vUWl4RFFVRkRPMEZCUTBZc1NVRkJTU3hOUVVGTkxFZEJRVWM3UlVGRFdDeGhRVUZoTEVWQlFVVXNTVUZCU1R0RlFVTnVRaXhoUVVGaExFVkJRVVVzU1VGQlNUdEZRVU51UWl4blFrRkJaMElzUlVGQlJTeEpRVUZKTzBWQlEzUkNMR0ZCUVdFc1JVRkJSU3hKUVVGSk8wVkJRMjVDTEdkQ1FVRm5RaXhGUVVGRkxFbEJRVWs3UTBGRGRrSXNRMEZCUXpzN1FVRkZSaXhUUVVGVExFMUJRVTBzUTBGQlF5eFJRVUZSTEVWQlFVVXNTMEZCU3l4RlFVRkZPMFZCUXk5Q0xFbEJRVWtzVlVGQlZTeERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEV0QlFVc3NRMEZCUXl4RlFVRkZPMGxCUTNaRkxFOUJRVThzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRTFCUVUwc1JVRkJSVHROUVVOd1F5eFBRVUZQTEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNN1MwRkRka0lzUTBGQlF5eERRVUZETzBkQlEwbzdRMEZEUmp0QlFVTkVMR05CUVdNc1IwRkJSeXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZET3pzN1FVTTVRbTVETEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzVVVGQlVTeERRVUZETzBGQlEyaERMRWxCUVVrc1UwRkJVeXhIUVVGSExFMUJRVTBzUTBGQlF6dEJRVU4yUWl4SlFVRkpiVVVzVDBGQlN5eEhRVUZITEVWQlFVVXNRMEZCUXpzN1FVRkZaaXhUUVVGVExHdENRVUZyUWl4RFFVRkRMRTFCUVUwc1JVRkJSVHRKUVVOb1F5eFBRVUZQTEUxQlFVMHNTVUZCU1VFc1QwRkJTenROUVVOd1FrRXNUMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRenROUVVOaVFTeFBRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1RVRkJUVHRQUVVOeVFpeFBRVUZQTEVOQlFVTXNaMEpCUVdkQ0xFVkJRVVVzUzBGQlN5eERRVUZETzA5QlEyaERMRmRCUVZjc1JVRkJSVHRQUVVOaUxFOUJRVThzUTBGQlF5eFRRVUZUTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNN1EwRkRha003TzBGQlJVUXNWMEZCWXl4SFFVRkhMR3RDUVVGclFpeERRVUZET3pzN1FVTm1jRU1zV1VGQldTeERRVUZET3p0QlFVVmlMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zVDBGQlR5eEZRVUZGTEZsQlFWa3NSVUZCUlR0RlFVTXpReXhMUVVGTExFVkJRVVVzU1VGQlNUdERRVU5hTEVOQlFVTXNRMEZCUXp0QlFVTklMR1ZCUVdVc1IwRkJSeXhwUWtGQmFVSXNRMEZCUXpzN1FVRkZjRU1zU1VGQlNTeHRRa0ZCYlVJc1IwRkJSMjVGTEU5QlFTdENMRU5CUVVNN08wRkJSVEZFTEVsQlFVa3NiMEpCUVc5Q0xFZEJRVWNzYzBKQlFYTkNMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNRMEZCUXpzN1FVRkZka1VzVTBGQlV5eHpRa0ZCYzBJc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeFBRVUZQTEVkQlFVY3NTVUZCU1N4SFFVRkhMRU5CUVVNc1ZVRkJWU3hIUVVGSExFZEJRVWNzUjBGQlJ5eEZRVUZGTEU5QlFVOHNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRk96dEJRVVV2Uml4VFFVRlRMR2xDUVVGcFFpeERRVUZETEZGQlFWRXNSVUZCUlR0RlFVTnVReXhQUVVGUExFTkJRVU1zUTBGQlF5eEZRVUZGTEc5Q1FVRnZRaXhEUVVGRExFOUJRVThzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUXp0RFFVTndSRHRCUVVORUxHTkJRV01zUjBGQlJ5eFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRPenM3TzBGRGFFSnVReXhaUVVGWkxFTkJRVU03TzBGQlJXSXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhQUVVGUExFVkJRVVVzV1VGQldTeEZRVUZGTzBWQlF6TkRMRXRCUVVzc1JVRkJSU3hKUVVGSk8wTkJRMW9zUTBGQlF5eERRVUZETzBGQlEwZ3NaVUZCWlN4SFFVRkhMRlZCUVZVc1EwRkJRenM3UVVGRk4wSXNTVUZCU1N4clFrRkJhMElzUjBGQlIwa3NiVUpCUVdkRUxFTkJRVU03TzBGQlJURkZMRWxCUVVrc2JVSkJRVzFDTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJRenM3UVVGRmNrVXNTVUZCU1N4blFrRkJaMElzUjBGQlIwWXNhVUpCUVRoRExFTkJRVU03TzBGQlJYUkZMRWxCUVVrc2FVSkJRV2xDTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1EwRkJRenM3UVVGRmFrVXNTVUZCU1N4cFFrRkJhVUlzUjBGQlIwWXNhMEpCUVhWRExFTkJRVU03TzBGQlJXaEZMRWxCUVVrc2EwSkJRV3RDTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1EwRkJRenM3UVVGRmJrVXNVMEZCVXl4elFrRkJjMElzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4UFFVRlBMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zVlVGQlZTeEhRVUZITEVkQlFVY3NSMEZCUnl4RlFVRkZMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGT3p0QlFVVXZSaXhKUVVGSkxGVkJRVlVzUjBGQlJ6dEZRVU5tTEZWQlFWVXNSVUZCUlN4SlFVRkpPMFZCUTJoQ0xHdENRVUZyUWl4RlFVRkZMRWxCUVVrN1JVRkRlRUlzWjBKQlFXZENMRVZCUVVVc1NVRkJTVHRGUVVOMFFpeDNRa0ZCZDBJc1JVRkJSU3hKUVVGSk8wVkJRemxDTEdGQlFXRXNSVUZCUlN4SlFVRkpPMFZCUTI1Q0xIRkNRVUZ4UWl4RlFVRkZMRWxCUVVrN1EwRkROVUlzUTBGQlF6czdPMEZCUjBZc1NVRkJTU3hoUVVGaExFZEJRVWM3UlVGRGJFSXNUVUZCVFN4RlFVRkZMRlZCUVZVN1JVRkRiRUlzUjBGQlJ5eEZRVUZGTEU5QlFVODdSVUZEV2l4RlFVRkZMRVZCUVVVc1RVRkJUVHREUVVOWUxFTkJRVU03TzBGQlJVWXNVMEZCVXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhGUVVGRkxHbENRVUZwUWl4RlFVRkZPMFZCUXpkRExFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVVXNhVUpCUVdsQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RlFVRkZPMGxCUTNwRExFOUJRVThzUzBGQlN5eERRVUZETzBkQlEyUTdPenRGUVVkRUxFbEJRVWtzWTBGQll5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc0swSkJRU3RDTEVOQlFVTXNRMEZCUXpzN1JVRkZiRVVzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhIUVVGSExHTkJRV01zUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUlVGQlJUdEpRVU42UkN4SlFVRkpMRmRCUVZjc1IwRkJSeXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdTVUZEY0VNc1NVRkJTU3hOUVVGTkxFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUXp0SlFVTXpRaXhMUVVGTExFbEJRVWtzVVVGQlVTeEpRVUZKTEdsQ1FVRnBRaXhGUVVGRk8wMUJRM1JETEVsQlFVa3NaMEpCUVdkQ0xFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVXNiVUpCUVcxQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkRPenROUVVWc1JTeEpRVUZKTEZkQlFWY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3huUWtGQlowSXNTMEZCU3l4UFFVRlBMRVZCUVVVN1VVRkRPVVVzU1VGQlNTeFJRVUZSTEVkQlFVY3NhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTTdVVUZETTBNc1MwRkJTeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlF5eEhRVUZITEVsQlFVa3NSVUZCUlN4RlFVRkZMRU5CUVVNc1JVRkJSVHM3VlVGRmNrUXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhuUWtGQlowSXNRMEZCUXl4RFFVRkRMRU5CUVVNN1UwRkRkRWM3VDBGRFJqdExRVU5HT3p0SlFVVkVMR05CUVdNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wZEJRM1JET3p0RlFVVkVMRTlCUVU4c1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0RFFVTnFRenM3UVVGRlJDeFRRVUZUTEZWQlFWVXNRMEZCUXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJTeHBRa0ZCYVVJc1JVRkJSVHM3UlVGRk4wUXNTVUZCU1N4UFFVRlBMRXRCUVVzc1MwRkJTeXhSUVVGUkxFbEJRVWtzVlVGQlZTeERRVUZETEdOQlFXTXNRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSVHRKUVVOd1JTeEpRVUZKTEZkQlFWY3NSMEZCUnl4WFFVRlhMRU5CUVVNc1MwRkJTeXhGUVVGRkxHbENRVUZwUWl4RFFVRkRMRU5CUVVNN08wbEJSWGhFTEVsQlFVa3NXVUZCV1N4SFFVRkhMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zSzBKQlFTdENMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZTeEhRVUZITEVWQlFVVTdUVUZETVVZc1QwRkJUeXhEUVVGRExGbEJRVmtzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1MwRkRhRU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenM3U1VGRllpeEpRVUZKTEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVWQlFVVTdUVUZEYmtNc1QwRkJUeXhaUVVGWkxFTkJRVU03UzBGRGNrSTdPMGxCUlVRc1NVRkJTU3hUUVVGVExFZEJRVWNzVjBGQlZ5eERRVUZETEV0QlFVc3NRMEZCUXl3clFrRkJLMElzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZMRWRCUVVjc1JVRkJSVHROUVVOMlJpeFBRVUZQTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dExRVU51UXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZET3p0SlFVVmlMRWxCUVVrc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSVHROUVVOb1F5eFBRVUZQTEZOQlFWTXNRMEZCUXp0TFFVTnNRanM3U1VGRlJDeExRVUZMTEVOQlFVTXNVVUZCVVN4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRkxHdENRVUZyUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlF5eEhRVUZITEZsQlFWa3NRMEZCUXp0SlFVTXpSU3hMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZMR3RDUVVGclFpeERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhIUVVGSExGTkJRVk1zUTBGQlF6dEpRVU55UlN4UFFVRlBMRmRCUVZjc1EwRkJRenRIUVVOd1FqdERRVU5HTzBGQlEwUXNZMEZCWXl4SFFVRkhMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU03T3pzN1FVTTFSbTVETEZsQlFWa3NRMEZCUXpzN1FVRkZZaXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEU5QlFVOHNSVUZCUlN4WlFVRlpMRVZCUVVVN1JVRkRNME1zUzBGQlN5eEZRVUZGTEVsQlFVazdRMEZEV2l4RFFVRkRMRU5CUVVNN08wRkJSVWdzU1VGQlNTeGxRVUZsTEVkQlFVZDNSQ3huUWtGQk1rSXNRMEZCUXpzN1FVRkZiRVFzU1VGQlNTeG5Ra0ZCWjBJc1IwRkJSeXh6UWtGQmMwSXNRMEZCUXl4bFFVRmxMRU5CUVVNc1EwRkJRenM3UVVGRkwwUXNTVUZCU1N4WFFVRlhMRWRCUVVkRExGVkJRWFZDTEVOQlFVTTdPMEZCUlRGRExFbEJRVWtzV1VGQldTeEhRVUZITEhOQ1FVRnpRaXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZET3p0QlFVVjJSQ3hKUVVGSkxFOUJRVThzUjBGQlJ6VkNMRkZCUVRKQ0xFTkJRVU03TzBGQlJURkRMRWxCUVVrc1VVRkJVU3hIUVVGSExITkNRVUZ6UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRE96dEJRVVV2UXl4SlFVRkpMRlZCUVZVc1IwRkJSME1zVjBGQk9FSXNRMEZCUXpzN1FVRkZhRVFzU1VGQlNTeFhRVUZYTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTTdPMEZCUlhKRUxFbEJRVWtzVDBGQlR5eEhRVUZIUlN4UlFVRXlRaXhEUVVGRE96dEJRVVV4UXl4SlFVRkpMRkZCUVZFc1IwRkJSeXh6UWtGQmMwSXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenM3UVVGRkwwTXNTVUZCU1N4TFFVRkxMRWRCUVVkRkxFMUJRWGxDTEVOQlFVTTdPMEZCUlhSRExFbEJRVWtzVFVGQlRTeEhRVUZITEhOQ1FVRnpRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZET3p0QlFVVXpReXhKUVVGSkxGZEJRVmNzUjBGQlIyeENMRmxCUVN0Q0xFTkJRVU03TzBGQlJXeEVMRWxCUVVrc1dVRkJXU3hIUVVGSExITkNRVUZ6UWl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGRE96dEJRVVYyUkN4SlFVRkpMRk5CUVZNc1IwRkJSMVFzVlVGQk5rSXNRMEZCUXpzN1FVRkZPVU1zU1VGQlNTeFZRVUZWTEVkQlFVY3NjMEpCUVhOQ0xFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTTdPMEZCUlc1RUxFbEJRVWtzVTBGQlV5eEhRVUZIUml4VlFVRTJRaXhEUVVGRE96dEJRVVU1UXl4SlFVRkpMRlZCUVZVc1IwRkJSeXh6UWtGQmMwSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRenM3UVVGRmJrUXNTVUZCU1N4VFFVRlRMRWRCUVVkRUxGVkJRVFpDTEVOQlFVTTdPMEZCUlRsRExFbEJRVWtzVlVGQlZTeEhRVUZITEhOQ1FVRnpRaXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZET3p0QlFVVnVSQ3hKUVVGSkxFOUJRVThzUjBGQlIwWXNVVUZCTWtJc1EwRkJRenM3UVVGRk1VTXNTVUZCU1N4UlFVRlJMRWRCUVVjc2MwSkJRWE5DTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNN08wRkJSUzlETEVsQlFVa3NWMEZCVnl4SFFVRkhSaXhaUVVFclFpeERRVUZET3p0QlFVVnNSQ3hKUVVGSkxGbEJRVmtzUjBGQlJ5eHpRa0ZCYzBJc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlF6czdRVUZGZGtRc1UwRkJVeXh6UWtGQmMwSXNRMEZCUXl4SFFVRkhMRVZCUVVVc1JVRkJSU3hQUVVGUExFZEJRVWNzU1VGQlNTeEhRVUZITEVOQlFVTXNWVUZCVlN4SFFVRkhMRWRCUVVjc1IwRkJSeXhGUVVGRkxFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZPenRCUVVVdlJpeEpRVUZKTEU5QlFVOHNSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhQUVVGUExFVkJRVVVzVVVGQlVTeERRVUZETEU5QlFVOHNSVUZCUlN4UlFVRlJMRU5CUVVNc1QwRkJUeXhGUVVGRkxGbEJRVmtzUTBGQlF5eFBRVUZQTEVWQlFVVXNWVUZCVlN4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVkxFTkJRVU1zVDBGQlR5eEZRVUZGTEZWQlFWVXNRMEZCUXl4UFFVRlBMRVZCUVVVc1VVRkJVU3hEUVVGRExFOUJRVThzUlVGQlJTeFpRVUZaTEVOQlFVTXNUMEZCVHl4RlFVRkZMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6czdRVUZGYkU0c1pVRkJaU3hIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJUdEZRVU01UXl4VFFVRlRMRVZCUVVVc1dVRkJXU3hEUVVGRExFOUJRVThzUTBGQlF5eFRRVUZUTzBWQlEzcERMRTlCUVU4c1JVRkJSU3hQUVVGUE8wTkJRMnBDTEVOQlFVTXNRMEZCUXp0QlFVTklMR05CUVdNc1IwRkJSeXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZET3pzN096dEJRemxFYmtNN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRWEZDUVN4QlFVTkJMRUZCUlVFeVJDeEpRVUZOTEdsQ1FVRnBRaXhIUVVGSE8wVkJRM2hDTEUxQlFVMDdSVUZEVGl4VFFVRlRPMFZCUTFRc1VVRkJVVHRGUVVOU0xGbEJRVms3UlVGRFdpeFBRVUZQTzBOQlExSXNRMEZCUVRzN08wRkJSMFJGTEVsQlFVa3NhVUpCUVdsQ0xFTkJRVUU3UVVGRGNrSXNRVUZCVHl4VFFVRlRMR2RDUVVGblFpeEpRVUZKTzBWQlEyeERMRWxCUVVrc1QwRkJUeXhwUWtGQmFVSXNTMEZCU3l4WFFVRlhMRVZCUVVVN1NVRkROVU5HTEVsQlFVMHNSMEZCUnl4SFFVRkhMRTFCUVUwc1EwRkJReXhuUWtGQlowSXNRMEZCUVR0SlFVTnVReXhKUVVGSkxFZEJRVWNzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRkZCUVZFc1EwRkJReXhsUVVGbExFVkJRVVU3VFVGREwwTkJMRWxCUVUwc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF5eGxRVUZsTEVOQlFVRTdUVUZEZGtOQkxFbEJRVTBzVDBGQlR5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3VFVGRE4wTkJMRWxCUVUwc1VVRkJVU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1RVRkRMME5CTEVsQlFVMHNWVUZCVlN4SFFVRkhMRTFCUVUwc1EwRkJReXhwUWtGQmFVSXNTVUZCU1N4TlFVRk5MRU5CUVVNc1ZVRkJWU3hEUVVGQk8wMUJRMmhGTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExIbENRVUY1UWl4RFFVRkJPMDFCUTJoRUxGRkJRVkVzUTBGQlF5eFhRVUZYTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVFN1RVRkROMElzVFVGQlRTeERRVUZETEZsQlFWa3NRMEZCUXl4UlFVRlJMRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVUU3VFVGRGVrTXNhVUpCUVdsQ0xFZEJRVWNzVDBGQlR5eERRVUZETEZsQlFWa3NTMEZCU3l4RFFVRkRMRU5CUVVFN1RVRkRPVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRMUVVNM1FqdFRRVU5KTzAxQlEwZ3NhVUpCUVdsQ0xFZEJRVWNzUzBGQlN5eERRVUZCTzB0QlF6RkNPMGRCUTBZN1JVRkRSQ3hQUVVGUExHbENRVUZwUWp0RFFVTjZRanM3T3pzN1FVRkxSQ3hCUVVGUExGTkJRVk1zVjBGQlZ5eEZRVUZGTEU5QlFVOHNSVUZCYTBJN1JVRkRjRVFzVDBGQlR5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMSFZDUVVGMVFpeEZRVUZGTEVWQlFVVXNRMEZCUXp0RFFVTndSRHM3UVVGRlJFVXNTVUZCU1U4c1UwRkJUeXhIUVVGdFFpeEpRVUZKTEVOQlFVRTdPMEZCUld4RExFRkJRVThzVTBGQlV5eGhRVUZoTEVsQlFXRTdSVUZEZUVNc1NVRkJTVUVzVTBGQlR5eExRVUZMTEVsQlFVa3NSVUZCUlR0SlFVTndRaXhQUVVGUFFTeFRRVUZQTzBkQlEyWTdSVUZEUkZRc1NVRkJUU3hQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3UlVGRGNFUkJMRWxCUVUwc1dVRkJXU3hIUVVGSExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVRTdSVUZEYkVNc1dVRkJXU3hEUVVGRExFOUJRVThzUjBGQlJ5d3dRMEZCTUVNc1EwRkJRVHRGUVVOcVJWTXNVMEZCVHl4SFFVRkhMRmxCUVZrc1EwRkJReXhSUVVGUkxFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGQk8wVkJRM2hFTEU5QlFVOUJMRk5CUVU4N1EwRkRaanM3UVVGRlJGUXNTVUZCVFN4aFFVRmhMRWRCUVVjc2NVSkJRWEZDTEVOQlFVRTdRVUZETTBNc1FVRkJUeXhUUVVGVExGbEJRVmtzUlVGQlJTeEhRVUZITEVWQlFWVTdSVUZEZWtNc1QwRkJUeXhoUVVGaExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXp0RFFVTXZRanM3UVVGRlJFRXNTVUZCVFN4WFFVRlhMRWRCUVVjc2FVTkJRV2xETEVOQlFVRTdRVUZEY2tRc1FVRkJUeXhUUVVGVExHbENRVUZwUWl4RlFVRkZMRWRCUVVjc1JVRkJhMEk3UlVGRGRFUkJMRWxCUVUwc1MwRkJTeXhIUVVGSExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1JVRkRjRU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4RlFVRkZMRTlCUVU4c1JVRkJSU3hGUVVGRk8wVkJRM3BDUlN4SlFVRkpMRWxCUVVrc1IwRkJSeXhKUVVGSkxFTkJRVUU3UlVGRFppeEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSVHRKUVVOYUxFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1IwRkRhRUk3UlVGRFJDeFBRVUZQTEZWQlFWVXNRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRPME5CUXpsRE96dEJRVVZFTEZOQlFWTXNaVUZCWlN4SlFVRkpPMFZCUXpGQ0xFOUJRVzlDTEVkQlFVY3NaVUZCWlN4RlFVRkZPMFZCUVdoRExFbEJRVUVzUzBGQlN6dEZRVUZGTEVsQlFVRXNSMEZCUnl4WFFVRmFPMFZCUTA0c1QwRkJUenRKUVVOTUxFVkJRVVVzUlVGQlJTeExRVUZMTzBsQlExUXNSVUZCUlN4RlFVRkZMRXRCUVVzc1IwRkJSeXhIUVVGSE8wZEJRMmhDTzBOQlEwWTdPMEZCUlVRc1UwRkJVeXhWUVVGVkxFVkJRVVVzUjBGQlJ5eEZRVUZGTEV0QlFVc3NSVUZCUlR0RlFVTXZRaXhMUVVGTExFZEJRVWNzUzBGQlN5eEpRVUZKTEVOQlFVTXNRMEZCUVR0RlFVTnNRa1lzU1VGQlRTeEpRVUZKTEVkQlFVY3NSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVUU3UlVGRE4wTkZMRWxCUVVrc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1MwRkJTeXhIUVVGSExFZEJRVWNzUjBGQlJ5eEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkJPenRGUVVWMlJDeEpRVUZKTEUxQlFVMHNTMEZCU3l4RFFVRkRMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU1zU1VGQlNTeG5Ra0ZCWjBJc1JVRkJSU3hGUVVGRk8wbEJRMnBFTEUxQlFVMHNSMEZCUnl4SFFVRkhMRU5CUVVFN1IwRkRZanRGUVVORUxFOUJRVThzVFVGQlRUdERRVU5rT3p0QlFVVkVMRk5CUVZNc1ZVRkJWU3hGUVVGRkxFZEJRVWNzUlVGQlZTeEpRVUZKTEVWQlFXdENPMFZCUTNSRVJpeEpRVUZOTEZsQlFWa3NSMEZCUnl4bFFVRmxMRVZCUVVVc1EwRkJRVHRGUVVOMFF5eFBRVUZQTEZWQlFWVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NTVUZCU1R0RFFVTnVSRHM3UVVGRlJDeEJRVUZQTEZOQlFWTXNaVUZCWlN4RlFVRkZMRkZCUVZFc1JVRkJWU3hSUVVGUkxFVkJRV3RDTzBWQlF6TkZMRWxCUVVrc1dVRkJXU3hEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTzBsQlF6RkNMRTlCUVU4c1VVRkJVVHRIUVVOb1FqczdPenM3T3p0RlFVOUVRU3hKUVVGTkxGRkJRVkVzUjBGQlJ5eHBRa0ZCYVVJc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlFUdEZRVU0xUXl4SlFVRkpMRkZCUVZFc1JVRkJSU3hGUVVGRkxFOUJRVThzVVVGQlVTeEZRVUZGT3pzN096czdPenM3UlVGVGFrTkJMRWxCUVUwc1RVRkJUU3hIUVVGSExIbENRVUY1UWl4RFFVRkJPMFZCUTNoRExFbEJRVWtzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1JVRkJSVHRKUVVONlFrRXNTVUZCVFN4WlFVRlpMRWRCUVVjc1pVRkJaU3hGUVVGRkxFTkJRVUU3U1VGRGRFTkJMRWxCUVUwc1IwRkJSeXhIUVVGSExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVTXNUVUZCVFN4RlFVRkZMRlZCUVZVc1EwRkJReXhGUVVGRkxFVkJRVVVzUlVGQlJTeEZRVUZGTEVWQlFVVTdUVUZEZUVSQkxFbEJRVTBzUjBGQlJ5eEhRVUZITEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhaUVVGWkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVRTdUVUZETjBNc1QwRkJUeXhWUVVGVkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTVUZCU1R0TFFVTTVRaXhEUVVGRExFTkJRVUU3U1VGRFJpeFBRVUZQTEVkQlFVYzdSMEZEV0RzN08wVkJSMFFzVDBGQlR5eFJRVUZSTzBOQlEyaENPenRCUVVWRUxFRkJRVThzVTBGQlV5eFZRVUZWTEVWQlFVVXNTMEZCU3l4RlFVRlZPMFZCUTNwRFFTeEpRVUZOTEZGQlFWRXNSMEZCUnl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3TzBWQlJXcERRU3hKUVVGTkxFbEJRVWtzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkJPMFZCUXpGQ0xFbEJRVWtzU1VGQlNTeEZRVUZGTzBsQlExSXNVVUZCVVN4RFFVRkRMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVUU3U1VGRE4wSXNVVUZCVVN4RFFVRkRMRlZCUVZVc1IwRkJSeXhKUVVGSkxFTkJRVUU3U1VGRE1VSXNVVUZCVVN4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVUU3UjBGRGRrSTdSVUZEUkN4UFFVRlBMRkZCUVZFN1EwRkRhRUk3TzBGQlJVUXNRVUZCVHl4VFFVRlRMR1ZCUVdVc1JVRkJSU3hSUVVGUkxFVkJRVlVzVVVGQlVTeEZRVUZyUWp0RlFVTXpSU3hQUVVGbExFZEJRVWNzWlVGQlpTeEZRVUZGTzBWQlFUTkNMRWxCUVVFc1MwRkJTeXhoUVVGUU8wVkJRMDRzVDBGQlR5eFJRVUZSTEVkQlFVY3NTMEZCU3l4SFFVRkhMRWxCUVVrN1EwRkRMMEk3T3pzN096dEJRVTFFTEVGQlFVOHNVMEZCVXl4alFVRmpMRVZCUVVVc1MwRkJTeXhGUVVGTk8wVkJRM3BEUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVUU3UlVGRFpDeExRVUZMUVN4SlFVRk5MRWRCUVVjc1NVRkJTU3hMUVVGTExFVkJRVVU3U1VGRGRrSkJMRWxCUVUwc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0SlFVTjBRaXhKUVVGSkxHbENRVUZwUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlR0TlFVTjJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkJPMDFCUTJRc1VVRkJVVHRMUVVOVU8wbEJRMFFzVVVGQlVTeFBRVUZQTEVkQlFVYzdUVUZEYUVJc1MwRkJTeXhSUVVGUk8xRkJRMWdzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMR1ZCUVdVc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVRTdVVUZEY0VNc1MwRkJTenROUVVOUUxFdEJRVXNzVVVGQlVUdFJRVU5ZTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhsUVVGbExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkJPMUZCUTNCRExFdEJRVXM3VFVGRFVEdFJRVU5GTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVUU3VVVGRFpDeExRVUZMTzB0QlExSTdSMEZEUmp0RlFVTkVMRTlCUVU4c1IwRkJSenREUVVOWU96czdPenRCUVV0RUxFRkJRVThzVTBGQlV5eGxRVUZsTEVWQlFVVXNSMEZCUnl4RlFVRnZRanRGUVVOMFJFVXNTVUZCU1N4UlFVRlJMRWRCUVVjc1JVRkJSU3hEUVVGQk8wVkJRMnBDTEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVc1JVRkJSU3hQUVVGUExGRkJRVkVzUlVGQlJUdEZRVU0zUWtZc1NVRkJUU3haUVVGWkxFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4bFFVRmxPMDlCUTNwRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1R0UFFVTjBRaXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNRMEZCUVR0RlFVTjRRaXhKUVVGSkxGbEJRVmtzU1VGQlNTeFpRVUZaTEVOQlFVTXNTMEZCU3l4RFFVRkRMR3RFUVVGclJDeERRVUZETEVWQlFVVTdTVUZETVVZc1VVRkJVU3hIUVVGSExGbEJRVmtzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlZTeEhRVUZITEVWQlFVVXNSMEZCUnl4RlFVRkZPMDFCUTNoR0xFTkJRVU1zVjBGQlZ5eEZRVUZGTEU5QlFVOHNSVUZCUlN4UlFVRlJMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeEpRVUZKTEVWQlFVVTdVVUZEZGtRc1NVRkJTU3hKUVVGSkxFMUJRVTBzUTBGQlF5eEpRVUZKTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTzFWQlEyNURMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVRTdVMEZEYUVJN1QwRkRSaXhEUVVGRExFTkJRVUU3VFVGRFJpeFBRVUZQTEVkQlFVYzdTMEZEV0N4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGQk8wZEJRMUE3UlVGRFJDeFBRVUZQTEZGQlFWRTdRMEZEYUVJN096czdPMEZCUzBRc1FVRkJUeXhUUVVGVExHVkJRV1VzUlVGQlJTeEhRVUZITEVWQlFXTTdSVUZEYUVRc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxFZEJRVWNzUlVGQlJTeEhRVUZITEVWQlFVVTdTVUZEYWtRc1QwRkJUeXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWRCUVVjN1IwRkROVUlzUlVGQlJTeEZRVUZGTEVOQlFVTTdRMEZEVURzN096czdPenM3T3pzN096dEJRV0ZFTEVGQlFVOHNVMEZCVXl4WlFVRlpMRVZCUVVVc1IwRkJSeXhGUVVGbExFdEJRVXNzUlVGQlRTeFBRVUZQTEVWQlFXbENPMFZCUTJwR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlN4TlFVRk5MRVZCUVVVN1JVRkRkRUpGTEVsQlFVa3NVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJRVHRGUVVOcVFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZPMGxCUTFvc1VVRkJVU3hIUVVGSExHVkJRV1VzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0SFFVTm9RenRGUVVORUxFdEJRVXRHTEVsQlFVMHNSMEZCUnl4SlFVRkpMRXRCUVVzc1JVRkJSVHRKUVVOMlFrRXNTVUZCVFN4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlEzUkNMRWxCUVVrc1IwRkJSeXhGUVVGRk8wMUJRMUFzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJRVHRMUVVOd1FqdEhRVU5HTzBWQlEwUkJMRWxCUVUwc1RVRkJUU3hIUVVGSExHVkJRV1VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0RlFVTjRReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEdWQlFXVXNSMEZCUnl4TlFVRk5MRU5CUVVFN1JVRkRiRU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRWRCUVVjc1RVRkJUU3hEUVVGQk8wVkJReTlDTEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExFMUJRVTBzUTBGQlFUdERRVU0zUWpzN096czdRVUZMUkN4QlFVRlBMRk5CUVZNc1lVRkJZU3hGUVVGRkxFZEJRVWNzUlVGQlpTeExRVUZMTEVWQlFXZENPMFZCUTNCRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNSVUZCUlN4TlFVRk5MRVZCUVVVN1JVRkRkRUpCTEVsQlFVMHNVVUZCVVN4SFFVRkhMR1ZCUVdVc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdEZRVU55UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExGTkJRVk1zUlVGQlJUdEpRVU4yUWl4UlFVRlJMRU5CUVVNc1UwRkJVeXhIUVVGSExEUkNRVUUwUWl4RFFVRkJPMGRCUTJ4RU8wVkJRMFFzVVVGQlVTeERRVUZETEZOQlFWTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1UwRkJVeXhEUVVGRExFOUJRVThzUTBGQlF5eGxRVUZsTEVWQlFVVXNWVUZCVlN4RlFVRkZMRVZCUVVVN1NVRkROMFVzVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhMUVVGTExFTkJRVU1zUjBGQlJ5eEpRVUZKTzBkQlEzWkRMRU5CUVVNc1EwRkJRVHRGUVVOR1FTeEpRVUZOTEUxQlFVMHNSMEZCUnl4bFFVRmxMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVUU3UlVGRGVFTXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhsUVVGbExFZEJRVWNzVFVGQlRTeERRVUZCTzBWQlEyeERMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeEhRVUZITEUxQlFVMHNRMEZCUVR0RlFVTXZRaXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVFN1EwRkROMEk3T3pzN096dEJRVTFFTEVGQlFVOHNVMEZCVXl4aFFVRmhMRVZCUVVVc1NVRkJTU3hGUVVGbExFVkJRVVVzUlVGQlpTeEhRVUZITEVWQlFYVkNPMFZCUXpOR1JTeEpRVUZKTEVkQlFVY3NRMEZCUVR0RlFVTlFMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVU3U1VGRFVpeEhRVUZITEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhsUVVGbE8xTkJRek5DTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1dVRkJXVHRUUVVOMlFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJRVHRIUVVNeFFqdFBRVU5KTzBsQlEwaEdMRWxCUVUwc1QwRkJUeXhIUVVGSExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0SlFVTnlReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRVZCUVVVc1RVRkJUU3hGUVVGRk8wbEJRemRDUVN4SlFVRk5MRXRCUVVzc1IwRkJSeXhsUVVGbExFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVRTdTVUZEYWtNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRKUVVONlFpeEhRVUZITEVkQlFVY3NaVUZCWlN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGQk8wZEJRemRDTzBWQlEwUXNSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhsUVVGbExFZEJRVWNzUjBGQlJ5eERRVUZCTzBWQlF6bENMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldTeEhRVUZITEVkQlFVY3NRMEZCUVR0RlFVTXpRaXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEZOQlFWTXNSMEZCUnl4SFFVRkhMRU5CUVVFN1EwRkRla0k3T3pzN096dEJRVTFFTEVGQlFVOHNVMEZCVXl4TlFVRk5MRVZCUVVVc1MwRkJTeXhGUVVGVk8wVkJRM0pEUVN4SlFVRk5MRTFCUVUwc1IwRkJSeXhuUkVGQlowUXNRMEZCUVR0RlFVTXZSRUVzU1VGQlRTeE5RVUZOTEVkQlFVY3NaME5CUVdkRExFTkJRVUU3UlVGREwwTkJMRWxCUVUwc1NVRkJTU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVFN1JVRkRNME5CTEVsQlFVMHNTVUZCU1N4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVUU3UlVGRE1VSXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFZEJRVWNzVTBGQlVTeEhRVUZGTEV0QlFVc3NLMEpCUVRKQ0xFTkJRVUU3UlVGREwwUXNTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVRTdSVUZET1VJc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eExRVUZMTEVkQlFVY3NSVUZCUlN4RFFVRkJPMFZCUTJoRUxFbEJRVWtzU1VGQlNTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk96dEZRVVU1UWtVc1NVRkJTU3hMUVVGTExFTkJRVUU3UlVGRFZDeExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlFUdEZRVU16UWl4SlFVRkpMRXRCUVVzc1JVRkJSVHRKUVVOVUxFOUJRVTg3VFVGRFRDeERRVUZETEVWQlFVVXNVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTTdUVUZEZWtJc1EwRkJReXhGUVVGRkxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRE8wMUJRM3BDTEVOQlFVTXNSVUZCUlN4UlFVRlJMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXp0TFFVTXhRanRIUVVOR08wVkJRMFFzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3UlVGRE0wSXNTVUZCU1N4TFFVRkxMRVZCUVVVN1NVRkRWQ3hQUVVGUE8wMUJRMHdzUTBGQlF5eEZRVUZGTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03VFVGRGNrSXNRMEZCUXl4RlFVRkZMRkZCUVZFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTTdUVUZEY2tJc1EwRkJReXhGUVVGRkxGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRkRUk3UjBGRFJqdERRVU5HT3pzN096czdRVUZOUkN4QlFVRlBMRk5CUVZNc2FVSkJRV2xDTEVWQlFVVXNSVUZCUlN4RlFVRlhPMFZCUXpsRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUlN4TlFVRk5MRVZCUVVVN1JVRkRia0pHTEVsQlFVMHNWMEZCVnl4SFFVRkhMRkZCUVZFc1EwRkJReXhYUVVGWExFTkJRVUU3UlVGRGVFTkJMRWxCUVUwc1IwRkJSeXhIUVVGSExGZEJRVmNzUTBGQlF5eE5RVUZOTEVOQlFVRTdSVUZET1VJc1MwRkJTMFVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eEZRVUZGTEVWQlFVVTdTVUZETlVKR0xFbEJRVTBzVlVGQlZTeEhRVUZITEZkQlFWY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOcVF5eEpRVUZKTEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1JVRkJSU3hMUVVGTExFVkJRVVVzUlVGQlJUdE5RVU5zUXl4UFFVRlBMRlZCUVZVN1MwRkRiRUk3UjBGRFJqdERRVU5HT3p0QlFVVkVMRk5CUVZNc2NVSkJRWEZDTEVWQlFVVXNVVUZCVVN4RlFVRkZPMFZCUTNoRFFTeEpRVUZOTEVkQlFVY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1RVRkJUU3hEUVVGQk8wVkJRek5DUlN4SlFVRkpMRXRCUVVzc1IwRkJSeXhEUVVGRExFTkJRVUU3UlVGRFlpeExRVUZMUVN4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eEhRVUZITEVkQlFVY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRKUVVNMVFpeExRVUZMTEVsQlFVa3NVVUZCVVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGQk8wZEJRMjVFTzBWQlEwUXNUMEZCVHl4TFFVRkxPME5CUTJJN096czdPMEZCUzBRc1FVRkJUeXhUUVVGVExHRkJRV0VzUlVGQlJTeEhRVUZITEVWQlFXVTdSVUZETDBOR0xFbEJRVTBzVVVGQlVTeEhRVUZITEVkQlFVY3NRMEZCUXl4UlFVRlJMRU5CUVVFN1JVRkROMElzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlR0SlFVTmlMRTlCUVU4c1IwRkJSeXhEUVVGRExIRkNRVUZ4UWl4RlFVRkZMRU5CUVVNc1MwRkJTenRIUVVONlF6dEZRVU5FTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1NVRkRWaXhQUVVGUExIRkNRVUZ4UWl4RFFVRkRMRkZCUVZFc1EwRkJRenRIUVVOMlF6dEZRVU5FUVN4SlFVRk5MRXRCUVVzc1IwRkJSeXhSUVVGUkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVRTdSVUZEY0VNc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSVHRKUVVNM1FpeFBRVUZQTEhGQ1FVRnhRaXhEUVVGRExGRkJRVkVzUTBGQlF6dEhRVU4yUXp0RlFVTkVMRXRCUVVzc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRGUVVNM1FpeFBRVUZQTEV0QlFVc3NRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVUZETEV0QlFVczdRMEZETTBNN08wRkRhbGhFT3pzN096czdPenM3T3pzN096czdPenM3UVVGclFrRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRWE5DT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZEZGtKMFFqczdPenM3T3pzN096czdPenM3T3pzN08wRkJhMEpCTEVGQlJVRXNRVUZEUVRzN096czdRVUZQUVN4QlFVRlBMRk5CUVZNc1QwRkJUeXhGUVVGRkxGbEJRVmtzUlVGQlJTeFBRVUZQTEVWQlFVVTdSVUZET1VOQkxFbEJRVTBzVjBGQlZ5eEhRVUZITEU5QlFVOHNRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVkQlFVY3NVMEZCVXl4RFFVRkRMRTlCUVU4c1EwRkJRVHRGUVVNNVJVRXNTVUZCVFN4alFVRmpMRWRCUVVjc1QwRkJUeXhEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFZEJRVWNzU1VGQlNTeERRVUZCTzBWQlF6TkZSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRMRWxCUVVrc1EwRkJRVHRGUVVNMVFpeEpRVUZKTEUxQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc2NVSkJRWEZDTEVOQlFVTXNSVUZCUlR0SlFVTjJReXhOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZCTzBkQlEyWTdUMEZEU1N4SlFVRkpMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVTdTVUZEYWtNc1RVRkJUU3hIUVVGSExGTkJRVk1zUTBGQlFUdEhRVU51UWp0RlFVTkVSaXhKUVVGTkxGTkJRVk1zUjBGQlJ5eFBRVUZQTEVOQlFVTXNSVUZCUlN4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVUU3UlVGRGVFTkJMRWxCUVUwc1IwRkJSeXhIUVVGSE8wbEJRMVlzVVVGQlVTeEZRVUZGTEV0QlFVczdTVUZEWml4WFFVRlhMRVZCUVVVc1UwRkJNRUk3U1VGRGRrTXNVMEZCVXl4RlFVRkZMRk5CUVZNc1EwRkJReXhUUVVGVE8wbEJRemxDTEU5QlFVOHNSVUZCUlN4WFFVRlhPMGxCUTNCQ0xGVkJRVlVzUlVGQlJTeGpRVUZqTzBsQlF6RkNMRkZCUVVFc1RVRkJUVHRKUVVOT0xGZEJRVUVzVTBGQlV6dEpRVU5VTEZkQlFWY3NSVUZCUlN4UFFVRlBMRU5CUVVNc1JVRkJSU3hEUVVGRExFbEJRVWtzU1VGQlNTeEpRVUZKTzBkQlEzSkRMRU5CUVVFN096czdSVUZKUkN4UFFVRlBMRTFCUVUwc1EwRkJReXhIUVVGSExFVkJRVVVzV1VGQldTeERRVUZETzBOQlEycERPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVEJDUkN4TlFVRk5MRU5CUVVNc1lVRkJZU3hIUVVGSExFOUJRVThzUTBGQlExVXNUVUZCV1N4RlFVRkZMRVZCUVVVc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVRzN1FVTXZSVGxFT3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFXOUNRU3hCUVVOQkxFRkJSVUZXTEVsQlFVMHNWMEZCVnl4SFFVRkhMRVZCUVVVc1EwRkJRVHRCUVVOMFFrRXNTVUZCVFN4TlFVRk5MRWRCUVVjc1JVRkJSU3hEUVVGQk96dEJRVVZxUWtFc1NVRkJUVmNzVFVGQlNTeEhRVUZITzBWQlExZ3NUMEZCVHl4RlFVRkZMRWxCUVVrN1JVRkRZaXhQUVVGQkxFdEJRVXM3TzBWQlJVd3NUVUZCVFN4RlFVRkZPMGxCUTA0c1IwRkJSeXhGUVVGRkxFMUJRVTBzUTBGQlF5eGhRVUZoTzBsQlEzcENMRk5CUVZNc1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNUdEhRVU42UWpzN1JVRkZSQ3hYUVVGWExFVkJRVVVzUlVGQlJUdEZRVU5tTEZGQlFWRXNSVUZCUlN4WFFVRlhPenRGUVVWeVFpeExRVUZMTEVWQlFVVTdTVUZEVEN4UFFVRlBMRVZCUVVVc1JVRkJSVHRKUVVOWUxFOUJRVThzUlVGQlJTeEZRVUZGTzBsQlExZ3NVMEZCVXl4RlFVRkZMRVZCUVVVN1NVRkRZaXhsUVVGbExFVkJRVVVzUlVGQlJUdEpRVU51UWl4VFFVRlRMRVZCUVVVc1JVRkJSVHRKUVVOaUxFbEJRVWtzUlVGQlJTeEZRVUZGTzBkQlExUTdPMFZCUlVRc1VVRkJVU3hGUVVGRk8wbEJRMUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdSMEZEVkRzN1JVRkZSQ3hoUVVGaExIZENRVUZCTEVWQlFVVXNWVUZCVlN4RlFVRkZPMGxCUTNwQ1dDeEpRVUZOTEU5QlFVOHNSMEZCUjFjc1RVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGxRVUZsTEVOQlFVRTdTVUZETVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVOQlFVTXNSVUZCUlR0TlFVTjRRaXhQUVVGUExFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMHRCUTNoQ08wbEJRMFFzVDBGQlR5eERRVUZETEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVFN1NVRkRja0lzVDBGQlR5eFhRVUZYTEVOQlFVTXNWVUZCVlN4RFFVRkRPMGRCUXk5Q096dEZRVVZFTEdOQlFXTXNlVUpCUVVFc1NVRkJWenM3T3p0SlFVTjJRaXhQUVVGUExFOUJRVUVzU1VGQlNTeERRVUZCTEVOQlFVTXNhVUpCUVdsQ0xFMUJRVUVzUTBGQlF5eExRVUZCTEVsQlFVOHNRMEZCUXp0WlFVRkJPMGRCUTNaRE96dEZRVVZFTEU5QlFVOHNhMEpCUVVFc1JVRkJSU3hQUVVGWkxFVkJRVVU3Y1VOQlFWQXNSMEZCUnl4RlFVRkZPenRKUVVOdVFsZ3NTVUZCVFN4TFFVRkxMRWRCUVVjc1EwRkJReXhQUVVGUExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNTMEZCU3l4RFFVRkRMRzFEUVVGdFF5eERRVUZETEVOQlFVRTdTVUZEZGtVc1NVRkJTU3hMUVVGTExFVkJRVVU3VFVGRFZFRXNTVUZCVFN4SlFVRkpMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzAxQlEzSkNRU3hKUVVGTkxFZEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1RVRkRjRUpGTEVsQlFVa3NUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdE5RVU55UWl4TlFVRk5MRWRCUVVjc1RVRkJUU3hKUVVGSkxFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGQk8wMUJRelZETEZGQlFWRXNTVUZCU1R0UlFVTldMRXRCUVVzc1YwRkJWenRWUVVOa0xFOUJRVThzVDBGQlR5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExGZEJRVmM3VVVGRGNrUXNTMEZCU3l4UlFVRlJPMVZCUTFoR0xFbEJRVTBzVFVGQlRTeEhRVUZITEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRWUVVNdlFpeFBRVUZQTEUxQlFVMHNTVUZCU1N4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1RVRkJUVHRQUVVONFJEdExRVU5HTzFOQlEwazdUVUZEU0N4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUVzYTBSQlFXbEVMRWRCUVVVc1QwRkJUeXhEUVVGRkxFTkJRVU1zUTBGQlFUdE5RVU14UlN4UFFVRlBMRWxCUVVrN1MwRkRXanRIUVVOR096czdPenM3UlVGTlJDeHRRa0ZCYlVJc09FSkJRVUVzUlVGQlJTeFJRVUZSTEVWQlFVVTdTVUZETjBJc1NVRkJTU3hEUVVGRExGRkJRVkVzV1VGQldTeEhRVUZITEVWQlFVVTdUVUZETlVJc1FVRkJTU3hCUVVGelF5eEJRVWN4UXl4TlFVRk5PMHRCUTFBN1NVRkRSRUVzU1VGQlRTeEpRVUZKTEVkQlFVY3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJRVHRKUVVNelFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJUdE5RVU4wUWl4QlFVRkpMRUZCUVhORExFRkJSekZETEUxQlFVMDdTMEZEVUR0SlFVTkVMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzBkQlF6TkRPenM3UlVGSFJDeFBRVUZQTEd0Q1FVRkJMRWxCUVZjN096czdTVUZEYUVJc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eDVSa0ZCYjBZc1EwRkJSU3hEUVVGQk8wbEJRMnhITEU5QlFVOHNUMEZCUVN4SlFVRkpMRU5CUVVFc1EwRkJReXhoUVVGaExFMUJRVUVzUTBGQlF5eExRVUZCTEVsQlFVOHNRMEZCUXp0WlFVRkJPMGRCUTI1RE96czdPMFZCU1VRc2FVSkJRV2xDTERSQ1FVRkJMRVZCUVVVc1NVRkJTU3hGUVVGRkxFMUJRVTBzUlVGQlJTeEpRVUZKTEVWQlFVVTdTVUZEY2tNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlR0TlFVTjBRaXhYUVVGWExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkJPMHRCUTNaQ08wbEJRMFFzU1VGQlNTeERRVUZETEVOQlFVTXNTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFdEJRVXNzVFVGQlRTeEZRVUZGTzAxQlEzWkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVRTdTMEZETTBJN1NVRkRlVUlzTkVKQlFVRTdUVUZEZUVJc1NVRkJTU3hOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMUZCUXpsQ0xGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhaUVVGWk8xVkJRMjVEUVN4SlFVRk5MRTFCUVUwc1IwRkJSMWNzVFVGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVFN1ZVRkRia01zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHRaUVVOcVFpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3hEUVVGQk8xZEJRMnhDTzFWQlEwUllMRWxCUVUwc1UwRkJVeXhIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0VlFVTTVRaXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMWxCUTI1Q0xGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1YwRkRia0k3VlVGRFJDeFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJRVHRWUVVOb1FpeFBRVUZQTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU5YTEUxQlFVa3NSVUZCUlN4VFFVRlRMRU5CUVVNN1UwRkRNVU1zUTBGQlFUdFBRVU5HTzB0QlEwWTdPMGxCWmtRc1MwRkJTMWdzU1VGQlRTeEhRVUZITEVsQlFVa3NUVUZCVFN4RlFXVjJRaXhaUVVGQk8wZEJRMFk3TzBWQlJVUXNhVUpCUVdsQ0xEUkNRVUZCTEVWQlFVVXNTVUZCU1N4RlFVRkZMRk5CUVZNc1JVRkJSVHRKUVVOc1F5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSVHROUVVOcVFpeFBRVUZQTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc2EwWkJRV3RHTEVOQlFVTTdTMEZEZGtjN1NVRkRSQ3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRKUVVNeFFpeEpRVUZKTEZOQlFWTXNRMEZCUXl4SlFVRkpMRVZCUVVVN1RVRkRiRUpCTEVsQlFVMHNSMEZCUnl4SFFVRkhMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEhWQ1FVRjFRaXhGUVVGRkxGVkJRVlVzUTBGQlF5eEZRVUZGTzFGQlEzWkZMRTlCUVU4c1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVWQlFVVXNSMEZCUjFjc1RVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrN1QwRkRla1FzUTBGQlF5eERRVUZCTzAxQlEwWkRMRk5CUVdVc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlFTeFhRVUZWTEVkQlFVVXNTVUZCU1N4RFFVRkZMRU5CUVVNc1EwRkJRVHROUVVONFF5eFBRVUZQTEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVFN1MwRkRkRUk3U1VGRFJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzVTBGQlV5eERRVUZETEVOQlFVRTdSMEZEZUVNN096dEZRVWRFTEU5QlFVOHNhMEpCUVVFc1NVRkJTU3hGUVVGRk96czdSVUZIWWl4TlFVRk5MRVZCUVVVN1NVRkRUaXhsUVVGbExEQkNRVUZCTEVWQlFVVXNVVUZCVVN4RlFVRkZMRWxCUVVrc1JVRkJSU3hUUVVGVExFVkJRVVU3VFVGRE1VTXNTVUZCU1N4UFFVRlBMRkZCUVZFc1MwRkJTeXhWUVVGVkxFVkJRVVU3VVVGRGJFTXNUMEZCVHl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRE8wOUJRM1JDTzAxQlEwUXNUMEZCVHl4SlFVRkpPMHRCUTFvN1IwRkRSanM3TzBWQlIwUXNUMEZCVHl4clFrRkJRU3hGUVVGRkxFMUJRVTBzUlVGQlJUdEpRVU5tTEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUU3UjBGRGJFSTdRMEZEUml4RFFVRkJPenRCUVVWRUxFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTkVMRTFCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeEZRVUZGTEZWQlFWVXNSVUZCUlR0RlFVTndSQ3hIUVVGSExHTkJRVUVzU1VGQlNTeEZRVUZGTEU5QlFVOHNUVUZCVFN4RlFVRkZPME5CUTNwQ0xFTkJRVU03TzBOQlJVUXNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hOUVVGTkxFVkJRVVVzUzBGQlN5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGVkxFMUJRVTBzUlVGQlJUdEZRVU40UkVFc1RVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEZsQlFXMUNPenM3TzBsQlEyaERMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTzAxQlEyUXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhKUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUVR0TFFVTXZRanRKUVVORUxFOUJRVThzVDBGQlFTeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkJMRU5CUVVNc1EwRkJRU3hIUVVGRkxFZEJRVVVzVFVGQlRTeERRVUZGTEVOQlFVTXNUVUZCUVN4RFFVRkRMRXRCUVVFc1NVRkJUeXhEUVVGRE8xbEJRVUU3UjBGRGVFTXNRMEZCUVR0RFFVTkdMRU5CUVVNc1EwRkJRU3hCUVVWR0xFRkJRVzFDT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRCUTJ4TGJrSXNRVUZCVDFnc1NVRkJUU3hKUVVGSkxFZEJSV0lzVFVGQlRTeERRVUZETEZWQlFWVXNSMEZCUnp0RlFVTjBRaXhKUVVGSkxFVkJRVVVzUlVGQlJUdERRVU5VTEVOQlFVRTdPMEZCUlVSQkxFbEJRVTBzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUVRzN1FVRkZaQ3hUUVVGVExFMUJRVTBzU1VGQldUdEZRVU42UWtFc1NVRkJUU3hYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUVR0RlFVTjBReXhQUVVGUExGZEJRVmNzU1VGQlNTeFhRVUZYTEVOQlFVTXNSMEZCUnl4SFFVRkhMRmRCUVZjc1EwRkJReXhIUVVGSExFVkJRVVVzUjBGQlJ5eEpRVUZKTEVsQlFVa3NSVUZCUlN4RFFVRkRMRTlCUVU4c1JVRkJSVHREUVVOcVJpeEJRVVZFTEVGQlFVOHNRVUZGVGl4QlFVVkVMRUZCUVU4c1FVRk5UanM3UVVNdlEwUTdPenM3T3pzN096czdPenM3T3pzN096dEJRV3RDUVN4QlFXRkJPenRCUVVkQlJTeEpRVUZKTEZGQlFWRXNSMEZCUnl4RFFVRkRMRU5CUVVFN096czdRVUZKYUVJc1FVRkJUeXhUUVVGVExHVkJRV1VzU1VGQlNUdEZRVU5xUXl4QlFVRkpMRUZCUVhORExFRkJSekZEUml4SlFVRk5MREpDUVVFeVFpeEhRVUZITEVWQlFVVXNRMEZCUVR0RlFVTjBRMEVzU1VGQlRTeGpRVUZqTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVjBGQlZ5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhWUVVGVkxGVkJRVlVzUlVGQlJUdEpRVU42Uml4UFFVRlBMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zV1VGQldTeERRVUZETEdOQlFXTXNRMEZCUXl4TFFVRkxMRWRCUVVjN1IwRkRha1VzUTBGQlF5eERRVUZCT3p0RlFVVkdRU3hKUVVGTkxFZEJRVWNzUjBGQlJ5eExRVUZMTEVOQlFVTXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJRenRMUVVOdVF5eE5RVUZOTEVOQlFVTXNWVUZCUXl4SFFVRkhMRVZCUVVVc1ZVRkJWU3hGUVVGRk8wMUJRM2hDTEZWQlFWVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1dVRkJXU3hEUVVGRExHTkJRV01zUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUVRzN096czdPenM3VFVGUmNFUTdPMUZCUlVVc1EwRkJReXhWUVVGVkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRVZCUVVVc1MwRkJTeXhOUVVGTkxFTkJRVU03VjBGRGNFUXNRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExGZEJRVmM3TzFkQlJXcERMRlZCUVZVc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eEZRVUZGTzFGQlEzSkVMRTlCUVU4c1IwRkJSenRQUVVOWU96czdPMDFCU1VSQkxFbEJRVTBzVFVGQlRTeEhRVUZITEZkQlFWY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1UwRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdE5RVU01UlVFc1NVRkJUU3hIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUVR0TlFVTjZRa0VzU1VGQlRTeExRVUZMTEVkQlFVY3NSVUZCUlN4RFFVRkJPMDFCUTJoQ0xFdEJRVXRGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMUZCUXpWQ1JpeEpRVUZOTEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRGNrSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMVZCUXpsQ0xGRkJRVkU3VTBGRFZEczdPenM3T3pzN096czdVVUZYUkVFc1NVRkJUU3hMUVVGTExFZEJRVWNzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4M1JFRkJkMFFzUTBGQlF5eERRVUZCTzFGQlEycEdMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVU3T3p0VlFVZFdMRTlCUVU4c1IwRkJSenRUUVVOWU8xRkJRMFJCTEVsQlFVMHNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExGVkJRVUVzUTBGQlF5eEZRVUZETEZOQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGQkxFTkJRVU1zUTBGQlFUdFJRVU55UkVFc1NVRkJUU3hQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhQUVVGUExFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVFN1VVRkRjRVJGTEVsQlFVa3NVMEZCVXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRSUVVOcVFrWXNTVUZCVFN4VFFVRlRMRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlFUdFJRVU12UWl4UFFVRlBMRk5CUVZNc1IwRkJSeXhUUVVGVExFVkJRVVU3VlVGRE5VSXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJRenRaUVVOVUxGbEJRVmtzUlVGQlJTeE5RVUZOTEVOQlFVTXNVMEZCVXl4RFFVRkRPMWxCUXk5Q0xGTkJRVUVzVDBGQlR6dFhRVU5TTEVOQlFVTXNRMEZCUVR0VlFVTkdMRk5CUVZNc1JVRkJSU3hEUVVGQk8xTkJRMW83VDBGRFJqdE5RVU5FTEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNTVUZCU1N4RlFVRkRPMUZCUXpkQ1FTeEpRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hKUVVGSkxFVkJRVVVzUTBGQlFUdFJRVU40UTBVc1NVRkJTU3hSUVVGUkxFZEJRVWNzUzBGQlN5eERRVUZCTzFGQlEzQkNMRWxCUVVrc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eHZRMEZCYjBNc1EwRkJReXhGUVVGRk8xVkJRM2hFTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVFN1UwRkRhRUk3VVVGRFJFWXNTVUZCVFN4UlFVRlJMRWRCUVVjc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRE8xZEJRMnhFTEUxQlFVMHNRMEZCUXl4VlFVRkRMRkZCUVZFc1JVRkJSU3hUUVVGVExFVkJRVVU3V1VGRE5VSXNVMEZCVXl4SFFVRkhMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlFUdFpRVU0xUWl4SlFVRkpMRk5CUVZNc1NVRkJTU3hUUVVGVExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhGUVVGRk8yTkJRemxEUVN4SlFVRk5MRTFCUVUwc1IwRkJSeXhUUVVGVExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZITEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVc1IwRkJRU3hEUVVGRExFTkJRVUU3WTBGRE9VUXNVVUZCVVN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEUxQlFVMHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRoUVVOb1F6dFpRVU5FTEU5QlFVOHNVVUZCVVR0WFFVTm9RaXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZCTzFGQlExSXNTVUZCU1N4UlFVRlJMRVZCUVVVN1ZVRkRXa0VzU1VGQlRTeEhRVUZITEVkQlFVY3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCVlN4SFFVRkhMRVZCUVVVc1IwRkJSeXhGUVVGRk8xbEJRek5FTEU5QlFVOHNSMEZCUnl4SFFVRkhMRWRCUVUwc1RVRkJSU3hKUVVGRkxGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVN4blFrRkJXVHRYUVVOcVJDeEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkJPMVZCUTA0c1UwRkJVeXhEUVVGRExFTkJRVUVzVVVGQlZ5eE5RVUZGTEVkQlFVVXNSMEZCUnl4TlFVRkZMRU5CUVVNc1JVRkJSU3hEUVVGQkxHTkJRV0VzU1VGQlJTeFJRVUZSTEVWQlFVVXNRMEZCUVN4RFFVRkZMRU5CUVVNc1EwRkJRVHRUUVVNNVJEdFJRVU5FUVN4SlFVRk5MRTFCUVUwc1IwRkJSeXhEUVVGRExGRkJRVkVzUjBGQlJ5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJRVHRSUVVNelEwRXNTVUZCVFN4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZCTzFGQlF6VkNMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVU3VlVGRFVpeE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGQk8xTkJRelZDTzJGQlEwazdWVUZEU0N4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEZGQlFWRXNRMEZCUXl4RFFVRkJPMU5CUTI1RE8wOUJRMFlzUTBGQlF5eERRVUZCT3pzN096czdUVUZOUml3eVFrRkJNa0lzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk8wMUJRM1JFTEU5QlFVOHNSMEZCUnp0TFFVTllMRVZCUVVVc1JVRkJSU3hOUVVGTkxFVkJRVVVzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUVR0RlFVTnVRaXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEhWQ1FVRjFRaXhGUVVGRk8wbEJRMjVETERKQ1FVRXlRaXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVsQlFVa3NSVUZCUlR0TlFVTnNSQ3hKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEZkQlFWY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRMUVVOc1F5eERRVUZETEVOQlFVRTdSMEZEU0R0UFFVTkpMRVZCUVVFc1FVRkJTU3hCUVVGelF5eEJRVVU1UXp0RlFVTkVMRUZCUVVrc1FVRkJjME1zUVVGSE1VTXNUMEZCVHl4SFFVRkhPME5CUTFnN096czdPenM3T3pzN096czdPMEZCWTBRc1FVRkJUeXhUUVVGVExGVkJRVlVzUlVGQlJTeExRVUZMTEVWQlFVVTdSVUZEYWtNc1QwRkJUeXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNRMEZCUXl4UlFVRlJPME5CUTNaRE96czdPenRCUVV0RUxFRkJRVThzVTBGQlV5eGhRVUZoTEVWQlFVVXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSVHRGUVVOb1JFRXNTVUZCVFN4UFFVRlBMRWRCUVVjc1ZVRkJWU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBWQlEycERRU3hKUVVGTkxFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVRTdSVUZEYUVKQkxFbEJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4VFFVRlRMRWxCUVVrc1JVRkJSU3hEUVVGQk8wVkJRM0pEUlN4SlFVRkpMRk5CUVZNc1IwRkJSeXhEUVVGRExFTkJRVUU3UlVGRGFrSkdMRWxCUVUwc1UwRkJVeXhIUVVGSExGVkJRVlVzUTBGQlF5eE5RVUZOTEVOQlFVRTdSVUZEYmtNc1QwRkJUeXhUUVVGVExFZEJRVWNzVTBGQlV5eEZRVUZGTzBsQlF6VkNRU3hKUVVGTkxFZEJRVWNzUjBGQlJ5eEhRVUZGTEVsQlFVVXNWVUZCVlN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQkxFMUJRVVVzUjBGQlJTeFBRVUZQTEUxQlFVVXNRMEZCUVR0SlFVTnNSRUVzU1VGQlRTeEhRVUZITEVkQlFVY3NVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wbEJRM3BDTEVkQlFVY3NTVUZCU1N4WlFVRlpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlF5OUNMRk5CUVZNc1JVRkJSU3hEUVVGQk8wZEJRMW83UlVGRFJDeFBRVUZQTEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNN1EwRkRNMEk3TzBGQlJVUXNVMEZCVXl4UlFVRlJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFOUJRVThzUlVGQlJUdEZRVU5xUTBFc1NVRkJUU3hKUVVGSkxFZEJRVWNzUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4RlFVRkZMRU5CUVVFN1JVRkROMEpCTEVsQlFVMHNaMEpCUVdkQ0xFZEJRVWNzUTBGQlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4WFFVRlhMRXRCUVVzc1VVRkJVU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SlFVRkpMRVZCUVVVc1EwRkJReXhEUVVGQk8wVkJRM2hJUVN4SlFVRk5MRlZCUVZVc1IwRkJSeXhEUVVGRExFOUJRVThzU1VGQlNTeERRVUZETEV0QlFVc3NTMEZCU3l4UlFVRlJMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVFN1JVRkRhRWRCTEVsQlFVMHNUVUZCVFN4SFFVRkhMR2RDUVVGblFpeERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRGUVVOc1JFRXNTVUZCVFN4TFFVRkxMRWRCUVVjc1kwRkJZeXhEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJRVHM3T3pzN08wVkJUVEZFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk96dEpRVVZvUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExGbEJRVmtzUTBGQlF5eEZRVUZGTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk8wZEJRMnBFT3p0RlFVVkVMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRGUVVOeVF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlFUdEZRVU14UWl4SlFVRkpMRU5CUVVNc1YwRkJWeXhIUVVGSExFdEJRVXNzUTBGQlFUdEZRVU40UWl4SlFVRkpMRTlCUVU4c1JVRkJSVHRKUVVOWUxFOUJRVThzU1VGQlNTeERRVUZETEZkQlFWY3NRMEZCUVR0SlFVTjJRaXhQUVVGUExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVRTdSMEZEYkVJN1JVRkRSQ3hQUVVGUExFdEJRVXM3UTBGRFlqczdPenM3TzBGQlRVUXNRVUZCVHl4VFFVRlRMR2xDUVVGcFFpeEZRVUZGTEU5QlFVOHNSVUZCUlN4UFFVRlBMRVZCUVVVN1JVRkRia1FzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRVZCUVVVN1NVRkRia0lzUVVGQlNTeEJRVUZ6UXl4QlFVY3hReXhQUVVGUExFVkJRVVU3UjBGRFZqdEZRVU5FUlN4SlFVRkpMRXRCUVVzc1IwRkJSeXhGUVVGRkxFTkJRVUU3UlVGRFpFRXNTVUZCU1N4TFFVRkxMRWRCUVVjc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlFUdEZRVU14UWl4UFFVRlBMRXRCUVVzc1JVRkJSVHRKUVVOYUxFMUJRVTBzUTBGQlF5eExRVUZMTEVWQlFVVXNVVUZCVVN4RFFVRkRMRXRCUVVzc1JVRkJSU3hQUVVGUExFTkJRVU1zUTBGQlF5eERRVUZCTzBsQlEzWkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZCTzBkQlEzSkNPMFZCUTBRc1MwRkJTeXhIUVVGSExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVRzN096czdPenM3T3pzN096czdSVUZqUml3d1FrRkJRVHRKUVVOeVFpeEpRVUZKTEV0QlFVc3NRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVVTdUVUZETTBKR0xFbEJRVTBzU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHROUVVOeVFpeFBRVUZQTEVOQlFVTXNVMEZCVXl4RFFVRkRMRmxCUVZrN1VVRkROVUpCTEVsQlFVMHNSVUZCUlN4SFFVRkhMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVUU3VVVGRGRFSXNTVUZCU1N4RlFVRkZMRVZCUVVVN1ZVRkRUaXhMUVVGTFJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1dVRkRjRU1zUlVGQlJTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdWMEZEZEVJN1UwRkRSanRQUVVOR0xFTkJRVU1zUTBGQlFUdE5RVU5HTEVsQlFVa3NRMEZCUXl4TFFVRkxMRlZCUVZVc1JVRkJSU3hGUVVGRkxFOUJRVThzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJMRVZCUVVVN1MwRkRNVU03UjBGRFJqczdSVUZpUkN4TFFVRkxSaXhKUVVGTkxFTkJRVU1zU1VGQlNTeExRVUZMTEVWQllYQkNMRlZCUVVFN096czdPMFZCUzBSQkxFbEJRVTBzUjBGQlJ5eEhRVUZITEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVFN1JVRkRNVUpCTEVsQlFVMHNSMEZCUnl4SFFVRkhMRk5CUVZNc1EwRkJRVHRGUVVOeVFpeEpRVUZKTEVkQlFVY3NTMEZCU3l4UFFVRlBMRVZCUVVVN1NVRkRia0lzVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4WlFVRlpPMDFCUXpWQ1FTeEpRVUZOTEVWQlFVVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGQk8wMUJRM1JDTEVsQlFVa3NSVUZCUlN4RlFVRkZPMUZCUTA0c1JVRkJSU3hEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1QwRkRMMEk3UzBGRFJpeERRVUZETEVOQlFVRTdSMEZEU0R0UFFVTkpMRWxCUVVrc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMGxCUTI1RkxFOUJRVThzUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUVRzN1NVRkZja0lzU1VGQlNTeGhRVUZoTEVWQlFVVXNSVUZCUlR0TlFVTnVRaXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEZsQlFWazdVVUZETlVKQkxFbEJRVTBzUlVGQlJTeEhRVUZITEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVFN1VVRkRkRUlzU1VGQlNTeEZRVUZGTEVWQlFVVTdWVUZEVGl4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhEUVVGQk8xTkJRM0JETzA5QlEwWXNRMEZCUXl4RFFVRkJPMHRCUTBnN08xTkJSVWtzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4WlFVRlpMRVZCUVVVN1RVRkRPVUpCTEVsQlFVMHNSMEZCUnl4SFFVRkhMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVUU3VFVGRGVFSkJMRWxCUVUwc1VVRkJVU3hIUVVGSExHbENRVUZwUWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8wMUJRek5ETEVsQlFVa3NVVUZCVVN4RlFVRkZPMUZCUTFvc1QwRkJUeXhEUVVGRExGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVRTdVVUZETTBJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eGxRVUZsTEVWQlFVVTdWVUZETjBJc1VVRkJVU3hEUVVGRExHVkJRV1VzUjBGQlJ5eEZRVUZGTEVOQlFVRTdVMEZET1VJN1VVRkRSQ3hSUVVGUkxFTkJRVU1zWlVGQlpTeERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRTlCUVU4c1EwRkJRVHRQUVVONFF6dE5RVU5FTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1dVRkJXVHRSUVVNMVFrRXNTVUZCVFN4RlFVRkZMRWRCUVVjc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlFUdFJRVU4wUWl4SlFVRkpMRVZCUVVVc1JVRkJSVHRWUVVOT0xFOUJRVThzUTBGQlF5eGpRVUZqTEVkQlFVY3NSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJRVHRUUVVOMFF6dFBRVU5HTEVOQlFVTXNRMEZCUVR0TFFVTklPMGRCUTBZN08wVkJSVVFzVDBGQlR5eExRVUZMTzBOQlEySTdPMEZCUlVRc1FVRkJUeXhUUVVGVExIRkNRVUZ4UWl4RlFVRkZMRTlCUVU4c1JVRkJSVHRGUVVNNVF5eFBRVUZQTEdsQ1FVRnBRaXhEUVVGRExFOUJRVThzUlVGQlJTeEpRVUZKTEVOQlFVTTdRMEZEZUVNN08wRkRkbFJFT3pzN096czdPenM3T3pzN096czdPenM3TzBGQmJVSkJPenM3T3p0QlFVOUJMRUZCUVU4c1UwRkJVeXhqUVVGakxFVkJRVVVzVFVGQlRTeEZRVUZGTzBWQlEzUkRMRWxCUVVrc1QwRkJUeXhEUVVGRExFMUJRVTBzUTBGQlF5eEZRVUZGTzBsQlEyNUNMRTlCUVU4c1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZCTEV0QlFVc3NSVUZCUXl4VFFVRkhMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEhRVUZCTEVOQlFVTTdSMEZETTBNN1JVRkRSQ3hQUVVGUExFMUJRVTA3UTBGRFpEczdPenM3T3pzN1FVRlJSQ3hUUVVGVExGbEJRVmtzUlVGQlJTeExRVUZMTEVWQlFVVXNSMEZCUnl4RlFVRkZPMFZCUTJwRFFTeEpRVUZOTEZGQlFWRXNSMEZCUnl4RlFVRkZMRU5CUVVFN1JVRkRia0lzVDBGQlR5eExRVUZMTEVWQlFVVTdTVUZEV2l4SlFVRkpMRXRCUVVzc1EwRkJReXhKUVVGSkxFbEJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRVZCUVVVN1RVRkRMMEpCTEVsQlFVMHNUMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMDFCUTJ4RExFOUJRVThzU1VGQlNTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8wdEJRMnhETzBsQlEwUXNTVUZCU1N4TFFVRkxMRU5CUVVNc1owSkJRV2RDTEVsQlFVa3NTMEZCU3l4RFFVRkRMR2RDUVVGblFpeERRVUZETEZOQlFWTXNSVUZCUlR0TlFVTTVSRUVzU1VGQlRXRXNVMEZCVHl4SFFVRkhMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3VFVGRGNrUkJMRk5CUVU4c1NVRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZEUVN4VFFVRlBMRU5CUVVNc1EwRkJRVHRMUVVOc1F6dEpRVU5FTEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGQk8wZEJRM0pDTzBWQlEwUXNUMEZCVHl4UlFVRlJPME5CUTJoQ096czdPenM3TzBGQlQwUXNRVUZCVHl4VFFVRlRMRkZCUVZFc1JVRkJSU3hIUVVGSExFVkJRVmM3T3pzN1JVRkRkRU1zU1VGQlNTeExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRk8wbEJRM1JDWWl4SlFVRk5MRTFCUVUwc1IwRkJSeXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVRTdTVUZETVVKQkxFbEJRVTBzUjBGQlJ5eEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVFN1NVRkRla0lzUzBGQlMwVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1RVRkROVUpHTEVsQlFVMHNSVUZCUlN4SFFVRkhMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdE5RVU53UWl4SlFVRkpMRVZCUVVVc1EwRkJReXhWUVVGVkxFVkJRVVU3VVVGRGFrSXNVVUZCVVR0UFFVTlVPMDFCUTBRc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVFN1MwRkRja0k3UjBGRFJqdFBRVU5KTzBsQlEwZ3NTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFVkJRVVU3VFVGRGJrSXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdTMEZEZEVJN1IwRkRSanREUVVOR096czdPenM3TzBGQlQwUXNRVUZCVHl4VFFVRlRMR05CUVdNc1JVRkJSU3hQUVVGUExFVkJRV0U3T3pzN1JVRkRiRVJCTEVsQlFVMHNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJRVHM3T3pzN08wVkJUVzVDUVN4SlFVRk5MRkZCUVZFc1IwRkJSeXhWUVVGRExGbEJRVmtzUlVGQlJUdEpRVU01UWl4UFFVRlBMRlZCUVVFc1VVRkJVU3hGUVVGRE8wMUJRMlJGTEVsQlFVa3NUMEZCVHl4RFFVRkJPMDFCUTFoR0xFbEJRVTBzVDBGQlR5eEhRVUZITEZsQlFWa3NTVUZCU1N4UlFVRlJMRU5CUVVFN1RVRkRlRU1zU1VGQlNTeFBRVUZQTEZGQlFWRXNTMEZCU3l4VlFVRlZMRVZCUVVVN1VVRkRiRU1zVDBGQlR5eEhRVUZITEZGQlFWRXNRMEZCUVR0UFFVTnVRanRYUVVOSkxFbEJRVWtzVDBGQlR5eFJRVUZSTEV0QlFVc3NVVUZCVVN4RlFVRkZPMUZCUTNKRExFOUJRVThzUjBGQlJ5eFZRVUZWTEVOQlFVTXNSVUZCUlRzN096dFZRVWx5UWl4SlFVRkpMRU5CUVVNc1EwRkJReXhWUVVGVkxFVkJRVVU3V1VGRGFFSXNUVUZCVFR0WFFVTlFPenM3TzFWQlNVUkZMRWxCUVVrc1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlFUdFZRVU5vUWl4UFFVRlBMRVZCUVVVc1JVRkJSVHRaUVVOVVJpeEpRVUZOTEVkQlFVY3NSMEZCUnl4WlFVRlpMRU5CUVVNc1JVRkJSU3hEUVVGRExFMUJRVTBzU1VGQlNTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGQk8xbEJRekZFUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zVFVGQlRTeERRVUZCTzFsQlEzUkNMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU1zUlVGQlJUdGpRVU5ZUlN4SlFVRkpMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVUU3WTBGRFdDeFBRVUZQTEVkQlFVY3NSMEZCUnl4SFFVRkhMRVZCUVVVN1owSkJRMmhDUml4SlFVRk5MRVZCUVVVc1IwRkJSeXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdaMEpCUTI1Q0xGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGQk8yZENRVU51UWl4SFFVRkhMRVZCUVVVc1EwRkJRVHRsUVVOT096czdZMEZIUkN4RFFVRkRMRU5CUVVNc1ZVRkJWU3hIUVVGSE8yZENRVU5pTEVWQlFVVXNSVUZCUlN4RlFVRkZMRU5CUVVNc1IwRkJSenRsUVVOWUxFTkJRVUU3WTBGRFJDeE5RVUZOTzJGQlExQTdXVUZEUkN4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlFUdFhRVU5vUWp0VFFVTkdMRU5CUVVFN08xRkJSVVFzVDBGQlR5eERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVFN1QwRkRNVUk3VFVGRFJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRk8xRkJRM1JDTEZGQlFWRXNRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVUU3VDBGRGRrSTdUVUZEUkN4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkJPMHRCUTJoRE8wZEJRMFlzUTBGQlFUczdPenM3T3p0RlFVOUVMRWxCUVVrc1RVRkJUU3hGUVVGRk8wbEJRMVpCTEVsQlFVMHNSMEZCUnl4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVUU3U1VGRGVrSXNTMEZCUzBVc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3VFVGRE5VSkdMRWxCUVUwc1MwRkJTeXhIUVVGSExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0TlFVTjJRaXhKUVVGSkxFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0UlFVTnNRaXhMUVVGTExFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkRMRU5CUVVFN1QwRkRNVUk3VjBGRFNTeEpRVUZKTEU5QlFVOHNTMEZCU3l4TFFVRkxMRkZCUVZFc1JVRkJSVHRSUVVOc1F5eExRVUZMUVN4SlFVRk5MRWRCUVVjc1NVRkJTU3hMUVVGTExFVkJRVVU3VlVGRGRrSXNVVUZCVVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkJPMU5CUXpGQ08wOUJRMFk3UzBGRFJqdEhRVU5HT3p0RlFVVkVMRTlCUVU4c1VVRkJVVHREUVVOb1FqczdRVU5xUzBRN096czdPenM3T3pzN096czdPenM3T3p0QlFXdENRU3hCUVVOQkxFRkJRWE5DT3pzN096czdPenM3T3pzN096dEJRMjVDZEVJN096czdPenM3T3pzN096czdPenM3T3p0QlFXdENRU3hCUVU5QlJTeEpRVUZKTEdWQlFXVXNSMEZCUnl4TFFVRkxMRU5CUVVFN1FVRkRNMElzVTBGQlV5eGhRVUZoTEVsQlFVazdSVUZEZUVJc1pVRkJaU3hIUVVGSExFbEJRVWs3UjBGRGNrSXNRMEZCUXp0SlFVTkJMRkZCUVZFN096czdPMGxCUzFJc1VVRkJVVHRIUVVOVUxFTkJRVU1zVDBGQlR5eERRVUZETEZWQlFVRXNSMEZCUnl4RlFVRkRPMGxCUTFvc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1JVRkJSU3h0UWtGQmJVSXNRMEZCUXl4RlFVRkZMRVZCUVVVc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVRTdSMEZEY2tVc1EwRkJReXhEUVVGQk96czdPenRGUVV0R0xGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEcxQ1FVRnRRaXhEUVVGRExFVkJRVVVzUlVGQlJTeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRVHREUVVOcVJqczdRVUZGUkVFc1NVRkJTU3hOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZCTzBGQlEyeENSaXhKUVVGTkxGRkJRVkVzUjBGQlJ5eHRTRUZCYlVnc1EwRkJRVHRCUVVOd1NTeFRRVUZUTEdkQ1FVRm5RaXhKUVVGSk8wVkJRek5DTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVN1NVRkRXQ3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZCTzBsQlEySkJMRWxCUVUwc1NVRkJTU3hIUVVGSExFMUJRVTBzUTBGQlF5eDNRa0ZCZDBJc1NVRkJTU3hSUVVGUkxFTkJRVUU3U1VGRGVFUXNUMEZCVHl4RFFVRkRMRWxCUVVrc1EwRkJReXc0UmtGQk5rWTdVVUZEZEVjc2NVSkJRVzlDTEVkQlFVVXNTVUZCU1N3d1JFRkJjMFFzUTBGQlJTeERRVUZCTzBkQlEzWkdPME5CUTBZN08wRkJSVVJGTEVsQlFVa3NTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRVHM3UVVGRllpeGhRVUZsTzBWQlEySXNXVUZCV1N4MVFrRkJRU3hKUVVGSk8wbEJRMlFzU1VGQlNTeERRVUZETEdWQlFXVXNSVUZCUlR0TlFVTndRaXhoUVVGaExFVkJRVVVzUTBGQlFUdExRVU5vUWp0SFFVTkdPenRGUVVWRUxFOUJRVThzYTBKQlFVRXNTVUZCU1R0SlFVTlVMRWxCUVVrc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJUdE5RVU5vUWtZc1NVRkJUU3hGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUVR0TlFVTnVRaXhKUVVGSkxFVkJRVVVzUTBGQlF5eFJRVUZSTEV0QlFVc3NRMEZCUXp0WFFVTm9RaXhGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEU5QlFVOHNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUlVGQlJUdFJRVU0xUXl4RlFVRkZMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNRMEZCUVR0UlFVTTNRaXhGUVVGRkxFTkJRVU1zV1VGQldTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0UFFVTnFSRHRMUVVOR096dEpRVVZFUVN4SlFVRk5MRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zVVVGQlVTeEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGQk8wbEJRelZFUVN4SlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUVR0SlFVTnFReXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4RlFVRkZPMDFCUTNCQ0xFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1MwRkRjRUk3U1VGRFJDeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRVZCUVVVc1EwRkJRVHM3T3pzN1NVRkxha0lzU1VGQlNTeERRVUZETEdGQlFXRXNSVUZCUlN4RFFVRkJPMGRCUTNKQ096dEZRVVZFTEU5QlFVOHNhMEpCUVVFc1NVRkJTVHRKUVVOVVFTeEpRVUZOTEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkJPMGxCUXpWRUxFbEJRVWtzVDBGQlR5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExGZEJRVmNzUlVGQlJUdE5RVU53UkN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVOQlFVRTdTMEZETlVJN1NVRkRSRUVzU1VGQlRTeE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVUU3U1VGRGFrTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdE5RVU53UWl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzB0QlEzQkNPMGxCUTBRc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eEZRVUZGTEVOQlFVRTdTVUZEYWtJc1NVRkJTU3hKUVVGSkxFdEJRVXNzU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlR0TlFVTjJRa0VzU1VGQlRTeE5RVUZOTEVkQlFVY3NWVUZCVXl4SlFVRkZMRXRCUVVzc1JVRkJSU3hEUVVGQkxFTkJRVUU3VFVGRGFrTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFVkJRVVU3VVVGRFppeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVc1EwRkJRVHRQUVVOb1FqdE5RVU5FTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZCTzAxQlEzcENMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZCTzAxQlEzSkNRU3hKUVVGTkxFVkJRVVVzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkJPMDFCUTI1Q0xFbEJRVWtzUlVGQlJTeERRVUZETEZGQlFWRXNTMEZCU3l4RFFVRkRMRVZCUVVVN1VVRkRja0lzVFVGQlRUdFBRVU5RTzAxQlEwUXNSVUZCUlN4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdUVUZETjBJc1JVRkJSU3hEUVVGRExGbEJRVmtzUTBGQlF5eHBRa0ZCYVVJc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdE5RVU14UXl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZCTzB0QlEzWkNPenM3U1VGSFJDeEpRVUZKTEVOQlFVTXNUVUZCVFN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExIVkNRVUYxUWl4RlFVRkZPMDFCUXpsRExHZENRVUZuUWl4RlFVRkZMRU5CUVVFN1MwRkRia0k3T3p0SlFVZEVSU3hKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVRTdTVUZEVWl4SlFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMR2RDUVVGblFpeERRVUZETEVWQlFVVTdUVUZEYWtZc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVkQlFVY3NUVUZCVFN4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTXNRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRVHRMUVVOc1JEdEpRVU5FTEZkQlFWY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVUU3UjBGRGVFSTdPMFZCUlVRc1UwRkJVeXh2UWtGQlFTeEpRVUZKT3pzN096dEpRVXRZTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1JVRkJSVHROUVVOb1FpeFBRVUZQTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZCTzAxQlF5OUNMRTlCUVU4c1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlFUdExRVU53UWp0SlFVTkVSaXhKUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SlFVRkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZCTzBsQlF6VkVMRWxCUVVrc1QwRkJUeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRmRCUVZjc1JVRkJSVHROUVVOd1JDeEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRVUU3UzBGRE5VSTdTVUZEUkVFc1NVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVFN1NVRkRia01zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1JVRkJSVHROUVVOd1FpeE5RVUZOTEVOQlFVTXNUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wdEJRM0JDTzBsQlEwUXNUVUZCVFN4RFFVRkRMRTlCUVU4c1EwRkJReXhGUVVGRkxFTkJRVUU3TzBsQlJXcENMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzUTBGQlFUdEpRVU53UWl4blFrRkJaMElzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0SFFVTjJRanM3UlVGRlJDeFBRVUZQTEVWQlFVVTdTVUZEVUN4aFFVRmhMSGRDUVVGQkxFVkJRVVVzUlVGQlJTeEZRVUZGTzAxQlEycENMRzFDUVVGdFFpeERRVUZETEVWQlFVVXNSVUZCUlN4RlFVRkZMRWxCUVVrc1VVRkJVU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVRTdTMEZETDBNN1IwRkRSanREUVVOR0xFTkJRVUU3TzBGRE0wcEVPenM3T3pzN096czdPenM3T3pzN096czdRVUZyUWtFc1FVRkpRVHM3TzBGQlUwRXNVMEZCVXl4NVFrRkJlVUlzU1VGQlNUdEZRVU53UTBFc1NVRkJUU3hSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZCTzBWQlEyNUNMRk5CUVZNc1dVRkJXU3hKUVVGSk96czdPenM3U1VGTmRrSkJMRWxCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVUU3T3pzN096dEpRVTAxUkN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzU1VGQlNTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1NVRkJTU3hKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRXRCUVVzc1YwRkJWeXhEUVVGRE8xTkJRM2hGTEVOQlFVTXNTVUZCU1N4TFFVRkxMRWxCUVVrc1EwRkJReXhMUVVGTExFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVU1zUlVGQlJUdE5RVU5zUlN4SlFVRkpMRU5CUVVNc1lVRkJZU3hIUVVGSExFbEJRVWtzUTBGQlFUdE5RVU42UWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeGxRVUZsTEVWQlFVVXNRMEZCUXl4RFFVRkJPMHRCUXpGRE96czdPenRKUVV0RUxFbEJRVWtzUTBGQlF5eERRVUZETEVsQlFVa3NTMEZCU3l4SlFVRkpMRU5CUVVNc1MwRkJTeXhKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTTdVMEZEZEVNc1EwRkJReXhQUVVGUE8xTkJRMUlzUTBGQlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzVjBGQlZ5eERRVUZETzFOQlEyeEVMRU5CUVVNc1VVRkJVU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTTdVMEZEY0VJc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eEZRVUZGTzAxQlEzcENMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdUVUZEY2tJc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVRTdUVUZETVVKQkxFbEJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1dVRkJXU3hEUVVGQk8wMUJRM2hEUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZCTzAxQlEzaENSU3hKUVVGSkxGZEJRVmNzUjBGQlJ5eERRVUZETEVOQlFVRTdUVUZEYmtJc1QwRkJUeXhYUVVGWExFZEJRVWNzUjBGQlJ5eEZRVUZGTEZkQlFWY3NSVUZCUlN4RlFVRkZPMUZCUTNaRExFbEJRVWtzUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkRMRmRCUVZjc1JVRkJSU3hGUVVGRkxFdEJRVXNzUlVGQlJUdFBRVU01UXp0TlFVTkVMRWxCUVVrc1YwRkJWeXhMUVVGTExFZEJRVWNzUjBGQlJ5eERRVUZETEVWQlFVVTdVVUZETTBKR0xFbEJRVTBzU1VGQlNTeEhRVUZITEV0QlFVc3NRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRE0wSXNTMEZCU3l4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eFpRVUZaT3p0VlFVVXpRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkJPenRWUVVWbUxFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RlFVRkZMR1ZCUVdVc1JVRkJSU3hEUVVGRExFTkJRVUU3VlVGRGVrTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVRTdVMEZEZEVJc1EwRkJRVHRQUVVOR08wdEJRMFk3UjBGRFJqdEZRVU5FTEZsQlFWa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGQk8wVkJReTlDTEU5QlFVOHNXVUZCV1R0RFFVTndRanM3UVVGRlJDeFpRVUZsTzBWQlEySXNXVUZCV1N4RlFVRkZMSGxDUVVGNVFpeEZRVUZGT3p0RlFVVjZReXhQUVVGUExFVkJRVVU3U1VGRFVDeGhRVUZoTEhkQ1FVRkJMRVZCUVVVc1MwRkJTeXhGUVVGRk8wMUJRM0JDTEUxQlFVMHNRMEZCUXl4MVFrRkJkVUlzUjBGQlJ5eEpRVUZKTEVOQlFVRTdUVUZEY2tNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJUdFJRVU5XTEUxQlFVMDdUMEZEVUR0TlFVTkVMRTlCUVU4c1kwRkJZeXhEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTXpRenM3U1VGRlJDeGpRVUZqTEhsQ1FVRkJMRWxCUVVrN1RVRkRhRUpCTEVsQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVlVGQlZTeERRVUZCTzAxQlF6RkRMRTlCUVU4c1UwRkJVeXhKUVVGSkxGTkJRVk1zUTBGQlF5eHhRa0ZCY1VJc1JVRkJSVHRMUVVOMFJEdEhRVU5HTzBOQlEwWXNRMEZCUVRzN1FVTndSMFE3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnpRa0VzUVVGRlFVRXNTVUZCVFN4blFrRkJaMElzUjBGQlJ5eFZRVUZWTEVkQlFVY3NSVUZCYTBJN1JVRkRkRVJCTEVsQlFVMHNTVUZCU1N4SFFVRkhMRU5CUVVNc1UwRkJVeXhGUVVGRkxFbEJRVWtzUlVGQlJTeE5RVUZOTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGQk8wVkJRM2hFTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSVUZCUlR0SlFVTXhRaXhQUVVGUExFZEJRVWM3UjBGRFdEdEZRVU5FTEU5QlFVOHNUVUZCVFR0RFFVTmtMRU5CUVVFN08wRkJSVVFzYTBKQlFXVTdSVUZEWWl4UFFVRlBMRVZCUVVVN1NVRkRVQ3hMUVVGTExHZENRVUZCTEVsQlFVazdUVUZEVUN4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RlFVRkZMRU5CUVVFN1MwRkROMEk3U1VGRFJDeEpRVUZKTEdWQlFVRXNTVUZCU1R0TlFVTk9MRWxCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRVHRMUVVNMVFqczdTVUZGUkN4cFFrRkJhVUlzTkVKQlFVRXNSVUZCUlN4TFFVRkxMRVZCUVZVc1IwRkJSeXhGUVVGVk8wMUJRemRETEVsQlFVazdVVUZEUml4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExHbENRVUZwUWl4RFFVRkRMRXRCUVVzc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlFUdFBRVU4yUXp0TlFVTkVMRTlCUVU4c1EwRkJReXhGUVVGRk8xRkJRMUlzUVVGQlNTeEJRVUZ6UXl4QlFVVjZRenRQUVVOR08wdEJRMFk3TzBsQlJVUXNhVUpCUVdsQ0xEUkNRVUZCTEVWQlFVVXNVVUZCVVN4RlFVRlpPMDFCUTNKRExFbEJRVWs3VVVGRFJrRXNTVUZCVFN4VFFVRlRMRWRCUVVjc1RVRkJUU3hEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZCTzFGQlEzWkRRU3hKUVVGTkxFZEJRVWNzUjBGQlJ5eFRRVUZUTEVOQlFVTXNVVUZCVVN4RlFVRkZMRU5CUVVFN1VVRkRhRU5CTEVsQlFVMHNZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRSUVVOc1JFRXNTVUZCVFN4WlFVRlpMRWRCUVVjc1kwRkJZeXhMUVVGTExFTkJRVU1zUTBGQlF5eEhRVUZITEdOQlFXTXNSMEZCUnl4alFVRmpMRWRCUVVjc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlFUdFJRVU42Uml4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRE8xVkJRMjVDTEdkQ1FVRkJMR05CUVdNN1ZVRkRaQ3hqUVVGQkxGbEJRVms3VTBGRFlpeERRVUZETEVOQlFVRTdUMEZEU0R0TlFVTkVMRTlCUVU4c1EwRkJReXhGUVVGRk8xRkJRMUlzVVVGQlVTeEpRVUZKTEZGQlFWRXNRMEZCUXl4SlFVRkpMRXRCUVVzc1EwRkJReXcyUTBGQk5rTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1QwRkRMMFU3UzBGRFJqczdTVUZGUkN4eFFrRkJjVUlzWjBOQlFVRXNSVUZCUlN4UlFVRlJMRVZCUVZrN1RVRkRla01zVDBGQlR5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVVVGQlVTeERRVUZETzB0QlEzaERPenM3U1VGSFJDeHRRa0ZCYlVJc09FSkJRVUVzUlVGQlJTeE5RVUZOTEVWQlFVMDdUVUZETDBKQkxFbEJRVTBzWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVFN1RVRkRlRU5CTEVsQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJRVHROUVVOcVFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1VVRkJVU3hEUVVGRExFVkJRVVU3VVVGRE1VSkJMRWxCUVUwc1kwRkJZeXhIUVVGSE8xVkJRM0pDTEU5QlFVOHNSVUZCUlN4VlFVRlZMRVZCUVVVc1JVRkJSVHRaUVVOeVFrRXNTVUZCVFN4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlFUdFpRVU4yUWtFc1NVRkJUU3hIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUVR0WlFVTnNRaXhKUVVGSkxFbEJRVWtzUzBGQlN5eEZRVUZGTEVWQlFVVTdZMEZEWml4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFZEJRVWNzUTBGQlF5eFhRVUZYTEVWQlFVVXNTMEZCU3l4TFFVRkxMRVZCUVVVN1owSkJRM1pETEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGQk8yVkJRMmhDTzJOQlEwUkJMRWxCUVUwc1dVRkJXU3hIUVVGSExHZENRVUZuUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGQk8yTkJRM0JFTEVWQlFVVXNRMEZCUXl4aFFVRmhMRWRCUVVjc1dVRkJXU3hEUVVGQk8yTkJReTlDTEVWQlFVVXNRMEZCUXl4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eExRVUZMTEVOQlFVRTdZMEZETVVJc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFJRVUZSTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVFN1lVRkRla0k3VjBGRFJqdFRRVU5HTEVOQlFVRTdVVUZEUkN4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeGpRVUZqTEVOQlFVTXNRMEZCUVR0UFFVTjRRenROUVVORUxFOUJRVThzVFVGQlRUdExRVU5rTzBkQlEwWTdRMEZEUml4RFFVRkJPenRCUTJwSFJEczdPenM3T3pzN096czdPenM3T3pzN08wRkJhMEpCTEVGQlNVRXNZVUZCWlR0RlFVTmlMRk5CUVZNc2IwSkJRVUVzU1VGQlNUdEpRVU5ZTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1dVRkJXU3hGUVVGRkxFVkJRVVVzVFVGQlRTeEZRVUZGTzBsQlEyeERRU3hKUVVGTkxGRkJRVkVzUjBGQlJ5eHBRa0ZCYVVJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUdEpRVU40UXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hGUVVGRkxFVkJRVVVzVFVGQlRTeEZRVUZGTzBsQlEzcENMRTlCUVU4c1VVRkJVU3hEUVVGRExHVkJRV1VzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1IwRkRNME03TzBWQlJVUXNUMEZCVHl4RlFVRkZPMGxCUTFBc1ZVRkJWU3h4UWtGQlFTeEpRVUZKTzAxQlExcEJMRWxCUVUwc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVRTdUVUZEYmtJc1NVRkJTU3hEUVVGRExFVkJRVVVzU1VGQlNTeEZRVUZGTEVOQlFVTXNVVUZCVVN4TFFVRkxMRU5CUVVNc1JVRkJSVHRSUVVNMVFpeEJRVUZKTEVGQlFYTkRMRUZCUnpGRExFMUJRVTA3VDBGRFVEdE5RVU5FTEVWQlFVVXNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZCTzAxQlF6RkNMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTzFGQlEzUkNMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzUlVGQlJTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRQUVVOMlF6dE5RVU5FTEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVRTdUVUZEZWtNc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eEhRVUZITEVsQlFVa3NRMEZCUVR0TlFVTXpSQ3hKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkJPMDFCUXpkRUxFVkJRVVVzUTBGQlF5eFZRVUZWTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMHRCUTNoRU96dEpRVVZFTEdGQlFXRXNkMEpCUVVFc1NVRkJTVHROUVVObVFTeEpRVUZOTEVWQlFVVXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGQk8wMUJRMjVDTEVsQlFVa3NRMEZCUXl4RlFVRkZMRWxCUVVrc1JVRkJSU3hEUVVGRExGRkJRVkVzUzBGQlN5eERRVUZETEVWQlFVVTdVVUZETlVJc1FVRkJTU3hCUVVGelF5eEJRVWN4UXl4TlFVRk5PMDlCUTFBN1RVRkRSQ3hGUVVGRkxFTkJRVU1zVTBGQlV5eERRVUZETEUxQlFVMHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHROUVVNM1FpeEpRVUZKTEVsQlFVa3NRMEZCUXl4WlFVRlpMRVZCUVVVN1VVRkRja0lzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUVR0UFFVTTFSRHROUVVORUxFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NTVUZCU1N4RFFVRkJPMHRCUTNwQ08wZEJRMFk3UTBGRFJpeERRVUZCT3p0QlEyaEZSRHM3T3pzN096czdPenM3T3pzN096czdSMEZyUWtFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRlFTeEJRVXRET3p0QlF6VkNSRHM3T3pzN096czdPenM3T3pzN096czdPMEZCYTBKQkxFRkJRMEVzUVVGRlFTeEJRVVZCTEUxQlFVMHNRMEZCUXl4TlFVRk5MRWRCUVVjc1RVRkJUU3hEUVVGQk8wRkJRM1JDTEUxQlFVMHNRMEZCUXl4SlFVRkpMRWRCUVVkWExFMUJRVWtzUTBGQlFUczdRVUZGYkVKQkxFMUJRVWtzUTBGQlF5eFRRVUZUTEVkQlFVY3NSVUZCUlRzN1EwRkZiRUlzUTBGQlF5eERRVUZETEcxQ1FVRnRRanRGUVVOd1FpeDFRa0ZCZFVJN1JVRkRka0lzWjBKQlFXZENPMFZCUTJoQ0xHZENRVUZuUWl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzVFVGQlRTeEZRVUZGTzBsQlF6RkRRU3hOUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVZEhMRTFCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTklMRTFCUVVrc1EwRkJReXhEUVVGQk8wZEJRM1pETEVOQlFVTXNRMEZCUVRzN1FVRkZTa0VzVFVGQlNTeERRVUZETEUxQlFVMHNSMEZCUnp0RlFVTmFMR0ZCUVVFc1YwRkJWenREUVVOYUxFTkJRVUU3TzBGRGNrTkVPenM3T3pzN096czdPenM3T3pzN096czdRVUZyUWtFc1FVRkRRU3hCUVVWQkxFRkJSVUVzUVVGRFFTeEJRVU5CTEVGQlJVRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkZRU3hCUVVWQkxFRkJRVThzVTBGQlV5eE5RVUZOTEVWQlFVVXNSMEZCUnl4RlFVRkZPMFZCUXpOQ0xFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVTdTVUZEVWl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGRExESkZRVUV5UlN4RFFVRkRPMGRCUXpkR08wVkJRMFFzVFVGQlRTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1IwRkJSeXhEUVVGQk8wVkJRM3BDTEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRU3d5UWtGQk1FSXNTVUZCUlN4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGQkxFMUJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdRMEZEZUVRc1FVRkZSQ3hCUVVGdFFqczdRVU14UTI1Q096czdPenM3T3pzN096czdPenM3T3pzN08wRkJiVUpCTEVGQlEwRXNRVUZEUVN4QlFVVkJXQ3hKUVVGTkxHRkJRV0VzUjBGQlJ5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkJPMEZCUXpGRFFTeEpRVUZOTEZsQlFWa3NSMEZCUnl4RFFVRkRMRTlCUVU4c1JVRkJSU3haUVVGWkxFVkJRVVVzVjBGQlZ5eEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkJPMEZCUTNKRlFTeEpRVUZOTEZkQlFWY3NSMEZCUnl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk96dEJRVVZxUTBFc1NVRkJUU3hOUVVGTkxFZEJRVWNzWVVGQllTeERRVUZETEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHM3T3pzN08wRkJUV3BFTEZOQlFWTXNUMEZCVHl4RlFVRkZMRVZCUVVVc1JVRkJSVHRGUVVOd1FpeFBRVUZQTEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1YwRkJWeXhGUVVGRkxFdEJRVXNzUjBGQlJ6dERRVU40UXpzN1FVRkZSQ3hUUVVGVExGTkJRVk1zUlVGQlJTeEZRVUZGTEVWQlFVVTdSVUZEZEVKRkxFbEJRVWtzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXl4aFFVRmhMRU5CUVVFN1JVRkROMElzVDBGQlR5eE5RVUZOTEVsQlFVa3NUVUZCVFN4TFFVRkxMRkZCUVZFc1EwRkJReXhKUVVGSkxFVkJRVVU3U1VGRGVrTXNTVUZCU1N4TlFVRk5MRU5CUVVNc1QwRkJUeXhMUVVGTExFZEJRVWNzUlVGQlJTeEZRVUZGTEU5QlFVOHNTVUZCU1N4RlFVRkZPMGxCUXpORExFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNZVUZCWVN4RFFVRkJPMGRCUXpsQ08wVkJRMFFzVDBGQlR5eExRVUZMTzBOQlEySTdPenM3T3pzN08wRkJVVVFzVTBGQlUyRXNZMEZCV1N4RlFVRkZMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVVU3UlVGRGFrTm1MRWxCUVUwc1VVRkJVU3hIUVVGSExFVkJRVVVzUTBGQlFUdEZRVU51UWl4UFFVRlBMRXRCUVVzc1JVRkJSVHRKUVVOYUxFbEJRVWtzUzBGQlN5eERRVUZETEVsQlFVa3NTVUZCU1N4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFVkJRVVVzUlVGQlJUdE5RVU12UWtFc1NVRkJUU3hQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3VFVGRGJFTXNUMEZCVHl4SlFVRkpMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdTMEZEYkVNN1NVRkRSQ3hKUVVGSkxFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1NVRkJTU3hMUVVGTExFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1UwRkJVeXhGUVVGRk8wMUJRemxFUVN4SlFVRk5ZU3hUUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0TlFVTnlSRUVzVTBGQlR5eEpRVUZKTEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVOQkxGTkJRVThzUTBGQlF5eERRVUZCTzB0QlEyeERPMGxCUTBRc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVOQlFVRTdSMEZEY2tJN1JVRkRSQ3hQUVVGUExGRkJRVkU3UTBGRGFFSTdPMEZCUlVSWUxFbEJRVWxqTEZOQlFVOHNSMEZCUnl4TFFVRkxMRU5CUVVFN1FVRkRia0lzVTBGQlV5eExRVUZMTEVWQlFVVXNSMEZCUnl4RlFVRkZPMFZCUTI1Q0xFbEJRVWxCTEZOQlFVOHNSVUZCUlR0SlFVTllMRTFCUVUwN1IwRkRVRHRGUVVORUxFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVTdTVUZEVWl4TlFVRk5PMGRCUTFBN1JVRkRSRUVzVTBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUVR0RlFVTmthRUlzU1VGQlRTeEhRVUZITEVkQlFVY3NaVUZCWlN4RlFVRkZMRU5CUVVFN1JVRkROMElzVFVGQlRTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRlZMRWRCUVVjc1JVRkJSVHM3T3pzN1NVRkxOVUpCTEVsQlFVMHNUVUZCVFR0TlFVTldMRWRCUVVjc1MwRkJTeXhQUVVGUE8xRkJRMklzU1VGQlNTeEhRVUZITEZkQlFWY3NRMEZCUXl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NSMEZCUnp0UlFVTXpReXhGUVVGRkxFOUJRVThzUlVGQlJTeEpRVUZKTEVWQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVFN1NVRkROMElzUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFZEJRVWNzUlVGQlJTeFZRVUZWTEVOQlFVTXNSVUZCUlR0TlFVTnlRMFVzU1VGQlNTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJRVHROUVVOcVFrRXNTVUZCU1N4RlFVRkZMRWRCUVVjc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlFUdE5RVU51UWl4UFFVRlBMRU5CUVVNc1JVRkJSU3hKUVVGSkxFVkJRVVVzU1VGQlNTeEZRVUZGTEV0QlFVc3NVVUZCVVN4RFFVRkRMRWxCUVVrc1JVRkJSVHRSUVVONFF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RFFVRkRMR0ZCUVdFc1EwRkJRVHRSUVVOeVFpeEZRVUZGTEVkQlFVY3NSVUZCUlN4SlFVRkpMRVZCUVVVc1EwRkJReXhQUVVGUExFTkJRVUU3VDBGRGRFSTdUVUZEUkN4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRk8xRkJRMUFzVFVGQlRUdFBRVU5RTzAxQlEwUkJMRWxCUVVrc1VVRkJVU3hIUVVGSExFdEJRVXNzUTBGQlFUdE5RVU53UWtZc1NVRkJUU3hQUVVGUExFZEJRVWNzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUVRzN1RVRkZkRUlzU1VGQlNTeFBRVUZQTEV0QlFVc3NTMEZCU3l4SlFVRkpMRU5CUVVNc1EwRkJReXhKUVVGSkxFdEJRVXNzVFVGQlRTeEZRVUZGTzFGQlF6RkRMRTFCUVUwN1QwRkRVRHM3VFVGRlJDeFBRVUZQTEVWQlFVVXNSVUZCUlR0UlFVTlVRU3hKUVVGTkxFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNUVUZCVFN4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVUU3VVVGRGNFTkJMRWxCUVUwc1IwRkJSeXhIUVVGSExFVkJRVVVzUTBGQlF5eEhRVUZITEVOQlFVRTdVVUZEYkVKQkxFbEJRVTBzUjBGQlJ5eEhRVUZIWlN4alFVRlpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFOUJRVThzUzBGQlN5eExRVUZMTEVkQlFVY3NUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJReXhEUVVGQk8xRkJRM1JGWml4SlFVRk5MRWRCUVVjc1IwRkJSeXhIUVVGSExFbEJRVWtzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUVRzN1VVRkZOMElzU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXl4RlFVRkZPMVZCUTFnc1NVRkJTU3hQUVVGUExFdEJRVXNzVDBGQlR5eEZRVUZGTzFsQlEzWkNMRXRCUVV0RkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzJOQlF6VkNSaXhKUVVGTkxFOUJRVThzUjBGQlJ5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1kwRkRkRUpCTEVsQlFVMHNUVUZCVFN4SFFVRkhMRTlCUVU4c1MwRkJTeXhMUVVGTE8ydENRVU0xUWl4WFFVRlhMRU5CUVVNc1JVRkJSU3hGUVVGRkxFOUJRVThzUTBGQlF6dHJRa0ZEZUVJc1EwRkJReXhEUVVGQk8yTkJRMHdzVFVGQlRTeERRVUZETEZWQlFWVXNSMEZCUnl4RlFVRkZMRTFCUVUwc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlFUdGpRVU51UXl4UlFVRlJMRU5CUVVNc1QwRkJUeXhEUVVGRExFZEJRVWNzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUVR0aFFVTTVRanRYUVVOR08xVkJRMFFzUTBGQlF5eERRVUZETEZWQlFWVXNSMEZCUnl4RlFVRkZMRTFCUVUwc1JVRkJSU3hIUVVGSExFVkJRVVVzUTBGQlFUdFZRVU01UWl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGQk8xTkJRMmhDT3p0UlFVVkVMRWxCUVVrc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF6dGhRVU5ZTEVOQlFVTXNUMEZCVHl4TFFVRkxMRTlCUVU4c1NVRkJTU3hQUVVGUExFdEJRVXNzUzBGQlN5eERRVUZETEVWQlFVVTdWVUZETDBOQkxFbEJRVTBzU1VGQlNTeEhRVUZITEVkQlFVY3NRMEZCUXl4WlFVRlpMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3VlVGRGNrTkJMRWxCUVUwc1YwRkJWeXhIUVVGSExIZEVRVUYzUkN4RFFVRkJPMVZCUXpWRlFTeEpRVUZOTEU5QlFVOHNSMEZCUnl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCTzFWQlF6TkRMRWxCUVVrc1RVRkJUU3hEUVVGRExIZENRVUYzUWl4SlFVRkpMRTFCUVUwc1EwRkJReXgzUWtGQmQwSXNRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSVHM3V1VGRk0wVXNRMEZCUXl4RFFVRkRMRlZCUVZVc1IwRkJSeXhMUVVGTExFTkJRVUU3V1VGRGNFSXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRVHRYUVVOb1FqdGxRVU5KTEVsQlFVa3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhYUVVGWExFTkJRVU03WlVGRE0wSXNUMEZCVHl4TFFVRkxMRVZCUVVVc1NVRkJTU3hQUVVGUExFdEJRVXNzVFVGQlRTeEZRVUZGTzFsQlEzcERMRU5CUVVNc1EwRkJReXhWUVVGVkxFZEJRVWNzUzBGQlN5eERRVUZCTzFsQlEzQkNMRU5CUVVNc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlFUdFhRVU51UWp0bFFVTkpPMWxCUTBnc1EwRkJReXhEUVVGRExGVkJRVlVzUjBGQlJ5eEZRVUZGTEUxQlFVMHNSVUZCUlN4SFFVRkhMRVZCUVVVc1EwRkJRVHRaUVVNNVFpeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkJPMWRCUTJoQ08xTkJRMFk3T3pzN096dFJRVTFFTEVsQlFVa3NVVUZCVVN4SlFVRkpMRTlCUVU4c1MwRkJTeXhQUVVGUExFbEJRVWtzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMVZCUTNKRUxFTkJRVU1zUTBGQlF5eFZRVUZWTEVkQlFVY3NSVUZCUlN4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVUU3VlVGRE9VSXNRMEZCUXl4RFFVRkRMR05CUVdNc1JVRkJSU3hEUVVGQk8xVkJRMnhDTEUxQlFVMDdVMEZEVURzN1VVRkZSQ3hKUVVGSkxGRkJRVkVzUlVGQlJUdFZRVU5hTEUxQlFVMDdVMEZEVUR0UlFVTkVMRVZCUVVVc1IwRkJSeXhGUVVGRkxFTkJRVU1zVDBGQlR5eERRVUZCTzA5QlEyaENPMHRCUTBZc1JVRkJSU3hOUVVGTkxFTkJRVU1zUTBGQlFUdEhRVU5ZTEVOQlFVTXNRMEZCUVR0RFFVTklPenRCUVVWRUxFRkJRV1VzVTBGQlUwc3NUVUZCU1N4SlFVRkpPMFZCUXpsQ0xFdEJRVXNzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0RFFVTm9RanM3UVVOMlMwUTdPenM3T3pzN096czdPenM3T3pzN096dEJRV3RDUVN4QlFVTkJMRUZCUTBFc1FVRkZRVHM3T3pzN096dEJRVk5CU0N4SlFVRkpMRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVUU3UVVGRGJrSXNVMEZCVTBjc1RVRkJTU3hGUVVGRkxFZEJRVWNzYjBKQlFXOUNPMFZCUTNCRExFbEJRVWtzVDBGQlR5eEZRVUZGTEVWQlFVVXNUVUZCVFN4RlFVRkZPMFZCUTNaQ0xFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVRTdPMFZCUldRc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCT3p0RlFVVllMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlZTeEhRVUZITEZsQlFVYzdTVUZETlVJc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eHBSa0ZCYVVZc1EwRkJReXhEUVVGQk8wbEJReTlHTEU5QlFVOHNTVUZCU1N4RFFVRkRMRTFCUVUwN1IwRkRia0lzUTBGQlFUczdSVUZGUkV3c1NVRkJUU3hUUVVGVExFZEJRVWNzVTBGQlV5eERRVUZCTzBWQlF6TkNMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zWVVGQllTeEhRVUZITEZWQlFVRXNSMEZCUnl4RlFVRkRMRk5CUVVjc1UwRkJVeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUVN4RFFVRkJPMFZCUTNKRUxFZEJRVWNzUTBGQlF5eE5RVUZOTEVOQlFVTXNiMEpCUVc5Q0xFZEJRVWNzVlVGQlFTeEhRVUZITEVWQlFVTXNVMEZCUnl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExGTkJRVk1zUlVGQlJTeEZRVUZGTEVOQlFVTXNSMEZCUVN4RFFVRkJPenRGUVVWdVJTeFRRVUZUTEZOQlFWTXNSVUZCUlN4SFFVRkhMRVZCUVVVN1NVRkRka0lzVDBGQlR5eFBRVUZQTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzVjBGQlZ6dEhRVU53UkR0RlFVTkVRU3hKUVVGTkxHdENRVUZyUWl4SFFVRkhMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZCTzBWQlEzSkVMRWRCUVVjc1EwRkJReXhOUVVGTkxFTkJRVU1zWlVGQlpTeEhRVUZITEZWQlFWVXNSMEZCUnl4RlFVRkZPMGxCUXpGRExFbEJRVWtzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZPMDFCUTJ4Q0xFMUJRVTA3UzBGRFVEdEpRVU5FTEU5QlFVOHNhMEpCUVd0Q0xFTkJRVU1zUjBGQlJ5eERRVUZETzBkQlF5OUNMRU5CUVVFN08wVkJSVVFzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUTJsQ0xFMUJRVWtzUTBGQlF5eERRVUZCTzBWQlEyWXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdEZRVU5vUWl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZCT3p0RlFVVnFRa01zVFVGQldTeEZRVUZGTEVOQlFVRTdRMEZEWmpzN08wRkJSMFFzU1VGQlNTeFBRVUZQTEUxQlFVMHNTMEZCU3l4WFFVRlhMRWxCUVVrc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJUdEZRVU12UTJJc1RVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0RFFVTnFRanM3UVVGRlJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4SFFVRkhRU3hOUVVGSkxFTkJRVUVzUVVGRmFFSXNRVUZCYlVJN08wRkRlRVZ1UWpzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnZRa0ZNTEVsQlFVMHNTVUZCU1N4SFFVRkhMRFJEUVVsaUxFTkJRVUU3TzBGQlJVRXNVMEZCVXl4SlFVRkpMRVZCUVVVc1NVRkJTU3hGUVVGRk8wVkJRMjVDTEVsQlEwVXNjVUpCUVhGQ08wVkJRM0pDTEVsQlFVRXNZMEZCWXl4MVFrRkdWanM3UlVGTFRpeFBRVUZQTzBsQlEwd3NTVUZCU1N4RlFVRkZMRkZCUVZFN1NVRkRaQ3hMUVVGTExFVkJRVVU3VFVGRFRDeEpRVUZKTEVWQlFVVXNUVUZCVFR0TFFVTmlPMGxCUTBRc1RVRkJUU3hwUWtGQlFTeEZRVUZGTEdGQlFXRXNSVUZCUlRzN096czdUVUZMY2tJc1QwRkJUeXhoUVVGaExFTkJRVU1zVVVGQlVTeEZRVUZGTzFGQlF6ZENMRXRCUVVzc1JVRkJSVHRWUVVOTUxGZEJRVmNzUlVGQlJTeEhRVUZITzFWQlEyaENMRWxCUVVrc1JVRkJSU3hKUVVGSkxFTkJRVU1zU1VGQlNUdFRRVU5vUWp0UlFVTkVMRmRCUVZjc1JVRkJSU3huUWtGQlowSTdVVUZETjBJc1YwRkJWeXhGUVVGRkxIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJRenRQUVVONlF5eEZRVUZGTEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzB0QlEzaERPMGxCUTBRc1RVRkJRU3hKUVVGSk8wZEJRMHc3UTBGRFJqczdRVUZGUkN4UlFVRmxPMFZCUTJJc1NVRkJTU3hsUVVGQkxFVkJRVVVzU1VGQlNTeEZRVUZGTzBsQlExWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlFUdEhRVU40UXp0RFFVTkdMRU5CUVVFN08wRkRNMFJFT3pzN096czdPenM3T3pzN096czdPenM3TzBGQmJVSkJRU3hKUVVGTmJVSXNUVUZCU1N4SFFVRkhMR2RFUVVsaUxFTkJRVUU3TzBGQlJVRXNVMEZCVXl4TlFVRk5MRVZCUVVVc1NVRkJTU3hGUVVGRk8wVkJRM0pDTEVsQlEwVXNjVUpCUVhGQ08wVkJRM0pDTEVsQlFVRXNZMEZCWXl4MVFrRkdWanM3UlVGTFRpeFBRVUZQTzBsQlEwd3NTVUZCU1N4RlFVRkZMRlZCUVZVN1NVRkRhRUlzVFVGQlRTeHBRa0ZCUVN4RlFVRkZMR0ZCUVdFc1JVRkJSVHROUVVOeVFpeFBRVUZQTEdGQlFXRXNRMEZCUXl4VlFVRlZMRVZCUVVVN1VVRkRMMElzUzBGQlN5eEZRVUZGTEVWQlFVVXNWMEZCVnl4RlFVRkZMRXRCUVVzc1JVRkJSVHRSUVVNM1FpeFhRVUZYTEVWQlFVVXNhMEpCUVd0Q08xRkJReTlDTEZkQlFWY3NSVUZCUlN4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdUMEZEZWtNc1JVRkJSU3hqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRenRMUVVONFF6dEpRVU5FTEUxQlFVRkJMRTFCUVVrN1IwRkRURHREUVVOR096dEJRVVZFTEZWQlFXVTdSVUZEWWl4SlFVRkpMR1ZCUVVFc1JVRkJSU3hKUVVGSkxFVkJRVVU3U1VGRFZtNUNMRWxCUVUwc1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0SlFVTjRRaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1MwRkJTeXhGUVVGRkxFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlEyeERMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4WFFVRlhMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVUU3UjBGRGVrTTdRMEZEUml4RFFVRkJPenRCUTJ4RVJEczdPenM3T3pzN096czdPenM3T3pzN096dEJRVzFDUVVVc1NVRkJTV3RDTEhWQ1FVRnhRanRKUVVGRlF5eG5Ra0ZCWXp0SlFVRkZaaXhSUVVGTk8wbEJRVVZuUWl4VFFVRlBMRU5CUVVFN08wRkJSVEZFZEVJc1NVRkJUU3hoUVVGaExFZEJRVWNzUlVGQlJTeERRVUZCT3p0QlFVVjRRa0VzU1VGQlRXMUNMRTFCUVVrc1IwRkJSeXh0UjBGTFlpeERRVUZCT3pzN096dEJRVXRCTEZOQlFWTXNZMEZCWXl4RlFVRkZMRTlCUVU4c1JVRkJSU3hYUVVGWExFVkJRVVU3UlVGRE4wTnFRaXhKUVVGSkxHTkJRV01zUjBGQlJ5eFBRVUZQTEVOQlFVTXNZMEZCWXl4RFFVRkJPMFZCUXpORExFbEJRVWtzWTBGQll5eEpRVUZKTEVOQlFVTnZRaXhUUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEVWQlFVVTdTVUZET1VNc1kwRkJZeXhIUVVGSExFTkJRVU1zWTBGQll5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4SFFVRkhMRVZCUVVVN1RVRkRia1VzVDBGQlR5eEhRVUZITEVOQlFVTXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eFBRVUZQTEVOQlFVTXNkVUpCUVhWQ0xFVkJRVVVzVlVGQlZTeEZRVUZGTEVWQlFVVXNSVUZCUlN4RlFVRkZPMUZCUTJ4R0xFOUJRVThzVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXp0UFFVTndRaXhEUVVGRE8wdEJRMGdzUTBGQlF5eERRVUZCTzBkQlEwZzdSVUZEUkN4SlFVRkpMR05CUVdNc1JVRkJSVHRKUVVOc1FuUkNMRWxCUVUwc1NVRkJTU3hIUVVGSExFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUXk5Q1FTeEpRVUZOTEVsQlFVa3NSMEZCUnl4RFFVRkRMR05CUVdNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdEpRVU12UWtFc1NVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGQk8wbEJRMjVEUVN4SlFVRk5MRk5CUVZNc1IwRkJSeXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRlZCUVZVc1EwRkJReXhYUVVGWExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZCTzBsQlEzcEhMRTlCUVU4N1RVRkRUQ3h4UWtGQmNVSXNSVUZCUlN4RFFVRkJMRU5CUVVjc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlFTeFJRVUZKTEVsQlFVVXNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJRU3hQUVVGSExFTkJRVU03VFVGRE5VUXNhVUpCUVdsQ0xFVkJRVVVzUTBGQlFTeERRVUZITEZOQlFWTXNSMEZCUnl4SFFVRkhMRU5CUVVFc1RVRkJSU3hEUVVGRE8wdEJRM3BETzBkQlEwWTdSVUZEUkVFc1NVRkJUU3hQUVVGUExFZEJRVWNzVjBGQlZ5eERRVUZCTzBWQlF6TkNRU3hKUVVGTkxFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNUVUZCVFN4SlFVRkpMRTlCUVU4c1EwRkJRVHRGUVVONFEwRXNTVUZCVFN4TlFVRk5MRWRCUVVjc1EwRkJReXhQUVVGUExFVkJRVVVzVTBGQlV5eEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGQk96dEZRVVZ3Uml4UFFVRlBMRVZCUVVVc2FVSkJRV2xDTEVWQlFVVXNUVUZCVFN4RlFVRkZPME5CUTNKRE96dEJRVVZFTEZOQlFWTXNZVUZCWVN4RlFVRkZMRTlCUVU4c1JVRkJSU3hIUVVGSExFVkJRVVVzVjBGQlZ5eEZRVUZGT3pzN1JVRkhha1FzU1VGQlNTeERRVUZETEZkQlFWY3NTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNUVUZCVFN4RlFVRkZPMGxCUXpkRUxFOUJRVThzUjBGQlJ6dEhRVU5ZTzBWQlEwUXNTVUZCVVN4TFFVRkxPMFZCUVVVc1NVRkJRU3hOUVVGTkxITkNRVUZtTzBWQlEwNHNUMEZCVHl4UFFVRlBMRU5CUVVNc1lVRkJZU3hKUVVGSkxFOUJRVThzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4RlFVRkZPMGxCUTNwRUxFdEJRVXNzUlVGQlJTeFZRVUZWTEVOQlFVTXNTMEZCU3l4RFFVRkRPMGxCUTNoQ0xFMUJRVTBzUlVGQlJTeFZRVUZWTEVOQlFVTXNUVUZCVFN4RFFVRkRPMGxCUXpGQ0xFOUJRVThzUlVGQlJTeFBRVUZQTEVOQlFVTXNUMEZCVHp0SlFVTjRRaXhQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEU5QlFVODdTVUZEZUVJc1VVRkJVU3hGUVVGRkxFOUJRVThzUTBGQlF5eFJRVUZSTzBkQlF6TkNMRU5CUVVNc1NVRkJTU3hIUVVGSE8wTkJRMVk3TzBGQlJVUXNVMEZCVXl4UlFVRlJMRVZCUVVVc1IwRkJSeXhGUVVGRkxGRkJRVkVzUlVGQlJUdEZRVU5vUXl4VFFVRlRMRTlCUVU4c1NVRkJTVHRKUVVOc1FpeFJRVUZSTEVsQlFVa3NVVUZCVVN4RFFVRkRPMDFCUTI1Q0xFOUJRVThzUlVGQlJTeEpRVUZKTzB0QlEyUXNRMEZCUXl4RFFVRkJPMGRCUTBnN1JVRkRSQ3hUUVVGVExFbEJRVWtzUlVGQlJTeEhRVUZITEVWQlFVVTdTVUZEYkVJc1VVRkJVU3hKUVVGSkxGRkJRVkVzUTBGQlF6dE5RVU51UWl4UFFVRlBMRVZCUVVVc1MwRkJTenROUVVOa0xGTkJRVk1zUlVGQlJTeEhRVUZITEVkQlFVY3NSVUZCUlR0TFFVTndRaXhEUVVGRExFTkJRVUU3UjBGRFNEdEZRVU5FTEVsQlFVazdTVUZEUmtVc1NVRkJTU3hUUVVGVExFZEJRVWNzUzBGQlN5eERRVUZCTzBsQlEzSkNRU3hKUVVGSkxFdEJRVXNzUTBGQlFUdEpRVU5VUVN4SlFVRkpMRWxCUVVrc1EwRkJRVHRKUVVOU0xFbEJRVWtzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl3eVFrRkJNa0lzUTBGQlF5eEZRVUZGTzAxQlF6RkRMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVUU3VFVGRGFFSXNTMEZCU3l4SFFVRkhMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdTMEZEZGtJN1NVRkRSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTzAxQlEyUXNTVUZCU1N4SFFVRkhMRWRCUVVjN1UwRkRVQ3hQUVVGUExFTkJRVU1zVTBGQlV5eEZRVUZGTEVWQlFVVXNRMEZCUXp0VFFVTjBRaXhQUVVGUExFTkJRVU1zVVVGQlVTeEZRVUZGTEVWQlFVVXNRMEZCUXp0VFFVTnlRaXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVRTdTMEZEY2tJN1UwRkRTVHROUVVOSUxFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVU1zUlVGQlJTeGhRVUZoTEVOQlFVTXNRMEZCUVR0TFFVTjZRenRKUVVORVJpeEpRVUZOTEVkQlFVY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlEzWkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFZEJRVWNzUjBGQlJ5eERRVUZCT3pzN096dEpRVXRrTEVkQlFVY3NRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGQk8wbEJRMjVDUVN4SlFVRk5MRkZCUVZFc1IwRkJSeXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4UFFVRlBMRVZCUVVVc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlFUdEpRVU4yUkN4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZCTzBsQlF6TkNMRTlCUVU4c1JVRkJSU3hEUVVGQk8wZEJRMVk3UlVGRFJDeFBRVUZQTEVkQlFVY3NSVUZCUlR0SlFVTldMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdEhRVU5XTzBOQlEwWTdPMEZCUlVSQkxFbEJRVTBzUzBGQlN5eEhRVUZITzBWQlExb3NTVUZCU1N4RlFVRkZMRmxCUVZrN1JVRkRiRUlzUzBGQlN5eEZRVUZGTzBsQlEwd3NSMEZCUnl4RlFVRkZMRTFCUVUwN1NVRkRXQ3hYUVVGWExFVkJRVVVzVFVGQlRUdEpRVU51UWl4TlFVRk5MRVZCUVVVc1RVRkJUVHRKUVVOa0xFOUJRVThzUlVGQlJTeE5RVUZOTzBsQlEyWXNUMEZCVHl4RlFVRkZMRTFCUVUwN1NVRkRaaXhSUVVGUkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVWQlFVVXNUMEZCVHl4RFFVRkRPMGxCUXpOQ0xGTkJRVk1zUlVGQlJTeE5RVUZOTzBsQlEycENMR05CUVdNc1JVRkJSU3hEUVVGRExFMUJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTTdTVUZETDBJc1YwRkJWeXhGUVVGRkxFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXp0SFFVTTVRanM3UlVGRlJDeFBRVUZQTEd0Q1FVRkJMRWxCUVVrN1NVRkRWQ3hKUVVGSkxFTkJRVU1zWVVGQllTeEZRVUZGTEVOQlFVRTdSMEZEY2tJN08wVkJSVVFzVDBGQlR5eHJRa0ZCUVN4SlFVRkpPMGxCUTFRc1NVRkJTU3hEUVVGRExHRkJRV0VzUlVGQlJTeERRVUZCTzBkQlEzSkNPenRGUVVWRUxFOUJRVThzUlVGQlJUdEpRVU5RTEVsQlFVa3NaVUZCUVN4RlFVRkZMRkZCUVZFc1JVRkJSVHROUVVOa0xGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGQk8wdEJRemRDTzBkQlEwWTdPMFZCUlVRc1RVRkJUU3hwUWtGQlFTeEZRVUZGTEdGQlFXRXNSVUZCUlR0SlFVTnlRa0VzU1VGQlRTeExRVUZMTEVkQlFVZHZRaXgxUWtGQmNVSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRKUVVONlEzQkNMRWxCUVUwc1YwRkJWeXhIUVVGSExHTkJRV01zUTBGQlF5eEpRVUZKTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVFN1NVRkRMME1zVDBGQlR5eGhRVUZoTEVOQlFVTXNVVUZCVVN4RlFVRkZPMDFCUXpkQ0xFdEJRVXNzUlVGQlJUdFJRVU5NTEZkQlFWY3NSVUZCUlN4UFFVRlBPMUZCUTNCQ0xGTkJRVk1zUlVGQlJTeEpRVUZKTEVOQlFVTXNVMEZCVXl4SlFVRkpMR0ZCUVdFc1EwRkJReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NSVUZCUlN4TFFVRkxMRU5CUVVNN1VVRkRha1VzYVVKQlFXbENMRVZCUVVVc1lVRkJZU3hEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVOQlFVTXNWMEZCVnl4RlFVRkZMRXRCUVVzc1EwRkJRenRSUVVNdlJDeFpRVUZaTEVWQlFVVXNTVUZCU1N4RFFVRkRMRk5CUVZNN1VVRkROVUlzYVVKQlFXbENMRVZCUVVVc1NVRkJTU3hEUVVGRExHTkJRV003VVVGRGRFTXNZMEZCWXl4RlFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWE8wOUJRMnBETzAxQlEwUXNSVUZCUlN4RlFVRkZjVUlzWjBKQlFXTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVTTdUVUZETTBNc1YwRkJWeXhGUVVGRkxHOUNRVUZ2UWp0TlFVTnFReXhYUVVGWExFVkJRVVZtTEZGQlFVMHNRMEZCUXl4TFFVRkxMRVZCUVVVc1YwRkJWeXhEUVVGRE8wdEJRM2hETEVOQlFVTTdSMEZEU0R0RlFVTkVMRTFCUVVGaExFMUJRVWs3UTBGRFRDeERRVUZCT3p0QlFVVkVMR05CUVdVN1JVRkRZaXhKUVVGSkxHVkJRVUVzUlVGQlJTeEpRVUZKTEVWQlFVVTdTVUZEVmtNc2RVSkJRWEZDTEVkQlFVY3NTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZCTzBsQlEyeEVReXhuUWtGQll5eEhRVUZITEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVFN1NVRkRjRU5tTEZGQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlFUdEpRVU14UW1kQ0xGTkJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJRVHM3U1VGRk5VSXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEU5QlFVOHNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJRVHRKUVVOMFF5eEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4RFFVRkJPMGRCUTNKRE8wTkJRMFlzUTBGQlFUczdRVU5zVEVRN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCZFVKQmNFSXNTVUZCU1d0Q0xIVkNRVUZ4UWp0SlFVRkZSeXhsUVVGaE8wbEJRVVZETEZkQlFWTXNRMEZCUVRzN1FVRkZia1I0UWl4SlFVRk5MREpDUVVFeVFpeEhRVUZITEZkQlFWY3NRMEZCUVR0QlFVTXZRMEVzU1VGQlRTeGxRVUZsTEVkQlFVY3NUMEZCVHl4RFFVRkJPMEZCUXk5Q1JTeEpRVUZKTEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVFN08wRkJSV1pHTEVsQlFVMXRRaXhOUVVGSkxFZEJRVWNzYVVsQlQySXNRMEZCUVRzN1FVRkZRU3hUUVVGVExHMUNRVUZ0UWl4RlFVRkZMRTlCUVU4c1JVRkJSU3huUWtGQlowSXNSVUZCUlR0RlFVTjJSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRVZCUVVVN1NVRkRja0lzVFVGQlRUdEhRVU5RTzBWQlEwUnVRaXhKUVVGTkxFOUJRVThzUjBGQlJ6dEpRVU5rTERaQ1FVRTJRanRKUVVNM1FpeHRRa0ZCYlVJN1NVRkRia0lzYjBKQlFXOUNPMGxCUTNCQ0xIZENRVUYzUWp0SlFVTjRRaXh2UWtGQmIwSTdSMEZEY2tJc1EwRkJRVHRGUVVORVFTeEpRVUZOTEVWQlFVVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGQk8wVkJRM1JDZDBJc1YwRkJVenRKUVVOUUxFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVTXNWVUZCVlN4TlFVRk5MRVZCUVVVc1IwRkJSeXhGUVVGRk8wMUJRMnBETEU5QlFVOHNRMEZCUVN4SFFVRkZMRWRCUVVVc1pVRkJaU3hIUVVGSExFVkJRVVVzU1VGQlJ5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFc1dVRkJVU3hIUVVGRkxHZENRVUZuUWl4UFFVRkhMRU5CUVVNN1MwRkROMFVzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNN1NVRkRXQ3hEUVVGQkxFVkJRVU1zUjBGQlJTd3lRa0ZCTWtJc1IwRkJSeXhGUVVGRkxFTkJRVVU3U1VGRGNrTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1EwRkRVanM3UVVGRlJDeFRRVUZUTEZsQlFWa3NSVUZCUlN4RlFVRkZMRVZCUVVVN1JVRkRla0o0UWl4SlFVRk5MRTFCUVUwc1IwRkJSMjlDTEhWQ1FVRnhRaXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZCTzBWQlEzaERjRUlzU1VGQlRTeFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZCTzBWQlEzWkRMRWxCUVVrc1QwRkJUeXhGUVVGRk8wbEJRMWdzYlVKQlFXMUNMRU5CUVVNc1JVRkJSU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZCTzBkQlEycERPMFZCUTBRc1QwRkJUeXhOUVVGTk8wTkJRMlE3TzBGQlJVUXNVMEZCVXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hGUVVGRk8wVkJRM1pDTEU5QlFYRkNMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTA3UlVGQk0wSXNTVUZCUVN4WFFVRlhMRzFDUVVGaU96dEZRVVZPTEU5QlFVODdTVUZEVEN4SlFVRkpMRVZCUVVVc1dVRkJXVHRKUVVOc1FpeE5RVUZOTEVWQlFVVXNRMEZCUXl4WFFVRlhMRU5CUVVNN1NVRkRja0lzUzBGQlN5eEZRVUZGTzAxQlEwd3NTVUZCU1N4RlFVRkZPMUZCUTBvc1NVRkJTU3hGUVVGRkxFMUJRVTA3VVVGRFdpeFBRVUZQTEVWQlFVVXNUVUZCVFR0UlFVTm1MRk5CUVZNc2IwSkJRVUVzUlVGQlJTeExRVUZMTEVWQlFVVTdWVUZEYUVJc1QwRkJUenRaUVVOTUxFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVXNWVUZCVlN4RlFVRkZMRkZCUVZFc1JVRkJSU3hMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4TlFVRk5PMWxCUTNKRkxGVkJRVlVzUlVGQlJTeE5RVUZOTEVWQlNXNUNMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0VFFVTjRRanRQUVVOR08wMUJRMFFzUzBGQlN5eEZRVUZGTEUxQlFVMDdUVUZEWWl4WFFVRlhMRVZCUVVVc1RVRkJUVHROUVVOdVFpeFJRVUZSTEVWQlFVVTdVVUZEVWl4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETzFGQlEzWkNMRTlCUVU4c1JVRkJSU3hMUVVGTE8wOUJRMlk3VFVGRFJDeFRRVUZUTEVWQlFVVTdVVUZEVkN4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETzFGQlEzWkNMRTlCUVU4c1JVRkJSU3hMUVVGTE8wOUJRMlk3VFVGRFJDeFRRVUZUTEVWQlFVVXNRMEZCUXl4TlFVRk5MRVZCUVVVc1RVRkJUU3hEUVVGRE8wMUJRek5DTEdGQlFXRXNSVUZCUlN4TlFVRk5PMHRCUTNSQ096dEpRVVZFTEUxQlFVMHNhVUpCUVVFc1JVRkJSU3hoUVVGaExFVkJRVVU3VFVGRGNrSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVU3VVVGRFlpeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRTlCUVU4c1JVRkJSU3hEUVVGQk8wOUJRM0pDTzAxQlEwUkJMRWxCUVUwc1RVRkJUU3hIUVVGSGRVSXNaVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wMUJRMnhETEU5QlFVOHNZVUZCWVN4RFFVRkRMRmxCUVZrc1JVRkJSVHRSUVVOcVF5eExRVUZMTEVWQlFVVTdWVUZEVEN4WFFVRlhMRVZCUVVVc1QwRkJUenRWUVVOd1FpeEZRVUZGTEVWQlFVVXNRMEZCUVN4RlFVRkRMRWRCUVVVc1pVRkJaU3hKUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVRXNRMEZCUlR0VlFVTnVReXhKUVVGSkxFVkJRVVVzU1VGQlNTeERRVUZETEVsQlFVazdWVUZEWml4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXM3VlVGRGFrSXNVVUZCVVN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUzBGQlN5eFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1MwRkJTeXhMUVVGTExFTkJRVU03VlVGRGFFVXNVMEZCVXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUzBGQlN5eFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMRk5CUVZNc1MwRkJTeXhMUVVGTExFTkJRVU03VlVGRGJrVXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWE8xVkJRemRDTEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVenRWUVVONlFpeGxRVUZsTEVWQlFVVXNTVUZCU1N4RFFVRkRMR0ZCUVdFN1UwRkRjRU03VVVGRFJDeFJRVUZSTEVWQlFVVTdWVUZEVWl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXM3VTBGRGJFSTdVVUZEUkN4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRTFCUVUwc1EwRkJRenRSUVVOd1F5eFhRVUZYTEVWQlFVVXNiMEpCUVc5Q08xRkJRMnBETEZkQlFWY3NSVUZCUlN4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRE8wOUJRMmhETEVOQlFVTTdTMEZEU0R0SlFVTkVMRTFCUVVGS0xFMUJRVWs3UjBGRFREdERRVU5HT3p0QlFVVkVMRmxCUVdVN1JVRkRZaXhKUVVGSkxHVkJRVUVzUlVGQlJTeEpRVUZKTEVWQlFVVTdTVUZEVmtNc2RVSkJRWEZDTEVkQlFVY3NTVUZCU1N4RFFVRkRMSEZDUVVGeFFpeERRVUZCTzBsQlEyeEVSeXhsUVVGaExFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRmhMRU5CUVVFN1NVRkRlRU5ETEZkQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlFUczdTVUZGYUVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUVR0SFFVTm9SRHREUVVOR0xFTkJRVUU3TzBGRE1VbEVPenM3T3pzN096czdPenM3T3pzN096czdPMEZCYlVKQmVFSXNTVUZCVFcxQ0xFMUJRVWtzUjBGQlJ5dzBPRU5CZVVSaUxFTkJRVUU3TzBGQlJVRXNVMEZCVXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hGUVVGRk8wVkJRM2hDTEVsQlFWRXNjVUpCUVhGQ0xEaENRVUYyUWpzN1JVRkZUaXhQUVVGUE8wbEJRMHdzU1VGQlNTeEZRVUZGTEdGQlFXRTdTVUZEYmtJc1MwRkJTeXhGUVVGRk8wMUJRMHdzVDBGQlR5eEZRVUZGTzFGQlExQXNTVUZCU1N4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxFMUJRVTBzUTBGQlF6dFJRVU4yUWl4UFFVRlBMRVZCUVVVc1MwRkJTenRQUVVObU8wMUJRMFFzVVVGQlVTeEZRVUZGTzFGQlExSXNTVUZCU1N4RlFVRkZMRU5CUVVNc1QwRkJUeXhGUVVGRkxFMUJRVTBzUTBGQlF6dFJRVU4yUWl4UFFVRlBMRVZCUVVVc1MwRkJTenRQUVVObU8wdEJRMFk3U1VGRFJDeEpRVUZKTEdWQlFVRXNTVUZCU1R0TlFVTk9MRTlCUVU4N1VVRkRUQ3hUUVVGVExFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4TFFVRkxMRTlCUVU4c1NVRkJTU3hKUVVGSkxFTkJRVU1zVDBGQlR5eExRVUZMTEV0QlFVc3NRMEZCUXp0UlFVTXZSQ3hWUVVGVkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4TFFVRkxMRTlCUVU4c1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeExRVUZMTEV0QlFVc3NRMEZCUXp0UFFVTnVSVHRMUVVOR08wbEJRMFFzVVVGQlVTeEZRVUZGTzAxQlExSXNXVUZCV1N4MVFrRkJRU3hKUVVGSk8xRkJRMlJ1UWl4SlFVRk5MRlZCUVZVc1IwRkJSeXhEUVVGRExHRkJRV0VzUTBGQlF5eERRVUZCTzFGQlEyeERMRWxCUVVrc1EwRkJReXhUUVVGVExFbEJRVWtzVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eERRVUZCTzFGQlEzaEVMRWxCUVVrc1EwRkJReXhWUVVGVkxFbEJRVWtzVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4elFrRkJjMElzUTBGQlF5eERRVUZCTzFGQlF6RkVMRTlCUVU4c1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTTdUMEZETlVJN1MwRkRSanRKUVVORUxFOUJRVThzUlVGQlJUdE5RVU5RTEUxQlFVMHNhVUpCUVVFc1NVRkJTVHM3VVVGRlVpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRlZCUVZVc1JVRkJSVHRWUVVOd1FpeEpRVUZKTEVOQlFVTXNVMEZCVXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlFUdFZRVU5vUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJTeEZRVUZGTEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1UwRkJVeXhGUVVGRkxFTkJRVU1zUTBGQlFUdFRRVU5vUkR0UFFVTkdPMHRCUTBZN08wbEJSVVFzVFVGQlRTeHBRa0ZCUVN4RlFVRkZMR0ZCUVdFc1JVRkJSVHM3T3pzN096dE5RVXR5UWl4UFFVRlBMR0ZCUVdFc1EwRkJReXhOUVVGTkxFVkJRVVU3VVVGRE0wSXNTMEZCU3l4RlFVRkZMRVZCUVVVc1YwRkJWeXhGUVVGRkxGRkJRVkVzUlVGQlJUdFJRVU5vUXl4RlFVRkZMRVZCUVVVN1ZVRkRSaXhMUVVGTExFVkJRVVVzVlVGQlFTeExRVUZMTEVWQlFVTTdXVUZEV0hsQ0xFMUJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RlFVRkZMRXRCUVVzc1EwRkJReXhEUVVGQk8xbEJRekZDUVN4TlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRkxFTkJRVUU3VjBGRFpEdFRRVU5HTzFGQlEwUXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhaUVVGWk8xRkJRemxDTEZkQlFWY3NSVUZCUlN4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdUMEZEZWtNc1JVRkJSU3hEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4WFFVRlhMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNN1MwRkRia1U3U1VGRFJDeE5RVUZCVGl4TlFVRkpPMGRCUTB3N1EwRkRSanM3UVVGRlJDeGpRVUZsTzBWQlEySXNTVUZCU1N4bFFVRkJMRVZCUVVVc1NVRkJTU3hGUVVGRk8wbEJRMVlzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExGRkJRVkVzUlVGQlJTeFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRVHRIUVVOc1JEdERRVU5HTEVOQlFVRTdPMEZET1VsRU96czdPenM3T3pzN096czdPenM3T3pzN08wRkJiVUpCYmtJc1NVRkJUU3gxUWtGQmRVSXNSMEZCUnl4RlFVRkZMRU5CUVVFN1FVRkRiRU5CTEVsQlFVMHNkVUpCUVhWQ0xFZEJRVWNzUTBGQlF5eERRVUZCT3p0QlFVVnFReXhUUVVGVExHdENRVUZyUWl4RlFVRkZMRTlCUVU4c1JVRkJSVHRGUVVOd1EwRXNTVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkJPMFZCUTI1RExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNaVUZCWlN4RlFVRkZPMGxCUXpWQ1FTeEpRVUZOTEU5QlFVOHNSMEZCUnl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlFUdEpRVU55UTBFc1NVRkJUU3hMUVVGTExFZEJRVWNzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVFN1NVRkRha05GTEVsQlFVa3NVMEZCVXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhEUVVGRExHVkJRV1VzUzBGQlN5eFpRVUZaTzFWQlEyNUVMRTlCUVU4c1EwRkJReXhWUVVGVk8xVkJRMnhDTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNN1UwRkRia0lzUTBGQlF5eERRVUZCTzBsQlEwNHNUMEZCVHl4RFFVRkRMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRWRCUVVjc1JVRkJSVHROUVVNelJFWXNTVUZCVFN4TlFVRk5MRWRCUVVjc1QwRkJUeXhEUVVGRExHVkJRV1VzUzBGQlN5eFpRVUZaTzFWQlEyNUVMRTlCUVU4c1EwRkJReXhWUVVGVk8xVkJRMnhDTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVFN1RVRkRja0pCTEVsQlFVMHNUVUZCVFN4SFFVRkhMRkZCUVZFc1EwRkJReXhQUVVGUExFTkJRVU1zWTBGQll5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkJPMDFCUTNaRUxGTkJRVk1zWVVGQllTeEpRVUZKTzFGQlEzaENRU3hKUVVGTkxFbEJRVWtzUjBGQlJ5eExRVUZMTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVVzUTBGQlFUdFJRVU14UXl4SFFVRkhMRU5CUVVNc1YwRkJWeXhIUVVGSExFVkJRVVVzUzBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRkxFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUVR0UlFVTTFSQ3hIUVVGSExFTkJRVU1zWVVGQllTeEhRVUZITzFWQlEyeENMRU5CUVVNc1JVRkJSU3hQUVVGUExFTkJRVU1zVlVGQlZUczdPenM3T3pzN096czdPenRWUVdGeVFpeERRVUZETEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVenRUUVVOMFFpeERRVUZCTzFGQlEwUXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVRTdUMEZETjBJN1RVRkRSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNUVUZCVFN4SFFVRkhMRk5CUVZNc1EwRkJReXhKUVVGSkxFMUJRVTBzUlVGQlJUdFJRVU14UXl4aFFVRmhMRVZCUVVVc1EwRkJRVHRSUVVObUxGTkJRVk1zUjBGQlJ5eE5RVUZOTEVOQlFVRTdUMEZEYmtJN1MwRkRSaXhGUVVGRkxFVkJRVVVzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUVR0SFFVTmlPMFZCUTBRc1QwRkJUeXhQUVVGUExFTkJRVU1zWlVGQlpUdERRVU12UWpzN1FVRkZSQ3h0UWtGQlpUdEZRVU5pTEV0QlFVc3NSVUZCUlR0SlFVTk1MR05CUVdNc1JVRkJSVHROUVVOa0xFbEJRVWtzUlVGQlJTeERRVUZETEUxQlFVMHNSVUZCUlN4TlFVRk5MRU5CUVVNN1RVRkRkRUlzVDBGQlR5eEZRVUZGTEhWQ1FVRjFRanROUVVOb1F5eFRRVUZUTEc5Q1FVRkJMRVZCUVVVc1MwRkJTeXhGUVVGRk8xRkJRMmhDUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhSUVVGUkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdVVUZETTBJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4SFFVRkhMRWxCUVVrc2RVSkJRWFZDTzA5QlEzSkVPMHRCUTBZN08wbEJSVVFzWTBGQll5eEZRVUZGTzAxQlEyUXNTVUZCU1N4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFMUJRVTBzUTBGQlF6dE5RVU4wUWl4UFFVRlBMRVZCUVVVc2RVSkJRWFZDTzAxQlEyaERMRk5CUVZNc2MwSkJRVUVzUlVGQlJTeExRVUZMTEVWQlFVVTdVVUZEYUVKQkxFbEJRVTBzUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRSUVVNelFpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeDFRa0ZCZFVJN1QwRkRja1E3UzBGRFJqdEhRVU5HT3p0RlFVVkVMRTlCUVU4c2EwSkJRVUVzU1VGQlNUczdTVUZGVkN4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlFUdEhRVU16UWpzN1JVRkZSQ3hQUVVGUExFVkJRVVU3U1VGRFVDeFpRVUZaTEhWQ1FVRkJMRWxCUVVrN1RVRkRaRUVzU1VGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVUU3VFVGRGJFTXNTVUZCU1N4UFFVRlBMRVZCUVVVN1VVRkRXRUVzU1VGQlRTeEpRVUZKTEVkQlFVY3NUMEZCVHl4RFFVRkRMSEZDUVVGeFFpeEZRVUZGTEVOQlFVRTdVVUZETlVNc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkJPMUZCUXk5Q0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRVHRQUVVOc1F6dE5RVU5FUVN4SlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUVR0TlFVTTVRa0VzU1VGQlRTeFJRVUZSTEVkQlFVY3NTMEZCU3l4SlFVRkpMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVUU3VFVGRGVFTXNTVUZCU1N4TFFVRkxMRVZCUVVVN1VVRkRWRUVzU1VGQlRUQkNMRTFCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJRVHRSUVVNeFF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4SFFVRkhRU3hOUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZCTzFGQlF6ZENMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWRCTEUxQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVFN1QwRkRhRU03VFVGRFJERkNMRWxCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVUU3VFVGRGNFUkJMRWxCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVUU3VFVGRGNFUXNTVUZCU1N4VFFVRlRMRVZCUVVVN1VVRkRZaXhKUVVGSkxFTkJRVU1zV1VGQldTeEpRVUZKTEZOQlFWTXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVUZETEUxQlFVMHNRMEZCUVR0UFFVTTVSRHROUVVORUxFbEJRVWtzVTBGQlV5eEZRVUZGTzFGQlEySXNTVUZCU1N4RFFVRkRMRmxCUVZrc1NVRkJTU3hUUVVGVExFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVUU3VDBGRE9VUTdPenROUVVkRUxFbEJRVWtzU1VGQlNTeERRVUZETEdWQlFXVXNTMEZCU3l4WlFVRlpMRWxCUVVrc1VVRkJVU3hGUVVGRk8xRkJRM0pFTEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVFN1QwRkRia1E3UzBGRFJqczdTVUZGUkN4aFFVRmhMSGRDUVVGQkxFbEJRVWs3VFVGRFppeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJRVHRMUVVNelFqczdPenM3TzBsQlRVUXNZVUZCWVN4M1FrRkJRU3hKUVVGSk96czdPenROUVV0bUxFbEJRVWtzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4aFFVRmhMRVZCUVVVc1JVRkJSVHRSUVVNNVFpeE5RVUZOTzA5QlExQTdPMDFCUlVRc1NVRkJTU3hKUVVGSkxFTkJRVU1zWlVGQlpTeExRVUZMTEZsQlFWa3NSVUZCUlR0UlFVTjZReXhOUVVGTk8wOUJRMUE3VFVGRFJFRXNTVUZCVFN4alFVRmpMRWRCUVVjc1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlFUdE5RVU16UTBFc1NVRkJUU3hIUVVGSExFZEJRVWNzWTBGQll5eEpRVUZKTEdOQlFXTXNRMEZCUXl4TlFVRk5MRWxCUVVrc1EwRkJReXhEUVVGQk8wMUJRM2hFTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1JVRkJSU3hGUVVGRkxFMUJRVTBzUlVGQlJUczdUVUZGZUVKQkxFbEJRVTBzVTBGQlV5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVFN1RVRkRNVUlzU1VGQlNTeERRVUZETEZOQlFWTXNSVUZCUlN4RlFVRkZMRTFCUVUwc1JVRkJSVHROUVVNeFFrRXNTVUZCVFN4VFFVRlRMRWRCUVVjc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlFUczdUVUZGY2tORkxFbEJRVWtzVjBGQlZ5eERRVUZCTzAxQlEyWXNTMEZCUzBFc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJReXhGUVVGRkxFVkJRVVU3VVVGRE5VSXNWMEZCVnl4SFFVRkhMR05CUVdNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdFJRVU12UWl4SlFVRkpMRmRCUVZjc1EwRkJReXhqUVVGakxFZEJRVWNzVTBGQlV5eEZRVUZGTzFWQlF6RkRMRmRCUVZjc1EwRkJReXhWUVVGVkxFVkJRVVVzUTBGQlFUdFRRVU42UWp0aFFVTkpPMVZCUTBnc1YwRkJWeXhEUVVGRExHRkJRV0VzUlVGQlJTeERRVUZCTzFOQlF6VkNPMDlCUTBZN1MwRkRSanM3U1VGRlJDeFpRVUZaTEhWQ1FVRkJMRVZCUVVVc1MwRkJTeXhGUVVGRk8wMUJRMjVDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc2JVSkJRVzFDTEVOQlFVTXNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUVR0TlFVTjRSQ3hyUWtGQmEwSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUczdUVUZGTDBJc1NVRkJTU3hEUVVGRExHRkJRV0VzUlVGQlJTeERRVUZCT3pzN1RVRkhjRUpHTEVsQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZCTzAxQlF6bENMRWxCUVVrc1MwRkJTeXhGUVVGRk8xRkJRMVJCTEVsQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhsUVVGbExFdEJRVXNzV1VGQldUdFpRVU55UkN4SlFVRkpMRU5CUVVNc1YwRkJWenRaUVVOb1FpeEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkJPMUZCUTNKQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RlFVRkZPMVZCUTNSQ0xFbEJRVWtzUTBGQlF5eFpRVUZaTEVkQlFVY3NWMEZCVnl4RFFVRkJPMU5CUTJoRE8xRkJRMFFzU1VGQlNTeEpRVUZKTEVOQlFVTXNXVUZCV1N4TFFVRkxMRmRCUVZjc1JVRkJSVHRWUVVOeVF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRmRCUVZjc1EwRkJRVHRWUVVNdlFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRWxCUVVrc1EwRkJRVHRUUVVNelFqdFJRVU5FTEVsQlFVa3NTVUZCU1N4RFFVRkRMR05CUVdNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4alFVRmpMRU5CUVVNc1JVRkJSVHRWUVVOb1JTeEpRVUZKTEVOQlFVTXNZMEZCWXl4SFFVRkhMRXRCUVVzc1EwRkJRVHRWUVVNelFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlFUdFRRVU01UWp0UFFVTkdPMHRCUTBZN08wbEJSVVFzVVVGQlVTeHRRa0ZCUVN4SlFVRkpPMDFCUTFaQkxFbEJRVTBzVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1QwRkJUeXhEUVVGQk8wMUJRMnhETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVMEZCVXl4SlFVRkpMRU5CUVVNc1EwRkJRenRMUVVNdlF6czdTVUZGUkN4WFFVRlhMSE5DUVVGQkxFVkJRVVVzVFVGQlRTeEZRVUZGTzAxQlEyNUNRU3hKUVVGTkxFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1EwRkJRVHROUVVOc1EwRXNTVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVRTdUVUZET1VJc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkJPenROUVVWMFJDeEpRVUZKTEU5QlFVOHNTVUZCU1N4TFFVRkxMRVZCUVVVN1VVRkRjRUpCTEVsQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhsUVVGbExFdEJRVXNzV1VGQldUdFpRVU0zUXl4UFFVRlBPMWxCUTFBc1VVRkJVU3hEUVVGQk8xRkJRMXBCTEVsQlFVMHNWMEZCVnl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGQkxGRkJRVThzU1VGQlJTeEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVUVzU1VGQlJ5eEhRVUZITEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQkxFTkJRVVVzUTBGQlF5eERRVUZCTzFGQlEzcEZRU3hKUVVGTkxHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNRMEZCUVN4VlFVRlRMRWxCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkJMRWxCUVVjc1IwRkJSeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVN4RFFVRkZMRU5CUVVNc1EwRkJRVHRSUVVNM1JVRXNTVUZCVFN4WlFVRlpMRWRCUVVjc1NVRkJTU3hEUVVGRExHVkJRV1VzUzBGQlN5eFpRVUZaTzFsQlEzUkVMRTlCUVU4c1EwRkJReXhWUVVGVk8xbEJRMnhDTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVFN1VVRkRja0lzVDBGQlR5eFpRVUZaTEVsQlFVa3NWMEZCVnl4SFFVRkhMR0ZCUVdFc1IwRkJSeXhOUVVGTk8wOUJRelZFTzAxQlEwUXNUMEZCVHl4TFFVRkxPMHRCUTJJN08wbEJSVVFzWjBKQlFXZENMREpDUVVGQkxFVkJRVVVzUzBGQlN5eEZRVUZGTzAxQlEzWkNMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RlFVRkZPMUZCUTJ4RFFTeEpRVUZOTEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlEzSkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWM3VlVGRGJFSXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3VlVGRGVrSXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWExFVkJRVVU3VlVGREwwSXNaVUZCWlN4RlFVRkZMRXRCUVVzN1ZVRkRkRUlzVFVGQlRTeEZRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxPMVZCUTI1Q0xFMUJRVTBzUlVGQlJTeExRVUZMTEVOQlFVTXNTMEZCU3p0VlFVTnVRaXhUUVVGVExFVkJRVVVzUzBGQlN5eERRVUZETEZOQlFWTTdVMEZETTBJc1EwRkJRVHRQUVVOR08wdEJRMFk3TzBsQlJVUXNaVUZCWlN3d1FrRkJRU3hGUVVGRkxFdEJRVXNzUlVGQlJUdE5RVU4wUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGbEJRVmtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEZRVUZGTzFGQlF6RkVMRTFCUVUwN1QwRkRVRHROUVVORVFTeEpRVUZOTEV0QlFVc3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlFUdE5RVU01UWl4UFFVRjFReXhIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTzAxQlFXNUVMRWxCUVVFc1RVRkJUVHROUVVGRkxFbEJRVUVzVVVGQlVUdE5RVUZGTEVsQlFVRXNWMEZCVnl4dFFrRkJMMEk3VFVGRFRpeEpRVUZKTEV0QlFVc3NSVUZCUlR0UlFVTlVRU3hKUVVGTkxFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTXNZMEZCWXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8xRkJRM0pEUVN4SlFVRk5MRTlCUVU4c1IwRkJSeXhMUVVGTExFTkJRVU1zUzBGQlN5eEhRVUZITEUxQlFVMHNRMEZCUVR0UlFVTndRMEVzU1VGQlRTeEhRVUZITEVkQlFVY3NUMEZCVHl4SFFVRkhMRU5CUVVNc1IwRkJSeXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZCTzFGQlEzWkRMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVDBGQlR5eEhRVUZITEU5QlFVOHNRMEZCUVR0UlFVTnVReXhKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NRMEZCUXl4SFFVRkhMRXRCUVVzc1RVRkJUU3hEUVVGRExFbEJRVWtzVVVGQlVTeEZRVUZGTzFWQlEycEVMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zVjBGQlZ5eERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkJPMU5CUTI1RE8yRkJRMGtzU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4SlFVRkpMRU5CUVVNc1IwRkJSeXhMUVVGTExFbEJRVWtzUTBGQlF5eEpRVUZKTEZkQlFWY3NSVUZCUlR0VlFVTjJSQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8xTkJRMnhETzA5QlEwWTdTMEZEUmpzN1NVRkZSQ3hqUVVGakxIbENRVUZCTEVWQlFVVXNTMEZCU3l4RlFVRkZPMDFCUTNKQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1VVRkRNVVFzVFVGQlRUdFBRVU5RTzAxQlEwUkJMRWxCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkJPMDFCUXpsQ0xFOUJRWFZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRmxCUVZrN1RVRkJia1FzU1VGQlFTeE5RVUZOTzAxQlFVVXNTVUZCUVN4UlFVRlJPMDFCUVVVc1NVRkJRU3hYUVVGWExHMUNRVUV2UWp0TlFVTk9MRWxCUVVrc1MwRkJTeXhGUVVGRk8xRkJRMVJCTEVsQlFVMHNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdVVUZEY2tOQkxFbEJRVTBzVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRWRCUVVjc1RVRkJUU3hEUVVGQk8xRkJRM0JEUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhQUVVGUExFZEJRVWNzUTBGQlF5eEhRVUZITEUxQlFVMHNSMEZCUnl4SlFVRkpMRU5CUVVFN1VVRkRka01zU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1QwRkJUeXhEUVVGQk8xRkJRMjVETEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hEUVVGRExFZEJRVWNzUzBGQlN5eE5RVUZOTEVOQlFVTXNTVUZCU1N4UlFVRlJMRVZCUVVVN1ZVRkRha1FzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRVHRUUVVNelFqdGhRVU5KTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hEUVVGRExFZEJRVWNzUzBGQlN5eEpRVUZKTEVOQlFVTXNTVUZCU1N4WFFVRlhMRVZCUVVVN1ZVRkRka1FzU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRVHRUUVVNelFqdFBRVU5HTzAxQlEwUXNUMEZCVHl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGQk8wdEJRM3BDTzBkQlEwWTdRMEZEUml4RFFVRkJPenRCUXpOUlJEczdPenM3T3pzN096czdPenM3T3pzN096dEJRVzFDUVN4blFrRkJaVHRGUVVOaUxFOUJRVThzUlVGQlJUdEpRVU5RTEdkQ1FVRm5RaXd5UWtGQlFTeEZRVUZGTEV0QlFVc3NSVUZCUlR0TlFVTjJRaXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkJPenROUVVWNFFpeEpRVUZKTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1lVRkJZU3hGUVVGRkxFVkJRVVU3VVVGRE9VSXNUVUZCVFR0UFFVTlFPenROUVVWRVFTeEpRVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlFUdE5RVU53UTBFc1NVRkJUU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1ZVRkJRU3hGUVVGRkxFVkJRVU1zVTBGQlJ5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJRU3hEUVVGRExFTkJRVUU3TzAxQlJYUkVMRWxCUVVrc1EwRkJReXhEUVVGRExFMUJRVTBzU1VGQlNTeERRVUZETEVWQlFVVTdVVUZEYWtJc1RVRkJUVHRQUVVOUU96dE5RVVZFTEV0QlFVdEZMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdFJRVU5xUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVkQlFVY3NVMEZCVXl4RlFVRkZPMVZCUXpWQ0xFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJRVHRUUVVOcVFqdGhRVU5KTzFWQlEwZ3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGbEJRVmtzUlVGQlJTeERRVUZCTzFOQlEzQkNPMDlCUTBZN1MwRkRSanRIUVVOR08wTkJRMFlzUTBGQlFUczdRVU0zUTBRN096czdPenM3T3pzN096czdPenM3TzBkQmJVSkJMRUZCUTBFc1FVRkZRU3hCUVVkRE96dEJRM3BDUkRzN096czdPenM3T3pzN096czdPenM3TzBGQmEwSkJMRUZCUlVFc1UwRkJVeXhQUVVGUExFVkJRVVVzU1VGQlNTeEZRVUZGTzBWQlEzUkNMRWxCUTBVc2NVSkJRWEZDTzBWQlEzSkNMRWxCUVVFc1kwRkJZeXgxUWtGR1ZqczdSVUZMVGl4UFFVRlBPMGxCUTB3c1NVRkJTU3hGUVVGRkxGZEJRVmM3U1VGRGFrSXNUVUZCVFN4RlFVRkZMRU5CUVVONVFpeFpRVUZWTEVWQlFVVXNVMEZCVXl4RFFVRkRPMGxCUXk5Q0xGRkJRVkVzUlVGQlJUdE5RVU5TTEZsQlFWa3NkVUpCUVVFc1NVRkJTVHRSUVVOa00wSXNTVUZCVFN4VlFVRlZMRWRCUVVjc1EwRkJReXhYUVVGWExFVkJRVVVzYlVKQlFXMUNMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVUU3VVVGRGFFVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEdOQlFXTXNRMEZCUXl4RFFVRkJPMUZCUTJoRUxFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlFUdFJRVU5vUkN4UFFVRlBMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzA5QlF6VkNPMHRCUTBZN08wbEJSVVFzVDBGQlR5eEZRVUZGTzAxQlExQXNZMEZCWXl4NVFrRkJRU3hGUVVGRkxFTkJRVU1zUlVGQlJUdFJRVU5xUWtFc1NVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRWxCUVVrc1JVRkJSU3hEUVVGQk8xRkJRM1pETEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZCTEV0QlFVc3NSVUZCUXp0VlFVTXZRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNSVUZCUlN4RlFVRkJMRTlCUVU4c1MwRkJTeXhGUVVGQk8xVkJRM1pFTEU5QlFVOHNTVUZCU1R0VFFVTmFMRU5CUVVNc1EwRkJRVHRSUVVOR0xFOUJRVTg3VlVGRFRDeERRVUZETEVOQlFVTXNVMEZCVXl4RlFVRkZPMWxCUTFnc1IwRkJSeXhGUVVGRkxFOUJRVTg3V1VGRFdpeFhRVUZYTEVWQlFVVXNlVUpCUVhsQ08xZEJRM1pETEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRUUVVOb1FqdFBRVU5HTzB0QlEwWTdPMGxCUlVRc1RVRkJUU3hwUWtGQlFTeEZRVUZGTEdGQlFXRXNSVUZCUlRzN08wMUJRM0pDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1RVRkJUU3hEUVVGQk96dE5RVVYwUWl4SlFVRkpMRU5CUVVNc1UwRkJVeXhEUVVGRExGbEJRVWM3VVVGRGFFSjVRaXhOUVVGSkxFTkJRVU1zV1VGQldTeEZRVUZGTEVOQlFVRTdUMEZEY0VJc1EwRkJReXhEUVVGQk96dE5RVVZHTEU5QlFVOHNZVUZCWVN4RFFVRkRMRTFCUVUwc1JVRkJSVHRSUVVNelFpeEhRVUZITEVWQlFVVXNVMEZCVXp0UlFVTmtMRXRCUVVzc1JVRkJSU3hGUVVGRkxGZEJRVmNzUlVGQlJTeE5RVUZOTEVWQlFVVTdVVUZET1VJc1YwRkJWeXhGUVVGRkxFbEJRVWtzUTBGQlF5eFpRVUZaTzFGQlF6bENMRVZCUVVVc1JVRkJSU3hqUVVGakxFTkJRVU1zU1VGQlNTeEZRVUZGTzFWQlEzWkNMRTFCUVUwc1JVRkJSU3hKUVVGSkxFTkJRVU1zWjBKQlFXZENPMVZCUXpkQ0xGVkJRVlVzUlVGQlJTeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ08xVkJRMnBETEZOQlFWTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1pVRkJaVHRWUVVNdlFpeFJRVUZSTEVWQlFVVXNTVUZCU1N4RFFVRkRMR05CUVdNN1UwRkRPVUlzUTBGQlF6dFJRVU5HTEZkQlFWY3NSVUZCUlN4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdUMEZEZWtNc1JVRkJSU3hKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkRPMHRCUTNaRE8wZEJRMFk3UTBGRFJqczdRVUZGUkN4alFVRmxPMFZCUTJJc1NVRkJTU3hsUVVGQkxFVkJRVVVzU1VGQlNTeEZRVUZGTzBsQlExWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEUxQlFVMHNSVUZCUlN4UFFVRlBMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlFUdEhRVU01UXp0RFFVTkdMRU5CUVVFN08wRkRha1pFT3pzN096czdPenM3T3pzN096czdPenM3TzBGQmJVSkJMRUZCUlVFc1UwRkJVeXhYUVVGWExFVkJRVVVzU1VGQlNTeEZRVUZGTzBWQlF6RkNMRWxCUTBVc2NVSkJRWEZDTzBWQlEzSkNMRWxCUVVFc1kwRkJZeXgxUWtGR1ZqczdSVUZMVGl4UFFVRlBPMGxCUTB3c1NVRkJTU3hGUVVGRkxHVkJRV1U3U1VGRGNrSXNUVUZCVFN4RlFVRkZMRU5CUVVORkxGbEJRVlVzUlVGQlJTeFRRVUZUTEVOQlFVTTdTVUZETDBJc1MwRkJTeXhGUVVGRk8wMUJRMHdzWlVGQlpTeEZRVUZGTzFGQlEyWXNTVUZCU1N4RlFVRkZMRU5CUVVNc1RVRkJUU3hEUVVGRE8xRkJRMlFzVDBGQlR5eEZRVUZGTEZWQlFWVTdVVUZEYmtJc1UwRkJVeXh2UWtGQlFTeEZRVUZGTEV0QlFVc3NSVUZCUlR0VlFVTm9RaXhQUVVGUExFTkJRVU1zV1VGQldTeEZRVUZGTEZWQlFWVXNRMEZCUXl4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdVMEZEZUVRN1QwRkRSanROUVVORUxGVkJRVlVzUlVGQlJUdFJRVU5XTEVsQlFVa3NSVUZCUlN4RFFVRkRMRTlCUVU4c1EwRkJRenRSUVVObUxFOUJRVThzUlVGQlJTeEpRVUZKTzA5QlEyUTdTMEZEUmp0SlFVTkVMRkZCUVZFc1JVRkJSVHROUVVOU0xGbEJRVmtzZFVKQlFVRXNTVUZCU1R0UlFVTmtNMElzU1VGQlRTeFZRVUZWTEVkQlFVY3NRMEZCUXl4bFFVRmxMRVZCUVVVc2RVSkJRWFZDTEVWQlFVVXNVMEZCVXl4RFFVRkRMRU5CUVVFN1VVRkRlRVVzU1VGQlNTeEpRVUZKTEVOQlFVTXNaVUZCWlN4TFFVRkxMRmxCUVZrc1JVRkJSVHRWUVVONlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMREJDUVVFd1FpeERRVUZETEVOQlFVRTdVMEZETlVNN1lVRkRTVHRWUVVOSUxGVkJRVlVzUTBGQlF5eEpRVUZKTEVOQlFVTXNkMEpCUVhkQ0xFTkJRVU1zUTBGQlFUdFRRVU14UXp0UlFVTkVMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTzFWQlEzQkNMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zZDBKQlFYZENMRU5CUVVNc1EwRkJRVHRUUVVNeFF6dFJRVU5FTEU5QlFVOHNWVUZCVlN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU03VDBGRE5VSTdTMEZEUmpzN1NVRkZSQ3hQUVVGUExFVkJRVVU3VFVGRFVDeGpRVUZqTEhsQ1FVRkJMRVZCUVVVc1EwRkJReXhGUVVGRk8xRkJRMnBDUVN4SlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNTVUZCU1N4RlFVRkZMRU5CUVVFN1VVRkRka01zU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4TFFVRkxMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVUVzUzBGQlN5eEZRVUZETzFWQlF5OUNMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMR2RDUVVGblFpeEZRVUZGTEVWQlFVRXNUMEZCVHl4TFFVRkxMRVZCUVVFN1ZVRkRka1FzVDBGQlR5eEpRVUZKTzFOQlExb3NRMEZCUXl4RFFVRkJPMUZCUTBZc1QwRkJUenRWUVVOTUxFTkJRVU1zUTBGQlF5eFRRVUZUTEVWQlFVVTdXVUZEV0N4SFFVRkhMRVZCUVVVc1QwRkJUenRaUVVOYUxGZEJRVmNzUlVGQlJTdzJRa0ZCTmtJN1YwRkRNME1zUlVGQlJTeEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRPMU5CUTJoQ08wOUJRMFk3UzBGRFJqczdTVUZGUkN4TlFVRk5MR2xDUVVGQkxFVkJRVVVzWVVGQllTeEZRVUZGT3pzN1RVRkRja0lzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4VlFVRlZMRU5CUVVFN096czdPenM3VFVGUE1VSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNTVUZCU1N4RlFVRkZMRU5CUVVFN1RVRkRka01zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4WlFVRkhPMUZCUTJoQ2VVSXNUVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSU3hEUVVGQk8wOUJRM0JDTEVOQlFVTXNRMEZCUVRzN1RVRkZSaXhQUVVGUExHRkJRV0VzUTBGQlF5eE5RVUZOTEVWQlFVVTdVVUZETTBJc1IwRkJSeXhGUVVGRkxGTkJRVk03VVVGRFpDeExRVUZMTEVWQlFVVXNSVUZCUlN4WFFVRlhMRVZCUVVVc1ZVRkJWU3hGUVVGRk8xRkJRMnhETEVWQlFVVXNSVUZCUlN4alFVRmpMRU5CUVVNc1NVRkJTU3hGUVVGRk8xVkJRM1pDTEUxQlFVMHNSVUZCUlN4SlFVRkpMRU5CUVVNc1dVRkJXVHRWUVVONlFpeFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMR2RDUVVGblFqdFZRVU5xUXl4VFFVRlRMRVZCUVVVc1NVRkJTU3hEUVVGRExHVkJRV1U3VlVGREwwSXNVVUZCVVN4RlFVRkZMRWxCUVVrc1EwRkJReXhqUVVGak8xTkJRemxDTEVOQlFVTTdVVUZEUml4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRExGbEJRVms3VVVGRE9VSXNWMEZCVnl4RlFVRkZMSEZDUVVGeFFpeERRVUZETEVsQlFVa3NRMEZCUXp0UFFVTjZReXhGUVVGRkxFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNZVUZCWVN4RFFVRkRMRU5CUVVNN1MwRkRka003UjBGRFJqdERRVU5HT3p0QlFVVkVMR1ZCUVdVN1JVRkRZaXhKUVVGSkxHVkJRVUVzUlVGQlJTeEpRVUZKTEVWQlFVVTdTVUZEVml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNWVUZCVlN4RlFVRkZMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZCTzBkQlEzUkVPME5CUTBZc1EwRkJRVHM3UVVNMVIwUTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYZENRU3hCUVVWQmVrSXNTVUZCVFN4bFFVRmxMRWRCUVVjc1JVRkJSU3hEUVVGQk8wRkJRekZDUVN4SlFVRk5MRzlDUVVGdlFpeEhRVUZITEVOQlFVTXNRMEZCUVRzN1FVRkZPVUlzVTBGQlV5eFpRVUZaTEVWQlFVVXNTVUZCU1N4RlFVRkZPMFZCUXpOQ0xFbEJRMFVzY1VKQlFYRkNPMFZCUTNKQ0xFbEJRVUVzWTBGQll5eDFRa0ZHVmpzN1JVRkxUaXhQUVVGUE8wbEJRMHdzU1VGQlNTeEZRVUZGTEdkQ1FVRm5RanRKUVVOMFFpeE5RVUZOTEVWQlFVVXNRMEZCUXpKQ0xGbEJRVlVzUTBGQlF6dEpRVU53UWl4TFFVRkxMRVZCUVVVN096czdPMDFCUzB3c1UwRkJVeXhGUVVGRk8xRkJRMVFzU1VGQlNTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJRenRSUVVOMFFpeFBRVUZQTEVWQlFVVXNVVUZCVVR0UlFVTnFRaXhUUVVGVExHOUNRVUZCTEVWQlFVVXNSMEZCUnl4RlFVRkZPMVZCUTJRc1NVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeEhRVUZITEV0QlFVc3NVVUZCVVN4RlFVRkZPMWxCUXpWQ0xFOUJRVThzU1VGQlNUdFhRVU5hTzFWQlEwUXNSMEZCUnl4SFFVRkhMRkZCUVZFc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdFZRVU51UWl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4RFFVRkRPMU5CUXpsQ08wOUJRMFk3T3pzN08wMUJTMFFzVjBGQlZ5eEZRVUZGTzFGQlExZ3NTVUZCU1N4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFMUJRVTBzUTBGQlF6dFJRVU4wUWl4UFFVRlBMRVZCUVVVc2IwSkJRVzlDTzFGQlF6ZENMRk5CUVZNc2MwSkJRVUVzUlVGQlJTeEhRVUZITEVWQlFVVTdWVUZEWkN4SFFVRkhMRWRCUVVjc1VVRkJVU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzFWQlEyNUNMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NSMEZCUnl4SFFVRkhMRU5CUVVNN1UwRkRPVUk3VDBGRFJqczdPenM3VFVGTFJDeFhRVUZYTEVWQlFVVTdVVUZEV0N4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETzFGQlEzUkNMRTlCUVU4c1JVRkJSU3hOUVVGTk8xRkJRMllzVTBGQlV5eHpRa0ZCUVN4RlFVRkZMRWRCUVVjc1JVRkJSVHRWUVVOa0xFbEJRVWtzUTBGQlF5eEhRVUZITEVsQlFVa3NSMEZCUnl4TFFVRkxMRTFCUVUwc1JVRkJSVHRaUVVNeFFpeFBRVUZQTEVsQlFVazdWMEZEV2p0VlFVTkVMRWRCUVVjc1IwRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdWVUZEYmtJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNTVUZCU1N4SFFVRkhMRWRCUVVjc1EwRkJRenRUUVVNNVFqdFBRVU5HTzB0QlEwWTdPMGxCUlVRc1QwRkJUeXhyUWtGQlFTeEpRVUZKTzAxQlExUXNTVUZCU1N4RFFVRkRMRk5CUVZNc1JVRkJSU3hEUVVGQk8wdEJRMnBDT3p0SlFVVkVMRTlCUVU4c2EwSkJRVUVzU1VGQlNUdE5RVU5VTEVsQlFVa3NRMEZCUXl4VFFVRlRMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJTeERRVUZETEVOQlFVRTdTMEZEYWtNN08wbEJSVVFzVDBGQlR5eEZRVUZGTzAxQlExQXNaVUZCWlN3d1FrRkJRU3hGUVVGRkxFTkJRVU1zUlVGQlJTeFRRVUZUTEVWQlFVVTdPenRSUVVNM1FqTkNMRWxCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4SlFVRkpMRVZCUVVVc1EwRkJRVHRSUVVOMlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVOc1FpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVOcVFpeEpRVUZKTEVOQlFVTXNUVUZCVFN4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zVlVGQlFTeExRVUZMTEVWQlFVTTdWVUZETDBJc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1owSkJRV2RDTEVWQlFVVXNSVUZCUVN4UFFVRlBMRXRCUVVzc1JVRkJRVHRWUVVOMlJFRXNTVUZCVFN4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRWRCUVVjc1EwRkJRVHRWUVVOMFF5eEpRVUZKTEVkQlFVY3NTMEZCU3l4VFFVRlRMRWxCUVVrc1IwRkJSeXhMUVVGTExGTkJRVk1zUlVGQlJUdFpRVU14UTNsQ0xFMUJRVWtzUTBGQlF5eERRVUZCTEVkQlFVVXNSMEZCUlN4SFFVRkhMRU5CUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlFUdFpRVU4yUWl4UFFVRlBMRXRCUVVzN1YwRkRZanRWUVVORUxFbEJRVWtzUjBGQlJ5eExRVUZMTEZGQlFWRXNSVUZCUlR0WlFVTndRa0VzVFVGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3V1VGRGVrSXNUMEZCVHl4TFFVRkxPMWRCUTJJN1ZVRkRSQ3hKUVVGSkxFZEJRVWNzUzBGQlN5eE5RVUZOTEVWQlFVVTdXVUZEYkVKQkxFMUJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGQk8xbEJRM2hDTEU5QlFVOHNTMEZCU3p0WFFVTmlPMVZCUTBRc1QwRkJUeXhKUVVGSk8xTkJRMW9zUTBGQlF5eERRVUZCTzFGQlEwWXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlFUdFJRVU4yUWl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzFGQlEyNUNka0lzU1VGQlNTeFJRVUZSTEVkQlFVY3NSVUZCUlN4RFFVRkJPMUZCUTJwQ0xFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVRTdVVUZETjBNc1VVRkJVU3hIUVVGSExGRkJRVkU3VjBGRGFFSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU03VjBGRGNrSXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlFUdFJRVU4yUWl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eFZRVUZWTEVWQlFVVTdWVUZETVVJc1IwRkJSeXhGUVVGRkxGTkJRVk03VlVGRFpDeFhRVUZYTEVWQlFVVXNjME5CUVhORE8xTkJRM0JFTEVWQlFVVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRGJFSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRSUVVNM1F5eFBRVUZQTzFWQlEwd3NRMEZCUXl4RFFVRkRMRk5CUVZNc1JVRkJSVHRaUVVOWUxFZEJRVWNzUlVGQlJTeFBRVUZQTzFsQlExb3NWMEZCVnl4RlFVRkZMRGhDUVVFNFFqdFhRVU0xUXl4RlFVRkZMRkZCUVZFc1EwRkJRenRUUVVOaU8wOUJRMFk3TzAxQlJVUXNUMEZCVHl4clFrRkJRU3hGUVVGRkxGTkJRVk1zUlVGQlJUczdPenM3T3pzN096czdVVUZYYkVKQkxFbEJRVWtzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1QwRkJUeXhEUVVGQk8xRkJRelZDUml4SlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVFN1VVRkRia05CTEVsQlFVMHNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVUU3VVVGRGJrSXNVMEZCVXl4VlFVRlZMRVZCUVVVc1MwRkJTeXhGUVVGRkxFdEJRVXNzUlVGQlJUdFZRVU5xUTBFc1NVRkJUU3hQUVVGUExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVODdZMEZEZWtJc1VVRkJVU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRPMk5CUXpOQ0xGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNWMEZCVnl4SlFVRkpMRU5CUVVNc1EwRkJReXhIUVVGSExGRkJRVkVzUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGQk8xVkJRM2hGTEU5QlFVOHNTMEZCU3l4SFFVRkhMRTlCUVU4N1UwRkRka0k3VVVGRFJDeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZMRU5CUVVNc1VVRkJVU3hMUVVGTExFTkJRVU1zUlVGQlJUdFZRVU16UWtFc1NVRkJUU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZCTzFWQlF6RkRMRTlCUVU4c1IwRkJSeXhWUVVGVkxFTkJRVU1zUlVGQlJTeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU1zUzBGQlN5eEZRVUZGTEUxQlFVMHNRMEZCUXl4RFFVRkJPMU5CUXk5RU8yRkJRMGs3TzFWQlJVZ3NUMEZCVHl4SFFVRkhMRlZCUVZVc1EwRkJReXhSUVVGUkxFTkJRVU1zWlVGQlpTeERRVUZETEZkQlFWY3NSVUZCUlN4VFFVRlRMRU5CUVVNc1EwRkJRVHRUUVVOMFJUczdVVUZGUkN4SFFVRkhMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUTBGQlFUdFJRVU53UWl4SlFVRkpMRWRCUVVjc1NVRkJTU3hIUVVGSExFdEJRVXNzVVVGQlVTeEZRVUZGTzFWQlF6TkNMRWRCUVVjc1IwRkJSeXhSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdVMEZEY0VJN1lVRkRTVHRWUVVOSUxFZEJRVWNzUjBGQlJ5eGxRVUZsTEVOQlFVRTdVMEZEZEVJN1VVRkRSQ3hIUVVGSExFZEJRVWNzUjBGQlJ5eEhRVUZITEV0QlFVc3NRMEZCUVRzN1VVRkZha0lzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVFN1VVRkRlRUlzUjBGQlJ5eEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVFN1VVRkRkRUlzU1VGQlNTeExRVUZMTEVsQlFVa3NTMEZCU3l4TFFVRkxMRTFCUVUwc1JVRkJSVHRWUVVNM1FpeExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFdEJRVXNzUTBGQlFUdFRRVU5vUXp0UlFVTkVMRWxCUVVrc1IwRkJSeXhKUVVGSkxFZEJRVWNzUzBGQlN5eE5RVUZOTEVWQlFVVTdWVUZEZWtJc1IwRkJSeXhIUVVGSExGRkJRVkVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0VFFVTndRanM3TzFGQlIwUXNTVUZCU1N4SFFVRkhMRXRCUVVzc1RVRkJUU3hKUVVGSkxFdEJRVXNzUzBGQlN5eE5RVUZOTEVWQlFVVTdWVUZEZEVNc1FVRkJTU3hCUVVGelF5eEJRVXQ2UXp0VFFVTkdPenRoUVVWSkxFbEJRVWtzUjBGQlJ5eExRVUZMTEUxQlFVMHNTVUZCU1N4TFFVRkxMRXRCUVVzc1RVRkJUU3hGUVVGRk8xVkJRek5ETEV0QlFVc3NSMEZCUnl4RFFVRkRMRTlCUVU4c1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhIUVVGSExFTkJRVUU3VTBGRE1VTTdPMkZCUlVrc1NVRkJTU3hIUVVGSExFdEJRVXNzVFVGQlRTeEpRVUZKTEV0QlFVc3NTMEZCU3l4TlFVRk5MRVZCUVVVN1ZVRkRNME1zUjBGQlJ5eEhRVUZITEVOQlFVTXNUMEZCVHl4SFFVRkhMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkJPMU5CUTNSRE96dGhRVVZKTEVsQlFVa3NSMEZCUnl4TFFVRkxMRTFCUVUwc1NVRkJTU3hMUVVGTExFdEJRVXNzVFVGQlRTeEZRVUZGTzFWQlF6TkRSU3hKUVVGSkxGVkJRVlVzUTBGQlFUdFZRVU5rUml4SlFVRk5MRzFDUVVGdFFpeEhRVUZITEZsQlFVYzdXVUZETjBJc1ZVRkJWU3hIUVVGSExFZEJRVWNzUjBGQlJ5eExRVUZMTEVkQlFVY3NRMEZCUXl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZCTzFsQlF6RkRMRWxCUVVrc1ZVRkJWU3hIUVVGSExFOUJRVThzUlVGQlJUdGpRVU40UWl4TFFVRkxMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVlVGQlZTeERRVUZETEVkQlFVY3NSMEZCUnl4RFFVRkJPMkZCUTNSRE8ybENRVU5KTEVsQlFVa3NWVUZCVlN4SFFVRkhMRTlCUVU4c1NVRkJTU3hIUVVGSExFZEJRVWNzUTBGQlF5eEZRVUZGTzJOQlEzaERMRWRCUVVjc1JVRkJSU3hEUVVGQk8yTkJRMHdzYlVKQlFXMUNMRVZCUVVVc1EwRkJRVHRoUVVOMFFqdHBRa0ZEU1N4SlFVRkpMRlZCUVZVc1IwRkJSeXhQUVVGUExFVkJRVVU3WTBGRE4wSXNTMEZCU3l4SFFVRkhMRTlCUVU4c1EwRkJRVHRoUVVOb1FqdFhRVU5HTEVOQlFVRTdWVUZEUkN4dFFrRkJiVUlzUlVGQlJTeERRVUZCTzFOQlEzUkNPMUZCUTBRc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eEhRVUZITEVOQlFVRTdVVUZEZGtJc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eExRVUZMTEVOQlFVRTdVVUZEZWtJc1NVRkJTU3hEUVVGRExGVkJRVlVzUjBGQlJ5eEhRVUZITEVOQlFVRTdUMEZEZEVJN08wMUJSVVFzVjBGQlZ5eHpRa0ZCUVN4RlFVRkZMR0ZCUVdFc1JVRkJSVHM3TzFGQlF6RkNMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzUlVGQlJTeERRVUZCTzFGQlEyeENRU3hKUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkJPMUZCUTNwQ1FTeEpRVUZOTEZOQlFWTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1dVRkJXU3hEUVVGQk8xRkJRMjVEUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZCTzFGQlEzaENRU3hKUVVGTkxGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNXVUZCV1N4SFFVRkhMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4WlFVRlpMRVZCUVVVc1QwRkJUeXhGUVVGRkxFVkJRVVVzUTBGQlF5eERRVUZCT3p0UlFVVTFSeXhMUVVGTFJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0VlFVTTFRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVTXNRMEZCUXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3VlVGRGNFVXNWMEZCVnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhUUVVGVExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3VTBGRE1VTTdVVUZEUkN4TFFVRkxRU3hKUVVGSlJTeEhRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZRU3hIUVVGRExFZEJRVWNzVTBGQlV5eEZRVUZGUVN4SFFVRkRMRVZCUVVVc1JVRkJSVHRWUVVOc1EzRkNMRTFCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4VlFVRlZMRVZCUVVVN1dVRkRNME1zUjBGQlJ5eEZRVUZGTEVOQlFVRXNVVUZCVHl4SFFVRkZja0lzUjBGQlF5eERRVUZGTzFsQlEycENMRXRCUVVzc1JVRkJSVHRqUVVOTUxHRkJRV0VzUlVGQlJVRXNSMEZCUXp0aFFVTnFRanRaUVVORUxGZEJRVmNzUlVGQlJTeFRRVUZUTzFsQlEzUkNMRmRCUVZjc1JVRkJSVHRqUVVOWUxFdEJRVXNzUlVGQlJYRkNMRTFCUVVrc1EwRkJReXhaUVVGWkxFZEJRVWNzU1VGQlNUdGpRVU12UWl4VlFVRlZMRVZCUVVWeVFpeEhRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSM0ZDTEUxQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1NVRkJTVHRoUVVOcVJEdFhRVU5HTEVWQlFVVXNWMEZCVnl4RFFVRkRja0lzUjBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMU5CUTNCQ08wOUJRMFk3TzAxQlJVUXNVMEZCVXl4dlFrRkJRU3hKUVVGSk8xRkJRMWdzU1VGQlNTeERRVUZETEdsQ1FVRnBRaXhGUVVGRkxFTkJRVUU3VDBGRGVrSTdPMDFCUlVRc2FVSkJRV2xDTERSQ1FVRkJMRWxCUVVrN096czdPenM3T3pzN1VVRlJia0pLTEVsQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVUU3VVVGRGJrTkJMRWxCUVUwc1ZVRkJWU3hIUVVGSExFVkJRVVVzUTBGQlFUdFJRVU55UWtFc1NVRkJUU3h4UWtGQmNVSXNSMEZCUnl4RlFVRkZMRU5CUVVFN1VVRkRhRU5CTEVsQlFVMHNZVUZCWVN4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVONFFrVXNTVUZCU1N4VFFVRlRMRWRCUVVjc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkJPMUZCUTNaRFFTeEpRVUZKTEc5Q1FVRnZRaXhIUVVGSExFTkJRVU1zUTBGQlFUczdPMUZCUnpWQ0xFdEJRVXRCTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzVTBGQlV5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMVZCUTJ4RFJpeEpRVUZOTEZOQlFWTXNSMEZCUjNsQ0xFMUJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGQk8xVkJRM1JEZWtJc1NVRkJUU3hUUVVGVExFZEJRVWNzVTBGQlV5eERRVUZETEdkQ1FVRm5RaXhEUVVGQk8xVkJRelZEUVN4SlFVRk5MRTFCUVUwc1IwRkJSeXhUUVVGVExFZEJRVWNzVTBGQlV5eERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVU1zVFVGQlRTeEhRVUZITEVOQlFVTXNRMEZCUVR0VlFVTjJSU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkJPMVZCUXpGQ0xHRkJRV0VzUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4TlFVRk5MRU5CUVVFN1ZVRkRla0lzY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eHpRa0ZCYzBJc1JVRkJSU3hEUVVGRExFTkJRVUU3VlVGRE4wUXNTVUZCU1N4TlFVRk5MRWRCUVVjc1UwRkJVeXhGUVVGRk8xbEJRM1JDTEZOQlFWTXNSMEZCUnl4TlFVRk5MRU5CUVVFN1dVRkRiRUlzYjBKQlFXOUNMRWRCUVVjc1EwRkJReXhEUVVGQk8xZEJRM3BDTzFOQlEwWTdPenRSUVVkRVFTeEpRVUZOTEZsQlFWa3NSMEZCUnl4RlFVRkZMRU5CUVVFN1VVRkRka0pCTEVsQlFVMHNWVUZCVlN4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVOeVFpeExRVUZMUlN4SlFVRkpSU3hIUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGUVN4SFFVRkRMRWRCUVVjc1UwRkJVeXhGUVVGRlFTeEhRVUZETEVWQlFVVXNSVUZCUlR0VlFVTnNReXhKUVVGSlFTeEhRVUZETEV0QlFVc3NiMEpCUVc5Q0xFVkJRVVU3V1VGRE9VSXNVVUZCVVR0WFFVTlVPMVZCUTBSS0xFbEJRVTAwUWl4WFFVRlRMRWRCUVVjc1ZVRkJWU3hEUVVGRGVFSXNSMEZCUXl4RFFVRkRMRU5CUVVFN1ZVRkRMMEpLTEVsQlFVMHNZVUZCWVN4SFFVRkhORUlzVjBGQlV5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExHMUNRVUZ0UWl4RFFVRkRMRU5CUVVFN1ZVRkRja1UxUWl4SlFVRk5MRWRCUVVjc1IwRkJSeXhoUVVGaExFTkJRVU1zVFVGQlRTeERRVUZCTzFWQlEyaERMRXRCUVV0RkxFbEJRVWtzUTBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0WlFVTnFRMFlzU1VGQlRTeFBRVUZQTEVkQlFVY3NZVUZCWVN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8xbEJRMmhEUVN4SlFVRk5MRkZCUVZFc1IwRkJSeXhQUVVGUExFTkJRVU1zY1VKQlFYRkNMRVZCUVVVc1EwRkJRVHRaUVVOb1JDeEpRVUZKTEZGQlFWRXNRMEZCUXl4SFFVRkhMRWRCUVVjc1UwRkJVeXhGUVVGRk8yTkJRelZDUVN4SlFVRk5MRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zVDBGQlR5eERRVUZETEZsQlFWa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1EwRkJRVHRqUVVNNVF5eFpRVUZaTEVOQlFVTXNTVUZCU1N4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGQk8yTkJRM0pDTEZWQlFWVXNRMEZCUXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhGUVVGRkxFZEJRVWNzUlVGQlJTeFBRVUZQTEVWQlFVVXNUVUZCVFN4RlFVRkZMRkZCUVZFc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlFUdGpRVU14UkN4aFFVRmhMRU5CUVVOSkxFZEJRVU1zUTBGQlF5eEpRVUZKTEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVFN1lVRkRjRU03VjBGRFJqdFRRVU5HT3pzN08xRkJTVVFzV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJTeFBRVUZQTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGQk8xRkJRMjVFU2l4SlFVRk5MRlZCUVZVc1IwRkJSeXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZCTzFGQlEzUkRMRk5CUVZNc2JVSkJRVzFDTEVWQlFVVXNVMEZCVXl4RlFVRkZPenRWUVVWMlF5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWRCUVVjc1RVRkJRU3hEUVVGRExFMUJRVUVzWVVGQlowSXNRMEZCUXl4RFFVRkJPMVZCUTNSRExHOUNRVUZ2UWl4SFFVRkhMR0ZCUVdFc1EwRkJReXhQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdWVUZEZGtRc1NVRkJZU3hQUVVGUE8xVkJRVlVzU1VGQlFTeFZRVUZWTEc5Q1FVRnNRenRWUVVOT0xIRkNRVUZ4UWl4RFFVRkRMRzlDUVVGdlFpeERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8xVkJRMmhGTEdGQlFXRXNRMEZCUXl4dlFrRkJiMElzUTBGQlF5eEpRVUZKTEZWQlFWVXNRMEZCUVR0VFFVTnNSRHRSUVVORUxFdEJRVXRGTEVsQlFVbEZMRWRCUVVNc1IwRkJSeXhEUVVGRExFVkJRVVZCTEVkQlFVTXNSMEZCUnl4VlFVRlZMRVZCUVVWQkxFZEJRVU1zUlVGQlJTeEZRVUZGTzFWQlEyNURMRzFDUVVGdFFpeERRVUZETEZWQlFWVXNRMEZCUXl4WlFVRlpMRU5CUVVOQkxFZEJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0VFFVTnFSRHRSUVVORUxFdEJRVXRHTEVsQlFVbEZMRWRCUVVNc1IwRkJSeXhEUVVGRExFVkJRVVZCTEVkQlFVTXNSMEZCUnl4VFFVRlRMRVZCUVVWQkxFZEJRVU1zUlVGQlJTeEZRVUZGTzFWQlEyeERMRlZCUVZVc1EwRkJRMEVzUjBGQlF5eERRVUZETEVOQlFVTXNWMEZCVnl4RFFVRkRMSEZDUVVGeFFpeERRVUZEUVN4SFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8xTkJRM0JFTzA5QlEwWTdTMEZEUmpzN1NVRkZSQ3hOUVVGTkxHbENRVUZCTEVWQlFVVXNZVUZCWVN4RlFVRkZPenM3VFVGRGNrSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhYUVVGWExFTkJRVUU3VFVGRE0wSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRTeERRVUZETEU5QlFVOHNTVUZCU1N4RlFVRkZMRU5CUVVFN1RVRkRka01zU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4WlFVRkhPMUZCUTJoQ2NVSXNUVUZCU1N4RFFVRkRMRmxCUVZrc1JVRkJSU3hEUVVGQk8wOUJRM0JDTEVOQlFVTXNRMEZCUVR0TlFVTkdla0lzU1VGQlRTeFhRVUZYTEVkQlFVY3NjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVRTdUVUZETDBNc1QwRkJUeXhoUVVGaExFTkJRVU1zVFVGQlRTeEZRVUZGTzFGQlF6TkNMRWRCUVVjc1JVRkJSU3hUUVVGVE8xRkJRMlFzUzBGQlN5eEZRVUZGTEVWQlFVVXNWMEZCVnl4RlFVRkZMRmRCUVZjc1JVRkJSVHRSUVVOdVF5eEZRVUZGTEVWQlFVVXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSVHRWUVVOMlFpeE5RVUZOTEVWQlFVVXNTVUZCU1N4RFFVRkRMRmxCUVZrN1ZVRkRla0lzVlVGQlZTeEZRVUZGTEVsQlFVa3NRMEZCUXl4blFrRkJaMEk3VlVGRGFrTXNVMEZCVXl4RlFVRkZMRWxCUVVrc1EwRkJReXhsUVVGbE8xVkJReTlDTEZGQlFWRXNSVUZCUlN4SlFVRkpMRU5CUVVNc1kwRkJZenRUUVVNNVFpeERRVUZETzFGQlEwWXNWMEZCVnl4RlFVRkZMQ3REUVVFclF6dFJRVU0xUkN4WFFVRlhMRVZCUVVVc1YwRkJWenRQUVVONlFpeEZRVUZGTEVsQlFVa3NRMEZCUXl4bFFVRmxMRU5CUVVNc1lVRkJZU3hGUVVGRkxGZEJRVmNzUTBGQlF5eERRVUZETzB0QlEzSkVPMGRCUTBZN1EwRkRSanM3UVVGRlJDeG5Ra0ZCWlR0RlFVTmlMRWxCUVVrc1pVRkJRU3hGUVVGRkxFbEJRVWtzUlVGQlJUdEpRVU5XTEVsQlFVa3NRMEZCUXl4cFFrRkJhVUlzUTBGQlF5eFhRVUZYTEVWQlFVVXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVUU3UjBGRGVFUTdRMEZEUml4RFFVRkJPenRCUXpkV1JEczdPenM3T3pzN096czdPenM3T3pzN096dEJRVzFDUVN4VFFVRlRMRTlCUVU4c1JVRkJSU3hKUVVGSkxFVkJRVVU3UlVGRGRFSXNTVUZCVVN4eFFrRkJjVUlzT0VKQlFYWkNPMFZCUTA0c1QwRkJUenRKUVVOTUxFbEJRVWtzUlVGQlJTeFhRVUZYTzBsQlEycENMRTFCUVUwc2FVSkJRVUVzUlVGQlJTeGhRVUZoTEVWQlFVVTdUVUZEY2tJc1QwRkJUeXhoUVVGaExFTkJRVU1zVTBGQlV5eEZRVUZGTzFGQlF6bENMRXRCUVVzc1JVRkJSU3hGUVVGRkxGZEJRVmNzUlVGQlJTeE5RVUZOTEVWQlFVVTdVVUZET1VJc1YwRkJWeXhGUVVGRkxHMUNRVUZ0UWp0UlFVTm9ReXhYUVVGWExFVkJRVVVzY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hEUVVGRE8wOUJRM3BETEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU03UzBGRGVFSTdSMEZEUmp0RFFVTkdPenRCUVVWRUxGZEJRV1U3UlVGRFlpeEpRVUZKTEdWQlFVRXNSVUZCUlN4SlFVRkpMRVZCUVVVN1NVRkRWaXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1RVRkJUU3hGUVVGRkxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkJPMGRCUXpsRE8wTkJRMFlzUTBGQlFUczdRVU55UTBRN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnRRa0VzVTBGQlV5eFRRVUZUTEVWQlFVVXNTVUZCU1N4RlFVRkZPMFZCUTNoQ0xFbEJRVkVzY1VKQlFYRkNMRGhDUVVGMlFqdEZRVU5PTEU5QlFYVkNMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXM3UlVGQk5VSXNTVUZCUVN4aFFVRmhMSEZDUVVGbU96dEZRVVZPTEU5QlFVODdTVUZEVEN4SlFVRkpMR1ZCUVVFc1NVRkJTVHROUVVOT0xFOUJRVTg3VVVGRFRDeE5RVUZOTEVWQlFVVXNTMEZCU3p0UlFVTmlMRTlCUVU4c1JVRkJSU3hEUVVGRE8xRkJRMVlzVjBGQlZ5eEZRVUZGTEVsQlFVazdVVUZEYWtJc1lVRkJZU3hGUVVGRkxHRkJRV0VzUlVGQlJUdFBRVU12UWp0TFFVTkdPenRKUVVWRUxFOUJRVThzYTBKQlFVRXNTVUZCU1R0TlFVTlVMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4VFFVRlRMRU5CUVVFN1RVRkRha01zU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUVR0TFFVTXpSRHM3U1VGRlJDeFBRVUZQTEd0Q1FVRkJMRWxCUVVrN1RVRkRWQ3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSVUZCUlR0UlFVTm9RaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGQk8wOUJRMnhETzB0QlEwWTdPMGxCUlVRc1QwRkJUeXhGUVVGRk8wMUJRMUFzVTBGQlV5eHZRa0ZCUVN4SlFVRkpPMUZCUTFnc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVRTdVVUZEYkVJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRTlCUVU4c1EwRkJRVHRSUVVONFF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4WFFVRlhMRWRCUVVjc1NVRkJTU3hEUVVGQk8xRkJRekZFTEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1IwRkJSeXhKUVVGSkxFTkJRVUU3VVVGRE5VUXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzA5QlF6ZEVPenROUVVWRUxGbEJRVmtzZFVKQlFVRXNTVUZCU1R0UlFVTmtMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzUzBGQlN5eERRVUZCTzFGQlEyNUNMRWxCUVVrN1ZVRkRSaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNRMEZCUXl4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZCTzFOQlEyeEVPMUZCUTBRc1QwRkJUeXhEUVVGRExFVkJRVVU3VTBGRFZEdFBRVU5HTzB0QlEwWTdPMGxCUlVRc1RVRkJUU3hwUWtGQlFTeEZRVUZGTEdGQlFXRXNSVUZCUlRzN096czdUVUZMY2tJc1QwRkJUeXhoUVVGaExFTkJRVU1zWVVGQllTeEZRVUZGTzFGQlEyeERMRXRCUVVzc1JVRkJSU3hGUVVGRkxGZEJRVmNzUlVGQlJTeFJRVUZSTEVWQlFVVTdVVUZEYUVNc1IwRkJSeXhGUVVGRkxGRkJRVkU3VVVGRFlpeFhRVUZYTEVWQlFVVXNjVUpCUVhGQ08xRkJRMnhETEV0QlFVc3NSVUZCUlN4RlFVRkZMR0ZCUVdFc1JVRkJSU3hKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEdsQ1FVRnBRaXhGUVVGRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVTdVVUZETlVVc1YwRkJWeXhGUVVGRkxIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJRenRQUVVONlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhEUVVGRE8wdEJRM2hDTzBkQlEwWTdRMEZEUmpzN1FVRkZSQ3hoUVVGbE8wVkJRMklzU1VGQlNTeGxRVUZCTEVWQlFVVXNTVUZCU1N4RlFVRkZPMGxCUTFZc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRkZCUVZFc1JVRkJSU3hUUVVGVExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUVR0SFFVTnNSRHREUVVOR0xFTkJRVUU3TzBGRGJrWkVPenM3T3pzN096czdPenM3T3pzN096czdPMEZCYlVKQkxGTkJRVk1zVlVGQlZTeEpRVUZKTzBWQlEzSkNMRWxCUVZFc2NVSkJRWEZDTERoQ1FVRjJRanM3UlVGRlRpeFBRVUZQTzBsQlEwd3NTVUZCU1N4RlFVRkZMR05CUVdNN1NVRkRjRUlzUzBGQlN5eEZRVUZGTzAxQlEwd3NUMEZCVHl4RlFVRkZPMUZCUTFBc1NVRkJTU3hGUVVGRkxFMUJRVTA3VVVGRFdpeFBRVUZQTEVWQlFVVXNUVUZCVFR0UlFVTm1MRk5CUVZNc2IwSkJRVUVzUlVGQlJTeExRVUZMTEVWQlFVVTdWVUZEYUVJc1QwRkJUeXhEUVVGRExFMUJRVTBzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFOQlF6bERPMDlCUTBZN1MwRkRSanRKUVVORUxFbEJRVWtzWlVGQlFTeEpRVUZKTzAxQlEwNHNUMEZCVHp0UlFVTk1MRTFCUVUwc1JVRkJSU3hEUVVGRExFTkJRVU03VVVGRFZpeFZRVUZWTEVWQlFVVXNRMEZCUXp0UFFVTmtPMHRCUTBZN1NVRkRSQ3hQUVVGUExHdENRVUZCTEVsQlFVazdUVUZEVkN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCV1N4RFFVRkJPMDFCUTNaRExFbEJRVWtzU1VGQlNTeERRVUZETEU5QlFVOHNTMEZCU3l4TlFVRk5MRVZCUVVVN1VVRkRNMElzU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVVFN1QwRkRhRUk3VjBGRFNUdFJRVU5JTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlFUdFBRVU01UWp0TFFVTkdPMGxCUTBRc1MwRkJTeXhGUVVGRk8wMUJRMHdzVFVGQlRTeHBRa0ZCUVN4RlFVRkZMRWRCUVVjc1JVRkJSVHRSUVVOWUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhIUVVGTkxFOUJRVWNzUTBGQlFUdFBRVU5zUXp0TlFVTkVMRTlCUVU4c2EwSkJRVUVzUlVGQlJTeEhRVUZITEVWQlFVVTdVVUZEV2l4SlFVRkpMRWRCUVVjc1MwRkJTeXhOUVVGTkxFVkJRVVU3VlVGRGJFSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVUU3VTBGRGFFSTdZVUZEU1R0VlFVTklMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUVR0VFFVTTVRanRQUVVOR08wdEJRMFk3U1VGRFJDeFBRVUZQTEVWQlFVVTdUVUZEVUN4UFFVRlBMR3RDUVVGQkxFVkJRVVVzVDBGQlZ5eEZRVUZGTzNsRFFVRk9MRWRCUVVjc1EwRkJRenM3VVVGRGJFSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhQUVVGUExFTkJRVUU3VDBGRGRFSTdUVUZEUkN4VFFVRlRMRzlDUVVGQkxFVkJRVVVzVDBGQlR5eEZRVUZGTzFGQlEyeENMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNSMEZCUnl4WFFVRlZMRU5CUVVFN1VVRkRkRU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRQUVVOMFFqdE5RVU5FTEZWQlFWVXNjVUpCUVVFc1NVRkJTVHRSUVVOYUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRlZCUVZVc1IwRkJSeXhaUVVGWExFTkJRVUU3VVVGRGRrTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1RVRkJUU3hKUVVGSkxFbEJRVWtzUTBGQlF5eFZRVUZWTEVWQlFVVTdWVUZEYkVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVFN1ZVRkROMElzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRMRU5CUVVNc1EwRkJRVHRUUVVOMFFqdGhRVU5KTzFWQlEwZ3NTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlFUdFRRVU5vUWp0UFFVTkdPMDFCUTBRc1YwRkJWeXh6UWtGQlFTeEpRVUZKTzFGQlEySkJMRWxCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUMEZCVHl4SlFVRkpMRVZCUVVVc1EwRkJRVHRSUVVNeFF5eEpRVUZKTEVsQlFVa3NRMEZCUXl4UFFVRlBMRXRCUVVzc1RVRkJUU3hGUVVGRk8xVkJRek5DTEU5QlFVOHNVVUZCVVR0VFFVTm9RanRSUVVORUxFOUJRVThzVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRkJMRXRCUVVzc1JVRkJRenRWUVVNelFpeFBRVUZQTEV0QlFVc3NRMEZCUXl4blFrRkJaMEk3WlVGRGVFSXNTMEZCU3l4RFFVRkRMR2RDUVVGblFpeERRVUZETEVkQlFVY3NTMEZCU3l4dFFrRkJiVUk3VTBGRGVFUXNRMEZCUXp0UFFVTklPMHRCUTBZN1NVRkRSQ3hOUVVGTkxHbENRVUZCTEVWQlFVVXNZVUZCWVN4RlFVRkZPMDFCUTNKQ0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRVHROUVVNMVFpeFBRVUZQTEdGQlFXRXNRMEZCUXl4UFFVRlBMRVZCUVVVN1VVRkROVUlzUjBGQlJ5eEZRVUZGTEZOQlFWTTdVVUZEWkN4TFFVRkxMRVZCUVVVc1JVRkJSU3hYUVVGWExFVkJRVVVzVTBGQlV5eEZRVUZGTzFGQlEycERMRmRCUVZjc1JVRkJSU3h6UWtGQmMwSTdVVUZEYmtNc1YwRkJWeXhGUVVGRkxIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJRenRQUVVONlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenRMUVVOMlFqdEhRVU5HTzBOQlEwWTdPMEZCUlVRc1kwRkJaVHRGUVVOaUxFbEJRVWtzWlVGQlFTeEZRVUZGTEVsQlFVa3NSVUZCUlR0SlFVTldMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVRTdSMEZEY0VRN1EwRkRSaXhEUVVGQk96dEJRekZIUkRzN096czdPenM3T3pzN096czdPenM3T3p0QlFXMUNRU3hUUVVGVExGVkJRVlVzUlVGQlJTeEpRVUZKTEVWQlFVVTdSVUZEZWtJc1NVRkJVU3h4UWtGQmNVSXNPRUpCUVhaQ08wVkJRMDRzVDBGQmNVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTenRGUVVFeFFpeEpRVUZCTEZkQlFWY3NiVUpCUVdJN08wVkJSVTRzVDBGQlR6dEpRVU5NTEVsQlFVa3NSVUZCUlN4alFVRmpPMGxCUTNCQ0xFdEJRVXNzUlVGQlJUdE5RVU5NTEU5QlFVOHNSVUZCUlR0UlFVTlFMRWxCUVVrc1JVRkJSU3hOUVVGTk8xRkJRMW9zVDBGQlR5eEZRVUZGTEUxQlFVMDdVVUZEWml4VFFVRlRMRzlDUVVGQkxFVkJRVVVzUzBGQlN5eEZRVUZGTzFWQlEyaENMRTlCUVU4c1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF6dFRRVU01UXp0UFFVTkdPMHRCUTBZN1NVRkRSQ3hKUVVGSkxHVkJRVUVzU1VGQlNUdE5RVU5PTEU5QlFVODdVVUZEVEN4TlFVRk5MRVZCUVVVc1EwRkJRenRSUVVOVUxGVkJRVlVzUlVGQlJTeERRVUZETzFGQlEySXNUVUZCVFN4RlFVRkZMRU5CUVVNc1EwRkJRenRQUVVOWU8wdEJRMFk3U1VGRFJDeFBRVUZQTEd0Q1FVRkJMRWxCUVVrN1RVRkRWQ3hKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1dVRkJXU3hEUVVGQk8wMUJRM1pETEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1MwRkJTeXhOUVVGTkxFVkJRVVU3VVVGRE0wSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVUU3VDBGRGFFSTdWMEZEU1R0UlFVTklMRWxCUVVrc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUVR0UFFVTTVRanRMUVVOR08wbEJRMFFzUzBGQlN5eEZRVUZGTzAxQlEwd3NUVUZCVFN4cFFrRkJRU3hGUVVGRkxFZEJRVWNzUlVGQlJUdFJRVU5ZTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFMUJRVTBzUjBGQlJ5eEhRVUZOTEU5QlFVY3NRMEZCUVR0UFFVTnNRenROUVVORUxFOUJRVThzYTBKQlFVRXNSVUZCUlN4SFFVRkhMRVZCUVVVN1VVRkRXaXhKUVVGSkxFZEJRVWNzUzBGQlN5eE5RVUZOTEVWQlFVVTdWVUZEYkVJc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eERRVUZETEVOQlFVRTdVMEZEYUVJN1lVRkRTVHRWUVVOSUxFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMRlZCUVZVc1EwRkJRVHRUUVVNNVFqdFBRVU5HTzB0QlEwWTdTVUZEUkN4UFFVRlBMRVZCUVVVN1RVRkRVQ3hQUVVGUExHdENRVUZCTEVWQlFVVXNUMEZCVnl4RlFVRkZPM2xEUVVGT0xFZEJRVWNzUTBGQlF6czdVVUZEYkVJc1NVRkJTU3hEUVVGRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVRTdVVUZEY2tJc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVWQlFVVXNWMEZCVnl4RFFVRkRMRWxCUVVrc1JVRkJSU3hoUVVGaExFVkJRVVU3VlVGRGVrUXNSVUZCUlN4RlFVRkZMRTlCUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zVFVGQlRUdFZRVU42UWl4bFFVRmxMRVZCUVVVc1QwRkJUenRWUVVONFFpeFZRVUZWTEVWQlFVVXNTVUZCU1N4RFFVRkRMRlZCUVZVN1UwRkROVUlzUTBGQlF5eERRVUZETEVOQlFVRTdVVUZEU0N4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFOUJRVThzUTBGQlFUdFBRVU4wUWp0TlFVTkVMRmRCUVZjc2MwSkJRVUVzUlVGQlJTeFBRVUZQTEVWQlFVVTdVVUZEY0VJc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4SFFVRkhMRmRCUVZVc1EwRkJRVHRSUVVOMFF5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8wOUJRM1JDTzAxQlEwUXNWVUZCVlN4eFFrRkJRU3hKUVVGSk8xRkJRMW9zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4TFFVRkxMRU5CUVVNc1ZVRkJWU3hIUVVGSExGbEJRVmNzUTBGQlFUdFJRVU4yUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhOUVVGTkxFbEJRVWtzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlR0VlFVTnNReXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJRVHRWUVVNM1FpeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk8xTkJRM1JDTzJGQlEwazdWVUZEU0N4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzFOQlEyaENPMDlCUTBZN1RVRkRSQ3hYUVVGWExITkNRVUZCTEVsQlFVazdVVUZEWWtFc1NVRkJUU3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRWxCUVVrc1JVRkJSU3hEUVVGQk8xRkJRekZETEVsQlFVa3NTVUZCU1N4RFFVRkRMRTlCUVU4c1MwRkJTeXhOUVVGTkxFVkJRVVU3VlVGRE0wSXNUMEZCVHl4UlFVRlJPMU5CUTJoQ08xRkJRMFFzVDBGQlR5eFJRVUZSTEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVVFc1MwRkJTeXhGUVVGRE8xVkJRek5DTEU5QlFVOHNTMEZCU3l4RFFVRkRMR2RDUVVGblFqdGxRVU40UWl4TFFVRkxMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSMEZCUnl4TFFVRkxMRzFDUVVGdFFqdFRRVU40UkN4RFFVRkRPMDlCUTBnN1MwRkRSanRKUVVORUxFMUJRVTBzYVVKQlFVRXNSVUZCUlN4aFFVRmhMRVZCUVVVN1RVRkRja0lzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGQk8wMUJRelZDTEU5QlFVOHNZVUZCWVN4RFFVRkRMRTlCUVU4c1JVRkJSVHRSUVVNMVFpeEhRVUZITEVWQlFVVXNVMEZCVXp0UlFVTmtMRXRCUVVzc1JVRkJSU3hGUVVGRkxGZEJRVmNzUlVGQlJTeFRRVUZUTEVWQlFVVTdVVUZEYWtNc1YwRkJWeXhGUVVGRkxITkNRVUZ6UWp0UlFVTnVReXhYUVVGWExFVkJRVVVzY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hEUVVGRE8wOUJRM3BETEVWQlFVVXNTVUZCU1N4RFFVRkRMRmRCUVZjc1JVRkJSU3hEUVVGRE8wdEJRM1pDTzBkQlEwWTdRMEZEUmpzN1FVRkZSQ3hqUVVGbE8wVkJRMklzU1VGQlNTeGxRVUZCTEVWQlFVVXNTVUZCU1N4RlFVRkZPMGxCUTFZc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRk5CUVZNc1JVRkJSU3hWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUVR0SFFVTndSRHREUVVOR0xFTkJRVUU3TzBGRGJFaEVPenM3T3pzN096czdPenM3T3pzN096czdRVUZyUWtGRkxFbEJRVWxyUWl4MVFrRkJjVUk3U1VGQlJWTXNVVUZCVFR0SlFVRkZReXhYUVVGVE8wbEJRVVZETEcxQ1FVRnBRaXhEUVVGQk96dEJRVVV2UkM5Q0xFbEJRVTF0UWl4TlFVRkpMRWRCUVVjc2EzZE9RVEJHWWl4RFFVRkJPenRCUVVWQkxGTkJRVk1zWVVGQllTeEZRVUZGTEZOQlFWTXNSVUZCUlR0RlFVTnFReXhKUVVGSkxGTkJRVk1zUTBGQlF5eFhRVUZYTEVWQlFVVTdTVUZEZWtJc1RVRkJUVHRIUVVOUU8wVkJRMFFzVTBGQlV5eERRVUZETEZkQlFWY3NSMEZCUjFrc2JVSkJRV2xDTEVOQlFVTXNORUpCUVRSQ0xFTkJRVU1zUTBGQlFUdERRVU40UlRzN1FVRkZSQ3hUUVVGVExHZENRVUZuUWl4RlFVRkZMRk5CUVZNc1JVRkJSU3hIUVVGSExFVkJRVVU3UlVGRGVrTXNZVUZCWVN4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk8wVkJRM2hDTDBJc1NVRkJUU3hoUVVGaExFZEJRVWNzYjBKQlFXOUNMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3UlVGREwwTkJMRWxCUVUwc1MwRkJTeXhIUVVGSExGTkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4SlFVRkpMRk5CUVZNc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZCTzBWQlF6TkZMRXRCUVV0RkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1MwRkJTeXhEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVkQlFVY3NRMEZCUXl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8wbEJRelZEUml4SlFVRk5MRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMGxCUXpGQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4TFFVRkxMRTlCUVU4c1EwRkJReXhqUVVGak8yRkJRMmhETEVsQlFVa3NRMEZCUXl4SlFVRkpMRXRCUVVzc1QwRkJUeXhEUVVGRExIRkNRVUZ4UWl4RFFVRkRPMWRCUXpsRExFbEJRVWtzUTBGQlF5eEpRVUZKTEV0QlFVc3NZMEZCWXl4RlFVRkZPMDFCUTI1RFFTeEpRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGQk8wMUJRemxDTEV0QlFVdEZMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NVVUZCVVN4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMUZCUXk5RFJpeEpRVUZOTEZGQlFWRXNSMEZCUnl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGRE5VSXNTVUZCU1N4UlFVRlJMRU5CUVVNc1NVRkJTU3hMUVVGTExFOUJRVThzUTBGQlF5eGhRVUZoTzJGQlEzUkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFdEJRVXNzVDBGQlR5eERRVUZETEc5Q1FVRnZRaXhGUVVGRk8xVkJRMjVFTEZGQlFWRXNRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhIUVVGSExHRkJRV0VzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0VFFVTTFRenRQUVVOR08wdEJRMFk3UjBGRFJqdERRVU5HT3p0QlFVVkVMRk5CUVZNc2IwSkJRVzlDTEVWQlFVVXNSMEZCUnl4RlFVRkZPMFZCUTJ4RExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVTdTVUZEVWl4TlFVRk5PMGRCUTFBN1JVRkRSRUVzU1VGQlRTeFJRVUZSTEVkQlFVYzdTVUZEWml4dlFrRkJiMEk3U1VGRGNFSXNiMEpCUVc5Q08wbEJRM0JDTEd0Q1FVRnJRanRKUVVOc1FpeDFRa0ZCZFVJN1NVRkRka0lzYTBKQlFXdENPMGxCUTJ4Q0xHOUNRVUZ2UWp0SlFVTndRaXhyUWtGQmEwSTdTVUZEYkVJc2NVSkJRWEZDTEVOQlFVTXNRMEZCUVR0RlFVTjRRa0VzU1VGQlRTeFJRVUZSTEVkQlFVYzdTVUZEWml4SFFVRkhPMGxCUTBnc1MwRkJTenRKUVVOTUxFdEJRVXM3U1VGRFRDeExRVUZMTzBsQlEwd3NTMEZCU3p0SlFVTk1MRXRCUVVzN1NVRkRUQ3hMUVVGTE8wbEJRMHdzUzBGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRk8wMUJRM1JDTEU5QlFVOHNUMEZCVHl4SFFVRkhMRWRCUVVjc1EwRkJReXhEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXl4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRU5CUVVNc1IwRkJSeXhIUVVGSE8wdEJRMjVGTEVOQlFVTXNRMEZCUVR0RlFVTktRU3hKUVVGTkxFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVRTdSVUZETUVJc01FSkJRVUU3U1VGRGVFTkJMRWxCUVUwc1YwRkJWeXhIUVVGSE9FSXNWMEZCVXl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZETDBNc1MwRkJTeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1VVRkJVU3hGUVVGRkxFTkJRVU1zUlVGQlJUdE5RVU0zUXl4UFFVRlBMRkZCUVZFc1IwRkJSeXhIUVVGSExFZEJRVWNzVjBGQlZ5eERRVUZETEVOQlFVTXNRMEZCUXp0TFFVTjJReXhEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVFN1IwRkRaanM3UlVGTVJDeExRVUZMTlVJc1NVRkJTVVVzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRWRCUVVjc1VVRkJVU3hEUVVGRExFMUJRVTBzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZMZGtNc1ZVRkJRVHRGUVVORUxFOUJRVThzUzBGQlN6dERRVU5pT3p0QlFVVkVMRk5CUVZNMFFpeGpRVUZaTEVWQlFVVXNSVUZCUlN4RlFVRkZPMFZCUTNwQ2FFTXNTVUZCVFN4TFFVRkxMRWRCUVVkdlFpeDFRa0ZCY1VJc1EwRkJReXhGUVVGRkxFTkJRVU1zUTBGQlFUdEZRVU4yUTNCQ0xFbEJRVTBzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVFN1JVRkRla0pCTEVsQlFVMHNSMEZCUnl4SFFVRkhMRXRCUVVzc1NVRkJTVFpDTEZGQlFVMHNRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRGUVVOc1F5eEpRVUZKTEVkQlFVY3NSVUZCUlR0SlFVTlFMR2RDUVVGblFpeERRVUZETEVWQlFVVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRVHRIUVVNeFFqdEZRVU5FTEU5QlFVOHNTMEZCU3p0RFFVTmlPenRCUVVWRU4wSXNTVUZCVFN4blFrRkJaMElzUjBGQlJ6dEZRVU4yUWl4SlFVRkpMRVZCUVVVc2QwSkJRWGRDTzBWQlF6bENMRTFCUVUwc2FVSkJRVUVzUlVGQlJTeGhRVUZoTEVWQlFVVTdTVUZEY2tJc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eHRRa0ZCYlVJc1EwRkJRVHRKUVVOdVF5eFBRVUZQTEdGQlFXRXNRMEZCUXl4TlFVRk5MRVZCUVVVN1RVRkRNMElzUzBGQlN5eEZRVUZGTEVWQlFVVXNWMEZCVnl4RlFVRkZMRzFDUVVGdFFpeEZRVUZGTzAxQlF6TkRMRmRCUVZjc1JVRkJSU3huUTBGQlowTTdUVUZETjBNc1YwRkJWeXhGUVVGRlowTXNZMEZCV1N4RFFVRkRMRWxCUVVrc1EwRkJRenRMUVVOb1F5eERRVUZETzBkQlEwZzdSVUZEUkN4TlFVRkJZaXhOUVVGSk8wTkJRMHdzUTBGQlFUczdRVUZGUkN4NVFrRkJaVHRGUVVOaUxFbEJRVWtzWlVGQlFTeEZRVUZGTEVsQlFVa3NSVUZCUlR0SlFVTldReXgxUWtGQmNVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc2NVSkJRWEZDTEVOQlFVRTdTVUZEYkVSVExGRkJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1EwRkJRVHRKUVVNeFFrTXNWMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZCTzBsQlEyaERReXh0UWtGQmFVSXNSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHbENRVUZwUWl4RFFVRkJPMGxCUTJoRUxFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXh0UWtGQmJVSXNSVUZCUlN4blFrRkJaMElzUTBGQlF5eERRVUZCTzBkQlF6bEVPME5CUTBZc1EwRkJRVHM3T3p0QlF6ZE5SRHM3T3pzN096czdPenM3T3pzN096czdPenRCUVcxQ1FTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJSVUVzUVVGRlFTOUNMRWxCUVUwc1QwRkJUeXhIUVVGSE8wVkJRMlJwUXl4UFFVRkpPMFZCUTBvc1VVRkJVVHRGUVVOU0xGTkJRVk03UlVGRFZDeEpRVUZKTzBWQlEwb3NUVUZCVFR0RlFVTk9MRTlCUVU4N1JVRkRVQ3hQUVVGUE8wVkJRMUJETEd0Q1FVRm5RanREUVVOcVFpeERRVUZCT3p0QlFVVkVMR2xDUVVGbE8wVkJRMklzU1VGQlNTeGxRVUZCTEVWQlFVVXNTVUZCU1N4RlFVRkZPMGxCUTFZc1QwRkJUeXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEVkQlFVY3NSVUZCUlR0TlFVTTNRaXhKUVVGSkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMHRCUTJ4Q0xFTkJRVU1zUTBGQlFUdEhRVU5JTzBOQlEwWXNRMEZCUVRzN096dEJReTlEUkRzN096czdPenM3T3pzN096czdPenM3TzBGQmEwSkJMRUZCUlVGc1F5eEpRVUZOTEdWQlFXVXNSMEZCUnl4SFFVRkhMRU5CUVVFN1FVRkRNMEpCTEVsQlFVMHNiVUpCUVcxQ0xFZEJRVWNzUjBGQlJ5eERRVUZCTzBGQlF5OUNRU3hKUVVGTkxHdENRVUZyUWl4SFFVRkhMRU5CUVVNc1EwRkJRVHRCUVVNMVFrRXNTVUZCVFN4dlFrRkJiMElzUjBGQlJ5eEZRVUZGTEVOQlFVRTdRVUZETDBKQkxFbEJRVTBzWjBKQlFXZENMRWRCUVVjc1IwRkJSeXhEUVVGQk96dEJRVVUxUWl4cFFrRkJaVHRGUVVOaUxFOUJRVThzYTBKQlFVRXNTVUZCU1R0SlFVTlVMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzUlVGQlJTeERRVUZCTzBsQlEycENMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzUTBGQlF5eERRVUZCTzBsQlEzQkNMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZCTzBkQlEzWkNPenRGUVVWRUxGbEJRVmtzZFVKQlFVRXNTVUZCU1R0SlFVTmtMRWxCUVVrc1EwRkJReXhsUVVGbExFVkJRVVVzUTBGQlFUdEhRVU4yUWpzN1JVRkZSQ3hQUVVGUExHdENRVUZCTEVsQlFVazdTVUZEVkVFc1NVRkJUU3hSUVVGUkxFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUVR0SlFVTXZRa0VzU1VGQlRTeEhRVUZITEVkQlFVY3NVVUZCVVN4SlFVRkpMRkZCUVZFc1EwRkJReXhOUVVGTkxFTkJRVUU3U1VGRGRrTXNTVUZCU1N4UlFVRlJMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU1zUlVGQlJUdE5RVU4yUWl4TFFVRkxSU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVXNRMEZCUXl4SFFVRkhMRWRCUVVjc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdFJRVU0xUWtZc1NVRkJUU3hGUVVGRkxFZEJRVWNzVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUTNSQ0xFbEJRVWtzUlVGQlJTeERRVUZETEZGQlFWRXNRMEZCUXl4aFFVRmhMRXRCUVVzc1YwRkJWenRoUVVONFF5eEZRVUZGTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFdEJRVXNzVjBGQlZ5eEZRVUZGTzFWQlEzWkRMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVRTdWVUZEYWtJc1MwRkJTenRUUVVOT08wOUJRMFk3UzBGRFJqdEpRVU5FTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1dVRkJXU3hEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRMRU5CUVVFN1NVRkRka01zU1VGQlNTeEpRVUZKTEVOQlFVTXNVMEZCVXl4TFFVRkxMRWxCUVVrc1EwRkJReXhaUVVGWkxFVkJRVVU3VFVGRGVFTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zV1VGQldTeERRVUZETEVOQlFVRTdTMEZEYWtNN1IwRkRSanM3UlVGRlJDeFBRVUZQTEd0Q1FVRkJMRWxCUVVrN1NVRkRWQ3hKUVVGSkxFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVRTdTVUZEZEVJc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1NVRkRhRU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNRMEZCUVR0SFFVTjRRenM3UlVGRlJDeFBRVUZQTEVWQlFVVTdTVUZEVUN4bFFVRmxMREJDUVVGQkxFbEJRVWs3VFVGRGFrSkJMRWxCUVUwc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4RFFVRkJPMDFCUTJ4RExFbEJRVWtzVDBGQlR5eEZRVUZGTzFGQlExaEJMRWxCUVUwc1NVRkJTU3hIUVVGSExFOUJRVThzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSU3hEUVVGQk8xRkJRelZETEVsQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlFUdFJRVU12UWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVRTdUMEZEYkVNN1MwRkRSanM3U1VGRlJDeGxRVUZsTERCQ1FVRkJMRVZCUVVVc1lVRkJZU3hGUVVGRk96czdUVUZET1VKQkxFbEJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1QwRkJUeXhKUVVGSkxFVkJRVVVzUTBGQlFUdE5RVU14UTBVc1NVRkJTU3hqUVVGakxFTkJRVUU3VFVGRGJFSkdMRWxCUVUwc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNWVUZCUVN4TFFVRkxMRVZCUVVNN1VVRkRiRU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1JVRkJRU3hQUVVGUExFdEJRVXNzUlVGQlFUdFJRVU0xUWl4SlFVRkpMRXRCUVVzc1EwRkJReXhuUWtGQlowSXNTVUZCU1N4TFFVRkxMRU5CUVVNc1owSkJRV2RDTEVOQlFVTXNSMEZCUnl4TFFVRkxMRmRCUVZjc1JVRkJSVHRWUVVONFJTeGpRVUZqTEVkQlFVY3NTMEZCU3l4RFFVRkJPMVZCUTNSQ0xFOUJRVThzUzBGQlN6dFRRVU5pTzFGQlEwUXNUMEZCVHl4SlFVRkpPMDlCUTFvc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFZRVUZCTEV0QlFVc3NSVUZCUXp0UlFVTllMRTlCUVU4c1lVRkJZU3hEUVVGRExFbEJRVWtzUlVGQlJUdFZRVU42UWl4SFFVRkhMRVZCUVVVc1QwRkJUenRWUVVOYUxGZEJRVmNzUlVGQlJTeERRVUZCTERCQ1FVRjVRaXhKUVVGRmVVSXNUVUZCU1N4RFFVRkRMRlZCUVZVc1IwRkJSeXhuUWtGQlowSXNSMEZCUnl4RlFVRkZMRU5CUVVFc1EwRkJSVHRUUVVOc1JpeEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1QwRkRXaXhEUVVGRExFTkJRVUU3VFVGRFJpeEpRVUZKTEdOQlFXTXNSVUZCUlR0UlFVTnNRaXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSMEZCUnl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzU1VGQlNTeEZRVUZGTEVOQlFVRTdVVUZETTBRc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMRXRCUVVzc1EwRkJReXhOUVVGTkxFTkJRVUU3VVVGRE9VTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpMRU5CUVVFN1VVRkRjRVFzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4alFVRmpMRU5CUVVFN1QwRkRha003VFVGRFJDeFBRVUZQTEV0QlFVczdTMEZEWWpzN1NVRkZSQ3hoUVVGaExIZENRVUZCTEVWQlFVVXNZVUZCWVN4RlFVRkZPMDFCUXpWQ0xFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMR1ZCUVdVc1EwRkJReXhoUVVGaExFTkJRVU1zUTBGQlFUdE5RVU5xUkN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkJPMDFCUTNCRExFOUJRVThzWVVGQllUdFJRVU5zUWl4TFFVRkxPMUZCUTB3N1ZVRkRSU3hIUVVGSExFVkJRVVVzVTBGQlV6dFZRVU5rTEV0QlFVc3NSVUZCUlN4RlFVRkZMRmRCUVZjc1JVRkJSU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEdsQ1FVRnBRaXhIUVVGSExGRkJRVkVzUlVGQlJUdFZRVU4wUlN4RlFVRkZMRVZCUVVVc1NVRkJTU3hEUVVGRExHTkJRV003V1VGRGNrSXNTVUZCU1R0WlFVTktMRU5CUVVNc1VVRkJVU3hGUVVGRkxHRkJRV0VzUlVGQlJTeFhRVUZYTEVOQlFVTTdXVUZEZEVNN1kwRkRSU3hWUVVGVkxFVkJRVVVzU1VGQlNTeERRVUZETEdsQ1FVRnBRanRqUVVOc1F5eFRRVUZUTEVWQlFVVXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RlFVRkZMRWxCUVVrc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF6dGpRVU5vUml4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExHVkJRV1U3WTBGRE9VSXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhyUWtGQmEwSTdZVUZEY2tNN1YwRkRSanRWUVVORUxGZEJRVmNzUlVGQlJTeDVRMEZCZVVNN1ZVRkRkRVFzVjBGQlZ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlF5eEpRVUZKTEVOQlFVTTdVMEZET1VNN1VVRkRSRHRWUVVORkxHRkJRV0VzUTBGQlF5eEpRVUZKTEVWQlFVVTdXVUZEYkVJc1IwRkJSeXhGUVVGRkxFOUJRVTg3V1VGRFdpeFhRVUZYTEVWQlFVVXNNa0pCUVRKQ08xZEJRM3BETEVWQlFVVXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJRenRWUVVObUxFbEJRVWtzUTBGQlF5eFZRVUZWTzFOQlEyaENPMDlCUTBZN1MwRkRSanM3TzBsQlIwUXNaVUZCWlN3d1FrRkJRU3hGUVVGRkxFdEJRVXNzUlVGQlJUdE5RVU4wUW5wQ0xFbEJRVTBzVVVGQlVTeEhRVUZITEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkJPMDFCUXpWRUxFOUJRVThzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGRkJRVkVzUlVGQlJTeERRVUZETEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1ZVRkJWU3hIUVVGSExFTkJRVU1zUTBGQlF6dExRVU0xUkRzN1NVRkZSQ3hqUVVGakxIbENRVUZCTEVsQlFVazdUVUZEYUVJc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1MwRkJTeXhQUVVGUExFVkJRVVU3VVVGREwwTXNUVUZCVFR0UFFVTlFPMDFCUTBRc1NVRkJTU3hKUVVGSkxFTkJRVU1zWTBGQll5eEZRVUZGTzFGQlEzWkNMRmxCUVZrc1EwRkJReXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEVOQlFVRTdVVUZEYWtNc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eEpRVUZKTEVOQlFVRTdUMEZETTBJN1RVRkRSRVVzU1VGQlNTeFJRVUZSTEVkQlFVY3NVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFZEJRVWNzWlVGQlpTeEhRVUZITEcxQ1FVRnRRaXhEUVVGRExFTkJRVUU3VFVGRE9VVXNVVUZCVVN4SFFVRkhMRkZCUVZFc1IwRkJSeXhuUWtGQlowSXNSMEZCUnl4UlFVRlJMRWRCUVVjc1owSkJRV2RDTEVOQlFVRTdUVUZEY0VVc1NVRkJTU3hEUVVGRExHTkJRV01zUjBGQlJ5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEV0QlFVc3NSVUZCUlN4SlFVRkpMRU5CUVVNc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlFUdExRVU01UlRzN1NVRkZSQ3hoUVVGaExIZENRVUZCTEVsQlFVazdUVUZEWml4SlFVRkpMRWxCUVVrc1EwRkJReXhqUVVGakxFVkJRVVU3VVVGRGRrSXNXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlFUdFJRVU5xUXl4SlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExFbEJRVWtzUTBGQlFUdFBRVU16UWp0TFFVTkdPenRKUVVWRUxGRkJRVkVzYlVKQlFVRXNSVUZCUlN4TFFVRkxMRVZCUVVVc1lVRkJZU3hGUVVGRk96czdUVUZET1VJc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEpRVUZKTEVOQlFVTXNSVUZCUlR0UlFVTjRRaXhOUVVGTk8wOUJRMUE3VFVGRFJDeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeExRVUZMTEU5QlFVOHNSVUZCUlR0UlFVTXZReXhKUVVGSkxFdEJRVXNzUzBGQlN5eERRVUZETEVOQlFVTXNTVUZCU1N4TFFVRkxMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVlVGQlZTeEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZPMVZCUTJwRUxFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhEUVVGQk8xVkJRMmhETEUxQlFVMDdVMEZEVUR0UFFVTkdPenROUVVWRUxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4SlFVRkpMRWxCUVVrc1EwRkJReXhUUVVGVExFdEJRVXNzUTBGQlF5eEZRVUZGTzFGQlF6TkRMRWxCUVVrc1NVRkJTU3hEUVVGRExGVkJRVlVzU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8xVkJRM3BETEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVFN1UwRkRNVU03WVVGRFNUdFZRVU5JTEVsQlFVa3NRMEZCUXl4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUTBGQlFUdFRRVU51UXp0UFFVTkdPenROUVVWRUxFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlR0UlFVTnFRaXhOUVVGTk8wOUJRMUE3VFVGRFJDeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJRVHM3VFVGRmNFSkdMRWxCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVFN1RVRkROVU5CTEVsQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZCTzAxQlF6bENRU3hKUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhWUVVGVkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1UwRkJVeXhIUVVGSExFdEJRVXNzUTBGQlFUczdUVUZGTTBVc1NVRkJTU3hMUVVGTExFVkJRVVU3VVVGRFZDeEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVFN1VVRkRjRUpCTEVsQlFVMHNVMEZCVXl4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkRMRk5CUVZNc1EwRkJRVHRSUVVNM1JFRXNTVUZCVFN4TFFVRkxMRWRCUVVjc1UwRkJVeXhKUVVGSkxGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNORUpCUVRSQ0xFTkJRVU1zUTBGQlFUdFJRVU40UlVFc1NVRkJUU3hOUVVGTkxFZEJRVWNzUzBGQlN5eEpRVUZKTEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUU3VVVGRGNrTkJMRWxCUVUwc1NVRkJTU3hIUVVGSExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkJPMUZCUTNSRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVsQlFVa3NTVUZCU1N4SFFVRkhMRWxCUVVrc1EwRkJReXhoUVVGaExFTkJRVUU3TzFGQlJUZERMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zWjBKQlFXZENMRWRCUVVjc2IwSkJRVzFDTEVsQlFVVXNaVUZCWlN4SFFVRkhMRWxCUVVrc1EwRkJRU3hyUWtGQll5eERRVUZCTzFGQlEzaEdMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zWVVGQllTeEhRVUZITEZsQlFWY3NTVUZCUlN4bFFVRmxMRWRCUVVjc1NVRkJTU3hEUVVGQkxHdENRVUZqTEVOQlFVRTdVVUZETjBVc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFZRVUZWTEVkQlFVY3NXVUZCVnl4SlFVRkZMR1ZCUVdVc1IwRkJSeXhKUVVGSkxFTkJRVUVzYTBKQlFXTXNRMEZCUVR0UlFVTXhSU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEdWQlFXVXNSMEZCUnl4alFVRmhMRWxCUVVVc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlFTeGpRVUZWTEVOQlFVRTdVVUZEZGtVc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eFpRVUZaTEVkQlFVY3NZMEZCWVN4SlFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVUVzWTBGQlZTeERRVUZCTzFGQlEzQkZMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEdOQlFXRXNTVUZCUlN4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGQkxHTkJRVlVzUTBGQlFUczdPMUZCUjJwRkxFbEJRVWtzUTBGQlF5eGhRVUZoTEVWQlFVVTdWVUZEYkVJc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGQk8xTkJRM0pETzFGQlEwUXNWVUZCVlN4RFFVRkRMRmxCUVVjN1ZVRkRXbmxDTEUxQlFVa3NRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEpRVUZKTEVWQlFVVXNXVUZCUnp0WlFVTm9RMEVzVFVGQlNTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZCTzFkQlEyNURMRU5CUVVNc1EwRkJRVHRUUVVOSUxFVkJRVVVzYjBKQlFXOUNMRU5CUVVNc1EwRkJRVHM3VVVGRmVFSXNTVUZCU1N4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUczdVVUZGZWtJc1ZVRkJWU3hEUVVGRExGbEJRVWM3VlVGRFdpeEpRVUZKUVN4TlFVRkpMRU5CUVVNc1ZVRkJWU3hGUVVGRk8xbEJRMjVDUVN4TlFVRkpMRU5CUVVNc1lVRkJZU3hGUVVGRkxFTkJRVUU3VjBGRGNrSTdPMVZCUlVRc1ZVRkJWU3hEUVVGRExGbEJRVWM3V1VGRFdpeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMR2RDUVVGblFpeEhRVUZITEVWQlFVVXNRMEZCUVR0WlFVTnFReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEdGQlFXRXNSMEZCUnl4RlFVRkZMRU5CUVVFN1dVRkRPVUlzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRWRCUVVjc1JVRkJSU3hEUVVGQk8xbEJRek5DTEV0QlFVdDJRaXhKUVVGSkxFTkJRVU1zUjBGQlIzVkNMRTFCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzUTBGQlF5eEpRVUZKUVN4TlFVRkpMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUlVGQlJTeEZRVUZGTzJOQlF6TkVla0lzU1VGQlRTeEpRVUZKTEVkQlFVZDVRaXhOUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMk5CUXk5Q0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4UlFVRlJMRVZCUVVVN1kwRkRka0o2UWl4SlFVRk5MRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVFN1kwRkRiRU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4blFrRkJaMElzUjBGQlJ5eEZRVUZGTEVOQlFVRTdZMEZETDBJc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eGhRVUZoTEVkQlFVY3NSVUZCUlN4RFFVRkJPMk5CUXpWQ0xFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNWVUZCVlN4SFFVRkhMRVZCUVVVc1EwRkJRVHRoUVVNeFFqczdXVUZGUkhsQ0xFMUJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVFN1YwRkRMMElzUlVGQlJTeHRRa0ZCYlVJc1EwRkJReXhEUVVGQk8xTkJRM2hDTEVWQlFVVXNaVUZCWlN4RFFVRkRMRU5CUVVFN1QwRkRjRUk3TzAxQlJVUXNTVUZCU1N4UlFVRlJMRXRCUVVzc1NVRkJTU3hEUVVGRExGTkJRVk1zUlVGQlJUdFJRVU12UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGRkJRVkVzUlVGQlJTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmRCUVZjc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEZGQlFWRXNSVUZCUlR0VlFVTTVSQ3hMUVVGTExFVkJRVVVzVVVGQlVUdFRRVU5vUWl4RFFVRkRMRU5CUVVNc1EwRkJRVHRQUVVOS08wdEJRMFk3TzBsQlJVUXNhVUpCUVdsQ0xEUkNRVUZCTEVsQlFVazdPenROUVVOdVFucENMRWxCUVUwc1IwRkJSeXhIUVVGSExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVRTdUVUZETlVJc1MwRkJTMFVzU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMUZCUXpsRFFTeEpRVUZKTEVsQlFVa3NSMEZCUjNWQ0xFMUJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkROMElzU1VGQlNTeEhRVUZITEVsQlFVa3NTVUZCU1N4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVRTdVVUZEY2tNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEZRVUZGTEZGQlFWRXNSVUZCUlR0UlFVTjJRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEZsQlFWa3NRMEZCUTBFc1RVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4cFFrRkJhVUlzUlVGQlJUdFZRVU0xUkN4VFFVRlRMRVZCUVVVc05FSkJRVFJDTzFOQlEzaERMRU5CUVVNc1EwRkJRVHRQUVVOSU8wdEJRMFk3TzBsQlJVUXNZMEZCWXl4NVFrRkJRU3hGUVVGRkxFbEJRVWtzUlVGQlJUczdPMDFCUTNCQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVsQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1NVRkJTU3hEUVVGRExFVkJRVVU3VVVGRGFrTXNUVUZCVFR0UFFVTlFPMDFCUTBSNlFpeEpRVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRWRCUVVjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUVR0TlFVTTVRa1VzU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zWVVGQllTeEhRVUZITEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVFN1RVRkRla1JHTEVsQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1NVRkJTU3hEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1lVRkJZU3hEUVVGQk8wMUJRemRFTEU5QlFVOHNRMEZCUXl4TFFVRkxMRWRCUVVjc1IwRkJSeXhKUVVGSkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVsQlFVa3NSVUZCUlR0UlFVTnNRMEVzU1VGQlRTeFBRVUZQTEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJRVHRSUVVONFFubENMRTFCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zVDBGQlR5eERRVUZETEVkQlFVZEJMRTFCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdVVUZETjBOQkxFMUJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hIUVVGSExFOUJRVThzUTBGQlFUdFJRVU0zUXl4UFFVRlBRU3hOUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkJPMDlCUXpGQ08wMUJRMFFzU1VGQlNTeERRVUZETEdGQlFXRXNTVUZCU1N4SlFVRkpMRU5CUVVFN1RVRkRNVUlzU1VGQlNTeERRVUZETEZkQlFWY3NTVUZCU1N4SlFVRkpMRU5CUVVFN1MwRkRla0k3TzBsQlJVUXNZVUZCWVN4M1FrRkJRU3hKUVVGSk96czdPMDFCU1daNlFpeEpRVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGQk8wMUJRM1pDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1QwRkJUeXhGUVVGRk8xRkJRMnBDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRVZCUVVVc1EwRkJRVHRSUVVOcVFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4SFFVRkhMRWxCUVVrc1EwRkJRVHRSUVVOdVFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRVZCUVVVc1EwRkJRVHRQUVVOeVFqdE5RVU5FTEVsQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1NVRkJTU3hEUVVGRExFVkJRVVU3VVVGRGVFSXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSeXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVOQlFVTXNRMEZCUVR0UlFVTjZRMEVzU1VGQlRTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEVOQlFVRTdVVUZETDBJc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NRMEZCUXl4RFFVRkJPMUZCUTNSQ0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1EwRkJRVHRSUVVOMFFpeEpRVUZKTEVOQlFVTXNTMEZCU3l4SFFVRkhMRU5CUVVNc1EwRkJRVHRSUVVOa0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGQk8xRkJRM3BDTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGQk8xRkJRMjVDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRWRCUVVjc1EwRkJReXhEUVVGQk8xRkJRMjVDTEUxQlFVMDdUMEZEVUR0TlFVTkVRU3hKUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMDFCUTNSRUxFbEJRVWtzUTBGQlF5eGhRVUZoTEVkQlFVY3NTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkJPMDFCUTI1RUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVkQlFVY3NTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhUUVVGVExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0TlFVTm9SQ3hKUVVGSkxFTkJRVU1zYVVKQlFXbENMRVZCUVVVc1EwRkJRVHROUVVONFFpeEpRVUZKTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhoUVVGaExFVkJRVVVzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRVHRMUVVOb1JUczdTVUZGUkN4VlFVRlZMSEZDUVVGQkxFbEJRVWs3VFVGRFdrRXNTVUZCVFN4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlFUdE5RVU0zUWtFc1NVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUVR0TlFVTjZRaXhMUVVGTFJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFdEJRVXNzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0UlFVTTVRa1lzU1VGQlRTeEpRVUZKTEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlFUdFJRVU42UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFTkJRVU1zUTBGQlFUdFJRVU5rTEVsQlFVa3NRMEZCUXl4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGQk8xRkJRM0JDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hIUVVGSExFTkJRVU1zUTBGQlFUdFJRVU55UWl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUjBGQlJ5eERRVUZETEVOQlFVRTdUMEZEZGtJN1MwRkRSanM3U1VGRlJDeGpRVUZqTEhsQ1FVRkJMRVZCUVVVc1MwRkJTeXhGUVVGRkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVXNTVUZCU1N4RlFVRkZPenM3VFVGRGRFTkJMRWxCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVRTdUVUZEZWtKQkxFbEJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NTVUZCU1N4RFFVRkRMRWRCUVVjc1MwRkJTeXhIUVVGSExFZEJRVWNzUTBGQlFUdE5RVU55UTBFc1NVRkJUU3hKUVVGSkxFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNSMEZCUnl4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGQk8wMUJRM0JEUVN4SlFVRk5MRWxCUVVrc1IwRkJSeXhKUVVGSkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHROUVVNdlFrVXNTVUZCU1N4VFFVRlRMRWRCUVVjc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVRTdUVUZEY2tNc1MwRkJTMEVzU1VGQlNTeERRVUZETEVkQlFVY3NTMEZCU3l4RlFVRkZMRU5CUVVNc1MwRkJTeXhKUVVGSkxFZEJRVWNzU1VGQlNTeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1NVRkJTU3hGUVVGRk8xRkJRMjVFUml4SlFVRk5MRWxCUVVrc1IwRkJSeXhMUVVGTExFTkJRVU41UWl4TlFVRkpMRU5CUVVNc1pVRkJaU3hEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkJPMUZCUTNaRUxGTkJRVk1zUjBGQlJ5eFRRVUZUTEVkQlFVY3NTVUZCU1N4RFFVRkJPMUZCUXpWQ1FTeE5RVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlFUdFBRVU0xUWp0TFFVTkdPenM3T3p0SlFVdEVMR0ZCUVdFc2QwSkJRVUVzUlVGQlJTeEpRVUZKTEVWQlFVVXNTMEZCU3l4RlFVRkZPMDFCUXpGQ2VrSXNTVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExGVkJRVlVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0TlFVTnlReXhKUVVGSkxFbEJRVWtzUTBGQlF5eFBRVUZQTEVsQlFVa3NUVUZCVFN4TFFVRkxMRWxCUVVrc1JVRkJSVHRSUVVOdVF5eEpRVUZKTEUxQlFVMHNSVUZCUlN4RlFVRkZMRWxCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVRXNSVUZCUlR0UlFVTjZReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3VDBGRGJFTTdWMEZEU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVU3VVVGRGNrSXNUVUZCVFR0UFFVTlFPenROUVVWRUxFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkJPMDFCUTI1Q1FTeEpRVUZOTEZWQlFWVXNSMEZCUnl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkJPMDFCUTJoRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4RFFVRkRMRWxCUVVrc1JVRkJSVHRSUVVNMVFpeFRRVUZUTEVWQlFVVXNRMEZCUVN4alFVRmhMRWRCUVVVc1ZVRkJWU3hyUWtGQll5eERRVUZETzA5QlEzQkVMRU5CUVVNc1EwRkJRVHROUVVOR0xFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4SFFVRkhMRVZCUVVVc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkJPMDFCUTNoRExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1EwRkJRVHROUVVOMFFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4SFFVRkhMRXRCUVVzc1EwRkJRVHROUVVOMlFpeEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFbEJRVWtzUTBGQlFUdExRVU01UWpzN1NVRkZSQ3hUUVVGVExHOUNRVUZCTEVWQlFVVXNTMEZCU3l4RlFVRkZPMDFCUTJoQ1JTeEpRVUZKTEVkQlFVY3NSMEZCUnl4SlFVRkpMRU5CUVVNc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzAxQlF6ZENMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVU3VVVGRFVpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFZEJRVWNzUjBGQlJ5eEZRVUZGTEVOQlFVRTdUMEZETDBJN1RVRkRSQ3hKUVVGSkxFZEJRVWNzUTBGQlF5eE5RVUZOTEVsQlFVa3NRMEZCUXl4RlFVRkZPMUZCUTI1Q1JpeEpRVUZOTEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUVR0UlFVTjJRMEVzU1VGQlRTeExRVUZMTEVkQlFVY3NVVUZCVVN4RFFVRkRMRk5CUVZNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUdFJRVU4wUXl4TFFVRkxMRU5CUVVNc1VVRkJVU3hIUVVGSExFbEJRVWtzUTBGQlFUdFJRVU55UWl4TFFVRkxMRU5CUVVNc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF5eFBRVUZQTEVOQlFVRTdVVUZEYUVNc1MwRkJTeXhEUVVGRExFdEJRVXNzUjBGQlJ5eFJRVUZSTEVOQlFVTXNTMEZCU3l4RFFVRkJPMUZCUXpWQ0xFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1EwRkJRVHRSUVVOMlFpeExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVUU3VVVGRGRFSkJMRWxCUVUwc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkJPMUZCUXpOQ0xFVkJRVVVzUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVFN1VVRkRja0lzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHRQUVVOb1FqdE5RVU5FTEU5QlFVOHNSMEZCUnl4RFFVRkRMRWRCUVVjc1JVRkJSVHRMUVVOcVFqczdTVUZGUkN4WlFVRlpMSFZDUVVGQkxFVkJRVVVzU1VGQlNTeEZRVUZGTzAxQlEyeENRU3hKUVVGTkxFZEJRVWNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkJPMDFCUTNSQ0xFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1RVRkRjRUpCTEVsQlFVMHNSMEZCUnl4SFFVRkhMRWxCUVVrc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdUVUZETjBJc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0TFFVTm1PenRKUVVWRUxGTkJRVk1zYjBKQlFVRXNSVUZCUlN4SlFVRkpMRVZCUVVVN1RVRkRaaXhKUVVGSkxFTkJRVU1zVDBGQlR5eEhRVUZITEV0QlFVc3NRMEZCUVR0TlFVTndRaXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4RFFVRkRMRU5CUVVFN1RVRkRkRUlzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhEUVVGQk8wdEJRM1JDT3pzN096czdTVUZOUkN4WFFVRlhMSE5DUVVGQkxFVkJRVVVzUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlRzN08wMUJRM1pDTEV0QlFVdEZMRWxCUVVrc1EwRkJReXhIUVVGSExFdEJRVXNzUlVGQlJTeERRVUZETEVsQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNc1JVRkJSU3hGUVVGRk8xRkJRMnBEUml4SlFVRk5MRWxCUVVrc1IwRkJSM2xDTEUxQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3VVVGREwwSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hGUVVGRkxFMUJRVTBzUlVGQlJUdFJRVU55UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3VlVGRGFrSkJMRTFCUVVrc1EwRkJReXhaUVVGWkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVRTdVMEZEZUVJN1lVRkRTU3hKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlR0VlFVTjBRa0VzVFVGQlNTeERRVUZETEZOQlFWTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRUUVVOeVFqdFJRVU5FTEU5QlFVOUJMRTFCUVVrc1EwRkJReXhWUVVGVkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdUMEZETVVJN1MwRkRSanM3T3pzN08wbEJUVVFzVlVGQlZTeHhRa0ZCUVN4RlFVRkZMRWxCUVVrc1JVRkJSU3hGUVVGRkxFVkJRVVVzVFVGQk9FSXNSVUZCUlN4alFVRnRRaXhGUVVGRk8zRkRRVUV2UXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZuUWp0eFJFRkJRU3hIUVVGSExFVkJRVVU3TzAxQlEzWkZMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZETEVWQlFVVXNRMEZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeE5RVUZOTEVOQlFVTXNRMEZCUVR0TlFVTnVSSHBDTEVsQlFVMHNVVUZCVVN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkJPMDFCUTJwRUxFdEJRVXRCTEVsQlFVMHNRMEZCUXl4SlFVRkpMR05CUVdNc1JVRkJSVHRSUVVNNVFpeFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzA5QlEyaERPMDFCUTBRc1NVRkJTU3hEUVVGRExFdEJRVXNzUTBGQlF5eFpRVUZaTEVOQlFVTXNSVUZCUlN4RlFVRkZMRkZCUVZFc1EwRkJReXhEUVVGQk8wMUJRM0pEUVN4SlFVRk5MRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVU1zYVVKQlFXbENMRU5CUVVFN1RVRkRlRU5CTEVsQlFVMHNUMEZCVHl4SFFVRkhMRVZCUVVVc1EwRkJReXhwUWtGQmFVSXNRMEZCUVR0TlFVTndReXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNSMEZCUnl4VFFVRlRMRU5CUVVNc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlFUdE5RVU12UXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExHRkJRV0VzUTBGQlF5eFRRVUZUTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVFN1MwRkROME03T3pzN08wbEJTMFFzWVVGQllTeDNRa0ZCUVN4RlFVRkZMRXRCUVVzc1JVRkJSU3hIUVVGSExFVkJRVVU3T3p0TlFVTjZRa0VzU1VGQlRTeFJRVUZSTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkJPMDFCUXpkRExFbEJRVWtzVVVGQlVTeERRVUZETEU5QlFVOHNSVUZCUlR0UlFVTndRaXhOUVVGTk8wOUJRMUE3VFVGRFJFRXNTVUZCVFN4aFFVRmhMRWRCUVVjc1VVRkJVU3hEUVVGRExGVkJRVlVzUTBGQlFUdE5RVU42UTBFc1NVRkJUU3hWUVVGVkxFZEJRVWNzUTBGQlF5eFRRVUZUTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVFN1RVRkRlRU5GTEVsQlFVa3NSVUZCUlN4RFFVRkJPMDFCUTA0c1NVRkJTU3hKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEdGQlFXRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSVHM3VVVGRmFFTXNSVUZCUlN4SFFVRkhMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVVVGQlVTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkJPMUZCUTI1RExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNVVUZCVVN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGQk8xRkJRemRDTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1lVRkJZU3hEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZCTzA5QlEzQkRPMDFCUTBRc1VVRkJVU3hEUVVGRExFOUJRVThzUjBGQlJ5eEpRVUZKTEVOQlFVRTdUVUZEZGtKR0xFbEJRVTBzVVVGQlVTeEhRVUZITEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1pVRkJaU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzAxQlEyeEVMRkZCUVZFc1EwRkJReXhUUVVGVExFZEJRVWNzVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1pVRkJaU3hGUVVGRkxGVkJRVU1zUlVGQlJTeEZRVUZGTzFGQlEzQkZMRTlCUVU4c1IwRkJSeXhIUVVGSGVVSXNUVUZCU1N4RFFVRkRMR0ZCUVdFc1IwRkJSMEVzVFVGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4SlFVRkpPMDlCUXpGRUxFTkJRVU1zUTBGQlFUdE5RVU5HTEVsQlFVa3NRMEZCUXl4VlFVRlZMRU5CUVVNc1MwRkJTeXhGUVVGRkxGRkJRVkVzUlVGQlJTeFZRVUZWTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVFN1RVRkRkRVFzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1EwRkJRVHROUVVONFFpeEpRVUZKTEVOQlFVTXNSVUZCUlN4RlFVRkZPMUZCUTFBc1QwRkJUeXhKUVVGSkxFTkJRVU1zVlVGQlZTeERRVUZETEdGQlFXRXNRMEZCUXl4RFFVRkJPMDlCUTNSRE8wMUJRMFFzU1VGQlNTeERRVUZETEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVUU3VFVGREwwSXNVVUZCVVN4RFFVRkRMRlZCUVZVc1IwRkJSeXhIUVVGSExFTkJRVUU3UzBGRE1VSTdPMGxCUlVRc1pVRkJaU3d3UWtGQlFTeEZRVUZGTEZGQlFWRXNSVUZCUlRzN08wMUJRM3BDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRlZCUVZVc1NVRkJTU3hEUVVGRExFVkJRVVU3VVVGRGVFSXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhMUVVGTExFTkJRVUU3VVVGRGNrSXNTVUZCU1N4RFFVRkRMRmxCUVZrc1IwRkJSeXhEUVVGRExFTkJRVUU3VVVGRGNrSXNUVUZCVFR0UFFVTlFPenM3VFVGSFJDeEpRVUZKTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVFN096czdPenROUVUxeVFucENMRWxCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVRTdUVUZETjBJc1MwRkJTMFVzU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRSUVVNelJDeExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1QwRkJUeXhIUVVGSExFdEJRVXNzUTBGQlFUdFBRVU42UWp0TlFVTkVMRXRCUVV0QkxFbEJRVWxGTEVkQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSVUVzUjBGQlF5eEpRVUZKTEVOQlFVTXNSVUZCUlVFc1IwRkJReXhGUVVGRkxFVkJRVVU3VVVGRE5VSktMRWxCUVUwc1NVRkJTU3hIUVVGSExFdEJRVXNzUTBGQlEwa3NSMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkRja0lzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN1ZVRkRiRUlzU1VGQlNTeERRVUZETEU5QlFVOHNSMEZCUnl4SlFVRkpMRU5CUVVFN1UwRkRjRUk3WVVGRFNUdFZRVU5JY1VJc1RVRkJTU3hEUVVGRExHRkJRV0VzUTBGQlF5eEpRVUZKTEVWQlFVVnlRaXhIUVVGRExFTkJRVU1zUTBGQlFUdFRRVU0xUWp0UFFVTkdPenROUVVWRUxFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzAxQlEzaERMRWxCUVVrc1EwRkJReXhoUVVGaExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVRTdUVUZEZGtJc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVWQlFVVXNTVUZCU1N4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk8wMUJRM0pETEVsQlFVa3NRMEZCUXl4WFFVRlhMRWRCUVVjc1EwRkJReXhEUVVGQk8wMUJRM0JDTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGQk96czdUVUZIY2tJc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eFJRVUZSTEVOQlFVRTdUVUZETlVJc1NVRkJTU3hEUVVGRExGTkJRVk1zUjBGQlJ5eFJRVUZSTEVOQlFVRTdTMEZETVVJN096czdPenM3TzBsQlVVUXNZVUZCWVN4M1FrRkJRU3hKUVVGSk96czdUVUZEWml4TFFVRkxSaXhKUVVGSkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RlFVRkZMRU5CUVVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEZRVUZGTEVOQlFVTXNSVUZCUlN4RlFVRkZPMUZCUXpORVJpeEpRVUZOTEVkQlFVY3NSMEZCUjNsQ0xFMUJRVWtzUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc2FVSkJRV2xDTEVOQlFVRTdVVUZEYUVRc1IwRkJSeXhEUVVGRExFdEJRVXNzUTBGQlF5eG5Ra0ZCWjBJc1IwRkJSeXhOUVVGTExFbEJRVVVzYlVKQlFXMUNMRWRCUVVjc1NVRkJTU3hEUVVGQkxGZEJRVThzUTBGQlFUdFJRVU55UlN4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExHRkJRV0VzUjBGQlJ5eE5RVUZMTEVsQlFVVXNiVUpCUVcxQ0xFZEJRVWNzU1VGQlNTeERRVUZCTEZkQlFVOHNRMEZCUVR0UlFVTnNSU3hIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZETEZWQlFWVXNSMEZCUnl4TlFVRkxMRWxCUVVVc2JVSkJRVzFDTEVkQlFVY3NTVUZCU1N4RFFVRkJMRmRCUVU4c1EwRkJRVHRSUVVNdlJIcENMRWxCUVUwc1VVRkJVU3hIUVVGSE8xVkJRMllzUzBGQlN5eEZRVUZGTEVOQlFVRXNVVUZCVHl4SlFVRkZMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWQ1UWl4TlFVRkpMRU5CUVVNc1owSkJRV2RDTEVkQlFVZEJMRTFCUVVrc1EwRkJReXhoUVVGaExFTkJRVUVzVFVGQlJTeERRVUZETzFOQlEzaEZMRU5CUVVFN1VVRkRSSFpDTEVsQlFVa3NWVUZCVlN4WFFVRkJMRU5CUVVFN1VVRkRaQ3hKUVVGSkxFTkJRVU4xUWl4TlFVRkpMRU5CUVVNc1kwRkJZeXhGUVVGRk8xVkJRM2hDUVN4TlFVRkpMRU5CUVVNc1kwRkJZeXhIUVVGSExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFZEJRVWNzUTBGQlF5eHhRa0ZCY1VJc1JVRkJSU3hEUVVGRExFdEJRVXNzUTBGQlFUdFRRVU4yUmpzN1VVRkZSQ3hKUVVGSkxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8xVkJRM0pDZWtJc1NVRkJUU3hKUVVGSkxFZEJRVWNzUTBGQlF5eERRVUZEZVVJc1RVRkJTU3hEUVVGRExHRkJRV0VzUjBGQlIwRXNUVUZCU1N4RFFVRkRMR05CUVdNc1IwRkJSMEVzVFVGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4SFFVRkhMRU5CUVVNN1kwRkROMFZCTEUxQlFVa3NRMEZCUXl4aFFVRmhMRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVkQkxFMUJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVRTdWVUZEY0VVc1ZVRkJWU3hIUVVGSExFTkJRVU1zUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUVR0VFFVTjJRanRoUVVOSk96dFZRVVZJTEZWQlFWVXNSMEZCUnl4RFFVRkRMRU5CUVVFN1UwRkRaanRSUVVORUxGRkJRVkVzUTBGQlF5eFRRVUZUTEVkQlFVY3NZMEZCWVN4SFFVRkZMRlZCUVZVc2EwSkJRV01zUTBGQlFUdFJRVU0xUkN4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExGbEJRVmtzUTBGQlF5eEhRVUZITEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVFN1VVRkRkRU1zUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eHJRa0ZCYTBJc1IwRkJSMEVzVFVGQlNTeERRVUZETEdGQlFXRXNRMEZCUVR0UFFVTjBSVHRMUVVOR096dEpRVVZFTEV0QlFVc3NaMEpCUVVFc1NVRkJTVHROUVVOUWRrSXNTVUZCU1N4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eERRVUZETEVOQlFVRTdUVUZEYUVNc1NVRkJTU3hKUVVGSkxFTkJRVU1zVlVGQlZTeEpRVUZKTEVOQlFVTXNSVUZCUlR0UlFVTjRRaXhKUVVGSkxFVkJRVVVzUTBGQlFUdFBRVU5RTzAxQlEwUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUdExRVU53UWpzN1NVRkZSQ3hMUVVGTExHZENRVUZCTEVsQlFVazdUVUZEVUVFc1NVRkJTU3hKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NSMEZCUnl4RFFVRkRMRU5CUVVFN1RVRkRhRU1zU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4SlFVRkpMRU5CUVVNc1JVRkJSVHRSUVVONFFpeEpRVUZKTEVWQlFVVXNRMEZCUVR0UFFVTlFPMDFCUTBRc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0TFFVTndRanM3U1VGRlJDeHBRa0ZCYVVJc05FSkJRVUVzUlVGQlJTeExRVUZMTEVWQlFVVTdUVUZEZUVKR0xFbEJRVTBzUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3VFVGRGNrTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1JVRkJSU3hEUVVGQk8wMUJRM0JDUVN4SlFVRk5MRXRCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUVR0TlFVTTVRaXhKUVVGSkxFTkJRVU1zV1VGQldTeEhRVUZITzFGQlEyeENMR2xDUVVGcFFpeEZRVUZGTEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1pVRkJaVHRoUVVONlF5eExRVUZMTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmxCUVZrN1lVRkRlRUlzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4VFFVRlRPMUZCUXpGQ0xHVkJRV1VzUlVGQlJTeExRVUZMTzFGQlEzUkNMRTFCUVUwc1JVRkJSU3hMUVVGTExFTkJRVU1zUzBGQlN6dFJRVU51UWl4TlFVRk5MRVZCUVVVc1MwRkJTeXhEUVVGRExFdEJRVXM3VVVGRGJrSXNVMEZCVXl4RlFVRkZMRXRCUVVzc1EwRkJReXhUUVVGVE8wOUJRek5DTEVOQlFVRTdTMEZEUmpzN1NVRkZSQ3huUWtGQlowSXNNa0pCUVVFc1JVRkJSU3hMUVVGTExFVkJRVVU3VFVGRGRrSkJMRWxCUVUwc1JVRkJSU3hIUVVGSExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVRTdUVUZETlVJc1NVRkJTU3hEUVVGRExFVkJRVVVzUlVGQlJTeEZRVUZGTEUxQlFVMHNSVUZCUlR0TlFVTnVRaXhKUVVGSkxFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdVVUZEYWtJc1FVRkJTU3hCUVVGelF5eEJRVWN4UXl4TlFVRk5PMDlCUTFBN1RVRkRSQ3hQUVVGM1FpeEhRVUZITEVsQlFVa3NRMEZCUXl4WlFVRlpPMDFCUVhCRExFbEJRVUVzVFVGQlRUdE5RVUZGTEVsQlFVRXNUVUZCVFN4alFVRm9RanROUVVOT1FTeEpRVUZOTEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzAxQlEzSkRRU3hKUVVGTkxFOUJRVThzUjBGQlJ5eExRVUZMTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJRVHROUVVOd1EwRXNTVUZCVFN4UFFVRlBMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVRTdUVUZEY0VNc1JVRkJSU3hEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVRTdUVUZEY0VJc1JVRkJSU3hEUVVGRExFOUJRVThzUjBGQlJ5eFBRVUZQTEVOQlFVRTdUVUZEY0VKRkxFbEJRVWtzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXl4VlFVRlZMRU5CUVVFN1RVRkRka0lzU1VGQlNTeFBRVUZQTEVkQlFVY3NTMEZCU3l4WFFVRlhMRVZCUVVVN1VVRkRPVUlzUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXl4VlFVRlZMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNSMEZCUnl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eERRVUZCTzFGQlF6TkVMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVU3VlVGRFVpeEpRVUZKTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zWVVGQllTeERRVUZETEVOQlFVRTdVMEZEY2tNN1QwRkRSanM3VFVGRlJDeEpRVUZKTEVkQlFVY3NSVUZCUlR0UlFVTlFMRTFCUVUwN1QwRkRVRHM3VFVGRlJDeExRVUZMTEVOQlFVTXNZMEZCWXl4RlFVRkZMRU5CUVVFN1RVRkRkRUpHTEVsQlFVMHNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZCTzAxQlF6bENMRWxCUVVrc1MwRkJTeXhKUVVGSkxFOUJRVThzUlVGQlJUdFJRVU53UWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHMUNRVUZ0UWl4RlFVRkZPMVZCUXpkQ0xFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1IwRkJSeXhKUVVGSkxFTkJRVUU3VlVGREwwSXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeEZRVUZGTEVOQlFVRTdVMEZEZWtJN1VVRkRSQ3hKUVVGSkxFTkJRVU1zWjBKQlFXZENMRU5CUVVNc1VVRkJVU3hGUVVGRk8xVkJRemxDTEZsQlFWa3NSVUZCUlN4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExHRkJRV0U3VTBGRE0wTXNRMEZCUXl4RFFVRkJPMUZCUTBZc1MwRkJTeXhEUVVGRExFdEJRVXNzUTBGQlF5eGxRVUZsTEVkQlFVY3NZMEZCWVN4SlFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVDBGQlR5eERRVUZCTEdOQlFWVXNRMEZCUVR0UlFVTnFSaXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEZsQlFWa3NSMEZCUnl4alFVRmhMRWxCUVVVc1NVRkJTU3hEUVVGRExGZEJRVmNzUjBGQlJ5eFBRVUZQTEVOQlFVRXNZMEZCVlN4RFFVRkJPMUZCUXpsRkxFdEJRVXNzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4SFFVRkhMR05CUVdFc1NVRkJSU3hKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEU5QlFVOHNRMEZCUVN4alFVRlZMRU5CUVVFN1QwRkROVVU3UzBGRFJqczdTVUZGUkN4bFFVRmxMREJDUVVGQkxFVkJRVVVzUzBGQlN5eEZRVUZGTzAxQlEzUkNMRWxCUVVrc1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlFUdE5RVU55UWtFc1NVRkJUU3hGUVVGRkxFZEJRVWNzU1VGQlNTeERRVUZETEZsQlFWa3NRMEZCUVR0TlFVTTFRaXhKUVVGSkxFTkJRVU1zUlVGQlJTeEZRVUZGTEVWQlFVVXNUVUZCVFN4RlFVRkZPMDFCUTI1Q1FTeEpRVUZOTEVkQlFVY3NSMEZCUnl4RlFVRkZMRU5CUVVNc1ZVRkJWU3hEUVVGQk8wMUJRM3BDTEVsQlFVa3NUMEZCVHl4SFFVRkhMRXRCUVVzc1YwRkJWeXhGUVVGRk8xRkJRemxDTEUxQlFVMDdUMEZEVUR0TlFVTkVRU3hKUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJRVHROUVVNNVFpeEpRVUZSTEU5QlFVOHNZMEZCVkR0TlFVTk9MRWxCUVVrc1MwRkJTeXhGUVVGRk8xRkJRMVFzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhIUVVGSExFdEJRVXNzUTBGQlFUczdVVUZGYUVOQkxFbEJRVTBzUzBGQlN5eEhRVUZITEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1QwRkJUeXhIUVVGSExFbEJRVWtzUTBGQlF5eGhRVUZoTEVOQlFVTXNSMEZCUnl4SFFVRkhMRU5CUVVFN1VVRkRNVVJCTEVsQlFVMHNVMEZCVXl4SFFVRkhMRTlCUVU4c1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkJPMUZCUTNSRFFTeEpRVUZOTEZGQlFWRXNSMEZCUnl4TFFVRkxMRWRCUVVjc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4WlFVRlpMRWRCUVVjc1UwRkJVeXhEUVVGRExFTkJRVUU3VVVGRE5VVXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhSUVVGUkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdUMEZET1VJN1RVRkRSQ3hQUVVGUExFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVRTdTMEZEZWtJN08wbEJSVVFzYTBKQlFXdENMRFpDUVVGQkxFVkJRVVVzUzBGQlN5eEZRVUZGTzAxQlEzcENMRTlCUVU4c1NVRkJTU3hEUVVGRExHVkJRV1VzUTBGQlF5eExRVUZMTEVOQlFVTTdTMEZEYmtNN08wbEJSVVFzWjBKQlFXZENMREpDUVVGQkxFVkJRVVVzU1VGQlNTeEZRVUZGTEVsQlFWTXNSVUZCUlR0cFEwRkJVQ3hIUVVGSExFVkJRVVU3TzAxQlF5OUNMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RlFVRkZMRWxCUVVrc1EwRkJReXhEUVVGRExFTkJRVUU3UzBGREwwUTdPMGxCUlVRc2JVSkJRVzFDTERoQ1FVRkJMRVZCUVVVc1RVRkJUU3hGUVVGRkxGRkJRVkVzUlVGQlJUczdPMDFCUTNKRFJTeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1RVRkRWRVlzU1VGQlRTeFpRVUZaTEVkQlFVY3NiMEpCUVc5Q0xFTkJRVUU3VFVGRGVrTkJMRWxCUVUwc1IwRkJSeXhIUVVGSExGRkJRVkVzUTBGQlF5eGxRVUZsTEVkQlFVY3NXVUZCV1N4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wMUJRM2hFUVN4SlFVRk5MRWxCUVVrc1IwRkJSeXhOUVVGTkxFZEJRVWNzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRVHROUVVOb1EwRXNTVUZCVFN4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhEUVVGQk8wMUJReTlEUVN4SlFVRk5MR1ZCUVdVc1IwRkJSeXhaUVVGSE8xRkJRM3BDTEVsQlFVa3NSVUZCUlN4RFFVRkRMRWRCUVVjc1IwRkJSeXhGUVVGRk8xVkJRMklzVDBGQlR5eFJRVUZSTEVsQlFVa3NVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJRM2xDTEUxQlFVa3NRMEZCUXp0VFFVTjJRenRSUVVORWVrSXNTVUZCVFN4TFFVRkxMRWRCUVVkNVFpeE5RVUZKTEVOQlFVTXNTMEZCU3l4TFFVRkxMRU5CUVVNN1dVRkRNVUlzU1VGQlNTeEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETzFsQlEzaENMRWxCUVVrc1IwRkJSeXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVRTdVVUZEYkVOQkxFMUJRVWtzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhSUVVGUkxFVkJRVVU3VlVGRE9VSXNXVUZCV1N4RlFVRkZMRXRCUVVzN1UwRkRjRUlzUTBGQlF5eERRVUZCTzFGQlEwWXNWVUZCVlN4RFFVRkRMR1ZCUVdVc1JVRkJSU3h2UWtGQmIwSXNRMEZCUXl4RFFVRkJPMDlCUTJ4RUxFTkJRVUU3VFVGRFJDeGxRVUZsTEVWQlFVVXNRMEZCUVR0TFFVTnNRanRIUVVOR08wTkJRMFlzUTBGQlFUczdRVU51YjBKRU96czdPenM3T3pzN096czdPenM3T3pzN096dEJRVzlDUVN4QlFVVkJla0lzU1VGQlRXMURMRkZCUVUwc1IwRkJSenRGUVVOaUxFMUJRVTBzUlVGQlJTeERRVUZETEZWQlFWVXNRMEZCUXp0RlFVTndRaXhMUVVGTExFVkJRVVU3U1VGRFRDeExRVUZMTEVWQlFVVTdUVUZEVEN4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETzAxQlEzUkNMRTlCUVU4c1JVRkJSU3hEUVVGRE8wdEJRMWc3U1VGRFJDeFhRVUZYTEVWQlFVVTdUVUZEV0N4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETzAxQlEzWkNMRTlCUVU4c1JVRkJSU3hMUVVGTE8wdEJRMlk3U1VGRFJDeFJRVUZSTEVWQlFVVTdUVUZEVWl4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzVFVGQlRTeERRVUZETzAxQlEzUkNMRTlCUVU4c1JVRkJSU3hKUVVGSk8wdEJRMlE3U1VGRFJDeFJRVUZSTEVWQlFVVTdUVUZEVWl4SlFVRkpMRVZCUVVVc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETzAxQlEzWkNMRTlCUVU4c1JVRkJSU3hKUVVGSk8wdEJRMlE3UjBGRFJqczdSVUZGUkN4TFFVRkxMRVZCUVVVN1NVRkRUQ3hMUVVGTExHZENRVUZCTEVsQlFVazdUVUZEVUN4SlFVRkpMRU5CUVVNc1dVRkJXU3hIUVVGSExFbEJRVWtzUTBGQlF5eGxRVUZsTEVOQlFVTXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGQk8wdEJRM0pFTzBkQlEwWTdPMFZCUlVRc1NVRkJTU3hsUVVGQkxFbEJRVWs3U1VGRFRpeFBRVUZQTzAxQlEwd3NWVUZCVlN4RlFVRkZMRU5CUVVNN1RVRkRZaXhaUVVGWkxFVkJRVVVzU1VGQlNTeERRVUZETEV0QlFVczdTMEZEZWtJN1IwRkRSanM3UlVGRlJDeFpRVUZaTEhWQ1FVRkJMRWxCUVVrN1NVRkRaQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEZGQlFWRXNRMEZCUVR0SFFVTjZRanM3UlVGRlJDeE5RVUZOTEdsQ1FVRkJMRVZCUVVVc1lVRkJZU3hGUVVGRk96czdPenRKUVV0eVFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4aFFVRmhMRU5CUVVNc1lVRkJZU3hEUVVGRE8wZEJRM3BETzBOQlEwWXNRMEZCUVRzN1FVRkZSQ3hsUVVGbE8wVkJRMklzU1VGQlNTeGxRVUZCTEVWQlFVVXNTVUZCU1N4RlFVRkZPMGxCUTFZc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRkZCUVZFc1JVRkJSVUVzVVVGQlRTeERRVUZETEVOQlFVRTdTVUZEZUVNc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR0ZCUVdFc1JVRkJSVUVzVVVGQlRTeERRVUZETEVOQlFVRTdSMEZET1VNN1EwRkRSaXhEUVVGQk96dEJRekZGUkRzN096czdPenM3T3pzN096czdPenM3TzBGQmEwSkJMRUZCUlVGdVF5eEpRVUZOTEhOQ1FVRnpRaXhIUVVGSExFVkJRVVVzUTBGQlFUdEJRVU5xUTBFc1NVRkJUU3h6UWtGQmMwSXNSMEZCUnl4SFFVRkhMRU5CUVVFN1FVRkRiRU5CTEVsQlFVMHNjMEpCUVhOQ0xFZEJRVWNzUjBGQlJ5eERRVUZCTzBGQlEyeERRU3hKUVVGTkxEQkNRVUV3UWl4SFFVRkhMRWRCUVVjc1EwRkJRVHM3UVVGRmRFTkJMRWxCUVUwc1kwRkJZeXhIUVVGSE8wVkJRM0pDTEUxQlFVMHNSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJRenRGUVVOd1FpeExRVUZMTEVWQlFVVTdTVUZEVEN4TFFVRkxMRVZCUVVVN1RVRkRUQ3hKUVVGSkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRPMDFCUTNSQ0xFOUJRVThzUlVGQlJTeERRVUZETzB0QlExZzdTVUZEUkN4UlFVRlJMRVZCUVVVN1RVRkRVaXhKUVVGSkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVWQlFVVXNUMEZCVHl4RFFVRkRPMDFCUTNaQ0xFOUJRVThzUlVGQlJTeExRVUZMTzB0QlEyWTdTVUZEUkN4UlFVRlJMRVZCUVVVN1RVRkRVaXhKUVVGSkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRPMDFCUTNSQ0xFOUJRVThzUlVGQlJTeEpRVUZKTzB0QlEyUTdTVUZEUkN4UlFVRlJMRVZCUVVVN1RVRkRVaXhKUVVGSkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVWQlFVVXNUMEZCVHl4RFFVRkRPMDFCUTNaQ0xFOUJRVThzUlVGQlJTeEpRVUZKTzB0QlEyUTdTVUZEUkN4aFFVRmhMRVZCUVVVN1RVRkRZaXhKUVVGSkxFVkJRVVVzUTBGQlF5eE5RVUZOTEVWQlFVVXNUVUZCVFN4RFFVRkRPMDFCUTNSQ0xGTkJRVk1zUlVGQlJTeFZRVUZWTEVkQlFVY3NSVUZCUlR0UlFVTjRRaXhIUVVGSExFZEJRVWNzVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMUZCUTNKQ0xFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWxCUVVrc1IwRkJSeXhIUVVGSExFTkJRVU03VDBGRE9VSTdUVUZEUkN4UFFVRlBMRVZCUVVVc2MwSkJRWE5DTzB0QlEyaERPMGxCUTBRc1lVRkJZU3hGUVVGRk8wMUJRMklzU1VGQlNTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJRenROUVVOMFFpeFRRVUZUTEVWQlFVVXNWVUZCVlN4SFFVRkhMRVZCUVVVN1VVRkRlRUlzUjBGQlJ5eEhRVUZITEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRSUVVOeVFpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1QwRkRNME03VFVGRFJDeFBRVUZQTEVWQlFVVXNjMEpCUVhOQ08wdEJRMmhETzBsQlEwUXNZVUZCWVN4RlFVRkZPMDFCUTJJc1NVRkJTU3hGUVVGRkxFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXp0TlFVTjBRaXhUUVVGVExFVkJRVVVzVlVGQlZTeEhRVUZITEVWQlFVVTdVVUZEZUVJc1IwRkJSeXhIUVVGSExGVkJRVlVzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUVR0UlFVTnlRaXhQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4SlFVRkpMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVTTdUMEZETTBNN1RVRkRSQ3hQUVVGUExFVkJRVVVzYzBKQlFYTkNPMHRCUTJoRE8wbEJRMFFzWjBKQlFXZENMRVZCUVVVN1RVRkRhRUlzU1VGQlNTeEZRVUZGTEVOQlFVTXNUVUZCVFN4RlFVRkZMRTFCUVUwc1EwRkJRenROUVVOMFFpeFRRVUZUTEVWQlFVVXNWVUZCVlN4SFFVRkhMRVZCUVVVN1VVRkRlRUlzUjBGQlJ5eEhRVUZITEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRSUVVOeVFpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFZEJRVWNzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVNN1QwRkRNME03VFVGRFJDeFBRVUZQTEVWQlFVVXNNRUpCUVRCQ08wdEJRM0JETzBkQlEwWTdPMFZCUlVRc1MwRkJTeXhGUVVGRk8wbEJRMHdzUzBGQlN5eG5Ra0ZCUVN4SlFVRkpPMDFCUTFBc1NVRkJTU3hEUVVGRExGbEJRVmtzUjBGQlJ5eEpRVUZKTEVOQlFVTXNaVUZCWlN4RFFVRkRMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdExRVU55UkR0SFFVTkdPenRGUVVWRUxFbEJRVWtzWlVGQlFTeEpRVUZKTzBsQlEwNHNUMEZCVHp0TlFVTk1MRmxCUVZrc1JVRkJSU3hKUVVGSkxFTkJRVU1zUzBGQlN6dE5RVU40UWl4VlFVRlZMRVZCUVVVc1EwRkJRenRMUVVOa08wZEJRMFk3TzBWQlJVUXNXVUZCV1N4MVFrRkJRU3hKUVVGSk8wbEJRMlFzU1VGQlNTeERRVUZETEZWQlFWVXNSMEZCUnl4SlFVRkpMRU5CUVVFN1NVRkRkRUlzU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4cFFrRkJhVUlzUTBGQlFUdEhRVU5zUXpzN1JVRkZSQ3hOUVVGTkxHbENRVUZCTEVWQlFVVXNZVUZCWVN4RlFVRkZPMGxCUTNKQ0xFOUJRVThzU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4aFFVRmhMRU5CUVVNN1IwRkRla003UTBGRFJpeERRVUZCT3p0QlFVVkVMR1ZCUVdVN1JVRkRZaXhKUVVGSkxHVkJRVUVzUlVGQlJTeEpRVUZKTEVWQlFVVTdTVUZEVml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNhVUpCUVdsQ0xFVkJRVVVzWTBGQll5eERRVUZETEVOQlFVRTdSMEZETVVRN1EwRkRSaXhEUVVGQk96dEJRM3BIUkRzN096czdPenM3T3pzN096czdPenM3T3p0QlFXMUNRVUVzU1VGQlRXMUNMRTFCUVVrc1IwRkJSeXh2YkVKQk5rSmlMRU5CUVVFN08wRkJSVUZxUWl4SlFVRkphMElzZFVKQlFYRkNPMGxCUVVWa0xGRkJRVTA3U1VGQlJUaENMRmxCUVZVc1EwRkJRVHM3UVVGRk4wTXNVMEZCVXl4eFFrRkJjVUlzUlVGQlJTeEpRVUZKTEVWQlFVVXNVVUZCVVN4RlFVRkZPMFZCUXpsRGNFTXNTVUZCVFN4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGQk8wVkJRMmhDTEV0QlFVc3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVsQlFVa3NRMEZCUXl4UlFVRlJMRWRCUVVjc2JVSkJRVzFDTEVkQlFVY3NWMEZCVnl4RFFVRkRMRU5CUVVFN1JVRkRPVVVzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhSUVVGUkxFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVFN1JVRkRia1FzVDBGQlR5eExRVUZMTzBOQlEySTdPMEZCUlVRc1UwRkJVeXhQUVVGUExFVkJRVVVzVDBGQlR5eEZRVUZGTEVOQlFVTXNSVUZCUlR0RlFVTTFRa0VzU1VGQlRTeFJRVUZSTEVkQlFVY3NSVUZCUlN4RFFVRkJPMFZCUTI1Q1FTeEpRVUZOTEZkQlFWY3NSMEZCUjI5Q0xIVkNRVUZ4UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8wVkJRMnhFY0VJc1NVRkJUU3hyUWtGQmEwSXNSMEZCUjI5RExGbEJRVlU3VFVGRGFrTXNSVUZCUlR0TlFVTkdMRmRCUVZjN1RVRkRXQ3hEUVVGRExGZEJRVmNzUlVGQlJTeHRRa0ZCYlVJc1JVRkJSU3hWUVVGVkxFTkJRVU03UzBGREwwTXNRMEZCUVR0RlFVTklMRXRCUVV0c1F5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1JVRkJSU3hEUVVGRExFVkJRVVU3U1VGRE9VTkdMRWxCUVUwc1ZVRkJWU3hIUVVGSExFTkJRVU1zTmtKQlFUWkNMRU5CUVVNc1EwRkJRVHRKUVVOc1JFVXNTVUZCU1N4UlFVRlJMRWRCUVVjc1MwRkJTeXhEUVVGQk8wbEJRM0JDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVTdUVUZEYUVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5dzBRa0ZCTkVJc1EwRkJReXhEUVVGQk8wMUJRemRETEZGQlFWRXNSMEZCUnl4SlFVRkpMRU5CUVVFN1MwRkRhRUk3U1VGRFJDeFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFVkJRVVU3VFVGRGRFSXNWMEZCVnl4RlFVRkZMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETzAxQlEycERMRmRCUVZjc1JVRkJSU3h4UWtGQmNVSXNRMEZCUXl4clFrRkJhMElzUlVGQlJTeFJRVUZSTEVOQlFVTTdTMEZEYWtVc1EwRkJReXhEUVVGRExFTkJRVUU3UjBGRFNqdEZRVU5FTEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1dVRkJXVHRKUVVNMVFpeFRRVUZUTEVOQlFVTXNTVUZCU1N4RlFVRkZMR1ZCUVdVc1EwRkJReXhKUVVGSkxFVkJRVVVzVjBGQlZ5eERRVUZETEVWQlFVVXNVVUZCVVN4RFFVRkRMRWxCUVVrc1JVRkJSU3hYUVVGWExFTkJRVU1zUTBGQlF5eERRVUZCTzBkQlEycEdMRU5CUVVNc1EwRkJRVHRGUVVOR0xFOUJRVThzUTBGQlF5eERRVUZETEV0QlFVc3NSVUZCUlR0SlFVTmtMRXRCUVVzc1JVRkJSU3hGUVVGRkxGZEJRVmNzUlVGQlJTeFhRVUZYTEVWQlFVVTdTVUZEYmtNc1YwRkJWeXhGUVVGRkxIZENRVUYzUWp0SlFVTnlReXhYUVVGWExFVkJRVVVzVjBGQlZ6dEhRVU42UWl4RlFVRkZMRkZCUVZFc1EwRkJRenREUVVOaU96czdPenRCUVV0RUxGTkJRVk1zWlVGQlpTeEZRVUZGTEU5QlFVOHNSVUZCUlN4WFFVRlhMRVZCUVVVN1JVRkRPVU5HTEVsQlFVMHNSVUZCUlN4SFFVRkhMRTlCUVU4c1EwRkJReXhqUVVGakxFVkJRVVVzUTBGQlFUdEZRVU51UTBFc1NVRkJUU3hKUVVGSkxFZEJRVWNzUTBGQlF5eFBRVUZQTEVWQlFVVXNVVUZCVVN4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExGVkJRVU1zUjBGQlJ5eEZRVUZGTEVkQlFVY3NSVUZCUlR0SlFVTnFSRUVzU1VGQlRTeEhRVUZITEVkQlFVY3NWMEZCVnl4SlFVRkpMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlFUdEpRVU16UXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUjBGQlJ5eEhRVUZITEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZETVVNc1QwRkJUeXhIUVVGSE8wZEJRMWdzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUVR0RlFVTk9MRTlCUVU4c1NVRkJTVHREUVVOYU96czdPenRCUVV0RUxGTkJRVk1zVVVGQlVTeEZRVUZGTEU5QlFVOHNSVUZCUlN4WFFVRlhMRVZCUVVVN1JVRkRka01zVDBGQlR5eERRVUZETEUxQlFVMHNSVUZCUlN4TFFVRkxMRVZCUVVVc1VVRkJVU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4VlFVRkRMRWRCUVVjc1JVRkJSU3hIUVVGSExFVkJRVVU3U1VGRE1VUkJMRWxCUVUwc1IwRkJSeXhIUVVGSExGZEJRVmNzU1VGQlNTeFhRVUZYTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1NVRkRNME1zU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhGUVVGRkxFVkJRVVVzVDBGQlR5eEhRVUZITEVWQlFVVTdTVUZEY2tNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eEhRVUZITEZWQlFWVXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRKUVVNeFFpeFBRVUZQTEVkQlFVYzdSMEZEV0N4RlFVRkZMRVZCUVVVc1EwRkJRenREUVVOUU96czdPenRCUVV0RUxGTkJRVk1zYVVKQlFXbENMRVZCUVVVc1JVRkJSU3hGUVVGRk8wVkJRemxDUlN4SlFVRkpMRXRCUVVzc1JVRkJSU3hOUVVGTkxFTkJRVUU3UlVGRGFrSXNTVUZCU1N4RlFVRkZMRU5CUVVNc1VVRkJVU3hEUVVGRExFMUJRVTBzUzBGQlN5eERRVUZETEVWQlFVVTdTVUZETlVKR0xFbEJRVTBzYVVKQlFXbENMRWRCUVVjc1RVRkJUU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRVZCUVVVc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0SlFVTnFSU3hMUVVGTExFZEJRVWNzVlVGQlZTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBsQlF6TkRMRTFCUVUwc1IwRkJSeXhWUVVGVkxFTkJRVU1zYVVKQlFXbENMRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3UjBGRE9VTTdUMEZEU1R0SlFVTklRU3hKUVVGTmNVTXNiVUpCUVdsQ0xFZEJRVWNzVFVGQlRTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFVkJRVVVzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRKUVVOcVJYSkRMRWxCUVUwc1QwRkJUeXhIUVVGSExGVkJRVlVzUTBGQlEzRkRMRzFDUVVGcFFpeERRVUZETEZWQlFWVXNRMEZCUXl4RFFVRkJPMGxCUTNoRUxFMUJRVTBzUjBGQlJ5eFZRVUZWTEVOQlFVTkJMRzFDUVVGcFFpeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUXpkRExFdEJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFMUJRVTBzUjBGQlJ5eFBRVUZQTEVOQlFVTXNSMEZCUnl4UFFVRlBMRU5CUVVFN1IwRkRNVVE3UlVGRFJDeFBRVUZQTEVWQlFVVXNUMEZCUVN4TFFVRkxMRVZCUVVVc1VVRkJRU3hOUVVGTkxFVkJRVVU3UTBGRGVrSTdPenM3T3pzN1FVRlBSQ3hUUVVGVExGTkJRVk1zUlVGQlJTeFBRVUZQTEVWQlFVVXNWMEZCVnl4RlFVRkZMRWxCUVVrc1JVRkJSVHRGUVVNNVEzSkRMRWxCUVUwc1JVRkJSU3hIUVVGSExFOUJRVThzUTBGQlF5eEhRVUZITEVOQlFVRTdSVUZEZEVKQkxFbEJRVTBzU1VGQlNTeEhRVUZITEdsQ1FVRnBRaXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZCTzBWQlEyeERRU3hKUVVGTkxGVkJRVlVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZETEVkQlFVY3NSVUZCUlN4SFFVRkhMRVZCUVVVN1NVRkRja1FzUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVRTdTVUZETTBJc1QwRkJUeXhIUVVGSE8wZEJRMWdzUlVGQlJTeEZRVUZGTEVOQlFVTXNRMEZCUVR0RlFVTk9UU3hSUVVGTkxFTkJRVU1zUlVGQlJTeERRVUZETEV0QlFVc3NSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRVHRGUVVNMVFrNHNTVUZCVFN4UFFVRlBMRWRCUVVjc1EwRkJRenRKUVVObUxFZEJRVWNzUlVGQlJTeEpRVUZKTEVOQlFVTXNTVUZCU1N4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzUTBGQlF6dFJRVU0zUWl4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXNzU1VGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4TFFVRkxMRU5CUVVNN1VVRkRka01zVDBGQlR5eEhRVUZITEUxQlFVMDdTVUZEY0VJc1MwRkJTeXhGUVVGRkxFOUJRVTg3UjBGRFppeEZRVUZGTzBsQlEwUXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGSExFbEJRVWtzU1VGQlNTeERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPMUZCUXpOQ0xFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4SlFVRkpMRWxCUVVrc1EwRkJReXhOUVVGTkxFdEJRVXNzUTBGQlF6dFJRVU40UXl4UlFVRlJMRWRCUVVjc1MwRkJTenRKUVVOd1FpeExRVUZMTEVWQlFVVXNVVUZCVVR0SFFVTm9RaXhEUVVGRExFTkJRVUU3UlVGRFJpeE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZCTEVkQlFVY3NSVUZCUXp0SlFVTXZRaXhQUVVGdlFpeEhRVUZITEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNN1NVRkJNMElzU1VGQlFTeEhRVUZITzBsQlFVVXNTVUZCUVN4TFFVRkxMR0ZCUVZvN1NVRkRUaXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4SFFVRkhMRmRCUVZjc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVRTdSMEZEYmtZc1EwRkJReXhEUVVGQk8wTkJRMGc3TzBGQlJVUkJMRWxCUVUwc1UwRkJVeXhIUVVGSE8wVkJRMmhDTEVsQlFVa3NSVUZCUlN4blFrRkJaMEk3UlVGRGRFSXNUMEZCVHl4RlFVRkZPMGxCUTFBc1NVRkJTU3hGUVVGRkxGbEJRVms3VFVGRGFFSXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeEhRVUZITEZOQlFWTXNRMEZCUVR0TFFVTjBRenRIUVVOR08wVkJRMFFzU1VGQlNTeGxRVUZCTEVsQlFVazdTVUZEVGl4UFFVRlBPMDFCUTB3c1MwRkJTeXhGUVVGRkxFTkJRVU03VFVGRFVpeE5RVUZOTEVWQlFVVXNRMEZCUXp0TFFVTldPMGRCUTBZN1JVRkRSQ3hOUVVGTkxHbENRVUZCTEVWQlFVVXNZVUZCWVN4RlFVRkZPMGxCUTNKQ0xFOUJRWFZDTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eEpRVUZKTEVWQlFVVTdTVUZCT1VNc1NVRkJRU3hMUVVGTE8wbEJRVVVzU1VGQlFTeE5RVUZOTEdOQlFXWTdTVUZEVGl4SlFVRkpMRU5CUVVNc1MwRkJTeXhIUVVGSExFdEJRVXNzUTBGQlFUdEpRVU5zUWl4SlFVRkpMRU5CUVVNc1RVRkJUU3hIUVVGSExFMUJRVTBzUTBGQlFUdEpRVU53UWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFdEJRVXNzUlVGQlJTeEZRVUZGTEUxQlFVMHNSVUZCUlR0SlFVTXpRaXhQUVVGUExFOUJRVThzUTBGQlF5eEpRVUZKTEVWQlFVVXNZVUZCWVN4RFFVRkRPMGRCUTNCRE8wVkJRMFFzVFVGQlFXMUNMRTFCUVVrN1EwRkRUQ3hEUVVGQk96dEJRVVZFTEd0Q1FVRmxPMFZCUTJJc1NVRkJTU3hsUVVGQkxFVkJRVVVzU1VGQlNTeEZRVUZGTzBsQlExWkRMSFZDUVVGeFFpeEhRVUZITEVsQlFVa3NRMEZCUXl4eFFrRkJjVUlzUTBGQlFUdEpRVU5zUkdRc1VVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eExRVUZMTEVOQlFVTXNUVUZCVFN4RFFVRkJPMGxCUXpGQ09FSXNXVUZCVlN4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zVlVGQlZTeERRVUZCTzBsQlEyeERMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4WFFVRlhMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVUU3UjBGREwwTTdRMEZEUml4RFFVRkJPenRCUTJwTlJEczdPenM3T3pzN096czdPenM3T3pzN096dEJRVzFDUVN4QlFVTkJMRUZCUTBFc1FVRkZRU3hoUVVGbE8wVkJRMklzU1VGQlNTeGxRVUZCTEVWQlFVVXNTVUZCU1N4RlFVRkZPMGxCUTFZc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlEwUXNVVUZCVFN4RFFVRkRMRU5CUVVFN1NVRkRjRUlzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRKUVVOMFFpeEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRSeXhYUVVGVExFTkJRVU1zUTBGQlFUdEhRVU40UWp0RFFVTkdMRU5CUVVFN08wRkROMEpFT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVFeVFrRjBReXhKUVVGTmJVSXNUVUZCU1N4SFFVRkhMSE5aUVdGaUxFTkJRVUU3T3pzN08wRkJTMEVzVTBGQlV5eG5Ra0ZCWjBJc1JVRkJSU3hGUVVGUExFVkJRVVU3ZVVKQlFWQXNSMEZCUnl4RlFVRkZPenRGUVVOb1EyNUNMRWxCUVUwc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wVkJRM0pEUVN4SlFVRk5MRkZCUVZFc1IwRkJSeXhGUVVGRkxFTkJRVU1zWlVGQlpTeERRVUZETEVsQlFVa3NWVUZCVlN4RFFVRkJPMFZCUTJ4RUxFbEJRVWtzUzBGQlN5eEhRVUZITEVOQlFVTXNSVUZCUlR0SlFVTmlMRTlCUVU4N1RVRkRUQ3hSUVVGUkxFVkJRVVVzVVVGQlVUdE5RVU5zUWl4bFFVRmxMRVZCUVVVc1VVRkJVVHROUVVONlFpeHZRa0ZCYjBJc1JVRkJSU3hMUVVGTE8wdEJRelZDTzBkQlEwWTdRMEZEUmpzN1FVRkZSQ3hUUVVGVExFOUJRVThzUlVGQlJTeEpRVUZKTEVWQlFVVTdSVUZEZEVJc1NVRkJVU3h4UWtGQmNVSTdSVUZCUlN4SlFVRkJMR05CUVdNc2RVSkJRWFpETzBWQlEwNHNUMEZCWjBJc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN6dEZRVUZ5UWl4SlFVRkJMRTFCUVUwc1kwRkJVanM3UlVGRlRpeFBRVUZQTzBsQlEwd3NTVUZCU1N4RlFVRkZMRmRCUVZjN1NVRkRha0lzUzBGQlN5eEZRVUZGTzAxQlEwd3NTMEZCU3l4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFMUJRVTBzUTBGQlF6dE5RVU4yUWl4TFFVRkxMRVZCUVVVc1EwRkJReXhOUVVGTkxFTkJRVU03UzBGRGFFSTdPMGxCUlVRc1RVRkJUU3hwUWtGQlFTeEZRVUZGTEdGQlFXRXNSVUZCUlR0TlFVTnlRa0VzU1VGQlRTeExRVUZMTEVkQlFVY3NjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVRTdUVUZEZWtOQkxFbEJRVTBzWVVGQllTeEhRVUZITEdkQ1FVRm5RaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzAxQlF6ZERMRTlCUVU4c1lVRkJZU3hEUVVGRExFZEJRVWNzUlVGQlJUdFJRVU40UWl4TFFVRkxMRVZCUVVVc1JVRkJSU3hYUVVGWExFVkJRVVVzVFVGQlRTeEZRVUZGTzFGQlF6bENMRVZCUVVVc1JVRkJSU3hqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETzFGQlEzaENMRmRCUVZjc1JVRkJSU3h0UWtGQmJVSTdVVUZEYUVNc1YwRkJWeXhGUVVGRkxFMUJRVTBzUTBGQlF5eExRVUZMTEVWQlFVVXNZVUZCWVN4RFFVRkRPMDlCUXpGRExFVkJRVVVzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTTdTMEZEZUVNN1NVRkRSQ3hOUVVGQmJVSXNUVUZCU1R0SFFVTk1PME5CUTBZN08wRkJSVVFzVjBGQlpUdEZRVU5pTEVsQlFVa3NaVUZCUVN4RlFVRkZMRWxCUVVrc1JVRkJSVHRKUVVOV0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhOUVVGTkxFVkJRVVVzVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVFN1IwRkRPVU03UTBGRFJpeERRVUZCT3p0QlEzUkdSRHM3T3pzN096czdPenM3T3pzN096czdPMEZCYTBKQmJrSXNTVUZCVFcxQ0xFMUJRVWtzUjBGQlJ5eG5SMEZQWWl4RFFVRkJPenRCUVVWQkxGTkJRVk1zVjBGQlZ5eEZRVUZGTEVsQlFVa3NSVUZCUlR0RlFVTXhRaXhKUVVGUkxIRkNRVUZ4UWp0RlFVRkZMRWxCUVVFc1kwRkJZeXgxUWtGQmRrTTdSVUZEVGl4UFFVRnhRaXhIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTzBWQlFUTkNMRWxCUVVFc1YwRkJWeXh0UWtGQllqdEZRVU5PTEZOQlFTdENMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXM3UlVGQmNFTXNTVUZCUVN4TlFVRk5PMFZCUVVVc1NVRkJRU3hoUVVGaExIVkNRVUYyUWpzN1JVRkZUaXhQUVVGUE8wbEJRMHdzU1VGQlNTeEZRVUZGTEdWQlFXVTdTVUZEY2tJc1RVRkJUU3hGUVVGRkxFTkJRVU1zVjBGQlZ5eERRVUZETzBsQlEzSkNMRXRCUVVzc1JVRkJSVHROUVVOTUxFdEJRVXNzUlVGQlJTeE5RVUZOTzAxQlEySXNWMEZCVnl4RlFVRkZMRTFCUVUwN1RVRkRia0lzVVVGQlVTeEZRVUZGTzFGQlExSXNTVUZCU1N4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFOUJRVThzUTBGQlF6dFJRVU4yUWl4UFFVRlBMRVZCUVVVc1MwRkJTenRQUVVObU8wMUJRMFFzVTBGQlV5eEZRVUZGTzFGQlExUXNTVUZCU1N4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFOUJRVThzUTBGQlF6dFJRVU4yUWl4UFFVRlBMRVZCUVVVc1MwRkJTenRQUVVObU8wMUJRMFFzU1VGQlNTeEZRVUZGTzFGQlEwb3NTVUZCU1N4RlFVRkZMRU5CUVVNc1RVRkJUU3hGUVVGRkxFMUJRVTBzUTBGQlF6dFJRVU4wUWl4UFFVRlBMRVZCUVVVc1EwRkJRenRQUVVOWU8wMUJRMFFzWVVGQllTeEZRVUZGTEUxQlFVMDdTMEZEZEVJN08wbEJSVVFzVFVGQlRTeHBRa0ZCUVN4RlFVRkZMR0ZCUVdFc1JVRkJSVHM3T3pzN1RVRkxja0p1UWl4SlFVRk5MRTFCUVUwc1IwRkJSeXhOUVVGTkxFTkJRVU1zWTBGQll5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMR0ZCUVdFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZCTzAxQlEyaEZMRTlCUVU4c1lVRkJZU3hEUVVGRExHVkJRV1VzUlVGQlJUdFJRVU53UXl4TFFVRkxMRVZCUVVVN1ZVRkRUQ3hYUVVGWExFVkJRVVVzVlVGQlZUdFZRVU4yUWl4TFFVRkxMRVZCUVVVc1NVRkJTU3hEUVVGRExFdEJRVXM3VlVGRGFrSXNVVUZCVVN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUzBGQlN5eFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMRkZCUVZFc1MwRkJTeXhMUVVGTExFTkJRVU03VlVGRGFFVXNVMEZCVXl4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExGTkJRVk1zUzBGQlN5eFBRVUZQTEVsQlFVa3NTVUZCU1N4RFFVRkRMRk5CUVZNc1MwRkJTeXhMUVVGTExFTkJRVU03VlVGRGJrVXNWMEZCVnl4RlFVRkZMRWxCUVVrc1EwRkJReXhYUVVGWE8xVkJRemRDTEVsQlFVa3NSVUZCUlN4SlFVRkpMRU5CUVVNc1NVRkJTVHRWUVVObUxHbENRVUZwUWl4RlFVRkZMRWxCUVVrc1EwRkJReXhoUVVGaE8xTkJRM1JETzFGQlEwUXNVVUZCVVN4RlFVRkZPMVZCUTFJc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTzFOQlEyeENPMUZCUTBRc1JVRkJSU3hGUVVGRkxFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1EwRkJReXhOUVVGTkxFTkJRVU03VVVGRGNFTXNWMEZCVnl4RlFVRkZMSFZDUVVGMVFqdFJRVU53UXl4WFFVRlhMRVZCUVVVc2NVSkJRWEZDTEVOQlFVTXNTVUZCU1N4RFFVRkRPMDlCUTNwRExFTkJRVU03UzBGRFNEdEpRVU5FTEUxQlFVRnRRaXhOUVVGSk8wZEJRMHc3UTBGRFJqczdRVUZGUkN4bFFVRmxPMFZCUTJJc1NVRkJTU3hsUVVGQkxFVkJRVVVzU1VGQlNTeEZRVUZGTzBsQlExWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEZWQlFWVXNSVUZCUlN4WFFVRlhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlFUdEhRVU4wUkR0RFFVTkdMRU5CUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRMnhGUkN4VFFVRlRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFVkJRVVU3UlVGRGRrSXNTVUZCVVN4eFFrRkJjVUk3UlVGQlJTeEpRVUZCTEdOQlFXTXNkVUpCUVhaRE96dEZRVVZPTEU5QlFVODdTVUZEVEN4SlFVRkpMRVZCUVVVc1dVRkJXVHRKUVVOc1FpeExRVUZMTEVWQlFVVTdUVUZEVEN4SFFVRkhMRVZCUVVVc1RVRkJUVHROUVVOWUxGVkJRVlVzUlVGQlJUdFJRVU5XTEVsQlFVa3NSVUZCUlN4TlFVRk5PMUZCUTFvc1QwRkJUeXhGUVVGRkxFOUJRVTg3VVVGRGFFSXNVMEZCVXl4dlFrRkJRU3hGUVVGRkxFdEJRVXNzUlVGQlJUdFZRVU5vUWl4UFFVRlBMRU5CUVVNc1RVRkJUU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU03VTBGREwwTTdUMEZEUmp0TlFVTkVMRkZCUVZFc1JVRkJSVHRSUVVOU0xFbEJRVWtzUlVGQlJTeERRVUZETEUxQlFVMHNSVUZCUlN4UFFVRlBMRU5CUVVNN1VVRkRka0lzVDBGQlR5eEZRVUZGTEV0QlFVczdUMEZEWmp0TlFVTkVMRkZCUVZFc1JVRkJSVHRSUVVOU0xFbEJRVWtzUlVGQlJTeERRVUZETEUxQlFVMHNSVUZCUlN4UFFVRlBMRU5CUVVNN1VVRkRka0lzVDBGQlR5eEZRVUZGTEV0QlFVczdUMEZEWmp0TlFVTkVMRmRCUVZjc1JVRkJSVHRSUVVOWUxFbEJRVWtzUlVGQlJTeERRVUZETEUxQlFVMHNSVUZCUlN4UFFVRlBMRU5CUVVNN1VVRkRka0lzVDBGQlR5eEZRVUZGTEVsQlFVazdUMEZEWkR0TlFVTkVMRkZCUVZFc1JVRkJSVHRSUVVOU0xFbEJRVWtzUlVGQlJTeERRVUZETEUxQlFVMHNSVUZCUlN4UFFVRlBMRU5CUVVNN1VVRkRka0lzVDBGQlR5eEZRVUZGTEV0QlFVczdUMEZEWmp0TFFVTkdPenRKUVVWRUxFMUJRVTBzYVVKQlFVRXNSVUZCUlN4aFFVRmhMRVZCUVVVN1RVRkRja0lzU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4TFFVRkxMRTFCUVUwc1JVRkJSVHRSUVVNNVFpeEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRmxCUVZrN1ZVRkRla0lzU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZCTzFOQlF6VkNMRU5CUVVNc1EwRkJRVHRQUVVOSU8xZEJRMGtzU1VGQlNTeEpRVUZKTEVOQlFVTXNWVUZCVlN4TFFVRkxMRTlCUVU4c1JVRkJSVHRSUVVOd1F5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRmxCUVZrN1ZVRkRla0lzU1VGQlNTeERRVUZETEVkQlFVY3NTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZCTzFOQlF6ZENMRU5CUVVNc1EwRkJRVHRQUVVOSU96dE5RVVZFTEU5QlFVOHNZVUZCWVN4RFFVRkRMRmxCUVZrc1JVRkJSVHRSUVVOcVF5eExRVUZMTEVWQlFVVTdWVUZEVEN4WFFVRlhMRVZCUVVVc1QwRkJUenRWUVVOd1FpeFJRVUZSTEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFdEJRVXNzVDBGQlR5eEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRXRCUVVzc1MwRkJTeXhEUVVGRE8yVkJRelZFTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1MwRkJTeXhQUVVGUExFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNTMEZCU3l4TFFVRkxMRU5CUVVNc1EwRkJRenRWUVVNMVJDeHZRa0ZCYjBJc1JVRkJSU3hKUVVGSkxFTkJRVU1zVjBGQlZ6dFZRVU4wUXl4UlFVRlJMRVZCUVVVc1NVRkJTU3hEUVVGRExGRkJRVkU3VlVGRGRrSXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGSE8xTkJRMlE3VVVGRFJDeEZRVUZGTEVWQlFVVXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRVThzUlVGQlJTeFBRVUZQTEVWQlFVVXNVVUZCVVN4RlFVRkZMRTFCUVUwc1EwRkJReXhEUVVGRE8xRkJRemxFTEZkQlFWY3NSVUZCUlN4dlFrRkJiMEk3VVVGRGFrTXNWMEZCVnl4RlFVRkZMSEZDUVVGeFFpeERRVUZETEVsQlFVa3NRMEZCUXp0UFFVTjZReXhEUVVGRE8wdEJRMGc3UjBGRFJqdERRVU5HT3p0QlFVVkVMRmxCUVdVN1JVRkRZaXhKUVVGSkxHVkJRVUVzUlVGQlJTeEpRVUZKTEVWQlFVVTdTVUZEVml4SlFVRkpMRU5CUVVNc2FVSkJRV2xDTEVOQlFVTXNUMEZCVHl4RlFVRkZMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZCTzBkQlEyaEVPME5CUTBZc1EwRkJRVHM3UVVOd1JrUTdPenM3T3pzN096czdPenM3T3pzN096czdRVUZ0UWtGdVFpeEpRVUZOYlVJc1RVRkJTU3hIUVVGSExIZElRVkZpTEVOQlFVRTdPMEZCUlVFc1UwRkJVeXhOUVVGTkxFVkJRVVVzU1VGQlNTeEZRVUZGTzBWQlEzSkNMRWxCUVZFc2NVSkJRWEZDTzBWQlFVVXNTVUZCUVN4alFVRmpMSFZDUVVGMlF6dEZRVU5PTEU5QlFYRkNMRWRCUVVjc1NVRkJTU3hEUVVGRExFdEJRVXM3UlVGQk1VSXNTVUZCUVN4WFFVRlhMRzFDUVVGaU96dEZRVVZPTEU5QlFVODdTVUZEVEN4SlFVRkpMRVZCUVVVc1ZVRkJWVHRKUVVOb1FpeExRVUZMTEVWQlFVVTdUVUZEVEN4SFFVRkhMRVZCUVVVc1RVRkJUVHRMUVVOYU8wbEJRMFFzVDBGQlR5eEZRVUZGT3p0TlFVVlFMRTFCUVUwc2FVSkJRVUVzU1VGQlNUdFJRVU5TTEVsQlFVa3NTVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSVHRWUVVOYUxFbEJRVWtzUTBGQlF5eEhRVUZITEVOQlFVTXNZVUZCWVN4RFFVRkRMRTlCUVU4c1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlFUdFRRVU4wUXp0UFFVTkdPMDFCUTBRc1UwRkJVeXh2UWtGQlFTeEpRVUZKTzFGQlExZ3NTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRk8xVkJRMW9zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJTeERRVUZCTzFOQlEzcERPMDlCUTBZN1RVRkRSQ3hOUVVGTkxHbENRVUZCTEVsQlFVazdVVUZEVWl4SlFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFVkJRVVU3VlVGRFdpeEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMR0ZCUVdFc1EwRkJReXhQUVVGUExFTkJRVU1zVFVGQlRTeEZRVUZGTEVOQlFVRTdVMEZEZUVNN1QwRkRSanRMUVVOR096dEpRVVZFTEU5QlFVOHNhMEpCUVVFc1NVRkJTVHM3TzAxQlExUXNTVUZCU1N4SlFVRkpMRU5CUVVNc1IwRkJSeXhGUVVGRk8xRkJRMW9zU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4WFFVRlhMRVZCUVVVc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNWMEZCVnl4RlFVRkZMRVZCUVVVc1IwRkJSeXhGUVVGRkxFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVFN1VVRkRPVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eE5RVUZOTEVWQlFVVXNWVUZCUVN4TFFVRkxMRVZCUVVNN1ZVRkRkRU5OTEUxQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1dVRkJXU3hGUVVGRkxGZEJRVmNzUTBGQlEwRXNUVUZCU1N4RFFVRkRMRWRCUVVjc1JVRkJSU3haUVVGWkxFVkJRVVVzUlVGQlJTeEhRVUZITEVWQlFVVkJMRTFCUVVrc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eERRVUZETEVOQlFVRTdVMEZEYWtZc1EwRkJReXhEUVVGQk8wOUJRMGc3UzBGRFJqczdTVUZGUkN4TlFVRk5MR2xDUVVGQkxFVkJRVVVzWVVGQllTeEZRVUZGT3pzN096dE5RVXR5UWl4UFFVRlBMR0ZCUVdFc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRE4wSXNTMEZCU3l4RlFVRkZPMVZCUTB3c1YwRkJWeXhGUVVGRkxFdEJRVXM3VlVGRGJFSXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJReXhIUVVGSE8xTkJRMlE3VVVGRFJDeEZRVUZGTEVWQlFVVXNZMEZCWXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETzFGQlEyNURMRmRCUVZjc1JVRkJSU3hyUWtGQmEwSTdVVUZETDBJc1YwRkJWeXhGUVVGRkxIRkNRVUZ4UWl4RFFVRkRMRWxCUVVrc1EwRkJRenRQUVVONlF5eERRVUZETzB0QlEwZzdTVUZEUkN4TlFVRkJUaXhOUVVGSk8wZEJRMHc3UTBGRFJqczdRVUZGUkN4VlFVRmxPMFZCUTJJc1NVRkJTU3hsUVVGQkxFVkJRVVVzU1VGQlNTeEZRVUZGTzBsQlExWXNTVUZCU1N4RFFVRkRMR2xDUVVGcFFpeERRVUZETEV0QlFVc3NSVUZCUlN4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlFUdEhRVU0xUXp0RFFVTkdMRU5CUVVFN08wRkRla1pFT3pzN096czdPenM3T3pzN096czdPenM3UVVGclFrRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVVkJMR2xDUVVGbE8wVkJRMklzUTBGQlF6dEZRVU5FTEVkQlFVYzdSVUZEU0c5Q0xFOUJRVXM3UlVGRFRDeExRVUZMTzBWQlEwd3NUMEZCVHp0RlFVTlFMRlZCUVZVN1JVRkRWaXhOUVVGTk8wVkJRMDRzU1VGQlNUdEZRVU5LTEZGQlFWRTdSVUZEVWl4TFFVRkxPMFZCUTB3c1IwRkJSenREUVVOS0xFTkJRVUU3TzBGRE1VTkVPenM3T3pzN096czdPenM3T3pzN096czdRVUZyUWtFc1FVRkZRWFpETEVsQlFVMHNhMEpCUVd0Q0xFZEJRVWNzWVVGQllTeEpRVUZKTEZOQlFWTXNRMEZCUVR0QlFVTnlSRUVzU1VGQlRTeFJRVUZSTEVkQlFVY3NiVVJCUVd0RUxFTkJRVUU3TzBGQlJXNUZRU3hKUVVGTkxGZEJRVmNzUjBGQlJ6czdPenM3UlVGTGJFSXNhMEpCUVd0Q0xEWkNRVUZCTEVWQlFVVXNWMEZCVnl4RlFVRkZMRk5CUVZNc1JVRkJSU3hQUVVGUExFVkJRVVU3T3p0SlFVTnVSRUVzU1VGQlRTeFRRVUZUTEVkQlFVY3NWVUZCUVN4SFFVRkhMRVZCUVVNc1UwRkJSM2xDTEUxQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExGZEJRVmNzUlVGQlJTeEhRVUZITEVOQlFVTXNSMEZCUVN4RFFVRkJPMGxCUTNSRmVrSXNTVUZCVFN4UFFVRlBMRWRCUVVjc1ZVRkJRU3hIUVVGSExFVkJRVU1zVTBGQlIzbENMRTFCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEZOQlFWTXNSVUZCUlN4SFFVRkhMRU5CUVVNc1IwRkJRU3hEUVVGQk8wbEJRMnhGTEVsQlFVa3NhMEpCUVd0Q0xFVkJRVVU3VFVGRGRFSXNVMEZCVXl4RFFVRkRMRmRCUVZjc1EwRkJReXhyUWtGQmEwSXNRMEZCUXl4VFFVRlRMRVZCUVVVc1QwRkJUeXhGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZCTzB0QlEzUkZPMU5CUTBrN1RVRkRTQ3hQUVVGUExFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4RFFVRkJPMDFCUTNSQ0xFOUJRVThzUTBGQlF5eEpRVUZKTEV0QlFVc3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGQk8wdEJRemRDTzBkQlEwWTdPenRGUVVkRUxHRkJRV0VzZDBKQlFVRXNSVUZCUlN4WFFVRlhMRVZCUVVVc1UwRkJVeXhGUVVGRkxFOUJRVThzUlVGQlJUczdPMGxCUXpsRGVrSXNTVUZCVFN4VFFVRlRMRWRCUVVjc1ZVRkJRU3hIUVVGSExFVkJRVU1zVTBGQlIzbENMRTFCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEZkQlFWY3NSVUZCUlN4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFZEJRVUVzUTBGQlFUdEpRVU0xUlhwQ0xFbEJRVTBzVDBGQlR5eEhRVUZITEZWQlFVRXNSMEZCUnl4RlFVRkRMRk5CUVVkNVFpeE5RVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMR1ZCUVdVc1EwRkJReXhUUVVGVExFVkJRVVVzUjBGQlJ5eERRVUZETEVkQlFVRXNRMEZCUVR0SlFVTnNSU3hKUVVGSkxHdENRVUZyUWl4RlFVRkZPMDFCUTNSQ2VrSXNTVUZCVFN4RlFVRkZMRWRCUVVjc1UwRkJVeXhEUVVGRExGZEJRVmNzUTBGQlF5eGhRVUZoTEVOQlFVTXNWVUZCUVN4SFFVRkhMRVZCUVVNN1VVRkRha1FzUjBGQlJ5eERRVUZETEU5QlFVOHNSMEZCUnl4RlFVRkZMRU5CUVVFN1VVRkRhRUlzVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMDlCUTJZc1JVRkJSU3hQUVVGUExFVkJRVVVzVDBGQlR5eERRVUZETEVOQlFVRTdTMEZEY2tJN1UwRkRTVHROUVVOSUxFOUJRVThzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVFN1RVRkRkRUlzVDBGQlR5eERRVUZETEVsQlFVa3NTMEZCU3l4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFTkJRVUU3UzBGRE4wSTdSMEZEUmpzN1JVRkZSQ3hWUVVGVkxIRkNRVUZCTEVWQlFVVXNUMEZCVHl4RlFVRkZPMGxCUTI1Q0xFbEJRVWtzYTBKQlFXdENMRVZCUVVVN1RVRkRkRUlzVTBGQlV5eERRVUZETEZkQlFWY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3UzBGRE1VTTdVMEZEU1R0TlFVTklMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVRTdTMEZEZGtJN1IwRkRSanREUVVOR0xFTkJRVUU3TzBGQlJVUkJMRWxCUVUwc1NVRkJTU3hIUVVGSE8wVkJRMWdzVjBGQlZ5eEZRVUZGTEVOQlFVTTdTVUZEV2l4SlFVRkpMRVZCUVVVc2IwSkJRVzlDTzBsQlF6RkNMRWxCUVVrc1JVRkJSU3hEUVVGRExGVkJRVlVzUlVGQlJTeFZRVUZWTEVWQlFVVXNVVUZCVVN4RFFVRkRPMGRCUTNwRExFVkJRVVU3U1VGRFJDeEpRVUZKTEVWQlFVVXNaVUZCWlR0SlFVTnlRaXhKUVVGSkxFVkJRVVVzUTBGQlF5eFZRVUZWTEVWQlFVVXNWVUZCVlN4RlFVRkZMRkZCUVZFc1EwRkJRenRIUVVONlF5eEZRVUZGTzBsQlEwUXNTVUZCU1N4RlFVRkZMRmxCUVZrN1NVRkRiRUlzU1VGQlNTeEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRPMGRCUTJwQ0xFTkJRVU03UTBGRFNDeERRVUZCT3p0QlFVVkVMRzlDUVVGbE8wVkJRMklzU1VGQlNTeGxRVUZCTEVWQlFVVXNTVUZCU1N4RlFVRkZPMGxCUTFZc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMR0ZCUVdFc1JVRkJSU3hYUVVGWExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdSMEZEZWtRN1EwRkRSaXhEUVVGQk96dEJRMjVHUkRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnZRa0VzUVVGRlFVVXNTVUZCU1N4dFFrRkJiVUlzUjBGQlJ5eExRVUZMTEVOQlFVRTdRVUZETDBJc1NVRkJTVHRGUVVOR0xHMUNRVUZ0UWl4SFFVRkhMRTlCUVU4c1dVRkJXU3hMUVVGTExGZEJRVmNzUTBGQlFUdERRVU14UkR0QlFVTkVMRTlCUVU4c1IwRkJSeXhGUVVGRk96dERRVVZZT3p0QlFVVkVSaXhKUVVGTkxFOUJRVThzUjBGQlJ5eFRRVUZUTEVOQlFVRTdRVUZEZWtKQkxFbEJRVTBzVFVGQlRTeEhRVUZITEZGQlFWRXNRMEZCUVR0QlFVTjJRa0VzU1VGQlRTeGhRVUZoTEVkQlFVY3NaVUZCWlN4RFFVRkJPMEZCUTNKRFFTeEpRVUZOTEZOQlFWTXNSMEZCUnl4WFFVRlhMRU5CUVVFN08wRkJSVGRDTEZOQlFWTXNVVUZCVVN4RlFVRkZMRTFCUVUwc1JVRkJSU3hWUVVGVkxFVkJRVVVzVVVGQlVTeEZRVUZGTzBWQlF5OURMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zVlVGQlZTeEZRVUZGTzBsQlEycERMRTFCUVUwc1JVRkJSU3hOUVVGTk8wbEJRMlFzU1VGQlNTeEZRVUZGTEZGQlFWRXNTVUZCU1N4VFFVRlRPMGRCUXpWQ0xFTkJRVU1zUTBGQlFUdERRVU5JT3p0QlFVVkVMRk5CUVZNc2EwSkJRV3RDTEVWQlFVVXNUVUZCVFN4RlFVRkZMRlZCUVZVc1JVRkJSVHRGUVVNdlF5eE5RVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRlZCUVZVc1JVRkJSVHRKUVVOcVF5eE5RVUZOTEVWQlFVVXNUVUZCVFR0SlFVTmtMRWxCUVVrc1JVRkJSU3cwUTBGQk5FTTdSMEZEYmtRc1EwRkJReXhEUVVGQk8wTkJRMGc3TzBGQlJVUkJMRWxCUVUwc1QwRkJUeXhIUVVGSE96czdPenM3T3pzN1JVRlRaQ3hQUVVGUExFVkJRVVVzVlVGQlZTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSVHRKUVVONlEwRXNTVUZCVFN4TlFVRk5MRWRCUVVjc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlFUdEpRVU14UWl4SlFVRkpMRU5CUVVNc2JVSkJRVzFDTEVWQlFVVTdUVUZEZUVJc1QwRkJUeXhyUWtGQmEwSXNRMEZCUXl4TlFVRk5MRVZCUVVVc1ZVRkJWU3hEUVVGRE8wdEJRemxETzBsQlEwUXNTVUZCU1N4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVU1zUzBGQlN5eEpRVUZKTEV0QlFVc3NTMEZCU3l4RFFVRkRMRU5CUVVNc1JVRkJSVHROUVVOdVF5eE5RVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRlZCUVZVc1JVRkJSVHRSUVVOcVF5eE5RVUZOTEVWQlFVVXNVVUZCVVR0UlFVTm9RaXhKUVVGSkxFVkJRVVVzWVVGQllUdFBRVU53UWl4RFFVRkRMRU5CUVVFN1RVRkRSaXhOUVVGTk8wdEJRMUE3U1VGRFJDeEpRVUZKTzAxQlEwWXNXVUZCV1N4RFFVRkRMRTlCUVU4c1EwRkJReXhIUVVGSExFVkJRVVVzUzBGQlN5eERRVUZETEVOQlFVRTdUVUZEYUVNc1RVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eFZRVUZWTEVWQlFVVTdVVUZEYWtNc1RVRkJUU3hGUVVGRkxFOUJRVTg3VVVGRFppeEpRVUZKTEVWQlFVVXNVMEZCVXp0UFFVTm9RaXhEUVVGRExFTkJRVUU3UzBGRFNEdEpRVU5FTEU5QlFVOHNRMEZCUXl4RlFVRkZPenROUVVWU0xGRkJRVkVzUTBGQlF5eE5RVUZOTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVFN1MwRkROMEk3UjBGRFJqczdPenM3T3p0RlFVOUVMRTlCUVU4c1JVRkJSU3hWUVVGVkxFZEJRVWNzUlVGQlJTeFZRVUZWTEVWQlFVVTdTVUZEYkVOQkxFbEJRVTBzVFVGQlRTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVFN1NVRkRNVUlzU1VGQlNTeERRVUZETEcxQ1FVRnRRaXhGUVVGRk8wMUJRM2hDTEU5QlFVOHNhMEpCUVd0Q0xFTkJRVU1zVFVGQlRTeEZRVUZGTEZWQlFWVXNRMEZCUXp0TFFVTTVRenRKUVVORUxFbEJRVWtzUTBGQlF5eEhRVUZITEVWQlFVVTdUVUZEVWl4TlFVRk5MRU5CUVVNc1pVRkJaU3hEUVVGRExGVkJRVlVzUlVGQlJUdFJRVU5xUXl4TlFVRk5MRVZCUVVVc1RVRkJUVHRSUVVOa0xFbEJRVWtzUlVGQlJTeGhRVUZoTzA5QlEzQkNMRU5CUVVNc1EwRkJRVHROUVVOR0xFMUJRVTA3UzBGRFVEdEpRVU5FTEVsQlFVazdUVUZEUmtFc1NVRkJUU3hIUVVGSExFZEJRVWNzV1VGQldTeERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHROUVVOeVF5eE5RVUZOTEVOQlFVTXNaVUZCWlN4RFFVRkRMRlZCUVZVc1JVRkJSVHRSUVVOcVF5eE5RVUZOTEVWQlFVVXNSMEZCUnl4SFFVRkhMRTlCUVU4c1IwRkJSeXhOUVVGTk8xRkJRemxDTEVsQlFVa3NSVUZCUlN4SFFVRkhMRWxCUVVrc1UwRkJVenRQUVVOMlFpeERRVUZETEVOQlFVRTdTMEZEU0R0SlFVTkVMRTlCUVU4c1EwRkJReXhGUVVGRk96dE5RVVZTTEZGQlFWRXNRMEZCUXl4TlFVRk5MRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVUU3UzBGRE4wSTdSMEZEUmpzN096czdPenRGUVU5RUxGVkJRVlVzUlVGQlJTeFZRVUZWTEVkQlFVY3NSVUZCUlN4VlFVRlZMRVZCUVVVN1NVRkRja05CTEVsQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVUU3U1VGRE1VSXNTVUZCU1N4RFFVRkRMRzFDUVVGdFFpeEZRVUZGTzAxQlEzaENMRTlCUVU4c2EwSkJRV3RDTEVOQlFVTXNUVUZCVFN4RlFVRkZMRlZCUVZVc1EwRkJRenRMUVVNNVF6dEpRVU5FTEVsQlFVa3NRMEZCUXl4SFFVRkhMRVZCUVVVN1RVRkRVaXhOUVVGTkxFTkJRVU1zWlVGQlpTeERRVUZETEZWQlFWVXNSVUZCUlR0UlFVTnFReXhOUVVGTkxFVkJRVVVzVFVGQlRUdFJRVU5rTEVsQlFVa3NSVUZCUlN4aFFVRmhPMDlCUTNCQ0xFTkJRVU1zUTBGQlFUdE5RVU5HTEUxQlFVMDdTMEZEVUR0SlFVTkVMRWxCUVVrN1RVRkRSaXhaUVVGWkxFTkJRVU1zVlVGQlZTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPMDFCUXpWQ0xFMUJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVTXNWVUZCVlN4RlFVRkZPMUZCUTJwRExFMUJRVTBzUlVGQlJTeFBRVUZQTzFGQlEyWXNTVUZCU1N4RlFVRkZMRk5CUVZNN1QwRkRhRUlzUTBGQlF5eERRVUZCTzB0QlEwZzdTVUZEUkN4UFFVRlBMRU5CUVVNc1JVRkJSVHM3VFVGRlVpeFJRVUZSTEVOQlFVTXNUVUZCVFN4RlFVRkZMRlZCUVZVc1EwRkJReXhEUVVGQk8wdEJRemRDTzBkQlEwWTdPenM3T3p0RlFVMUVMRTFCUVUwc1JVRkJSU3hWUVVGVkxGVkJRVlVzUlVGQlJUdEpRVU0xUWtFc1NVRkJUU3hOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUVR0SlFVTXhRaXhKUVVGSkxFTkJRVU1zYlVKQlFXMUNMRVZCUVVVN1RVRkRlRUlzVDBGQlR5eHJRa0ZCYTBJc1EwRkJReXhOUVVGTkxFVkJRVVVzVlVGQlZTeERRVUZETzB0QlF6bERPMGxCUTBRc1NVRkJTVHROUVVOR1FTeEpRVUZOTEVkQlFVY3NSMEZCUnl4WlFVRlpMRU5CUVVNc1RVRkJUU3hEUVVGQk8wMUJReTlDTEUxQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1ZVRkJWU3hGUVVGRk8xRkJRMnBETEUxQlFVMHNSVUZCUlN4UFFVRlBPMUZCUTJZc1NVRkJTU3hGUVVGRkxFZEJRVWM3VDBGRFZpeERRVUZETEVOQlFVRTdTMEZEU0R0SlFVTkVMRTlCUVU4c1EwRkJReXhGUVVGRk96dE5RVVZTTEZGQlFWRXNRMEZCUXl4TlFVRk5MRVZCUVVVc1ZVRkJWU3hEUVVGRExFTkJRVUU3UzBGRE4wSTdSMEZEUmpzN096czdPMFZCVFVRc1ZVRkJWU3hGUVVGRkxGVkJRVlVzVlVGQlZTeEZRVUZGTzBsQlEyaERRU3hKUVVGTkxFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkJPMGxCUXpGQ0xFbEJRVWtzUTBGQlF5eHRRa0ZCYlVJc1JVRkJSVHROUVVONFFpeFBRVUZQTEd0Q1FVRnJRaXhEUVVGRExFMUJRVTBzUlVGQlJTeFZRVUZWTEVOQlFVTTdTMEZET1VNN1NVRkRSQ3hKUVVGSk8wMUJRMFpCTEVsQlFVMHNTVUZCU1N4SFFVRkhMRVZCUVVVc1EwRkJRVHROUVVObUxFdEJRVXRGTEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hEUVVGRExFZEJRVWNzV1VGQldTeERRVUZETEUxQlFVMHNSVUZCUlN4RFFVRkRMRVZCUVVVc1JVRkJSVHRSUVVNMVF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUVR0UFFVTXZRanROUVVORUxFMUJRVTBzUTBGQlF5eGxRVUZsTEVOQlFVTXNWVUZCVlN4RlFVRkZPMUZCUTJwRExFMUJRVTBzUlVGQlJTeFBRVUZQTzFGQlEyWXNTVUZCU1N4RlFVRkZMRWxCUVVrN1QwRkRXQ3hEUVVGRExFTkJRVUU3UzBGRFNEdEpRVU5FTEU5QlFVOHNRMEZCUXl4RlFVRkZPenROUVVWU0xGRkJRVkVzUTBGQlF5eE5RVUZOTEVWQlFVVXNWVUZCVlN4RFFVRkRMRU5CUVVFN1MwRkROMEk3UjBGRFJqdERRVU5HTEVOQlFVRTdPMEZCUlVSR0xFbEJRVTEzUXl4TlFVRkpMRWRCUVVjN1JVRkRXQ3hQUVVGUExFVkJRVVVzUTBGQlF6dEpRVU5TTEVsQlFVa3NSVUZCUlN4VFFVRlRPMGxCUTJZc1NVRkJTU3hGUVVGRkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZGQlFWRXNSVUZCUlN4VlFVRlZMRU5CUVVNN1IwRkRka01zUlVGQlJUdEpRVU5FTEVsQlFVa3NSVUZCUlN4VFFVRlRPMGxCUTJZc1NVRkJTU3hGUVVGRkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZWQlFWVXNRMEZCUXp0SFFVTTNRaXhGUVVGRk8wbEJRMFFzU1VGQlNTeEZRVUZGTEZsQlFWazdTVUZEYkVJc1NVRkJTU3hGUVVGRkxFTkJRVU1zVVVGQlVTeEZRVUZGTEZWQlFWVXNRMEZCUXp0SFFVTTNRaXhGUVVGRk8wbEJRMFFzU1VGQlNTeEZRVUZGTEZGQlFWRTdTVUZEWkN4SlFVRkpMRVZCUVVVc1EwRkJReXhWUVVGVkxFTkJRVU03UjBGRGJrSXNSVUZCUlR0SlFVTkVMRWxCUVVrc1JVRkJSU3haUVVGWk8wbEJRMnhDTEVsQlFVa3NSVUZCUlN4RFFVRkRMRlZCUVZVc1EwRkJRenRIUVVOdVFpeERRVUZETzBOQlEwZ3NRMEZCUVRzN1FVRkZSQ3huUWtGQlpUdEZRVU5pTEVsQlFVa3NSVUZCUlN4VlFVRlZMRWxCUVVrc1JVRkJSVHRKUVVOd1FpeEpRVUZKTEVOQlFVTXNhVUpCUVdsQ0xFTkJRVU1zVTBGQlV5eEZRVUZGTEU5QlFVOHNSVUZCUlVFc1RVRkJTU3hEUVVGRExFTkJRVUU3UjBGRGFrUTdRMEZEUml4RFFVRkJPenRCUTNST1JDeERRVUZETEU5QlFVOHNUVUZCVFN4TFFVRkxMRmRCUVZjc1RVRkJUU3hOUVVGTkxFZEJRVWNzUTBGQlF5eEpRVUZKTEVWQlFVVXNSVUZCUlN4RlFVRkZMRWRCUVVjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRWxCUVVrc1MwRkJTeXhOUVVGTkxFTkJRVU1zU1VGQlNTeEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkRMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUzBGQlN5eE5RVUZOTEVOQlFVTXNSMEZCUnl4SFFVRkhMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNTVUZCU1N4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUlVGQlFTeFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGQkxFbEJRVWtzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRVZCUVVFc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRU3hGUVVGQkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4VlFVRlZMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUTBGQlF5eFZRVUZWTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eGpRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1VVRkJVU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVRXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlFTeEpRVUZKTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4UlFVRlJMRVZCUVVVc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkJMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRU3hEUVVGRExFVkJRVUVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1ZVRkJWU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVWQlFVVXNRMEZCUXl4SlFVRkpMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEZRVUZCTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVRXNSMEZCUnl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVWQlFVRXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zYTBKQlFXdENMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRU3hEUVVGRExFVkJRVUVzUzBGQlN5eEZRVUZCTEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1NVRkJTU3hEUVVGRExHdENRVUZyUWl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRXNRMEZCUXl4TlFVRkJMRTlCUVU4c1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4VlFVRlZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRTFCUVUwc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEZGQlFWRXNSVUZCUlN4UFFVRlBMRU5CUVVNc1IwRkJSeXhEUVVGRExFVkJRVVVzUTBGQlF5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVWQlFVVXNRMEZCUXl4RFFVRkJMRU5CUVVNc1EwRkJReXhIUVVGSExFTkJRVU1zVlVGQlZTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1ZVRkJWU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVsQlFVa3NUVUZCVFN4RFFVRkRMSGRJUVVGM1NDeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGQkxFMUJRVTBzU1VGQlNTeExRVUZMTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUTBGQlF5eEZRVUZCTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUTBGQlF5eEhRVUZITEZGQlFWRXNSVUZCUlN4UFFVRlBMRkZCUVZFc1EwRkJReXhSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RlFVRkZMRVZCUVVVc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1JVRkJSU3hGUVVGRkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSVUZCUlN4RlFVRkZMRU5CUVVNc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRkxFVkJRVVVzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUlVGQlJTeEZRVUZGTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGQkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRlZCUVZVc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFbEJRVWtzUTBGQlF5eFJRVUZSTEVkQlFVY3NRMEZCUXl4RlFVRkZMRWxCUVVrc1EwRkJReXhSUVVGUkxFTkJRVU1zU1VGQlNTeERRVUZETEZGQlFWRXNSMEZCUnl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUlVGQlJTeEpRVUZKTEVkQlFVY3NTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhEUVVGRExFVkJRVVVzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zVVVGQlVTeEhRVUZITEVOQlFVTXNSVUZCUlN4SlFVRkpMRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zU1VGQlNTeERRVUZETEUxQlFVMHNSMEZCUnl4RFFVRkRMRVZCUVVVc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVVzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRU5CUVVNc1VVRkJVU3hGUVVGRkxFTkJRVU1zUTBGQlFTeERRVUZETEVOQlFVTXNRMEZCUXl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eFBRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUVzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNSVUZCUlN4RFFVRkRMRU5CUVVNc1EwRkJReXhCUVVGRE96dEJRME5zT1VRc1YwRkJZeXhIUVVGSExGVkJRVlVzUjBGQlJ5eEZRVUZGTzBOQlF5OUNMRTlCUVU4c2EwSkJRV3RDTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1QwRkJUeXhEUVVGRExGVkJRVlVzUlVGQlJTeFZRVUZWTEVOQlFVTXNSVUZCUlR0RlFVTXZSQ3hQUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZETEVOQlFVTXNWVUZCVlN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExGRkJRVkVzUTBGQlF5eEZRVUZGTEVOQlFVTXNRMEZCUXl4WFFVRlhMRVZCUVVVc1EwRkJRenRGUVVONFJDeERRVUZETEVOQlFVTTdRMEZEU0N4RFFVRkRPenRCUTB4R096czdPenM3UVVGTlFUdEJRVVZCTEVsQlFVa3NjVUpCUVhGQ0xFZEJRVWNzVFVGQlRTeERRVUZETEhGQ1FVRnhRaXhEUVVGRE8wRkJRM3BFTEVsQlFVbERMR2RDUVVGakxFZEJRVWNzVFVGQlRTeERRVUZETEZOQlFWTXNRMEZCUXl4alFVRmpMRU5CUVVNN1FVRkRja1FzU1VGQlNTeG5Ra0ZCWjBJc1IwRkJSeXhOUVVGTkxFTkJRVU1zVTBGQlV5eERRVUZETEc5Q1FVRnZRaXhEUVVGRE96dEJRVVUzUkN4VFFVRlRlRVVzVlVGQlVTeERRVUZETEVkQlFVY3NSVUZCUlR0RFFVTjBRaXhKUVVGSkxFZEJRVWNzUzBGQlN5eEpRVUZKTEVsQlFVa3NSMEZCUnl4TFFVRkxMRk5CUVZNc1JVRkJSVHRGUVVOMFF5eE5RVUZOTEVsQlFVa3NVMEZCVXl4RFFVRkRMSFZFUVVGMVJDeERRVUZETEVOQlFVTTdSVUZETjBVN08wTkJSVVFzVDBGQlR5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNN1EwRkRia0k3TzBGQlJVUXNVMEZCVXl4bFFVRmxMRWRCUVVjN1EwRkRNVUlzU1VGQlNUdEZRVU5JTEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hGUVVGRk8wZEJRMjVDTEU5QlFVOHNTMEZCU3l4RFFVRkRPMGRCUTJJN096czdPMFZCUzBRc1NVRkJTU3hMUVVGTExFZEJRVWNzU1VGQlNTeE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1JVRkRPVUlzUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRWxCUVVrc1EwRkJRenRGUVVOb1FpeEpRVUZKTEUxQlFVMHNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1MwRkJTeXhIUVVGSExFVkJRVVU3UjBGRGFrUXNUMEZCVHl4TFFVRkxMRU5CUVVNN1IwRkRZanM3TzBWQlIwUXNTVUZCU1N4TFFVRkxMRWRCUVVjc1JVRkJSU3hEUVVGRE8wVkJRMllzUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFVkJRVVVzUlVGQlJTeERRVUZETEVWQlFVVXNSVUZCUlR0SFFVTTFRaXhMUVVGTExFTkJRVU1zUjBGQlJ5eEhRVUZITEUxQlFVMHNRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTTdSMEZEZUVNN1JVRkRSQ3hKUVVGSkxFMUJRVTBzUjBGQlJ5eE5RVUZOTEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSMEZCUnl4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRk8wZEJReTlFTEU5QlFVOHNTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRE8wZEJRMmhDTEVOQlFVTXNRMEZCUXp0RlFVTklMRWxCUVVrc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTXNTMEZCU3l4WlFVRlpMRVZCUVVVN1IwRkRja01zVDBGQlR5eExRVUZMTEVOQlFVTTdSMEZEWWpzN08wVkJSMFFzU1VGQlNTeExRVUZMTEVkQlFVY3NSVUZCUlN4RFFVRkRPMFZCUTJZc2MwSkJRWE5DTEVOQlFVTXNTMEZCU3l4RFFVRkRMRVZCUVVVc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFZRVUZWTEUxQlFVMHNSVUZCUlR0SFFVTXhSQ3hMUVVGTExFTkJRVU1zVFVGQlRTeERRVUZETEVkQlFVY3NUVUZCVFN4RFFVRkRPMGRCUTNaQ0xFTkJRVU1zUTBGQlF6dEZRVU5JTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVWQlFVVXNSVUZCUlN4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFbEJRVWtzUTBGQlF5eEZRVUZGTEVOQlFVTTdTVUZEYUVRc2MwSkJRWE5DTEVWQlFVVTdSMEZEZWtJc1QwRkJUeXhMUVVGTExFTkJRVU03UjBGRFlqczdSVUZGUkN4UFFVRlBMRWxCUVVrc1EwRkJRenRGUVVOYUxFTkJRVU1zVDBGQlR5eEhRVUZITEVWQlFVVTdPMFZCUldJc1QwRkJUeXhMUVVGTExFTkJRVU03UlVGRFlqdERRVU5FT3p0QlFVVkVMRmRCUVdNc1IwRkJSeXhsUVVGbExFVkJRVVVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUVUZCVFN4SFFVRkhMRlZCUVZVc1RVRkJUU3hGUVVGRkxFMUJRVTBzUlVGQlJUczdPME5CUXpsRkxFbEJRVWtzU1VGQlNTeERRVUZETzBOQlExUXNTVUZCU1N4RlFVRkZMRWRCUVVkQkxGVkJRVkVzUTBGQlF5eE5RVUZOTEVOQlFVTXNRMEZCUXp0RFFVTXhRaXhKUVVGSkxFOUJRVThzUTBGQlF6czdRMEZGV2l4TFFVRkxMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJTeERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRMRTFCUVUwc1JVRkJSU3hEUVVGRExFVkJRVVVzUlVGQlJUdEZRVU14UXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRFdDeFhRVUZUTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenM3UlVGRk5VSXNTMEZCU3l4SlFVRkpMRWRCUVVjc1NVRkJTU3hKUVVGSkxFVkJRVVU3UjBGRGNrSXNTVUZCU1cxR0xHZENRVUZqTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1JVRkJSU3hIUVVGSExFTkJRVU1zUlVGQlJUdEpRVU51UXl4RlFVRkZMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGxCUTNCQ08wZEJRMFE3TzBWQlJVUXNTVUZCU1N4eFFrRkJjVUlzUlVGQlJUdEhRVU14UWl4UFFVRlBMRWRCUVVjc2NVSkJRWEZDTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNN1IwRkRkRU1zUzBGQlN5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRVZCUVVVc1EwRkJReXhIUVVGSExFOUJRVThzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1NVRkRlRU1zU1VGQlNTeG5Ra0ZCWjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhGUVVGRk8wdEJRelZETEVWQlFVVXNRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03UzBGRGJFTTdTVUZEUkR0SFFVTkVPMFZCUTBRN08wTkJSVVFzVDBGQlR5eEZRVUZGTEVOQlFVTTdRMEZEVml4RFFVRkRPenRCUTNoR1JpeEpRVUZKTEdWQlFXVXNSMEZCUjJ4SExFOUJRVFJDTEVOQlFVTTdRVUZEYmtRc1NVRkJTU3haUVVGWkxFZEJRVWRHTEU5QlFYZENMRU5CUVVNN08wRkJSVFZETEZOQlFWTXNjVUpCUVhGQ0xFTkJRVU1zU1VGQlNTeEZRVUZGTzBOQlEzQkRMRkZCUVZFc1NVRkJTU3hEUVVGRExGZEJRVmM3UlVGRGRrSXNTMEZCU3l4UFFVRlBPMGRCUTFnc1QwRkJUeXhWUVVGVkxFZEJRVWNzUlVGQlJTeExRVUZMTEVWQlFVVXNTMEZCU3l4RlFVRkZPMGxCUTI1RExFOUJRVThzUzBGQlN5eExRVUZMTEVsQlFVa3NSMEZCUnp0TFFVTjJRaXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXp0TFFVTnFRaXhIUVVGSE8wdEJRMGdzUzBGQlN6dExRVU5NTEVkQlFVYzdTMEZEU0N4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ6dExRVU5hTEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRE8wdEJRMnBDTEVkQlFVYzdTMEZEU0N4TlFVRk5MRU5CUVVNc1MwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF6dExRVU51UWl4SlFVRkpPMHRCUTBvc1RVRkJUU3hEUVVGRExFdEJRVXNzUlVGQlJTeEpRVUZKTEVOQlFVTTdTMEZEYmtJc1EwRkJReXhKUVVGSkxFTkJRVU1zUlVGQlJTeERRVUZETEVOQlFVTTdTVUZEV0N4RFFVRkRPenRGUVVWSUxFdEJRVXNzVTBGQlV6dEhRVU5pTEU5QlFVOHNWVUZCVlN4SFFVRkhMRVZCUVVVc1MwRkJTeXhGUVVGRk8wbEJRelZDTEU5QlFVOHNTMEZCU3l4TFFVRkxMRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zUjBGQlJ5eEZRVUZGTEVsQlFVa3NRMEZCUXl4SFFVRkhPMHRCUXpORExFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVXNTVUZCU1N4RFFVRkRPMHRCUTJwQ0xFdEJRVXM3UzBGRFRDeE5RVUZOTEVOQlFVTXNTMEZCU3l4RlFVRkZMRWxCUVVrc1EwRkJRenRMUVVOdVFpeERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRenRKUVVOWUxFTkJRVU03TzBWQlJVZzdSMEZEUXl4UFFVRlBMRlZCUVZVc1IwRkJSeXhGUVVGRkxFdEJRVXNzUlVGQlJUdEpRVU0xUWl4UFFVRlBMRXRCUVVzc1MwRkJTeXhKUVVGSkxFZEJRVWNzVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSenRMUVVNelF5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1EwRkJRenRMUVVOcVFpeEhRVUZITzB0QlEwZ3NUVUZCVFN4RFFVRkRMRXRCUVVzc1JVRkJSU3hKUVVGSkxFTkJRVU03UzBGRGJrSXNRMEZCUXl4SlFVRkpMRU5CUVVNc1JVRkJSU3hEUVVGRExFTkJRVU03U1VGRFdDeERRVUZETzBWQlEwZzdRMEZEUkRzN1FVRkZSQ3hUUVVGVExHOUNRVUZ2UWl4RFFVRkRMRWxCUVVrc1JVRkJSVHREUVVOdVF5eEpRVUZKTEUxQlFVMHNRMEZCUXpzN1EwRkZXQ3hSUVVGUkxFbEJRVWtzUTBGQlF5eFhRVUZYTzBWQlEzWkNMRXRCUVVzc1QwRkJUenRIUVVOWUxFOUJRVThzVlVGQlZTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMRmRCUVZjc1JVRkJSVHRKUVVONlF5eE5RVUZOTEVkQlFVY3NXVUZCV1N4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6czdTVUZGYUVNc1IwRkJSeXhIUVVGSExFZEJRVWNzUTBGQlF5eFBRVUZQTEVOQlFVTXNWVUZCVlN4RlFVRkZMRVZCUVVVc1EwRkJReXhEUVVGRE96dEpRVVZzUXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hGUVVGRk8wdEJRMW9zVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJRenRMUVVONlFpeFBRVUZQTzB0QlExQTdPMGxCUlVRc1NVRkJTU3hYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEV0QlFVc3NVMEZCVXl4RlFVRkZPMHRCUTI1RExGZEJRVmNzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4RlFVRkZMRU5CUVVNN1MwRkRkRUk3TzBsQlJVUXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJRenRKUVVOd1F5eERRVUZET3p0RlFVVklMRXRCUVVzc1UwRkJVenRIUVVOaUxFOUJRVThzVlVGQlZTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMRmRCUVZjc1JVRkJSVHRKUVVONlF5eE5RVUZOTEVkQlFVY3NVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF6dEpRVU0zUWl4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExFOUJRVThzUTBGQlF5eFBRVUZQTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVNN08wbEJSUzlDTEVsQlFVa3NRMEZCUXl4TlFVRk5MRVZCUVVVN1MwRkRXaXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkRPMHRCUTNwQ0xFOUJRVTg3UzBGRFVDeE5RVUZOTEVsQlFVa3NWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExGTkJRVk1zUlVGQlJUdExRVU14UXl4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXp0TFFVTXpRaXhQUVVGUE8wdEJRMUE3TzBsQlJVUXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhIUVVGSExFVkJRVVVzUTBGQlF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFdEJRVXNzUTBGQlF5eERRVUZETzBsQlEzUkVMRU5CUVVNN08wVkJSVWc3UjBGRFF5eFBRVUZQTEZWQlFWVXNSMEZCUnl4RlFVRkZMRXRCUVVzc1JVRkJSU3hYUVVGWExFVkJRVVU3U1VGRGVrTXNTVUZCU1N4WFFVRlhMRU5CUVVNc1IwRkJSeXhEUVVGRExFdEJRVXNzVTBGQlV5eEZRVUZGTzB0QlEyNURMRmRCUVZjc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eExRVUZMTEVOQlFVTTdTMEZEZWtJc1QwRkJUenRMUVVOUU96dEpRVVZFTEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhGUVVGRkxFTkJRVU1zVFVGQlRTeERRVUZETEZkQlFWY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1JVRkJSU3hMUVVGTExFTkJRVU1zUTBGQlF6dEpRVU4wUkN4RFFVRkRPMFZCUTBnN1EwRkRSRHM3UVVGRlJDeFRRVUZUTEUxQlFVMHNRMEZCUXl4TFFVRkxMRVZCUVVVc1NVRkJTU3hGUVVGRk8wTkJRelZDTEVsQlFVa3NTVUZCU1N4RFFVRkRMRTFCUVUwc1JVRkJSVHRGUVVOb1FpeFBRVUZQTEVsQlFVa3NRMEZCUXl4TlFVRk5MRWRCUVVjc1pVRkJaU3hEUVVGRExFdEJRVXNzUTBGQlF5eEhRVUZITEd0Q1FVRnJRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzBWQlEzaEZPenREUVVWRUxFOUJRVThzUzBGQlN5eERRVUZETzBOQlEySTdPMEZCUlVRc1UwRkJVeXhWUVVGVkxFTkJRVU1zUzBGQlN5eEZRVUZGTzBOQlF6RkNMRWxCUVVrc1MwRkJTeXhEUVVGRExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0RlFVTjZRaXhQUVVGUExFdEJRVXNzUTBGQlF5eEpRVUZKTEVWQlFVVXNRMEZCUXp0RlFVTndRaXhOUVVGTkxFbEJRVWtzVDBGQlR5eExRVUZMTEV0QlFVc3NVVUZCVVN4RlFVRkZPMFZCUTNKRExFOUJRVThzVlVGQlZTeERRVUZETEUxQlFVMHNRMEZCUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkRMRVZCUVVVc1EwRkJReXhGUVVGRk8wZEJRekZFTEU5QlFVOHNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhIUVVGSExFMUJRVTBzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXp0SFFVTTNRaXhEUVVGRExFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNSMEZCUnl4RlFVRkZPMGRCUTNKQ0xFOUJRVThzUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPMGRCUTJ4Q0xFTkJRVU1zUTBGQlF6dEZRVU5JT3p0RFFVVkVMRTlCUVU4c1MwRkJTeXhEUVVGRE8wTkJRMkk3TzBGQlJVUXNZMEZCYTBJc1ZVRkJWU3hIUVVGSExFVkJRVVU3UTBGRGFFTXNUMEZCVHl4SFFVRkhMRU5CUVVNc1MwRkJTeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4SlFVRkpMRVZCUVVVc1EwRkJRenREUVVNdlFpeERRVUZET3p0QlFVVkdMRmxCUVdkQ0xGVkJRVlVzUjBGQlJ5eEZRVUZGTEVsQlFVa3NSVUZCUlR0RFFVTndReXhKUVVGSkxFZEJRVWNzV1VGQldTeERRVUZETEVOQlFVTXNWMEZCVnl4RlFVRkZMRTFCUVUwc1EwRkJReXhGUVVGRkxFbEJRVWtzUTBGQlF5eERRVUZET3p0RFFVVnFSQ3hKUVVGSkxGTkJRVk1zUjBGQlJ5eHZRa0ZCYjBJc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlF6czdPenREUVVrelF5eEpRVUZKTEVkQlFVY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZET3p0RFFVVTVRaXhKUVVGSkxFOUJRVThzUjBGQlJ5eExRVUZMTEZGQlFWRXNSVUZCUlR0RlFVTTFRaXhQUVVGUExFZEJRVWNzUTBGQlF6dEZRVU5ZT3p0RFFVVkVMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVU1zU1VGQlNTeEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRmRCUVZjc1JVRkJSU3hGUVVGRkxFTkJRVU1zUTBGQlF6czdRMEZGTVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJUdEZRVU5VTEU5QlFVOHNSMEZCUnl4RFFVRkRPMFZCUTFnN08wTkJSVVFzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhQUVVGUExFTkJRVU1zVlVGQlZTeExRVUZMTEVWQlFVVTdSVUZEZGtNc1NVRkJTU3hMUVVGTExFZEJRVWNzUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRVZCUVVVc1IwRkJSeXhEUVVGRExFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRPenM3UlVGSGFrUXNTVUZCU1N4SFFVRkhMRWRCUVVjc1MwRkJTeXhEUVVGRExFdEJRVXNzUlVGQlJTeERRVUZETzBWQlEzaENMRWxCUVVrc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eE5RVUZOTEVkQlFVY3NRMEZCUXl4SFFVRkhMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRPenM3TzBWQlNYcEVMRWRCUVVjc1IwRkJSeXhIUVVGSExFdEJRVXNzVTBGQlV5eEhRVUZITEVsQlFVa3NSMEZCUnl4clFrRkJhMElzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXpzN1JVRkZla1FzVTBGQlV5eERRVUZETEd0Q1FVRnJRaXhEUVVGRExFZEJRVWNzUTBGQlF5eEZRVUZGTEVkQlFVY3NSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJRenRGUVVNM1F5eERRVUZETEVOQlFVTTdPME5CUlVnc1QwRkJUeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eFZRVUZWTEUxQlFVMHNSVUZCUlN4SFFVRkhMRVZCUVVVN1JVRkROVVFzU1VGQlNTeEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGRE8wVkJRMjVDTEVsQlFVa3NUMEZCVHl4RFFVRkRMRWRCUVVjc1EwRkJReXhKUVVGSkxFOUJRVThzUjBGQlJ5eExRVUZMTEZGQlFWRXNTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVTdPMGRCUlc1RkxFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNSMEZCUnl4VlFVRlZMRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UjBGRE9VSXNUVUZCVFR0SFFVTk9MRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVTTdSMEZEYkVJN08wVkJSVVFzVDBGQlR5eE5RVUZOTEVOQlFVTTdSVUZEWkN4RlFVRkZMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXp0RFFVTjRRaXhEUVVGRE96dEJRVVZHTEdkQ1FVRnZRaXhWUVVGVkxFZEJRVWNzUlVGQlJTeEpRVUZKTEVWQlFVVTdRMEZEZUVNc1NVRkJTU3hSUVVGUkxFZEJRVWM3UlVGRFpDeE5RVUZOTEVWQlFVVXNTVUZCU1R0RlFVTmFMRTFCUVUwc1JVRkJSU3hKUVVGSk8wVkJRMW9zVjBGQlZ5eEZRVUZGTEUxQlFVMDdSVUZEYmtJc1EwRkJRenM3UTBGRlJpeEpRVUZKTEVkQlFVY3NXVUZCV1N4RFFVRkRMRkZCUVZFc1JVRkJSU3hKUVVGSkxFTkJRVU1zUTBGQlF6czdRMEZGY0VNc1NVRkJTU3hUUVVGVExFZEJRVWNzY1VKQlFYRkNMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU03TzBOQlJUVkRMRTlCUVU4c1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1NVRkJTU3hGUVVGRkxFTkJRVU1zUjBGQlJ5eERRVUZETEZWQlFWVXNSMEZCUnl4RlFVRkZPMFZCUTNaRUxFbEJRVWtzUjBGQlJ5eEhRVUZITEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRenM3UlVGRmJrSXNTVUZCU1N4SFFVRkhMRXRCUVVzc1UwRkJVeXhGUVVGRk8wZEJRM1JDTEU5QlFVOHNSVUZCUlN4RFFVRkRPMGRCUTFZN08wVkJSVVFzU1VGQlNTeEhRVUZITEV0QlFVc3NTVUZCU1N4RlFVRkZPMGRCUTJwQ0xFOUJRVThzVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRIUVVONlFqczdSVUZGUkN4SlFVRkpMRXRCUVVzc1EwRkJReXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETEVWQlFVVTdSMEZEZGtJc1NVRkJTU3hOUVVGTkxFZEJRVWNzUlVGQlJTeERRVUZET3p0SFFVVm9RaXhIUVVGSExFTkJRVU1zUzBGQlN5eEZRVUZGTEVOQlFVTXNUMEZCVHl4RFFVRkRMRlZCUVZVc1NVRkJTU3hGUVVGRk8wbEJRMjVETEVsQlFVa3NTVUZCU1N4TFFVRkxMRk5CUVZNc1JVRkJSVHRMUVVOMlFpeFBRVUZQTzB0QlExQTdPMGxCUlVRc1RVRkJUU3hEUVVGRExFbEJRVWtzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RlFVRkZMRWxCUVVrc1JVRkJSU3hOUVVGTkxFTkJRVU1zVFVGQlRTeERRVUZETEVOQlFVTXNRMEZCUXp0SlFVTnFSQ3hEUVVGRExFTkJRVU03TzBkQlJVZ3NUMEZCVHl4TlFVRk5MRU5CUVVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZETzBkQlEzaENPenRGUVVWRUxFOUJRVThzVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFZEJRVWNzVFVGQlRTeERRVUZETEVkQlFVY3NSVUZCUlN4SlFVRkpMRU5CUVVNc1EwRkJRenRGUVVOdVJDeERRVUZETEVOQlFVTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1EwRkJReXhGUVVGRk8wVkJRM1JDTEU5QlFVOHNRMEZCUXl4RFFVRkRMRTFCUVUwc1IwRkJSeXhEUVVGRExFTkJRVU03UlVGRGNFSXNRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVTTdRMEZEYkVJc1EwRkJRenM3T3pzN096czdRVU0xVFVZN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRWEZDUVN4QlFVVkJOa1FzU1VGQlNYZERMRTlCUVVzc1EwRkJRVHM3UVVGRlZDeEJRVU5CTEVGQlJVRjRReXhKUVVGSkxGRkJRVkVzUjBGQlJ5eERRVUZETEVOQlFVRTdRVUZEYUVKR0xFbEJRVTBzVjBGQlZ5eEhRVUZITEVOQlFVTXNRMEZCUXl4RFFVRkJPenRCUVVWMFFpeFRRVUZUTEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1VVRkJVU3hGUVVGRkxHZENRVUZuUWl4RlFVRkZPMFZCUTI1RVFTeEpRVUZOTEUxQlFVMHNSMEZCUnl4UlFVRlJMRWRCUVVjc1EwRkJReXhGUVVGRkxGRkJRVkVzUTBGQlF5eERRVUZCTzBWQlEzUkRSU3hKUVVGSkxFZEJRVWNzUTBGQlFUczdSVUZGVUN4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFZEJRVWNzUlVGQlJUdEpRVU5tTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc2JVVkJRVzFGTEVOQlFVTXNRMEZCUVR0SFFVTnVSanM3UlVGRlJDeE5RVUZOTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhWUVVGVkxFVkJRVVVzUlVGQlJUdEpRVU01UWl4UFFVRlBMRlZCUVZVc1VVRkJVU3hGUVVGRk8wMUJRM3BDTEZGQlFWRXNRMEZCUXp0UlFVTlFMRTFCUVUwc1JVRkJSU3hIUVVGSE8xRkJRMWdzUlVGQlJTeEZRVUZGTEVsQlFVazdVVUZEVWl4VlFVRlZMRVZCUVVVc1NVRkJTVHRSUVVOb1FpeEpRVUZKTEVWQlFVVXNVVUZCVVR0UFFVTm1MRU5CUVVNc1EwRkJRVHROUVVOR0xFOUJRVThzVFVGQlRTeERRVUZETEVWQlFVVXNRMEZCUXl4RFFVRkJPMHRCUTJ4Q08wZEJRMFlzUTBGQlF5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPenRGUVVWV1JpeEpRVUZOTEUxQlFVMHNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExGRkJRVkVzUTBGQlF5eERRVUZCTzBWQlF5OURMRWxCUVVrN1NVRkRSaXhIUVVGSExFZEJRVWNzUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVUU3UjBGRE9VSTdSVUZEUkN4UFFVRlBMRWRCUVVjc1JVRkJSVHRKUVVOV0xFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNPRVJCUVRoRU8xRkJRM2hGTEUxQlFVMHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHRIUVVOb1FqdEZRVU5FTEVkQlFVY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hIUVVGSExFMUJRVTBzUTBGQlFUdEZRVU0xUWl4TlFVRk5MRU5CUVVNc1NVRkJTU3hIUVVGSExHbENRVUZwUWl4RFFVRkJPMFZCUXk5Q0xFMUJRVTBzUTBGQlF5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGQk96czdSVUZITTBJc1RVRkJUU3hEUVVGRExFOUJRVThzUjBGQlJ5eERRVUZETEZWQlFWVXNSVUZCUlN4RlFVRkZPMGxCUXpsQ0xFOUJRVThzVlVGQlZTeEhRVUZITEVWQlFVVTdUVUZEY0VJc1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5d3dSRUZCTUVRc1JVRkJSU3hIUVVGSExFTkJRVU1zUTBGQlFUdE5RVU01UlN4UlFVRlJMRU5CUVVNN1VVRkRVQ3hOUVVGTkxFVkJRVVVzVjBGQlZ6dFJRVU51UWl4RlFVRkZMRVZCUVVVc1MwRkJTenRSUVVOVUxGVkJRVlVzUlVGQlJTeEZRVUZGTzFGQlEyUXNTVUZCU1N4RlFVRkZMRVZCUVVVN1QwRkRWQ3hEUVVGRExFTkJRVUU3VFVGRFJpeFBRVUZQTEUxQlFVMHNRMEZCUXl4RlFVRkZMRU5CUVVNc1EwRkJRVHRMUVVOc1FqdEhRVU5HTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRVHRGUVVOV1FTeEpRVUZOTEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc2IwSkJRVzlDTEVOQlFVTXNUVUZCVFN4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3UlVGRGNrUXNTVUZCU1N4RFFVRkRMRmxCUVZrc1EwRkJReXhOUVVGTkxFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdRMEZEYUVNN08wRkJSVVFzVTBGQlV5eEpRVUZKTEVWQlFVVXNUVUZCVFN4RlFVRkZMRkZCUVZFc1JVRkJSU3huUWtGQlowSXNSVUZCUlR0RlFVTnFSRUVzU1VGQlRTeEhRVUZITEVkQlFVY3NTVUZCU1N4alFVRmpMRVZCUVVVc1EwRkJRVHRGUVVOb1F5eEhRVUZITEVOQlFVTXNXVUZCV1N4SFFVRkhMRTFCUVUwc1EwRkJReXhKUVVGSkxFTkJRVUU3UlVGRE9VSXNSMEZCUnl4RFFVRkRMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zVFVGQlRTeEZRVUZGTEUxQlFVMHNRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVUU3T3p0RlFVZDZReXhKUVVGSkxFMUJRVTBzUTBGQlF5eGxRVUZsTEV0QlFVc3NTVUZCU1N4RlFVRkZPMGxCUTI1RExFZEJRVWNzUTBGQlF5eGxRVUZsTEVkQlFVY3NTVUZCU1N4RFFVRkJPMGRCUXpOQ096dEZRVVZFUVN4SlFVRk5MRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVU1zVDBGQlR5eEpRVUZKTEVWQlFVVXNRMEZCUVR0RlFVTndReXhMUVVGTFFTeEpRVUZOTEVOQlFVTXNTVUZCU1N4UFFVRlBMRVZCUVVVN1NVRkRka0lzUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFTkJRVU1zUlVGQlJTeFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRIUVVOd1F6czdSVUZGUkN4SFFVRkhMRU5CUVVNc1RVRkJUU3hIUVVGSExGVkJRVlVzUjBGQlJ5eEZRVUZGTzBsQlF6RkNMRkZCUVZFc1EwRkJRenROUVVOUUxFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTXNUVUZCVFR0TlFVTnNRaXhGUVVGRkxFVkJRVVVzUjBGQlJ5eERRVUZETEUxQlFVMHNTVUZCU1N4SFFVRkhMRWxCUVVrc1IwRkJSeXhEUVVGRExFMUJRVTBzUjBGQlJ5eEhRVUZITzAxQlEzcERMRlZCUVZVc1JVRkJSU3hIUVVGSExFTkJRVU1zVlVGQlZUdE5RVU14UWl4SlFVRkpMRVZCUVVVc1IwRkJSeXhEUVVGRExGRkJRVkU3VFVGRGJFSXNUMEZCVHl4RlFVRkZMRWRCUVVjc1EwRkJReXh4UWtGQmNVSXNSVUZCUlN4RFFVRkRMRXRCUVVzc1EwRkJReXhKUVVGSkxFTkJRVU03VTBGRE4wTXNUVUZCVFN4RFFVRkRMRlZCUVZVc1IwRkJSeXhGUVVGRkxGTkJRVk1zUlVGQlJUdFZRVU5vUTBFc1NVRkJUU3hUUVVGVExFZEJRVWNzVTBGQlV5eERRVUZETEV0QlFVc3NRMEZCUXl4WlFVRlpMRU5CUVVNc1EwRkJRVHRWUVVNdlF5eEpRVUZKTEZOQlFWTXNSVUZCUlR0WlFVTmlMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNSMEZCUnl4VFFVRlRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3VjBGRGFrTTdWVUZEUkN4UFFVRlBMRWRCUVVjN1UwRkRXQ3hGUVVGRkxFVkJRVVVzUTBGQlF6dExRVU5VTEVOQlFVTXNRMEZCUVR0SFFVTklMRU5CUVVFN08wVkJSVVFzU1VGQlNTeG5Ra0ZCWjBJc1JVRkJSVHRKUVVOd1FpeEhRVUZITEVOQlFVTXNWVUZCVlN4SFFVRkhMRlZCUVZVc1EwRkJReXhGUVVGRk8wMUJRelZDTEdkQ1FVRm5RaXhEUVVGRE8xRkJRMllzVlVGQlZTeEZRVUZGTEVkQlFVY3NRMEZCUXl4VlFVRlZPMUZCUXpGQ0xFMUJRVTBzUlVGQlJTeEhRVUZITEVOQlFVTXNUVUZCVFR0UlFVTnNRaXhOUVVGTkxFVkJRVVVzUTBGQlF5eERRVUZETEUxQlFVMDdVVUZEYUVJc1MwRkJTeXhGUVVGRkxFTkJRVU1zUTBGQlF5eExRVUZMTzFGQlEyUXNWVUZCVlN4RlFVRkZMRWRCUVVjc1EwRkJReXhWUVVGVk8xRkJRekZDTEU5QlFVOHNSVUZCUlN4SFFVRkhMRU5CUVVNc2NVSkJRWEZDTEVWQlFVVXNRMEZCUXl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRE8xZEJRemRETEUxQlFVMHNRMEZCUXl4VlFVRlZMRWRCUVVjc1JVRkJSU3hUUVVGVExFVkJRVVU3V1VGRGFFTkJMRWxCUVUwc1UwRkJVeXhIUVVGSExGTkJRVk1zUTBGQlF5eExRVUZMTEVOQlFVTXNXVUZCV1N4RFFVRkRMRU5CUVVFN1dVRkRMME1zU1VGQlNTeFRRVUZUTEVWQlFVVTdZMEZEWWl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8yRkJRMnBETzFsQlEwUXNUMEZCVHl4SFFVRkhPMWRCUTFnc1JVRkJSU3hGUVVGRkxFTkJRVU03VDBGRFZDeERRVUZETEVOQlFVRTdTMEZEU0N4RFFVRkJPMGRCUTBZN08wVkJSVVFzUjBGQlJ5eERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRlZMRWRCUVVjc1JVRkJSVHRKUVVNelFpeFBRVUZQTEVOQlFVTXNTMEZCU3l4RFFVRkRMSGRFUVVGM1JDeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkJPMGxCUXpWRkxGRkJRVkVzUTBGQlF6dE5RVU5RTEUxQlFVMHNSVUZCUlN4WFFVRlhPMDFCUTI1Q0xFVkJRVVVzUlVGQlJTeExRVUZMTzAxQlExUXNWVUZCVlN4RlFVRkZMRVZCUVVVN1RVRkRaQ3hKUVVGSkxFVkJRVVVzUlVGQlJUdExRVU5VTEVOQlFVTXNRMEZCUVR0SFFVTklMRU5CUVVFN08wVkJSVVFzUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZCTzBOQlF6bENPenRCUVVWRVFTeEpRVUZOTEUxQlFVMHNSMEZCUnpzN096czdPenM3T3pzN08wVkJXV0lzVVVGQlVTeEZRVUZGTEZWQlFWVXNTMEZCU3l4RlFVRkZMRlZCUVZVc1JVRkJSVHRKUVVOeVF5eEpRVUZKTEU5QlFVOHNTMEZCU3l4TFFVRkxMRkZCUVZFc1JVRkJSVHROUVVNM1FpeEpRVUZKTzFGQlEwWXNTMEZCU3l4SFFVRkhMRWxCUVVrc1EwRkJReXhMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdUMEZETVVJN1RVRkRSQ3hQUVVGUExFTkJRVU1zUlVGQlJUdFJRVU5TTEUxQlFVMDdUMEZEVUR0TFFVTkdPMGxCUTBRc1NVRkJTU3hQUVVGUExFdEJRVXNzUzBGQlN5eFJRVUZSTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1IwRkJSeXhGUVVGRk8wMUJRek5ETEU5QlFVOHNUMEZCVHl4RFFVRkRMRXRCUVVzN1VVRkRiRUlzYlVWQlFXMUZMRU5CUVVNN1MwRkRka1U3TzBsQlJVUkJMRWxCUVUwc1RVRkJUU3hIUVVGSExFbEJRVWtzUTBGQlF5eE5RVUZOTEVOQlFVRTdTVUZETVVKQkxFbEJRVTBzVFVGQlRTeEhRVUZITEV0QlFVc3NRMEZCUXl4TlFVRk5MRWxCUVVrc1MwRkJTeXhEUVVGQk8wbEJRM0JEUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhKUVVGSkxHTkJRV01zUlVGQlJTeERRVUZCTzBsQlEyaERMRWRCUVVjc1EwRkJReXhKUVVGSkxFTkJRVU1zVFVGQlRTeEZRVUZGTEV0QlFVc3NRMEZCUXl4SFFVRkhMRVZCUVVVc1NVRkJTU3hEUVVGRExFTkJRVUU3U1VGRGFrTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1IwRkJSeXhaUVVGWk8wMUJRM1pDTEUxQlFVMHNRMEZCUXl4bFFVRmxMRU5CUVVNc1ZVRkJWU3hGUVVGRkxFbEJRVWtzUTBGQlF5eFpRVUZaTEVOQlFVTXNRMEZCUVR0TFFVTjBSQ3hEUVVGQk8wbEJRMFFzUjBGQlJ5eERRVUZETEU5QlFVOHNSMEZCUnl4VlFVRlZMRXRCUVVzc1JVRkJSVHROUVVNM1FpeFBRVUZQTEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc09FTkJRVGhETEVWQlFVVXNTMEZCU3l4RFFVRkRPenM3T3p0TFFVczFSU3hEUVVGQk8wbEJRMFFzUjBGQlJ5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkJPMGRCUTFnN096czdPenM3T3pzN096czdPenM3T3p0RlFXdENSQ3hMUVVGTExFVkJRVVVzVlVGQlZTeFBRVUZQTEVWQlFVVXNWVUZCVlN4RlFVRkZMR3RDUVVGclFpeEZRVUZGTzBsQlEzaEVRU3hKUVVGTkxHTkJRV01zUjBGQlJ5eExRVUZMTEVOQlFVRTdTVUZETlVKQkxFbEJRVTBzV1VGQldTeEhRVUZITEUxQlFVMHNRMEZCUVR0SlFVTXpRa0VzU1VGQlRTeFpRVUZaTEVkQlFVY3NUVUZCVFN4RFFVRkJPenRKUVVVelFrRXNTVUZCVFN4aFFVRmhMRWRCUVVjc1EwRkJReXhMUVVGTExFVkJRVVVzVFVGQlRTeEZRVUZGTEV0QlFVc3NSVUZCUlN4UlFVRlJMRVZCUVVVc1RVRkJUU3hGUVVGRkxFOUJRVThzUTBGQlF5eERRVUZCTzBsQlEzWkZRU3hKUVVGTkxGZEJRVmNzUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlN4VFFVRlRMRVZCUVVVc1lVRkJZU3hGUVVGRkxGVkJRVlVzUTBGQlF5eERRVUZCTzBsQlEyeEZRU3hKUVVGTkxGZEJRVmNzUjBGQlJ5eERRVUZETEUxQlFVMHNSVUZCUlN4TlFVRk5MRVZCUVVVc1QwRkJUeXhGUVVGRkxHRkJRV0VzUTBGQlF5eERRVUZCT3pzN1NVRkhOVVJCTEVsQlFVMHNUVUZCVFN4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVUU3TzBsQlJURkNRU3hKUVVGTkxFMUJRVTBzUjBGQlJ6QkRMRTlCUVVzc1EwRkJReXhOUVVGTkxFTkJRVU1zUlVGQlJTeEZRVUZGTEU5QlFVOHNRMEZCUXl4RFFVRkJPenM3U1VGSGVFTXNTVUZCU1N4UFFVRlBMRTFCUVUwc1EwRkJReXhOUVVGTkxFdEJRVXNzVjBGQlZ5eEZRVUZGTzAxQlEzaERMRTFCUVUwc1EwRkJReXhOUVVGTkxFZEJRVWNzWTBGQll5eERRVUZCTzAxQlF6bENMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zSzBSQlFTdEVPMVZCUTNoRkxHdENRVUZyUWl4SFFVRkhMRTFCUVUwc1EwRkJReXhOUVVGTkxFZEJRVWNzU1VGQlNTeERRVUZETEVOQlFVRTdTMEZETDBNN1UwRkRTU3hKUVVGSkxHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hIUVVGSExFVkJRVVVzUTBGQlF6dFRRVU01UXl4WFFVRlhMRVZCUVVVc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eEZRVUZGTzAxQlF6RkNMRTlCUVU4c1QwRkJUeXhEUVVGRExFdEJRVXNzUTBGQlF5d3JRa0ZCSzBJN1ZVRkRhRVFzVFVGQlRTeERRVUZETEUxQlFVMDdWVUZEWWl4M1EwRkJkME03VlVGRGVFTXNZVUZCWVN4SFFVRkhMRWRCUVVjc1EwRkJRenRMUVVONlFqczdPMGxCUjBRc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVWQlFVVTdUVUZEWml4UFFVRlBMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zTUVSQlFUQkVMRU5CUVVNN1MwRkRha1k3T3p0SlFVZEVMRWxCUVVrc1RVRkJUU3hEUVVGRExFMUJRVTBzUTBGQlF5eFhRVUZYTEVWQlFVVXNTMEZCU3l4TFFVRkxMRVZCUVVVN1RVRkRla040UXl4SlFVRkpMRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZCTzAxQlEzUkNMRWxCUVVsM1F5eFBRVUZMTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRk8xRkJRemRDTEVsQlFVa3NSMEZCUjBNc1QwRkJSU3hEUVVGRExGTkJRVk1zUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0UFFVTXhRanROUVVORWVrTXNTVUZCU1N4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlFUdE5RVU53UWtFc1NVRkJTU3hQUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJRVHROUVVNNVFpeFBRVUZQTEVsQlFVa3NRMEZCUXl4RFFVRkRMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMDFCUTNaRFFTeEpRVUZKTEVsQlFVa3NSMEZCUnl4SFFVRkhMRU5CUVVNc1RVRkJUU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZCTzAxQlF6bENMRWxCUVVrc1NVRkJTU3hKUVVGSkxFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVTXNTMEZCU3l4SFFVRkhMRVZCUVVVN1VVRkRNMElzU1VGQlNTeEhRVUZITEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3VDBGRGRFSTdUVUZEUkN4SFFVRkhMRWRCUVVjc1IwRkJSeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZETEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVFN1RVRkRMMElzU1VGQlNTeEpRVUZKTEVWQlFVVTdVVUZEVWl4SFFVRkhMRWxCUVVrc1EwRkJReXhOUVVGTkxFTkJRVU1zUjBGQlJ5eERRVUZETEU5QlFVOHNRMEZCUXl4SFFVRkhMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVkQlFVY3NSMEZCUnl4RFFVRkRMRWRCUVVjc1NVRkJTU3hEUVVGQk8wOUJRekZFTzAxQlEwUXNSMEZCUnl4SlFVRkpMRWRCUVVjc1IwRkJSeXhKUVVGSkxFTkJRVUU3VFVGRGFrSXNUVUZCVFN4RFFVRkRMRWRCUVVjc1IwRkJSeXhIUVVGSExFTkJRVUU3UzBGRGFrSTdPenRKUVVkRUxFbEJRVWtzVDBGQlR5eE5RVUZOTEVOQlFVTXNTVUZCU1N4TFFVRkxMRmRCUVZjc1JVRkJSVHROUVVOMFF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4SFFVRkhMRmxCUVZrc1EwRkJRVHRMUVVNelFqdFRRVU5KTEVsQlFVa3NWMEZCVnl4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGRExFMUJRVTBzUTBGQlF5eEpRVUZKTEVkQlFVY3NSVUZCUlN4RFFVRkRMRU5CUVVNc1YwRkJWeXhGUVVGRkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNSVUZCUlR0TlFVTnlSU3hQUVVGUExFOUJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNOa0pCUVRaQ08xVkJRemxETEUxQlFVMHNRMEZCUXl4SlFVRkpPMVZCUTFnc2QwTkJRWGRETzFWQlEzaERMRmRCUVZjc1IwRkJSeXhIUVVGSExFTkJRVU03UzBGRGRrSTdPenRKUVVkRUxFbEJRVWtzVDBGQlR5eE5RVUZOTEVOQlFVTXNTVUZCU1N4TFFVRkxMRmRCUVZjc1JVRkJSVHROUVVOMFF5eE5RVUZOTEVOQlFVTXNTVUZCU1N4SFFVRkhMRmxCUVZrc1EwRkJRVHROUVVNeFFpeFBRVUZQTEVOQlFVTXNTVUZCU1N4RFFVRkRMRFpFUVVFMlJEdFZRVU4wUlN4clFrRkJhMElzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4SFFVRkhMRXRCUVVzc1EwRkJReXhEUVVGQk8wdEJRemxETzFOQlEwa3NTVUZCU1N4WFFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zVFVGQlRTeERRVUZETEVsQlFVa3NSMEZCUnl4RlFVRkZMRU5CUVVNc1EwRkJReXhYUVVGWExFVkJRVVVzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUXl4RlFVRkZPMDFCUTNKRkxFOUJRVThzVDBGQlR5eERRVUZETEV0QlFVc3NRMEZCUXl3MlFrRkJOa0k3V1VGRE5VTXNUVUZCVFN4RFFVRkRMRWxCUVVrN1dVRkRXQ3gzUTBGQmQwTTdXVUZEZUVNc1YwRkJWeXhIUVVGSExFZEJRVWNzUTBGQlF6dExRVU42UWpzN08wbEJSMFFzVFVGQlRTeERRVUZETEU5QlFVOHNSMEZCUnl4TlFVRk5MRU5CUVVNc1QwRkJUeXhKUVVGSkxFVkJRVVVzUTBGQlFUdEpRVU55UXl4SlFVRkpMRU5CUVVOM1F5eFBRVUZMTEVOQlFVTXNZVUZCWVN4RFFVRkRMRTFCUVUwc1EwRkJReXhQUVVGUExFTkJRVU1zUlVGQlJUdE5RVU40UXl4UFFVRlBMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zYzBSQlFYTkVMRU5CUVVNN1MwRkROMFU3T3p0SlFVZEVMRTFCUVUwc1EwRkJReXhQUVVGUExFZEJRVWNzVVVGQlVTeERRVUZETEUxQlFVMHNRMEZCUXl4UFFVRlBMRVZCUVVVc1JVRkJSU3hEUVVGRExFbEJRVWtzU1VGQlNTeERRVUZCT3p0SlFVVnlSREZETEVsQlFVMHNVMEZCVXl4SFFVRkhMRU5CUVVNc1RVRkJUU3hGUVVGRkxGVkJRVlVzUjBGQlJ5eEZRVUZGTzAxQlEzaERMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zVlVGQlZTeEZRVUZGTEVkQlFVY3NRMEZCUXl4RFFVRkJPMHRCUTNoRExFTkJRVU1zUTBGQlFUdEpRVU5HTEVsQlFVa3NhMEpCUVd0Q0xFVkJRVVU3VFVGRGRFSXNVMEZCVXl4RFFVRkRMRWxCUVVrc1EwRkJReXhWUVVGVkxFZEJRVWNzUlVGQlJUczdVVUZGTlVJc1RVRkJUU3hEUVVGRExHVkJRV1VzUTBGQlF5eHJRa0ZCYTBJc1JVRkJSU3hIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdUMEZEZEVRc1EwRkJReXhEUVVGQk8wdEJRMGc3TzBsQlJVUXNTVUZCU1N4TlFVRk5MRU5CUVVNc1NVRkJTU3hMUVVGTExFOUJRVThzUlVGQlJUdE5RVU16UWl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUlVGQlJTeFRRVUZUTEVOQlFVTXNRMEZCUVR0TFFVTTVRanRUUVVOSk8wMUJRMGdzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4SlFVRkpMRVZCUVVVc1UwRkJVeXhEUVVGRExFTkJRVUU3UzBGRE5VSTdSMEZEUmpzN1EwRkZSaXhEUVVGQk96dEJRVVZFUVN4SlFVRk5kME1zVFVGQlNTeEhRVUZITzBWQlExZ3NUVUZCVFN4RlFVRkZMRU5CUVVNN1NVRkRVQ3hKUVVGSkxFVkJRVVVzVlVGQlZUdEpRVU5vUWl4SlFVRkpMRVZCUVVVc1EwRkJReXhSUVVGUkxFVkJRVVVzVlVGQlZTeERRVUZETzBkQlF6ZENMRVZCUVVVN1NVRkRSQ3hKUVVGSkxFVkJRVVVzVDBGQlR6dEpRVU5pTEVsQlFVa3NSVUZCUlN4RFFVRkRMRkZCUVZFc1JVRkJSU3hWUVVGVkxFVkJRVVVzVlVGQlZTeERRVUZETzBkQlEzcERMRU5CUVVNN1EwRkRTQ3hEUVVGQk96dEJRVVZFTEdWQlFXVTdSVUZEWWl4SlFVRkpMRVZCUVVVc1ZVRkJWU3hKUVVGSkxFVkJRVVU3U1VGRGNFSkZMRTlCUVVzc1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZCTzBsQlEyeENMRWxCUVVrc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4UlFVRlJMRVZCUVVVc1RVRkJUU3hGUVVGRlJpeE5RVUZKTEVOQlFVTXNRMEZCUVR0SFFVTXZRenREUVVOR0xFTkJRVUU3TzBGRGRGVkVPenM3T3pzN096czdPenM3T3pzN096czdRVUZyUWtFN096czdPenM3T3pzN096czdPenRCUVdsQ1FYaERMRWxCUVUwc2FVSkJRV2xDTEVkQlFVY3NkVUpCUVhWQ0xFTkJRVUU3TzBGQlJXcEVRU3hKUVVGTkxGTkJRVk1zUjBGQlJ6czdSVUZGYUVJc1UwRkJVeXhGUVVGRkxGVkJRVlVzVlVGQlZTeEZRVUZGT3p0SlFVVXZRaXhQUVVGUExFTkJRVU1zUjBGQlJ5eERRVUZETERaRFFVRTJReXhEUVVGRExFTkJRVUU3UjBGRE0wUTdPMFZCUlVRc1UwRkJVeXhGUVVGRkxGVkJRVlVzU1VGQlNTeEZRVUZGT3p0SlFVVjZRaXhKUVVGSkxFOUJRVThzU1VGQlNTeExRVUZMTEZGQlFWRXNTVUZCU1N4SlFVRkpMRXRCUVVzc1JVRkJSU3hKUVVGSkxGRkJRVkVzUTBGQlF5eFhRVUZYTEVWQlFVVTdUVUZEYmtWQkxFbEJRVTBzVTBGQlV5eEhRVUZITEU5QlFVOHNSVUZCUlN4RFFVRkJPMDFCUXpOQ0xGTkJRVk1zUTBGQlF5eExRVUZMTEVkQlFVY3NTVUZCU1N4RFFVRkJPenROUVVWMFFpeFRRVUZUTEVOQlFVTXNUVUZCVFN4RlFVRkZMRU5CUVVFN1RVRkRiRUlzVVVGQlVTeERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRVHM3TzAxQlJ6VkNMRk5CUVZNc1EwRkJReXhMUVVGTExFZEJRVWNzUlVGQlJTeERRVUZCTzAxQlEzQkNMRk5CUVZNc1EwRkJReXhKUVVGSkxFVkJRVVVzUTBGQlFUdExRVU5xUWp0VFFVTkpPMDFCUTBnc1QwRkJUeXhEUVVGRExFZEJRVWNzUTBGQlF5d3JRa0ZCSzBJc1EwRkJReXhEUVVGQk8wdEJRemRETzBkQlEwWTdPME5CUlVZc1EwRkJRVHM3UVVGRlJDeFRRVUZUTEU5QlFVOHNTVUZCU1R0RlFVTnNRa1VzU1VGQlNTeFRRVUZUTEVkQlFVY3NVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkJPMFZCUXpGRUxFbEJRVWtzUTBGQlF5eFRRVUZUTEVWQlFVVTdTVUZEWkN4VFFVRlRMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVR0SlFVTXpReXhUUVVGVExFTkJRVU1zV1VGQldTeERRVUZETEVsQlFVa3NSVUZCUlN4cFFrRkJhVUlzUTBGQlF5eERRVUZCTzBsQlF5OURMRk5CUVZNc1EwRkJReXhMUVVGTExFTkJRVU1zVDBGQlR5eEhRVUZITEcxRFFVRnRReXhEUVVGQk96dEpRVVUzUkN4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFRRVUZUTEVOQlFVTXNRMEZCUVR0SFFVTnlRenRGUVVORUxFOUJRVThzVTBGQlV6dERRVU5xUWpzN1FVRkZSRVlzU1VGQlRYZERMRTFCUVVrc1IwRkJSenRGUVVOWUxGTkJRVk1zUlVGQlJTeERRVUZETzBsQlExWXNTVUZCU1N4RlFVRkZMRmRCUVZjN1NVRkRha0lzU1VGQlNTeEZRVUZGTEVOQlFVTXNWVUZCVlN4RFFVRkRPMGRCUTI1Q0xFVkJRVVU3U1VGRFJDeEpRVUZKTEVWQlFVVXNWMEZCVnp0SlFVTnFRaXhKUVVGSkxFVkJRVVVzUTBGQlF5eFJRVUZSTEVOQlFVTTdSMEZEYWtJc1EwRkJRenREUVVOSUxFTkJRVUU3TzBGQlJVUXNhMEpCUVdVN1JVRkRZaXhKUVVGSkxFVkJRVVVzVlVGQlZTeEpRVUZKTEVWQlFVVTdTVUZEY0VJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RFFVRkRMRmRCUVZjc1JVRkJSU3hUUVVGVExFVkJRVVZCTEUxQlFVa3NRMEZCUXl4RFFVRkJPMGRCUTNKRU8wTkJRMFlzUTBGQlFUczdRVU14UmtRN096czdPenM3T3pzN096czdPenM3T3p0QlFXdENRU3hCUVVWQmVFTXNTVUZCVFRSRExFOUJRVXNzUjBGQlJ6czdPenM3UlVGTFdpeFBRVUZQTEVWQlFVVXNWVUZCVlN4SFFVRkhMRVZCUVVVN1NVRkRkRUlzVVVGQlVTeERRVUZETEVsQlFVa3NSMEZCUnl4SFFVRkhMRU5CUVVFN1IwRkRjRUk3TzBOQlJVWXNRMEZCUVRzN1FVRkZSRFZETEVsQlFVMTNReXhOUVVGSkxFZEJRVWM3UlVGRFdDeExRVUZMTEVWQlFVVXNRMEZCUXp0SlFVTk9MRWxCUVVrc1JVRkJSU3hUUVVGVE8wbEJRMllzU1VGQlNTeEZRVUZGTEVOQlFVTXNVVUZCVVN4RFFVRkRPMGRCUTJwQ0xFTkJRVU03UTBGRFNDeERRVUZCT3p0QlFVVkVMR3RDUVVGbE8wVkJRMklzU1VGQlNTeEZRVUZGTEZWQlFWVXNTVUZCU1N4RlFVRkZPMGxCUTNCQ0xFbEJRVWtzUTBGQlF5eHBRa0ZCYVVJc1EwRkJReXhQUVVGUExFVkJRVVZKTEU5QlFVc3NSVUZCUlVvc1RVRkJTU3hEUVVGRExFTkJRVUU3UjBGRE4wTTdRMEZEUml4RFFVRkJPenRCUXpGRFJEczdPenM3T3pzN096czdPenM3T3pzN08wRkJhMEpCZUVNc1NVRkJUVEJETEU5QlFVc3NSMEZCUnl4RlFVRkZMRU5CUVVFN1FVRkRhRUo0UXl4SlFVRkpMRkZCUVZFc1EwRkJRVHRCUVVOYVFTeEpRVUZKTEZOQlFWTXNRMEZCUVRzN1FVRkZZa1lzU1VGQlRTeGpRVUZqTEVkQlFVYzdSVUZEY2tJc1ZVRkJWU3hGUVVGRkxHVkJRV1U3UlVGRE0wSXNaMEpCUVdkQ0xFVkJRVVVzY1VKQlFYRkNPMFZCUTNaRExHRkJRV0VzUlVGQlJTeHJRa0ZCYTBJN1JVRkRha01zVjBGQlZ5eEZRVUZGTEdkQ1FVRm5RanRGUVVNM1FpeFpRVUZaTEVWQlFVVXNhVUpCUVdsQ08wTkJRMmhETEVOQlFVRTdPMEZCUlVRc1UwRkJVeXhaUVVGWkxFbEJRVWs3UlVGRGRrSkJMRWxCUVUwc1RVRkJUU3hIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVFN1JVRkROVU5CTEVsQlFVMHNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFTkJRVUU3UlVGRE1VSXNTMEZCUzBFc1NVRkJUU3hKUVVGSkxFbEJRVWtzWTBGQll5eEZRVUZGTzBsQlEycERMRWxCUVVrc1NVRkJTU3hKUVVGSkxFdEJRVXNzUlVGQlJUdE5RVU5xUWl4UlFVRlJMRWRCUVVjc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzAxQlF5OUNMRk5CUVZNc1IwRkJSeXhKUVVGSkxFTkJRVUU3VFVGRGFFSXNTMEZCU3p0TFFVTk9PMGRCUTBZN1EwRkRSanM3UVVGRlJDeFpRVUZaTEVWQlFVVXNRMEZCUVRzN1FVRkZaQ3hUUVVGVExHTkJRV01zUlVGQlJTeExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRkZCUVZFc1JVRkJSVHRGUVVOb1JDeEpRVU5GTEZOQlFWTTdSVUZEVkN4SlFVRkJMRk5CUVZNN1JVRkRWQ3hKUVVGQkxGVkJRVlU3UlVGRFZpeEpRVUZCTEZsQlFWazdSVUZEV2l4SlFVRkJMR05CUVdNN1JVRkRaQ3hKUVVGQkxFOUJRVThzYlVKQlRrZzdPMFZCVTA0c1NVRkJTU3hQUVVGUExFTkJRVU1zUzBGQlN5eERRVUZETEVWQlFVVTdTVUZEYkVJc1FVRkJTU3hCUVVGelF5eEJRVWN4UXl4TFFVRkxMRWRCUVVjc1MwRkJTeXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZCTzBkQlEycENPenRGUVVWRVFTeEpRVUZOTEZGQlFWRXNSMEZCUnl4TlFVRk5MRU5CUVVNc1VVRkJVU3hKUVVGSkxFTkJRVU1zUTBGQlFUdEZRVU55UTBFc1NVRkJUU3hOUVVGTkxFZEJRVWNzVFVGQlRTeERRVUZETEdOQlFXTXNTVUZCU1N4UlFVRlJMRU5CUVVFN1JVRkRhRVJCTEVsQlFVMHNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eERRVUZCT3pzN1JVRkhMMEpCTEVsQlFVMHNaVUZCWlN4SFFVRkhMRTFCUVVzc1IwRkJSU3hSUVVGUkxGRkJRVWtzUjBGQlJTeE5RVUZOTEUxQlFVVXNSMEZCUlN4TFFVRkxMRTlCUVVjc1EwRkJRVHM3UlVGRkwwUkJMRWxCUVUwc1IwRkJSeXhIUVVGSExFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVRTdPMFZCUlhKQ0xFZEJRVWNzU1VGQlNTeEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRmxCUVZrc1EwRkJReXhIUVVGSExFVkJRVVVzU1VGQlNTeERRVUZETEVOQlFVRTdPMFZCUlhwRFFTeEpRVUZOTEc5Q1FVRnZRaXhIUVVGSExGVkJRVlVzUzBGQlN5eEZRVUZGTzBsQlF6VkRMRXRCUVVzc1NVRkJTU3hMUVVGTExFTkJRVU1zWlVGQlpTeEZRVUZGTEVOQlFVRTdTVUZEYUVNc1NVRkJTU3hSUVVGUkxFVkJRVVU3VFVGRFdpeEhRVUZITEVOQlFVTXNiVUpCUVcxQ0xFTkJRVU1zVVVGQlVTeEZRVUZGTEc5Q1FVRnZRaXhEUVVGRExFTkJRVUU3VFVGRGRrUXNSMEZCUnl4RFFVRkRMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eEZRVUZGTEVOQlFVRTdTMEZETVVJN1NVRkRSQ3hSUVVGUkxFVkJRVVVzUTBGQlFUdEhRVU5ZTEVOQlFVRTdSVUZEUkN4SlFVRkpMRkZCUVZFc1JVRkJSVHRKUVVOYUxFZEJRVWNzUTBGQlF5eExRVUZMTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1pVRkJaU3hEUVVGQk8wbEJRM1JETEVkQlFVY3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eFJRVUZSTEVWQlFVVXNiMEpCUVc5Q0xFTkJRVU1zUTBGQlFUdEhRVU55UkR0RlFVTkVMRk5CUVZNc1EwRkJReXhaUVVGSE8wbEJRMWdzUjBGQlJ5eERRVUZETEV0QlFVc3NRMEZCUXl4UFFVRlBPMU5CUTFvc1UwRkJVeXhEUVVGRExGVkJRVlVzUTBGQlF5eGpRVUZqTEVOQlFVTXNXVUZCV1N4RFFVRkRMRTFCUVUwc1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkRMRU5CUVVFN1IwRkRPVVVzUTBGQlF5eERRVUZCTzBOQlEwZzdPMEZCUlVSQkxFbEJRVTBzVTBGQlV5eEhRVUZIT3pzN096czdPMFZCVDJoQ0xGVkJRVlVzY1VKQlFVRXNSVUZCUlN4TFFVRkxMRVZCUVVVc1RVRkJUU3hGUVVGRkxGRkJRVkVzUlVGQlJUdEpRVU51UXl4SlFVRkpMRU5CUVVNc1RVRkJUU3hEUVVGRExFMUJRVTBzUlVGQlJTeEZRVUZGTEUxQlFVMHNSVUZCUlR0SlFVTTVRaXhQUVVGUExHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNUVUZCVFN4RlFVRkZMRmxCUVVjN1RVRkRkRU1zVVVGQlVTeEpRVUZKTEZGQlFWRXNSVUZCUlN4RFFVRkJPMHRCUTNaQ0xFTkJRVU03UjBGRFNEdERRVU5HTEVOQlFVRTdPMEZCUlVRc2EwSkJRV1U3UlVGRFlpeEpRVUZKTEdWQlFVRXNSVUZCUlN4SlFVRkpMRVZCUVVVN1NVRkRWa0VzU1VGQlRTeFZRVUZWTEVkQlFVY3NTVUZCU1N4RFFVRkRMRXRCUVVzc1EwRkJReXhWUVVGVkxFTkJRVUU3U1VGRGVFTXNWVUZCVlN4RFFVRkRNRU1zVDBGQlN5eEZRVUZGTEVsQlFVa3NRMEZCUXl4TFFVRkxMRVZCUVVVN1RVRkROVUlzVjBGQlZ6dE5RVU5ZTEZkQlFWYzdUVUZEV0N4WlFVRlpPMDFCUTFvc1kwRkJZenROUVVOa0xHZENRVUZuUWp0TlFVTm9RaXhUUVVGVE8wdEJRMVlzUTBGQlF5eERRVUZCT3p0SlFVVkdMRWxCUVVrc1EwRkJReXhqUVVGakxFTkJRVU1zVjBGQlZ5eEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkJPMGRCUXpWRE8wTkJRMFlzUTBGQlFUczdRVU4yU0VRN096czdPenM3T3pzN096czdPenM3T3p0QlFXdENRU3hCUVVOQk1VTXNTVUZCVFRCRExFOUJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVRTdPMEZCUldoQ0xGTkJRVk5ITEcxQ1FVRnBRaXhGUVVGRkxFdEJRVXNzUlVGQlJUdEZRVU5xUXl4SlFVRkpMRU5CUVVNc1MwRkJTeXhGUVVGRkxFVkJRVUVzVDBGQlR5eEpRVUZKTEVWQlFVRTdSVUZEZGtJM1F5eEpRVUZOTEVWQlFVVXNSMEZCUnl4TFFVRkxMRU5CUVVNc1IwRkJSenRKUVVOc1FpeExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjN1NVRkRha0lzUzBGQlN5eERRVUZETEdsQ1FVRnBRaXhKUVVGSkxFdEJRVXNzUTBGQlF5eFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkJPMFZCUTJwRUxFbEJRVWtzUTBGQlF5eEZRVUZGTEVWQlFVVXNSVUZCUVN4UFFVRlBMRWxCUVVrc1JVRkJRVHRGUVVOd1FrRXNTVUZCVFN4SlFVRkpMRWRCUVVjc1JVRkJSU3hEUVVGRExFZEJRVWNzU1VGQlNTeEZRVUZGTEVOQlFVTXNSMEZCUnl4RFFVRkRMRmxCUVZrc1EwRkJReXhYUVVGWExFTkJRVU1zUTBGQlFUdEZRVU4yUkN4SlFVRkpMRTFCUVUwc1EwRkJReXhsUVVGbExFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NRMEZCUXl4SFFVRkhMRU5CUVVNc1EwRkJReXhGUVVGRk8wbEJRemRETEU5QlFVOHNSVUZCUlR0SFFVTldPMFZCUTBRc1QwRkJUelpETEcxQ1FVRnBRaXhEUVVGRExFVkJRVVVzUTBGQlF5eFBRVUZQTEVOQlFVTTdRMEZEY2tNN08wRkJSVVFzVTBGQlV5eEhRVUZITEVsQlFVazdSVUZEWkRkRExFbEJRVTBzUjBGQlJ5eEhRVUZITEUxQlFVMHNRMEZCUXl4WFFVRlhMRWxCUVVrc1RVRkJUU3hEUVVGRExGZEJRVmNzUTBGQlF5eEhRVUZITzBsQlEzUkVMRTFCUVUwc1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4TlFVRk5MRU5CUVVNc1YwRkJWeXhEUVVGRExFZEJRVWNzU1VGQlNTeERRVUZETEVkQlFVY3NRMEZCUVR0RlFVTTFSQ3hQUVVGUExFZEJRVWNzUlVGQlJUdERRVU5pT3p0QlFVVkVMRk5CUVZNc1lVRkJZU3hGUVVGRkxFOUJRVThzUlVGQlJTeFJRVUZSTEVWQlFVVTdSVUZEZWtNc1NVRkJTU3hEUVVGRExFbEJRVWtzUzBGQlN5eFJRVUZSTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFdEJRVXNzVFVGQlRTeERRVUZETzA5QlF6VkRMRTFCUVUwc1EwRkJReXhSUVVGUkxFVkJRVVU3U1VGRGNFSXNUMEZCVHl4TlFVRk5MRU5CUVVNc1VVRkJVU3hEUVVGRExFTkJRVU1zUlVGQlJTeFJRVUZSTEVOQlFVTTdSMEZEY0VNN1JVRkRSQ3hKUVVGSkxFTkJRVU1zUTBGQlFTeFJRVUZQTEVkQlFVVXNUMEZCVHl4RFFVRkZMRU5CUVVNc1IwRkJSeXhSUVVGUkxFTkJRVUU3UTBGRGNFTTdPenM3T3p0QlFVMUVMRk5CUVZNNFF5eE5RVUZKTEVWQlFVVXNUMEZCVHl4RlFVRkZPenRGUVVWMFFpeFBRVUZQTEVOQlFVTXNTMEZCU3l4SFFVRkhMRTFCUVUwc1EwRkJReXh4UWtGQmNVSXNRMEZCUTBFc1RVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVWQlFVVXNUMEZCVHl4RFFVRkRMRU5CUVVNc1EwRkJRVHRGUVVONFJUbERMRWxCUVUwc1NVRkJTU3hIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZCTzBWQlEyeENSU3hKUVVGSkxFOUJRVThzUjBGQlJ5eERRVUZETEVsQlFVa3NSMEZCUnl4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUjBGQlJ5eERRVUZCT3p0RlFVVTVReXhQUVVGUExFZEJRVWNzVDBGQlR5eEhRVUZITEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1QwRkJUeXhEUVVGQk96dEZRVVZ1UTBZc1NVRkJUU3hMUVVGTExFZEJRVWNzU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkJPMFZCUXpOQ1FTeEpRVUZOTEdWQlFXVXNSMEZCUnl4UFFVRlBMRU5CUVVNc1lVRkJZU3hIUVVGSExFTkJRVU1zVDBGQlR5eERRVUZETEZGQlFWRXNSMEZCUnl4UFFVRlBMRU5CUVVNc1lVRkJZU3hEUVVGRExFZEJRVWNzUzBGQlN5eERRVUZCTzBWQlEyeEhMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4VlFVRlZMRVZCUVVVc1QwRkJUeXhEUVVGRExFOUJRVThzUlVGQlJTeGxRVUZsTEVOQlFVTXNRMEZCUVRzN096czdPenRGUVU5NlJTeEpRVUZKTEVOQlFVTXNRMEZCUXl4bFFVRmxMRXRCUVVzc1EwRkJReXhEUVVGRExFOUJRVThzUTBGQlF5eFJRVUZSTEVWQlFVVTdTVUZETlVNc1RVRkJUU3hEUVVGRExHOUNRVUZ2UWl4RFFVRkRMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdEpRVU14UXl4TlFVRk5PMGRCUTFBN1EwRkRSanM3T3pzN096dEJRVTlFTEZOQlFWTXNTVUZCU1N4RlFVRkZMRU5CUVVNc1JVRkJSVHRGUVVOb1FpeFBRVUZQTEVkQlFVY3NSMEZCUnl4RFFVRkRMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVsQlFVa3NRMEZCUXl4RlFVRkZMRWRCUVVjc1EwRkJReXhEUVVGRExFTkJRVU03UTBGRGVrTTdRVUZEUkVFc1NVRkJUU3hIUVVGSExFZEJRVWM3T3pzN096czdSVUZQVml4bFFVRmxMRVZCUVVVc1ZVRkJWU3hMUVVGTExFVkJRVVVzVDBGQlR5eEZRVUZGTzBsQlEzcERMRWxCUTBVc1QwRkJUeXh0UWtGRVNEdEpRVWRPTEVsQlFVa3NUMEZCVHl4RFFVRkRMRXRCUVVzc1EwRkJReXhGUVVGRk8wMUJRMnhDTEVGQlFVa3NRVUZCYzBNc1FVRkhNVU1zUzBGQlN5eEhRVUZITEV0QlFVc3NRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRVHRMUVVOcVFqdEpRVU5FUVN4SlFVRk5MRkZCUVZFc1IwRkJSelpETEcxQ1FVRnBRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBsQlEzcEROME1zU1VGQlRTeGxRVUZsTEVkQlFVY3NVVUZCVVN4SlFVRkpMRkZCUVZFc1EwRkJReXhsUVVGbExFbEJRVWtzVlVGQlZTeERRVUZCTzBsQlF6RkZRU3hKUVVGTkxGRkJRVkVzUjBGQlJ5eERRVUZETEZGQlFWRXNRMEZCUVR0SlFVTXhRa0VzU1VGQlRTeEZRVUZGTEVkQlFVY3NVVUZCVVN4SFFVRkhMRkZCUVZFc1EwRkJReXhKUVVGSkxFZEJRVWNzVVVGQlVTeERRVUZETEVkQlFVY3NRMEZCUVR0SlFVTnNSRUVzU1VGQlRTeEZRVUZGTEVkQlFVY3NTMEZCU3l4RFFVRkRMRWRCUVVjc1NVRkJTU3hMUVVGTExFTkJRVU1zUjBGQlJ5eERRVUZCTzBsQlEycERMRWxCUVVrc1JVRkJSU3hKUVVGSkxFVkJRVVVzUlVGQlJUczdPMDFCUjFwQkxFbEJRVTBzVDBGQlR5eEhRVUZITEVOQlFVTTdVVUZEWml4VlFVRlZMRVZCUVVVc1RVRkJUVHRSUVVOc1FpeFJRVUZSTEVWQlFVVXNTMEZCU3p0UFFVTm9RaXhEUVVGRExFTkJRVU1zWlVGQlpTeERRVUZETEVOQlFVRTdUVUZEYmtKQkxFbEJRVTBzVFVGQlRTeEhRVUZITEVWQlFVVXNRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVUZCTzAxQlEzcERSU3hKUVVGSkxFMUJRVTBzUjBGQlJ5eEZRVUZGTEVOQlFVTXNjVUpCUVhGQ0xFVkJRVVVzUTBGQlFUczdPenM3VFVGTGRrTXNTVUZCU1N4UlFVRlJMRWxCUVVrc1VVRkJVU3hEUVVGRExGRkJRVkVzUzBGQlN5eFhRVUZYTEVsQlFVa3NVVUZCVVN4RFFVRkRMRkZCUVZFc1NVRkJTU3hSUVVGUkxFTkJRVU1zVVVGQlVTeERRVUZETEU5QlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1RVRkJUU3hKUVVGSkxFdEJRVXNzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXl4RlFVRkZPenRSUVVVdlNDeE5RVUZOTEVkQlFVY3NSVUZCUlN4RFFVRkRMR2xDUVVGcFFpeERRVUZETEhGQ1FVRnhRaXhGUVVGRkxFTkJRVUU3VDBGRGRFUTdUVUZEUkVZc1NVRkJUU3hIUVVGSExFZEJRVWNzVDBGQlR5eERRVUZETEZkQlFWY3NSVUZCUlN4RFFVRkJPMDFCUTJwRFJTeEpRVUZKTEUxQlFVMHNSMEZCUnl4RFFVRkRMRkZCUVZFc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZETEVOQlFVRXNVVUZCVHl4SFFVRkZMRTlCUVU4c1EwRkJSU3hEUVVGRExFTkJRVU1zUjBGQlJ5eE5RVUZOTEVOQlFVTXNSMEZCUnl4RFFVRkRMRWRCUVVjc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzAxQlEyaEdMRWxCUVVrc1QwRkJUeXhGUVVGRk8xRkJRMWdzVFVGQlRTeEpRVUZKTEU5QlFVOHNRMEZCUXl4TlFVRk5MRWxCUVVrc1QwRkJUeXhEUVVGRExFMUJRVTBzUjBGQlJ5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFbEJRVWtzUTBGQlF5eERRVUZCT3p0UFFVVjRSVHRYUVVOSkxFVkJRVUVzUVVGQlNTeEJRVUZ6UXl4QlFVYzVRenROUVVORUxFbEJRVWtzVDBGQlR5eEpRVUZKTEU5QlFVOHNRMEZCUXl4UlFVRlJMRXRCUVVzc1MwRkJTeXhGUVVGRk8xRkJRM3BETEU5QlFVOHNZVUZCWVN4RFFVRkRMRWxCUVVrc1EwRkJReXhGUVVGRkxFVkJRVVVzVDBGQlR5eEZRVUZGTEUxQlFVMHNRMEZCUXp0UFFVTXZRenROUVVORU5FTXNUVUZCU1N4RFFVRkRPMUZCUTBnc1ZVRkJWU3hGUVVGRkxFVkJRVVU3VVVGRFpDeFRRVUZUTEVWQlFVVXNSMEZCUnl4RlFVRkZPMUZCUTJoQ0xFdEJRVXNzUlVGQlJTeEpRVUZKTzFGQlExZ3NZVUZCWVN4RlFVRkZMRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eEhRVUZITEVWQlFVVXNRMEZCUXl4RFFVRkJMRkZCUVU4c1IwRkJSU3hQUVVGUExFTkJRVVVzUTBGQlF6dFJRVU55UlN4UlFVRlJMRVZCUVVVc1RVRkJUVHRSUVVOb1FpeE5RVUZOTEVWQlFVVXNZVUZCWVR0UlFVTnlRaXhQUVVGUExFVkJRVVVzVDBGQlR6dFBRVU5xUWl4RFFVRkRMRU5CUVVFN1MwRkRTRHRIUVVOR096czdPenM3UlVGTlJDeG5Ra0ZCWjBJc1JVRkJSU3hWUVVGVkxFdEJRVXNzUlVGQlJTeFJRVUZSTEVWQlFVVTdTVUZETTBNc1NVRkRSU3hQUVVGUExHMUNRVVJJTzBsQlIwNHNTVUZCU1N4UFFVRlBMRU5CUVVNc1MwRkJTeXhEUVVGRExFVkJRVVU3VFVGRGJFSXNRVUZCU1N4QlFVRnpReXhCUVVjeFF5eExRVUZMTEVkQlFVY3NTMEZCU3l4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGQk8wdEJRMnBDTzBsQlEwUTVReXhKUVVGTkxFdEJRVXNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNTVUZCU1N4RFFVRkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUzBGQlN5eERRVUZCTzBsQlF6RkRRU3hKUVVGTkxFbEJRVWtzUjBGQlJ6dE5RVU5ZTEUxQlFVMHNSVUZCUlN4TFFVRkxPMHRCUTJRc1EwRkJRVHRKUVVORVFTeEpRVUZOTEZGQlFWRXNSMEZCUnl4RFFVRkRMRTlCUVU4c1JVRkJSU3hSUVVGUkxFVkJRVVVzUzBGQlN5eEZRVUZGTEZGQlFWRXNSVUZCUlN4TlFVRk5MRVZCUVVVc1QwRkJUeXhEUVVGRExFTkJRVUU3TzBsQlJYUkZMRk5CUVZNc1RVRkJUU3hGUVVGRkxFbEJRVWtzUlVGQlJUdE5RVU55UWtFc1NVRkJUU3hIUVVGSExFZEJRVWNzUlVGQlJTeERRVUZCTzAxQlEyUXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFZEJRVWNzUlVGQlF6dFJRVU51UWl4SlFVRkpMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUlVGQlJUdFZRVU5pTEVkQlFVY3NRMEZCUXl4SFFVRkhMRU5CUVVNc1IwRkJSeXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVkQlFVY3NTMEZCU3l4RFFVRkJPMU5CUXpkQ08wOUJRMFlzUTBGQlF5eERRVUZCTzAxQlEwWXNUMEZCVHl4SFFVRkhPMHRCUTFnN1NVRkRSQ3hKUVVGSkxFdEJRVXNzU1VGQlNTeExRVUZMTEV0QlFVc3NWVUZCVlN4RlFVRkZPMDFCUTJwRExFbEJRVWtzUTBGQlF5eE5RVUZOTEVkQlFVY3NTVUZCU1N4RFFVRkJPMDFCUTJ4Q0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVkQlFVY3NUVUZCVFN4RFFVRkRPMUZCUTJwQ0xFdEJRVXNzUlVGQlJTeFJRVUZSTEVOQlFVTXNaVUZCWlN4RFFVRkRMRmRCUVZjN1VVRkRNME1zVFVGQlRTeEZRVUZGTEZGQlFWRXNRMEZCUXl4bFFVRmxMRU5CUVVNc1dVRkJXVHRSUVVNM1F5eEhRVUZITEVWQlFVVXNRMEZCUXp0UlFVTk9MRWxCUVVrc1JVRkJSU3hEUVVGRE8xRkJRMUFzUzBGQlN5eEZRVUZGTEZGQlFWRXNRMEZCUXl4bFFVRmxMRU5CUVVNc1YwRkJWenRSUVVNelF5eE5RVUZOTEVWQlFVVXNVVUZCVVN4RFFVRkRMR1ZCUVdVc1EwRkJReXhaUVVGWk8wOUJRemxETEVOQlFVTXNRMEZCUVR0TlFVTkdMRWxCUVVrc1EwRkJReXhYUVVGWExFZEJRVWNzVFVGQlRTeERRVUZETzFGQlEzaENMRXRCUVVzc1JVRkJSU3hSUVVGUkxFTkJRVU1zWlVGQlpTeERRVUZETEZkQlFWYzdVVUZETTBNc1RVRkJUU3hGUVVGRkxGRkJRVkVzUTBGQlF5eGxRVUZsTEVOQlFVTXNXVUZCV1R0UFFVTTVReXhEUVVGRExFTkJRVUU3UzBGRFNEdFRRVU5KTEVsQlFVa3NTMEZCU3l4SlFVRkpMRXRCUVVzc1EwRkJReXhIUVVGSExFVkJRVVU3VFVGRE0wSXNTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVUU3VFVGRGJFSXNTVUZCU1N4RFFVRkRMRWxCUVVrc1IwRkJSeXhOUVVGTkxFTkJRVU1zUzBGQlN5eERRVUZETEVkQlFVY3NRMEZCUXl4eFFrRkJjVUlzUlVGQlJTeERRVUZETEVOQlFVRTdUVUZEY2tRc1NVRkJTU3hMUVVGTExFTkJRVU1zUzBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlR0UlFVTnlRaXhKUVVGSkxFTkJRVU1zVjBGQlZ5eEhRVUZITEUxQlFVMHNRMEZCUXp0VlFVTjRRaXhMUVVGTExFVkJRVVVzUzBGQlN5eERRVUZETEV0QlFVc3NRMEZCUXl4TFFVRkxMRU5CUVVNc1YwRkJWenRWUVVOd1F5eE5RVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRMRXRCUVVzc1EwRkJReXhMUVVGTExFTkJRVU1zV1VGQldUdFRRVU4yUXl4RFFVRkRMRU5CUVVFN1QwRkRTRHRYUVVOSk8xRkJRMGdzU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNN1ZVRkRlRUlzUzBGQlN5eEZRVUZGTEV0QlFVc3NRMEZCUXl4SFFVRkhMRU5CUVVNc1YwRkJWenRWUVVNMVFpeE5RVUZOTEVWQlFVVXNTMEZCU3l4RFFVRkRMRWRCUVVjc1EwRkJReXhaUVVGWk8xTkJReTlDTEVOQlFVTXNRMEZCUVR0UFFVTklPMHRCUTBZN1NVRkRSRUVzU1VGQlRTeFBRVUZQTEVkQlFVY3NTVUZCU1N4RFFVRkRMRTFCUVUwc1IwRkJSeXhKUVVGSkxFZEJRVWM3VFVGRGJrTXNUVUZCVFN4RlFVRkZMRXRCUVVzN1RVRkRZaXhOUVVGTkxFVkJRVVVzYlVKQlFXMUNPMHRCUXpWQ0xFTkJRVUU3U1VGRFJDeFJRVUZSTEVsQlFVa3NVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhEUVVGQk8wbEJRemRDTEU5QlFVOHNUMEZCVHp0SFFVTm1PenM3T3pzN1JVRk5SQ3hQUVVGUExFVkJRVVVzVlVGQlZTeEhRVUZITEVWQlFVVXNUVUZCVFN4RlFVRkZPMGxCUXpsQ0xFbEJRMFVzV1VGQldUdEpRVU5hTEVsQlFVRXNVMEZCVXl4eFFrRkdURHRKUVVsT0xFZEJRVWNzUjBGQlJ5eFpRVUZaTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1NVRkRka0pGTEVsQlFVa3NWVUZCVlN4SFFVRkhMRVZCUVVVc1EwRkJRVHRKUVVOdVFpeExRVUZMUml4SlFVRk5MRU5CUVVNc1NVRkJTU3hOUVVGTkxFVkJRVVU3VFVGRGRFSXNTVUZCU1N4TlFVRk5MRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU1zUTBGQlF5eEZRVUZGTzFGQlF6VkNMRlZCUVZVc1NVRkJTU3haUVVGWkxFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSMEZCUnl4SFFVRkhMRTFCUVUwc1EwRkJReXhEUVVGRExFTkJRVU1zUjBGQlJ5eEhRVUZITEVOQlFVRTdUMEZEZEVRN1MwRkRSanRKUVVORVFTeEpRVUZOTEZOQlFWTXNSMEZCUnl4SFFVRkZMRWRCUVVVc1IwRkJSeXhOUVVGRkxFZEJRVVVzVlVGQlZTeE5RVUZGTEVOQlFVRTdTVUZEZWtNc1UwRkJVeXhEUVVGRExGTkJRVk1zUlVGQlJTeHBRa0ZCYVVJc1EwRkJReXhEUVVGQk8wZEJRM2hETzBOQlEwWXNRMEZCUVR0QlFVTkVMRmxCUVdVN1JVRkRZaXhKUVVGSkxHVkJRVUVzUlVGQlJTeEpRVUZKTEVWQlFVVTdTVUZEVmtFc1NVRkJUU3hWUVVGVkxFZEJRVWNzU1VGQlNTeERRVUZETEV0QlFVc3NRMEZCUXl4VlFVRlZMRU5CUVVFN1NVRkRlRU1zVlVGQlZTeERRVUZETUVNc1QwRkJTeXhGUVVGRkxFbEJRVWtzUTBGQlF5eExRVUZMTEVWQlFVVXNRMEZCUXl4alFVRmpMRVZCUVVVc1YwRkJWeXhGUVVGRkxGTkJRVk1zUTBGQlF5eERRVUZETEVOQlFVRTdTVUZEZGtVc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eExRVUZMTEVWQlFVVXNSMEZCUnl4RFFVRkRMRU5CUVVFN1IwRkRhRU03UTBGRFJpeERRVUZCT3p0QlEycFFSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRjFRa0V4UXl4SlFVRk5MR0ZCUVdFc1IwRkJSeXhGUVVGRkxFTkJRVUU3TzBGQlJYaENRU3hKUVVGTkxGZEJRVmNzUjBGQlJ6czdPenM3T3p0RlFVOXNRaXhuUWtGQlowSXNNa0pCUVVFc1JVRkJSU3hIUVVGSExFVkJRVVVzVVVGQlVTeEZRVUZGTzBsQlF5OUNMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3VFVGRFlpeEJRVUZKTEVGQlFYTkRMRUZCUnpGRExFMUJRVTA3UzBGRFVEdEpRVU5FUlN4SlFVRkpMRkZCUVZFc1IwRkJSeXhoUVVGaExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdTVUZEYWtNc1NVRkJTU3hEUVVGRExGRkJRVkVzUlVGQlJUdE5RVU5pTEZGQlFWRXNSMEZCUnl4aFFVRmhMRU5CUVVNc1IwRkJSeXhEUVVGRExFZEJRVWNzUlVGQlJTeERRVUZCTzB0QlEyNURPMGxCUTBSR0xFbEJRVTBzUjBGQlJ5eEhRVUZITEZGQlFWRXNRMEZCUXl4TlFVRk5MRU5CUVVFN1NVRkRNMElzUzBGQlMwVXNTVUZCU1N4RFFVRkRMRWRCUVVjc1EwRkJReXhGUVVGRkxFTkJRVU1zUjBGQlJ5eEhRVUZITEVWQlFVVXNRMEZCUXl4RlFVRkZMRVZCUVVVN1RVRkROVUlzU1VGQlNTeFJRVUZSTEVOQlFVTXNRMEZCUXl4RFFVRkRMRXRCUVVzc1VVRkJVU3hGUVVGRk96dFJRVVUxUWl4TlFVRk5PMDlCUTFBN1MwRkRSanRKUVVORUxGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRMRU5CUVVFN1NVRkRka0lzVVVGQlVTeERRVUZETEdkQ1FVRm5RaXhEUVVGRExFZEJRVWNzUlVGQlJTeFJRVUZSTEVOQlFVTXNRMEZCUVR0SFFVTjZRenM3T3pzN096dEZRVTlFTEcxQ1FVRnRRaXc0UWtGQlFTeEZRVUZGTEVkQlFVY3NSVUZCUlR0SlFVTjRRa1lzU1VGQlRTeFJRVUZSTEVkQlFVY3NZVUZCWVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wbEJRMjVETEVsQlFVa3NRMEZCUXl4UlFVRlJMRVZCUVVVN08wMUJSV0lzVFVGQlRUdExRVU5RTzBsQlEwUXNVVUZCVVN4RFFVRkRMRTlCUVU4c1EwRkJReXhWUVVGQkxFVkJRVVVzUlVGQlF5eFRRVUZITEZGQlFWRXNRMEZCUXl4dFFrRkJiVUlzUTBGQlF5eEhRVUZITEVWQlFVVXNSVUZCUlN4RFFVRkRMRWRCUVVFc1EwRkJReXhEUVVGQk8wbEJRemRFTEU5QlFVOHNZVUZCWVN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wZEJRekZDTzBOQlEwWXNRMEZCUVRzN1FVRkZSQ3h2UWtGQlpUdEZRVU5pTEVsQlFVa3NaVUZCUVN4RlFVRkZMRWxCUVVrc1JVRkJSVHRKUVVOV0xFbEJRVWtzUTBGQlF5eGpRVUZqTEVOQlFVTXNZVUZCWVN4RlFVRkZMRmRCUVZjc1EwRkJReXhEUVVGQk8wZEJRMmhFTzBOQlEwWXNRMEZCUVRzN1FVTXhSVVE3T3pzN096czdPenM3T3pzN096czdPenRCUVd0Q1FVRXNTVUZCVFN0RExFOUJRVXNzUjBGQlJ5eEZRVUZGTEVOQlFVRTdRVUZEYUVJM1F5eEpRVUZKTEZsQlFWa3NSMEZCUnl4TFFVRkxMRU5CUVVFN1FVRkRlRUpCTEVsQlFVa3NVVUZCVVN4RFFVRkJPMEZCUTFwR0xFbEJRVTBzYjBKQlFXOUNMRWRCUVVjc1dVRkJXU3hEUVVGQk8wRkJRM3BEUVN4SlFVRk5MSGxDUVVGNVFpeEhRVUZITEVkQlFVY3NRMEZCUVRzN1FVRkZja05CTEVsQlFVMHNaMEpCUVdkQ0xFZEJRVWNzUjBGQlJ5eERRVUZCT3p0QlFVVTFRaXhUUVVGVExHVkJRV1VzUlVGQlJTeEhRVUZITEVWQlFVVXNVVUZCVVN4RlFVRkZPMFZCUTNaRExFbEJRVWtzUTBGQlF5eFJRVUZSTEVWQlFVVTdTVUZEWWl4UlFVRlJMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0SlFVTjRReXhSUVVGUkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4dlFrRkJiMElzUTBGQlF5eERRVUZCTzBsQlF6VkRMRkZCUVZFc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMGxCUXpsQ0xGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGQk8wZEJRM0JETzBWQlEwUXNVVUZCVVN4RFFVRkRMRmRCUVZjc1IwRkJSeXhIUVVGSExFTkJRVUU3UlVGRE1VSXNWVUZCVlN4RFFVRkRMRmxCUVZrN1NVRkRja0lzVVVGQlVTeERRVUZETEZOQlFWTXNRMEZCUXl4TlFVRk5MRU5CUVVNc1RVRkJUU3hEUVVGRExFTkJRVUU3U1VGRGFrTXNVVUZCVVN4SlFVRkpMRkZCUVZFc1JVRkJSU3hEUVVGQk8wZEJRM1pDTEVWQlFVVXNSVUZCUlN4RFFVRkRMRU5CUVVFN1EwRkRVRHM3UVVGRlJDeFRRVUZUTEdWQlFXVXNSVUZCUlN4UlFVRlJMRVZCUVVVN1JVRkRiRU1zU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlR0SlFVTmlMRTFCUVUwN1IwRkRVRHRGUVVORUxGRkJRVkVzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGQk8wVkJRemxDTEZWQlFWVXNRMEZCUXl4WlFVRlpPMGxCUTNKQ0xGRkJRVkVzU1VGQlNTeFJRVUZSTEVWQlFVVXNRMEZCUVR0SFFVTjJRaXhGUVVGRkxIbENRVUY1UWl4SFFVRkhMRWxCUVVrc1EwRkJReXhEUVVGQk8wTkJRM0pET3p0QlFVVkVMRmxCUVdVN1JVRkRZaXhKUVVGSkxFVkJRVVVzVlVGQlZTeEhRVUZITEVWQlFVVXNVVUZCVVN4RlFVRkZPMGxCUXpkQ0swTXNUMEZCU3l4RFFVRkRMRWxCUVVrc1EwRkJRenROUVVOVUxFZEJRVWNzUlVGQlJTeEhRVUZITzAxQlExSXNVVUZCVVN4RlFVRkZMRkZCUVZFc1NVRkJTU3huUWtGQlowSTdTMEZEZGtNc1EwRkJReXhEUVVGQk8wbEJRMFlzU1VGQlNTeERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkJPMGRCUTFvN08wVkJSVVFzU1VGQlNTeEZRVUZGTEZsQlFWazdTVUZEYUVJdlF5eEpRVUZOTEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVFN096dEpRVWRxUWl4SlFVRkpMRU5CUVVNclF5eFBRVUZMTEVOQlFVTXNUVUZCVFN4RlFVRkZPMDFCUTJwQ0xGRkJRVkVzU1VGQlNTeFJRVUZSTEVOQlFVTXNWVUZCVlN4RFFVRkRMRmRCUVZjc1EwRkJReXhSUVVGUkxFTkJRVU1zUTBGQlFUdE5RVU55UkN4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGQk8wMUJRMllzVFVGQlRUdExRVU5RT3pzN1NVRkhSQ3hKUVVGSkxGbEJRVmtzUlVGQlJUdE5RVU5vUWl4TlFVRk5PMHRCUTFBN1NVRkRSQ3haUVVGWkxFZEJRVWNzU1VGQlNTeERRVUZCT3p0SlFVVnVRaTlETEVsQlFVMHNVMEZCVXl4SFFVRkhLME1zVDBGQlN5eERRVUZETEV0QlFVc3NSVUZCUlN4RFFVRkJPMGxCUXk5Q0xHVkJRV1VzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RlFVRkZMRmxCUVZrN1RVRkRla01zVlVGQlZTeERRVUZETEZsQlFWazdVVUZEY2tJc1pVRkJaU3hEUVVGRExGbEJRVms3VlVGRE1VSXNXVUZCV1N4SFFVRkhMRXRCUVVzc1EwRkJRVHRWUVVOd1FpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RlFVRkZMRU5CUVVFN1UwRkRXaXhEUVVGRExFTkJRVUU3VDBGRFNDeEZRVUZGTEZOQlFWTXNRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGRExFTkJRVUU3UzBGRE9VSXNRMEZCUXl4RFFVRkJPMGRCUTBnN1EwRkRSaXhEUVVGQk96dEJRM0pHUkRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnZRa0V2UXl4SlFVRk5MR2RDUVVGblFpeEhRVUZITEdsQ1FVRnBRaXhEUVVGQk8wRkJRekZEUVN4SlFVRk5MR2RDUVVGblFpeEhRVUZITEdsQ1FVRnBRaXhEUVVGQk96dEJRVVV4UXl4QlFVRmxMRk5CUVZNc1MwRkJTeXhKUVVGSk8wVkJReTlDTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGQk8wVkJRM0JFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eG5Ra0ZCWjBJc1EwRkJReXhEUVVGQk8wVkJRM0JFTEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hGUVVGRk8wbEJRMlFzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkJPMGRCUTJ4Q08wVkJRMFFzU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRVZCUVVVN1NVRkRaQ3hKUVVGSkxFTkJRVU1zVlVGQlZTeEZRVUZGTEVOQlFVRTdSMEZEYkVJN1JVRkRSQ3hKUVVGSkxFTkJRVU1zVTBGQlV5eEZRVUZGTEVOQlFVRTdSVUZEYUVJc1NVRkJTU3hEUVVGRExHbENRVUZwUWl4RlFVRkZMRU5CUVVFN1JVRkRlRUlzU1VGQlNTeERRVUZETEZWQlFWVXNSVUZCUlN4RFFVRkJPME5CUTJ4Q096dEJRVVZFTEV0QlFVc3NRMEZCUXl4VFFVRlRMRWRCUVVjN08wVkJSV2hDTEVsQlFVa3NSVUZCUlN4WlFVRlpPMGxCUTJoQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRTlCUVU4c1IwRkJSeXhQUVVGUExFTkJRVUU3U1VGRGFrTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zVFVGQlRTeERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkJPMGRCUTI1RE96dEZRVVZFTEU5QlFVOHNSVUZCUlN4WlFVRlpPMGxCUTI1Q0xGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zUTBGQlFUdEpRVU53UXl4UlFVRlJMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVFN1NVRkRjRU1zU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVFN1NVRkRhRUlzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4SlFVRkpMRU5CUVVFN1IwRkRha0k3TzBWQlJVUXNWVUZCVlN4RlFVRkZMRmxCUVZrN1NVRkRkRUlzU1VGQlNTeERRVUZETEVsQlFVa3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBsQlEzcERMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eEhRVUZITEdkQ1FVRm5RaXhEUVVGQk8wbEJRM1JETEZGQlFWRXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNRMEZCUVR0SFFVTnlRenM3UlVGRlJDeFZRVUZWTEVWQlFVVXNXVUZCV1R0SlFVTjBRaXhKUVVGSkxFTkJRVU1zU1VGQlNTeEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3U1VGRGVrTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEdkQ1FVRm5RaXhGUVVGRkxFMUJRVTBzUTBGQlF5eERRVUZCTzBsQlEycEVMRkZCUVZFc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRIUVVOeVF6czdSVUZGUkN4VFFVRlRMRVZCUVVVc1dVRkJXVHRKUVVOeVFpeEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRk5CUVZNc1IwRkJSeXhGUVVGRkxFTkJRVUU3UjBGRGVrSTdPMFZCUlVRc2FVSkJRV2xDTEVWQlFVVXNXVUZCV1RzN096dEhRVWs1UWpzN1JVRkZSQ3hWUVVGVkxFVkJRVVVzV1VGQldUdEpRVU4wUWl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3hWUVVGVkxFTkJRVU1zUlVGQlJUdE5RVU12UXl4RFFVRkRMRU5CUVVNc1kwRkJZeXhGUVVGRkxFTkJRVUU3VFVGRGJFSXNRMEZCUXl4RFFVRkRMR1ZCUVdVc1JVRkJSU3hEUVVGQk8wdEJRM0JDTEVOQlFVTXNRMEZCUVR0SFFVTklPME5CUTBZc1EwRkJRVHM3UVVNdlJVUTdPenM3T3pzN096czdPenM3T3pzN096dEJRV3RDUVN4QlFVVkJRU3hKUVVGTkxHRkJRV0VzUjBGQlJ5eFRRVUZUTEVOQlFVRTdRVUZETDBKQkxFbEJRVTBzVTBGQlV5eEhRVUZITEdGQlFXRXNRMEZCUVR0QlFVTXZRa0VzU1VGQlRTeHJRa0ZCYTBJc1IwRkJSeXhYUVVGWExFTkJRVUU3UVVGRGRFTkJMRWxCUVUwc1dVRkJXU3hIUVVGSExFdEJRVXNzUTBGQlFUczdRVUZGTVVJc1FVRkJaU3hUUVVGVExFdEJRVXNzUlVGQlJTeE5RVUZOTEVWQlFVVTdSVUZEY2tNc1NVRkJTU3hEUVVGRExFZEJRVWNzUjBGQlJ5eE5RVUZOTEVOQlFVTXNUMEZCVHl4SlFVRkpMRVZCUVVVc1EwRkJRVHRGUVVNdlFpeEpRVUZKTEVOQlFVTXNVVUZCVVN4SFFVRkhMRTFCUVUwc1EwRkJReXhSUVVGUkxFTkJRVUU3UlVGREwwSXNTVUZCU1N4RFFVRkRMRTlCUVU4c1IwRkJSeXhOUVVGTkxFTkJRVU1zVDBGQlR5eEpRVUZKTEVsQlFVa3NRMEZCUVR0RlFVTnlReXhMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkJPMFZCUTJoQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhaUVVGWkxFTkJRVU1zUTBGQlFUdERRVU4wUXpzN1FVRkZSQ3hMUVVGTExFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCT3p0QlFVVm9SQ3hMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEdsQ1FVRnBRaXhIUVVGSExGbEJRVms3UlVGRE9VTkJMRWxCUVUwc1QwRkJUeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVFN1JVRkROME1zVDBGQlR5eERRVUZETEZOQlFWTXNRMEZCUXl4SFFVRkhMRU5CUVVNc1lVRkJZU3hEUVVGRExFTkJRVUU3UlVGRGNFTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhYUVVGWExFTkJRVU1zVDBGQlR5eERRVUZETEVOQlFVRTdPMFZCUlRsQ1FTeEpRVUZOTEVkQlFVY3NSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBWQlEzcERMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkJPMFZCUXpWQ0xFZEJRVWNzUTBGQlF5eFhRVUZYTEVOQlFVTXNVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXhKUVVGSkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVTXNRMEZCUVR0RlFVTnNSQ3hQUVVGUExFTkJRVU1zVjBGQlZ5eERRVUZETEVkQlFVY3NRMEZCUXl4RFFVRkJPenRGUVVWNFFrRXNTVUZCVFN4WFFVRlhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0RlFVTnFSQ3hYUVVGWExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4clFrRkJhMElzUTBGQlF5eERRVUZCTzBWQlF6ZERMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkJPMFZCUTJ4RFFTeEpRVUZOTEUxQlFVMHNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBWQlF6VkRMRTFCUVUwc1EwRkJReXhUUVVGVExFTkJRVU1zUjBGQlJ5eERRVUZETEZsQlFWa3NSVUZCUlN4VlFVRlZMRU5CUVVNc1EwRkJRVHRGUVVNNVF5eE5RVUZOTEVOQlFVTXNWMEZCVnl4RFFVRkRMRkZCUVZFc1EwRkJReXhqUVVGakxFTkJRVU1zU1VGQlNTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRU5CUVVFN1JVRkRla1FzVjBGQlZ5eERRVUZETEZkQlFWY3NRMEZCUXl4TlFVRk5MRU5CUVVNc1EwRkJRVHREUVVOb1F5eERRVUZCT3p0QlFVVkVMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlZTeEhRVUZITEZsQlFWazdSVUZEZGtNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eFZRVUZWTEVOQlFVTXNTVUZCU1N4RFFVRkRMRWxCUVVrc1EwRkJReXhEUVVGQk8wVkJRM0pEUVN4SlFVRk5MRTFCUVUwc1IwRkJSeXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEdGQlFXRXNRMEZCUXl4SFFVRkhMRWRCUVVjc1dVRkJXU3hEUVVGRExFTkJRVUU3UlVGRE1VUXNUVUZCVFN4RFFVRkRMR2RDUVVGblFpeERRVUZETEU5QlFVOHNSVUZCUlN4WlFVRlpPMGxCUXpORExFbEJRVWtzUTBGQlF5eFBRVUZQTEVWQlFVVXNRMEZCUVR0SlFVTmtMRWxCUVVrc1EwRkJReXhSUVVGUkxFbEJRVWtzU1VGQlNTeERRVUZETEZGQlFWRXNSVUZCUlN4RFFVRkJPMGRCUTJwRExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkRMRU5CUVVFN1EwRkRaQ3hEUVVGQk96dEJRemRFUkRzN096czdPenM3T3pzN096czdPenM3TzBGQmEwSkJMRUZCUlVGQkxFbEJRVTFuUkN4bFFVRmhMRWRCUVVjc1UwRkJVeXhEUVVGQk8wRkJReTlDYUVRc1NVRkJUV2xFTEZkQlFWTXNSMEZCUnl4aFFVRmhMRU5CUVVFN1FVRkRMMEpxUkN4SlFVRk5hMFFzYjBKQlFXdENMRWRCUVVjc1YwRkJWeXhEUVVGQk8wRkJRM1JEYkVRc1NVRkJUVzFFTEdOQlFWa3NSMEZCUnl4TFFVRkxMRU5CUVVFN08wRkJSVEZDTEVGQlFXVXNVMEZCVXl4UFFVRlBMRVZCUVVVc1RVRkJUU3hGUVVGRk8wVkJRM1pETEVsQlFVa3NRMEZCUXl4SFFVRkhMRWRCUVVjc1RVRkJUU3hEUVVGRExFOUJRVThzU1VGQlNTeEZRVUZGTEVOQlFVRTdSVUZETDBJc1NVRkJTU3hEUVVGRExGRkJRVkVzUjBGQlJ5eE5RVUZOTEVOQlFVTXNVVUZCVVN4RFFVRkJPMFZCUXk5Q0xFbEJRVWtzUTBGQlF5eFBRVUZQTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTlCUVU4c1NVRkJTU3hKUVVGSkxFTkJRVUU3UlVGRGNrTXNTVUZCU1N4RFFVRkRMRmRCUVZjc1IwRkJSeXhOUVVGTkxFTkJRVU1zVjBGQlZ5eEpRVUZKTEZGQlFWRXNRMEZCUVR0RlFVTnFSQ3hMUVVGTExFTkJRVU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4RFFVRkJPMFZCUTJoQ0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNVMEZCVXl4RFFVRkRMRWRCUVVjc1EwRkJReXhqUVVGakxFTkJRVU1zUTBGQlFUdERRVU40UXpzN1FVRkZSQ3hQUVVGUExFTkJRVU1zVTBGQlV5eEhRVUZITEUxQlFVMHNRMEZCUXl4TlFVRk5MRU5CUVVNc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eERRVUZCT3p0QlFVVnNSQ3hQUVVGUExFTkJRVU1zVTBGQlV5eERRVUZETEdsQ1FVRnBRaXhIUVVGSExGbEJRVms3UlVGRGFFUnVSQ3hKUVVGTkxFOUJRVThzUjBGQlJ5eFJRVUZSTEVOQlFVTXNZVUZCWVN4RFFVRkRMRXRCUVVzc1EwRkJReXhEUVVGQk8wVkJRemRETEU5QlFVOHNRMEZCUXl4VFFVRlRMRU5CUVVNc1IwRkJSeXhEUVVGRFowUXNaVUZCWVN4RFFVRkRMRU5CUVVFN1JVRkRjRU1zU1VGQlNTeERRVUZETEVsQlFVa3NRMEZCUXl4WFFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3TzBWQlJUbENhRVFzU1VGQlRTeEhRVUZITEVkQlFVY3NVVUZCVVN4RFFVRkRMR0ZCUVdFc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlFUdEZRVU42UXl4SFFVRkhMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlEybEVMRmRCUVZNc1EwRkJReXhEUVVGQk8wVkJRelZDTEVkQlFVY3NRMEZCUXl4WFFVRlhMRU5CUVVNc1VVRkJVU3hEUVVGRExHTkJRV01zUTBGQlF5eEpRVUZKTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVNc1EwRkJRVHRGUVVOc1JDeFBRVUZQTEVOQlFVTXNWMEZCVnl4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk96dEZRVVY0UW1wRUxFbEJRVTBzVjBGQlZ5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1MwRkJTeXhEUVVGRExFTkJRVUU3UlVGRGFrUXNWMEZCVnl4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU5yUkN4dlFrRkJhMElzUTBGQlF5eERRVUZCTzBWQlF6ZERMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVjBGQlZ5eERRVUZETEZkQlFWY3NRMEZCUXl4RFFVRkJPMFZCUTJ4RGJFUXNTVUZCVFN4TFFVRkxMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0RlFVTXpReXhMUVVGTExFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUTBGQlF5eERRVUZETEVOQlFVRTdSVUZEZUVRc1MwRkJTeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNVVUZCVVN4RlFVRkZiVVFzWTBGQldTeERRVUZETEVOQlFVRTdSVUZETTBOdVJDeEpRVUZOTEZOQlFWTXNSMEZCUnl4UlFVRlJMRU5CUVVNc1lVRkJZU3hEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBWQlF5OURMRk5CUVZNc1EwRkJReXhYUVVGWExFTkJRVU1zVVVGQlVTeERRVUZETEdOQlFXTXNRMEZCUXl4SlFVRkpMRU5CUVVNc1YwRkJWeXhEUVVGRExFTkJRVU1zUTBGQlFUdEZRVU5vUlN4VFFVRlRMRU5CUVVNc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eFpRVUZaTEVWQlFVVnRSQ3hqUVVGWkxFTkJRVU1zUTBGQlFUdEZRVU51UkN4WFFVRlhMRU5CUVVNc1YwRkJWeXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZCTzBWQlF6bENMRmRCUVZjc1EwRkJReXhYUVVGWExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdSVUZEYkVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eFhRVUZYTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1EwRkRia01zUTBGQlFUczdRVUZGUkN4UFFVRlBMRU5CUVVNc1UwRkJVeXhEUVVGRExGVkJRVlVzUjBGQlJ5eFpRVUZaTzBWQlEzcERMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zVlVGQlZTeERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJRVHRGUVVOeVEyNUVMRWxCUVUwc1MwRkJTeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWRCUVVjc1IwRkJSMjFFTEdOQlFWa3NSMEZCUnl4VFFVRlRMRU5CUVVNc1EwRkJRVHRGUVVOeVJXNUVMRWxCUVUwc1UwRkJVeXhIUVVGSExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNZVUZCWVN4RFFVRkRMRWRCUVVjc1IwRkJSMjFFTEdOQlFWa3NSMEZCUnl4aFFVRmhMRU5CUVVNc1EwRkJRVHRGUVVNM1JTeExRVUZMTEVOQlFVTXNaMEpCUVdkQ0xFTkJRVU1zVDBGQlR5eEZRVUZGTEZsQlFWazdTVUZETVVNc1NVRkJTU3hEUVVGRExFOUJRVThzUlVGQlJTeERRVUZCTzBsQlEyUXNTVUZCU1N4RFFVRkRMRkZCUVZFc1NVRkJTU3hKUVVGSkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4UFFVRlBMRU5CUVVNc1EwRkJRVHRIUVVNM1F5eERRVUZETEVsQlFVa3NRMEZCUXl4SlFVRkpMRU5CUVVNc1EwRkJReXhEUVVGQk8wVkJRMklzVTBGQlV5eERRVUZETEdkQ1FVRm5RaXhEUVVGRExFOUJRVThzUlVGQlJTeFpRVUZaTzBsQlF6bERMRWxCUVVrc1EwRkJReXhQUVVGUExFVkJRVVVzUTBGQlFUdEpRVU5rTEVsQlFVa3NRMEZCUXl4UlFVRlJMRWxCUVVrc1NVRkJTU3hEUVVGRExGRkJRVkVzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRU5CUVVFN1IwRkRha1FzUTBGQlF5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMRU5CUVVNc1EwRkJRVHREUVVOa0xFTkJRVUU3TzBGRGVFVkVPenM3T3pzN096czdPenM3T3pzN096czdRVUZyUWtFc1FVRkZRVzVFTEVsQlFVMW5SQ3hsUVVGaExFZEJRVWNzVTBGQlV5eERRVUZCTzBGQlF5OUNhRVFzU1VGQlRXbEVMRmRCUVZNc1IwRkJSeXhoUVVGaExFTkJRVUU3UVVGREwwSnFSQ3hKUVVGTmEwUXNiMEpCUVd0Q0xFZEJRVWNzVjBGQlZ5eERRVUZCTzBGQlEzUkRiRVFzU1VGQlRXMUVMR05CUVZrc1IwRkJSeXhMUVVGTExFTkJRVUU3UVVGRE1VSnVSQ3hKUVVGTkxHZENRVUZuUWl4SFFVRkhMRmxCUVZrc1EwRkJRVHRCUVVOeVEwRXNTVUZCVFN4WFFVRlhMRWRCUVVjc1QwRkJUeXhEUVVGQk96dEJRVVV6UWl4QlFVRmxMRk5CUVZNc1RVRkJUU3hGUVVGRkxFMUJRVTBzUlVGQlJUdEZRVU4wUXl4SlFVRkpMRU5CUVVNc1IwRkJSeXhIUVVGSExFMUJRVTBzUTBGQlF5eFBRVUZQTEVsQlFVa3NSVUZCUlN4RFFVRkJPMFZCUXk5Q0xFbEJRVWtzUTBGQlF5eFZRVUZWTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTlCUVU4c1NVRkJTU3hGUVVGRkxFTkJRVUU3UlVGRGRFTXNTVUZCU1N4RFFVRkRMRkZCUVZFc1IwRkJSeXhOUVVGTkxFTkJRVU1zVVVGQlVTeERRVUZCTzBWQlF5OUNMRWxCUVVrc1EwRkJReXhQUVVGUExFZEJRVWNzVFVGQlRTeERRVUZETEU5QlFVOHNTVUZCU1N4SlFVRkpMRU5CUVVFN1JVRkRja01zU1VGQlNTeERRVUZETEZkQlFWY3NSMEZCUnl4TlFVRk5MRU5CUVVNc1YwRkJWeXhKUVVGSkxGRkJRVkVzUTBGQlFUdEZRVU5xUkN4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZCTzBWQlEyaENMRWxCUVVrc1EwRkJReXhKUVVGSkxFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4aFFVRmhMRU5CUVVNc1EwRkJRVHREUVVOMlF6czdRVUZGUkN4TlFVRk5MRU5CUVVNc1UwRkJVeXhIUVVGSExFMUJRVTBzUTBGQlF5eE5RVUZOTEVOQlFVTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhEUVVGQk96dEJRVVZxUkN4TlFVRk5MRU5CUVVNc1UwRkJVeXhEUVVGRExHbENRVUZwUWl4SFFVRkhMRmxCUVZrN1JVRkRMME5CTEVsQlFVMHNUMEZCVHl4SFFVRkhMRkZCUVZFc1EwRkJReXhoUVVGaExFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVRTdSVUZETjBNc1QwRkJUeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTm5SQ3hsUVVGaExFTkJRVU1zUTBGQlFUdEZRVU53UXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUVRzN1JVRkZPVUpvUkN4SlFVRk5MRWRCUVVjc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkJPMFZCUTNwRExFZEJRVWNzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRhVVFzVjBGQlV5eERRVUZETEVOQlFVRTdSVUZETlVJc1IwRkJSeXhEUVVGRExGZEJRVmNzUTBGQlF5eFJRVUZSTEVOQlFVTXNZMEZCWXl4RFFVRkRMRWxCUVVrc1EwRkJReXhIUVVGSExFTkJRVU1zUTBGQlF5eERRVUZCTzBWQlEyeEVMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdPMFZCUlhoQ2FrUXNTVUZCVFN4VFFVRlRMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0RlFVTXZReXhUUVVGVExFTkJRVU1zVTBGQlV5eERRVUZETEVkQlFVY3NRMEZCUXl4blFrRkJaMElzUTBGQlF5eERRVUZCTzBWQlEzcERMRTlCUVU4c1EwRkJReXhYUVVGWExFTkJRVU1zVTBGQlV5eERRVUZETEVOQlFVRTdSVUZET1VKQkxFbEJRVTBzUzBGQlN5eEhRVUZITEZGQlFWRXNRMEZCUXl4aFFVRmhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVUU3UlVGRE4wTXNTMEZCU3l4RFFVRkRMRk5CUVZNc1EwRkJReXhIUVVGSExFTkJRVU1zVjBGQlZ5eERRVUZETEVOQlFVRTdSVUZEYUVNc1MwRkJTeXhEUVVGRExFbEJRVWtzUjBGQlJ5eE5RVUZOTEVOQlFVRTdSVUZEYmtJc1MwRkJTeXhEUVVGRExGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVRTdSVUZEZEVJc1MwRkJTeXhEUVVGRExGZEJRVmNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNWVUZCVlN4RFFVRkJPMFZCUTI1RExGTkJRVk1zUTBGQlF5eFhRVUZYTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVFN08wVkJSVFZDUVN4SlFVRk5MRmRCUVZjc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEV0QlFVc3NRMEZCUXl4RFFVRkJPMFZCUTJwRUxGZEJRVmNzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRhMFFzYjBKQlFXdENMRU5CUVVNc1EwRkJRVHRGUVVNM1EyeEVMRWxCUVUwc1MwRkJTeXhIUVVGSExGRkJRVkVzUTBGQlF5eGhRVUZoTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVFN1JVRkRNME1zUzBGQlN5eERRVUZETEZkQlFWY3NRMEZCUXl4UlFVRlJMRU5CUVVNc1kwRkJZeXhEUVVGRExFbEJRVWtzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4RFFVRkJPMFZCUTNoRUxFdEJRVXNzUTBGQlF5eFRRVUZUTEVOQlFVTXNSMEZCUnl4RFFVRkRMRkZCUVZFc1JVRkJSVzFFTEdOQlFWa3NRMEZCUXl4RFFVRkJPMFZCUXpORGJrUXNTVUZCVFN4VFFVRlRMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0RlFVTXZReXhUUVVGVExFTkJRVU1zVjBGQlZ5eERRVUZETEZGQlFWRXNRMEZCUXl4alFVRmpMRU5CUVVNc1NVRkJTU3hEUVVGRExGZEJRVmNzUTBGQlF5eERRVUZETEVOQlFVRTdSVUZEYUVVc1UwRkJVeXhEUVVGRExGTkJRVk1zUTBGQlF5eEhRVUZITEVOQlFVTXNXVUZCV1N4RlFVRkZiVVFzWTBGQldTeERRVUZETEVOQlFVRTdSVUZEYmtRc1YwRkJWeXhEUVVGRExGZEJRVmNzUTBGQlF5eExRVUZMTEVOQlFVTXNRMEZCUVR0RlFVTTVRaXhYUVVGWExFTkJRVU1zVjBGQlZ5eERRVUZETEZOQlFWTXNRMEZCUXl4RFFVRkJPMFZCUTJ4RExFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNWMEZCVnl4RFFVRkRMRmRCUVZjc1EwRkJReXhEUVVGQk8wTkJRMjVETEVOQlFVRTdPMEZCUlVRc1RVRkJUU3hEUVVGRExGTkJRVk1zUTBGQlF5eFZRVUZWTEVkQlFVY3NXVUZCV1R0RlFVTjRReXhMUVVGTExFTkJRVU1zVTBGQlV5eERRVUZETEZWQlFWVXNRMEZCUXl4SlFVRkpMRU5CUVVNc1NVRkJTU3hEUVVGRExFTkJRVUU3UlVGRGNrTnVSQ3hKUVVGTkxFdEJRVXNzUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhIUVVGSExFZEJRVWR0UkN4alFVRlpMRWRCUVVjc1UwRkJVeXhEUVVGRExFTkJRVUU3UlVGRGNrVnVSQ3hKUVVGTkxGTkJRVk1zUjBGQlJ5eEpRVUZKTEVOQlFVTXNTVUZCU1N4RFFVRkRMR0ZCUVdFc1EwRkJReXhIUVVGSExFZEJRVWR0UkN4alFVRlpMRWRCUVVjc1lVRkJZU3hEUVVGRExFTkJRVUU3UlVGRE4wVnVSQ3hKUVVGTkxFbEJRVWtzUjBGQlJ5eEpRVUZKTEVOQlFVRTdSVUZEYWtJc1MwRkJTeXhEUVVGRExHZENRVUZuUWl4RFFVRkRMRTlCUVU4c1JVRkJSU3haUVVGWk8wbEJRekZEUVN4SlFVRk5MRWRCUVVjc1IwRkJSeXhSUVVGUkxFTkJRVU1zWVVGQllTeERRVUZETEU5QlFVOHNRMEZCUXl4RFFVRkRMRXRCUVVzc1EwRkJRVHRKUVVOcVJDeEpRVUZKTEVOQlFVTXNUMEZCVHl4RlFVRkZMRU5CUVVFN1NVRkRaQ3hKUVVGSkxFTkJRVU1zVVVGQlVTeEpRVUZKTEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNN1RVRkROMElzVFVGQlRTeEZRVUZGTEVsQlFVa3NRMEZCUXl4UFFVRlBPMDFCUTNCQ0xFbEJRVWtzUlVGQlJTeEhRVUZITzB0QlExWXNRMEZCUXl4RFFVRkJPMGRCUTBnc1EwRkJReXhKUVVGSkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUVR0RlFVTmlMRk5CUVZNc1EwRkJReXhuUWtGQlowSXNRMEZCUXl4UFFVRlBMRVZCUVVVc1dVRkJXVHRKUVVNNVEwRXNTVUZCVFN4SFFVRkhMRWRCUVVjc1VVRkJVU3hEUVVGRExHRkJRV0VzUTBGQlF5eFBRVUZQTEVOQlFVTXNRMEZCUXl4TFFVRkxMRU5CUVVFN1NVRkRha1FzU1VGQlNTeERRVUZETEU5QlFVOHNSVUZCUlN4RFFVRkJPMGxCUTJRc1NVRkJTU3hEUVVGRExGRkJRVkVzU1VGQlNTeEpRVUZKTEVOQlFVTXNVVUZCVVN4RFFVRkRPMDFCUXpkQ0xFMUJRVTBzUlVGQlJTeEpRVUZKTEVOQlFVTXNWMEZCVnp0TlFVTjRRaXhKUVVGSkxFVkJRVVVzUjBGQlJ6dExRVU5XTEVOQlFVTXNRMEZCUVR0SFFVTklMRU5CUVVNc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlF5eERRVUZETEVOQlFVRTdRMEZEWkN4RFFVRkJPenRCUXpkR1JEczdPenM3T3pzN096czdPenM3T3pzN08wRkJhMEpCTEdOQlFXVXNNbkZIUVRKS1ppeERRVUZCT3p0QlF6ZExRVHM3T3pzN096czdPenM3T3pzN096czdPMEZCYTBKQkxFRkJRMEVzUVVGRFFTeEJRVU5CTEVGQlEwRTdRVUZIUVVFc1NVRkJUU3hMUVVGTExFZEJRVWM3T3p0RlFVZGFMRXRCUVVzc1JVRkJSU3hWUVVGVkxFMUJRVTBzUlVGQlJUdEpRVU4yUWl4TFFVRkxMRU5CUVVNc1NVRkJTU3hEUVVGRExFMUJRVTBzUTBGQlF5eFBRVUZQTEVWQlFVVXNUVUZCVFN4RFFVRkRMRkZCUVZFc1EwRkJReXhEUVVGQk8wZEJRelZET3pzN096czdSVUZOUkN4TFFVRkxMRVZCUVVVc1ZVRkJWU3hOUVVGTkxFVkJRVVVzVVVGQlVTeEZRVUZGTzBsQlEycERMRTFCUVUwc1EwRkJReXhSUVVGUkxFZEJRVWNzV1VGQldUdE5RVU0xUWl4UlFVRlJMRWxCUVVrc1VVRkJVU3hGUVVGRkxFTkJRVUU3UzBGRGRrSXNRMEZCUVR0SlFVTkVMRWxCUVVrc1MwRkJTeXhEUVVGRExFMUJRVTBzUTBGQlF5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkJPMGRCUTNwQ096czdPenM3TzBWQlQwUXNUMEZCVHl4RlFVRkZMRlZCUVZVc1RVRkJUU3hGUVVGRkxGRkJRVkVzUlVGQlJUdEpRVU51UXl4TlFVRk5MRU5CUVVNc1VVRkJVU3hIUVVGSExGVkJRVlVzUjBGQlJ5eEZRVUZGTzAxQlF5OUNMRkZCUVZFc1NVRkJTU3hSUVVGUkxFTkJRVU1zUjBGQlJ5eERRVUZETEVOQlFVRTdTMEZETVVJc1EwRkJRVHRKUVVORUxFbEJRVWtzVDBGQlR5eERRVUZETEUxQlFVMHNRMEZCUXl4RFFVRkRMRWxCUVVrc1JVRkJSU3hEUVVGQk8wZEJRek5DT3pzN096czdPMFZCVDBRc1RVRkJUU3hGUVVGRkxGVkJRVlVzVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlR0SlFVTnNReXhOUVVGTkxFTkJRVU1zVVVGQlVTeEhRVUZITEZWQlFWVXNSMEZCUnl4RlFVRkZPMDFCUXk5Q0xGRkJRVkVzU1VGQlNTeFJRVUZSTEVOQlFVTXNSMEZCUnl4RFFVRkRMRU5CUVVFN1MwRkRNVUlzUTBGQlFUdEpRVU5FTEVsQlFVa3NUVUZCVFN4RFFVRkRMRTFCUVUwc1EwRkJReXhEUVVGRExFbEJRVWtzUlVGQlJTeERRVUZCTzBkQlF6RkNPME5CUTBZc1EwRkJRVHM3UVVGRlJDeGpRVUZsTzBWQlEySXNTVUZCU1N4RlFVRkZMRlZCUVZVc1NVRkJTU3hGUVVGRk8wbEJRM0JDTEVsQlFVa3NRMEZCUXl4TFFVRkxMRU5CUVVNc1UwRkJVeXhEUVVGRGJVSXNUMEZCU1N4RlFVRkZMR2RDUVVGblFpeERRVUZETEVOQlFVRTdTVUZETlVNc1NVRkJTU3hEUVVGRExHTkJRV01zUTBGQlF5eFBRVUZQTEVWQlFVVXNTMEZCU3l4RFFVRkRMRU5CUVVFN1IwRkRjRU03UTBGRFJpeERRVUZCT3p0QlEzcEZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYTkNRVzVDTEVsQlFVMHNaVUZCWlN4SFFVRkhPMFZCUTNSQ0xFbEJRVWtzUlVGQlJTeFZRVUZWTEUxQlFVMHNSVUZCUlN4UlFVRlJMRVZCUVVVN1NVRkRhRU1zVFVGQlRTeERRVUZETEZGQlFWRXNRMEZCUXl4SlFVRkpMRWRCUVVjc1RVRkJUU3hEUVVGRExFZEJRVWNzUTBGQlFUdEpRVU5xUXl4UlFVRlJMRWxCUVVrc1VVRkJVU3hGUVVGRkxFTkJRVUU3UjBGRGRrSTdPMFZCUlVRc1IwRkJSeXhGUVVGRkxGVkJRVlVzVFVGQlRTeEZRVUZGTEZGQlFWRXNSVUZCUlR0SlFVTXZRaXhOUVVGTkxFTkJRVU1zVDBGQlR5eERRVUZETEVsQlFVa3NSVUZCUlN4RFFVRkJPMGxCUTNKQ0xGRkJRVkVzU1VGQlNTeFJRVUZSTEVWQlFVVXNRMEZCUVR0SFFVTjJRanREUVVOR0xFTkJRVUU3TzBGQlJVUXNkMEpCUVdVN1JVRkRZaXhKUVVGSkxHVkJRVUVzUlVGQlJTeEpRVUZKTEVWQlFVVTdTVUZEVml4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExGZEJRVmNzUlVGQlJTeGxRVUZsTEVOQlFVTXNRMEZCUVR0SFFVTnNSRHREUVVOR0xFTkJRVUU3TzBGRGRFTkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmMwSkJSU3hKUVVGSmIwSXNVMEZCVHl4RFFVRkJPenRCUVVWWWRFSXNTVUZCVFN4UFFVRlBMRWRCUVVjN1JVRkRaQ3hOUVVGTkxHbENRVUZCTEVWQlFVVXNTMEZCU3l4RlFVRkZPMGxCUTJJc1NVRkJTWE5DTEZOQlFVOHNRMEZCUXl4TFFVRkxMRU5CUVVNc1JVRkJSVHROUVVOc1FpeEJRVUZKTEVGQlFYTkRMRUZCUnpGRExFdEJRVXNzUjBGQlJ5eExRVUZMTEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVFN1MwRkRha0k3U1VGRFJDeEpRVUZKTEV0QlFVc3NTVUZCU1N4UFFVRlBMRXRCUVVzc1EwRkJReXhOUVVGTkxFdEJRVXNzVlVGQlZTeEZRVUZGTzAxQlF5OURMRXRCUVVzc1EwRkJReXhOUVVGTkxFVkJRVVVzUTBGQlFUdExRVU5tTzBkQlEwWTdSVUZEUkN4VFFVRlRMRzlDUVVGQkxFVkJRVVVzUzBGQlN5eEZRVUZGTzBsQlEyaENMRWxCUVVsQkxGTkJRVThzUTBGQlF5eExRVUZMTEVOQlFVTXNSVUZCUlR0TlFVTnNRaXhCUVVGSkxFRkJRWE5ETEVGQlJ6RkRMRXRCUVVzc1IwRkJSeXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVRTdTMEZEYWtJN1NVRkRSQ3hKUVVGSkxFdEJRVXNzU1VGQlNTeFBRVUZQTEV0QlFVc3NRMEZCUXl4VFFVRlRMRXRCUVVzc1ZVRkJWU3hGUVVGRk8wMUJRMnhFTEV0QlFVc3NRMEZCUXl4VFFVRlRMRVZCUVVVc1EwRkJRVHRMUVVOc1FqdEhRVU5HTzBWQlEwUXNUVUZCVFN4cFFrRkJRU3hGUVVGRkxFdEJRVXNzUlVGQlJUdEpRVU5pTEVsQlFVbEJMRk5CUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdE5RVU5zUWl4QlFVRkpMRUZCUVhORExFRkJSekZETEV0QlFVc3NSMEZCUnl4TFFVRkxMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVUU3UzBGRGFrSTdTVUZEUkN4SlFVRkpMRXRCUVVzc1NVRkJTU3hQUVVGUExFdEJRVXNzUTBGQlF5eE5RVUZOTEV0QlFVc3NWVUZCVlN4RlFVRkZPMDFCUXk5RExFdEJRVXNzUTBGQlF5eE5RVUZOTEVWQlFVVXNRMEZCUVR0TFFVTm1PMGRCUTBZN1EwRkRSaXhEUVVGQk96dEJRVVZFTEdkQ1FVRmxPMFZCUTJJc1NVRkJTU3hsUVVGQkxFVkJRVVVzU1VGQlNTeEZRVUZGTzBsQlExWkJMRk5CUVU4c1IwRkJSeXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEU5QlFVOHNRMEZCUVR0SlFVTTFRaXhKUVVGSkxFTkJRVU1zWTBGQll5eERRVUZETEZOQlFWTXNSVUZCUlN4UFFVRlBMRU5CUVVNc1EwRkJRVHRIUVVONFF6dERRVU5HTEVOQlFVRTdPMEZEYWtWRU96czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCYzBKQkxHdENRVUZsTEVOQlFVTXNXVUZCV1R0RlFVTXhRblJDTEVsQlFVMHNhVUpCUVdsQ0xFZEJRVWNzUTBGQlF5eFJRVUZSTEVWQlFVVXNWMEZCVnl4RlFVRkZMRk5CUVZNc1JVRkJSU3hUUVVGVExFTkJRVU1zUTBGQlFUdEZRVU4yUlVFc1NVRkJUU3hGUVVGRkxFZEJRVWM3U1VGRFZDeFJRVUZSTEVWQlFVVXNTVUZCU1R0SlFVTmtMRk5CUVZNc1JVRkJSU3hWUVVGVkxFZEJRVWNzUlVGQlJTeFJRVUZSTEVWQlFVVTdUVUZEYkVNc1NVRkJTU3hEUVVGRExFZEJRVWNzUlVGQlJUdFJRVU5TTEVWQlFVVXNRMEZCUXl4UlFVRlJMRWRCUVVjc1NVRkJTU3hEUVVGQk8xRkJRMnhDTEUxQlFVMDdUMEZEVUR0TlFVTkVMRWxCUVVrc1EwRkJReXhSUVVGUkxFVkJRVVU3VVVGRFlpeEZRVUZGTEVOQlFVTXNVVUZCVVN4SFFVRkhMRWxCUVVrc1UwRkJVeXhEUVVGRExFZEJRVWNzUTBGQlF5eERRVUZCTzA5QlEycERPMWRCUTBrN1VVRkRTQ3hGUVVGRkxFTkJRVU1zVVVGQlVTeEhRVUZITEVsQlFVa3NVMEZCVXl4RFFVRkRMRWRCUVVjc1JVRkJSU3hSUVVGUkxFTkJRVU1zUTBGQlFUdFBRVU16UXp0TlFVTkVMRTlCUVU4c1JVRkJSU3hEUVVGRExGRkJRVkU3UzBGRGJrSTdTVUZEUkN4SlFVRkpMRVZCUVVVc1ZVRkJWU3hSUVVGUkxFVkJRVVU3VFVGRGVFSXNSVUZCUlN4RFFVRkRMRkZCUVZFc1NVRkJTU3hGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEVsQlFVa3NRMEZCUXl4UlFVRlJMRU5CUVVNc1EwRkJRVHRMUVVNeFF6dEpRVU5FTEV0QlFVc3NSVUZCUlN4WlFVRlpPMDFCUTJwQ0xFVkJRVVVzUTBGQlF5eFJRVUZSTEVsQlFVa3NSVUZCUlN4RFFVRkRMRkZCUVZFc1EwRkJReXhMUVVGTExFVkJRVVVzUTBGQlFUdExRVU51UXp0SFFVTkdMRU5CUVVFN1JVRkRhME1zTUVKQlFVRTdTVUZEYWtNc1NVRkJTU3hwUWtGQmFVSXNRMEZCUXl4alFVRmpMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVU3VFVGRGRrTXNUVUZCVFN4RFFVRkRMR05CUVdNc1EwRkJReXhGUVVGRkxFVkJRVVVzYVVKQlFXbENMRU5CUVVNc1EwRkJReXhEUVVGRExFVkJRVVU3VVVGRE9VTXNSMEZCUnl4RlFVRkZMRmxCUVZrN1ZVRkRaaXhQUVVGUExFVkJRVVVzUTBGQlF5eFJRVUZSTEVsQlFVa3NSVUZCUlN4RFFVRkRMRkZCUVZFc1EwRkJReXhwUWtGQmFVSXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJRenRUUVVONFJEdFJRVU5FTEVkQlFVY3NSVUZCUlN4VlFVRlZMRVZCUVVVc1JVRkJSVHRWUVVOcVFpeEpRVUZKTEVWQlFVVXNRMEZCUXl4UlFVRlJMRVZCUVVVN1dVRkRaaXhGUVVGRkxFTkJRVU1zVVVGQlVTeERRVUZETEdsQ1FVRnBRaXhEUVVGRExFTkJRVU1zUTBGQlF5eERRVUZETEVkQlFVY3NSVUZCUlN4RFFVRkJPMWRCUTNaRE8xTkJRMFk3VDBGRFJpeERRVUZETEVOQlFVRTdTMEZEU0R0SFFVTkdPenRGUVdKRUxFdEJRVXRCTEVsQlFVMHNRMEZCUXl4SlFVRkpMR2xDUVVGcFFpeEZRV0ZvUXl4VlFVRkJPMFZCUTBRc1QwRkJUeXhGUVVGRk8wTkJRMVlzUTBGQlF5eEZRVUZGTEVOQlFVRTdPMEZETjBSS096czdPenM3T3pzN096czdPenM3T3pzN1FVRnJRa0U3UVVGSFFTeG5Ra0ZCWlR0RlFVTmlMRWxCUVVrc1JVRkJSU3hWUVVGVkxFbEJRVWtzUlVGQlJUdEpRVU53UWl4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExGZEJRVmNzUlVGQlJXOUVMRmRCUVZNc1JVRkJSU3hGUVVGRkxGTkJRVk1zUlVGQlJTeE5RVUZOTEVWQlFVVXNRMEZCUXl4RFFVRkJPMGRCUTI1Rk8wTkJRMFlzUTBGQlFUczdRVU42UWtRN096czdPenM3T3pzN096czdPenM3T3pzN1FVRnRRa0Z3UkN4SlFVRk5kME1zVFVGQlNTeEhRVUZIT3pzN096czdSVUZOV0N4WFFVRlhMSE5DUVVGQkxFVkJRVVVzVDBGQlR5eEZRVUZGTzBsQlEzQkNMRTlCUVU4c1EwRkJReXhKUVVGSkxFTkJRVU1zTUVWQlFYbEZPMDFCUTNCR0xESkdRVUZ6Uml4RFFVRkZMRU5CUVVFN1IwRkRNMFk3UTBGRFJpeERRVUZCT3p0QlFVVkVMR0ZCUVdVN1JVRkRZaXhKUVVGSkxHVkJRVUVzUlVGQlJTeEpRVUZKTEVWQlFVVTdTVUZEVml4SlFVRkpMRU5CUVVNc1kwRkJZeXhEUVVGRExFMUJRVTBzUlVGQlJVRXNUVUZCU1N4RFFVRkRMRU5CUVVFN1IwRkRiRU03UTBGRFJpeERRVUZCT3p0QlEyNURSRHM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmNVSkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJRMEU3UVVGSFFTeEJRVU5CTEVGQlEwRXNRVUZEUVN4QlFVTkJMRUZCUTBFc1FVRkRRU3hCUVVOQkxFRkJSVUVzWjBKQlFXVTdSVUZEWW1Fc1lVRkJWenRGUVVOWVF5eFRRVUZQTzBWQlExQkRMRkZCUVUwN1JVRkRUa01zVjBGQlV6dEZRVU5VTEZkQlFWYzdSVUZEV0VNc1QwRkJTenRGUVVOTUxGTkJRVk03UlVGRFZFTXNWMEZCVXp0RlFVTlVReXhMUVVGSE8wVkJRMGhETEdGQlFWYzdSVUZEV0VNc2FVSkJRV1U3UlVGRFprTXNVMEZCVHp0RlFVTlFkRUlzVFVGQlNUdERRVU5NTEVOQlFVRTdPMEZET1VORWVFTXNTVUZCVFN4UFFVRlBMRWRCUVVjc1NVRkJTU3hEUVVGRExFbEJRVWtzUTBGQlFUczdRVUZGZWtJc1NVRkJTU3hEUVVGRExFbEJRVWtzUjBGQlJ5eFpRVUZaTzBWQlEzUkNMRTlCUVU4c1EwRkJReXhMUVVGTExFTkJRVU1zU1VGQlNTeEZRVUZGTEZOQlFWTXNRMEZCUXl4RFFVRkJPMFZCUXpsQ1FTeEpRVUZOTEU5QlFVOHNSMEZCUnl4VlFVRlZMRU5CUVVNc1RVRkJUU3hEUVVGREswUXNVMEZCVHl4RFFVRkRMRU5CUVVFN08wVkJSVEZETEU5QlFVOHNRMEZCUXl4UFFVRlBMRU5CUVVNc1ZVRkJWU3hOUVVGTkxFVkJRVVU3U1VGRGFFTXNTVUZCU1N4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFTkJRVU1zUTBGQlFUdEhRVU55UWl4RFFVRkRMRU5CUVVFN1EwRkRTQ3hEUVVGQk96dEJRVVZFTEVsQlFVa3NUVUZCVFN4RFFVRkRMRWRCUVVjc1JVRkJSVHRGUVVOa0xFbEJRVWtzUTBGQlF5eEpRVUZKTEVOQlFVTXNUVUZCVFN4RFFVRkRMRWRCUVVjc1EwRkJReXhEUVVGQk8wTkJRM1JDTEVGQlJVUXNRVUZCYlVJN095SjlcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL193ZWV4LXZ1ZS1yZW5kZXJAMC4xMi4yNUB3ZWV4LXZ1ZS1yZW5kZXIvZGlzdC9pbmRleC5jb21tb24uanNcbi8vIG1vZHVsZSBpZCA9IDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCkgfHwgKDEsZXZhbCkoXCJ0aGlzXCIpO1xufSBjYXRjaChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpXG5cdFx0ZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=